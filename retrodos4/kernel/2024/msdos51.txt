     1                                  ;*****************************************************************************
     2                                  ; MSDOS5.BIN (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 09/01/2024 - Retro DOS v4.1 ((Previous: 27/09/2023))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos5.s -l msdos5.lst -o MSDOS5.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    27                                  
    28                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    29                                  ;	(as included binary, 'MSDOS5.BIN') 
    30                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    31                                  ;	
    32                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    33                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    34                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    35                                        
    36                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    37                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    38                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    39                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    40                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    41                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    42                                  
    43                                  ;=============================================================================
    44                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    45                                  ;-----------------------------------------------------------------------------
    46                                  
    47                                  ; MSDOS 6.0 Kernel source files:
    48                                  ;	MSDATA.ASM, 
    49                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    50                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    51                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    52                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    53                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    54                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    55                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    56                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    57                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    58                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    59                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    60                                  ;
    61                                  ; MSDOS 2.0 Kernel source files:
    62                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    63                                  ;	MSCODE.ASM
    64                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    65                                  
    66                                  ;============================================================================
    67                                  ; DOSLINK
    68                                  ;============================================================================
    69                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    70                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    71                                  ;stdio time xenix xenix2
    72                                  
    73                                  ;============================================================================
    74                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    75                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    76                                  ;============================================================================
    77                                  ;
    78                                  ; ###########################################################################
    79                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    80                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    81                                  ; #			 Licensed to: Freeware version			    #
    82                                  ; ###########################################################################
    83                                  ;
    84                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    85                                  
    86                                  ; ---------------------------------------------------------------------------
    87                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    88                                  ; Format      :	Binary file
    89                                  ;============================================================================
    90                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
    91                                  ;----------------------------------------------------------------------------
    92                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
    93                                  
    94                                  ;============================================================================
    95                                  ; MSDOS.ASM
    96                                  ;============================================================================
    97                                  
    98                                  ;TITLE   Standard MSDOS
    99                                  ;NAME    MSDOS_2
   100                                  
   101                                  ; Number of disk I/O buffers
   102                                  
   103                                  ;	INCLUDE STDSW.ASM
   104                                  ;       INCLUDE MSHEAD.ASM
   105                                  ;       INCLUDE MSDATA.ASM
   106                                  
   107                                  ;	END
   108                                  
   109                                  ;============================================================================
   110                                  ; STDSW.ASM
   111                                  ;============================================================================
   112                                  
   113                                  TRUE    EQU     0FFFFH
   114                                  FALSE   EQU     ~TRUE ; NOT TRUE
   115                                  
   116                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   117                                  ; version of the operating system
   118                                  ;MSVER   EQU	false
   119                                  ;IBM     EQU	true
   120                                  ;WANG    EQU	FALSE
   121                                  ;ALTVECT EQU	FALSE
   122                                  
   123                                  ; Set this switch to cause DOS to move itself to the end of memory
   124                                  ;HIGHMEM EQU     FALSE
   125                                  
   126                                  ;	IF      IBM
   127                                  ESCCH    EQU	 0			;character to begin escape seq.
   128                                  CANCEL   EQU	 27			;Cancel with escape
   129                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   130                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   131                                  ZEROEXT  EQU	TRUE
   132                                  ;       ELSE
   133                                  ;       IF      WANG			;Are we assembling for WANG?
   134                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   135                                  ;       ELSE
   136                                  ;ESCCH	 EQU	1BH
   137                                  ;       ENDIF
   138                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   139                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   140                                  					;and off if not WANG
   141                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   142                                  					;and off
   143                                  ;ZEROEXT EQU	TRUE
   144                                  ;        ENDIF
   145                                  
   146                                  ;============================================================================
   147                                  ; MSHEAD.ASM
   148                                  ;============================================================================
   149                                  
   150                                  ;--------------------------------------------------------------
   151                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   152                                  ;--------------------------------------------------------------
   153                                  
   154                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   155                                  ;        by Microsoft MSDOS development group:
   156                                  ;           Tim Paterson (Ret.)
   157                                  ;           Aaron Reynolds
   158                                  ;           Nancy Panners (Parenting)
   159                                  ;           Mark Zbikowski
   160                                  ;           Chris Peters (BIOS) (ret.)
   161                                  
   162                                  ; ****************** Revision History *************************
   163                                  ;          >> EVERY change must noted below!! <<
   164                                  ;
   165                                  ; 0.34 12/29/80 General release, updating all past customers
   166                                  ; 0.42 02/25/81 32-byte directory entries added
   167                                  ; 0.56 03/23/81 Variable record and sector sizes
   168                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   169                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   170                                  ; 0.75 04/17/81 Improve and correct buffer handling
   171                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   172                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   173                                  ; 1.00 04/28/81 Renumber for general release
   174                                  ; 1.01 05/12/81 Fix bug in `STORE'
   175                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   176                                  ;               RENAME fix, general cleanup
   177                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   178                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   179                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   180                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   181                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   182                                  ;               of smaller improvements
   183                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   184                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   185                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   186                                  ;               zero extent field in IBM version (back to 1.01!)
   187                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   188                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   189                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   190                                  ;               is searched first when possible to minimize I/O
   191                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   192                                  ;               full sector write when file is growing
   193                                  ;      03/09/82 Multiple I/O buffers
   194                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   195                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   196                                  ;               must invalidate all buffers (disk and directory).
   197                                  ; 1.27 03/31/82 Installable device drivers
   198                                  ;                 Function call 47 - Get pointer to device table list
   199                                  ;                 Function call 48 - Assign CON AUX LIST
   200                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   201                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   202                                  ;               call entries.  Most CS relative references changed to SS
   203                                  ;               relative with an eye toward putting a portion of the DOS in
   204                                  ;               ROM.  DOS source also broken into header, data and code pieces
   205                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   206                                  ;               return the current values.
   207                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   208                                  ;               call to return flag location (call 29)
   209                                  ;      04/15/82 Volume ID attribute added
   210                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   211                                  ;               avoid a CS relative reference.
   212                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   213                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   214                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   215                                  ;               call 49.
   216                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   217                                  ;               address of DPB
   218                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   219                                  ;               writting to console device via file I/O.  Added a console
   220                                  ;               output attribute to devices.
   221                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   222                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   223                                  ;               as devices....  pipes, redirection now possible
   224                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   225                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   226                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   227                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   228                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   229                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   230                                  ;               out back about 1.27 or so (oops).  ARR
   231                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   232                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   233                                  ;               RMDIR Xenix calls
   234                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   235                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   236                                  ;               Frees up lots of memory.
   237                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   238                                  ;               system buffers
   239                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   240                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   241                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   242                                  ;               changed to set file handle environment.
   243                                  ; 2.00 08/01/82 Number for IBM release
   244                                  ;      01/19/83 No environ bug in EXEC
   245                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   246                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   247                                  ;      01/27/83 Growcnt fixed for 32-bits
   248                                  ;      01/27/83 Find-first problem after create
   249                                  ; 2.01 02/17/83 International DOS
   250                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   251                                  ;               an IBM PC
   252                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   253                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   254                                  ; 2.10 03/09/83 Start of NETWORK support
   255                                  ;		New Buffer structure
   256                                  ;		New Sytem file table structure
   257                                  ;		FCB moved to internal representation
   258                                  ;		DOS re-organized
   259                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   260                                  ;		device interface.
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 2.50 09/12/83 More network stuff
   264                                  ;
   265                                  ; *************************************************************
   266                                  
   267                                  ; ----------------------------------------------------------------------------
   268                                  ; EQUATES
   269                                  
   270                                  ; Interrupt Entry Points:
   271                                  
   272                                  ; INTBASE:      ABORT
   273                                  ; INTBASE+4:    COMMAND
   274                                  ; INTBASE+8:    BASE EXIT ADDRESS
   275                                  ; INTBASE+C:    CONTROL-C ABORT
   276                                  ; INTBASE+10H:  FATAL ERROR ABORT
   277                                  ; INTBASE+14H:  BIOS DISK READ
   278                                  ; INTBASE+18H:  BIOS DISK WRITE
   279                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   280                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   281                                  ; INTBASE+40H:  Long jump to CALL entry point
   282                                  
   283                                  ENTRYPOINTSEG   EQU     0Ch
   284                                  MAXDIF          EQU     0FFFh
   285                                  SAVEXIT         EQU     10
   286                                  ; 06/05/2019
   287                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   288                                  
   289                                         ; INCLUDE DOSSYM.ASM
   290                                         ; INCLUDE DEVSYM.ASM
   291                                  
   292                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   293                                  ; PAGE
   294                                  ; There are three kinds of context resets that can occur during normal DOS
   295                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   296                                  ; be handles in a clean fashion that allows nested executions along with the
   297                                  ; ability to trap one's own errors.
   298                                  ;
   299                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   300                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   301                                  ;           follows:
   302                                  ;
   303                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   304                                  ;           Save it in static memory.
   305                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   306                                  ;
   307                                  ;           The interrupt service routine must preserve all registers and
   308                                  ;           return carry set iff the operation is to be aborted (via abort
   309                                  ;           system call), otherwise, carry is reset and the operation is
   310                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   311                                  ;           RESULTS.
   312                                  ;
   313                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   314                                  ;           restore INT int_ctrl_c from the saved vector.
   315                                  ;
   316                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   317                                  ;           also preserve registers and return one of three values in AL: 0 and
   318                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   319                                  ;           himself is not to issue the abort, rather, the dos will do it for
   320                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   321                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   322                                  ;
   323                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   324                                  ;           abort call.  This is reserved for knowledgeable system programs.
   325                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   326                                  
   327                                  ;SUBTTL SEGMENT DECLARATIONS
   328                                  
   329                                  ; The following are all of the segments used.  They are declared in the order
   330                                  ; that they should be placed in the executable
   331                                  
   332                                  ;
   333                                  ; segment ordering for MSDOS
   334                                  ;
   335                                  
   336                                  ;START           SEGMENT BYTE PUBLIC 'START'
   337                                  ;START           ENDS
   338                                  
   339                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   340                                  ;CONSTANTS       ENDS
   341                                  
   342                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   343                                  ;DATA            ENDS
   344                                  
   345                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   346                                  ;CODE            ENDS
   347                                  
   348                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   349                                  ;LAST            ENDS
   350                                  
   351                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   352                                  
   353                                  ; The following segment is defined such that the data/const classes appear
   354                                  ; before the code class for ROMification
   355                                  
   356                                  ;START		SEGMENT BYTE PUBLIC 'START'
   357                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   358                                  ;		JMP     DOSINIT
   359                                  ;START		ENDS
   360                                  
   361                                  ;============================================================================
   362                                  ; BPB.INC, MSDOS 6.0, 1991
   363                                  ;============================================================================
   364                                  ; 09/07/2018 - Retro DOS v3.0
   365                                  
   366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   367                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   368                                  ;									   ;
   369                                  
   370                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   371                                  ;
   372                                  ;	The BPB contains information about the disk structure. It dates
   373                                  ;	back to the earliest FAT systems and so FAT information is
   374                                  ;	intermingled with physical driver information.
   375                                  ;
   376                                  ;	A boot sector contains a BPB for its device; for other disks
   377                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   378                                  ;	information in the DPB.
   379                                  ;
   380                                  ;	The BDS structure contains a BPB within it. 
   381                                  
   382                                  struc A_BPB
   383 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   384 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   385 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   386 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   387 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   388 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   389 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   390 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   391 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   392 0000000F ????                    .BPB_HEADS:		resw	1
   393 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   394 00000013 ????                    			resw	1
   395 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   396 00000017 ????                    			resw	1
   397 00000019 ????????????            			resb	6	; NOTE:  many times these
   398                                  ;					; 	 6 bytes are omitted
   399                                  ;					;	 when BPB manipulations
   400                                  ;					;	 are performed!
   401                                  .size:
   402                                  endstruc
   403                                  
   404                                  ;                                                                          ;
   405                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   406                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   407                                  
   408                                  ;============================================================================
   409                                  ; BUFFER.INC, MSDOS 6.0, 1991
   410                                  ;============================================================================
   411                                  ; 04/05/2019 - Retro DOS v4.0
   412                                  
   413                                  ; <Disk I/O Buffer Header>
   414                                  
   415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   416                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   417                                  ;									   ;
   418                                  
   419                                  ; Field definition for I/O buffer information
   420                                  
   421                                  struc BUFFINFO
   422 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   423 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   424 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   425                                  				; SFT table index (bit 7 = 1)
   426                                  				; = FFH if buffer free
   427 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   428                                  				;	= 0 if Local device buffer
   429                                  				; Bit 6 = 1 if buffer dirty
   430                                  				; Bit 5 = Reserved
   431                                  				; Bit 4 = Search bit (bit 7 = 1)
   432                                  				; Bit 3 = 1 if buffer is DATA
   433                                  				; Bit 2 = 1 if buffer is DIR
   434                                  				; Bit 1 = 1 if buffer is FAT
   435                                  				; Bit 0 = Reserved
   436 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   437                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   438 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   439 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   440 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   441 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   442 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   443                                  .size:	; 20 bytes
   444                                  endstruc
   445                                  
   446                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   447                                  				;For buf_flags bit 7 = 1, this is the byte
   448                                  				;offset of the start of the buffer in
   449                                  				;the file pointed to by buf_ID. Thus
   450                                  				;the buffer starts at location
   451                                  				;buf_offset in the file and contains
   452                                  				;buf_fill bytes.
   453                                  
   454                                  BUFINSIZ        EQU     BUFFINFO.size
   455                                  
   456                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   457                                  
   458                                  ;Flag byte masks
   459                                  buf_isnet	EQU	10000000B
   460                                  buf_dirty	EQU	01000000B
   461                                  ;***
   462                                  buf_visit	EQU	00100000B
   463                                  ;***
   464                                  buf_snbuf	EQU	00010000B
   465                                  
   466                                  buf_isDATA	EQU	00001000B
   467                                  buf_isDIR	EQU	00000100B
   468                                  buf_isFAT	EQU	00000010B
   469                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   470                                  
   471                                  buf_NetID	EQU	BUFINSIZ
   472                                  
   473                                  ;                                                                          ;
   474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   476                                  
   477                                  ;============================================================================
   478                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   479                                  ;============================================================================
   480                                  ; 04/05/2019 - Retro DOS v4.0
   481                                  
   482                                  ; <Control character definitions>
   483                                  
   484                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   485                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   486                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   487                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   488                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   489                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   490                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   491                                  c_HT	    EQU     09h 	; ^I ASCII tab
   492                                  
   493                                  ; <User stack inside of system call>
   494                                  ; Location of user registers relative user stack pointer
   495                                  
   496                                  struc	user_env   ; user_environ
   497 00000000 ????                    .user_AX: resw 1
   498 00000002 ????                    .user_BX: resw 1
   499 00000004 ????                    .user_CX: resw 1
   500 00000006 ????                    .user_DX: resw 1
   501 00000008 ????                    .user_SI: resw 1
   502 0000000A ????                    .user_DI: resw 1
   503 0000000C ????                    .user_BP: resw 1
   504 0000000E ????                    .user_DS: resw 1
   505 00000010 ????                    .user_ES: resw 1
   506 00000012 ????                    .user_IP: resw 1
   507 00000014 ????                    .user_CS: resw 1
   508 00000016 ????                    .user_F:  resw 1
   509                                  .size:
   510                                  endstruc
   511                                  
   512                                  ; ---- <Disk map> ----
   513                                  
   514                                  ;	MSDOS partitions the disk into 4 sections:
   515                                  ;
   516                                  ;  phys sector 0:   +-------------------+
   517                                  ;	|	    | boot/reserved	|
   518                                  ;	|	    +-------------------+
   519                                  ;	|	    |  File allocation	|
   520                                  ;	v	    |	   table(s)	|
   521                                  ;		    |  (multiple copies |
   522                                  ;		    |	  are kept)	|
   523                                  ;		    +-------------------+
   524                                  ;		    |	  Directory	|
   525                                  ;		    +-------------------+
   526                                  ;		    |	  File space	|
   527                                  ;		    +-------------------+
   528                                  ;		    |	Unaddressable	|
   529                                  ;		    |  (to end of disk) |
   530                                  ;		    +-------------------+
   531                                  ;
   532                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   533                                  ; adjusted to maximize the file space addressable.
   534                                  
   535                                  ; <File allocation Table information>
   536                                  
   537                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   538                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   539                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   540                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   541                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   542                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   543                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   544                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   545                                  ; The first available allocation unit is assigned entry number two, and even
   546                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   547                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   548                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   549                                  ; the next cluster in the file.
   550                                  ;
   551                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   552                                  ; do because these clusters show as allocated, but are not part of any
   553                                  ; allocation chain and thus will never be allocated to a file.	A particular
   554                                  ; number is selected so that disk checking programs know what to do (ie.  a
   555                                  ; cluster with entry FF7H which is not in a chain is not an error).
   556                                  
   557                                  ;**	Character Type Flags
   558                                  ;
   559                                  ;	These flags are used in a lookup table indexed by the character code.
   560                                  ;	They're used to quickly classify characters when parsing paths.
   561                                  ;	I think that these are only used to parse FCBs - jgl
   562                                  
   563                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   564                                  FDELIM	equ 2		; is a delimiter
   565                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   566                                  FFCB	equ 8		; is valid in an FCB
   567                                  
   568                                  ;** Bit definitions for DOS_FLAG
   569                                  ;
   570                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   571                                  ;	  $open to indicate to the redirector that this open is being made
   572                                  ;	  by an exec call.
   573                                  ;
   574                                  ; Bit 2
   575                                  ;
   576                                  ; M003, M027:
   577                                  ;
   578                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   579                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   580                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   581                                  ; user program in the case of an Exec call. The next call to DOS will turn
   582                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   583                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   584                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   585                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   586                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   587                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   588                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   589                                  ; Bit 2 will be unconditionally cleared here.
   590                                  ;
   591                                  ; M009, M027:
   592                                  ;
   593                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   594                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   595                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   596                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   597                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   598                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   599                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   600                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   601                                  ; Bit 2 will be unconditionally cleared here.
   602                                  
   603                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   604                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   605                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   606                                  
   607                                  ;============================================================================
   608                                  ; VECTOR.INC, MSDOS 6.0, 1991
   609                                  ;============================================================================
   610                                  ; 04/05/2019 - Retro DOS v4.0
   611                                  
   612                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   613                                  
   614                                  ; <interrupt definitions>
   615                                  
   616                                  INTTAB          EQU     20H
   617                                  INTBASE         EQU     4 * INTTAB
   618                                  ENTRYPOINT      EQU     INTBASE+40H
   619                                  
   620                                  ;	IF      ALTVECT
   621                                  ;ALTTAB  EQU     0F0H
   622                                  ;ALTBASE EQU     4 * ALTTAB
   623                                  ;	ENDIF
   624                                  
   625                                  ;
   626                                  ; interrupt assignments
   627                                  ;
   628                                  ;	IF	NOT ALTVECT
   629                                  int_abort	    EQU     INTTAB	; abort process
   630                                  int_command	    EQU     int_abort+1 ; call MSDOS
   631                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   632                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   633                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   634                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   635                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   636                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   637                                  					; resident
   638                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   639                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   640                                  ;									   ;
   641                                  int_spooler	    EQU     int_abort+8 ; spooler call
   642                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   643                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   644                                  ;									   ;
   645                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   646                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   647                                  ;	ELSE
   648                                  ;int_abort	    EQU     INTTAB	; abort process
   649                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   650                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   651                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   652                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   653                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   654                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   655                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   657                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   658                                  ;									   ;
   659                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   660                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   661                                  ;									   ;
   662                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   663                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   664                                  ;	ENDIF
   665                                  
   666                                  addr_int_abort		EQU    4 * int_abort
   667                                  addr_int_command	EQU    4 * int_command
   668                                  addr_int_terminate	EQU    4 * int_terminate
   669                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   670                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   671                                  addr_int_disk_read	EQU    4 * int_disk_read
   672                                  addr_int_disk_write	EQU    4 * int_disk_write
   673                                  addr_int_keep_process	EQU    4 * int_keep_process
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   676                                  ;									   ;
   677                                  addr_int_spooler	EQU    4 * int_spooler
   678                                  addr_int_fastcon	EQU    4 * int_fastcon
   679                                  addr_int_ibm		EQU    4 * int_IBM
   680                                  ;									   ;
   681                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   682                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   683                                  
   684                                  ;============================================================================
   685                                  ; DIRENT.INC, MSDOS 6.0, 1991
   686                                  ;============================================================================
   687                                  ; 04/05/2019 - Retro DOS v4.0
   688                                  
   689                                  ; BREAK <Directory entry>
   690                                  
   691                                  ;
   692                                  ;       +---------------------------+
   693                                  ;       |  (12 BYTE) filename/ext   |       0       0
   694                                  ;       +---------------------------+
   695                                  ;       |     (BYTE) attributes     |       11      B
   696                                  ;       +---------------------------+
   697                                  ;       |    (10 BYTE) reserved     |       12      C
   698                                  ;       +---------------------------+
   699                                  ;       | (WORD) time of last write |       22      16
   700                                  ;       +---------------------------+
   701                                  ;       | (WORD) date of last write |       24      18
   702                                  ;       +---------------------------+
   703                                  ;       |   (WORD) First cluster    |       26      1A
   704                                  ;       +---------------------------+
   705                                  ;       |     (DWORD) file size     |       28      1C
   706                                  ;       +---------------------------+
   707                                  ;
   708                                  ;   First byte of filename  = E5 -> free directory entry
   709                                  ;                           = 00 -> end of allocated directory
   710                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   711                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   712                                  ;
   713                                  struc dir_entry
   714 00000000 <res Bh>                .dir_name:	resb 11			; file name
   715 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   716 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   717 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   718 00000010 ??                      .dir_attr2:	resb 1			; reserved
   719 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   720 00000016 ????                    .dir_time:	resw 1			; time of last write
   721 00000018 ????                    .dir_date:	resw 1			; date of last write
   722 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   723 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   724 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   725                                  .size:
   726                                  endstruc
   727                                  
   728                                  attr_read_only      EQU      1h
   729                                  attr_hidden         EQU      2h
   730                                  attr_system         EQU      4h
   731                                  attr_volume_id      EQU      8h
   732                                  attr_directory      EQU     10h
   733                                  attr_archive        EQU     20h
   734                                  attr_device	    EQU     40h	; This is a VERY special bit.
   735                                  				;   NO directory entry on a disk EVER
   736                                  				;   has this bit set. It is set non-zero
   737                                  				;   when a device is found by GETPATH
   738                                  
   739                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   740                                                                          ; OR of hard attributes for FINDENTRY
   741                                  
   742                                  attr_ignore         EQU     attr_read_only+attr_archive
   743                                                                          ; ignore this(ese) attribute(s)
   744                                                                          ; during search first/next
   745                                  
   746                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   747                                                                          ; changeable via CHMOD
   748                                  
   749                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   750                                  
   751                                  ;============================================================================
   752                                  ; DPB.INC, MSDOS 6.0, 1991
   753                                  ;============================================================================
   754                                  ; 24/04/2019 - Retro DOS v4.0
   755                                  
   756                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   757                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   758                                  
   759                                  ; ---------------------------------------------------------------------------
   760                                  ;**	DPB - Drive Parameter Block
   761                                  ;
   762                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   763                                  ;	possibly inaccurate deductions from code study... - jgl
   764                                  ;
   765                                  ;	The DPB is DOS's main structure for describing block devices.
   766                                  ;	It contains info about the "Drive" intermingled with info about
   767                                  ;	the FAT file system which is presumably on the drive.  I don't know
   768                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   769                                  ;
   770                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   771                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   772                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   773                                  ; ---------------------------------------------------------------------------
   774                                  
   775                                  struc	DPB
   776 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   777 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   778 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   779 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   780 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   781 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   782 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   783 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   784 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   785 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   786                                  ; MSDOS 3.3
   787                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   788                                  ; MSDOS 6.0
   789 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   790 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   791 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   792 00000017 ??                      .MEDIA:		resb 1		; Media byte
   793 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   794                                  				; check the first time this DPB is used
   795 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   796 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   797 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   798                                  .size:
   799                                  endstruc
   800                                  
   801                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   802                                  
   803                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   804                                  
   805                                  ;                                                                          ;
   806                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   807                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   808                                  
   809                                  ;============================================================================
   810                                  ; SF.INC, MSDOS 6.0, 1991
   811                                  ;============================================================================
   812                                  ; 25/04/2019 - Retro DOS v4.0
   813                                  ; 07/07/2018 - Retro DOS v3.0
   814                                  
   815                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   816                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   817                                  ;                                                                          ;
   818                                  
   819                                  ; ---------------------------------------------------------------------------
   820                                  ;**	SF.INC - System File Table
   821                                  ;
   822                                  ;   AN000   version 4.00   Jan. 1988
   823                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   824                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   825                                  ; ---------------------------------------------------------------------------
   826                                  ;**	System File Table SuperStructure
   827                                  ;
   828                                  ;	The system file table entries are allocated in contiguous groups.
   829                                  ;	There may be more than one such groups; the SF "superstructure"
   830                                  ;	tracks the groups.
   831                                  ; ---------------------------------------------------------------------------
   832                                  
   833                                  struc	SFT
   834 00000000 ????????                .SFLink:	resd 1
   835 00000004 ????                    .SFCount:	resw 1		; number of entries
   836 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   837                                  .size:
   838                                  endstruc
   839                                  
   840                                  ; ---------------------------------------------------------------------------
   841                                  ;**	System file table entry
   842                                  ;
   843                                  ;	These are the structures which are at SFTABLE in the SF structure.
   844                                  ; ---------------------------------------------------------------------------
   845                                  
   846                                  ; 25/04/2019 - Retro DOS v4.0
   847                                  
   848                                  struc SF_ENTRY
   849 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   850                                  				;   if FCB then ref count
   851 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   852 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   853 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   854                                  				; Bit 15 = 1 if remote file
   855                                  				;	 = 0 if local file or device
   856                                  				; Bit 14 = 1 if date/time is not to be
   857                                  				;   set from clock at CLOSE.  Set by
   858                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   859                                  				;   other reseters of the dirty bit
   860                                  				;   (WRITE)
   861                                  				; Bit 13 = Pipe bit (reserved)
   862                                  				;
   863                                  				; Bits 0-7 (old FCB_devid bits)
   864                                  				; If remote file or local file, bit
   865                                  				; 6=0 if dirty Device ID number, bits
   866                                  				; 0-5 if local file.
   867                                  				; bit 7=0 for local file, bit 7
   868                                  				;      =1 for local I/O device
   869                                  				; If local I/O device, bit 6=0 if EOF (input)
   870                                  				;		Bit 5=1 if Raw mode
   871                                  				;		Bit 0=1 if console input device
   872                                  				;		Bit 1=1 if console output device
   873                                  				;		Bit 2=1 if null device
   874                                  				;		Bit 3=1 if clock device
   875 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   876                                  				; to device header if local device,
   877                                  				; points to net device header if
   878                                  				; remote
   879 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   880 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   881 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   882 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   883 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   884                                  
   885                                  ; Starting here, the next 7 bytes may be used by the file system to store
   886                                  ; an ID
   887                                  
   888                                  ; 09/07/2018 - Retro DOS v3.0
   889                                  
   890                                  ; MSDOS 3.3 SF.INC, 1987
   891                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   892                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   893                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   894                                  ;				; for this file
   895                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   896                                  
   897                                  ; MSDOS 6.0, SF.INC, 1991
   898 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   899 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   900                                  				; for this file
   901 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   902                                  
   903                                  ; End of 7 bytes of file-system specific info.
   904                                  
   905 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   906                                  				; directory entry.  This is used by
   907                                  				; close to detect file deleted and
   908                                  				; disk changed errors.
   909                                  ; SHARING INFO
   910 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   911 0000002F ????                    .sf_UID:	resw	1
   912 00000031 ????                    .sf_PID:	resw	1
   913 00000033 ????                    .sf_MFT:	resw	1
   914                                  
   915                                  ; MSDOS 6.0, SF.INC, 1991
   916 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   917 00000037 ????????                .sf_IFS_HDR:	resd	1
   918                                  
   919                                  .size:
   920                                  endstruc
   921                                  
   922                                  ; 20/07/2018
   923                                  ; MSDOS 3.3, SF.INC, 1987
   924                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   925                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   926                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   927                                  ; MSDOS 6.0, SF.INC, 1991
   928                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   929                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   930                                  
   931                                  ; 19/07/2018
   932                                  ; MSDOS 3.3, SF.INC, 1987
   933                                  
   934                                  sf_default_number  EQU	5
   935                                  
   936                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   937                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   938                                  ; by placing a -1 in the ref_count field.
   939                                  
   940                                  sf_busy EQU -1
   941                                  
   942                                  ; mode mask for FCB detection
   943                                  sf_isFCB		EQU	1000000000000000B
   944                                  
   945                                  ; Flag word masks
   946                                  sf_isnet		EQU	1000000000000000B
   947                                  sf_close_nodate 	EQU	0100000000000000B
   948                                  sf_pipe 		EQU	0010000000000000B
   949                                  sf_no_inherit		EQU	0001000000000000B
   950                                  sf_net_spool		EQU	0000100000000000B
   951                                  
   952                                  ; 25/04/2019
   953                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   954                                  
   955                                  ; ---------------------------------------------------------------------------
   956                                  ; Local file/device flag masks
   957                                  ; ---------------------------------------------------------------------------
   958                                  
   959                                  devid_file_clean        EQU     40h     ; true if file and not written
   960                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   961                                  
   962                                  devid_device            EQU     80h     ; true if a device
   963                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   964                                  devid_device_raw        EQU     20h     ; true if in raw mode
   965                                  devid_device_special    EQU     10h     ; true if special device
   966                                  devid_device_clock      EQU     08h     ; true if clock device
   967                                  devid_device_null       EQU     04h     ; true if null device
   968                                  devid_device_con_out    EQU     02h     ; true if console output
   969                                  devid_device_con_in     EQU     01h     ; true if consle input
   970                                  
   971                                  ; ---------------------------------------------------------------------------
   972                                  ; structure of devid field as returned by IOCTL is:
   973                                  ;
   974                                  ;       BIT     7   6   5   4   3   2   1   0
   975                                  ;             |---|---|---|---|---|---|---|---|
   976                                  ;             | I | E | R | S | I | I | I | I |
   977                                  ;             | S | O | A | P | S | S | S | S |
   978                                  ;             | D | F | W | E | C | N | C | C |
   979                                  ;             | E |   |   | C | L | U | O | I |
   980                                  ;             | V |   |   | L | K | L | T | N |
   981                                  ;             |---|---|---|---|---|---|---|---|
   982                                  ;       ISDEV = 1 if this channel is a device
   983                                  ;             = 0 if this channel is a disk file
   984                                  ;
   985                                  ;       If ISDEV = 1
   986                                  ;
   987                                  ;             EOF = 0 if End Of File on input
   988                                  ;             RAW = 1 if this device is in Raw mode
   989                                  ;                 = 0 if this device is cooked
   990                                  ;             ISCLK = 1 if this device is the clock device
   991                                  ;             ISNUL = 1 if this device is the null device
   992                                  ;             ISCOT = 1 if this device is the console output
   993                                  ;             ISCIN = 1 if this device is the console input
   994                                  ;
   995                                  ;       If ISDEV = 0
   996                                  ;             EOF = 0 if channel has been written
   997                                  ;             Bits 0-5  are  the  block  device  number  for
   998                                  ;                 the channel (0 = A, 1 = B, ...)
   999                                  ; ---------------------------------------------------------------------------
  1000                                  
  1001                                  devid_ISDEV     EQU     80h
  1002                                  devid_EOF       EQU     40h
  1003                                  devid_RAW       EQU     20h
  1004                                  devid_SPECIAL   EQU     10H
  1005                                  devid_ISCLK     EQU     08h
  1006                                  devid_ISNUL     EQU     04h
  1007                                  devid_ISCOT     EQU     02h
  1008                                  devid_ISCIN     EQU     01h
  1009                                  
  1010                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1011                                  
  1012                                  ;============================================================================
  1013                                  ; PDB.INC, MSDOS 6.0, 1991
  1014                                  ;============================================================================
  1015                                  ; 04/05/2019 - Retro DOS v4.0
  1016                                  ; 08/07/2018 - Retro DOS v3.0
  1017                                  
  1018                                  ; ---------------------------------------------------------------------------
  1019                                  ; BREAK <Process data block>
  1020                                  ; ---------------------------------------------------------------------------
  1021                                  ;**	Process data block (otherwise known as program header)
  1022                                  ;
  1023                                  
  1024                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1025                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1026                                  ;	for use.
  1027                                  ; ---------------------------------------------------------------------------
  1028                                  
  1029                                  FILPERPROC	EQU     20
  1030                                  
  1031                                  struc PDB	; Process_data_block
  1032 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1033 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1034 00000004 ??                                      resb 1
  1035 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1036 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1037 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1038 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1039 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1040 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1041 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1042 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1043 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1044 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1045 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1046 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1047 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1048 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1049 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1050 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1051 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1052 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1053                                  				;  an extended FCB
  1054                                  ;endstruc 	; MSDOS 3.3
  1055                                  	  	; MSDOS 6.0
  1056 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1057 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1058 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1059 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1060                                  endstruc
  1061                                  
  1062                                  ;============================================================================
  1063                                  ; EXE.INC, MSDOS 6.0, 1991
  1064                                  ;============================================================================
  1065                                  ; 04/05/2019 - Retro DOS v4.0
  1066                                  
  1067                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1068                                  ; ---------------------------------------------------------------------------
  1069                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1070                                  ; whether or not the program is executed or whether or not a program header
  1071                                  ; gets created.
  1072                                  
  1073                                  exec_func_no_execute EQU 1	; no execute bit
  1074                                  exec_func_overlay    EQU 2	; overlay bit
  1075                                  
  1076                                  struc EXEC0
  1077 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1078 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1079 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1080 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1081                                  .size:
  1082                                  endstruc
  1083                                  
  1084                                  struc EXEC1
  1085 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1086 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1087 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1088 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1089 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1090 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1091 00000012 ????                    .IP:		resw 1		; entry point IP
  1092 00000014 ????                    .CS:		resw 1		; entry point CS
  1093                                  .size:
  1094                                  endstruc
  1095                                  
  1096                                  struc EXEC3
  1097 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1098 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1099                                  endstruc
  1100                                  
  1101                                  ;**	Exit codes (in upper byte) for terminating programs
  1102                                  
  1103                                  EXIT_TERMINATE		EQU	0
  1104                                  EXIT_ABORT		EQU	0
  1105                                  EXIT_CTRL_C		EQU	1
  1106                                  EXIT_HARD_ERROR 	EQU	2
  1107                                  EXIT_KEEP_PROCESS	EQU	3
  1108                                  
  1109                                  ;**	EXE File Header Description
  1110                                  
  1111                                  struc EXE
  1112 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1113 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1114 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1115 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1116 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1117 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1118 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1119 0000000E ????                    .SS:          resw 1		; stack of image
  1120 00000010 ????                    .SP:          resw 1		; SP of image
  1121 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1122 00000014 ????                    .IP:          resw 1		; IP of entry
  1123 00000016 ????                    .CS:          resw 1		; CS of entry
  1124 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1125 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1126 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1127                                  .size:
  1128                                  endstruc
  1129                                  
  1130                                  exe_valid_signature     EQU 5A4Dh
  1131                                  exe_valid_old_signature EQU 4D5Ah
  1132                                  
  1133                                  ;**	EXE file symbol info definitions
  1134                                  
  1135                                  struc symbol_entry
  1136 00000000 ????????                .value:	resd 1
  1137 00000004 ????                    .type:	resw 1
  1138 00000006 ??                      .len:	resb 1
  1139 00000007 <res FFh>               .name:	resb 255
  1140                                  endstruc
  1141                                  
  1142                                  ;**	Data structure passed for ExecReady call
  1143                                  
  1144                                  struc ERStruc
  1145 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1146 00000002 ????                     .ER_Flags:	resw	1
  1147 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1148 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1149 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1150 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1151                                   .size:
  1152                                  endstruc
  1153                                  
  1154                                  ;** bit fields in ER_Flags
  1155                                  
  1156                                  ER_EXE		equ	0001h
  1157                                  ER_OVERLAY	equ	0002h
  1158                                  
  1159                                  
  1160                                  ;============================================================================
  1161                                  ; ARENA.INC, MSDOS 6.0, 1991
  1162                                  ;============================================================================
  1163                                  ; 24/04/2019 - Retro DOS v4.0
  1164                                  ; 04/08/2018 - Retro DOS v3.0
  1165                                  
  1166                                  ;BREAK <Memory arena structure>
  1167                                  
  1168                                  ;**	Arena Header
  1169                                  
  1170                                  struc ARENA
  1171 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1172 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1173 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1174 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1175 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1176                                  .headersize:			
  1177                                  endstruc
  1178                                  
  1179                                  ; 20/05/2019 - Retro DOS v4.0
  1180                                  ARENAHEADERSIZE equ ARENA.headersize 
  1181                                  
  1182                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1183                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1184                                  ; Change them and change ALLOC.ASM.
  1185                                  
  1186                                  arena_owner_system  EQU 0               ; free block indication
  1187                                  
  1188                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1189                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1190                                  
  1191                                  FIRST_FIT	EQU	00000000B
  1192                                  BEST_FIT	EQU	00000001B
  1193                                  LAST_FIT	EQU	00000010B
  1194                                  
  1195                                  ; MSDOS 6.0
  1196                                  LOW_FIRST	EQU	00000000B	; M001
  1197                                  HIGH_FIRST	EQU	10000000B	; M001
  1198                                  HIGH_ONLY	EQU	01000000B	; M001
  1199                                  
  1200                                  LINKSTATE	EQU	00000001B	; M002
  1201                                  
  1202                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1203                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1204                                  
  1205                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1206                                  						; M026: used to mask of bits
  1207                                  						; M026: 6 & 7 of AllocMethod
  1208                                  
  1209                                  ;============================================================================
  1210                                  ; MI.INC, MSDOS 6.0, 1991
  1211                                  ;============================================================================
  1212                                  ; 07/07/2018 - Retro DOS v3.0
  1213                                  
  1214                                  ;BREAK <Machine instruction, flag definitions and character types>
  1215                                  
  1216                                  mi_INT		EQU	0CDh
  1217                                  mi_long_jmp	EQU	0EAh
  1218                                  mi_Long_CALL	EQU	09Ah
  1219                                  mi_Long_RET	EQU	0CBh
  1220                                  mi_Near_RET	EQU	0C3h
  1221                                  
  1222                                  ;			xxxxoditszxaxpxc
  1223                                  f_Overflow	EQU	0000100000000000B
  1224                                  f_Direction	EQU	0000010000000000B
  1225                                  f_Interrupt	EQU	0000001000000000B
  1226                                  f_Trace 	EQU	0000000100000000B
  1227                                  f_Sign		EQU	0000000010000000B
  1228                                  f_Zero		EQU	0000000001000000B
  1229                                  f_Aux		EQU	0000000000010000B
  1230                                  f_Parity	EQU	0000000000000100B
  1231                                  f_Carry 	EQU	0000000000000001B
  1232                                  
  1233                                  ;============================================================================
  1234                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1235                                  ;============================================================================
  1236                                  ; 13/07/2018 - Retro DOS v3.0
  1237                                  ; 29/04/2019 - Retro DOS v4.0
  1238                                  
  1239                                  ;**	Standard I/O file handles
  1240                                  
  1241                                  stdin       EQU     0
  1242                                  stdout      EQU     1
  1243                                  stderr      EQU     2
  1244                                  stdaux      EQU     3
  1245                                  stdprn      EQU     4
  1246                                  
  1247                                  ;**	File Modes
  1248                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1249                                  
  1250                                  open_for_read   EQU 0
  1251                                  open_for_write  EQU 1
  1252                                  open_for_both   EQU 2
  1253                                  
  1254                                  ; MSDOS 6.0
  1255                                  OPEN_FOR_BOTH	equ 2
  1256                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1257                                  				; made from exec
  1258                                  
  1259                                  access_mask	EQU 0Fh ; 09/08/2018
  1260                                  
  1261                                  SHARING_MASK	    equ 0F0h
  1262                                  SHARING_COMPAT	    equ 000h
  1263                                  SHARING_DENY_BOTH   equ 010h
  1264                                  SHARING_DENY_WRITE  equ 020h
  1265                                  SHARING_DENY_READ   equ 030h
  1266                                  SHARING_DENY_NONE   equ 040h
  1267                                  SHARING_NET_FCB     equ 070h
  1268                                  SHARING_NO_INHERIT  equ 080h
  1269                                  
  1270                                  ; 29/04/2019
  1271                                  
  1272                                  ;**	Extended Open Definitions
  1273                                  
  1274                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1275                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1276                                  NOT_EXISTS_MASK    equ 0F0h
  1277                                  
  1278                                  ;*	SF_MODE values
  1279                                  
  1280                                  AUTO_COMMIT_WRITE	equ 4000h
  1281                                  INT_24_ERROR		equ 2000h
  1282                                  
  1283                                  ;*	Flags in EXTOPEN_ON
  1284                                  
  1285                                  EXT_OPEN_ON		equ 01h
  1286                                  EXT_FILE_NOT_EXISTS	equ 04h
  1287                                  EXT_OPEN_I24_OFF	equ 02h
  1288                                  
  1289                                  ;*	Flags in EXTOPEN_FLAG
  1290                                  
  1291                                  ACTION_OPENED		equ 01h
  1292                                  ACTION_CREATED_OPENED	equ 02h
  1293                                  ACTION_REPLACED_OPENED	equ 03h
  1294                                  EXT_EXISTS_OPEN 	equ 01h
  1295                                  EXT_EXISTS_FAIL 	equ 00h
  1296                                  EXT_NEXISTS_CREATE	equ 10h
  1297                                  
  1298                                  ;**	Extended Open Structure
  1299                                  
  1300                                  struc EXT_OPEN_PARM
  1301 00000000 ????????                .SET_LIST:	resd 1
  1302 00000004 ????                    .NUM_OF_PARM:	resw 1
  1303                                  endstruc
  1304                                  
  1305                                  ;============================================================================
  1306                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1307                                  ;============================================================================
  1308                                  ; 29/04/2019 - Retro DOS v4.0
  1309                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1310                                  
  1311                                  ; <system call definitions>
  1312                                  
  1313                                  ABORT                           EQU 0   ;  0      0
  1314                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1315                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1316                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1317                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1318                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1319                                  RAW_CON_IO                      EQU 6   ;  6      6
  1320                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1321                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1322                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1323                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1324                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1325                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1326                                  DISK_RESET                      EQU 13  ; 13      D
  1327                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1328                                  FCB_OPEN                        EQU 15  ; 15      F
  1329                                  FCB_CLOSE                       EQU 16  ; 16     10
  1330                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1331                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1332                                  FCB_DELETE                      EQU 19  ; 19     13
  1333                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1334                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1335                                  FCB_CREATE                      EQU 22  ; 22     16
  1336                                  FCB_RENAME                      EQU 23  ; 23     17
  1337                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1338                                  SET_DMA                         EQU 26  ; 26     1A
  1339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1340                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1341                                  ;                                                                          ;
  1342                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1343                                  ;                                                                          ;
  1344                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1345                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1346                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1347                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1348                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1349                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1350                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1351                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1352                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1353                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1354                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1355                                  GET_DATE                        EQU 42  ; 42     2A
  1356                                  SET_DATE                        EQU 43  ; 43     2B
  1357                                  GET_TIME                        EQU 44  ; 44     2C
  1358                                  SET_TIME                        EQU 45  ; 45     2D
  1359                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1360                                  ; Extended functionality group
  1361                                  GET_DMA                         EQU 47  ; 47     2F
  1362                                  GET_VERSION                     EQU 48  ; 48     30
  1363                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1364                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1365                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1366                                  ;                                                                          ;
  1367                                  GET_DPB                         EQU 50  ; 50     32
  1368                                  ;                                                                          ;
  1369                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1370                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1371                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1372                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1373                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1374                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1375                                  CHAR_OPER                       EQU 55  ; 55     37
  1376                                  INTERNATIONAL                   EQU 56  ; 56     38
  1377                                  ; XENIX CALLS
  1378                                  ;   Directory Group
  1379                                  MKDIR                           EQU 57  ; 57     39
  1380                                  RMDIR                           EQU 58  ; 58     3A
  1381                                  CHDIR                           EQU 59  ; 59     3B
  1382                                  ;   File Group
  1383                                  CREAT                           EQU 60  ; 60     3C
  1384                                  OPEN                            EQU 61  ; 61     3D
  1385                                  CLOSE                           EQU 62  ; 62     3E
  1386                                  READ                            EQU 63  ; 63     3F
  1387                                  WRITE                           EQU 64  ; 64     40
  1388                                  UNLINK                          EQU 65  ; 65     41
  1389                                  LSEEK                           EQU 66  ; 66     42
  1390                                  CHMOD                           EQU 67  ; 67     43
  1391                                  IOCTL                           EQU 68  ; 68     44
  1392                                  XDUP                            EQU 69  ; 69     45
  1393                                  XDUP2                           EQU 70  ; 70     46
  1394                                  CURRENT_DIR                     EQU 71  ; 71     47
  1395                                  ;    Memory Group
  1396                                  ALLOC                           EQU 72  ; 72     48
  1397                                  DEALLOC                         EQU 73  ; 73     49
  1398                                  SETBLOCK                        EQU 74  ; 74     4A
  1399                                  ;    Process Group
  1400                                  EXEC                            EQU 75  ; 75     4B
  1401                                  EXIT                            EQU 76  ; 76     4C
  1402                                  _WAIT				EQU 77  ; 77     4D
  1403                                  FIND_FIRST                      EQU 78  ; 78     4E
  1404                                  ;   Special Group
  1405                                  FIND_NEXT                       EQU 79  ; 79     4F
  1406                                  ; SPECIAL SYSTEM GROUP
  1407                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1408                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1409                                  ;                                                                          ;
  1410                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1411                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1412                                  GET_IN_VARS                     EQU 82  ; 82     52
  1413                                  SETDPB                          EQU 83  ; 83     53
  1414                                  ;                                                                          ;
  1415                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1416                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1417                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  DUP_PDB                         EQU 85  ; 85     55
  1422                                  ;                                                                          ;
  1423                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1424                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1425                                  RENAME                          EQU 86  ; 86     56
  1426                                  FILE_TIMES                      EQU 87  ; 87     57
  1427                                  ALLOCOPER			EQU 88	; 88	 58
  1428                                  ; Network extention system calls
  1429                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1430                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1431                                  CREATENEWFILE			EQU 91	; 91	 5B
  1432                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1433                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1434                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1435                                  ;									   ;
  1436                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1437                                  					;	    CloseByName, CloseUser,
  1438                                  					;	    CloseUserProcess,
  1439                                  					;	    GetOpenFileList
  1440                                  ;									   ;
  1441                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1442                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1443                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1444                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1445                                  XNAMETRANS			EQU 96	; 96	 60
  1446                                  PATHPARSE			EQU 97	; 97	 61
  1447                                  GETCURRENTPSP			EQU 98	; 98	 62
  1448                                  HONGEUL 			EQU 99	; 99	 63
  1449                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1450                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1451                                  ;									   ;
  1452                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1453                                  ;									   ;
  1454                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1455                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1456                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1457                                  GETSETCDPG			EQU 102 ; 102	 66
  1458                                  EXTHANDLE			EQU 103 ; 103	 67
  1459                                  COMMIT				EQU 104 ; 104	 68
  1460                                  
  1461                                  ; 29/04/2019 - Retro DOS v4.0
  1462                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1463                                  
  1464                                  GetSetMediaID			EQU 105 ; 105	 69
  1465                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1466                                  ExtOpen 			EQU 108 ; 108	 6C
  1467                                  
  1468                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1469                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1470                                  ;                                                                          ;
  1471                                  ;ifdef ROMEXEC
  1472                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1473                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1474                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1475                                  ;endif
  1476                                  ;                                                                          ;
  1477                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1478                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1479                                  
  1480                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1481                                  ;OEM_C1				EQU 249 ; 249    F9
  1482                                  ;OEM_C2				EQU 250 ; 250    FA
  1483                                  ;OEM_C3				EQU 251 ; 251    FB
  1484                                  ;OEM_C4				EQU 252 ; 252    FC
  1485                                  ;OEM_C5				EQU 253 ; 253    FD
  1486                                  ;OEM_C6				EQU 254 ; 254    FE
  1487                                  ;OEM_C7				EQU 255 ; 255    FF
  1488                                  
  1489                                  ;============================================================================
  1490                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1491                                  ;============================================================================
  1492                                  ; 24/04/2019 - Retro DOS 4.0
  1493                                  
  1494                                  ;MAJOR_VERSION	EQU     6
  1495                                  ;;MINOR_VERSION	EQU	00
  1496                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1497                                  
  1498                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1499                                  MAJOR_VERSION	EQU     5
  1500                                  MINOR_VERSION	EQU     0
  1501                                  
  1502                                  ;============================================================================
  1503                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1504                                  ;============================================================================
  1505                                  ; 09/07/2018 - Retro DOS 3.0
  1506                                  
  1507                                  ; Current structure of the data returned by the international call
  1508                                  
  1509                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1510                                  .Date_tim_format:
  1511 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1512                                  .Currency_sym:
  1513 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1514                                  .Thous_sep:
  1515 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1516                                  .Decimal_sep:
  1517 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1518                                  .Date_sep:
  1519 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1520                                  .Time_sep:
  1521 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1522                                  .Bit_field:	
  1523 0000000F ??                      		RESB 1		; Bit values
  1524                                                                     ;   Bit 0 = 0 if currency symbol first
  1525                                                                     ;         = 1 if currency symbol last
  1526                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1527                                                                     ;         = 1 if space after currency symbol
  1528                                  .Currency_cents:
  1529 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1530                                  .Time_24:
  1531 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1532                                  .Map_call:
  1533 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1534 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1535                                  				;  in pieces.
  1536                                  .Data_sep:
  1537 00000016 ????                    		RESB	2	; Data list separator character
  1538                                  .size:		
  1539                                  endstruc
  1540                                  
  1541                                  ; Max size of the block returned by the INTERNATIONAL call
  1542                                  
  1543                                  internat_block_max	EQU	32
  1544                                  
  1545                                  ;============================================================================
  1546                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1547                                  ;============================================================================
  1548                                  ; 08/07/2018 - Retro DOS v3.0
  1549                                  
  1550                                  ;SysInitVars STRUC
  1551                                  struc SYSI
  1552 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1553 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1554 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1555 0000000C ????????                .CON:	    resd 1		; CON device
  1556 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1557 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1558 00000016 ????????                .CDS:	    resd 1		; CDS list
  1559 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1560 0000001E ????                    .Keep:	    resw 1		; keep count
  1561 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1562 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1563 00000022 ????????                .DEV:	    resd 1		; device list
  1564                                  ; 09/07/2018
  1565                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1566                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1567 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1568 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1569 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1570 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1571 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1572 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1573 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
  1574 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1575 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1576 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1577 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1578 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1579                                  endstruc
  1580                                  ;SysInitVars ENDS
  1581                                  
  1582                                  ;This is added for more information exchange between DOS, BIOS.
  1583                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1584                                  
  1585                                  ;SysInitVars_Ext struc
  1586                                  struc SYSI_EXT
  1587 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1588 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1589                                  endstruc
  1590                                  ;SysInitVars_Ext ends
  1591                                  
  1592                                  ;============================================================================
  1593                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1594                                  ;============================================================================
  1595                                  ; 09/07/2018 - Retro DOS v3.0
  1596                                  
  1597                                  ;*** J.K.
  1598                                  ;General Guide -
  1599                                  ;Category Code:
  1600                                  ; 0... .... DOS Defined
  1601                                  ; 1... .... User defined
  1602                                  ; .xxx xxxx Code
  1603                                  
  1604                                  ;Function Code:
  1605                                  ; 0... .... Return error if unsupported
  1606                                  ; 1... .... Ignore if unsupported
  1607                                  ; .0.. .... Intercepted by DOS
  1608                                  ; .1.. .... Passed to driver
  1609                                  ; ..0. .... Sends data/commands to device
  1610                                  ; ..1. .... Quries data/info from device
  1611                                  ; ...x .... Subfunction
  1612                                  ;
  1613                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1614                                  ; function set.  It plays no critical role; some functions may contain both
  1615                                  ; command and query elements. The convention is that such commands are
  1616                                  ; defined as "sends data".
  1617                                  
  1618                                  ;*****************************;*
  1619                                  ; BLOCK DRIVERS 	      ;*
  1620                                  ;*****************************;*
  1621                                  
  1622                                  ; IOCTL SUB-FUNCTIONS
  1623                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1624                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1625                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1626                                  IOCTL_READ_HANDLE	EQU	2
  1627                                  IOCTL_WRITE_HANDLE	EQU	3
  1628                                  IOCTL_READ_DRIVE	EQU	4
  1629                                  IOCTL_WRITE_DRIVE	EQU	5
  1630                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1631                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1632                                  IOCTL_CHANGEABLE?	EQU	8
  1633                                  IOCTL_DeviceLocOrRem?	EQU	9
  1634                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1635                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1636                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1637                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1638                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1639                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1640                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1641                                  ; (MSDOS 6.0)
  1642                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1643                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1644                                  
  1645                                  ; GENERIC IOCTL CATEGORY CODES
  1646                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1647                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1648                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1649                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1650                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1651                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1652                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1653                                  
  1654                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1655                                  RAWIO			EQU	8
  1656                                  
  1657                                  ; RAWIO SUB-FUNCTIONS
  1658                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1659                                  GET_DEVICE_PARAMETERS	EQU	60H
  1660                                  SET_DEVICE_PARAMETERS	EQU	40H
  1661                                  READ_TRACK		EQU	61H
  1662                                  WRITE_TRACK		EQU	41H
  1663                                  VERIFY_TRACK		EQU	62H
  1664                                  FORMAT_TRACK		EQU	42H
  1665                                  ; (MSDOS 6.0)
  1666                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1667                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1668                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1669                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1670                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1671                                  
  1672                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1673                                  BUILD_DEVICE_BPB	EQU	000000001B
  1674                                  
  1675                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1676                                  INSTALL_FAKE_BPB	EQU	000000001B
  1677                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1678                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1679                                  
  1680                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1681                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1682                                  STATUS_FOR_FORMAT	EQU	000000001B
  1683                                  ; (MSDOS 6.0)
  1684                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1685                                  
  1686                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1687                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1688                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1689                                  
  1690                                  ; DEVICETYPE VALUES
  1691                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1692                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1693                                  DEV_5INCH		EQU	0
  1694                                  DEV_5INCH96TPI		EQU	1
  1695                                  DEV_3INCH720KB		EQU	2
  1696                                  DEV_8INCHSS		EQU	3
  1697                                  DEV_8INCHDS		EQU	4
  1698                                  DEV_HARDDISK		EQU	5
  1699                                  DEV_OTHER		EQU	7
  1700                                  ; (MSDOS 6.0)
  1701                                  ;DEV_3INCH1440KB	EQU	7
  1702                                  DEV_3INCH2880KB		EQU	9
  1703                                  ; Retro DOS v2.0 - 26/03/2018
  1704                                  ;;DEV_TAPE		EQU	6
  1705                                  ;;DEV_ERIMO		EQU	8
  1706                                  ;DEV_3INCH2880KB	EQU	9
  1707                                  DEV_3INCH1440KB		EQU	10
  1708                                  
  1709                                  ; (MSDOS 3.3)
  1710                                  ;MAX_DEV_TYPE		EQU	7
  1711                                  
  1712                                  ; (MSDOS 6.0)
  1713                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1714                                  					; CURRENTLY SUPPORT.
  1715                                  struc A_SECTORTABLE
  1716 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1717 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1718                                  .size:
  1719                                  endstruc
  1720                                  
  1721                                  ;============================================================================
  1722                                  ; DEVSYM.INC
  1723                                  ;============================================================================
  1724                                  ; 07/07/2018 - Retro DOS v3.0
  1725                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1726                                  
  1727                                  ;**	DevSym.inc - Device Symbols
  1728                                  
  1729                                  ; The device table list has the form:
  1730                                  struc	SYSDEV
  1731 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1732 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1733 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1734 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1735 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1736                                  .size:
  1737                                  endstruc
  1738                                  
  1739                                  ;
  1740                                  ; ATTRIBUTE BIT MASKS
  1741                                  ;
  1742                                  ; CHARACTER DEVICES:
  1743                                  ;
  1744                                  ; BIT 15 -> MUST BE 1
  1745                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1746                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1747                                  ;     12 -> UNUSED
  1748                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1749                                  ;     10 -> MUST BE 0
  1750                                  ;      9 -> MUST BE 0
  1751                                  ;      8 -> UNUSED
  1752                                  ;      7 -> UNUSED
  1753                                  ;      6 -> UNUSED
  1754                                  ;      5 -> UNUSED
  1755                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1756                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1757                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1758                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1759                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1760                                  ;
  1761                                  ; BLOCK DEVICES:
  1762                                  ;
  1763                                  ; BIT 15 -> MUST BE 0
  1764                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1765                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1766                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1767                                  ;	    THE SAME PLACE.
  1768                                  ;     12 -> UNUSED
  1769                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1770                                  ;     10 -> MUST BE 0
  1771                                  ;      9 -> MUST BE 0
  1772                                  ;      8 -> UNUSED
  1773                                  ;      7 -> UNUSED
  1774                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1775                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1776                                  ;      5 -> UNUSED
  1777                                  ;      4 -> UNUSED
  1778                                  ;      3 -> UNUSED
  1779                                  ;      2 -> UNUSED
  1780                                  ;      1 -> UNUSED
  1781                                  ;      0 -> UNUSED
  1782                                  ;
  1783                                  
  1784                                  ;Attribute bit masks
  1785                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1786                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1787                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1788                                  
  1789                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1790                                  
  1791                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1792                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1793                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1794                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1795                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1796                                  				;  ENTRY POINTS, 0 IF NOT
  1797                                  
  1798                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1799                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1800                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1801                                  				;  ITS CURRENT FORM.
  1802                                  
  1803                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1804                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1805                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1806                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1807                                  
  1808                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1809                                  
  1810                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1811                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1812                                  				;LOGICAL DRIVES, AND SUPPORTS
  1813                                  				;GENERIC IOCTL CALLS.
  1814                                  				;FOR CHARACTER DEVICES, THIS
  1815                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1816                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1817                                  
  1818                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1819                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1820                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1821                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1822                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1823                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1824                                  
  1825                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1826                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1827                                  
  1828                                  ;Static Reguest Header
  1829                                  struc	SRHEAD
  1830 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1831 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1832 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1833 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1834 00000005 ????????????????                	resb 8		;Reserved for queue links
  1835                                  .size:
  1836                                  endstruc
  1837                                  
  1838                                  ;Status word masks
  1839                                  STERR   EQU     8000H           ;Bit 15 - Error
  1840                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1841                                  STDON   EQU     0100H           ;Bit 8 - Done
  1842                                  STECODE EQU     00FFH           ;Error code
  1843                                  WRECODE EQU     0
  1844                                  
  1845                                  ;Function codes
  1846                                  DINITHL EQU     26              ;Size of init header
  1847                                  DMEDHL  EQU     15              ;Size of media check header
  1848                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1849                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1850                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1851                                  DSTATHL EQU     13              ;Size of status header
  1852                                  DFLSHL  EQU     15              ;Size of flush header
  1853                                  
  1854                                  DEVINIT EQU     0               ;Initialization
  1855                                  DEVMDCH EQU     1               ;Media check
  1856                                  DEVBPB  EQU     2               ;Get BPB
  1857                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1858                                  DEVRD   EQU     4               ;Read
  1859                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1860                                  DEVIST  EQU     6               ;Input status
  1861                                  DEVIFL  EQU     7               ;Input flush
  1862                                  DEVWRT  EQU     8               ;Write
  1863                                  DEVWRTV EQU     9               ;Write with verify
  1864                                  DEVOST  EQU     10              ;Output status
  1865                                  DEVOFL  EQU     11              ;Output flush
  1866                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1867                                  
  1868                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1869                                  DEVOPN	EQU	13		;DEVICE OPEN
  1870                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1871                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1872                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1873                                  ; 07/08/2018 - Retro DOS v3.0
  1874                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1875                                  GENIOCTL EQU	19
  1876                                  
  1877                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1878                                  ;		     20
  1879                                  ;		     21
  1880                                  ;		     22
  1881                                  
  1882                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1883                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1884                                  ; 18/05/2019 - Retro DOS v4.0
  1885                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1886                                  
  1887                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1888                                  
  1889                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1890                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1891                                  
  1892                                  ; ADDED FOR DOS 5.00
  1893                                  
  1894                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1895                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1896                                  
  1897                                  struc IOCTL_REQ
  1898 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1899                                  				; GENERIC IOCTL ADDITION.
  1900 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1901 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1902 0000000F ????                    .REG_SI:	resw 1
  1903 00000011 ????                    .REG_DI:	resw 1
  1904 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1905                                  .size: ; 07/08/2018
  1906                                  endstruc
  1907                                  
  1908                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1909                                  GEN_IOCTL_WRT_TRK EQU	40H
  1910                                  GEN_IOCTL_RD_TRK  EQU	60H
  1911                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1912                                  
  1913                                  ;; 32-bit absolute read/write input list structure
  1914                                  
  1915                                  struc ABS_32RW
  1916 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1917 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1918 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1919                                  .size:
  1920                                  endstruc
  1921                                  
  1922                                  ;; media ID info
  1923                                  
  1924                                  struc MEDIA_ID_INFO
  1925 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1926 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1927 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1928 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1929                                  .size:
  1930                                  endstruc
  1931                                  
  1932                                  ; equates for DOS34_FLAG
  1933                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1934                                  
  1935                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1936                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1937                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1938                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1939                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1940                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1941                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1942                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1943                                  					    ;M018: that knows how to handle 
  1944                                  					    ;M018: open for exec
  1945                                  
  1946                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1947                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1948                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1949                                  
  1950                                  ;============================================================================
  1951                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1952                                  ;============================================================================
  1953                                  ; 16/07/2018 - Retro DOS v3.0 
  1954                                  
  1955                                  ;**	ERROR.INC - DOS Error Codes
  1956                                  ;
  1957                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1958                                  ;    return error codes through AX. If an error occurred then
  1959                                  ;    the carry bit will be set and the error code is in AX. If no error
  1960                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1961                                  ;
  1962                                  ;    Since the set of error codes is being extended as we extend the operating
  1963                                  ;    system, we have provided a means for applications to ask the system for a
  1964                                  ;    recommended course of action when they receive an error.
  1965                                  ;
  1966                                  ;    The GetExtendedError system call returns a universal error, an error
  1967                                  ;    location and a recommended course of action. The universal error code is
  1968                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1969                                  ;    is issued.
  1970                                  
  1971                                  ;	2.0 error codes
  1972                                  
  1973                                  error_invalid_function		EQU	1
  1974                                  error_file_not_found		EQU	2
  1975                                  error_path_not_found		EQU	3
  1976                                  error_too_many_open_files	EQU	4
  1977                                  error_access_denied		EQU	5
  1978                                  error_invalid_handle		EQU	6
  1979                                  error_arena_trashed		EQU	7
  1980                                  error_not_enough_memory 	EQU	8
  1981                                  error_invalid_block		EQU	9
  1982                                  error_bad_environment		EQU	10
  1983                                  error_bad_format		EQU	11
  1984                                  error_invalid_access		EQU	12
  1985                                  error_invalid_data		EQU	13
  1986                                  ;**** reserved			EQU	14	; *****
  1987                                  error_invalid_drive		EQU	15
  1988                                  error_current_directory 	EQU	16
  1989                                  error_not_same_device		EQU	17
  1990                                  error_no_more_files		EQU	18
  1991                                  
  1992                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1993                                  
  1994                                  error_write_protect		EQU	19
  1995                                  error_bad_unit			EQU	20
  1996                                  error_not_ready 		EQU	21
  1997                                  error_bad_command		EQU	22
  1998                                  error_CRC			EQU	23
  1999                                  error_bad_length		EQU	24
  2000                                  error_seek			EQU	25
  2001                                  error_not_DOS_disk		EQU	26
  2002                                  error_sector_not_found		EQU	27
  2003                                  error_out_of_paper		EQU	28
  2004                                  error_write_fault		EQU	29
  2005                                  error_read_fault		EQU	30
  2006                                  error_gen_failure		EQU	31
  2007                                  
  2008                                  ;	the new 3.0 error codes reported through INT 24
  2009                                  
  2010                                  error_sharing_violation 	EQU	32
  2011                                  error_lock_violation		EQU	33
  2012                                  error_wrong_disk		EQU	34
  2013                                  error_FCB_unavailable		EQU	35
  2014                                  error_sharing_buffer_exceeded	EQU	36
  2015                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2016                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2017                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2018                                  
  2019                                  ;	New OEM network-related errors are 50-79
  2020                                  
  2021                                  error_not_supported		EQU	50
  2022                                  
  2023                                  error_net_access_denied		EQU	65	;M028
  2024                                  
  2025                                  ;	End of INT 24 reportable errors
  2026                                  
  2027                                  error_file_exists		EQU	80
  2028                                  error_DUP_FCB			EQU	81	; *****
  2029                                  error_cannot_make		EQU	82
  2030                                  error_FAIL_I24			EQU	83
  2031                                  
  2032                                  ;	New 3.0 network related error codes
  2033                                  
  2034                                  error_out_of_structures 	EQU	84
  2035                                  error_already_assigned		EQU	85
  2036                                  error_invalid_password		EQU	86
  2037                                  error_invalid_parameter 	EQU	87
  2038                                  error_NET_write_fault		EQU	88
  2039                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2040                                  
  2041                                  ;	BREAK <Interrupt 24 error codes>
  2042                                  
  2043                                  ;**	Int24 Error Codes
  2044                                  
  2045                                  error_I24_write_protect 	EQU	0
  2046                                  error_I24_bad_unit		EQU	1
  2047                                  error_I24_not_ready		EQU	2
  2048                                  error_I24_bad_command		EQU	3
  2049                                  error_I24_CRC			EQU	4
  2050                                  error_I24_bad_length		EQU	5
  2051                                  error_I24_Seek			EQU	6
  2052                                  error_I24_not_DOS_disk		EQU	7
  2053                                  error_I24_sector_not_found	EQU	8
  2054                                  error_I24_out_of_paper		EQU	9
  2055                                  error_I24_write_fault		EQU	0Ah
  2056                                  error_I24_read_fault		EQU	0Bh
  2057                                  error_I24_gen_failure		EQU	0Ch
  2058                                  ; NOTE: Code 0DH is used by MT-DOS.
  2059                                  error_I24_wrong_disk		EQU	0Fh
  2060                                  
  2061                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2062                                  ;
  2063                                  ;	NOTE: ABORT is ALWAYS allowed
  2064                                  
  2065                                  Allowed_FAIL			EQU	00001000B
  2066                                  Allowed_RETRY			EQU	00010000B
  2067                                  Allowed_IGNORE			EQU	00100000B
  2068                                  
  2069                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2070                                  I24_area			EQU	00000110B  ; 00 if DOS
  2071                                  						   ; 01 if FAT
  2072                                  						   ; 10 if root DIR
  2073                                  						   ; 11 if DATA
  2074                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2075                                  
  2076                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2077                                  
  2078                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2079                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2080                                  ;	to take for error codes that they don't explicitly understand.
  2081                                  
  2082                                  ;	Values for error CLASS
  2083                                  
  2084                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2085                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2086                                  errCLASS_Auth		EQU	3	; Permission problem
  2087                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2088                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2089                                  errCLASS_SysFail	EQU	6	; System Failure
  2090                                  errCLASS_Apperr 	EQU	7	; Application Error
  2091                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2092                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2093                                  errCLASS_Locked 	EQU	10	; Locked
  2094                                  errCLASS_Media		EQU	11	; Media Failure
  2095                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2096                                  errCLASS_Unk		EQU	13	; Unknown/other
  2097                                  
  2098                                  ;	Values for error ACTION
  2099                                  
  2100                                  errACT_Retry		EQU	1	; Retry
  2101                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2102                                  errACT_User		EQU	3	; Ask user to regive info
  2103                                  errACT_Abort		EQU	4	; abort with clean up
  2104                                  errACT_Panic		EQU	5	; abort immediately
  2105                                  errACT_Ignore		EQU	6	; ignore
  2106                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2107                                  
  2108                                  ;	Values for error LOCUS
  2109                                  
  2110                                  errLOC_Unk		EQU	1	; No appropriate value
  2111                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2112                                  errLOC_Net		EQU	3	; Network
  2113                                  errLOC_SerDev		EQU	4	; Serial Device
  2114                                  errLOC_Mem		EQU	5	; Memory
  2115                                  
  2116                                  ;============================================================================
  2117                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2118                                  ;============================================================================
  2119                                  ; 04/05/2019 - Retro DOS v4.0
  2120                                  
  2121                                  ;**	Int 2A functions
  2122                                  ; ---------------------------------------------------------------------------
  2123                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2124                                  ;		as a critical section handler since critical sections
  2125                                  ;		were originally created to support the net.
  2126                                  ; ---------------------------------------------------------------------------
  2127                                  
  2128                                  ; ---------------------------------------------------------------------------
  2129                                  ;**	This table was created by examining the source and may not be
  2130                                  ;	complete or completely accurate - JGL
  2131                                  ;
  2132                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2133                                  
  2134                                  ;	(ah) = 0	installation check
  2135                                  ;			   (returns ah !=0 if installed)
  2136                                  ;	(ah) = 1	cooked net bios call
  2137                                  ;	(ah) = 3	query drive shared
  2138                                  ;			   (ds:si) = "n:" asciz string
  2139                                  ;	(ah) = 4	net bios
  2140                                  ;	       (al) = 0	   cooked net bios call
  2141                                  ;	       (al) = 1	   raw net bios call
  2142                                  ;	       (al) = 2	   ???
  2143                                  ;
  2144                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2145                                  ;			NCBs available/outstanding. DX returns the number of
  2146                                  ;			sessions. Supposedly, this is documented in an old
  2147                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2148                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2149                                  ;			not be used, as it is a hack, only to get Lotus
  2150                                  ;			Notes running.
  2151                                  ;
  2152                                  ;	(ah) = 80h	enter critical section
  2153                                  ;	(ah) = 81h	leave critical section
  2154                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2155                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2156                                  ; ---------------------------------------------------------------------------
  2157                                  
  2158                                  ;**	Critical section definitions
  2159                                  ; ---------------------------------------------------------------------------
  2160                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2161                                  ;	which various programs use to make it so, in a limited fashion.
  2162                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2163                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2164                                  ;	DOS's global data structures, such as the memory arena, are not
  2165                                  ;	in this area, so critical section indicators are used to protect
  2166                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2167                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2168                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2169                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2170                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2171                                  ;	critical section they then switch away from that second thread and
  2172                                  ;	let the first one finish and exit the section.
  2173                                  ; ---------------------------------------------------------------------------
  2174                                  
  2175                                  ; These below are subject to leave-all sections
  2176                                  critDisk    EQU     1			; Disk I/O critical section
  2177                                  critShare   EQU     1			; Sharer I/O critical section
  2178                                  critMem     EQU     1			; memory maintenance critical section
  2179                                  critSFT     EQU     1			; sft table allocation
  2180                                  critDevice  EQU     2			; Device I/O critical section
  2181                                  critNet     EQU     5			; network critical section
  2182                                  critIFS     EQU     6			; ifsfunc critical section
  2183                                  ; These below are not subject to leave-all sections
  2184                                  critASSIGN  EQU     8			; Assign has munged a system call
  2185                                  
  2186                                  ;============================================================================
  2187                                  ; MULT.INC (MSDOS 6.0, 1991)
  2188                                  ;============================================================================
  2189                                  ; 04/05/2019 - Retro DOS v4.0
  2190                                  
  2191                                  ;Break <Multiplex channels>
  2192                                  
  2193                                  ; ---------------------------------------------------------------------------
  2194                                  ; The current set of defined multiplex channels is (* means documented):
  2195                                  ;
  2196                                  ;   Channel(h)  Issuer          Receiver    Function
  2197                                  ;      00       server          PSPRINT     print job control
  2198                                  ;     *01       print/apps      PRINT       Queueing of files
  2199                                  ;      02       BIOS            REDIR       signal open/close of printers
  2200                                  ;
  2201                                  ;      05       command         REDIR       obtain text of net int 24 message
  2202                                  ;     *06       server/assign   ASSIGN      Install check
  2203                                  ;
  2204                                  ;      08       external driver IBMBIO      interface to internal routines
  2205                                  ;
  2206                                  ;      10       sharer/server   Sharer      install check
  2207                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2208                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2209                                  ;      13       MSNET           MSNET       movement of NCBs
  2210                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2211                                  ;                                           of alternative INT_13 drivers after
  2212                                  ;                                           boot_up
  2213                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2214                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2215                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2216                                  ;      16       WIN386          WIN386      Windows communications
  2217                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2218                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2219                                  ;      19       Shell
  2220                                  ;      1A       Ansi.sys
  2221                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2222                                  ;
  2223                                  ;      40h      OS/2
  2224                                  ;      41h      Lanman
  2225                                  ;      42h      Lanman
  2226                                  ;      43h      Himem
  2227                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2228                                  ;                               AL = 30h    reserved for Himem external A20 code
  2229                                  ;      44h      Dosextender
  2230                                  ;      45H      Windows profiler
  2231                                  ;      46h      Windows/286 DOS extender
  2232                                  ;      47h      Basic Compiler Vn. 7.0
  2233                                  ;      48h      Doskey
  2234                                  ;      49h      DOS 5.x install 
  2235                                  ;      4Ah      Multi Purpose
  2236                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2237                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2238                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2239                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2240                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2241                                  ;
  2242                                  ;                multSmartdrv           10h
  2243                                  ;                multMagicdrv           11h
  2244                                  ;      4Bh      Task Switcher API
  2245                                  ;
  2246                                  ;      4Ch      APPS            APM         Advanced power management
  2247                                  ;      4Dh      Kana Kanji Converter, MSKK
  2248                                  ;
  2249                                  ;      51h      ODI real mode support driver (for Chicago)
  2250                                  ;
  2251                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2252                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2253                                  ;
  2254                                  ;      55h      COMMAND.COM
  2255                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2256                                  ;                                           instance of command.com
  2257                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2258                                  ;                                           instance of ROM COMMAND
  2259                                  ;      56h      Sewell Development
  2260                                  ;               INTERLNK
  2261                                  ;
  2262                                  ;      57h      Iomega Corp.
  2263                                  ;
  2264                                  ;      ABh      Unspecified IBM use
  2265                                  ;      ACh      Graphics
  2266                                  ;      ADh      NLS (toronto)
  2267                                  ;      AEh
  2268                                  ;      AFh      Mode
  2269                                  ;      B0h      GRAFTABL        GRAFTABL
  2270                                  ;
  2271                                  ;      D7h      Banyan VINES
  2272                                  ; ---------------------------------------------------------------------------
  2273                                  
  2274                                  ;MUX 00-3F reserverd for IBM
  2275                                  ;MUX 80-BF reserverd for IBM
  2276                                  
  2277                                  ;MUX 40-7F reserved for Microsoft
  2278                                  
  2279                                  ;MUX C0-FF users
  2280                                  
  2281                                  MultSHARE   EQU     10h 		; sharer
  2282                                      ;	1   MFT_enter
  2283                                      ;	2   MFTClose
  2284                                      ;	3   MFTclU
  2285                                      ;	4   MFTCloseP
  2286                                      ;	5   MFTCloN
  2287                                      ;	6   set_block
  2288                                      ;	7   clr_block
  2289                                      ;	8   chk_block
  2290                                      ;	9   MFT_get
  2291                                      ;	10  ShSave
  2292                                      ;	11  ShChk
  2293                                      ;	12  ShCol
  2294                                      ;	13  ShCloseFile
  2295                                  
  2296                                  MultNET     EQU     11h 		; Network support
  2297                                  MultIFS     EQU     11h                 ; Network support
  2298                                      ;   1   IFS_RMDIR
  2299                                      ;   2   IFS_SEQ_RMDIR
  2300                                      ;   3   IFS_MKDIR
  2301                                      ;   4   IFS_SEQ_MKDIR
  2302                                      ;   5   IFS_CHDIR
  2303                                      ;   6   IFS_CLOSE
  2304                                      ;   7   IFS_COMMIT
  2305                                      ;   8   IFS_READ
  2306                                      ;   9   IFS_WRITE
  2307                                      ;   10  IFS_LOCK
  2308                                      ;   11  IFS_UNLOCK
  2309                                      ;   12  IFS_DISK_INFO
  2310                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2311                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2312                                      ;   15  IFS_GET_FILE_INFO
  2313                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2314                                      ;   17  IFS_RENAME
  2315                                      ;   18  IFS_SEQ_RENAME
  2316                                      ;   19  IFS_DELETE
  2317                                      ;   20  IFS_SEQ_DELETE
  2318                                      ;   21  IFS_OPEN
  2319                                      ;   22  IFS_SEQ_OPEN
  2320                                      ;   23  IFS_CREATE
  2321                                      ;   24  IFS_SEQ_CREATE
  2322                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2323                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2324                                      ;   27  IFS_SEARCH_FIRST
  2325                                      ;   28  IFS_SEARCH_NEXT
  2326                                      ;   29  IFS_ABORT
  2327                                      ;   30  IFS_ASSOPER
  2328                                      ;   31  Printer_SET_STRING
  2329                                      ;   32  IFSFlushBuf
  2330                                      ;   33  IFSBufWrite
  2331                                      ;   34  IFSResetEnvironment
  2332                                      ;   35  IFSSpoolCheck
  2333                                      ;   36  IFSSpoolClose
  2334                                      ;   37  IFSDeviceOper
  2335                                      ;   38  IFSSpoolEchoCheck
  2336                                      ;   39      - - -   Unused   - - -
  2337                                      ;   40      - - -   Unused   - - -
  2338                                      ;   41      - - -   Unused   - - -
  2339                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2340                                      ;   43  DEVICE_IOCTL
  2341                                      ;   44  IFS_UPDATE_CB
  2342                                      ;   45  IFS_FILE_XATTRIBUTES
  2343                                      ;   46  IFS_XOPEN
  2344                                      ;   47  IFS_DEPENDENT_IOCTL
  2345                                  
  2346                                  MultDOS     EQU     12h 		; DOS call back
  2347                                      ;	1   DOS_CLOSE
  2348                                      ;	2   RECSET
  2349                                      ;	3   Get DOSGROUP
  2350                                      ;	4   PATHCHRCMP
  2351                                      ;	5   OUT
  2352                                      ;	6   NET_I24_ENTRY
  2353                                      ;	7   PLACEBUF
  2354                                      ;	8   FREE_SFT
  2355                                      ;	9   BUFWRITE
  2356                                      ;	10  SHARE_VIOLATION
  2357                                      ;	11  SHARE_ERROR
  2358                                      ;	12  SET_SFT_MODE
  2359                                      ;	13  DATE16
  2360                                      ;	14  SETVISIT
  2361                                      ;	15  SCANPLACE
  2362                                      ;	16  SKIPVISIT
  2363                                      ;	17  StrCpy
  2364                                      ;	18  StrLen
  2365                                      ;	19  UCase
  2366                                      ;	20  POINTCOMP
  2367                                      ;	21  CHECKFLUSH
  2368                                      ;	22  SFFromSFN
  2369                                      ;	23  GetCDSFromDrv
  2370                                      ;	24  Get_User_Stack
  2371                                      ;	25  GetThisDrv
  2372                                      ;	26  DriveFromText
  2373                                      ;	27  SETYEAR
  2374                                      ;	28  DSUM
  2375                                      ;	29  DSLIDE
  2376                                      ;	30  StrCmp
  2377                                      ;	31  initcds
  2378                                      ;	32  pjfnfromhandle
  2379                                      ;	33  $NameTrans
  2380                                      ;	34  CAL_LK
  2381                                      ;	35  DEVNAME
  2382                                      ;	36  Idle
  2383                                      ;   37  DStrLen
  2384                                      ;   38  NLS_OPEN      DOS 3.3
  2385                                      ;   39  $CLOSE        DOS 3.3
  2386                                      ;   40  NLS_LSEEK     DOS 3.3
  2387                                      ;   41  $READ         DOS 3.3
  2388                                      ;   42  FastInit      DOS 4.0
  2389                                      ;   43  NLS_IOCTL     DOS 3.3
  2390                                      ;   44  GetDevList    DOS 3.3
  2391                                      ;   45  NLS_GETEXT    DOS 3.3
  2392                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2393                                      ;   47  FAKE_VERSION  DOS 4.0
  2394                                  
  2395                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2396                                      ;	0   NLSInstall
  2397                                      ;	1   ChgCodePage
  2398                                      ;	2   GetExtInfo
  2399                                      ;	3   SetCodePage
  2400                                      ;	4   GetCntry
  2401                                  
  2402                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2403                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2404                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2405                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2406                                  
  2407                                  multMULT        EQU     4Ah
  2408                                  multMAGIC       EQU     256*multMULT + 11h
  2409                                  multMULTRPLTOM  EQU     06h
  2410                                  
  2411                                      ;   0   swap disk function for single floppy drive m/cs
  2412                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2413                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2414                                      ;       drive
  2415                                      ;
  2416                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2417                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2418                                      ;       returns pointer in ES:DI
  2419                                      ;
  2420                                      ;   3-4 currently used by nobody
  2421                                      ;   5   Switcher API
  2422                                      ;   6   Top of Memory for RPL.
  2423                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2424                                      ;           code present in TOM should respond with a new TOM in DX
  2425                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2426                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2427                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2428                                      ;           It is the responsibility of RPL program to release the mem.
  2429                                      ;   7   Reserved for PROTMAN support.
  2430                                      ;  10   smartdrv 4.0
  2431                                      ;  11   dblspace api
  2432                                      ;  12   MRCI     api
  2433                                      ;  13   dblspace/mrci stealth packet api
  2434                                  
  2435                                  MultAPM     EQU     4ch             ; Obselete ???
  2436                                      ;       00h     APM_VER_CHK
  2437                                      ;       01h     APM_SUS_SYS_REQ
  2438                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2439                                  
  2440                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2441                                  				;  APM events                         ; M036
  2442                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2443                                  
  2444                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2445                                  ;	  it calls Multdos 42 to set up an entry routine address
  2446                                      ;	0   Install status  (reserved)
  2447                                      ;	1   Lookup
  2448                                      ;	2   Insert
  2449                                      ;	3   Delete
  2450                                      ;	4   Purge	    (reserved)
  2451                                  
  2452                                  ;============================================================================
  2453                                  ; FIND.INC (MSDOS 6.0, 1991)
  2454                                  ;============================================================================
  2455                                  ; 17/05/2019 - Retro DOS v4.0
  2456                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2457                                  
  2458                                  ;Break	<find first/next buffer>
  2459                                  
  2460                                  struc find_buf
  2461 00000000 ??                      .drive:	    resb 1		; drive of search
  2462 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2463 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2464 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2465 0000000F ????                    .DirStart:  resw 1		; DirStart
  2466 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2467 00000015 ??                      .attr:	    resb 1		; attribute found
  2468 00000016 ????                    .time:	    resw 1		; time
  2469 00000018 ????                    .date:	    resw 1		; date
  2470 0000001A ????                    .size_l:    resw 1		; low(size)
  2471 0000001C ????                    .size_h:    resw 1		; high(size)
  2472 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2473                                  .size:
  2474                                  endstruc
  2475                                  
  2476                                  ;============================================================================
  2477                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2478                                  ;============================================================================
  2479                                  ; 29/04/2019 - Retro DOS v4.0
  2480                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2481                                  
  2482                                  ;Equates for COUNTRY INFORMATION.
  2483                                  SetCountryInfo	EQU	1	;country info
  2484                                  SetUcase	EQU	2	;uppercase table
  2485                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2486                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2487                                  SetFileList	EQU	5	;valid file character list
  2488                                  SetCollate	EQU	6	;collating sequence
  2489                                  SetDBCS 	EQU	7	;double byte character set
  2490                                  SetALL		EQU	-1	;all the entries
  2491                                  
  2492                                  ;DOS country and code page information table structure.
  2493                                  ;Internally, IBMDOS gives a pointer to this table.
  2494                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2495                                  ;this structure.
  2496                                  
  2497                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2498 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2499 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2500 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2501 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2502 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2503 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2504                                  
  2505 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2506 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2507                                  
  2508 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2509 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2510                                  
  2511 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2512 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2513                                  
  2514                                  ; MSDOS 6.0
  2515 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2516 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2517                                  
  2518 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2519 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2520 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2521 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2522 0000006C ????                    .ccDFormat:		resw 1	;date format
  2523 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2524 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2525 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2526 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2527 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2528 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2529 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2530 0000007D ??                      .ccTFormat:		resb 1	;time format
  2531 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2532 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2533 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2534                                  .size:
  2535                                  endstruc
  2536                                  
  2537                                  ;Ucase table
  2538                                  struc CC_UCASE_TAB
  2539 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2540 00000002 <res 80h>               .ccUcase_data:		resb 128
  2541                                  endstruc
  2542                                  
  2543                                  ;File Ucase table
  2544                                  struc CC_FILE_UCASE_TAB
  2545 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2546 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2547                                  endstruc
  2548                                  
  2549                                  ;File char list
  2550                                  struc CC_FILE_CHAR_TAB
  2551 00000000 ????                    .ccFilechar_leng:	resw 1
  2552 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2553                                  endstruc
  2554                                  
  2555                                  ;collate table
  2556                                  struc CC_COLLATE_TAB
  2557 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2558 00000002 <res 100h>              .ccCollate_data:	resb 256
  2559                                  endstruc
  2560                                  
  2561                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2562                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2563                                  
  2564                                  ; 06/08/2018
  2565                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2566                                  
  2567                                  ;CAPITALIZATION equates
  2568                                  CAP_ONE_CHAR	equ	20H
  2569                                  CAP_STRING	equ	21H
  2570                                  CAP_ASCIIZ	equ	22H
  2571                                  CHECK_YES_NO	equ	23H
  2572                                  UPPER_TABLE	equ	80H
  2573                                  
  2574                                  ;NLS_YES	equ	59H  ; 'Y'
  2575                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2576                                  ;NLS_NO		equ	4EH  ; 'N'	
  2577                                  ;NLS_no2	equ	6EH  ; 'n'	
  2578                                  
  2579                                  ;============================================================================
  2580                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2581                                  ;============================================================================
  2582                                  ; 25/04/2019 - Retro DOS v4.0
  2583                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2584                                  
  2585                                  ;BREAK <Current directory list structure>
  2586                                  
  2587                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2588                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2589                                  ;									   ;
  2590                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2591                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2592                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2593                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2594                                  ; of the disk being changed or if the path must be recracked.		   ;
  2595                                  ;
  2596                                  ;	Some pathnames have special preambles, such as
  2597                                  ;
  2598                                  ;		\\machine\sharename\...
  2599                                  ;	For these pathnames we can't allow ".." processing to back us
  2600                                  ;	up into the special front part of the name.  The CURDIR_END field
  2601                                  ;	holds the address of the seperator character which marks
  2602                                  ;	the split between the special preamble and the regular
  2603                                  ;	path list; ".." processing isn't allowed to back us up past
  2604                                  ;	(i.e., before) CURDIR_END
  2605                                  ;	For the root, it points at the leading /.  For net
  2606                                  ;	assignments it points at the end (nul) of the initial assignment:
  2607                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2608                                  ;	  ^		 ^		     ^
  2609                                  
  2610                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2611                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2612                                  
  2613                                  struc curdir	; curdir_list
  2614 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2615 00000043 ????                    .flags:		resw 1			; various flags
  2616 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2617 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2618 0000004D ????                    .user_word:	resw 1
  2619 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2620                                  ; MSDOS 6.0
  2621 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2622 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2623 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2624                                  .size:
  2625                                  endstruc
  2626                                  
  2627                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2628                                  
  2629                                  %define curdir_netID curdir_ID  ; dword
  2630                                  
  2631                                  ;**	Flag values for CURDIR_FLAGS
  2632                                  
  2633                                  curdir_isnet	EQU	1000000000000000B
  2634                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2635                                  curdir_inuse	EQU	0100000000000000B
  2636                                  curdir_splice	EQU	0010000000000000B
  2637                                  curdir_local	EQU	0001000000000000B
  2638                                  
  2639                                  ;									   ;
  2640                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2641                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2642                                  
  2643                                  ;============================================================================
  2644                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2645                                  ;============================================================================
  2646                                  ; 09/07/2018 - Retro DOS v3.0
  2647                                  
  2648                                  ;BREAK <File Control Block definition>
  2649                                  
  2650                                  ;
  2651                                  ; Field definition for FCBs
  2652                                  ; The FCB has the following structure:
  2653                                  ;
  2654                                  ;	+---------------------------+
  2655                                  ;	|   Drive indicator(byte)   |
  2656                                  ;	+---------------------------+
  2657                                  ;	|    Filename (8 chars)     |
  2658                                  ;	+---------------------------+
  2659                                  ;	|    Extension (3 chars)    |
  2660                                  ;	+---------------------------+
  2661                                  ;	|   Current Extent(word)    |
  2662                                  ;	+---------------------------+
  2663                                  ;	|    Record size (word)     |
  2664                                  ;	+---------------------------+
  2665                                  ;	|    File Size (2 words)    |
  2666                                  ;	+---------------------------+
  2667                                  ;	|	Date of write	    |
  2668                                  ;	+---------------------------+
  2669                                  ;	|	Time of write	    |
  2670                                  ;	+---------------------------+
  2671                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2672                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2673                                  ;									   ;
  2674                                  ;	+---------------------------+
  2675                                  ;	|   8 bytes reserved	    |
  2676                                  ;	+---------------------------+
  2677                                  ;									   ;
  2678                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2679                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2680                                  ;	|    next record number     |
  2681                                  ;	+---------------------------+
  2682                                  ;	|   random record number    |
  2683                                  ;	+---------------------------+
  2684                                  ;
  2685                                  
  2686                                  struc	SYS_FCB
  2687 00000000 ??                      .drive:	resb 1
  2688 00000001 ????????????????        .name:	resb 8
  2689 00000009 ??????                  .ext:	resb 3
  2690 0000000C ????                    .EXTENT: resw 1
  2691 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2692 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2693                                  				; following word
  2694 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2695 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2696 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2697                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2698                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2699                                  ;									   ;
  2700 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2701                                  ;									   ;
  2702                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2703                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2704 00000020 ??                      .NR:	resb 1			; Next record
  2705 00000021 ????????                .RR:	resb 4			; Random record
  2706                                  .size:
  2707                                  endstruc
  2708                                  
  2709                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2710                                  				; NEXT
  2711                                  ; 20/07/2018
  2712                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2713                                  
  2714                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2715                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2716                                  ; NOTE about this byte (fcb_nsl_drive)
  2717                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2718                                  ;	00 means a local file or device with sharing loaded
  2719                                  ;	10 means a remote (network) file
  2720                                  ;	01 means a local file with no sharing loaded
  2721                                  ;	11 means a local device with no sharing loaded
  2722                                  
  2723                                  ; 20/07/2018
  2724                                  
  2725                                  ;
  2726                                  ; Network FCB
  2727                                  ;
  2728                                  
  2729                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2730                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2731                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2732                                  
  2733                                  ;
  2734                                  ; No sharing local file FCB
  2735                                  ;
  2736                                  
  2737                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2738                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2739                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2740                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2741                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2742                                  
  2743                                  ;
  2744                                  ; No sharing local device FCB
  2745                                  ;
  2746                                  
  2747                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2748                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2749                                  
  2750                                  ;
  2751                                  ; Sharing local FCB
  2752                                  ;
  2753                                  
  2754                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2755                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2756                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2757                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2758                                  
  2759                                  ;
  2760                                  ; Bogusness:  the four cases are:
  2761                                  ;
  2762                                  ;   local file	    00
  2763                                  ;   local device    40
  2764                                  ;   local sharing   C0
  2765                                  ;   network	    80
  2766                                  ;
  2767                                  ; Since sharing and network collide, we cannot use a test instruction for
  2768                                  ; deciding whether a network or a share check in involved
  2769                                  ;
  2770                                  FCBDEVICE   EQU 040h
  2771                                  FCBNETWORK  EQU 080h
  2772                                  FCBSHARE    EQU 0C0h
  2773                                  
  2774                                  ; FCBSPECIAL must be able to mask off both net and share
  2775                                  FCBSPECIAL  EQU 080h
  2776                                  FCBMASK     EQU 0C0h
  2777                                  
  2778                                  ;============================================================================
  2779                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2780                                  ;============================================================================
  2781                                  ; 11/07/2018 - Retro DOS v3.0
  2782                                  ; 25/04/2019 - Retro DOS v4.0
  2783                                  
  2784                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2785 00000000 ??                      .dirpos:	resb 1
  2786 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2787                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2788 00000005 ????                    .clusnum:	resw 1
  2789 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2790 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2791                                  .size:
  2792                                  endstruc
  2793                                  
  2794                                  ; 23/07/2018
  2795                                  ;FASTOPEN NAME CACHING Subfunctions
  2796                                  FONC_Look_up	equ	1
  2797                                  FONC_insert	equ	2
  2798                                  FONC_delete	equ	3
  2799                                  FONC_update	equ	4
  2800                                  FONC_purge	equ	5	;reserved for the future use.
  2801                                  FONC_Rename	equ	6	;AN001
  2802                                  
  2803                                  ; 27/07/2018
  2804                                  ;FastOpen Data Structure
  2805                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2806 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2807 00000002 ????????                .name_caching:	resd 1
  2808                                  ; MSDOS 6.0
  2809                                  ;.fatchain_caching: resd 1	;reserved for future use
  2810                                  .size:
  2811                                  endstruc
  2812                                  
  2813                                  ; 27/07/2018
  2814                                  ;Equates used in DOS.
  2815                                  FastOpen_Set	       equ     00000001b
  2816                                  FastOpen_Reset	       equ     11111110b
  2817                                  Lookup_Success	       equ     00000010b
  2818                                  Lookup_Reset	       equ     11111101b
  2819                                  Special_Fill_Set       equ     00000100b
  2820                                  Special_Fill_Reset     equ     11111011b
  2821                                  No_Lookup	       equ     00001000b
  2822                                  Set_For_Search	       equ     00010000b	;DCR 167
  2823                                  
  2824                                  ; 09/08/2018 
  2825                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2826                                  ; Fastxxx equates
  2827                                  FastOpen_ID	   equ	   1
  2828                                  FastSeek_ID	   equ	   2
  2829                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2830                                  
  2831                                  ;Structure definitions
  2832                                  ;
  2833                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2834 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2835 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2836                                  endstruc
  2837                                  
  2838                                  ;============================================================================
  2839                                  ; LOCK.INC, MSDOS 6.0, 1991
  2840                                  ;============================================================================
  2841                                  ; 14/07/2018 - Retro DOS v3.0
  2842                                  
  2843                                  ;**	LOCK.INC - Definitions for Record Locking
  2844                                  
  2845                                  ;**	LOCK functions
  2846                                  
  2847                                  LOCK_ALL	    equ    0
  2848                                  UNLOCK_ALL	    equ    1
  2849                                  LOCK_MUL_RANGE	    equ    2
  2850                                  UNLOCK_MUL_RANGE    equ    3
  2851                                  LOCK_READ	    equ    4
  2852                                  WRITE_UNLOCK	    equ    5
  2853                                  LOCK_ADD	    equ    6
  2854                                  
  2855                                  ;**	Structure for Lock buffer
  2856                                  
  2857                                  struc LockBuf
  2858 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2859 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2860                                  endstruc
  2861                                  
  2862                                  ;============================================================================
  2863                                  ; DPL.ASM, MSDOS 6.0, 1991
  2864                                  ;============================================================================
  2865                                  ; 04/08/2018 - Retro DOS v3.0
  2866                                  
  2867                                  ; (SRVCALL.ASM)
  2868                                  
  2869                                  struc DPL
  2870 00000000 ????                    .AX:	resw	1	; AX register
  2871 00000002 ????                    .BX:	resw	1	; BX register
  2872 00000004 ????                    .CX:	resw	1	; CX register
  2873 00000006 ????                    .DX:	resw	1	; DX register
  2874 00000008 ????                    .SI:	resw	1	; SI register
  2875 0000000A ????                    .DI:	resw	1	; DI register
  2876 0000000C ????                    .DS:	resw	1	; DS register
  2877 0000000E ????                    .ES:	resw	1	; ES register
  2878 00000010 ????                    .rsrvd: resw	1	; Reserved
  2879 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2880 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2881                                  .size:
  2882                                  endstruc
  2883                                   
  2884                                  ;----------------------------------------------------------------------------
  2885                                  ; DOSDATA
  2886                                  ;----------------------------------------------------------------------------
  2887                                  ;============================================================================
  2888                                  ; 24/04/2019 - Retro DOS v4.0
  2889                                  
  2890                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2891                                  		; ((just after resident IO.SYS code&data))
  2892                                  
  2893                                  ;============================================================================
  2894                                  ; WIN386.INC, MSDOS 6.0, 1991
  2895                                  ;============================================================================
  2896                                  ; 24/04/2019 - Retro DOS 4.0
  2897                                  
  2898                                  ;
  2899                                  ;  Symbols and structures relating to WIN386 support.
  2900                                  ;
  2901                                  ;  Used by files in both the DOS and the BIOS.
  2902                                  ;
  2903                                  ;  Created: 7-13-89 by MRW
  2904                                  ;
  2905                                  
  2906                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2907                                  
  2908                                  MultWin386		equ     16h	; Int 2f multiplex number
  2909                                  
  2910                                  Win386_Init		equ	05h	; Win386 initialization
  2911                                  Win386_Exit		equ	06h	; Win386 exit
  2912                                  Win386_Devcall		equ	07h	; Win386 device call out
  2913                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2914                                  
  2915                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2916                                  ; answer call outs from the DOSMGR
  2917                                  
  2918                                  Win386_DOSMGR		equ	15H
  2919                                  
  2920                                  ; The following structures are used to communicate instance data to 
  2921                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2922                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2923                                  
  2924                                  struc Win386_SIS	; Startup Info Structure
  2925 00000000 ????                     .Version:		resb	2	; db 3, 0
  2926 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2927 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2928 0000000A ????????                 .Reference_Data:	resd	1
  2929 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2930                                  endstruc
  2931                                  
  2932                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2933                                  
  2934                                  struc Win386_IIS	; Instance Item Structure
  2935 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2936 00000004 ????                    .Size:			resw	1	; size of an instance item
  2937                                  endstruc
  2938                                  
  2939                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2940                                  
  2941                                  ;Win386 DOSMGR function return values to indicate operation done
  2942                                  
  2943                                  WIN_OP_DONE		equ	0B97Ch	; 
  2944                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2945                                  
  2946                                  ;M021
  2947                                  ; WInoldap callout multiplex number
  2948                                  
  2949                                  WINOLDAP		equ	46h	;
  2950                                  
  2951                                  ;============================================================================
  2952                                  ;----------------------------------------------------------------------------
  2953                                  ; DOSCODE
  2954                                  ;----------------------------------------------------------------------------
  2955                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2956                                  
  2957                                  ;============================================================================
  2958                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2959                                  ;============================================================================
  2960                                  ; 16/07/2018 - Retro DOS 3.0
  2961                                  ;----------------------------------------------------------------------------
  2962                                  ; 24/04/2019 - Retro DOS 4.0
  2963                                  
  2964                                  ; MSDOS 6.0
  2965                                  ;----------------------------------------------------------------------------
  2966                                  ; FILE : ORIGIN.INC
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2969                                  ; is used for ORGing the DOS code.
  2970                                  ;
  2971                                  ; Brief Description of the necessacity of this ORG:
  2972                                  ; -------------------------------------------------
  2973                                  ;
  2974                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2975                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2976                                  ; This means programs running out off the HMA must use non-zero offset base
  2977                                  ; addresses. It also means that if we're running multiple programs from the
  2978                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2979                                  ; HMA segments that precede it.
  2980                                  ; 
  2981                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2982                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2983                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2984                                  ; selecting segment values between f124h and ffffh it could be located 
  2985                                  ; anywhere in the HMA. The problem with this is that programs with such 
  2986                                  ; high ORGs would not be able to run in low RAM.
  2987                                  ;
  2988                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  2989                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  2990                                  ; the following solution has been implemented:
  2991                                  ;
  2992                                  ; The Bios Code segment will have a very small offset and run at the very
  2993                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  2994                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  2995                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  2996                                  ; possible physical address at which DOS code will run, while still providing
  2997                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  2998                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  2999                                  ; mostly true.
  3000                                  ;
  3001                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3002                                  ; putting this value after the first jmp instruction in the DOS code in
  3003                                  ; mshead.asm. 
  3004                                  ;
  3005                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3006                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3007                                  ;
  3008                                  ; Revision History:
  3009                                  ;
  3010                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3011                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3012                                  ;
  3013                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3014                                  ; A utility called getsize will obtain the corresponding values from msdos
  3015                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3016                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3017                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3018                                  ; dependant on that.				  --- Apr 3 '90
  3019                                  ;
  3020                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3021                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3022                                  ; so the offset will not need to be included at the beginning of the code
  3023                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3024                                  ; at offset zero within the segment.
  3025                                  ; 
  3026                                  ;
  3027                                  ;--------------------------------------------------------------------------
  3028                                  
  3029                                  BIODATASTART	EQU	00700h
  3030                                  ;include	bdsize.inc	; this sets the values:
  3031                                  				;	BIODATASIZ
  3032                                  				;	BIOCODESIZ
  3033                                  				;	DOSDATASIZ
  3034                                  
  3035                                  ; 05/12/2022
  3036                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3037                                  			; 0900h for MSDOS 5.0 IO.SYS
  3038                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3039                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3040                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3041                                  			; 1370h for MSDOS 5.0 IO.SYS
  3042                                  ;ifndef ROMDOS
  3043                                  ;
  3044                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3045                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3046                                  ;
  3047                                  ;else
  3048                                  ;
  3049                                  ;BYTSTART	EQU	0
  3050                                  ;PARASTART	EQU	0
  3051                                  ;
  3052                                  ;endif ; ROMDOS
  3053                                  
  3054                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3055                                  ; -----------------------------------------------------------------
  3056                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3057                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3058                                  ;DOSDATASIZE equ MSDAT001E
  3059                                  ; 05/12/2022
  3060                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3061                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3062                                  			    ; of DOSDATA (in low memory) while
  3063                                  			    ; dos/kernel code starts just after 
  3064                                  			    ; this data block ((org = DOSDATASIZE))
  3065                                  			    ; (in low memory or in HMA)	
  3066                                  ; -----------------------------------------------------------------
  3067                                  
  3068                                  ; 04/11/2022	
  3069                                  ; -----------------------------------------------------------------	
  3070                                  ; NOTE:
  3071                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3072                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3073                                  ; -----------------------------------------------------------------
  3074                                  
  3075                                  ; ----------------------------------------------------------------------------
  3076                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3077                                  ; ----------------------------------------------------------------------------
  3078                                  
  3079                                  segment .code vstart=3DD0h ; 06/12/2022
  3080                                  								
  3081                                  ; ============================================================================
  3082                                  
  3083                                  
  3084                                  ;[ORG 3DE0h]
  3085                                  
  3086                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3087                                  
  3088                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3089                                  
  3090                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3091                                  	PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3092                                  			    ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3093                                  	[ORG PARASTART]	
  3094                                  
  3095                                  _$STARTCODE:
  3096                                  
  3097                                  ;PARASTART:
  3098 00000000 E9E476                          JMP     DOSINIT
  3099                                  
  3100                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3101                                  	; 04/11/2022
  3102 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3103                                  
  3104                                  BioDataSeg:
  3105 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3106                                  
  3107                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3108                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3109                                  ; allows getting the DOS data segment without going through the 
  3110                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3111                                  
  3112                                  DosDSeg:
  3113 00000007 0000                    	dw	0
  3114                                  	
  3115                                  ;============================================================================
  3116                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3117                                  ;============================================================================
  3118                                  ; 16/07/2018 - Retro DOS 3.0
  3119                                  ; 29/04/2019 - Retro DOS 4.0
  3120                                  
  3121                                  	; (MSDOS version)
  3122                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3123                                  	;db	6
  3124                                  	;db	20
  3125                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3126                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3127                                  	;db	5
  3128                                  	;db	0	
  3129                                  
  3130                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3131                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3132 00000009 05                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3133 0000000A 00                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3134                                  
  3135                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3136                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3137                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3138                                  
  3139                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3140                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3141                                  ;
  3142                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3143                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3144                                  
  3145                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3146                                  ; those error codes which are "allowed" for each system call. If the error
  3147                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3148                                  ; is to return the "real" error via Extended error, and one of the allowed
  3149                                  ; errors on the actual call.
  3150                                  ;
  3151                                  ; The table is organized as follows:
  3152                                  ;
  3153                                  ;    Each entry in the table is of variable size, but the first
  3154                                  ;       two bytes are always:
  3155                                  ;
  3156                                  ;       Call#,Cnt of bytes following this byte
  3157                                  ;
  3158                                  ; EXAMPLE:
  3159                                  ;       Call 61 (OPEN)
  3160                                  ;
  3161                                  ;       DB      61,5,12,3,2,4,5
  3162                                  ;
  3163                                  ;       61 is the AH INT 21 call value for OPEN.
  3164                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3165                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3166                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3167                                  ;       this case 5).  The last value will be the one returned on the call if
  3168                                  ;       the "real" error is not one of the allowed ones.
  3169                                  ;
  3170                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3171                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3172                                  ;   call, so set up an Extended error and leave the current error code alone.
  3173                                  ;
  3174                                  ; The table is terminated by a call value of 0FFh
  3175                                  
  3176                                  ;PUBLIC I21_MAP_E_TAB
  3177                                  	; 10/08/2018
  3178                                  
  3179                                  ; 29/04/2019
  3180                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3181                                  ; 04/11/2022
  3182                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3183                                  
  3184                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3185 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3186 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3187 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3188 00000018 0205                        DB          error_file_not_found,error_access_denied
  3189 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3190 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3191 00000022 04                          DB          error_too_many_open_files
  3192 00000023 05                          DB          error_access_denied
  3193                                      ; MSDOS 6.0
  3194 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3195 00000029 04                          DB          error_too_many_open_files
  3196 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3197                                      ; MSDOS 3.3
  3198                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3199                                      ;DB		error_too_many_open_files,error_access_denied
  3200 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3201 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3202 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3203 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3204 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3205 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3206 00000045 05                          DB          error_access_denied
  3207 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3208 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3209 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3210 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3211                                      ; MSDOS 6.0	
  3212 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3213                                      ; MSDOS 3.3	
  3214                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3215 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3216 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3217 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3218 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3219 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3220 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3221 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3222 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3223                                      ; MSDOS 6.0
  3224 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3225 0000007D 1005                        DB		error_current_directory,error_access_denied
  3226                                      ; MSDOS 3.3
  3227                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3228                                      ;DB		error_access_denied
  3229                                      ; MSDOS 6.0	
  3230 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3231 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3232                                      ; MSDOS 3.3	
  3233                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3234 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3235 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3236 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3237 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3238 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3239 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3240 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3241 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3242 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3243 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3244 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3245 000000AA 01                          DB              error_invalid_function
  3246                                      ; MSDOS 6.0		
  3247 000000AB 6C0A                        DB	ExtOpen,10
  3248 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3249 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3250 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3251 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3252 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3253 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3254 000000BD FF                          DB  0FFh
  3255                                  
  3256                                  ;19/09/2023
  3257                                  ;22/12/2022
  3258                                  ;04/11/2022	
  3259                                  ;29/04/2019 - Retro DOS v4.0
  3260                                  ;============================================================================
  3261                                  ; 	Retro DOS v4.0
  3262                                  ;============================================================================
  3263 000000BE 00                      	db 	0
  3264                                  RETRODOSMSG:
  3265 000000BF 0D0A                    	db	13,10
  3266                                  	;;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3267                                  	;;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3268                                  	;;db	"Retro DOS v4.1 by Erdogan Tan [2022]"	; 28/12/2022
  3269                                  	;db	"Retro DOS v4.1 by Erdogan Tan [2023]"
  3270 000000C1 526574726F20444F53-     	db	"Retro DOS v4.1 by Erdogan Tan [2024]"	; 05/01/2024
  3270 000000CA 2076342E3120627920-
  3270 000000D3 4572646F67616E2054-
  3270 000000DC 616E205B323032345D 
  3271 000000E5 0D0A2400                	db	13,10,"$", 0 
  3272                                  
  3273                                  ;============================================================================
  3274                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3275                                  ;============================================================================
  3276                                  ; 11/07/2018 - Retro DOS v3.0
  3277                                  
  3278                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3279 000000E9 90                      align 2
  3280                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3281                                  
  3282                                  ; Standard Functions
  3283                                  ;DISPATCH  LABEL WORD
  3284                                  DISPATCH:
  3285                                  	; 16/07/2018 - Retro DOS v3.0
  3286                                  	; (MSDOS 3.3)
  3287                                  
  3288                                  ; 29/04/2019
  3289                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3290                                  
  3291                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3292                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3293                                  
  3294 000000EA [1862]                          short_addr  _$ABORT			    ;  0      0
  3295 000000EC [6716]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3296 000000EE [7016]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3297 000000F0 [2217]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3298 000000F2 [3D17]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3299 000000F4 [4317]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3300 000000F6 [AF15]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3301 000000F8 [DB15]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3302 000000FA [8013]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3303 000000FC [D913]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3304 000000FE [E513]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3305 00000100 [5717]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3306 00000102 [6117]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3307 00000104 [A30F]                          short_addr  _$DISK_RESET		    ; 13      D
  3308 00000106 [870E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3309 00000108 [3D1E]                          short_addr  _$FCB_OPEN			    ; 15      F
  3310 0000010A [0718]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3311 0000010C [4F1F]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3312 0000010E [E11F]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3313 00000110 [A617]                          short_addr  _$FCB_DELETE		    ; 19     13
  3314 00000112 [3B1F]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3315 00000114 [401F]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3316 00000116 [211F]                          short_addr  _$FCB_CREATE		    ; 22     16
  3317 00000118 [7718]                          short_addr  _$FCB_RENAME		    ; 23     17
  3318                                  	; 16/07/2018
  3319                                          ;short_addr _CPMFUNC			    ; 24     18	
  3320 0000011A [5706]                          short_addr  NO_OP			    ; 24     18
  3321 0000011C [820E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3322 0000011E [770E]                          short_addr  _$SET_DMA			    ; 26     1A
  3323                                  
  3324                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3325                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3326                                  ;                                                                          ;
  3327 00000120 [2F0F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3328 00000122 [310F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3329                                  ;                                                                          ;
  3330                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3331                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3332                                  
  3333                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3334                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3335                                  
  3336                                  ; 08/07/2018 - Retro DOS v3.0
  3337                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3338                                  
  3339 00000124 [5706]                  	short_addr  NO_OP			    ; 29     1D
  3340 00000126 [5706]                  	short_addr  NO_OP			    ; 30     1E
  3341                                  
  3342                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3343                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3344                                  ;                                                                          ;
  3345 00000128 [730F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3346                                  ;                                                                          ;
  3347                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3348                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3349                                          ;short_addr _CPMFUNC			    ; 32     20
  3350                                  
  3351                                  ; 08/07/2018 - Retro DOS v3.0
  3352                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3353                                  
  3354 0000012A [5706]                  	short_addr  NO_OP			    ; 32     20
  3355                                  
  3356 0000012C [451F]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3357 0000012E [4A1F]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3358 00000130 [B817]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3359 00000132 [8E17]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3360                                  
  3361                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3362                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3363                                  
  3364                                  ; Extended Functions
  3365 00000134 [A80E]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3367                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3368                                  ;                                                                          ;
  3369 00000136 [AF10]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3370                                  ;                                                                          ;
  3371                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3372                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3373 00000138 [361F]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3374 0000013A [311F]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3375 0000013C [240F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3376 0000013E [630A]                          short_addr  _$GET_DATE                      ; 42     2A
  3377 00000140 [800A]                          short_addr  _$SET_DATE                      ; 43     2B
  3378 00000142 [9F0A]                          short_addr  _$GET_TIME                      ; 44     2C
  3379 00000144 [B00A]                          short_addr  _$SET_TIME                      ; 45     2D
  3380 00000146 [680C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3381                                  
  3382                                  ; Extended functionality group
  3383 00000148 [640E]                          short_addr  _$GET_DMA                       ; 47     2F
  3384 0000014A [3F0C]                          short_addr  _$GET_VERSION                   ; 48     30
  3385 0000014C [BC61]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3386                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3387                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3388                                  ;                                                                          ;
  3389 0000014E [750F]                          short_addr  _$GET_DPB			    ; 50     32
  3390                                  ;                                                                          ;
  3391                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3392                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3393 00000150 [6602]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3394 00000152 [5B0F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3395 00000154 [990E]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3396 00000156 [410E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3397 00000158 [D50E]                          short_addr  _$CHAR_OPER                     ; 55     37
  3398 0000015A [6F0C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3399                                  ; XENIX CALLS
  3400                                  ;   Directory Group
  3401 0000015C [3B22]                          short_addr  _$MKDIR			    ; 57     39
  3402 0000015E [8721]                          short_addr  _$RMDIR			    ; 58     3A
  3403 00000160 [C221]                          short_addr  _$CHDIR			    ; 59     3B
  3404                                  ;   File Group
  3405 00000162 [DA6F]                          short_addr  _$CREAT			    ; 60     3C
  3406 00000164 [036F]                          short_addr  _$OPEN			    ; 61     3D
  3407 00000166 [3467]                          short_addr  _$CLOSE		 	    ; 62     3E
  3408 00000168 [4568]                          short_addr  _$READ			    ; 63     3F
  3409 0000016A [AB68]                          short_addr  _$WRITE			    ; 64     40
  3410 0000016C [2A70]                          short_addr  _$UNLINK			    ; 65     41
  3411 0000016E [B068]                          short_addr  _$LSEEK			    ; 66     42
  3412 00000170 [E76F]                          short_addr  _$CHMOD			    ; 67     43
  3413 00000172 [9C22]                          short_addr  _$IOCTL			    ; 68     44
  3414 00000174 [6569]                          short_addr  _$DUP			    ; 69     45
  3415 00000176 [8369]                          short_addr  _$DUP2			    ; 70     46
  3416 00000178 [1821]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3417                                  ;   Memory Group
  3418 0000017A [AF62]                          short_addr  _$ALLOC			    ; 72     48
  3419 0000017C [2964]                          short_addr  _$DEALLOC                       ; 73     49
  3420 0000017E [0564]                          short_addr  _$SETBLOCK                      ; 74     4A
  3421                                  ;   Process Group
  3422 00000180 [965B]                          short_addr  _$EXEC			    ; 75     4B
  3423 00000182 [F461]                          short_addr  _$EXIT			    ; 76     4C
  3424 00000184 [8C5B]                          short_addr  _$WAIT			    ; 77     4D
  3425 00000186 [5420]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3426                                  ;   Special Group
  3427 00000188 [AA20]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3428                                  ; SPECIAL SYSTEM GROUP
  3429                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3430                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3431                                  ;                                                                          ;
  3432 0000018A [B802]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3433 0000018C [C402]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3434 0000018E [670F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3435 00000190 [D80F]                          short_addr  _$SETDPB			    ; 83     53
  3436                                  ;                                                                          ;
  3437                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3438                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3439 00000192 [630C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3440                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3441                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3442                                  ;                                                                          ;
  3443 00000194 [9E10]                          short_addr  _$DUP_PDB                       ; 85     55
  3444                                  ;                                                                          ;
  3445                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3446                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3447 00000196 [5070]                          short_addr  _$RENAME			    ; 86     56
  3448 00000198 [1769]                          short_addr  _$FILE_TIMES                    ; 87     57
  3449 0000019A [5E64]                          short_addr  _$ALLOCOPER                     ; 88     58
  3450                                  
  3451                                  ; 08/07/2018 - Retro DOS v3.0
  3452                                  ; -------------------------------------------------------------------------;
  3453                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3454                                  
  3455                                  ; Network extention system calls
  3456 0000019C [E90E]                          short_addr  _$GetExtendedError              ; 89     59
  3457 0000019E [DB70]                          short_addr  _$CreateTempFile                ; 90     5A
  3458 000001A0 [C370]                          short_addr  _$CreateNewFile                 ; 91     5B
  3459 000001A2 [BC72]                          short_addr  _$LockOper                      ; 92     5C
  3460 000001A4 [4465]                          short_addr  _$ServerCall                    ; 93     5D
  3461 000001A6 [4D6A]                          short_addr  _$UserOper                      ; 94     5E
  3462 000001A8 [B269]                          short_addr  _$AssignOper                    ; 95     5F
  3463 000001AA [9E6E]                          short_addr  _$NameTrans                     ; 96     60
  3464 000001AC [5706]                  	short_addr  NO_OP			    ; 97     61
  3465 000001AE [C402]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3466                                  ; the next call is reserved for hangool sys call
  3467                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3468 000001B0 [090F]                  	short_addr  _$ECS_Call			    ; 99     63
  3469                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3470                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3471                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3472                                  ;                                                                          ;
  3473 000001B2 [D002]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3474                                  ;                                                                          ;
  3475                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3476                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3477 000001B4 [F20C]                          short_addr  _$GetExtCntry                   ; 101    65
  3478 000001B6 [EF0D]                          short_addr  _$GetSetCdPg                    ; 102    66
  3479 000001B8 [8167]                          short_addr  _$ExtHandle                     ; 103    67
  3480 000001BA [6767]                          short_addr  _$COMMIT                        ; 104    68
  3481                                  
  3482                                  ; 08/07/2018
  3483                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3484                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3485                                  
  3486                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3487 000001BC [A111]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3488 000001BE [6767]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3489 000001C0 [5706]                  	short_addr  NO_OP                           ; 107    6B   
  3490                                  						    ; IFS_IOCTL no longer 
  3491                                  						    ; supported
  3492 000001C2 [7171]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3493                                  
  3494                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3495                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3496                                  ;                                                                          ;
  3497                                  ;ifdef ROMEXEC
  3498                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3499                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3500                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3501                                  ;endif
  3502                                  ;                                                                          ;
  3503                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3504                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3505                                  
  3506                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3507                                  
  3508                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3509                                  
  3510                                  ; 08/07/2018 - Retro DOS v3.0
  3511                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3512                                  
  3513                                  ;	If 	Installed
  3514                                  
  3515                                  align 2
  3516                                  
  3517                                  ;PUBLIC FOO
  3518                                  
  3519                                  FOO:	; LABEL WORD
  3520 000001C4 [1407]                          short_addr  Leave2F
  3521                                  
  3522 000001C6 [C801]                  DTab:	DW  DOSTable
  3523                                  
  3524                                  	;PUBLIC FOO,DTAB
  3525                                  
  3526                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3527                                  
  3528                                  ; 29/04/2019
  3529                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3530                                  
  3531                                  
  3532                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3533                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3534                                         
  3535                                  DOSTable:  ; LABEL  WORD
  3536 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3537 000001C9 [3909]                          short_addr  DOSInstall          ;   0 install check
  3538 000001CB [592F]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3539 000001CD [CA0E]                          short_addr  RECSET              ;   2   RECSET
  3540 000001CF [3309]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3541 000001D1 [C150]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3542 000001D3 [7216]                          short_addr  OUTT                ;   5   OUT
  3543 000001D5 [9753]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3544 000001D7 [1659]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3545 000001D9 [5730]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3546 000001DB [DB5A]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3547 000001DD [7073]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3548 000001DF [A22C]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3549 000001E1 [8C2C]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3550 000001E3 [F50A]                          short_addr  DATE16              ;   13  DATE16
  3551 000001E5 [0D12]                          short_addr  Idle		;   14      empty slot
  3552 000001E7 [0F59]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3553 000001E9 [0D12]                          short_addr  Idle		;   16      empty slot
  3554 000001EB [DA11]                          short_addr  StrCpy              ;   17  StrCpy
  3555 000001ED [F211]                          short_addr  StrLen              ;   18  StrLen
  3556 000001EF [6C50]                          short_addr  UCase		;   19  UCase
  3557 000001F1 [5359]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3558 000001F3 [B25A]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3559 000001F5 [AF66]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3560 000001F7 [126B]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3561 000001F9 [8504]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3562 000001FB [BD6A]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3563 000001FD [C36E]                          short_addr  DriveFromText       ;   26  DriveFromText
  3564 000001FF [9C0B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3565 00000201 [350C]                          short_addr  DSUM                ;   28  DSUM
  3566 00000203 [920B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3567 00000205 [B811]                          short_addr  StrCmp              ;   30  StrCmp
  3568 00000207 [006A]                          short_addr  InitCDS             ;   31  initcds
  3569 00000209 [7C66]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3570 0000020B [9E6E]                          short_addr  _$NameTrans		;   33  $NameTrans
  3571 0000020D [7E06]                          short_addr  CAL_LK              ;   34  CAL_LK
  3572 0000020F [FA41]                          short_addr  DEVNAME             ;   35  DEVNAME
  3573 00000211 [0D12]                          short_addr  Idle                ;   36  Idle
  3574 00000213 [0012]                          short_addr  DStrLen             ;   37  DStrLen
  3575 00000215 [B112]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3576 00000217 [3467]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3577 00000219 [B712]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3578 0000021B [4568]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3579 0000021D [7112]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3580 0000021F [F412]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3581 00000221 [E312]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3582 00000223 [1113]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3583                                          
  3584                                  	; 29/04/2019 - Retro DOS v4.0
  3585 00000225 [1513]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3586                                  
  3587 00000227 [5706]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3588                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3589                                  
  3590                                  DOSTableEnd:  ; LABEL BYTE
  3591                                  
  3592                                  	;ENDIF
  3593                                  
  3594                                  ; ----------------------------------------------------------------------------
  3595                                  ; BREAK   <Copyright notice and version>
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  
  3598                                  ;CODSTRT EQU	$
  3599                                  
  3600                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3601                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3602                                  
  3603                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3604                                  ;       module. The reason is so that the data alignments are the same in
  3605                                  ;       IBM-DOS and MS-DOS up through header.
  3606                                  
  3607                                  	;PUBLIC	HEADER
  3608                                  
  3609                                  HEADER:	; LABEL	BYTE
  3610                                          ;IF	DEBUG
  3611                                          ;DB	13,10,"Debugging DOS version "
  3612                                          ;DB	MAJOR_VERSION + "0"
  3613                                          ;DB	"."
  3614                                          ;DB	(MINOR_VERSION / 10) + "0"
  3615                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3616                                          ;ENDIF
  3617                                  
  3618                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3619                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3620                                  %if 0
  3621                                          ;IF	NOT IBM
  3622                                          DB	13,10,"MS-DOS version "
  3623                                          DB	MAJOR_VERSION + "0"
  3624                                          DB	"."
  3625                                          DB	(MINOR_VERSION / 10) + "0"
  3626                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3627                                          DB	(MINOR_VERSION % 10) + "0"
  3628                                  
  3629                                          ;IF	HIGHMEM
  3630                                          ;DB	"H"
  3631                                          ;ENDIF
  3632                                  
  3633                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3634                                  	; 30/04/2019 - Retro DOS v4.0
  3635                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3636                                  
  3637                                  	;ENDIF
  3638                                  
  3639                                  %endif
  3640                                  
  3641                                  ;IF DEBUG
  3642                                  ;	DB	13,10,"$"
  3643                                  ;ENDIF
  3644                                  
  3645                                  ;include copyrigh.inc
  3646                                  
  3647                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3648                                  
  3649                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3650                                  	;DB	"Licensed Material - Property of Microsoft "
  3651                                  	;DB	"All rights reserved "
  3652                                  
  3653                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3654                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3655                                  
  3656                                  ; 28/12/2022 - Retro DOS v4.1
  3657                                  %if 0
  3658                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3659                                  ms_copyright:
  3660                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3661                                  	db	'Licensed Material - Property of Microsoft '
  3662                                  	db	'All rights reserved '
  3663                                  
  3664                                  %endif
  3665                                  	; 28/12/2022 - Retro DOS v4.1
  3666                                  ms_copyright:
  3667 00000229 0D0A4D5320444F5320-       	db	13,10,"MS DOS Version 5.0"
  3667 00000232 56657273696F6E2035-
  3667 0000023B 2E30               
  3668 0000023D 0D0A436F7079726967-     	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
  3668 00000246 687420313938312D31-
  3668 0000024F 393931204D6963726F-
  3668 00000258 736F667420436F7270-
  3668 00000261 2E0D0A2400         
  3669                                  
  3670                                  ;============================================================================
  3671                                  ; MSCODE.ASM
  3672                                  ;============================================================================
  3673                                  
  3674                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3675                                  ; 03/03/2018
  3676                                  
  3677                                  ;
  3678                                  ; MSCODE.ASM -- MSDOS code
  3679                                  ;
  3680                                  
  3681                                  ;INCLUDE DOSSEG.ASM
  3682                                  ;INCLUDE STDSW.ASM
  3683                                  
  3684                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3685                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3686                                  
  3687                                  ;.xcref
  3688                                  ;INCLUDE DOSSYM.ASM
  3689                                  ;INCLUDE DEVSYM.ASM
  3690                                  ;.cref
  3691                                  ;.list
  3692                                  
  3693                                  ;IFNDEF  KANJI
  3694                                  ;KANJI   EQU     0       ; FALSE
  3695                                  ;ENDIF
  3696                                  
  3697                                  ;IFNDEF  IBM
  3698                                  ;IBM     EQU     0
  3699                                  ;ENDIF
  3700                                  
  3701                                  ;IFNDEF  HIGHMEM
  3702                                  ;HIGHMEM  EQU     0
  3703                                  ;ENDIF
  3704                                  
  3705                                          ;i_need  USER_SP,WORD
  3706                                          ;i_need  USER_SS,WORD
  3707                                          ;i_need  SAVEDS,WORD
  3708                                          ;i_need  SAVEBX,WORD
  3709                                          ;i_need  INDOS,BYTE
  3710                                          ;i_need  NSP,WORD
  3711                                          ;i_need  NSS,WORD
  3712                                          ;i_need  CURRENTPDB,WORD
  3713                                          ;i_need  AUXSTACK,BYTE
  3714                                          ;i_need  CONSWAP,BYTE
  3715                                          ;i_need  IDLEINT,BYTE
  3716                                          ;i_need  NOSETDIR,BYTE
  3717                                          ;i_need  ERRORMODE,BYTE
  3718                                          ;i_need  IOSTACK,BYTE
  3719                                          ;i_need  WPERR,BYTE
  3720                                          ;i_need  DSKSTACK,BYTE
  3721                                          ;i_need  CNTCFLAG,BYTE
  3722                                          ;i_need  LEAVEADDR,WORD
  3723                                          ;i_need  NULLDEVPT,DWORD
  3724                                  
  3725                                          ;IF NOT IBM
  3726                                          ;i_need  OEM_HANDLER,DWORD
  3727                                          ;ENDIF
  3728                                  
  3729                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3730                                  
  3731                                  ;============================================================================
  3732                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3733                                  ;============================================================================
  3734                                  ; 11/07/2018 - Retro DOS v3.0
  3735                                  ; 01/05/2019 - Retro DOS v4.0
  3736                                  
  3737                                  ; DosCode SEGMENT
  3738                                  
  3739                                  ; ==========================================================================
  3740                                  ;
  3741                                  ; $Set_CTRL_C_Trapping
  3742                                  ;
  3743                                  ; Function:
  3744                                  ;	Enable disable ^C checking in dispatcher
  3745                                  ;
  3746                                  ; Inputs:
  3747                                  ;		AL = 0 read ^C status
  3748                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3749                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3750                                  ;		AL = 5 get DOS boot drive
  3751                                  ;		AL = 6 Get version number
  3752                                  ;			RETURNS:
  3753                                  ;				BH = Minor version number
  3754                                  ;				BL = Major version number
  3755                                  ;				DL = DOS internal revision
  3756                                  ;				DH = DOS type flags
  3757                                  ;					Bit 3 	- DOS in ROM
  3758                                  ;					Bit 4 	- DOS in HMA
  3759                                  ;					Bit 0-2, 5-7 - Reserved
  3760                                  ; Outputs:
  3761                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3762                                  ;
  3763                                  ; History:
  3764                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3765                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3766                                  ; ==========================================================================
  3767                                  
  3768                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3769                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3770                                  
  3771                                  	; 01/01/2024
  3772                                  	
  3773                                  _$SET_CTRL_C_TRAPPING:
  3774                                  	; 01/05/2019 - Retro DOS v4.0
  3775                                  
  3776 00000266 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3777 00000268 7603                    	jbe	short scct_1		; If yes continue processing
  3778                                  
  3779 0000026A B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3780 0000026C CF                      	iret
  3781                                  scct_1:
  3782 0000026D 1E                      	push	DS
  3783                                  
  3784                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3785 0000026E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3786                                  	
  3787 00000273 50                      	push	AX			; DL only register that can change
  3788 00000274 56                      	push	SI
  3789                                  
  3790 00000275 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3791 00000278 30E4                    	xor	AH,AH			; Clear high byte of AX
  3792 0000027A 09C0                    	or	AX,AX			; Check for subfunction 0
  3793 0000027C 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3794                                  
  3795 0000027E 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3796 00000280 EB30                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3797                                  scct_2:
  3798 00000282 48                      	dec	AX			; Now dec AX and see if it was 1
  3799 00000283 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3800                                  
  3801 00000285 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3802 00000288 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3803 0000028A EB26                    	jmp	SHORT scct_9s		; Jmp to exit
  3804                                  scct_3:
  3805 0000028C 48                      	dec	AX			; Dec AX again to see if it was 2
  3806 0000028D 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3807                                  
  3808 0000028F 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3809 00000292 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3810 00000294 EB1C                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3811                                  scct_4:
  3812 00000296 3C03                    	cmp	al,3 ; 01/01/2024	
  3813                                  	;cmp	AX,3 			; Test for 5 after it was dec twice
  3814 00000298 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3815 0000029A 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3816 0000029E EB12                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3817                                  scct_5:
  3818 000002A0 3C04                    	cmp	al,4 ; 01/01/2024
  3819                                  	;cmp	AX,4 			; Test for 6 after it was dec twice
  3820 000002A2 750E                    	jne	short scct_9s		; If not equal then not get version
  3821                                  	
  3822                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3823                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)
  3824 000002A4 BB0500                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3825                                  	
  3826                                  	;mov	dl,0
  3827                                  	;mov	DL,DOSREVNM ; 0
  3828                                  
  3829                                  	;xor	dh,dh			; assume vanilla DOS
  3830                                  	; 01/01/2024
  3831 000002A7 BA0000                  	mov	dx,0
  3832 000002AA 3836[F711]              	cmp	byte [DosHasHMA],dh ; 0
  3833                                  	;cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3834                                  	;je	short @F
  3835 000002AE 7402                    	je	short scct_6
  3836                                  	; 01/01/2024
  3837 000002B0 B610                    	mov	dh,10h
  3838                                  	;or	dh,10h
  3839                                  	;;or	DH,DOSINHMA ; 10h
  3840                                  ;@@:
  3841                                  scct_6:
  3842                                  
  3843                                  ;ifdef ROMDOS
  3844                                  ;	or	DH,DOSINROM ; 08h
  3845                                  ;endif ; ROMDOS
  3846                                  
  3847                                  scct_9s:
  3848 000002B2 5E                      	pop	SI
  3849 000002B3 58                      	pop	AX
  3850 000002B4 1F                      	pop	DS
  3851                                  scct_9f:
  3852 000002B5 CF                      	iret
  3853                                  
  3854                                  SetCtrlShortEntry:			; This allows a conditional entry
  3855                                  					; from main dispatch code
  3856 000002B6 EBAE                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3857                                  
  3858                                  ; ==========================================================================
  3859                                  ;									   
  3860                                  ; The following two routines are dispatched to directly with ints disabled
  3861                                  ; immediately after the int 21h entry.	no DIS state is set.
  3862                                  ;
  3863                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3864                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3865                                  ;
  3866                                  ; ==========================================================================
  3867                                  
  3868                                  _$SET_CURRENT_PDB:
  3869 000002B8 1E                      	push	DS
  3870                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3871 000002B9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3872 000002BE 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3873 000002C2 1F                      	pop	DS
  3874 000002C3 CF                      	iret
  3875                                  
  3876                                  ; ==========================================================================
  3877                                  ;
  3878                                  ; $get_current_PDB returns in BX the current process
  3879                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3880                                  ;
  3881                                  ; ==========================================================================
  3882                                  
  3883                                  _$GET_CURRENT_PDB:
  3884 000002C4 1E                      	push	DS
  3885                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3886 000002C5 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3887 000002CA 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3888 000002CE 1F                      	pop	DS
  3889 000002CF CF                      	iret
  3890                                  
  3891                                  ; ==========================================================================
  3892                                  ;
  3893                                  ; Sets the Printer Flag to whatever is in AL.
  3894                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3895                                  ;
  3896                                  ; ==========================================================================
  3897                                  
  3898                                  _$SET_PRINTER_FLAG:
  3899 000002D0 1E                      	push	ds
  3900                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3901 000002D1 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3902 000002D6 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3903 000002D9 1F                      	pop	ds
  3904 000002DA CF                      	iret
  3905                                  
  3906                                  ; 01/05/2019 - Retro DOS v4.0
  3907                                  ; 08/07/2018 - Retro DOS v3.0
  3908                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3909                                  
  3910                                  ; ----------------------------------------------------------------------------
  3911                                  ; BREAK   <System call entry points and dispatcher>
  3912                                  ; ----------------------------------------------------------------------------
  3913                                  
  3914                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3915                                  
  3916                                  ; ==========================================================================
  3917                                  ;
  3918                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3919                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3920                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3921                                  ;
  3922                                  ; ==========================================================================
  3923                                  
  3924                                  SYSTEM_CALL:    ; PROC NEAR
  3925                                  
  3926                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3927                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3928                                  
  3929                                  ;entry	QUIT				
  3930                                  QUIT:				; INT 20H entry point	
  3931                                  	;MOV	AH,0
  3932 000002DB 30E4                    	xor	ah,ah ; 08/07/2018
  3933 000002DD EB36                    	JMP     SHORT SAVREGS
  3934                                  
  3935                                  ; ---------------------------------------------------------------------------
  3936                                  
  3937                                  	; The system call in AH is out of the range that we know how
  3938                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3939                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3940                                  	; error as this may break some programs compatability.
  3941                                  
  3942                                  BADCALL:
  3943                                          ;MOV	AL,0
  3944 000002DF 30C0                    	xor	al,al ; 08/07/2018
  3945                                  IRETT:	; 06/05/2019
  3946                                  _IRET:
  3947 000002E1 CF                              IRET
  3948                                  
  3949                                  ; ---------------------------------------------------------------------------
  3950                                  
  3951                                  ; 01/05/2019 - Retro DOS v4.0
  3952                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3953                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3954                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3955                                  
  3956                                  	; An alternative method of entering the system is to perform a
  3957                                  	; CALL 5 in the program segment prefix with the contents of CL
  3958                                  	; indicating what system call the user would like. A subset of
  3959                                  	; the possible system calls is allowed here only the
  3960                                  	; CPM-compatible calls may get dispatched.
  3961                                  
  3962                                  		; System call entry point and dispatcher
  3963                                  CALL_ENTRY:
  3964 000002E2 1E                      	push	DS
  3965                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3966 000002E3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3967 000002E8 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  3968                                  
  3969 000002EC 58                              POP     AX                      ; IP from the long call at 5
  3970 000002ED 58                              POP     AX                      ; Segment from the long call at 5
  3971 000002EE 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  3972                                  
  3973                                  		; Re-order the stack to simulate an interrupt 21.
  3974                                  
  3975 000002F2 9C                      	PUSHF				; Start re-ordering the stack
  3976 000002F3 FA                      	CLI
  3977 000002F4 50                              PUSH    AX                      ; Save segment
  3978 000002F5 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  3979                                  	; 04/11/2022
  3980                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  3981                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  3982 000002F9 FF36[EC05]              	push	word [SAVEDS]
  3983 000002FD 1F                      	pop	ds
  3984                                  	;
  3985                                  	;cmp	cl,36
  3986 000002FE 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  3987 00000301 77DC                            JA      SHORT BADCALL
  3988 00000303 88CC                            MOV     AH,CL
  3989                                  	; 08/07/2018
  3990 00000305 EB0E                    	jmp	short SAVREGS
  3991                                  
  3992                                  ; ---------------------------------------------------------------------------
  3993                                  
  3994                                  ; 01/05/2019 - Retro DOS v4.0
  3995                                  
  3996                                  	; This is the normal INT 21 entry point. We first perform a
  3997                                  	; quick test to see if we need to perform expensive DOS-entry
  3998                                  	; functions. Certain system calls are done without interrupts
  3999                                  	; being enabled.
  4000                                  
  4001                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  4002                                  
  4003                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4004                                  ; 04/11/2022
  4005                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4006                                  
  4007                                  COMMAND:
  4008                                  	; 22/12/2022
  4009 00000307 FA                      	cli
  4010                                  
  4011                                  	; 01/05/2019 - Retro DOS v4.0
  4012                                  	; 08/07/2018 - Retro DOS v3.0
  4013                                  
  4014                                  ; 22/12/2022
  4015                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4016                                  	;IF	NOT IBM
  4017 00000308 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4018 0000030B 7203                    	JB	SHORT NOTOEM
  4019 0000030D E97F01                  	JMP	_$SET_OEM_HANDLER
  4020                                  
  4021                                  NOTOEM:
  4022                                  	;ENDIF
  4023                                  
  4024                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4025                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4026                                  
  4027                                  	; 22/12/2022
  4028                                  	;cli	; 08/07/2018
  4029                                  
  4030                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4031                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4032                                  	; 04/11/2022
  4033 00000310 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4034                                  	;JBE	SHORT SAVREGS
  4035 00000313 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4036                                  
  4037                                  	; 31/05/2019
  4038                                  
  4039                                  	; The following set of calls are issued by the server at
  4040                                  	; *arbitrary* times and, therefore, must be executed on
  4041                                  	; the user's entry stack and executed with interrupts off.
  4042                                  
  4043                                  SAVREGS:
  4044                                  	; 01/05/2019 - Retro DOS v4.0
  4045                                  	; 10/08/2018
  4046                                  	; 08/07/2018 - Retro DOS v3.0
  4047 00000315 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4048                                  	;;je	_$SET_CTRL_C_TRAPPING
  4049                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4050 00000318 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4051                                  	; 04/11/2022
  4052 0000031A 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4053 0000031C 80FC64                  	cmp	ah,64h			; Check Max case number
  4054 0000031F 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4055 00000321 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4056 00000323 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4057 00000326 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4058 00000328 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4059 0000032B 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4060 0000032D 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4061 00000330 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4062                                  
  4063                                  SaveAllRegs:
  4064                                  	; 01/05/2019 - Retro DOS v4.0
  4065                                  
  4066 00000332 06                              push	ES
  4067 00000333 1E                      	push	DS
  4068 00000334 55                      	push	BP
  4069 00000335 57                      	push	DI
  4070 00000336 56                      	push	SI
  4071 00000337 52                      	push	DX
  4072 00000338 51                      	push	CX
  4073 00000339 53                      	push	BX
  4074 0000033A 50                      	push	AX
  4075                                  
  4076 0000033B 8CD8                    	mov	AX,DS
  4077                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4078 0000033D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4079 00000342 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4080 00000345 891E[EA05]              	mov	[SAVEBX],BX
  4081                                  
  4082                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4083                                  	
  4084                                  	; 08/07/2018 - Retro DOS v3.0        
  4085                                  	;xor     ax,ax
  4086                                  	;mov     [USER_ID],ax
  4087                                  	;mov     ax,[CurrentPDB]
  4088                                  	;mov     [PROC_ID],ax
  4089                                  
  4090                                  	; 01/05/2019
  4091                                  
  4092                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4093                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4094                                  	; this!!!
  4095                                  
  4096 00000349 A1[8405]                	MOV     AX,[USER_SP]
  4097 0000034C A3[F205]                        MOV     [NSP],AX
  4098 0000034F A1[8605]                        MOV     AX,[USER_SS]
  4099 00000352 A3[F005]                        MOV     [NSS],AX
  4100                                  
  4101 00000355 31C0                    	xor	AX,AX ; 0
  4102 00000357 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4103                                  
  4104 0000035A F606[3010]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4105 0000035F 7503                    	jnz	short set_indos_flag	; if win386 present
  4106 00000361 A3[3E03]                	mov	[USER_ID],AX
  4107                                  set_indos_flag:
  4108 00000364 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4109                                  
  4110 00000368 8926[8405]                      MOV     [USER_SP],SP
  4111 0000036C 8C16[8605]                      MOV     [USER_SS],SS
  4112                                  
  4113 00000370 A1[3003]                	mov	AX,[CurrentPDB]
  4114 00000373 A3[3C03]                	mov	[PROC_ID],AX
  4115 00000376 8ED8                    	mov	DS,AX
  4116 00000378 58                      	pop	AX
  4117 00000379 50                      	push	AX
  4118                                  
  4119                                  	; save user stack in his area for later returns (possibly from EXEC)
  4120                                  
  4121 0000037A 89262E00                        MOV     [PDB.USER_STACK],SP
  4122 0000037E 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4123                                  
  4124                                  	; 18/07/2018
  4125                                  	;mov	byte [CS:FSHARING], 0
  4126                                  
  4127                                  	;MOV     BX,CS			; no holes here.
  4128                                  	;MOV     SS,BX
  4129                                  
  4130                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4131 00000382 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4132                                  					;entry	REDISP
  4133                                  REDISP:
  4134 00000387 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4135 0000038A FB                              STI                             ; stack is in our space now...
  4136                                  
  4137 0000038B 8CD3                    	mov	bx,ss
  4138 0000038D 8EDB                    	mov	ds,bx
  4139                                  
  4140 0000038F 93                      	xchg	ax,bx
  4141                                  
  4142 00000390 31C0                    	xor	ax,ax ; 0
  4143                                  
  4144                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4145                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4146                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4147                                  
  4148                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4149                                  
  4150                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4151                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4152                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4153                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4154                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4155                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4156                                  	;inc	ax
  4157                                  	;;inc	AL			; AL = 1
  4158                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4159                                  
  4160                                  	; 15/12/2022
  4161 00000392 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4162                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4163 00000395 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4164 0000039B A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4165                                  	;mov	byte [IDLEINT],1
  4166 0000039E A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4167 000003A1 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4168 000003A4 40                      	inc	ax
  4169                                  	;inc	al			; AL = 1
  4170 000003A5 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4171                                  
  4172 000003A8 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4173                                  
  4174 000003A9 88E3                    	MOV     BL,AH			
  4175 000003AB D1E3                            SHL     BX,1			; 2 bytes per call in table
  4176                                         
  4177 000003AD FC                      	CLD
  4178                                  		; Since the DOS maintains mucho state information across system
  4179                                  		; calls, we must be very careful about which stack we use.
  4180                                  		; First, all abort operations must be on the disk stack. This
  4181                                  		; is due to the fact that we may be hitting the disk (close
  4182                                  		; operations, flushing) and may need to report an INT 24.
  4183                                          
  4184 000003AE 08E4                    	OR      AH,AH
  4185 000003B0 7416                            JZ      SHORT DSKROUT		; ABORT
  4186                                  
  4187                                          ;CMP	AH,12
  4188                                          ;JBE	SHORT IOROUT		; Character I/O
  4189                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4190                                          ;JZ	SHORT IOROUT
  4191                                          ;CMP	AH,SET_CURRENT_PDB
  4192                                          ;JNZ	SHORT DSKROUT
  4193                                  
  4194                                  		; Second, PRINT and PSPRINT and the server issue
  4195                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4196                                  		; This call MUST, therefore, use the AUXSTACK.
  4197                                  
  4198                                  	; 10/08/2018
  4199 000003B2 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4200 000003B5 7439                    	je      short DISPCALL
  4201                                  	
  4202                                  	; 01/05/2019
  4203                                  	
  4204                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4205                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4206                                  
  4207 000003B7 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4208 000003BA 770C                    	ja      short DSKROUT
  4209                                  
  4210                                  IOROUT:
  4211                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4212                                  	; (ss: prefix was not needed here! ds=ss)
  4213                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4214                                  	; 15/12/2022
  4215 000003BC 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4216 000003C1 752D                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4217 000003C3 BC[A00A]                        MOV     SP,IOSTACK
  4218 000003C6 EB28                            JMP     SHORT DISPCALL
  4219                                  
  4220                                  		; We are on a system call that is classified as "the rest".
  4221                                  		; We place ourselves onto the DSKSTACK and away we go.
  4222                                  		; We know at this point:
  4223                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4224                                  		;    ErrorMode and WpErr
  4225                                  		; *  That there can be no critical sections in effect.
  4226                                  		;    We signal the server to remove all the resources.
  4227                                  
  4228                                  DSKROUT:
  4229                                  	; 01/01/2024
  4230                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4231                                  	; 08/07/2018 - Retro DOS v3.0
  4232 000003C8 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4233                                  	; 01/01/2024
  4234                                  	;mov	byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4235                                  	;MOV	BYTE [WPERR],-1		; error mode, so good place to
  4236                                  	                   		; make sure flags are reset
  4237 000003CB C706[2203]FF01          	mov	word [WPERR],1FFh ; (PCDOS 7.1 IBMDOS.COM))
  4238                                  
  4239 000003D1 C606[2003]00            	MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  4240                                  
  4241                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4242                                  	; (ss: prefix was not needed here! ds=ss)
  4243                                  
  4244                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4245                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4246                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4247                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4248                                                                          ; make sure flags are reset
  4249 000003D6 50                      	push    ax
  4250 000003D7 B482                    	mov     ah,82h			; Release all resource information
  4251 000003D9 CD2A                    	int     2Ah 		; Microsoft Networks 
  4252                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4253 000003DB 58                      	pop     ax
  4254                                  
  4255                                  		; Since we are going to be running on the DSKStack and since
  4256                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4257                                  		; generation of INT 28's.
  4258                                  
  4259                                  	; 15/12/2022
  4260                                  	;mov     byte [ss:IDLEINT],0
  4261                                  	;
  4262                                          ;mov	sp,DSKSTACK
  4263                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4264                                          ;jz	short DISPCALL
  4265                                  
  4266 000003DC C606[5803]00            	mov     byte [IDLEINT],0
  4267                                  
  4268 000003E1 BC[2009]                	MOV     SP,DSKSTACK
  4269 000003E4 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4270 000003E9 7405                    	JZ      SHORT DISPCALL
  4271                                  
  4272 000003EB 50                              PUSH    AX
  4273                                          ;invoke	DSKSTATCHK
  4274 000003EC E8EB4C                          CALL	DSKSTATCHK
  4275 000003EF 58                      	POP     AX
  4276                                  DISPCALL:
  4277                                  	; 01/05/2019 - Retro DOS v4.0
  4278 000003F0 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4279                                  
  4280                                  	; 15/12/2022
  4281 000003F5 871E[EA05]              	xchg	bx,[SAVEBX]
  4282 000003F9 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4283                                  
  4284                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4285                                  	; (ss: prefix was not needed here! ds=ss)        
  4286                                  	;xchg	bx,[ss:SAVEBX]
  4287                                  	;mov	ds,[ss:SAVEDS]
  4288                                  
  4289 000003FD 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4290                                  
  4291                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4292                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4293                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4294                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4295                                  	; because this bit is used to indicate to the next int 21 call that
  4296                                  	; the previous int 21 was an exec.
  4297                                  	;
  4298                                  	; So do not add any code between the call above and the label 
  4299                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4300                                  
  4301                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4302 00000402 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4303                                  
  4304                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4305                                  ; DOSCODE:41F7h
  4306                                  
  4307                                  ;entry LEAVE
  4308                                  ;;;_LEAVE:				; Exit from a system call
  4309                                  LeaveDOS: ; 18/07/2018 
  4310                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4311 00000408 FA                      	CLI
  4312                                  
  4313                                  	; 01/05/2019
  4314                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4315 00000409 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4316 0000040E 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4317 00000413 7526                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4318                                  
  4319                                  LeaveA20On:
  4320 00000415 FE0E[2103]                      DEC     BYTE [INDOS]
  4321                                          ; 04/11/2022
  4322 00000419 8E16[8605]              	mov	ss,[USER_SS]
  4323 0000041D 8B26[8405]              	MOV     SP,[USER_SP]
  4324                                  	;MOV	SS,[USER_SS]
  4325 00000421 89E5                    	MOV     BP,SP
  4326                                  	;MOV	[BP.user_AX],AL	
  4327                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4328                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h
  4329                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4330                                  
  4331                                  	; 15/12/2022
  4332 00000423 884600                  	MOV	[BP],AL	; mov [bp+0],al
  4333                                  	
  4334                                  	;MOV	AX,[NSP]
  4335                                          ;MOV	[USER_SP],AX
  4336                                          ;MOV	AX,[NSS]
  4337                                          ;MOV	[USER_SS],AX
  4338                                  	; 01/01/2024
  4339 00000426 C406[F005]              	les	ax,[NSS] ; (PCDOS 7.1 IBMDOS.COM)
  4340 0000042A A3[8605]                	mov	[USER_SS],ax
  4341 0000042D 8C06[8405]              	mov	[USER_SP],es
  4342                                  
  4343 00000431 58                      	pop	AX
  4344 00000432 5B                      	pop	BX
  4345 00000433 59                      	pop	CX
  4346 00000434 5A                      	pop	DX
  4347 00000435 5E                      	pop	SI
  4348 00000436 5F                      	pop	DI
  4349 00000437 5D                      	pop	BP
  4350 00000438 1F                      	pop	DS
  4351 00000439 07                      	pop	ES
  4352                                  
  4353 0000043A CF                              IRET
  4354                                  
  4355                                  disa20:	   				; M068 - Start
  4356 0000043B 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4357 0000043F 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4358 00000443 75D0                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4359                                  					;    a20 off
  4360                                  					; Y: turn a20 off and dec a20off_count
  4361 00000445 FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4362                                   					; Start - M004
  4363 00000449 1E                      	push	ds			; segment of stub
  4364 0000044A BB[1311]                	mov	bx,disa20_iret		; offset in stub
  4365 0000044D 53                      	push	bx
  4366 0000044E CB                      	retf	  			; go to stub
  4367                                  					; End - M004
  4368                                  ;SYSTEM_CALL ENDP
  4369                                  
  4370                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4371                                  ; 04/11/2022
  4372                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4373                                  
  4374                                  ; ==========================================================================
  4375                                  ;
  4376                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4377                                  ; the stack prior to giving the user control
  4378                                  ;
  4379                                  ; ==========================================================================
  4380                                  
  4381                                  ; 01/05/2019 - Retro DOS v4.0
  4382                                  
  4383                                          ;procedure restore_world,NEAR
  4384                                  restore_world:
  4385                                  	;getdseg <es>		; es -> dosdata
  4386 0000044F 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4387                                  
  4388 00000454 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4389                                  
  4390 00000459 58                              POP     AX
  4391 0000045A 5B                              POP     BX
  4392 0000045B 59                              POP     CX
  4393 0000045C 5A                              POP     DX
  4394 0000045D 5E                              POP     SI
  4395 0000045E 5F                              POP     DI
  4396 0000045F 5D                              POP     BP
  4397 00000460 1F                              POP     DS
  4398                                  
  4399 00000461 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4400                                  
  4401                                  ;restore_world	ENDP
  4402                                  
  4403                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4404                                  
  4405                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4406                                  ; 04/11/2022
  4407                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4408                                  
  4409                                  ; ==========================================================================
  4410                                  ;
  4411                                  ; Save_World saves complete registers on the stack
  4412                                  ;
  4413                                  ; ==========================================================================
  4414                                  
  4415                                          ;procedure save_world,NEAR
  4416                                  save_world:
  4417                                  	;getdseg <es>		; es -> dosdata
  4418 00000466 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4419                                  
  4420 0000046B 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4421                                  
  4422                                  	; 12/05/2019
  4423                                          
  4424 00000470 1E                      	PUSH    DS
  4425 00000471 55                              PUSH    BP
  4426 00000472 57                              PUSH    DI
  4427 00000473 56                              PUSH    SI
  4428 00000474 52                              PUSH    DX
  4429 00000475 51                              PUSH    CX
  4430 00000476 53                              PUSH    BX
  4431 00000477 50                              PUSH    AX
  4432                                  
  4433 00000478 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4434                                  
  4435 0000047D 55                      	push	BP		
  4436 0000047E 89E5                    	mov	BP,SP
  4437 00000480 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4438 00000483 5D                      	pop	BP
  4439                                  	
  4440 00000484 C3                      	retn
  4441                                  
  4442                                  ;save_world	ENDP
  4443                                  
  4444                                  ; 01/05/2019
  4445                                  
  4446                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4447                                  ; 04/11/2022
  4448                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4449                                  
  4450                                  ; ==========================================================================
  4451                                  ;
  4452                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4453                                  ;
  4454                                  ; ==========================================================================
  4455                                  
  4456                                          ;procedure get_user_stack,NEAR
  4457                                  Get_User_Stack:
  4458                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4459 00000485 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4460 0000048A C536[8405]                      lds	si,[USER_SP]
  4461 0000048E C3                      	retn
  4462                                  
  4463                                  ;get_user_stack  ENDP
  4464                                  
  4465                                  ; 22/12/2022
  4466                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4467                                  ;%if 0
  4468                                  
  4469                                  ; ---------------------------------------------------------------------------
  4470                                  ;
  4471                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4472                                  ; Inputs:
  4473                                  ;	User registers, User Stack, INTS disabled
  4474                                  ;	If CALL F8, DS:DX is new handler address
  4475                                  ; Function:
  4476                                  ;	Process OEM INT 21 extensions
  4477                                  ; Outputs:
  4478                                  ;	Jumps to OEM_HANDLER if appropriate
  4479                                  ;
  4480                                  ; ---------------------------------------------------------------------------
  4481                                  
  4482                                  ;IF	NOT IBM
  4483                                  
  4484                                  _$SET_OEM_HANDLER:
  4485                                  	; 01/05/2019 - Retro DOS v4.0
  4486                                  	
  4487                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4488                                  	;(jb	short NOTOOEM)
  4489                                  
  4490 0000048F 06                      	push	es ; *
  4491                                  	;getdseg <es>			; es -> dosdata
  4492 00000490 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4493                                  
  4494 00000495 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4495                                  						; (message) request	
  4496                                  	; AH = 0F8h = SET OEM HANDLER
  4497                                  
  4498 00000497 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4499 0000049C 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4500                                  
  4501 000004A1 07                      	pop	es ; *
  4502                                  
  4503 000004A2 CF                      	IRET                            ; Quick return, Have altered no registers
  4504                                  
  4505                                  check_trueversion_request:
  4506                                  	; 18/07/2019 - Retro DOS v3.0
  4507                                  
  4508                                  	; Retro DOS v2.0 - 20/04/2018
  4509 000004A3 83F8FF                  	CMP	AX,0FFFFh
  4510                                  	; 18/07/2018
  4511 000004A6 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4512                                  
  4513                                  	; 01/05/2019
  4514 000004A8 07                      	pop	es ; *
  4515                                  
  4516 000004A9 B40E                    	mov	ah,0Eh
  4517                                  
  4518                                  	; Retro DOS v4.0 feature only!
  4519 000004AB 81FBA101                	cmp	bx,417  ; Signature to bypass
  4520                                  			; Retro DOS true version message	
  4521 000004AF 7414                    	je	short true_version_iret
  4522                                  
  4523 000004B1 56                      	push	si
  4524 000004B2 53                      	push	bx
  4525                                  
  4526 000004B3 BE[BF00]                	mov	si,RETRODOSMSG
  4527                                  wrdosmsg:
  4528                                  	;movb	ah,0Eh
  4529 000004B6 BB0700                  	mov	bx,7
  4530                                  wrdosmsg_nxt:
  4531 000004B9 2EAC                    	cs	lodsb
  4532 000004BB 3C24                    	cmp	al,'$'
  4533 000004BD 7404                    	je	short wrdosmsg_ok		
  4534 000004BF CD10                    	int	10h
  4535 000004C1 EBF6                    	jmp	short wrdosmsg_nxt
  4536                                  
  4537                                  wrdosmsg_ok:
  4538 000004C3 5B                      	pop	bx
  4539 000004C4 5E                      	pop	si
  4540                                  
  4541                                  true_version_iret:
  4542                                  	; ah = 0Eh
  4543                                  	;mov	al,40h ; Retro DOS v4.0
  4544                                  	; 
  4545 000004C5 B041                    	mov	al,41h ; Retro DOS v4.1 
  4546 000004C7 CF                      	iret
  4547                                  
  4548                                  	; If above F8 try to jump to handler
  4549                                  
  4550                                  DO_OEM_FUNC:
  4551                                  	; 01/05/2019
  4552 000004C8 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4553 000004CE 7504                    	JNE     short OEM_JMP
  4554 000004D0 07                      	pop	es ; *
  4555 000004D1 E90BFE                  	JMP     BADCALL                 ; Handler not initialized
  4556                                  OEM_JMP:
  4557 000004D4 06                      	push	es
  4558 000004D5 1F                      	pop	ds ; DOSDATA segment !
  4559 000004D6 07                      	pop	es ; *
  4560                                  
  4561                                  	; 22/12/2022
  4562 000004D7 FB                      	sti	; (enable interrupts before jumping to private handler)  
  4563                                  
  4564 000004D8 FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4565                                  
  4566                                  ;       ENDIF
  4567                                  
  4568                                  ; ---------------------------------------------------------------------------
  4569                                  
  4570                                  ;%endif
  4571                                  
  4572                                  ;============================================================================
  4573                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4574                                  ;============================================================================
  4575                                  ; 17/07/2018 - Retro DOS v3.0
  4576                                  
  4577                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4578                                  ;	NAME	IBMCODE
  4579                                  
  4580                                  ;BREAK <NullDev -- Driver for null device>
  4581                                  
  4582                                  ; ROMDOS note:
  4583                                  ;	NUL device driver used to be here, but it was removed and placed in
  4584                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4585                                  ;	header, which is also in DOSDATA.
  4586                                  
  4587                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4588                                  
  4589                                  ;----------------------------------------------------------------------------
  4590                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4591                                  ;----------------------------------------------------------------------------
  4592                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4593                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4594                                  
  4595                                  ;Public MSC001S,MSC001E
  4596                                  ;MSC001S label byte
  4597                                  	;IF	IBM
  4598                                  ; Codes returned by BIOS
  4599                                  ERRIN:
  4600 000004DC 02                      	DB	2			; NO RESPONSE
  4601 000004DD 06                      	DB	6			; SEEK FAILURE
  4602 000004DE 0C                      	DB	12			; GENERAL ERROR
  4603 000004DF 04                      	DB	4			; BAD CRC
  4604 000004E0 08                      	DB	8			; SECTOR NOT FOUND
  4605 000004E1 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4606                                  ERROUT:
  4607                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4608 000004E2 80                      	DB	80H			; NO RESPONSE
  4609 000004E3 40                      	DB	40H			; Seek failure
  4610 000004E4 02                      	DB	2			; Address Mark not found
  4611 000004E5 10                      	DB	10H			; BAD CRC
  4612 000004E6 04                      	DB	4			; SECTOR NOT FOUND
  4613 000004E7 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4614                                  
  4615                                  NUMERR	EQU	$-ERROUT
  4616                                  	;ENDIF
  4617                                  ;MSC001E label byte
  4618                                  ;----------------------------------------------------------------------------
  4619                                  
  4620                                  ;============================================================================
  4621                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4622                                  ;============================================================================
  4623                                  ; 18/07/2018 - Retro DOS v3.0
  4624                                  ; 15/05/2019 - Retro DOS v4.0
  4625                                  
  4626                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4627                                  
  4628                                  ;   AbsSetup - setup for abs disk functions
  4629                                  ;----------------------------------------------------------------------------
  4630                                  
  4631                                  AbsSetup:
  4632                                  	; 02/01/2024
  4633 000004E8 1E                      	push	ds ; *
  4634 000004E9 16                      	push	ss
  4635 000004EA 1F                      	pop	ds
  4636 000004EB FE06[2103]              	inc	byte [INDOS]
  4637                                  	;INC	byte [SS:INDOS]		; SS override
  4638 000004EF FB                      	STI
  4639 000004F0 FC                      	CLD
  4640                                  	; 02/01/2024
  4641                                  	;PUSH	DS
  4642                                  	;push	ss
  4643                                  	;pop	ds
  4644 000004F1 E80901                  	CALL	GETBP
  4645                                  	; 02/01/2024
  4646 000004F4 1F                      	pop	ds ; *
  4647 000004F5 7239                    	JC	short errdriv 		; PM. error drive ;AN000;
  4648                                  	;mov	word [es:bp+1Fh]
  4649 000004F7 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4650                                  
  4651                                  	; 02/01/2024
  4652                                  ;errdriv:
  4653                                  ;	POP	DS
  4654                                  ;	jnc	short AbsSetup2
  4655                                  ;AbsSetup_retn:
  4656                                  ;	retn
  4657                                  
  4658                                  AbsSetup2:
  4659                                  	; 15/05/2019 - Retro DOS v4.0
  4660                                  	; MSDOS 6.0
  4661                                  					; SS override
  4662 000004FD 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4663 00000504 E83504                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4664 00000507 7227                    	jc	short AbsSetup_retn
  4665 00000509 E85956                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4666                                  
  4667                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4668 0000050C 1E                      	PUSH	DS
  4669 0000050D 56                      	PUSH	SI
  4670 0000050E 50                      	PUSH	AX
  4671                                  
  4672 0000050F 16                      	push	ss
  4673 00000510 1F                      	pop	ds
  4674                                  	
  4675 00000511 BE[BE03]                	MOV	SI,OPENBUF
  4676 00000514 8804                    	MOV	[SI],AL
  4677 00000516 800441                  	ADD	BYTE [SI],"A"
  4678 00000519 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4679 0000051E B80003                  	MOV	AX,0300H
  4680 00000521 F8                      	CLC
  4681 00000522 CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4682                                  		
  4683                                  		; 04/11/2022
  4684                                  		; (INT 2Ah - AX = 0300h)
  4685                                  		; Microsoft Networks - CHECK DIRECT I/O
  4686                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4687                                  		;    only drive specifier--must include the colon)
  4688                                  		; Return: CF clear if absolute disk access allowed
  4689                                  
  4690 00000524 58                      	POP	AX
  4691 00000525 5E                      	POP	SI
  4692 00000526 1F                      	POP	DS
  4693 00000527 7307                    	jnc	short AbsSetup_retn
  4694                                  
  4695                                  	;mov	word [ss:EXTERR],32h
  4696 00000529 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4697                                  errdriv:	; 02/01/2024
  4698                                  AbsSetup_retn:
  4699 00000530 C3                      	retn
  4700                                  
  4701                                  ;---------------------------------------------------------------------------
  4702                                  ;
  4703                                  ; Procedure Name : ABSDRD
  4704                                  ;
  4705                                  ; Interrupt 25 handler. Performs absolute disk read.
  4706                                  ; Inputs:	AL - 0-based drive number
  4707                                  ;		DS:BX point to destination buffer
  4708                                  ;		CX number of logical sectors to read
  4709                                  ;		DX starting logical sector number (0-based)
  4710                                  ; Outputs:	Original flags still on stack
  4711                                  ;		Carry set
  4712                                  ;		    AH error from BIOS
  4713                                  ;		    AL same as low byte of DI from INT 24
  4714                                  ;
  4715                                  ;---------------------------------------------------------------------------
  4716                                          ;procedure   ABSDRD,FAR
  4717                                  ABSDRD:
  4718                                  	; 15/05/2019 - Retro DOS v4.0
  4719                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4720                                  	; 04/11/2022
  4721                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4722                                  	
  4723                                  	; MSDOS 6.0
  4724 00000531 FA                      	CLI
  4725                                  	
  4726                                  ;	set up ds to point to DOSDATA
  4727                                  
  4728 00000532 50                      	push	ax			; preserve AX value
  4729 00000533 8CD8                    	mov	ax,ds			; store DS value in AX
  4730                                  	;getdseg <ds>
  4731 00000535 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4732 0000053A A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4733 0000053D 58                      	pop	ax			; restore AX value
  4734                                  
  4735                                  	; M072:
  4736                                  	; We shall save es on the user stack here. We need to use ES in
  4737                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4738                                  	; time in order to restore the user stack.
  4739                                  
  4740 0000053E 06                      	push	es  ; ****		; M072
  4741                                  
  4742 0000053F 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4743 00000543 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4744                                  
  4745                                  ; 	set up ss to point to DOSDATA
  4746                                  ;
  4747                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4748                                  ; version of the getdseg macro with the SS register! An interrupt will
  4749                                  ; sneak through.
  4750                                  
  4751                                  ;ifndef ROMDOS
  4752                                  	;getdseg <ss>			; cli in entry of routine
  4753 00000547 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4754                                  ;else
  4755                                  ;	mov	ds, cs:[BioDataSeg]
  4756                                  ;	assume	ds:bdata
  4757                                  ;
  4758                                  ;	mov	ss, ds:[DosDataSg]
  4759                                  ;	assume	ss:DOSDATA
  4760                                  ;
  4761                                  ;endif ; ROMDOS
  4762                                  
  4763 0000054C BC[2009]                	MOV	SP,DSKSTACK
  4764                                  
  4765 0000054F 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4766                                  
  4767 00000553 06                      	push	es ; *** (MSDOS 6.21)
  4768 00000554 E80FFF                  	call	save_world		; save all regs
  4769                                  
  4770 00000557 06                      	PUSH	ES ; **
  4771 00000558 E88DFF                  	CALL	AbsSetup
  4772 0000055B 723D                    	JC	short ILEAVE
  4773                                  
  4774                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4775                                  	;  the secondary cache. The secondary cache does not check for media
  4776                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4777                                  	;  read, and get data from the previous disk. To get around this,
  4778                                  	;  we just won't use the secondary cache for absolute disk reads.
  4779                                  	;                                                      -mw 8/5/88
  4780                                  
  4781                                  	;EnterCrit critDisk
  4782 0000055D E8B60D                  	call	ECritDisk
  4783 00000560 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4784                                  	;LeaveCrit critDisk
  4785 00000566 E8C80D                  	call	LCritDisk
  4786                                  
  4787                                          ;invoke	DSKREAD
  4788 00000569 E81832                  	CALL	DSKREAD
  4789 0000056C 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4790                                  
  4791 0000056E 89F9                            mov     cx,di
  4792 00000570 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4793 00000575 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4794                                  
  4795                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4796                                  ;            sectors, also termed an "Extent".)
  4797                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4798                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4799                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4800                                  ;
  4801                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4802                                  ;	buffers must be "read" into the transfer memory block, so that the
  4803                                  ;       transfer memory reflects the most recent data.
  4804                                  
  4805                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4806 0000057A E85734                          call	DskRdBufScan
  4807 0000057D EB1B                    	jmp     short ILEAVE
  4808                                  
  4809                                  TLEAVE:
  4810 0000057F 7419                    	JZ	short ILEAVE
  4811                                  
  4812                                  ERR_LEAVE:				; M039
  4813                                  	; 15/07/2018 - Retro DOS v3.0
  4814                                          ;IF	IBM
  4815                                  ; Translate the error code to ancient 1.1 codes
  4816 00000581 06                              PUSH    ES ; *
  4817 00000582 0E                              PUSH    CS
  4818 00000583 07                              POP     ES
  4819 00000584 30E4                            XOR     AH,AH			; Nul error code
  4820                                  	;mov	cx,6
  4821 00000586 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4822 00000589 BF[DC04]                        MOV     DI,ERRIN		; Point to error conditions
  4823 0000058C F2AE                            REPNE   SCASB
  4824 0000058E 7504                            JNZ     SHORT LEAVECODE		; Not found
  4825                                  	;mov	ah,[ES:DI+5]
  4826 00000590 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4827                                  LEAVECODE:
  4828 00000594 07                              POP     ES ; *
  4829                                  	; 15/05/2019 - Retro DOS v4.0
  4830 00000595 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4831                                          ;ENDIF
  4832                                  
  4833 00000599 F9                              STC
  4834                                  ILEAVE:
  4835                                  	; 15/05/2019
  4836 0000059A 07                              POP     ES ; **
  4837 0000059B E8B1FE                  	call	restore_world
  4838 0000059E 07                              pop	es ; *** (MSDOS 6.21)
  4839 0000059F FA                      	CLI
  4840 000005A0 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4841 000005A4 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4842 000005A9 16                              push	ss			; M072 - Start
  4843 000005AA 07                      	pop	es			; es - dosdata
  4844 000005AB 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4845 000005B0 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4846 000005B5 07                      	pop	es  ; ****		; Note es was saved on user
  4847                                  					; stack at entry 
  4848                                  					; M072 - End
  4849 000005B6 FB                              STI
  4850 000005B7 CB                      	RETF   ; ! FAR return !
  4851                                  
  4852                                  ;ABSDRD	ENDP
  4853                                  
  4854                                  ;---------------------------------------------------------------------------
  4855                                  ;
  4856                                  ; Procedure Name : ABSDWRT
  4857                                  ;
  4858                                  ; Interrupt 26 handler. Performs absolute disk write.
  4859                                  ; Inputs:	AL - 0-based drive number
  4860                                  ;		DS:BX point to source buffer
  4861                                  ;		CX number of logical sectors to write
  4862                                  ;		DX starting logical sector number (0-based)
  4863                                  ; Outputs:	Original flags still on stack
  4864                                  ;		Carry set
  4865                                  ;		    AH error from BIOS
  4866                                  ;		    AL same as low byte of DI from INT 24
  4867                                  ;
  4868                                  ;---------------------------------------------------------------------------
  4869                                          ;procedure   ABSDWRT,FAR
  4870                                  ABSDWRT:
  4871                                  	; 15/05/2019 - Retro DOS v4.0
  4872                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4873                                  	; 04/11/2022
  4874                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4875                                  
  4876 000005B8 FA                      	CLI
  4877                                  
  4878                                  ;	set up ds to point to DOSDATA
  4879                                  
  4880 000005B9 50                      	push	ax
  4881 000005BA 8CD8                    	mov	ax,ds
  4882                                  	;getdseg <ds>
  4883 000005BC 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4884 000005C1 A3[0A0D]                	mov	[TEMPSEG],ax
  4885 000005C4 58                      	pop	ax
  4886                                  
  4887                                  	; M072:
  4888                                  	; We shall save es on the user stack here. We need to use ES in
  4889                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4890                                  	; time in order to restore the user stack.
  4891                                  
  4892 000005C5 06                      	push	es ; ****		; M072
  4893                                  
  4894 000005C6 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4895 000005CA 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4896                                  
  4897                                  	; set up ss to point to DOSDATA
  4898                                  	;
  4899                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4900                                  	; ROMDOS version of the getdseg macro with the SS register!
  4901                                  	; An interrupt will sneak through.
  4902                                  
  4903                                  ;ifndef ROMDOS
  4904                                  	;getdseg <ss>			; cli in entry of routine
  4905 000005CE 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4906                                  ;else
  4907                                  ;	mov	ds, cs:[BioDataSeg]
  4908                                  ;	assume	ds:bdata
  4909                                  ;
  4910                                  ;	mov	ss, ds:[DosDataSg]
  4911                                  ;	assume	ss:DOSDATA
  4912                                  ;
  4913                                  ;endif ; ROMDOS
  4914                                  
  4915 000005D3 BC[2009]                	MOV	SP,DSKSTACK
  4916                                  		; we are now switched to DOS's disk stack
  4917                                  
  4918 000005D6 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4919                                  
  4920 000005DA 06                      	push	es ; *** (MSDOS 6.21)
  4921                                  
  4922 000005DB E888FE                  	call	save_world	      	; save all regs
  4923                                  
  4924 000005DE 06                      	PUSH	ES ; **
  4925 000005DF E806FF                  	CALL	AbsSetup
  4926 000005E2 72B6                    	JC	short ILEAVE
  4927                                  
  4928                                  	;EnterCrit critDisk
  4929 000005E4 E82F0D                  	call	ECritDisk
  4930 000005E7 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4931 000005ED E89203                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4932                                  	;LeaveCrit critDisk
  4933 000005F0 E83E0D                  	call	LCritDisk
  4934                                  
  4935                                  ;M039
  4936                                  ;       DS:BX = transfer address (source data address).
  4937                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4938                                  ;	     sectors, also termed an "Extent".)
  4939                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4940                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4941                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4942                                  ;
  4943                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4944                                  ;       written. Note that all the above registers are preserved for
  4945                                  ;       DSKWRITE.
  4946                                  
  4947 000005F3 1E                              push    ds
  4948                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4949 000005F4 E8F436                  	call	DskWrtBufPurge
  4950 000005F7 1F                              pop     ds
  4951                                  ;M039
  4952                                  	;invoke	DSKWRITE
  4953 000005F8 E8B231                  	call	DSKWRITE
  4954 000005FB EB82                    	JMP	short TLEAVE
  4955                                  
  4956                                  ;ABSDWRT ENDP
  4957                                  
  4958                                  ;----------------------------------------------------------------------------
  4959                                  ;
  4960                                  ; Procedure Name : GETBP
  4961                                  ;
  4962                                  ; Inputs:
  4963                                  ;	AL = Logical unit number (A = 0)
  4964                                  ; Function:
  4965                                  ;	Find Drive Parameter Block
  4966                                  ; Outputs:
  4967                                  ;	ES:BP points to DPB
  4968                                  ;	[THISDPB] = ES:BP
  4969                                  ;	Carry set if unit number bad or unit is a NET device.
  4970                                  ;		Later case sets extended error error_I24_not_supported
  4971                                  ; No other registers alteredjjj
  4972                                  ;
  4973                                  ;----------------------------------------------------------------------------
  4974                                  
  4975                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4976                                  GETBP:
  4977                                  	; 15/05/2019 - Retro DOS v4.0
  4978                                  	; 11/07/2018 - Retro DOS v3.0
  4979 000005FD 50                      	PUSH	AX
  4980 000005FE 0401                    	ADD	AL, 1		; No increment; need carry flag
  4981 00000600 7216                    	JC	SHORT SKIPGET
  4982 00000602 E8B864                  	CALL	GETTHISDRV
  4983                                  	; MSDOS 6.0
  4984 00000605 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  4985 00000607 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  4986 00000609 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  4987 0000060C 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  4988 0000060E F9                      	STC				;DCR.			;AN000;
  4989 0000060F A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  4990 00000612 C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  4991                                  SKIPGET:
  4992 00000618 58                      	POP	AX
  4993 00000619 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  4994                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4995                                  	;jnc	short getbp_t
  4996                                  	;retn
  4997                                  getbp_t:
  4998 0000061B C42E[A205]              	LES	BP,[THISCDS]
  4999                                  	; 15/12/2022
  5000 0000061F 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  5001                                  	; 07/12/2022
  5002                                  	;TEST	WORD [ES:BP+43H],8000H
  5003                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5004 00000624 7408                    	JZ	SHORT GETBP_CDS
  5005 00000626 C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  5006 0000062C F9                      	STC
  5007                                  GETBP_RETN:
  5008 0000062D C3                      	RETN
  5009                                  
  5010                                  GETBP_CDS:
  5011                                  	;LES	BP,[ES:BP+45H]
  5012 0000062E 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5013                                  GOTDPB:
  5014                                  	; Load THISDPB from ES:BP
  5015 00000632 892E[8A05]              	MOV	[THISDPB],BP
  5016 00000636 8C06[8C05]              	MOV	[THISDPB+2],ES
  5017 0000063A C3                      	RETN
  5018                                  
  5019                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5020                                  
  5021                                  ;----------------------------------------------------------------------------
  5022                                  ;
  5023                                  ; Procedure Name : SYS_RETURN
  5024                                  ;
  5025                                  ; These are the general system call exit mechanisms. All internal system
  5026                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5027                                  ; is to set the user's flags and set his AX register for return.
  5028                                  ;
  5029                                  ;----------------------------------------------------------------------------
  5030                                  
  5031                                          ;procedure   SYS_RETURN,NEAR
  5032                                  SYS_RETURN:        
  5033                                          ;entry	SYS_RET_OK
  5034                                  SYS_RET_OK:   
  5035 0000063B E847FE                  	call    Get_User_Stack
  5036                                  		; turn off user's carry flag
  5037                                  SYS_RET_OK_clc: ; 25/06/2019 
  5038                                          ;;and	word [SI+16h],0FFFEh 
  5039                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5040                                          ; 25/06/2019
  5041 0000063E 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5042 00000642 EB10                    	JMP     SHORT DO_RET
  5043                                  
  5044                                          ;entry   SYS_RET_ERR
  5045                                  SYS_RET_ERR:        
  5046 00000644 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5047 00000646 E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5048 00000649 E81A00                  	CALL	ErrorMap
  5049                                  
  5050                                  	;entry	From_GetSet
  5051                                  From_GetSet:
  5052 0000064C E836FE                          call    Get_User_Stack
  5053                                  		 ; signal carry to user
  5054                                  	;;or	word [SI+16h],1
  5055                                  	;OR	word [SI+user_env.user_F],f_Carry
  5056                                  	; 25/06/2019
  5057 0000064F 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5058 00000653 F9                      	STC			; also, signal internal error
  5059                                  DO_RET:
  5060                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5061 00000654 8904                    	MOV	[SI],AX
  5062 00000656 C3                      	RETN
  5063                                  
  5064                                  	;entry	FCB_RET_OK
  5065                                  FCB_RET_OK:
  5066                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5067                                  NO_OP:
  5068 00000657 30C0                    	XOR	AL,AL
  5069 00000659 C3                      	retn
  5070                                  
  5071                                  	;entry	FCB_RET_ERR
  5072                                  FCB_RET_ERR:
  5073 0000065A 30E4                    	XOR	AH,AH
  5074 0000065C 36A3[2403]              	mov	[ss:EXTERR],AX
  5075 00000660 E80300                  	CALL	ErrorMap
  5076 00000663 B0FF                    	MOV	AL,-1
  5077 00000665 C3                      	retn
  5078                                  
  5079                                  	;entry	ErrorMap
  5080                                  ErrorMap:
  5081 00000666 56                      	PUSH	SI
  5082                                  				; ERR_TABLE_21 is now in DOSDATA
  5083 00000667 BE[DB0D]                	MOV	SI,ERR_TABLE_21
  5084                                  				; SS override for FAILERR and EXTERR
  5085 0000066A 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5086 00000670 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5087                                  		 ; Ooops, this is the REAL reason
  5088                                  	;mov	word [SS:EXTERR],53h
  5089 00000672 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5090                                  EXTENDED_NORMAL:
  5091 00000679 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5092 0000067C 5E                      	POP	SI
  5093 0000067D C3                      	retn
  5094                                  
  5095                                  	;EndProc SYS_RETURN
  5096                                  
  5097                                  ;---------------------------------------------------------------------------
  5098                                  ;
  5099                                  ; Procedure Name : CAL_LK
  5100                                  ;
  5101                                  ; Inputs:
  5102                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5103                                  ;		(DS NEED not be DOSDATA)
  5104                                  ;	[EXTERR] is set with error
  5105                                  ; Function:
  5106                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5107                                  ; Outputs:
  5108                                  ;	[EXTERR_CLASS] set
  5109                                  ;	[EXTERR_ACTION] set
  5110                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5111                                  ; Destroys SI, FLAGS
  5112                                  ;
  5113                                  ;---------------------------------------------------------------------------
  5114                                  
  5115                                  	;procedure CAL_LK,NEAR
  5116                                  CAL_LK:
  5117 0000067E 1E                      	PUSH	DS
  5118 0000067F 50                      	PUSH	AX
  5119 00000680 53                      	PUSH	BX
  5120                                  
  5121                                  ;M048	Context DS		; DS:SI -> Table
  5122                                  ;
  5123                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5124                                  ; is DOSDATA
  5125                                  
  5126                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5127                                  	; 15/05/2019 - Retro DOS v4.0
  5128 00000681 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5129                                  
  5130                                  	; 18/07/2018
  5131                                  	;push	ss
  5132                                  	;pop	ds
  5133                                  
  5134 00000686 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5135                                  TABLK1:
  5136 0000068A AC                      	LODSB
  5137                                  
  5138 0000068B 3CFF                    	CMP	AL,0FFH
  5139 0000068D 7409                    	JZ	short GOT_VALS	; End of table
  5140 0000068F 38D8                    	CMP	AL,BL
  5141 00000691 7405                    	JZ	short GOT_VALS	; Got entry
  5142 00000693 83C603                  	ADD	SI,3		; Next table entry
  5143                                  	; 15/08/2018
  5144 00000696 EBF2                    	JMP	short TABLK1
  5145                                  
  5146                                  GOT_VALS:
  5147 00000698 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5148                                  
  5149 00000699 80FCFF                  	CMP	AH,0FFH
  5150 0000069C 7404                    	JZ	short NO_SET_ACT
  5151 0000069E 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5152                                  NO_SET_ACT:
  5153 000006A2 3CFF                    	CMP	AL,0FFH
  5154 000006A4 7403                    	JZ	short NO_SET_CLS
  5155 000006A6 A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5156                                  NO_SET_CLS:
  5157 000006A9 AC                      	LODSB			; Get LOCUS
  5158                                  
  5159 000006AA 3CFF                    	CMP	AL,0FFH
  5160 000006AC 7403                    	JZ	short NO_SET_LOC
  5161 000006AE A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5162                                  NO_SET_LOC:
  5163 000006B1 5B                      	POP	BX
  5164 000006B2 58                      	POP	AX
  5165 000006B3 1F                      	POP	DS
  5166 000006B4 C3                      	retn
  5167                                  
  5168                                  	;EndProc CAL_LK
  5169                                  
  5170                                  ;---------------------------------------------------------------------------
  5171                                  ;
  5172                                  ; Procedure Name : ETAB_LK
  5173                                  ;
  5174                                  ; Inputs:
  5175                                  ;	AX is error code
  5176                                  ;	[USER_IN_AX] has AH value of system call involved
  5177                                  ; Function:
  5178                                  ;	Make sure error code is appropriate to this call.
  5179                                  ; Outputs:
  5180                                  ;	AX MAY be mapped error code
  5181                                  ;	[EXTERR] = Input AX
  5182                                  ; Destroys ONLY AX and FLAGS
  5183                                  ;
  5184                                  ;---------------------------------------------------------------------------
  5185                                  
  5186                                  	;procedure ETAB_LK,NEAR
  5187                                  
  5188                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5189 000006B5 1E                      	PUSH	DS
  5190 000006B6 56                      	PUSH	SI
  5191 000006B7 51                      	PUSH	CX
  5192 000006B8 53                      	PUSH	BX
  5193                                  
  5194                                  	;Context DS			; SS is DOSDATA
  5195                                  
  5196 000006B9 16                      	push	ss
  5197 000006BA 1F                      	pop	ds
  5198                                  
  5199 000006BB A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5200                                  
  5201                                  					; I21_MAP_E_TAB is now in DOSCODE
  5202 000006BE BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5203 000006C1 88C7                    	MOV	BH,AL			; Real code to BH
  5204 000006C3 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5205                                  TABLK2:
  5206                                  	; 15/05/2019 - Retro DOS v4.0
  5207 000006C7 2E                      	cs
  5208 000006C8 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5209                                  	
  5210                                  	; 18/07/2018 - Retro DOS v3.0
  5211                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5212                                  
  5213 000006C9 3CFF                    	CMP	AL,0FFH 		; End of table?
  5214 000006CB 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5215 000006CD 38D8                    	CMP	AL,BL			; Found call?
  5216 000006CF 740C                    	JZ	short GOT_CALL		; Yes
  5217 000006D1 86E0                    	XCHG	AH,AL			; Count to AL
  5218 000006D3 30E4                    	XOR	AH,AH			; Make word for add
  5219 000006D5 01C6                    	ADD	SI,AX			; Next table entry
  5220 000006D7 EBEE                    	JMP	short TABLK2
  5221                                  
  5222                                  NOT_IN_TABLE:
  5223 000006D9 88F8                    	MOV	AL,BH			; Restore original code
  5224 000006DB EB0C                    	JMP	SHORT NO_MAP
  5225                                  
  5226                                  GOT_CALL:
  5227 000006DD 88E1                    	MOV	CL,AH
  5228 000006DF 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5229                                  CHECK_CODE:
  5230                                  	; 15/05/2019 - Retro DOS v4.0
  5231 000006E1 2E                      	cs
  5232 000006E2 AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5233                                  
  5234                                  	; 18/07/2018
  5235                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5236                                  
  5237 000006E3 38F8                    	CMP	AL,BH			; Code OK?
  5238 000006E5 7402                    	JZ	short NO_MAP		; Yes
  5239 000006E7 E2F8                    	LOOP	CHECK_CODE
  5240                                  NO_MAP:
  5241 000006E9 30E4                    	XOR	AH,AH			; AX is now valid code
  5242 000006EB 5B                      	POP	BX
  5243 000006EC 59                      	POP	CX
  5244 000006ED 5E                      	POP	SI
  5245 000006EE 1F                      	POP	DS
  5246 000006EF C3                      	retn
  5247                                  
  5248                                  	;EndProc ETAB_LK
  5249                                  
  5250                                  ; 18/07/2018 - Retro DOS v3.0
  5251                                  ;---------------------------------------------------------------------------
  5252                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5253                                  
  5254                                  ;IF installed ; (*)
  5255                                  
  5256                                  ;---------------------------------------------------------------------------
  5257                                  ;
  5258                                  ; Procedure Name : SetBad
  5259                                  ;
  5260                                  ; SetBad sets up info for bad functions
  5261                                  ;
  5262                                  ;---------------------------------------------------------------------------
  5263                                  
  5264                                  SetBad:
  5265                                  	;mov	ax,1
  5266 000006F0 B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5267                                  
  5268                                  	; MSDOS 3.3
  5269                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5270                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5271                                  
  5272                                  ;	set up ds to point to DOSDATA
  5273                                  
  5274                                  	; 15/05/2019 - Retro DOS v4.0
  5275                                  	; MSDOS 6.0
  5276 000006F3 1E                      	push	ds
  5277                                  
  5278                                  	;getdseg <ds>
  5279 000006F4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5280                                  
  5281 000006F9 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5282                                  
  5283 000006FE 1F                      	pop	ds	  	;hkn; restore ds
  5284                                  
  5285 000006FF F9                      	STC
  5286 00000700 C3                      	retn
  5287                                  
  5288                                  ;--------------------------------------------------------------------------
  5289                                  ;
  5290                                  ; Procedure Name : BadCall
  5291                                  ;
  5292                                  ; BadCall is the initial routine for bad function calls
  5293                                  ;
  5294                                  ;--------------------------------------------------------------------------
  5295                                  
  5296                                  BadCall:
  5297 00000701 E8ECFF                  	call	SetBad
  5298 00000704 CB                      	retf
  5299                                  
  5300                                  ;--------------------------------------------------------------------------
  5301                                  ;
  5302                                  ; OKCall always sets carry to off.
  5303                                  ;
  5304                                  ;-----------------------------------------------------------------------
  5305                                  
  5306                                  OKCall:
  5307 00000705 F8                      	CLC
  5308 00000706 CB                      	retf
  5309                                  
  5310                                  ;---------------------------------------------------------------------------
  5311                                  ;
  5312                                  ; Procedure Name : INT2F
  5313                                  ;
  5314                                  ; INT 2F handler works as follows:
  5315                                  ;   PUSH    AX
  5316                                  ;   MOV     AX,multiplex:function
  5317                                  ;   INT     2F
  5318                                  ;   POP     ...
  5319                                  ; The handler itself needs to make the AX available for the various routines.
  5320                                  ;
  5321                                  ;----------------------------------------------------------------------------
  5322                                  
  5323                                  ; 15/05/2019 - Retro DOS v4.0
  5324                                  
  5325                                  ;KERNEL_SEGMENT equ 70h
  5326                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5327                                  DOSBIODATASEG equ 70h
  5328                                  
  5329                                  ; retrodos4.s - offset in BIOSDATA
  5330                                  bios_i2f equ 5
  5331                                  
  5332                                  ;PUBLIC	Int2F
  5333                                  ;INT2F	PROC	FAR
  5334                                  
  5335                                  ; 15/05/2019
  5336                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5337                                  
  5338                                  ; 04/11/2022
  5339                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5340                                  
  5341                                  	; 05/01/2024	
  5342                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5343                                  	; 18/07/2018 - Retro DOS v3.0
  5344                                  INT2F:
  5345                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5346                                  INT2FNT:
  5347                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5348 00000707 FB                      	STI
  5349                                  	;cmp	ah,11h
  5350 00000708 80FC11                  	CMP	AH,MultNET
  5351 0000070B 750A                    	JNZ	short INT2FSHR
  5352                                  TestInstall:
  5353 0000070D 08C0                    	OR	AL,AL
  5354 0000070F 7403                    	JZ	short Leave2F
  5355                                  BadFunc:
  5356 00000711 E8DCFF                  	CALL	SetBad
  5357                                  
  5358                                  	;entry	Leave2F
  5359                                  Leave2F:
  5360 00000714 CA0200                  	RETF	2			; long return + clear flags off stack
  5361                                  
  5362                                  INT2FSHR:
  5363                                  	;cmp	ah,10h
  5364 00000717 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5365 0000071A 74F1                    	JZ	short TestInstall	; yes, check for installation
  5366                                  INT2FNLS:
  5367                                  	;cmp	ah,14h
  5368 0000071C 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5369 0000071F 74EC                    	JZ	short TestInstall	; yes check for installation
  5370                                  INT2FDOS:
  5371                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5372                                  
  5373                                  	; 18/07/2018
  5374                                  	; MSDOS 3.3
  5375                                  	;;cmp	ah,12h	
  5376                                  	;CMP	AH,MultDOS
  5377                                  	;jz	short DispatchDOS
  5378                                  	;iret
  5379                                  
  5380                                  	; 15/05/2019
  5381                                  	; MSDOS 6.0
  5382                                  	;cmp	ah,12h	; 07/12/2022
  5383 00000721 80FC12                  	CMP	AH,MultDOS
  5384 00000724 7503                    	JNZ	short check_win		;check if win386 broadcast
  5385 00000726 E9F201                  	jmp	DispatchDOS
  5386                                  
  5387                                  	; .... win386 .... 
  5388                                  
  5389                                  check_win:
  5390                                  	;cmp	ah,16h
  5391 00000729 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5392 0000072C 7408                    	je	short Win386_Msg
  5393                                  
  5394                                  	; M044
  5395                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5396                                  	; of Windows. If so, do special action of going and saving last para
  5397                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5398                                  	; bug
  5399                                  
  5400 0000072E 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5401                                  	;jne	short next_i2f		; no, chain on
  5402                                  	; 15/12/2022
  5403                                  	;jmp	winold_swap		; yes, do desired action
  5404 00000731 7442                    	je	short winold_swap
  5405 00000733 E90501                  	jmp	next_i2f
  5406                                  
  5407                                  	; 15/12/2022
  5408                                  ;next_i2f:
  5409                                  ;	;;;jmp	bios_i2f
  5410                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5411                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5412                                  ;	; 04/11/2022
  5413                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5414                                  
  5415                                  ;	IRET				; This assume that we are at the head
  5416                                  					; of the list
  5417                                  ;INT2F	ENDP
  5418                                  
  5419                                  ; 15/05/2019 - Retro DOS v4.0
  5420                                  
  5421                                  ; We have received a message from Win386. There are three possible
  5422                                  ; messages we could get from Win386:
  5423                                  ;
  5424                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5425                                  ;		  to the Win386 startup info structure.
  5426                                  ; Exit		- for this, we clear the IsWin386 flag.
  5427                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5428                                  ;		  has already been handled. this is indicated by setting
  5429                                  ;		  CX to a non-zero value.
  5430                                  
  5431                                  Win386_Msg:
  5432 00000736 1E                      	push	ds
  5433                                  
  5434                                  	;getdseg <DS>			; ds is DOSDATA
  5435 00000737 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5436                                  
  5437                                  	; For WIN386 2.xx instance data
  5438                                  
  5439 0000073C 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5440 0000073E 7503                    	jne	short Win386_Msg_exit
  5441 00000740 E92A01                  	jmp	OldWin386Init		; yes, return instance data
  5442                                  Win386_Msg_exit:
  5443 00000743 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5444 00000745 7503                    	jne	short Win386_Msg_devcall
  5445 00000747 E92C01                  	jmp	Win386_Leaving
  5446                                  Win386_Msg_devcall:
  5447 0000074A 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5448 0000074C 7503                    	jne	short Win386_Msg_init
  5449 0000074E E96001                  	jmp	Win386_Query
  5450                                  Win386_Msg_init:
  5451 00000751 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5452 00000753 7403                    	je	short Win386_Starting
  5453 00000755 E9E200                  	jmp	win_nexti2f		; no, return
  5454                                  Win386_Starting:
  5455                                  	; 17/12/2022
  5456 00000758 F6C201                  	test	dl,1
  5457                                  	;test	dx,1			; is this really win386?
  5458 0000075B 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5459 0000075D E9DA00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5460                                  Win386_vchk:
  5461                                  	; M018 -- start of block changes
  5462                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5463                                  	; than 030Ah, we skip the VxD presence check
  5464                                  
  5465                                  ;M067 -- Begin changes
  5466                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5467                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5468                                  ;So, we null out the VxD ptr before the check.
  5469                                  
  5470                                  	;mov	word [Win386_Info+6],0
  5471 00000760 C706[E80F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5472                                  	;mov	word [Win386_Info+8],0
  5473 00000766 C706[EA0F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5474                                  
  5475                                  ;M067 -- End changes
  5476                                  
  5477                                  ;ifdef JAPAN
  5478                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5479                                  ;else
  5480 0000076C 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5481                                  ;endif
  5482                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5483 00000770 724E                    	jb	short Win386_vxd
  5484 00000772 E9DD00                  	jmp	noVxD31
  5485                                  
  5486                                  	; 15/12/2022
  5487                                  winold_swap:
  5488 00000775 1E                      	push	ds
  5489 00000776 06                      	push	es
  5490 00000777 56                      	push	si
  5491 00000778 57                      	push	di
  5492 00000779 51                      	push	cx
  5493                                  
  5494                                  	;getdseg <ds>			;ds = DOSDATA
  5495 0000077A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5496                                  
  5497 0000077F 3C01                    	cmp	al,1			;swap Windows out call
  5498 00000781 751B                    	jne	short swapin		;no, check if Swap in call
  5499 00000783 E88801                  	call	getwinlast
  5500 00000786 1E                      	push	ds
  5501 00000787 07                      	pop	es
  5502 00000788 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5503 0000078A 31F6                    	xor	si,si
  5504 0000078C BF[0600]                	mov	di,WinoldPatch1
  5505 0000078F B90800                  	mov	cx,8
  5506 00000792 FC                      	cld
  5507 00000793 51                      	push	cx
  5508 00000794 F3A4                    	rep	movsb			;save first 8 bytes
  5509 00000796 59                      	pop	cx
  5510 00000797 BF[CD0D]                	mov	di,WinoldPatch2
  5511 0000079A F3A4                    	rep	movsb			;save next 8 bytes
  5512 0000079C EB1B                    	jmp	short winold_done
  5513                                  swapin:
  5514 0000079E 3C02                    	cmp	al,2			;swap Windows in call?
  5515 000007A0 7517                    	jne	short winold_done	;no, something else, pass it on
  5516 000007A2 E86901                  	call	getwinlast
  5517 000007A5 8EC6                    	mov	es,si
  5518 000007A7 31FF                    	xor	di,di
  5519 000007A9 BE[0600]                	mov	si,WinoldPatch1
  5520 000007AC B90800                  	mov	cx,8
  5521 000007AF FC                      	cld
  5522 000007B0 51                      	push	cx
  5523 000007B1 F3A4                    	rep	movsb			;restore first 8 bytes
  5524 000007B3 59                      	pop	cx
  5525 000007B4 BE[CD0D]                	mov	si,WinoldPatch2
  5526 000007B7 F3A4                    	rep	movsb			;restore next 8 bytes
  5527                                  winold_done:
  5528 000007B9 59                      	pop	cx
  5529 000007BA 5F                      	pop	di
  5530 000007BB 5E                      	pop	si
  5531 000007BC 07                      	pop	es
  5532 000007BD 1F                      	pop	ds
  5533 000007BE EB7B                    	jmp	short next_i2f		;chain on
  5534                                  	; 15/12/2022
  5535                                  	;jmp	next_i2f	
  5536                                  
  5537                                  Win386_vxd:
  5538 000007C0 50                      	push	ax
  5539 000007C1 53                      	push	bx
  5540 000007C2 51                      	push	cx
  5541 000007C3 52                      	push	dx
  5542 000007C4 56                      	push	si
  5543 000007C5 57                      	push	di			; save regs !!dont change order!!
  5544                                  
  5545 000007C6 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5546 000007CA 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5547 000007CD 741F                    	je	short Vxd31		; N: continue
  5548                                  					; Y: save arena associated with 
  5549                                  					;    umb_head
  5550                                  
  5551 000007CF C606[DA0D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5552                                  					; umb_arena
  5553 000007D4 1E                      	push	ds
  5554 000007D5 06                      	push	es
  5555                                  
  5556                                  	;mov	ax,ds
  5557                                  	;mov	es,ax			; es - > dosdata
  5558                                  	; 05/01/2024
  5559 000007D6 1E                      	push	ds
  5560 000007D7 07                      	pop	es
  5561                                  
  5562 000007D8 8EDB                    	mov	ds,bx
  5563 000007DA 31F6                    	xor	si,si			; ds:si -> umb_head
  5564                                  
  5565 000007DC FC                      	cld
  5566                                  
  5567 000007DD BF[FA11]                	mov	di,UmbSave1
  5568 000007E0 B90B00                  	mov	cx,11
  5569 000007E3 F3A4                    	rep	movsb
  5570                                  
  5571 000007E5 BF[D50D]                	mov	di,UmbSave2
  5572                                  	;mov	cx,5
  5573                                  	; 18/12/2022
  5574 000007E8 B105                    	mov	cl,5
  5575 000007EA F3A4                    	rep	movsb	
  5576                                  
  5577 000007EC 07                      	pop	es
  5578 000007ED 1F                      	pop	ds			; M062 - End
  5579                                  
  5580                                  Vxd31:
  5581                                  	;test	byte [DOS_FLAG],2
  5582 000007EE F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5583 000007F3 7408                    	jz	short Dont_Supress		; M066
  5584 000007F5 5F                      	pop	di				; M066
  5585 000007F6 5E                      	pop	si				; M066
  5586 000007F7 5A                      	pop	dx				; M066
  5587 000007F8 59                      	pop	cx				; M066
  5588 000007F9 5B                      	pop	bx				; M066
  5589 000007FA 58                      	pop	ax				; M066
  5590 000007FB EB55                    	jmp	short noVxD31			; M066
  5591                                  
  5592                                  	; We check here if the VxD is available in the root of the boot drive. 
  5593                                  	; We do an extended open to suppress any error messages
  5594                                  	
  5595                                  Dont_Supress:
  5596 000007FD A0[6900]                	mov	al,[BOOTDRIVE]
  5597 00000800 0440                    	add	al,'A' - 1		; get drive letter
  5598 00000802 A2[3110]                	mov	[VxDpath],al		; path is root of bootdrive
  5599                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5600                                  	;mov	al,0			; no extended attributes
  5601                                  	; 18/12/2022
  5602 00000805 B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5603 00000808 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5604                                  					; no inherit, suppress crit err
  5605 0000080B B90700                  	mov	cx,7			; hidden,system,read-only attr
  5606 0000080E BA0100                  	mov	dx,1			; fail if file does not exist
  5607 00000811 BE[3110]                	mov	si,VxDpath	
  5608                                  					; path of VxD file
  5609 00000814 BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5610                                  
  5611 00000817 CD21                    	int	21h			; do extended open
  5612                                  
  5613 00000819 5F                      	pop	di
  5614 0000081A 5E                      	pop	si
  5615 0000081B 5A                      	pop	dx
  5616 0000081C 59                      	pop	cx
  5617                                  
  5618 0000081D 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5619                                  
  5620                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5621                                  	; to indicate error to Windows after displaying message to user that 
  5622                                  	; VxD needs to be present to run Windows in enhanced mode.
  5623                                  
  5624 0000081F 52                      	push	dx
  5625 00000820 1E                      	push	ds
  5626 00000821 56                      	push	si
  5627 00000822 BE[B709]                	mov	si,NoVxDErrMsg
  5628 00000825 0E                      	push	cs
  5629 00000826 1F                      	pop	ds
  5630 00000827 B96300                  	mov	cx,VxDMesLen ; 99	;
  5631 0000082A B402                    	mov	ah,2			; write char to console
  5632 0000082C FC                      	cld
  5633                                  vxdlp:
  5634 0000082D AC                      	lodsb
  5635 0000082E 86D0                    	xchg	dl,al			; get char in dl
  5636 00000830 CD21                    	int	21h
  5637 00000832 E2F9                    	loop	vxdlp
  5638                                  
  5639 00000834 5E                      	pop	si
  5640 00000835 1F                      	pop	ds
  5641 00000836 5A                      	pop	dx
  5642 00000837 5B                      	pop	bx
  5643 00000838 58                      	pop	ax			;all registers restored
  5644 00000839 41                      	inc	cx			;cx != 0 to indicate error
  5645                                  	; 15/12/22022
  5646                                  	;jmp	win_nexti2f		;chain on
  5647                                  	;jmp	short win_nexti2f
  5648                                  
  5649                                  	; 15/12/2022
  5650                                  win_nexti2f:
  5651 0000083A 1F                      	pop	ds
  5652                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5653                                  	; 15/12/2022
  5654                                  next_i2f:
  5655                                  	;;;jmp	bios_i2f
  5656                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5657                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5658                                  	; 04/11/2022
  5659 0000083B EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5660                                  
  5661                                  VxDthere:
  5662 00000840 89C3                    	mov	bx,ax
  5663 00000842 B43E                    	mov	ah,CLOSE ; 3Eh
  5664 00000844 CD21                    	int	21h			;close the file
  5665                                  
  5666                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5667                                  
  5668                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5669                                  	;mov	bx,Win386_Info
  5670                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5671                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5672                                  	; 15/12/2022
  5673 00000846 C706[E80F][3110]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5674 0000084C 8C1E[EA0F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5675                                  
  5676 00000850 5B                      	pop	bx
  5677 00000851 58                      	pop	ax
  5678                                  noVxD31:
  5679                                  	; M018; End of block changes
  5680                                  
  5681 00000852 800E[3010]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5682 00000857 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5683                                  
  5684                                  	; M002;
  5685                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5686                                  
  5687 0000085C 52                      	push	dx			; M002
  5688 0000085D 89DA                    	mov	dx,bx			; M002
  5689                                  					; point ES:BX to Win386_Info ; M002
  5690 0000085F BB[E20F]                	mov	bx,Win386_Info 
  5691 00000862 895702                  	mov	[bx+2],dx		; M002
  5692 00000865 8C4704                  	mov	[bx+4],es		; M002
  5693 00000868 5A                      	pop	dx			; M002
  5694 00000869 1E                      	push	ds			; M002
  5695 0000086A 07                      	pop	es			; M002
  5696                                  	;jmp	win_nexti2f		; M002
  5697                                  	; 15/12/2022
  5698 0000086B EBCD                    	jmp	short win_nexti2f
  5699                                  
  5700                                  	; 15/12/2022
  5701                                  	; Code to return Win386 2.xx instance table
  5702                                  OldWin386Init:
  5703 0000086D 58                      	pop	ax			; discard ds pushed on stack
  5704 0000086E BE[CD11]                	mov	si,OldInstanceJunk 
  5705                                  					; ds:si = instance table
  5706 00000871 B84852                  	mov	ax,5248h ; 'HR'		; indicate instance data present
  5707                                  	;jmp	next_i2f
  5708                                  	; 15/12/2022
  5709 00000874 EBC5                    	jmp	short next_i2f
  5710                                  
  5711                                  Win386_Leaving:
  5712                                  	; 15/12/2022
  5713 00000876 F6C201                  	test 	dl,1
  5714                                  	;test	dx,1			; is this really win386?
  5715                                  	;jz	short Win386_Leaving_c
  5716                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5717                                  	; 15/12/2022
  5718 00000879 75BF                    	jnz	short win_nexti2f	
  5719                                  
  5720                                  Win386_Leaving_c:
  5721                                  					; M062 - Start
  5722 0000087B 803E[DA0D]01            	cmp	byte [UmbSaveFlag],1	; Q: was umb_arena saved at win start
  5723                                  					;    up.
  5724 00000880 7523                    	jne	short noumb		; N: not saved 
  5725 00000882 C606[DA0D]00            	mov	byte [UmbSaveFlag],0	; Y: clear UmbSaveFlag and restore 
  5726                                  					;    previously saved umb_head
  5727                                  	; 05/01/2024
  5728                                  	;push	ax ; (not necessary)
  5729 00000887 06                      	push	es
  5730 00000888 51                      	push	cx
  5731 00000889 56                      	push	si
  5732 0000088A 57                      	push	di
  5733                                  
  5734                                  	;mov	ax,[UMB_HEAD]
  5735                                  	;mov	es,ax
  5736                                  	; 05/01/2024
  5737 0000088B 8E06[8C00]              	mov	es,[UMB_HEAD]
  5738 0000088F 31FF                    	xor	di,di			; es:di -> umb_head
  5739                                  
  5740 00000891 FC                      	cld
  5741                                  
  5742 00000892 BE[FA11]                	mov	si,UmbSave1
  5743 00000895 B90B00                  	mov	cx,11
  5744 00000898 F3A4                    	rep	movsb
  5745 0000089A BE[D50D]                	mov	si,UmbSave2
  5746                                  	;mov	cx,5
  5747                                  	; 18/12/2022
  5748 0000089D B105                    	mov	cl,5
  5749 0000089F F3A4                    	rep	movsb
  5750                                  
  5751 000008A1 5F                      	pop	di
  5752 000008A2 5E                      	pop	si
  5753 000008A3 59                      	pop	cx
  5754 000008A4 07                      	pop	es
  5755                                  	; 05/01/2024
  5756                                  	;pop	ax
  5757                                  noumb:					; M062 - End
  5758 000008A5 8026[3010]00            	and	byte [IsWin386],0	; Win386 is gone
  5759 000008AA 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5760 000008AF EB89                    	jmp	short win_nexti2f
  5761                                  
  5762                                  ;	; 15/12/2022
  5763                                  ;	; Code to return Win386 2.xx instance table
  5764                                  ;OldWin386Init:
  5765                                  ;	pop	ax			; discard ds pushed on stack
  5766                                  ;	mov	si,OldInstanceJunk 
  5767                                  ;					; ds:si = instance table
  5768                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5769                                  ;	;jmp	next_i2f
  5770                                  ;	; 15/12/2022
  5771                                  ;	jmp	short _next_i2f
  5772                                  
  5773                                  Win386_Query:
  5774 000008B1 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5775 000008B4 7584                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5776 000008B6 09C9                    	or	cx,cx			; is it an instance query?
  5777 000008B8 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5778 000008BA 41                      	inc	cx			; indicate that data is instanced
  5779                                  ;
  5780                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5781                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5782                                  ; M001;  
  5783                                  ; M001; OFFSETS STRUC
  5784                                  ; M001; 	Major_version	db	?
  5785                                  ; M001; 	Minor_version	db	?
  5786                                  ; M001; 	SaveDS		dw	?
  5787                                  ; M001; 	SaveBX		dw	?
  5788                                  ; M001; 	Indos		dw	?
  5789                                  ; M001; 	User_id		dw	?
  5790                                  ; M001; 	CritPatch	dw	?
  5791                                  ; M001; OFFSETS	ENDS
  5792                                  ; M001; 
  5793                                  ; M001; User_Id is the only variable really important for proper functioning  
  5794                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5795                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5796                                  ; M001; pass this table because Win386 depends on this table to get the 
  5797                                  ; M001; User_Id offset.
  5798                                  ; M001; 
  5799 000008BB BB[2210]                	mov	bx,Win386_DOSVars	; M001 
  5800 000008BE 1E                      	push	ds			; M001
  5801 000008BF 07                      	pop	es			; es:bx points at offset table ; M001
  5802 000008C0 EB40                    	jmp	short PopIret		; M001
  5803                                  
  5804                                  ; 15/12/2022
  5805                                  ;	; Code to return Win386 2.xx instance table
  5806                                  ;OldWin386Init:
  5807                                  ;	pop	ax			; discard ds pushed on stack
  5808                                  ;	mov	si,OldInstanceJunk 
  5809                                  ;					; ds:si = instance table
  5810                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5811                                  ;	;jmp	next_i2f
  5812                                  ;	; 15/12/2022
  5813                                  ;	jmp	short _next_i2f
  5814                                  
  5815                                  dosmgr_func:
  5816 000008C2 49                      	dec	cx
  5817 000008C3 7435                    	jz	short win386_patch	; call to patch DOS
  5818 000008C5 49                      	dec	cx
  5819 000008C6 743A                    	jz	short PopIret		; remove DOS patches, ignore
  5820 000008C8 49                      	dec	cx
  5821 000008C9 7439                    	jz	short win386_size	; get size of DOS data structures
  5822 000008CB 49                      	dec	cx
  5823 000008CC 7428                    	jz	short win386_inst	; instance more data
  5824                                  	;dec	cx
  5825                                  	;jnz	short PopIret		; no functions above this
  5826                                  	; 05/01/2024 (PCDOS 7.1 IBMDOS.COM DOSCODE:4771h)
  5827 000008CE E232                    	loop	PopIret
  5828                                  
  5829                                  	; Get DOS device driver size -- es:di points at device driver header
  5830                                  	; In DOS 4.x, the para before the device header contains an arena 
  5831                                  	; header for the driver.
  5832                                  
  5833 000008D0 8CC0                    	mov	ax,es			; ax = device header segment
  5834                                  
  5835                                  	; We check to see if we have a memory arena for this device driver. 
  5836                                  	; The way to do this would be to look at the previous para to see if
  5837                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5838                                  	; in the arena is the same as the device header segment. These two 
  5839                                  	; checks together should take care of all cases
  5840                                  
  5841 000008D2 48                      	dec	ax			; get arena header
  5842 000008D3 06                      	push	es
  5843 000008D4 8EC0                    	mov	es,ax			; arena header for device driver
  5844                                  
  5845 000008D6 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5846 000008DA 7517                    	jnz	short cantsize		; no, cant size this driver
  5847 000008DC 40                      	inc	ax			; get back device header segment
  5848 000008DD 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5849 000008E1 7510                    	jnz	short cantsize		; no, not a proper arena
  5850                                  
  5851 000008E3 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5852 000008E7 07                      	pop	es
  5853                                  
  5854                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5855                                  	; Speed is not critical and so we choose the shortest method 
  5856                                  	; -- use "mul"
  5857                                  
  5858 000008E8 BB1000                  	mov	bx,16
  5859 000008EB F7E3                    	mul	bx
  5860 000008ED 89C1                    	mov	cx,ax
  5861 000008EF 89D3                    	mov	bx,dx
  5862 000008F1 EB09                    	jmp	short win386_done	; return with device driver size
  5863                                  cantsize:
  5864 000008F3 07                      	pop	es
  5865 000008F4 31C0                    	xor	ax,ax
  5866                                  win386_inst:	; 05/01/2024
  5867 000008F6 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5868 000008F8 EB08                    	jmp	short PopIret		; return
  5869                                  
  5870                                  win386_patch:
  5871                                  	; dx contains bits marking the patches to be applied. We return 
  5872                                  	; the field with all bits set to indicate that all patches have been
  5873                                  	; done
  5874                                  
  5875 000008FA 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5876                                   	;jmp	short win386_done	; done, return
  5877                                  	; 15/12/2022
  5878                                  	; 15/12/2022
  5879                                  win386_done:
  5880 000008FC B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5881 000008FF BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5882                                  PopIret:
  5883 00000902 1F                      	pop	ds
  5884 00000903 CF                      	iret	
  5885                                  
  5886                                  win386_size:
  5887                                  	; Return the size of DOS data structures -- currently only CDS size
  5888                                  
  5889                                  	; 17/12/2022
  5890 00000904 F6C201                  	test	dl,1
  5891                                  	;test	dx,1			; check for CDS size bit
  5892 00000907 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5893                                  
  5894 00000909 B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5895 0000090C EBEE                    	jmp	short win386_done	; return with the size
  5896                                  
  5897                                  ; 05/01/2024
  5898                                  %if 0
  5899                                  win386_inst:
  5900                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device
  5901                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5902                                  	; this by returning a status of not previously instanced. The basic
  5903                                  	; structure of these things have not changed and so the current
  5904                                  	; DOSMGR code should be able to work it out
  5905                                  
  5906                                  	xor	dx,dx			; make sure dx has a not done value
  5907                                  	jmp	short PopIret		; skip done indication
  5908                                  %endif
  5909                                  
  5910                                  	; 15/12/2022
  5911                                  ;win386_done:
  5912                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5913                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5914                                  ;PopIret:
  5915                                  ;	pop	ds
  5916                                  ;	iret				; return back up the chain
  5917                                  
  5918                                  	; 15/12/2022
  5919                                  ;win_nexti2f:
  5920                                  	;pop	ds
  5921                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5922                                  
  5923                                  ;End WIN386 support
  5924                                  
  5925                                  ; 15/05/2019
  5926                                  
  5927                                  ;M044; Start of changes
  5928                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5929                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5930                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5931                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5932                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5933                                  ; in leading to a crash. Winoldap issues callouts when it swaps Windows out
  5934                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5935                                  ; last para of the Windows memory block and then restore this para on the
  5936                                  ; Windows swapin callout. 
  5937                                  
  5938                                  getwinlast:
  5939                                  	; 07/12/2022
  5940 0000090E 8B36[3003]              	mov	si,[CurrentPDB]
  5941 00000912 4E                      	dec	si
  5942 00000913 8EC6                    	mov	es,si
  5943 00000915 2603360300              	add	si,[es:3]
  5944 0000091A C3                      	retn
  5945                                  
  5946                                  ; 15/12/2022
  5947                                  %if 0
  5948                                  winold_swap:
  5949                                  	push	ds
  5950                                  	push	es
  5951                                  	push	si
  5952                                  	push	di
  5953                                  	push	cx
  5954                                  
  5955                                  	;getdseg <ds>			;ds = DOSDATA
  5956                                  	mov	ds,[cs:DosDSeg]
  5957                                  
  5958                                  	cmp	al,1			;swap Windows out call
  5959                                  	jne	short swapin		;no, check if Swap in call
  5960                                  	call	getwinlast
  5961                                  	push	ds
  5962                                  	pop	es
  5963                                  	mov	ds,si			;ds = memory arena of Windows
  5964                                  	xor	si,si
  5965                                  	mov	di,WinoldPatch1
  5966                                  	mov	cx,8
  5967                                  	cld
  5968                                  	push	cx
  5969                                  	rep	movsb			;save first 8 bytes
  5970                                  	pop	cx
  5971                                  	mov	di,WinoldPatch2
  5972                                  	rep	movsb			;save next 8 bytes
  5973                                  	jmp	short winold_done
  5974                                  swapin:
  5975                                  	cmp	al,2			;swap Windows in call?
  5976                                  	jne	short winold_done	;no, something else, pass it on
  5977                                  	call	getwinlast
  5978                                  	mov	es,si
  5979                                  	xor	di,di
  5980                                  	mov	si,WinoldPatch1
  5981                                  	mov	cx,8
  5982                                  	cld
  5983                                  	push	cx
  5984                                  	rep	movsb			;restore first 8 bytes
  5985                                  	pop	cx
  5986                                  	mov	si,WinoldPatch2
  5987                                  	rep	movsb			;restore next 8 bytes
  5988                                  winold_done:
  5989                                  	pop	cx
  5990                                  	pop	di
  5991                                  	pop	si
  5992                                  	pop	es
  5993                                  	pop	ds
  5994                                  	jmp	next_i2f		;chain on
  5995                                  
  5996                                  %endif
  5997                                  
  5998                                  ;M044; End of changes
  5999                                  
  6000                                  ; 15/05/2019
  6001                                  
  6002                                  DispatchDOS:
  6003 0000091B 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  6004 00000920 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  6005 00000925 50                      	PUSH	AX			; push index
  6006 00000926 55                      	PUSH	BP
  6007 00000927 89E5                    	MOV	BP,SP
  6008                                  		; stack looks like:
  6009                                  		;   0	BP
  6010                                  		;   2	DISPATCH
  6011                                  		;   4	TABLE
  6012                                  		;   6	RETURN
  6013                                  		;   8	LONG-RETURN
  6014                                  		;   C	FLAGS
  6015                                  		;   E	AX
  6016                                  	
  6017 00000929 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6018 0000092C 5D                      	POP	BP
  6019 0000092D E8F708                  	call	TableDispatch
  6020 00000930 E9DEFD                  	JMP	BadFunc 		; return indicates invalid function
  6021                                  
  6022                                  INT2F_etcetera:
  6023                                  	;entry	DosGetGroup
  6024                                  DosGetGroup:
  6025                                  	; MSDOS 3.3
  6026                                  	;push	cs
  6027                                  	;pop	ds
  6028                                  	;retn
  6029                                  
  6030                                  	; MSDOS 6.0
  6031                                  ;SR; Cannot use CS now
  6032                                  ;
  6033                                  ;	PUSH	CS
  6034                                  ;	POP	DS
  6035                                  
  6036                                  	; 04/11/2022
  6037                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  6038                                  
  6039                                  	;getdseg <ds>
  6040 00000933 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6041 00000938 C3                      	retn
  6042                                  
  6043                                  	;entry	DOSInstall
  6044                                  DOSInstall:
  6045 00000939 B0FF                    	MOV	AL,0FFh
  6046 0000093B C3                      	retn
  6047                                  
  6048                                  ;ENDIF ; (*)
  6049                                  
  6050                                  
  6051                                  ; 15/05/2019 - Retro DOS v4.0
  6052                                  
  6053                                  ;------------------------------------------------------------------------
  6054                                  ;
  6055                                  ; Procedure Name : RW32_CONVERT
  6056                                  ;
  6057                                  ;Input: same as ABSDRD and ABSDWRT
  6058                                  ;	 ES:BP -> DPB
  6059                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6060                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6061                                  ;	 carry clear, parms ok
  6062                                  ;
  6063                                  ;------------------------------------------------------------------------
  6064                                  
  6065                                  	; 06/01/2024
  6066                                  RW32_CONVERT:
  6067 0000093C 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6068 0000093F 742A                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6069 00000941 49                      	dec	cx ; *
  6070 00000942 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6071 00000943 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6072 00000944 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6073 00000948 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6074 0000094C 80FAFE                  	CMP	DL,0FEh 		;>32mb  removable ?	;AN000;
  6075 0000094F 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6076                                  	;INC	DL			;>32mb			;AN000;
  6077                                  	; 17/12/2022
  6078 00000951 42                      	inc	dx
  6079 00000952 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6080 00000954 F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6081 00000956 09D2                    	OR	DX,DX			;>32mb  > 32mb ?	;AN000;
  6082                                  letold:
  6083 00000958 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6084 00000959 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6085 0000095A 7425                    	JZ	short old_style	; cf=0	;>32mb  no 		;AN000;
  6086                                  
  6087 0000095C 1E                      	push	ds
  6088                                  	;getdseg <ds>
  6089 0000095D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6090 00000962 C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6091 00000968 1F                      	pop	ds
  6092                                  
  6093 00000969 F9                      	STC				;>32mb			;AN000;
  6094 0000096A C3                      	retn				;>32mb			;AN000;
  6095                                  
  6096                                  new32format:
  6097                                  	;mov	dx,[bx+2]
  6098 0000096B 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6099                                  
  6100 0000096E 1E                      	push	ds			; set up ds to DOSDATA
  6101                                  	;getdseg <ds>
  6102 0000096F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6103 00000974 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6104 00000978 1F                      	pop	ds
  6105                                  
  6106 00000979 8B17                    	mov	dx,[bx]
  6107                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6108                                  	;mov	cx,[bx+4]
  6109 0000097B 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6110                                  	;lds	bx,[bx+6]
  6111 0000097E C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6112                                  old_style:				;>32mb			;AN000;
  6113                                  	; 06/01/2024
  6114                                  	; cf=0
  6115                                  	;CLC				;>32mb			;AN000;
  6116 00000981 C3                      	retn				;>32mb			;AN000;
  6117                                  
  6118                                  ;------------------------------------------------------------------------
  6119                                  ;
  6120                                  ; Procedure Name : Fastxxx_Purge
  6121                                  ;
  6122                                  ; Input: None
  6123                                  ; Functions: Purge Fastopen/ Cache Buffers
  6124                                  ; Output: None
  6125                                  ;
  6126                                  ;------------------------------------------------------------------------
  6127                                  
  6128                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6129                                  
  6130                                  Fastxxx_Purge:
  6131 00000982 50                      	PUSH	AX			; save regs.	;AN000;
  6132 00000983 56                      	PUSH	SI						;AN000;
  6133 00000984 52                      	PUSH	DX						;AN000;
  6134                                  topen:
  6135 00000985 1E                      	push	ds			; set up ds to DOSDATA
  6136                                  	;getdseg <ds>
  6137 00000986 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6138                                  
  6139 0000098B F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6140                                  					; fastopen installed ?	;AN000;
  6141 00000990 1F                      	pop	ds
  6142 00000991 740B                    	JZ	short nofast		; no			;AN000;
  6143 00000993 B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6144                                  dofast:
  6145 00000995 B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6146                                  	;;mov	dl,[es:bp+0]
  6147                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6148                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6149                                  	; 15/12/2022
  6150 00000997 268A5600                	mov	dl,[es:bp]
  6151                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6152 0000099B E8891D                  	call	Fast_Dispatch
  6153                                  nofast:
  6154 0000099E 5A                      	POP	DX						;AN000;
  6155 0000099F 5E                      	POP	SI			; restore regs		;AN000;
  6156 000009A0 58                      	POP	AX			 			;AN000;
  6157 000009A1 C3                      	retn				; exit
  6158                                  
  6159                                  ;============================================================================
  6160                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6161                                  ;============================================================================
  6162                                  ; 29/04/2019 - Retro DOS v4.0
  6163                                  
  6164                                  ;include dossym.inc
  6165                                  ;include dosmac.inc
  6166                                  ;include doscntry.inc
  6167                                  
  6168                                  ; DOSCODE Segment
  6169                                  
  6170                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6171                                  ; ---------------------------------------------------------------------------
  6172                                  ;include divmes.inc
  6173                                  
  6174                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6175                                  ; -------------------------------------
  6176                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6177                                  
  6178                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6179                                  	;PUBLIC	DIVMES
  6180                                  
  6181 000009A2 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6181 000009AB 6F766572666C6F770D-
  6181 000009B4 0A                 
  6182                                  
  6183                                  	;PUBLIC	DivMesLen
  6184                                  DivMesLen:
  6185 000009B5 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6186                                  
  6187                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6188                                  ; -------------------------------------
  6189                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6190                                  
  6191                                  ; (MSDOS 6.0)
  6192                                  ; VxD not found error message
  6193                                  
  6194                                  NoVxDErrMsg:
  6195 000009B7 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6195 000009C0 686176652074686520-
  6195 000009C9 66696C652057494E41-
  6195 000009D2 32302E33383620696E-
  6195 000009DB 2074686520726F6F74-
  6195 000009E4 206F6620796F757220-
  6195 000009ED 626F6F742064726976-
  6195 000009F6 65                 
  6196 000009F7 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6196 00000A00 57696E646F77732069-
  6196 00000A09 6E20456E68616E6365-
  6196 00000A12 64204D6F64650D0A   
  6197                                  
  6198                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6199                                  
  6200                                  ; 13/05/2019 - Retro DOS v4.0
  6201                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6202                                  
  6203                                  ;include yesno.asm  (MNSDOS 6.0)
  6204                                  ; -------------------------------------
  6205                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6206                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6207                                  
  6208                                  ; This is for country Yes and No
  6209                                  
  6210 00000A1A 59                      NLS_YES:	db 'Y'
  6211 00000A1B 4E                      NLS_NO:		db 'N'
  6212 00000A1C 79                      NLS_yes2:	db 'y'
  6213 00000A1D 6E                      NLS_no2:	db 'n'
  6214                                  
  6215                                  ; ---------------------------------------------------------------------------
  6216                                  
  6217                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6218                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6219                                  
  6220                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6221                                  
  6222                                  ; The following two tables implement the current buffered input editing
  6223                                  ; routines. The tables are pairwise associated in reverse order for ease
  6224                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6225                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6226                                  
  6227                                  	;PUBLIC	CANCHAR
  6228                                  CANCHAR:
  6229 00000A1E 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6230                                  	
  6231                                  	;PUBLIC	ESCCHAR
  6232                                  ESCCHAR:
  6233 00000A1F 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6234                                  	
  6235                                  	;IF	NOT Rainbow
  6236                                  
  6237                                  ESCTAB:	; LABEL BYTE
  6238                                  
  6239                                  	;IF	IBM
  6240 00000A20 40                      	DB	64		; Ctrl-Z - F6
  6241 00000A21 4D                      	DB	77		; Copy one char - -->
  6242 00000A22 3B                      	DB	59		; Copy one char - F1
  6243 00000A23 53                      	DB	83		; Skip one char - DEL
  6244 00000A24 3C                      	DB	60		; Copy to char - F2
  6245 00000A25 3E                      	DB	62		; Skip to char - F4
  6246 00000A26 3D                      	DB	61		; Copy line - F3
  6247 00000A27 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6248 00000A28 3F                      	DB	63		; Reedit line (new template) - F5
  6249 00000A29 4B                      	DB	75		; Backspace - <--
  6250 00000A2A 52                      	DB	82		; Enter insert mode - INS (toggle)
  6251 00000A2B 52                      	DB	82		; Exit insert mode - INS (toggle)
  6252 00000A2C 41                      	DB	65		; Escape character - F7
  6253 00000A2D 41                      	DB	65		; End of table
  6254                                  	;ENDIF
  6255                                  
  6256                                  ESCEND: ; LABEL BYTE
  6257                                  
  6258                                  ESCTABLEN EQU ESCEND-ESCTAB
  6259                                  
  6260                                  ESCFUNC: ; LABEL WORD
  6261                                  	
  6262 00000A2E [2014]                  	short_addr  GETCH	; Ignore the escape sequence
  6263 00000A30 [1015]                  	short_addr  TWOESC
  6264 00000A32 [9815]                  	short_addr  EXITINS
  6265 00000A34 [9815]                  	short_addr  ENTERINS
  6266 00000A36 [9A14]                  	short_addr  BACKSP
  6267 00000A38 [8415]                  	short_addr  REEDIT
  6268 00000A3A [8714]                  	short_addr  KILNEW
  6269 00000A3C [1715]                  	short_addr  COPYLIN
  6270 00000A3E [4A15]                  	short_addr  SKIPSTR
  6271 00000A40 [1D15]                  	short_addr  COPYSTR
  6272 00000A42 [4015]                  	short_addr  SKIPONE
  6273 00000A44 [2215]                  	short_addr  COPYONE
  6274 00000A46 [2215]                  	short_addr  COPYONE
  6275 00000A48 [A015]                  	short_addr  CTRLZ
  6276                                  
  6277                                  	;ENDIF
  6278                                  
  6279                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6280                                  ; ---------------------------------------------------------------------------
  6281                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6282                                  
  6283                                  ; OEMFunction key is expected to process a single function
  6284                                  ;   key input from a device and dispatch to the proper
  6285                                  ;   routines leaving all registers UNTOUCHED.
  6286                                  ;
  6287                                  ; Inputs:   CS, SS are DOSGROUP
  6288                                  ; Outputs:  None. This function is expected to JMP to onw of
  6289                                  ;           the following labels:
  6290                                  ;
  6291                                  ;           GetCh       - ignore the sequence
  6292                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6293                                  ;           ExitIns     - toggle insert mode
  6294                                  ;           EnterIns    - toggle insert mode
  6295                                  ;           BackSp      - move backwards one space
  6296                                  ;           ReEdit      - reedit the line with a new template
  6297                                  ;           KilNew      - discard the current line and start from scratch
  6298                                  ;           CopyLin     - copy the rest of the template into the line
  6299                                  ;           SkipStr     - read the next character and skip to it in the template
  6300                                  ;           CopyStr     - read next char and copy from template to line until char
  6301                                  ;           SkipOne     - advance position in template one character
  6302                                  ;           CopyOne     - copy next character in template into line
  6303                                  ;           CtrlZ       - place a ^Z into the template
  6304                                  ; Registers that are allowed to be modified by this function are:
  6305                                  ;           AX, CX, BP
  6306                                  
  6307                                  ; 13/05/2019 - Retro DOS v4.0
  6308                                  ; -------------------------------------
  6309                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6310                                  
  6311                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6312                                  ; -------------------------------------
  6313                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6314                                  
  6315                                  OEMFunctionKey:
  6316 00000A4A E83309                  	CALL	_$STD_CON_INPUT_NO_ECHO	; Get the second byte of the sequence
  6317 00000A4D B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6318 00000A4F 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6319 00000A50 BF[200A]                	MOV     DI,ESCTAB		; offset of second byte table
  6320 00000A53 06                      	push	es
  6321 00000A54 0E                      	push	cs
  6322 00000A55 07                      	pop	es
  6323 00000A56 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6324 00000A58 07                      	pop	es
  6325 00000A59 5F                      	POP     DI                      ; restore DI
  6326 00000A5A D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6327 00000A5C 89CD                    	MOV     BP,CX                   ; move to indexable register
  6328                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6329 00000A5E 2EFFA6[2E0A]            	JMP	word [CS:BP+ESCFUNC]
  6330                                  
  6331                                  ;DOSCODE ENDS
  6332                                  	
  6333                                  ;============================================================================
  6334                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6335                                  ;============================================================================
  6336                                  ; Retro DOS v3.0 - 18/07/2018
  6337                                  
  6338                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6339                                  ;----------------------------------------------------------------------------
  6340                                  ; Retro DOS v2.0 - 13/03/2018
  6341                                  
  6342                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6343                                  
  6344                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6345                                  
  6346                                  ;**	$GET_DATE - Get Current Date
  6347                                  ;----------------------------------------
  6348                                  ;	ENTRY	none
  6349                                  ;	EXIT	(cx:dx) = current date
  6350                                  ;	USES	all
  6351                                  
  6352                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6353                                  
  6354                                  _$GET_DATE:	;System call 42
  6355                                  
  6356 00000A63 16                      	PUSH	SS
  6357 00000A64 1F                      	POP	DS
  6358 00000A65 E8B700                  	CALL	READTIME	;Check for rollover to next day
  6359 00000A68 A1[5203]                	MOV	AX,[YEAR]
  6360                                  
  6361                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6362                                  
  6363 00000A6B 8B1E[5003]              	MOV	BX,[DAY]	; fetch both day and month
  6364 00000A6F E813FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6365                                  	;MOV	[SI+6],BX	;DH=month, DL=day
  6366 00000A72 895C06                  	MOV	[SI+user_env.user_DX],BX
  6367 00000A75 05BC07                  	ADD	AX,1980		;Put bias back
  6368                                  	;MOV	[SI+4],AX	;CX=year
  6369 00000A78 894404                  	MOV	[SI+user_env.user_CX],AX
  6370 00000A7B 36A0[5603]              	MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6371                                  RET20:	; 05/11/2022
  6372                                  RET24:	; 18/12/2022
  6373 00000A7F C3                      	RETN
  6374                                  
  6375                                  ;**	$SET_DATE - Set Current Date
  6376                                  ;----------------------------------------
  6377                                  ;	ENTRY	(cx:dx) = current date
  6378                                  ;	EXIT	(al) = -1 iff bad date
  6379                                  ;		(al) = 0 if ok
  6380                                  ;	USES	all
  6381                                  
  6382                                  _$SET_DATE:	;System call 43
  6383                                  
  6384 00000A80 B0FF                    	MOV	AL,-1		;Be ready to flag error
  6385 00000A82 81E9BC07                	SUB	CX,1980		;Fix bias in year
  6386                                  	;JC	SHORT RET24	;Error if not big enough
  6387                                  	; 05/11/2022
  6388 00000A86 72F7                    	jc	short RET20
  6389 00000A88 83F977                  	CMP	CX,119		;Year must be less than 2100
  6390 00000A8B 77F2                    	JA	SHORT RET24
  6391 00000A8D 08F6                    	OR	DH,DH
  6392                                  	;JZ	SHORT RET24
  6393                                   	; 05/11/2022
  6394 00000A8F 74EE                    	jz	short RET20
  6395 00000A91 08D2                    	OR	DL,DL
  6396                                  	;JZ	SHORT RET24	;Error if either month or day is 0
  6397                                  	; 05/11/2022
  6398 00000A93 74EA                    	jz	short RET20
  6399 00000A95 80FE0C                  	CMP	DH,12		;Check against max. month
  6400 00000A98 77E5                    	JA	SHORT RET24
  6401 00000A9A 16                      	PUSH	SS
  6402 00000A9B 1F                      	POP	DS
  6403                                  	;CALL	DODATE
  6404                                  	; 18/12/2022
  6405 00000A9C E91301                  	jmp	DODATE
  6406                                  ;RET24:  
  6407                                  	;RETN
  6408                                  
  6409                                  ;**	$GET_TIME - Get Current Time
  6410                                  ;----------------------------------------
  6411                                  ;	ENTRY	none
  6412                                  ;	EXIT	(cx:dx) = current time
  6413                                  ;	USES	all
  6414                                  
  6415                                  _$GET_TIME:			;System call 44
  6416                                  
  6417 00000A9F 16                      	PUSH	SS
  6418 00000AA0 1F                      	POP	DS
  6419 00000AA1 E87B00                  	CALL	READTIME
  6420 00000AA4 E8DEF9                  	CALL	Get_User_Stack	;Get pointer to user registers
  6421                                  	;MOV	[SI+6],DX
  6422 00000AA7 895406                  	MOV	[SI+user_env.user_DX],DX
  6423                                  	;MOV	[SI+4],CX
  6424 00000AAA 894C04                  	MOV	[SI+user_env.user_CX],CX
  6425                                  set_time_ok:	; 06/01/2024
  6426 00000AAD 30C0                    	XOR	AL,AL
  6427                                  RET26:  
  6428 00000AAF C3                      	RETN
  6429                                  
  6430                                  ;**	$SET_TIME - Set Current Time
  6431                                  ;----------------------------------------
  6432                                  ;	ENTRY	(cx:dx) = time
  6433                                  ;	EXIT	(al) = 0 if 0k
  6434                                  ;		(al) = -1 if invalid
  6435                                  ;	USES	ALL
  6436                                  
  6437                                  _$SET_TIME:			;System call 45
  6438                                  
  6439 00000AB0 B0FF                    	MOV	AL,-1		;Flag in case of error
  6440 00000AB2 80FD18                  	CMP	CH,24		;Check hours
  6441 00000AB5 73F8                    	JAE	SHORT RET26
  6442 00000AB7 80F93C                  	CMP	CL,60		;Check minutes
  6443 00000ABA 73F3                    	JAE	SHORT RET26
  6444 00000ABC 80FE3C                  	CMP	DH,60		;Check seconds
  6445 00000ABF 73EE                    	JAE	SHORT RET26
  6446 00000AC1 80FA64                  	CMP	DL,100		;Check 1/100's
  6447 00000AC4 73E9                    	JAE	SHORT RET26
  6448 00000AC6 51                      	PUSH	CX
  6449 00000AC7 52                      	PUSH	DX
  6450 00000AC8 16                      	PUSH	SS
  6451 00000AC9 1F                      	POP	DS
  6452 00000ACA BB[B603]                	MOV	BX,TIMEBUF
  6453 00000ACD B90600                  	MOV	CX,6
  6454                                  	;XOR	DX,DX
  6455                                  	;MOV	AX,DX
  6456 00000AD0 31C0                    	xor	ax,ax
  6457 00000AD2 99                      	cwd	; 06/01/2024
  6458 00000AD3 53                      	PUSH	BX
  6459 00000AD4 E8363C                  	CALL	SETREAD
  6460 00000AD7 1E                      	PUSH	DS
  6461 00000AD8 C536[2E00]              	LDS	SI,[BCLOCK]
  6462 00000ADC E8B83B                  	CALL	DEVIOCALL2	;Get correct day count
  6463 00000ADF 1F                      	POP	DS
  6464 00000AE0 5B                      	POP	BX
  6465 00000AE1 E85C3C                  	CALL	SETWRITE
  6466 00000AE4 8F06[BA03]              	POP	WORD [TIMEBUF+4]
  6467 00000AE8 8F06[B803]              	POP	WORD [TIMEBUF+2]
  6468 00000AEC C536[2E00]              	LDS	SI,[BCLOCK]
  6469 00000AF0 E8A43B                  	CALL	DEVIOCALL2	;Set the time
  6470                                  	; 06/01/2024
  6471                                  	;XOR	AL,AL
  6472                                  	;RETN
  6473 00000AF3 EBB8                    	jmp	short set_time_ok
  6474                                  
  6475                                  ; 11/07/2018 - Retro DOS v3.0
  6476                                  ; Retro DOS v2.0 - 14/03/2018
  6477                                  
  6478                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6479                                  
  6480                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6481                                  ;----------------------------------------------------------
  6482                                  ; Date16 returns the current date in AX, current time in DX
  6483                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6484                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6485                                  
  6486                                  DATE16:
  6487                                  	
  6488                                  ;M048	Context DS
  6489                                  ;
  6490                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6491                                  ; is DOSDATA
  6492                                  
  6493                                  	;push	ss
  6494                                  	;pop	ds
  6495                                  
  6496                                  	;getdseg <ds>		; M048
  6497                                  
  6498                                  	; 13/05/2019 - Retro DOS v4.0
  6499 00000AF5 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6500                                  
  6501 00000AFA 51                      	PUSH	CX
  6502 00000AFB 06                      	PUSH	ES
  6503 00000AFC E82000                  	CALL	READTIME
  6504 00000AFF 07                      	POP	ES
  6505 00000B00 D0E1                    	SHL	CL,1		;Minutes to left part of byte
  6506 00000B02 D0E1                    	SHL	CL,1
  6507 00000B04 D1E1                    	SHL	CX,1		;Push hours and minutes to left end
  6508 00000B06 D1E1                    	SHL	CX,1
  6509 00000B08 D1E1                    	SHL	CX,1
  6510 00000B0A D0EE                    	SHR	DH,1		;Count every two seconds
  6511 00000B0C 08F1                    	OR	CL,DH		;Combine seconds with hours and minutes
  6512 00000B0E 89CA                    	MOV	DX,CX
  6513                                  
  6514                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6515                                  
  6516 00000B10 A1[5103]                	MOV	AX,[MONTH]	;Fetch month and year
  6517 00000B13 B104                    	MOV	CL,4
  6518 00000B15 D2E0                    	SHL	AL,CL		;Push month to left to make room for day
  6519 00000B17 D1E0                    	SHL	AX,1
  6520 00000B19 59                      	POP	CX
  6521 00000B1A 0A06[5003]              	OR	AL,[DAY]
  6522                                  RET21:
  6523 00000B1E C3                      	RETN
  6524                                  
  6525                                  ;----------------------------------------------------------
  6526                                  
  6527                                  READTIME:
  6528                                  
  6529                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6530                                  ;Uses AX, CX, DX.
  6531                                  
  6532 00000B1F C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6533 00000B25 56                      	PUSH	SI
  6534 00000B26 53                      	PUSH	BX
  6535                                  
  6536 00000B27 BB[B603]                	MOV	BX,TIMEBUF
  6537                                  
  6538 00000B2A B90600                  	MOV	CX,6
  6539                                  	;XOR	DX,DX
  6540                                  	;MOV	AX,DX
  6541                                  	; 06/01/2024
  6542 00000B2D 31C0                    	xor	ax,ax
  6543 00000B2F 99                      	cwd
  6544 00000B30 E8DA3B                  	CALL	SETREAD
  6545 00000B33 1E                      	PUSH	DS
  6546 00000B34 C536[2E00]              	LDS	SI,[BCLOCK]
  6547 00000B38 E85C3B                  	CALL	DEVIOCALL2	;Get correct date and time
  6548 00000B3B 1F                      	POP	DS
  6549 00000B3C 5B                      	POP	BX
  6550 00000B3D 5E                      	POP	SI
  6551 00000B3E A1[B603]                	MOV	AX,[TIMEBUF]
  6552 00000B41 8B0E[B803]              	MOV	CX,[TIMEBUF+2]
  6553 00000B45 8B16[BA03]              	MOV	DX,[TIMEBUF+4]
  6554 00000B49 3B06[5403]              	CMP	AX,[DAYCNT]	;See if day count is the same
  6555                                  	;JZ	SHORT RET22
  6556 00000B4D 74CF                    	JZ	SHORT RET21 ; 18/07/2018
  6557                                  	;cmp	ax,43830
  6558 00000B4F 3D36AB                  	CMP	AX,FOURYEARS*30 ;Number of days in 120 years
  6559 00000B52 733D                    	JAE	SHORT RET22	;Ignore if too large
  6560 00000B54 A3[5403]                	MOV	[DAYCNT],AX
  6561 00000B57 56                      	PUSH	SI
  6562 00000B58 51                      	PUSH	CX
  6563 00000B59 52                      	PUSH	DX		;Save time
  6564 00000B5A 31D2                    	XOR	DX,DX
  6565                                  	;mov	cx,1461
  6566 00000B5C B9B505                  	MOV	CX,FOURYEARS	;Number of days in 4 years
  6567 00000B5F F7F1                    	DIV	CX		;Compute number of 4-year units
  6568 00000B61 D1E0                    	SHL	AX,1
  6569 00000B63 D1E0                    	SHL	AX,1
  6570 00000B65 D1E0                    	SHL	AX,1		;Multiply by 8 (no. of half-years)
  6571 00000B67 89C1                    	MOV	CX,AX		;<240 implies AH=0
  6572                                  
  6573 00000B69 BE[140D]                	MOV	SI,YRTAB	;Table of days in each year
  6574                                  
  6575 00000B6C E82300                  	CALL	DSLIDE		;Find out which of four years we're in
  6576 00000B6F D1E9                    	SHR	CX,1		;Convert half-years to whole years
  6577 00000B71 7304                    	JNC	SHORT SK	;Extra half-year?
  6578 00000B73 81C2C800                	ADD	DX,200
  6579                                  SK:
  6580 00000B77 E82200                  	CALL	SETYEAR
  6581 00000B7A B101                    	MOV	CL,1		;At least at first month in year
  6582                                  
  6583 00000B7C BE[1C0D]                	MOV	SI,MONTAB	;Table of days in each month
  6584                                  	
  6585 00000B7F E81000                  	CALL	DSLIDE		;Find out which month we're in
  6586 00000B82 880E[5103]              	MOV	[MONTH],CL
  6587 00000B86 42                      	INC	DX		;Remainder is day of month (start with one)
  6588 00000B87 8816[5003]              	MOV	[DAY],DL
  6589 00000B8B E89400                  	CALL	WKDAY		;Set day of week
  6590 00000B8E 5A                      	POP	DX
  6591 00000B8F 59                      	POP	CX
  6592 00000B90 5E                      	POP	SI
  6593                                  RET22:  
  6594 00000B91 C3                      	RETN
  6595                                  
  6596                                  ;----------------------------------------------------------
  6597                                  
  6598                                  DSLIDE:
  6599                                  	;MOV	AH,0
  6600                                  	; 06/01/2024
  6601                                  	; (AH = 0)
  6602                                  DSLIDE1:
  6603 00000B92 AC                      	LODSB			;Get count of days
  6604 00000B93 39C2                    	CMP	DX,AX		;See if it will fit
  6605                                  	;JB	SHORT RET23	;If not, done
  6606 00000B95 72FA                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6607 00000B97 29C2                    	SUB	DX,AX
  6608 00000B99 41                      	INC	CX		;Count one more month/year
  6609 00000B9A EBF6                    	JMP	SHORT DSLIDE1
  6610                                  
  6611                                  ;----------------------------------------------------------
  6612                                  
  6613                                  SETYEAR:
  6614                                  
  6615                                  ;Set year with value in CX. Adjust length of February for this year.
  6616                                  
  6617                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6618                                  ;	  set DS to DOSDATA. Since the only guy calling this should be the DOS
  6619                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6620                                  ;	preserve DS as CHKYR is also called as a routine.
  6621                                  
  6622                                  	; MSDOS 6.0 (18/07/2018) ; *
  6623                                  
  6624                                  	;GETDSEG DS
  6625                                  
  6626                                  	;PUSH	CS  ; *
  6627                                  	;POP	DS  ; *
  6628                                  
  6629                                  	; 13/05/2019 - Retro DOS v4.0
  6630 00000B9C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6631                                  
  6632                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6633                                  	; 05/11/2022 
  6634                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6635                                  
  6636 00000BA1 880E[5203]              	MOV	[YEAR],CL
  6637                                  CHKYR:
  6638 00000BA5 F6C103                  	TEST	CL,3		;Check for leap year
  6639 00000BA8 B01C                    	MOV	AL,28
  6640 00000BAA 7502                    	JNZ	SHORT SAVFEB	;28 days if no leap year
  6641 00000BAC FEC0                    	INC	AL		;Add leap day
  6642                                  SAVFEB:
  6643 00000BAE A2[1D0D]                	mov	[february],al
  6644                                  	;MOV	[MONTAB+1],AL	;Store for February
  6645                                  RET23:  
  6646 00000BB1 C3                      	RETN
  6647                                  
  6648                                  ;----------------------------------------------------------
  6649                                  
  6650                                  DODATE:
  6651 00000BB2 E8F0FF                  	CALL	CHKYR		;Set Feb. up for new year
  6652 00000BB5 88F0                    	MOV	AL,DH
  6653                                  
  6654 00000BB7 BB[1B0D]                	MOV	BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6655                                  
  6656 00000BBA D7                      	XLAT			;Look up days in month
  6657 00000BBB 38D0                    	CMP	AL,DL
  6658 00000BBD B0FF                    	MOV	AL,-1		;Restore error flag, just in case
  6659                                  	;JB	SHORT RET25	;Error if too many days
  6660 00000BBF 72F0                    	jb	short RET23 ; 18/07/2018
  6661 00000BC1 E8D8FF                  	CALL	SETYEAR
  6662                                  ;
  6663                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6664                                  ;
  6665 00000BC4 8916[5003]              	MOV	[DAY],DX	;Set both day and month
  6666 00000BC8 D1E9                    	SHR	CX,1
  6667 00000BCA D1E9                    	SHR	CX,1
  6668                                  	;mov	ax,1461
  6669 00000BCC B8B505                  	MOV	AX,FOURYEARS
  6670 00000BCF 89D3                    	MOV	BX,DX
  6671 00000BD1 F7E1                    	MUL	CX
  6672 00000BD3 8A0E[5203]              	MOV	CL,[YEAR]
  6673 00000BD7 80E103                  	AND	CL,3
  6674                                  
  6675 00000BDA BE[140D]                	MOV	SI,YRTAB
  6676                                  
  6677 00000BDD 89C2                    	MOV	DX,AX
  6678 00000BDF D1E1                    	SHL	CX,1		;Two entries per year, so double count
  6679 00000BE1 E85100                  	CALL	DSUM		;Add up the days in each year
  6680 00000BE4 88F9                    	MOV	CL,BH		;Month of year
  6681                                  
  6682 00000BE6 BE[1C0D]                	MOV	SI,MONTAB
  6683                                  
  6684 00000BE9 49                      	DEC	CX		;Account for months starting with one
  6685 00000BEA E84800                  	CALL	DSUM		;Add up days in each month
  6686 00000BED 88D9                    	MOV	CL,BL		;Day of month
  6687 00000BEF 49                      	DEC	CX		;Account for days starting with one
  6688 00000BF0 01CA                    	ADD	DX,CX		;Add in to day total
  6689 00000BF2 92                      	XCHG	AX,DX		;Get day count in AX
  6690 00000BF3 A3[5403]                	MOV	[DAYCNT],AX
  6691 00000BF6 56                      	PUSH	SI
  6692 00000BF7 53                      	PUSH	BX
  6693 00000BF8 50                      	PUSH	AX
  6694                                  
  6695 00000BF9 BB[B603]                	MOV	BX,TIMEBUF
  6696                                  
  6697 00000BFC B90600                  	MOV	CX,6
  6698                                  	;XOR	DX,DX
  6699                                  	;MOV	AX,DX
  6700                                  	; 06/01/2024
  6701 00000BFF 31C0                    	xor	ax,ax
  6702 00000C01 99                      	cwd
  6703 00000C02 53                      	PUSH	BX
  6704 00000C03 E8073B                  	CALL	SETREAD
  6705                                  
  6706 00000C06 1E                      	PUSH	DS
  6707 00000C07 C536[2E00]              	LDS	SI,[BCLOCK]
  6708 00000C0B E8893A                  	CALL	DEVIOCALL2	;Get correct date and time
  6709 00000C0E 1F                      	POP	DS
  6710 00000C0F 5B                      	POP	BX
  6711 00000C10 E82D3B                  	CALL	SETWRITE
  6712 00000C13 8F06[B603]              	POP	WORD [TIMEBUF]
  6713 00000C17 1E                      	PUSH	DS
  6714 00000C18 C536[2E00]              	LDS	SI,[BCLOCK]
  6715 00000C1C E8783A                  	CALL	DEVIOCALL2	;Set the date
  6716 00000C1F 1F                      	POP	DS
  6717 00000C20 5B                      	POP	BX
  6718 00000C21 5E                      	POP	SI
  6719                                  WKDAY:
  6720 00000C22 A1[5403]                	MOV	AX,[DAYCNT]
  6721 00000C25 31D2                    	XOR	DX,DX
  6722 00000C27 B90700                  	MOV	CX,7
  6723 00000C2A 40                      	INC	AX
  6724 00000C2B 40                      	INC	AX		;First day was Tuesday
  6725 00000C2C F7F1                    	DIV	CX		;Compute day of week
  6726 00000C2E 8816[5603]              	MOV	[WEEKDAY],DL
  6727 00000C32 30C0                    	XOR	AL,AL		;Flag OK
  6728                                  RET25:
  6729 00000C34 C3                      	RETN
  6730                                  
  6731                                  ;----------------------------------------------------------
  6732                                  
  6733                                  ;**	DSUM - Compute the sum of a string of bytes
  6734                                  ;
  6735                                  ;	ENTRY	(cx) = byte count
  6736                                  ;		(ds:si) = byte address
  6737                                  ;		(dx) = sum register, initialized by caller
  6738                                  ;	EXIT	(dx) updated
  6739                                  ;	USES	ax, cx, dx, si, flags
  6740                                  
  6741                                  DSUM:
  6742 00000C35 B400                    	MOV	AH,0
  6743 00000C37 E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6744                                  	;JCXZ	RET25 ; 18/07/2018
  6745                                  DSUM1:
  6746 00000C39 AC                      	LODSB
  6747 00000C3A 01C2                    	ADD	DX,AX
  6748 00000C3C E2FB                    	LOOP	DSUM1
  6749                                  DSUM9:
  6750 00000C3E C3                      	RETN
  6751                                  
  6752                                  ;============================================================================
  6753                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6754                                  ;============================================================================
  6755                                  ; 29/04/2019 - Retro DOS v4.0
  6756                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6757                                  
  6758                                  ; 12/03/2018 - Retro DOS v2.0 
  6759                                  
  6760                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6761                                  ;NAME	GETSET
  6762                                  
  6763                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6764                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6765                                  
  6766                                  ;USERNUM:
  6767                                  ;	DW	0			; 24 bit user number
  6768                                  ;       DB      0
  6769                                  ;;	IF      IBM
  6770                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6771                                  ;;	ELSE
  6772                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6773                                  ;;	ENDIF
  6774                                  
  6775                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6776                                  ;; 08/07/2018 - Retro DOS v3.0
  6777                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6778                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6779                                  
  6780                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6781                                  ;----------------------------------------------------------------------------
  6782                                  
  6783                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6784                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6785                                  
  6786                                  _$GET_VERSION:
  6787                                  
  6788                                  ; Inputs:
  6789                                  ;       None
  6790                                  ; Function:
  6791                                  ;       Return MS-DOS version number
  6792                                  ; Outputs:
  6793                                  ;       OEM number in BH
  6794                                  ;       User number in BL:CX (24 bits)
  6795                                  ;       Version number as AL.AH in binary
  6796                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6797                                  
  6798                                  ; MSDOS 6.0
  6799                                  ;
  6800                                  ;	Fake_Count is used to lie about the version numbers to support
  6801                                  ;	old binarys. See ms_table.asm for more info.
  6802                                  ;
  6803                                  ;		if input al = 00
  6804                                  ;		  (bh) = OEM number			
  6805                                  ;		else if input al = 01
  6806                                  ;		  (bh) = version flags
  6807                                  ;		 
  6808                                  ;		       	 bits 0-2 = DOS internal revision
  6809                                  ;		       	 bits 3-7 = DOS type flags
  6810                                  ;		              bit 3    = DOS is in ROM
  6811                                  ;		              bit 4    = DOS in in HMA
  6812                                  ;		              bits 5-7 = reserved
  6813                                  ;               M007 change - only bit 3 is now valid. Other bits
  6814                                  ;               are 0 when AL = 1
  6815                                  
  6816                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6817 00000C3F 36C50E[B203]            	lds	cx, [ss:USERNUM]
  6818 00000C44 8CDB                    	mov	bx, ds
  6819                                  
  6820                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6821                                  	;--------------------------------------
  6822                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6823                                  
  6824 00000C46 16                              PUSH    SS
  6825 00000C47 1F                              POP     DS
  6826                                          
  6827                                  	; 06/01/2024
  6828                                  	;MOV	BX,[USERNUM+2]
  6829                                          ;MOV	CX,[USERNUM]
  6830                                  
  6831                                  	; 13/05/2019 - Retro DOS v4.0
  6832                                  
  6833                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6834                                  	;DOS flags
  6835                                  
  6836 00000C48 3C01                    	cmp	AL,1
  6837 00000C4A 7502                    	jne	short Norm_Vers
  6838                                  
  6839                                  ;ifdef ROMDOS
  6840                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6841                                  ;				(DOSINROM = 8)
  6842                                  ;else
  6843 00000C4C 30FF                            xor     bh,bh		; Otherwise return 0
  6844                                  ;endif				;M007 end
  6845                                  
  6846                                  Norm_Vers:
  6847                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6848                                  
  6849                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6850                                  	; 13/05/2019 - Retro DOS v4.0
  6851 00000C4E 1E                      	push	ds		; Get the version number from the
  6852 00000C4F 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6853                                  	;mov	ax,[40h]
  6854 00000C53 A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6855                                  	; 07/12/2022
  6856 00000C56 1F                      	pop	ds
  6857 00000C57 E82BF8                  	call	Get_User_Stack
  6858                                  				; Put values for return registers
  6859                                  				; in the proper place on the user's	 
  6860                                  				; stack addressed by DS:SI
  6861                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6862                                  gdrvfspc_ret:
  6863                                          ;MOV	[SI+user_env.user_AX],AX
  6864 00000C5A 8904                            MOV	[SI],AX
  6865                                          ;MOV	[SI+4],CX
  6866 00000C5C 894C04                  	mov	[SI+user_env.user_CX],CX
  6867                                  set_user_bx:
  6868                                  	;MOV	[SI+2],BX
  6869 00000C5F 895C02                  	mov	[SI+user_env.user_BX],BX
  6870                                  
  6871 00000C62 C3                      	RETN
  6872                                  
  6873                                  ; 18/07/2018 - Retro DOS v3.0
  6874                                  
  6875                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6876                                  ;----------------------------------------------------------------------------
  6877                                  
  6878                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6879                                  ;
  6880                                  ;	ENTRY	none
  6881                                  ;	EXIT	(al) = value of VERIFY flag
  6882                                  ;	USES	all
  6883                                  
  6884                                  
  6885                                  _$GET_VERIFY_ON_WRITE:
  6886                                  
  6887                                  ;hkn; SS override
  6888 00000C63 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6889 00000C67 C3                      	retn
  6890                                  
  6891                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6892                                  ;
  6893                                  ;	ENTRY	(al) = value of VERIFY flag
  6894                                  ;	EXIT	none
  6895                                  ;	USES	all
  6896                                  
  6897                                  _$SET_VERIFY_ON_WRITE:
  6898                                  
  6899 00000C68 2401                    	AND	AL,1
  6900                                  ;hkn; SS override
  6901 00000C6A 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6902                                  RET27:	; 18/07/2018
  6903 00000C6E C3                      	retn
  6904                                  
  6905                                  ; 19/07/2018 - Retro DOS v3.0
  6906                                  
  6907                                  ;BREAK <$International - return country-dependent information>
  6908                                  ;----------------------------------------------------------------------------
  6909                                  ;
  6910                                  ; Procedure Name : $INTERNATIONAL
  6911                                  ;
  6912                                  ; Inputs:
  6913                                  ;	MOV	AH,International
  6914                                  ;	MOV	AL,country	(al = 0 => current country)
  6915                                  ;      [MOV	BX,country]
  6916                                  ;	LDS	DX,block
  6917                                  ;	INT	21
  6918                                  ; Function:
  6919                                  ;	give users an idea of what country the application is running
  6920                                  ; Outputs:
  6921                                  ;	IF DX != -1 on input (get country)
  6922                                  ;	  AL = 0 means return current country table.
  6923                                  ;	  0<AL<0FFH means return country table for country AL
  6924                                  ;	  AL = 0FF means return country table for country BX
  6925                                  ;	  No Carry:
  6926                                  ;	     Register BX will contain the 16-bit country code.
  6927                                  ;	     Register AL will contain the low 8 bits of the country code.
  6928                                  ;	     The block pointed to by DS:DX is filled in with the information
  6929                                  ;	     for the particular country.
  6930                                  ;		BYTE  Size of this table excluding this byte and the next
  6931                                  ;		BYTE  Country code represented by this table
  6932                                  ;			A sequence of n bytes, where n is the number specified
  6933                                  ;			by the first byte above and is not > internat_block_max,
  6934                                  ;			in the correct order for being returned by the
  6935                                  ;			INTERNATIONAL call as follows:
  6936                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6937                                  ;		5 BYTE	Currency symbol null terminated
  6938                                  ;		2 BYTE	thousands separator null terminated
  6939                                  ;		2 BYTE	Decimal point null terminated
  6940                                  ;		2 BYTE	Date separator null terminated
  6941                                  ;		2 BYTE	Time separator null terminated
  6942                                  ;		1 BYTE	Bit field.  Currency format.
  6943                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6944                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6945                                  ;		1 BYTE	No. of significant decimal digits in currency
  6946                                  ;		1 BYTE	Bit field.  Time format.
  6947                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6948                                  ;		DWORD	Call address of case conversion routine
  6949                                  ;		2 BYTE	Data list separator null terminated.
  6950                                  ;	  Carry:
  6951                                  ;	     Register AX has the error code.
  6952                                  ;	IF DX = -1 on input (set current country)
  6953                                  ;	  AL = 0 is an error
  6954                                  ;	  0<AL<0FFH means set current country to country AL
  6955                                  ;	  AL = 0FF means set current country to country BX
  6956                                  ;	  No Carry:
  6957                                  ;	    Current country SET
  6958                                  ;	    Register AL will contain the low 8 bits of the country code.
  6959                                  ;	  Carry:
  6960                                  ;	     Register AX has the error code.
  6961                                  ;-----------------------------------------------------------------------------
  6962                                  
  6963                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6964                                  
  6965                                  ; 13/05/2019 - Retro DOS v4.0
  6966                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  6967                                  
  6968                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6969                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  6970                                  
  6971                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  6972                                  	 
  6973 00000C6F 3CFF                    	CMP	AL,0FFH
  6974 00000C71 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  6975 00000C73 88C3                    	MOV	BL,AL			; Put AL country code in BX
  6976 00000C75 30FF                    	XOR	BH,BH
  6977                                  BX_HAS_CODE:
  6978 00000C77 1E                      	PUSH	DS
  6979 00000C78 07                      	POP	ES
  6980 00000C79 52                      	PUSH	DX
  6981 00000C7A 5F                      	POP	DI			; User buffer to ES:DI
  6982                                  
  6983                                  ;hkn; SS is DOSDATA
  6984                                  ;	context DS
  6985                                  
  6986 00000C7B 16                      	push	ss
  6987 00000C7C 1F                      	pop	ds
  6988                                  
  6989 00000C7D 83FFFF                  	CMP	DI,-1
  6990 00000C80 745D                    	JZ	short international_set
  6991 00000C82 09DB                    	OR	BX,BX
  6992 00000C84 7505                    	JNZ	short international_find
  6993                                  
  6994                                  ;hkn; country_cdpg is in DOSDATA segment.
  6995 00000C86 BE[0512]                	MOV	SI,COUNTRY_CDPG
  6996                                  
  6997 00000C89 EB39                    	JMP	SHORT international_copy
  6998                                  
  6999                                  international_find:
  7000                                  	;MOV	BP,0			 ; flag it for GetCntry only
  7001                                  	; 06/01/2024
  7002 00000C8B 31ED                    	xor	bp,bp ; 0
  7003 00000C8D E80A00                  	CALL	international_get
  7004 00000C90 7255                    	JC	short errtn
  7005                                  	;CMP	BX,0			 ; nlsfunc finished it ?
  7006                                  	; 06/01/2024
  7007 00000C92 09DB                    	or	bx,bx
  7008 00000C94 752E                    	JNZ	SHORT international_copy ; no, copy by myself
  7009 00000C96 89D3                    	MOV	BX,DX			 ; put country back
  7010 00000C98 EB3A                    	JMP	SHORT international_ok3
  7011                                  
  7012                                  international_get:
  7013 00000C9A BE[0512]                	MOV	SI,COUNTRY_CDPG
  7014                                  
  7015                                  ;hkn; country_cdpg is in DOSDATA segment.
  7016                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7017                                  
  7018                                  	; MSDOS 3.3
  7019                                  	;;cmp	bx,[SI+63h]
  7020                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  7021                                  	;jz	short RET27
  7022                                  
  7023                                  	; 13/05/2019 - Retro DOS v4.0
  7024                                  
  7025                                  	; MSDOS 6.0
  7026                                  	;cmp	bx,[ss:si+68h]
  7027 00000C9D 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7028 00000CA1 74CB                    	jz	short RET27			; return if equal
  7029                                  
  7030 00000CA3 89DA                    	MOV	DX,BX
  7031 00000CA5 31DB                    	XOR	BX,BX			; bx = 0, default code page
  7032                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7033 00000CA7 B80014                  	mov	ax,1400h
  7034 00000CAA CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7035                                  			; Return: AL = 00h not installed, OK to install
  7036                                  			; 01h not installed, not OK
  7037                                  			; FFh installed
  7038 00000CAC 3CFF                    	CMP	AL,0FFH
  7039 00000CAE 7510                    	JNZ	short interr		; not in memory
  7040                                  	
  7041                                  	; 06/01/2024
  7042 00000CB0 B80314                  	mov	ax,1403h		; set country info
  7043                                  
  7044                                  	;cmp	bp,0
  7045 00000CB3 09ED                    	or	bp,bp			; GetCntry ?
  7046 00000CB5 7501                    	JNZ	short stcdpg
  7047                                  	
  7048                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  7049                                  	;mov	ax,1404h
  7050 00000CB7 40                      	inc	ax	; AX = 1404h ; get country info
  7051                                  
  7052                                  	; 06/01/2024
  7053                                  	;int	2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7054                                  	;		; BX = code page, DX = country code,
  7055                                  	;		; DS:SI -> internal code page structure
  7056                                  	;		; ES:DI -> user buffer
  7057                                  	;		; Return: AL = status
  7058                                  	;
  7059                                  	;JMP	short chkok
  7060                                  	
  7061                                  	;nop
  7062                                  
  7063                                  stcdpg:
  7064                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  7065                                  	; 06/01/2024
  7066                                  	;mov     ax,1403h
  7067                                  gscdpg:
  7068 00000CB8 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  7069                                  			; DS:SI -> internal code page structure
  7070                                  			; BX = code page, DX = country code
  7071                                  			; Return: AL = status
  7072                                  chkok:
  7073 00000CBA 08C0                    	or	al,al			; success ?
  7074                                  	;retz				; yes
  7075 00000CBC 74B0                    	jz	short RET27
  7076                                  
  7077                                  setcarry:
  7078 00000CBE F9                      	STC				; set carry
  7079 00000CBF C3                      	retn
  7080                                  interr:
  7081 00000CC0 B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  7082 00000CC2 EBFA                    	JMP	short setcarry
  7083                                  
  7084                                  international_copy:
  7085                                  
  7086                                  ;hkn; country_cdpg is in DOSDATA segment.
  7087                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7088                                  
  7089                                  	; MSDOS 3.3
  7090                                  	;;mov	bx,[SI+63h]
  7091                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7092                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7093                                  
  7094                                  	; 13/05/2019 - Retro DOS v4.0
  7095                                  
  7096                                  	; MSDOS 6.0
  7097                                  	;mov	bx,[ss:si+68h]
  7098 00000CC4 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7099 00000CC8 BE[7112]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7100                                  
  7101                                  	;mov	cx,24
  7102 00000CCB B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7103                                  
  7104                                  	; MSDOS 6.0
  7105                                  
  7106                                  ;hkn;	must set up DS to SS so that international info can be copied
  7107                                  	
  7108 00000CCE 1E                      	push	ds
  7109                                  
  7110 00000CCF 16                      	push	ss			; cs -> ss
  7111 00000CD0 1F                      	pop	ds
  7112                                  
  7113 00000CD1 F3A4                    	REP	MOVSB			; copy country info
  7114                                  
  7115                                  	; MSDOS 6.0
  7116                                  
  7117 00000CD3 1F                      	pop	ds	;hkn;	restore ds
  7118                                  
  7119                                  international_ok3:
  7120 00000CD4 E8AEF7                  	call	Get_User_Stack
  7121                                  ;ASSUME	DS:NOTHING
  7122                                  	;MOV	[SI+2],BX
  7123 00000CD7 895C02                  	MOV	[SI+user_env.user_BX],BX
  7124                                  international_ok:
  7125 00000CDA 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7126                                  ;SYS_RET_OK_jmp:
  7127                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7128                                  nono:	; 15/12/2022
  7129                                  SYS_RET_OK_jmp:
  7130 00000CDC E95CF9                  	jmp	SYS_RET_OK
  7131                                  
  7132                                  international_set:
  7133                                  
  7134                                  ;hkn; ASSUME	DS:DOSGROUP
  7135                                  ;ASSUME	DS:DOSDATA
  7136                                  
  7137 00000CDF BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7138 00000CE2 E8B5FF                  	CALL	international_get
  7139 00000CE5 73F3                    	JNC	short international_ok
  7140                                  errtn:
  7141 00000CE7 3CFF                    	CMP	AL,0FFH
  7142 00000CE9 7403                    	JZ	short errtn2
  7143                                  errtn1:
  7144 00000CEB E956F9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7145                                  errtn2:
  7146                                  	;error	error_invalid_function	; NLSFUNC not existent
  7147                                  
  7148                                  	;mov	al,1
  7149 00000CEE B001                    	mov	al,error_invalid_function 
  7150 00000CF0 EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7151                                  ;errtn3:
  7152                                  ;	jmp	SYS_RET_ERR
  7153                                  
  7154                                  ;EndProc $INTERNATIONAL
  7155                                  
  7156                                  ; 19/07/2018
  7157                                  
  7158                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7159                                  
  7160                                  ;----------------------------------------------------------------------------
  7161                                  ;
  7162                                  ; Procedure Name : $GetExtCntry
  7163                                  ;
  7164                                  ; Inputs:
  7165                                  ;	if AL >= 20H
  7166                                  ;	  AL= 20H    capitalize single char, DL= char
  7167                                  ;	      21H    capitalize string, CX= string length
  7168                                  ;	      22H    capitalize ASCIIZ string
  7169                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7170                                  ;	      80H bit 0 = use normal upper case table
  7171                                  ;		      1 = use file upper case table
  7172                                  ;	   DS:DX points to string
  7173                                  ;
  7174                                  ;	else
  7175                                  ;
  7176                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7177                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7178                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7179                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7180                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7181                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7182                                  ;	INT	21
  7183                                  ; Function:
  7184                                  ;	give users extended country dependent information
  7185                                  ;	or capitalize chars
  7186                                  ; Outputs:
  7187                                  ;	  No Carry:
  7188                                  ;	     extended country info is succesfully returned
  7189                                  ;	  Carry:
  7190                                  ;	     Register AX has the error code.
  7191                                  ;	     AX=0, NO	 for YES/NO CHECK
  7192                                  ;		1, YES
  7193                                  ;----------------------------------------------------------------------------
  7194                                  
  7195                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7196                                  
  7197                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7198                                  
  7199                                  	; MSDOS 6.0
  7200                                  _$GetExtCntry:
  7201 00000CF2 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7202 00000CF4 7269                    	JB	short notcap
  7203                                  capcap: 				;
  7204 00000CF6 A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7205 00000CF8 7505                    	JNZ	short fileupper		; file upper case
  7206                                  
  7207                                  ;hkn; UCASE_TAB in DOSDATA
  7208 00000CFA BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7209 00000CFD EB05                    	JMP	SHORT capit
  7210                                  
  7211                                  fileupper:
  7212                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7213                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7214                                  	; AL >= 80h
  7215 00000CFF 247F                    	and	al,7Fh 
  7216                                  
  7217                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7218 00000D01 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7219                                  capit:					;
  7220 00000D04 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7221 00000D06 750D                    	JNZ	short chkyes		; no
  7222 00000D08 88D0                    	MOV	AL,DL			; set up AL
  7223 00000D0A E88443                  	call	GETLET3 		; upper case it
  7224 00000D0D E875F7                  	call	Get_User_Stack		; get user stack
  7225                                  	;mov	[si+6],al
  7226 00000D10 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7227 00000D13 EBC7                    	JMP	SHORT nono		; done
  7228                                  chkyes: 				;
  7229 00000D15 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7230 00000D17 7522                    	JNZ	short capstring		; no
  7231                                  
  7232 00000D19 31C0                    	XOR	AX,AX			; presume NO
  7233                                  		      
  7234                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7235                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7236                                  
  7237                                  	; 06/08/2018 - Retro DOS v3.0
  7238                                  	; 13/05/2019 - Retro DOS v4.0
  7239                                  	;cmp	dl,'Y'
  7240 00000D1B 2E3A16[1A0A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7241 00000D20 7416                    	JZ	short yesyes		; yes
  7242                                  	;cmp	dl,'y'
  7243 00000D22 2E3A16[1C0A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7244 00000D27 740F                    	JZ	short yesyes		; yes
  7245                                  	;cmp	dl,'N'
  7246 00000D29 2E3A16[1B0A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7247 00000D2E 74AC                    	JZ	short nono		; no
  7248                                  	;cmp	dl,'n'
  7249 00000D30 2E3A16[1D0A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7250 00000D35 74A5                    	JZ	short nono		; no
  7251                                  ;dbcs_char:				;
  7252 00000D37 40                      	INC	AX			; not YES or NO
  7253                                  yesyes: 				;
  7254 00000D38 40                      	INC	AX			; return 1
  7255                                  	; 15/12/2022
  7256                                  ;nono:	
  7257 00000D39 EBA1                    	jmp	short SYS_RET_OK_jmp	;
  7258                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7259                                  	;jmp	SYS_RET_OK		; done
  7260                                  
  7261                                  capstring:				;
  7262 00000D3B 89D6                    	MOV	SI,DX			; si=dx
  7263 00000D3D 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7264 00000D3F 750D                    	JNZ	short capascii		; no
  7265                                  	;OR	CX,CX			; check count 0
  7266                                  	;JZ	short nono		; yes finished
  7267                                  	; 06/01/2024
  7268 00000D41 E399                    	jcxz	nono
  7269                                  concap: 				;
  7270 00000D43 AC                      	LODSB				; get char
  7271 00000D44 E84A43                  	call	GETLET3 		; upper case it
  7272 00000D47 8844FF                  	MOV	byte [SI-1],AL		; store back
  7273                                  ;next99: 				;
  7274 00000D4A E2F7                    	LOOP	concap			; continue
  7275 00000D4C EB8E                    	JMP	short nono		; done
  7276                                  capascii:				;
  7277 00000D4E 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7278 00000D50 7545                    	JNZ	short capinval		; no
  7279                                  concap2:				;
  7280 00000D52 AC                      	LODSB				; get char
  7281 00000D53 08C0                    	or	al,al			; end of string ?
  7282 00000D55 7485                    	JZ	short nono		; yes
  7283 00000D57 E83743                  	call	GETLET3 		; upper case it
  7284 00000D5A 8844FF                  	MOV	[SI-1],AL		; store back
  7285 00000D5D EBF3                    	JMP	short concap2 		; continue
  7286                                  
  7287                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7288                                  
  7289                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7290                                  ; _$GetExtCntry:
  7291                                  
  7292                                  notcap:
  7293 00000D5F 83F905                  	CMP	CX,5			; minimum size is 5
  7294 00000D62 7277                    	jb	short sizeerror
  7295                                  
  7296                                  GEC_CONT:
  7297                                  ;hkn; SS is DOSDATA
  7298                                  	;context DS
  7299                                  
  7300 00000D64 16                      	push	ss
  7301                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7302 00000D65 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7303                                  	
  7304                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7305 00000D66 BE[0512]                	MOV	SI,COUNTRY_CDPG
  7306                                  
  7307 00000D69 83FAFF                  	CMP	DX,-1			; active country ?
  7308 00000D6C 7503                    	JNZ	short GETCDPG 		; no
  7309                                  
  7310                                  ;hkn; use DS override to accesss country_cdpg fields
  7311                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7312                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7313 00000D6E 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7314                                  					; get active country id;smr;use DS
  7315                                  GETCDPG:
  7316 00000D71 83FBFF                  	CMP	BX,-1			; active code page?
  7317 00000D74 7503                    	JNZ	short CHKAGAIN		; no, check again
  7318                                  
  7319                                  ;hkn; use DS override to accesss country_cdpg fields
  7320                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7321                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7322 00000D76 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7323                                  					; get active code page id;smr;Use DS
  7324                                  CHKAGAIN:
  7325                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7326 00000D79 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7327                                  					; same as active country id?;smr;use DS
  7328 00000D7C 7550                    	JNZ	short CHKNLS		; no
  7329                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7330 00000D7E 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7331                                  					; same as active code pg id?;smr;use DS
  7332 00000D81 754B                    	JNZ	short CHKNLS		; no
  7333                                  CHKTYPE:
  7334                                  	;mov	bx,[si+48h]
  7335 00000D83 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7336                                  					; bx = sys code page id;smr;use DS
  7337 00000D86 51                      	PUSH	CX			; save cx
  7338                                  	;mov	cx,[si+4Ah]
  7339 00000D87 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7340                                  	;mov	si,COUNTRY_CDPG+76
  7341 00000D8A BE[5112]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7342                                  NXTENTRY:
  7343 00000D8D 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7344 00000D8F 740B                    	JZ	short FOUNDIT
  7345 00000D91 83C605                  	ADD	SI,5			; next entry
  7346 00000D94 E2F7                    	LOOP	NXTENTRY
  7347 00000D96 59                      	POP	CX
  7348                                  capinval:
  7349                                  	;error	error_invalid_function	; info type not found
  7350                                  	;mov	al,1
  7351 00000D97 B001                    	mov	al,error_invalid_function
  7352                                  ;SYS_RET_ERR_jmp:
  7353                                  	;jmp	SYS_RET_ERR
  7354                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7355                                  SYS_RET_ERR_jmp:
  7356 00000D99 E9A8F8                  	jmp	SYS_RET_ERR	
  7357                                  
  7358                                  FOUNDIT:
  7359 00000D9C A4                      	MOVSB				; move info id byte
  7360 00000D9D 59                      	POP	CX			; restore char count
  7361                                  	;cmp	al,1
  7362 00000D9E 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7363 00000DA0 7415                    	JZ	short setsize
  7364 00000DA2 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7365 00000DA5 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7366                                  OK_RETN:
  7367 00000DA8 F3A4                    	REP	MOVSB			; copy info
  7368 00000DAA 89C1                    	MOV	CX,AX			; CX = actual length returned
  7369 00000DAC 89D8                    	MOV	AX,BX			; return sys code page in ax
  7370                                  GETDONE:
  7371 00000DAE E8D4F6                  	call	Get_User_Stack		; return actual length to user's CX
  7372                                  	;mov	[si+4],cx 
  7373 00000DB1 894C04                  	MOV	[SI+user_env.user_CX],CX
  7374                                  	;jmp	SYS_RET_OK
  7375                                  	; 15/12/2022
  7376                                  	; 25/06/2019
  7377 00000DB4 E987F8                  	jmp	SYS_RET_OK_clc
  7378                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7379                                  	; 15/12/2022
  7380                                  ;nono_jmp:
  7381                                  	;jmp	short nono
  7382                                  setsize:
  7383 00000DB7 83E903                  	SUB	CX,3			; size after length field
  7384 00000DBA 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7385 00000DBC 7302                    	JAE	short setsize2		; no
  7386 00000DBE 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7387                                  setsize2:
  7388 00000DC0 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7389                                  	;ADD	DI,2			; update index
  7390                                  	;ADD	SI,2
  7391                                  	; 06/01/2024
  7392 00000DC3 47                      	inc	di
  7393 00000DC4 47                      	inc	di
  7394 00000DC5 46                      	inc	si
  7395 00000DC6 46                      	inc	si
  7396 00000DC7 89C8                    	MOV	AX,CX
  7397 00000DC9 83C003                  	ADD	AX,3			; AX has the actual length
  7398 00000DCC EBDA                    	JMP	short OK_RETN 		; go move it
  7399                                  CHKNLS:
  7400 00000DCE 30E4                    	XOR	AH,AH
  7401                                  	;PUSH	AX			; save info type
  7402                                  	;POP	BP			; bp = info type
  7403                                  	; 06/01/2024
  7404 00000DD0 89C5                    	mov	bp,ax
  7405                                  	
  7406                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7407 00000DD2 B80014                  	mov     ax,1400h
  7408 00000DD5 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7409                                  			; Return: AL = 00h not installed, OK to install
  7410                                  			; 01h not installed, not OK
  7411                                  			; FFh installed
  7412 00000DD7 3CFF                    	CMP	AL,0FFH
  7413 00000DD9 7404                    	JZ	short NLSNXT		; in memory
  7414                                  
  7415                                  sizeerror:
  7416                                  	;error	error_invalid_function
  7417                                  	;mov	al,1
  7418 00000DDB B001                    	mov	al,error_invalid_function
  7419                                  	;jmp	SYS_RET_ERR
  7420                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7421                                  sys_ret_err_jmp2:
  7422 00000DDD EBBA                    	jmp	short SYS_RET_ERR_jmp
  7423                                  
  7424                                  NLSNXT: 
  7425                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7426 00000DDF B80214                  	mov     ax,1402h
  7427 00000DE2 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7428                                  			; BP = subfunction, BX = code page
  7429                                  			; DX = country code, DS:SI -> internal code page structure
  7430                                  			; ES:DI -> user buffer, CX = size of user buffer
  7431                                  			; Return: AL = status
  7432                                  			; 00h successful
  7433                                  			; else DOS error code
  7434                                  
  7435 00000DE4 3C00                    	CMP	AL,0			; success ?
  7436 00000DE6 7505                    	JNZ	short NLSERROR
  7437                                  	;mov	ax,[si+48h] ; 13/05/2019
  7438 00000DE8 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]
  7439                                  			; ax = sys code page id;smr;use ds;
  7440                                  			;BUGBUG;check whether DS is OK after the above calls
  7441 00000DEB EBC1                    	JMP	short GETDONE
  7442                                  seterr:
  7443                                  	; 15/12/2022
  7444                                  NLSERROR:
  7445                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7446                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7447                                  	;jmp	short sys_ret_err_jmp2
  7448                                  	; 15/12/2022
  7449 00000DED EBAA                    	jmp	short SYS_RET_ERR_jmp
  7450                                  
  7451                                  ;EndProc $GetExtCntry
  7452                                  
  7453                                  ; 13/05/2019 - Retro DOS v4.0
  7454                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7455                                  
  7456                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7457                                  ;----------------------------------------------------------------------------
  7458                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7459                                  ;
  7460                                  ;   System call format:
  7461                                  ;
  7462                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7463                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7464                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7465                                  ;	INT	21
  7466                                  ;
  7467                                  ;	ENTRY	(al) = n
  7468                                  ;		(bx) = code page
  7469                                  ;	EXIT	'C' clear
  7470                                  ;		  global code page is set	(set global code page)
  7471                                  ;		  (BX) = active code page id	(get global code page)
  7472                                  ;		  (DX) = system code page id	(get global code page)
  7473                                  ;		'C' set
  7474                                  ;		  (AX) = error code
  7475                                  
  7476                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7477                                  
  7478                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7479                                  	; DOSCODE:4BC9h
  7480                                  
  7481                                  _$GetSetCdPg:
  7482                                  
  7483                                  ;hkn; SS is DOSDATA
  7484                                  	;context DS
  7485                                  
  7486 00000DEF 16                      	push	ss
  7487 00000DF0 1F                      	pop	ds
  7488                                  
  7489                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7490 00000DF1 BE[0512]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7491                                  
  7492 00000DF4 3C01                    	CMP	AL,1		       ; get global code page
  7493 00000DF6 7512                    	JNZ	short setglpg 	       ; set global code page
  7494                                  	
  7495                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7496                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7497 00000DF8 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7498                                  					; get active code page id;smr;use ds
  7499                                  	;mov	dx,[si+48h]
  7500 00000DFB 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7501                                  				  	; get sys code page id;smr;use ds
  7502 00000DFE E884F6                  	call	Get_User_Stack
  7503                                  ;ASSUME DS:NOTHING
  7504                                  	;;mov	[si+2],bx
  7505                                  	;MOV	[SI+user_env.user_BX],BX ; update returned bx
  7506                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7507 00000E01 E85BFE                  	call    set_user_bx	; MOV [SI+user_env.user_BX],BX 
  7508                                  	;mov	[si+6],dx
  7509 00000E04 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7510                                  OK_RETURN:
  7511                                  	; 15/12/2022
  7512                                  	;transfer SYS_RET_OK
  7513 00000E07 E931F8                  	jmp	SYS_RET_OK
  7514                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7515                                  	;jmp	short nono_jmp
  7516                                  
  7517                                  ;hkn; ASSUME DS:DOSGROUP
  7518                                  ;ASSUME	DS:DOSDATA
  7519                                  
  7520                                  setglpg:
  7521 00000E0A 3C02                    	CMP	AL,2
  7522 00000E0C 752F                    	JNZ	short nomem
  7523                                  	
  7524                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7525                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7526 00000E0E 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7527                                  	
  7528                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7529 00000E11 B80014                  	mov     ax,1400h
  7530 00000E14 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7531                                  			; Return: AL = 00h not installed, OK to install
  7532                                  			; 01h not installed, not OK
  7533                                  			; FFh installed
  7534 00000E16 3CFF                    	CMP	AL,0FFH
  7535 00000E18 7523                    	JNZ	short nomem		; not in memory
  7536                                  
  7537                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7538 00000E1A B80114                  	mov     ax,1401h
  7539 00000E1D CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7540                                  			; DS:SI -> internal code page structure
  7541                                  			; BX = new code page, DX = country code???
  7542                                  			; Return: AL = status
  7543                                  			; 00h successful
  7544                                  			; else DOS error code
  7545                                  	;cmp	al,0
  7546 00000E1F 08C0                    	or	al,al			; success ?
  7547 00000E21 74E4                    	JZ	short OK_RETURN		; yes
  7548                                  
  7549 00000E23 3C41                    	CMP	AL,65			; set device code page failed
  7550 00000E25 75C6                    	JNZ	short seterr
  7551                                  	;MOV	AX,65
  7552                                  	; 06/01/2024
  7553 00000E27 98                      	cbw
  7554 00000E28 A3[2403]                	MOV	[EXTERR],AX
  7555                                  	;mov	byte [EXTERR_ACTION],6
  7556                                  	;mov	byte [EXTERR_CLASS],5
  7557                                  	;mov	byte [EXTERR_LOCUS],4
  7558 00000E2B C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7559 00000E30 C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7560 00000E35 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7561                                  	;transfer From_GetSet
  7562 00000E3A E90FF8                  	jmp	From_GetSet
  7563                                  
  7564                                  	; 15/12/2022
  7565                                  ;seterr:
  7566                                  	;;;transfer SYS_RET_ERR
  7567                                  	;;jmp	SYS_RET_ERR
  7568                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7569                                  	;jmp	short NLSERROR
  7570                                  
  7571                                  nomem:
  7572                                  	;error	error_invalid_function	; function not defined
  7573                                  	;mov	al,1
  7574 00000E3D B001                    	mov	al,error_invalid_function
  7575 00000E3F EBAC                    	jmp	short seterr
  7576                                  
  7577                                  ;EndProc $GetSetCdPg
  7578                                  
  7579                                  ; 09/01/2024
  7580                                  ; 13/05/2019 - Retro DOS v4.0
  7581                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7582                                  
  7583                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7584                                  ;----------------------------------------------------------------------------
  7585                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7586                                  ;
  7587                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7588                                  ;		drive.
  7589                                  ;
  7590                                  ;	This call returns the same info in the same registers (except for the
  7591                                  ;	FAT pointer) as the old FAT pointer calls
  7592                                  ;
  7593                                  ;	ENTRY	DL = Drive number
  7594                                  ;	EXIT	AX = Sectors per allocation unit
  7595                                  ;		   = -1 if bad drive specified
  7596                                  ;		On User Stack
  7597                                  ;		    BX = Number of free allocation units
  7598                                  ;		    DX = Total Number of allocation units on disk
  7599                                  ;		    CX = Sector size
  7600                                  
  7601                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7602                                  
  7603                                  _$GET_DRIVE_FREESPACE:
  7604                                  
  7605                                  ;hkn; SS is DOSDATA
  7606                                  	;context DS
  7607 00000E41 16                      	push	ss
  7608 00000E42 1F                      	pop	ds
  7609                                  
  7610 00000E43 88D0                    	MOV	AL,DL
  7611                                  	;invoke	GetThisDrv		; Get drive
  7612 00000E45 E8755C                  	call	GETTHISDRV
  7613                                  SET_AX_RET:
  7614 00000E48 7212                    	JC	short BADFDRV
  7615                                  	;invoke	DISK_INFO
  7616 00000E4A E8BB1E                  	call	DISK_INFO
  7617 00000E4D 87D3                    	XCHG	DX,BX
  7618                                  	;JC	short SET_AX_RET	; User FAILed to I 24
  7619                                  	; 06/01/2024
  7620 00000E4F 720B                    	jc	short BADFDRV
  7621 00000E51 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7622                                  DoSt:
  7623 00000E53 E82FF6                  	call	Get_User_Stack
  7624                                  ;ASSUME	DS:NOTHING
  7625                                  	;mov	[si+6],dx
  7626                                  	;;mov	[si+4],cx
  7627                                  	;;mov	[si+2],bx
  7628                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7629 00000E56 895406                  	MOV	[SI+user_env.user_DX],DX ; total clusters
  7630                                  	;MOV	[SI+user_env.user_CX],CX
  7631                                  	;MOV	[SI+user_env.user_BX],BX
  7632                                  	;;MOV	[SI+user_env.user_AX],AX
  7633                                  	;mov	[si],ax
  7634                                  	;;return
  7635                                  	;retn
  7636                                  	; 09/01/2024
  7637 00000E59 E9FEFD                  	jmp     gdrvfspc_ret    ; ax = sectors per cluster (modified)
  7638                                  
  7639                                  BADFDRV:
  7640                                  	; MSDOS 3.3
  7641                                  	;;mov	al,0Fh
  7642                                  	;mov	al,error_invalid_drive	; Assume error
  7643                                  
  7644                                  	; 13/05/2019 - Retro DOS v4.0
  7645                                  
  7646                                  	; MSDOS 6.0 & MSDOS 3.3
  7647                                  	;invoke	FCB_RET_ERR
  7648 00000E5C E8FBF7                  	call	FCB_RET_ERR
  7649                                  	
  7650 00000E5F B8FFFF                  	MOV	AX,-1
  7651 00000E62 EBEF                    	JMP	short DoSt
  7652                                  
  7653                                  ;EndProc $GET_DRIVE_FREESPACE
  7654                                  
  7655                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7656                                  ;----------------------------------------------------------------------------
  7657                                  ;**	$Get_DMA - Get Disk Transfer Address
  7658                                  ;
  7659                                  ;	ENTRY	none
  7660                                  ;	EXIT	ES:BX is current transfer address
  7661                                  ;	USES	all
  7662                                  
  7663                                  	; 09/01/2024
  7664                                  _$GET_DMA:
  7665 00000E64 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7666 00000E69 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7667 00000E6E E814F6                  	call	Get_User_Stack
  7668                                  	;mov	[si+2],bx
  7669                                  	;mov	[si+10h],cx
  7670                                  	; 09/01/2024
  7671                                  	;MOV	[SI+user_env.user_BX],BX
  7672 00000E71 894C10                  	MOV	[SI+user_env.user_ES],CX
  7673                                  	;retn
  7674                                  	; 09/01/2024
  7675 00000E74 E9E8FD                  	jmp	set_user_bx ; (PCDOS 7.1 IBMDOS.COM)
  7676                                  
  7677                                  ;**	$Set_DMA - Set Disk Transfer Address
  7678                                  ;----------------------------------------------------------------------------
  7679                                  ;	ENTRY	DS:DX is current transfer address
  7680                                  ;	EXIT	none
  7681                                  ;	USES	all
  7682                                  
  7683                                  _$SET_DMA:
  7684 00000E77 368916[2C03]            	MOV	[SS:DMAADD],DX
  7685 00000E7C 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7686 00000E81 C3                      	retn
  7687                                  
  7688                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7689                                  ;------------------------------------------------------------------------------
  7690                                  
  7691                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7692                                  ;-----------------------------------------------------
  7693                                  ;	ENTRY	none
  7694                                  ;	EXIT	(AL) = drive number
  7695                                  ;	USES	all
  7696                                  
  7697                                  _$GET_DEFAULT_DRIVE:
  7698 00000E82 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7699 00000E86 C3                      	retn
  7700                                  
  7701                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7702                                  ;-----------------------------------------------------
  7703                                  ;	ENTRY	(DL) = Drive number for new default drive
  7704                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7705                                  
  7706                                  _$SET_DEFAULT_DRIVE:
  7707 00000E87 88D0                    	MOV	AL,DL
  7708 00000E89 FEC0                    	INC	AL			; A=1, B=2...
  7709 00000E8B E8135C                  	call	GetVisDrv		; see if visible drive
  7710 00000E8E 7204                    	JC	short SETRET		; errors do not set
  7711 00000E90 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7712                                  
  7713                                  SETRET:
  7714 00000E94 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7715 00000E98 C3                      	retn
  7716                                  
  7717                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7718                                  ;----------------------------------------------------------------------------
  7719                                  
  7720                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7721                                  ;---------------------------------------------------
  7722                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7723                                  ;	contents of an interrupt vector.
  7724                                  ;
  7725                                  ;	ENTRY	(AL) = interrupt number
  7726                                  ;	EXIT	(ES:BX) = current interrupt vector
  7727                                  
  7728                                  _$GET_INTERRUPT_VECTOR:
  7729 00000E99 E82E00                  	CALL	RECSET
  7730 00000E9C 26C41F                  	LES	BX,[ES:BX]
  7731 00000E9F E8E3F5                  	call	Get_User_Stack
  7732                                  set_user_es_bx:
  7733                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7734                                  	;;mov	[si+2],bx
  7735                                  	;mov	[si+10h],es
  7736                                  	;MOV	[SI+user_env.user_BX],BX
  7737 00000EA2 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7738                                  	;retn
  7739 00000EA5 E9B7FD                  	jmp	set_user_bx
  7740                                  
  7741                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7742                                  ;---------------------------------------------------
  7743                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7744                                  ;	contents of an interrupt vector.
  7745                                  ;
  7746                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7747                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7748                                  ;	for explanation.
  7749                                  ;
  7750                                  ;	ENTRY	(AL) = interrupt number
  7751                                  ;		(ds:dx) = desired new vector value
  7752                                  ;	EXIT	none
  7753                                  ;	USES	all
  7754                                  
  7755                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7756                                  ; 13/05/2019 - Retro DOS v4.0
  7757                                  
  7758                                  _$SET_INTERRUPT_VECTOR:
  7759 00000EA8 E81F00                  	CALL	RECSET
  7760 00000EAB FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7761 00000EAC 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7762 00000EAF 268C5F02                	MOV	[ES:BX+2],DS
  7763 00000EB3 FB                      	STI
  7764                                  					; M004, M068 - Start
  7765                                  	; MSDOS 6.0
  7766 00000EB4 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7767                                  					; Q: was the previous call an int 21h
  7768                                  					;    exec call
  7769                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7770                                  	;jnz	short siv_1		; Y: go set count
  7771                                  	;retn				; N: return
  7772                                  	; 15/12/2022
  7773 00000EBA 740D                    	jz	short siv_2
  7774                                  siv_1:	
  7775 00000EBC 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7776 00000EC2 7505                    	jnz	short siv_2		 ; N: done
  7777                                  	; 20/09/2023
  7778 00000EC4 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
  7779                                  	;mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos
  7780                                  					 ; dispatcher to turn A20 Off before
  7781                                  					 ; returning to user.
  7782                                  siv_2:
  7783                                  	; 07/12/2022
  7784 00000EC9 C3                      	retn				; M004, M068 - End
  7785                                  	
  7786                                  RECSET:
  7787 00000ECA 31DB                    	XOR	BX,BX
  7788 00000ECC 8EC3                    	MOV	ES,BX
  7789 00000ECE 88C3                    	MOV	BL,AL
  7790 00000ED0 D1E3                    	SHL	BX,1
  7791 00000ED2 D1E3                    	SHL	BX,1
  7792 00000ED4 C3                      	retn
  7793                                  
  7794                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7795                                  ;-------------------------------------------------------------------------------------
  7796                                  
  7797                                  ;**	$Char_Oper - Manipulate Switch Character
  7798                                  ;
  7799                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7800                                  ;
  7801                                  ;	ENTRY	AL = function:
  7802                                  ;		    0 - read switch char
  7803                                  ;		    1 - set switch char (char in DL)
  7804                                  ;		    2 - read device availability
  7805                                  ;			Always returns available
  7806                                  ;		    3 - set device availability
  7807                                  ;			No longer supported (NOP)
  7808                                  ;	EXIT	(al) = 0xff iff error
  7809                                  ;		(al) != 0xff if ok
  7810                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7811                                  ;	USES	AL, DL
  7812                                  ;
  7813                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7814                                  ;		The character / is always returned for subfunction 0,
  7815                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7816                                  
  7817                                  ; 13/05/2019 - Retro DOS v4.0
  7818                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7819                                  
  7820                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7821                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7822                                  
  7823                                  _$CHAR_OPER:
  7824                                  	; MSDOS 6.0
  7825 00000ED5 08C0                    	or	al,al				; get switch?
  7826 00000ED7 B22F                    	mov	dl,'/'				; assume yes
  7827 00000ED9 7407                    	jz	short chop_1			; jump if yes
  7828 00000EDB 3C02                    	cmp	al,2				; check device availability?
  7829 00000EDD B2FF                    	mov	dl,-1				; assume yes
  7830 00000EDF 7401                    	jz	short chop_1			; jump if yes
  7831 00000EE1 C3                      	retn					; otherwise just quit
  7832                                  
  7833                                  ; subfunctions requiring return of value to user come here. DL holds
  7834                                  ; value to return
  7835                                  
  7836                                  chop_1:
  7837 00000EE2 E8A0F5                  	call	Get_User_Stack
  7838 00000EE5 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7839 00000EE8 C3                      	retn
  7840                                  
  7841                                  	; MSDOS 3.3
  7842                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7843                                  	;push	ss
  7844                                  	;pop	ds
  7845                                  	;cmp	al,1
  7846                                  	;jb	short chop_1
  7847                                  	;jz	short chop_2
  7848                                  	;cmp	al,3
  7849                                  	;jb	short chop_3
  7850                                  	;jz	short chop_5
  7851                                  	;mov	al,0FFh
  7852                                  	;retn
  7853                                  ;chop_1:
  7854                                  	;mov	dl,[chSwitch]
  7855                                  	;jmp	short chop_4
  7856                                  ;chop_2:
  7857                                  	;mov	[chSwitch],dl
  7858                                  	;retn
  7859                                  ;chop_3:
  7860                                  	;mov	dl, FFh
  7861                                  ;chop_4:
  7862                                  	;call	Get_User_Stack
  7863                                  	;mov	[si+6],dx
  7864                                  ;chop_5:
  7865                                  	;retn
  7866                                  
  7867                                  ;**	$GetExtendedError - Return Extended error code
  7868                                  ;----------------------------------------------------------------------------
  7869                                  ;	This function reads up the extended error info from the static
  7870                                  ;	variables where it was stored.
  7871                                  ;
  7872                                  ;	ENTRY	none
  7873                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7874                                  ;		BL = recommended action
  7875                                  ;		BH = class of error
  7876                                  ;		CH = locus of error
  7877                                  ;		ES:DI = may be pointer
  7878                                  ;	USES	ALL
  7879                                  
  7880                                  	; 09/01/2024
  7881                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7882                                  
  7883                                  _$GetExtendedError:
  7884 00000EE9 16                      	push	ss
  7885 00000EEA 1F                      	pop	ds
  7886 00000EEB A1[2403]                	MOV	AX,[EXTERR]
  7887 00000EEE C43E[2803]              	LES	DI,[EXTERRPT]
  7888 00000EF2 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7889 00000EF6 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7890 00000EFA E888F5                  	call	Get_User_Stack
  7891                                  	;mov	[si+0Ah],di
  7892 00000EFD 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7893                                  
  7894                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7895                                  	;;mov	[si+10h],es
  7896                                  	;MOV	[SI+user_env.user_ES],ES
  7897                                  	;;mov	[si+2],bx
  7898                                  	;MOV	[SI+user_env.user_BX],BX
  7899 00000F00 E89FFF                  	call	set_user_es_bx
  7900                                  
  7901                                  	;mov	[si+4],cx
  7902 00000F03 894C04                  	MOV	[SI+user_env.user_CX],CX
  7903                                  jmp_SYS_RET_OK:
  7904                                  	; 15/12/2022
  7905                                  	;jmp	SYS_RET_OK
  7906                                  	; 25/06/2019
  7907 00000F06 E935F7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7908                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7909                                  ;jmp_SYS_RET_OK:
  7910                                  	;jmp	SYS_RET_OK
  7911                                  
  7912                                  ; --------------------------------------------------------------------------
  7913                                  ; 09/01/2024
  7914                                  %if 0
  7915                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7916                                  	; DOSCODE:4CF3h
  7917                                  ;patch_or_unknown:
  7918                                  ;get_code_page:
  7919                                  	push    si
  7920                                  	mov     si, COUNTRY_CDPG
  7921                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7922                                  	mov     ax, [ss:si+6Ah]
  7923                                  	pop     si
  7924                                  	retn
  7925                                  %endif
  7926                                  ; --------------------------------------------------------------------------
  7927                                  
  7928                                  ; 29/04/2019 - Retro DOS v4.0
  7929                                  
  7930                                  ;BREAK	<ECS_call - Extended Code System support function>
  7931                                  ;---------------------------------------------------------------------------
  7932                                  ; Inputs:
  7933                                  ;	AL = 0	get lead byte table
  7934                                  ;		on return DS:SI has the table location
  7935                                  ;
  7936                                  ;	AL = 1	set / reset interim console flag
  7937                                  ;		DL = flag (00H or 01H)
  7938                                  ;		no return
  7939                                  ;
  7940                                  ;	AL = 2	get interim console flag
  7941                                  ;		on return DL = current flag value
  7942                                  ;
  7943                                  ;	AL = OTHER then error, and returns with:
  7944                                  ;		AX = error_invalid_function
  7945                                  ;
  7946                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  7947                                  ;	 SS:SP WILL BE PRESERVED!
  7948                                  ;---------------------------------------------------------------------------
  7949                                  
  7950                                  _$ECS_Call:
  7951 00000F09 08C0                    	or	al,al			; AL = 0 (get table)?
  7952                                  	;jnz	short _okok
  7953                                  	; 15/12/2022
  7954 00000F0B 7403                    	jz	short get_lbt
  7955                                  ;_okok:
  7956 00000F0D E92BF7                  	jmp	SYS_RET_OK
  7957                                  get_lbt:
  7958 00000F10 E872F5                  	call	Get_User_Stack		; *
  7959                                  
  7960                                  ;hkn; dbcs_table moved low to dosdata
  7961                                  	;mov	word [si+8],DBCS_TAB+2
  7962 00000F13 C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  7963                                  
  7964 00000F18 06                      	push	es
  7965                                  	;getdseg <es>			; es = DOSDATA
  7966 00000F19 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  7967                                  	;mov	[si+14],es
  7968 00000F1E 8C440E                  	mov	[SI+user_env.user_DS],es
  7969 00000F21 07                      	pop	es
  7970                                  
  7971                                  	; 15/12/2022
  7972 00000F22 EBE2                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  7973                                  ;_okok:
  7974                                  	; 15/12/2022	
  7975                                  	;;transfer SYS_RET_OK
  7976                                  	;jmp	short jmp_SYS_RET_OK
  7977                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7978                                  	;;jmp	SYS_RET_OK
  7979                                  	;jmp	short jmp_SYS_RET_OK
  7980                                  
  7981                                  ;============================================================================
  7982                                  ; PARSE.ASM, MSDOS 6.0, 1991
  7983                                  ;============================================================================
  7984                                  ; 19/07/2018 - Retro DOS v3.0
  7985                                  ; 15/05/2019 - Retro DOS v4.0
  7986                                  
  7987                                  ; System calls for parsing command lines
  7988                                  ;
  7989                                  ;   $PARSE_FILE_DESCRIPTOR
  7990                                  ;
  7991                                  ;   Modification history:
  7992                                  ;
  7993                                  ;       Created: ARR 30 March 1983
  7994                                  ;               EE PathParse 10 Sept 1983
  7995                                  ;
  7996                                  
  7997                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  7998                                  ;---------------------------------------------------------------------------
  7999                                  ; Inputs:
  8000                                  ;       DS:SI Points to a command line
  8001                                  ;       ES:DI Points to an empty FCB
  8002                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  8003                                  ;                   = 0 Parse stops if separator encountered
  8004                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  8005                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  8006                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  8007                                  ;                   = 0  "       "      "       - put blanks in FCB
  8008                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  8009                                  ;                   = 0  "       "      "        - put blanks in FCB
  8010                                  ; Function:
  8011                                  ;       Parse command line into FCB
  8012                                  ; Returns:
  8013                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  8014                                  ;       DS:SI points to first character after filename
  8015                                  ;---------------------------------------------------------------------------
  8016                                  
  8017                                  _$PARSE_FILE_DESCRIPTOR:
  8018 00000F24 E80C40                  	call	MAKEFCB
  8019 00000F27 56                      	PUSH    SI
  8020 00000F28 E85AF5                  	call	Get_User_Stack
  8021                                  	;pop	word [si+8]
  8022 00000F2B 8F4408                  	POP     word [SI+user_env.user_SI]
  8023 00000F2E C3                      	retn
  8024                                  
  8025                                  ;============================================================================
  8026                                  ; MISC.ASM, MSDOS 6.0, 1991
  8027                                  ;============================================================================
  8028                                  ; 19/07/2018 - Retro DOS v3.0
  8029                                  
  8030                                  ; 29/04/2019 - Retro DOS v4.0
  8031                                  
  8032                                  ;ENTRYPOINTSEG	EQU	0CH
  8033                                  ;MAXDIF		EQU	0FFFH
  8034                                  ;SAVEXIT 	EQU	10
  8035                                  ;WRAPOFFSET	EQU	0FEF0h
  8036                                  
  8037                                  ;
  8038                                  ;----------------------------------------------------------------------------
  8039                                  ;
  8040                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  8041                                  ;
  8042                                  ;	Return Stuff sort of like old get fat call
  8043                                  ;
  8044                                  ;	ENTRY	none
  8045                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8046                                  ;			GOD help anyone who tries to do ANYTHING except
  8047                                  ;			READ this ONE byte.
  8048                                  ;		DX = Total Number of allocation units on disk
  8049                                  ;		CX = Sector size
  8050                                  ;		AL = Sectors per allocation unit
  8051                                  ;		   = -1 if bad drive specified
  8052                                  ;	USES	all
  8053                                  ;
  8054                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  8055                                  ;
  8056                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  8057                                  ;
  8058                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  8059                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8060                                  ;			GOD help anyone who tries to do ANYTHING except
  8061                                  ;			READ this ONE byte.
  8062                                  ;		DX = Total Number of allocation units on disk
  8063                                  ;		CX = Sector size
  8064                                  ;		AL = Sectors per allocation unit
  8065                                  ;		   = -1 if bad drive specified
  8066                                  ;	USES	all
  8067                                  ;
  8068                                  ;----------------------------------------------------------------------------
  8069                                  ;
  8070                                  
  8071                                  _$SLEAZEFUNC:
  8072                                  	; 15/05/2019 - Retro DOS v4.0
  8073 00000F2F B200                    	MOV	DL,0
  8074                                  _$SLEAZEFUNCDL:
  8075 00000F31 16                      	push	ss
  8076 00000F32 1F                      	pop	ds
  8077                                  	
  8078 00000F33 88D0                    	MOV	AL,DL
  8079 00000F35 E8855B                  	call	GETTHISDRV		; Get CDS structure
  8080                                  SET_AL_RET:
  8081                                  	; MSDOS 3.3
  8082                                  	;;mov	al, 0Fh
  8083                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  8084                                  	
  8085                                  	; MSDOS 6.0 & MSDOS 3.3
  8086 00000F38 721E                    	JC	short BADSLDRIVE
  8087                                  
  8088 00000F3A E8CB1D                  	call	DISK_INFO
  8089                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  8090 00000F3D 7219                    	jc	short BADSLDRIVE
  8091 00000F3F 8826[9805]              	MOV	[FATBYTE],AH
  8092                                  
  8093                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  8094                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  8095                                  ; CALL AGAIN
  8096                                  
  8097 00000F43 BF[9805]                	MOV	DI,FATBYTE
  8098 00000F46 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  8099 00000F48 E83AF5                  	call	Get_User_Stack
  8100                                  	;mov	[si+4],cx
  8101                                  	;mov	[si+6],bx
  8102                                  	;mov	[si+2],di
  8103 00000F4B 894C04                  	MOV	[SI+user_env.user_CX],CX
  8104 00000F4E 895C06                  	MOV	[SI+user_env.user_DX],BX
  8105 00000F51 897C02                  	MOV	[SI+user_env.user_BX],DI
  8106                                  	
  8107                                  	;mov	[si+0Eh],ss
  8108 00000F54 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  8109                                  
  8110 00000F57 C3                      	retn
  8111                                  
  8112                                  BADSLDRIVE:
  8113 00000F58 E9FFF6                  	jmp	FCB_RET_ERR
  8114                                  
  8115                                  ;
  8116                                  ;----------------------------------------------------------------------------
  8117                                  ;
  8118                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8119                                  ;
  8120                                  ;	Returns location of DOS status for interrupt routines
  8121                                  ;									   ;
  8122                                  ;	ENTRY	none
  8123                                  ;	EXIT	(es:bx) = flag location
  8124                                  ;	USES	all
  8125                                  ;
  8126                                  ;----------------------------------------------------------------------------
  8127                                  ;
  8128                                  
  8129                                  _$GET_INDOS_FLAG:
  8130 00000F5B E827F5                          CALL	Get_User_Stack
  8131                                          ;MOV	WORD [SI+2],INDOS
  8132 00000F5E C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8133                                          ;MOV	[SI+10H],SS
  8134 00000F63 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8135 00000F66 C3                      	RETN 
  8136                                  
  8137                                  ;
  8138                                  ;----------------------------------------------------------------------------
  8139                                  ;
  8140                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8141                                  ;
  8142                                  ;	Return a pointer to interesting DOS variables This call is version
  8143                                  ;	dependent and is subject to change without notice in future versions.
  8144                                  ;	Use at risk.
  8145                                  ;
  8146                                  ;	ENTRY	none
  8147                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8148                                  ;	uses	ALL
  8149                                  ;
  8150                                  ;----------------------------------------------------------------------------
  8151                                  ;
  8152                                  
  8153                                  _$GET_IN_VARS:
  8154 00000F67 E81BF5                          CALL	Get_User_Stack
  8155                                          ;MOV	WORD [SI+2],SYSINITVAR
  8156                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8157 00000F6A C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8158                                          ;MOV	[SI+10H],SS
  8159 00000F6F 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8160 00000F72 C3                      	RETN
  8161                                  
  8162                                  ;
  8163                                  ;----------------------------------------------------------------------------
  8164                                  ;
  8165                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8166                                  ;
  8167                                  ;	Return pointer to drive parameter table for default drive
  8168                                  ;
  8169                                  ;	ENTRY	none
  8170                                  ;	EXIT	(ds:bx) = DPB address
  8171                                  ;	USES	all
  8172                                  ;
  8173                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8174                                  ;
  8175                                  ;	Return pointer to a specified drive parameter table
  8176                                  ;
  8177                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8178                                  ;	EXIT	(al) = 0 iff ok
  8179                                  ;		  (ds:bx) = DPB address
  8180                                  ;		(al) = -1 if bad drive
  8181                                  ;	USES	all
  8182                                  ;
  8183                                  ;----------------------------------------------------------------------------
  8184                                  ;
  8185                                  
  8186                                  ; 15/05/2019 - Retro DOS v4.0
  8187                                  
  8188                                  _$GET_DEFAULT_DPB:
  8189 00000F73 B200                    	MOV	DL,0
  8190                                  _$GET_DPB:
  8191 00000F75 16                      	push	ss
  8192 00000F76 1F                      	pop	ds
  8193                                  
  8194 00000F77 88D0                    	MOV	AL,DL
  8195 00000F79 E8415B                  	call	GETTHISDRV		; Get CDS structure
  8196 00000F7C 7222                    	JC	short ISNODRV 		; no valid drive
  8197 00000F7E C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8198                                  	;;test	word [es:di+43h],8000h
  8199                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8200                                  	;test	byte [es:di+44h],80h
  8201 00000F82 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8202 00000F87 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8203 00000F89 E88A03                  	call	ECritDisk
  8204 00000F8C E86B47                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8205 00000F8F E89F03                  	call	LCritDisk
  8206 00000F92 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8207                                  					;   have.
  8208 00000F94 E8EEF4                  	call	Get_User_Stack
  8209                                  	;mov	[si+2],bp
  8210 00000F97 896C02                  	MOV	[SI+user_env.user_BX],BP
  8211                                  	;mov	[si+0Eh],es
  8212 00000F9A 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8213 00000F9D 30C0                    	XOR	AL,AL
  8214 00000F9F C3                      	retn
  8215                                  ISNODRV:
  8216 00000FA0 B0FF                    	MOV	AL,-1
  8217 00000FA2 C3                      	retn
  8218                                  
  8219                                  ;
  8220                                  ;----------------------------------------------------------------------------
  8221                                  ;
  8222                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8223                                  ;
  8224                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8225                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8226                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8227                                  ;
  8228                                  ;	ENTRY	none
  8229                                  ;	EXIT	none
  8230                                  ;	USES	all
  8231                                  ;
  8232                                  ;----------------------------------------------------------------------------
  8233                                  ;
  8234                                  
  8235                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8236                                  	; DOSCODE:4D94h
  8237                                  _$DISK_RESET:
  8238                                  	; 15/05/2019 - Retro DOS v4.0
  8239 00000FA3 B0FF                    	mov	al,0FFh	; -1
  8240 00000FA5 16                      	push	ss
  8241 00000FA6 1F                      	pop	ds
  8242                                  	; 06/11/2022
  8243                                  	;MOV	AL,-1
  8244 00000FA7 E86C03                  	call	ECritDisk
  8245                                  	; MSDOS 6.0
  8246                                  	;;or	word [DOS34_FLAG],4
  8247                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8248 00000FAA 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8249 00000FAF E8C14A                  	call	FLUSHBUF
  8250                                  	; MSDOS 6.0
  8251                                  	;and	word [DOS34_FLAG],0FFFBh
  8252                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8253                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8254                                  	; 15/12/2022
  8255 00000FB2 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8256 00000FB7 C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8257                                  ;
  8258                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate.  This
  8259                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8260                                  ; let's do it.
  8261                                  ;
  8262                                  ; Invalidate 'last-buffer' used
  8263                                  ;
  8264 00000FBD BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8265 00000FC0 891E[2000]              	MOV	[LastBuffer+2],BX
  8266 00000FC4 891E[1E00]              	MOV	[LastBuffer],BX
  8267                                  
  8268                                  	; MSDOS 3.3 
  8269                                  	; IBMDOS.COM, Offset 1C66h
  8270                                  	;;;;
  8271                                  	;lds	si,[BUFFHEAD]
  8272                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8273                                  				; .buf_flags, AH = 0, reset/clear
  8274                                  ;DRST_1:
  8275                                  	;;mov	[si+4],ax
  8276                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8277                                  	;lds	si,[SI]
  8278                                  	;cmp	si,bx ; -1
  8279                                  	;je	short DRST_2
  8280                                  	;;mov	[si+4],ax
  8281                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8282                                  	;lds	si,[SI]
  8283                                  	;cmp	si,bx
  8284                                  	;jne	short DRST_1
  8285                                  	;;;;
  8286                                  ;DRST_2:
  8287 00000FC8 E86603                  	call	LCritDisk
  8288 00000FCB B8FFFF                  	MOV	AX,-1
  8289                                  	; 07/12/2022
  8290                                  	;mov	ax,0FFFFh
  8291                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8292 00000FCE 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8293 00000FCF B82011                  	mov     ax,1120h
  8294 00000FD2 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8295                                  			; DS = DOS CS
  8296                                  			; Return: CF clear (successful)
  8297 00000FD4 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8298                                  	
  8299 00000FD5 C3                      	retn
  8300                                  
  8301                                  	; 19/07/2018 - Retro DOS v3.0
  8302                                  
  8303                                  ;
  8304                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8305                                  ;
  8306                                  ;----------------------------------------------------------------------------
  8307                                  ;
  8308                                  ;**	$SetDPB - Create a DPB
  8309                                  ;
  8310                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8311                                  ;
  8312                                  ;	ENTRY	ES:BP Points to DPB
  8313                                  ;		DS:SI Points to BPB
  8314                                  ;	EXIT	DPB setup
  8315                                  ;	USES	ALL but BP, DS, ES
  8316                                  ;
  8317                                  ;----------------------------------------------------------------------------
  8318                                  ;
  8319                                  
  8320                                  ; 10/05/2019 - Retro DOS v4.0
  8321                                  
  8322                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8323                                  
  8324                                  ; MSDOS 6.0
  8325 00000FD6 0300                    word3:	dw	3			; M008 -- word value for divides
  8326                                  
  8327                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8328                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8329                                  
  8330                                  ;procedure   $SETDPB,NEAR
  8331                                  
  8332                                  _$SETDPB:
  8333 00000FD8 89EF                    	MOV	DI,BP
  8334 00000FDA 83C702                  	ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8335 00000FDD AD                      	LODSW
  8336 00000FDE AB                      	STOSW				; dpb_sector_size
  8337                                  	; MSDOS 6.0
  8338                                  	;cmp	byte [si+3],0
  8339 00000FDF 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8340 00000FE3 7507                    	JNZ	short yesfat			     ; yes		;AN000;
  8341                                  	;mov	byte [es:di+4],0
  8342 00000FE5 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8343 00000FEA EB70                    	JMP	short setend			     ; NO		;AN000;
  8344                                  
  8345                                  yesfat: ; 10/08/2018
  8346 00000FEC 89C2                    	MOV	DX,AX
  8347 00000FEE AC                      	LODSB
  8348                                  	;DEC	AL
  8349                                  	; 17/12/2022
  8350 00000FEF 48                      	dec	ax
  8351 00000FF0 AA                      	STOSB				; dpb_cluster_mask
  8352                                  	;INC	AL
  8353 00000FF1 40                      	inc	ax
  8354 00000FF2 30E4                    	XOR	AH,AH
  8355                                  LOG2LOOP:
  8356 00000FF4 A801                    	test	AL,1
  8357 00000FF6 7506                    	JNZ	short SAVLOG
  8358 00000FF8 FEC4                    	INC	AH
  8359 00000FFA D0E8                    	SHR	AL,1
  8360 00000FFC EBF6                    	JMP	SHORT LOG2LOOP
  8361                                  SAVLOG:
  8362 00000FFE 88E0                    	MOV	AL,AH
  8363 00001000 AA                      	STOSB				; dpb_cluster_shift
  8364 00001001 88C3                    	MOV	BL,AL
  8365 00001003 A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8366 00001004 AC                      	LODSB
  8367 00001005 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8368                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8369                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8370 00001006 88C7                    	MOV	BH,AL
  8371 00001008 AD                      	LODSW
  8372 00001009 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8373 0000100A B105                    	MOV	CL,5
  8374 0000100C D3EA                    	SHR	DX,CL			; Directory entries per sector
  8375 0000100E 48                      	DEC	AX
  8376 0000100F 01D0                    	ADD	AX,DX			; Cause Round Up
  8377 00001011 89D1                    	MOV	CX,DX
  8378 00001013 31D2                    	XOR	DX,DX
  8379 00001015 F7F1                    	DIV	CX
  8380 00001017 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8381 00001019 47                      	INC	DI
  8382 0000101A 47                      	INC	DI			; Skip dpb_first_sector
  8383 0000101B A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8384 0000101C AC                      	LODSB
  8385                                  	;mov	[es:bp+17h],al
  8386 0000101D 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8387 00001021 AD                      	LODSW				; Number of sectors in a FAT
  8388                                  	
  8389                                  	;;;
  8390                                  	;MSDOS 3.3
  8391                                  	;
  8392                                  	;STOSB		; DPB.FAT_SIZE
  8393                                  	;MUL	BH
  8394                                  	
  8395                                  	;MSDOS 6.0
  8396                                  	;
  8397 00001022 AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8398 00001023 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8399 00001025 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8400 00001027 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8401                                  	;;;
  8402                                  	
  8403                                  	;add	ax,[es:bp+6]
  8404 00001029 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8405 0000102D AB                      	STOSW				; dpb_dir_sector
  8406 0000102E 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8407                                  	;mov	[es:bp+0Bh],ax
  8408 00001030 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8409                                  	
  8410                                  	; MSDOS 6.0
  8411 00001034 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8412                                  	;;cmp	word [es:bp+0Dh],0
  8413                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8414                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8415                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8416                                  	; 15/12/2022
  8417                                  	; 28/07/2019
  8418 00001036 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8419 0000103A 09DB                    	or	bx,bx
  8420 0000103C 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8421                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8422                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8423                                  	
  8424                                  
  8425 0000103E 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8426                                  	;mov	bx,[si+8]
  8427 00001040 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8428                                  	;mov	dx,[si+10]
  8429 00001043 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8430 00001046 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8431 00001048 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8432 0000104B 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8433 0000104D 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8434                                  rott:					;AN000;;F.C. >32mb
  8435 0000104F F8                      	CLC				;AN000;;F.C. >32mb
  8436 00001050 D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8437 00001052 D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8438 00001054 E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8439                                  norot:					;AN000;
  8440                                  	; 15/12/2022
  8441                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8442 00001056 EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8443                                  normal_dpb:
  8444                                  	;;sub	ax,[es:bp+0Dh]
  8445                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8446                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8447                                  	; 15/12/2022
  8448                                  	; bx = [es:bp+DSKSIZ]
  8449                                  	;sub	ax,bx ; 28/07/2019
  8450                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8451                                  	; 15/12/2022
  8452 00001058 29C3                    	sub	bx,ax
  8453                                  	;NEG	AX			; Sectors in data area
  8454                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8455                                  	; 15/12/2022
  8456                                  	; CL = cluster shift
  8457                                  	; BX = number of data sectors 
  8458                                  	;SHR	AX,CL			; Div by sectors/cluster
  8459 0000105A D3EB                    	shr	bx,cl 
  8460                                  setend:
  8461                                  ;	M008 - CAS
  8462                                  ;
  8463                                  	; 15/12/2022
  8464 0000105C 43                      	inc	bx
  8465                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8466                                  ;
  8467                                  ;	There has been a bug in our fatsize calculation for so long
  8468                                  ;	  that we can't correct it now without causing some user to
  8469                                  ;	  experience data loss. There are even cases where allowing
  8470                                  ;	  the number of clusters to exceed the fats is the optimal
  8471                                  ;	  case -- where adding 2 more fat sectors would make the
  8472                                  ;	  data field smaller so that there's nothing to use the extra
  8473                                  ;	  fat sectors for.
  8474                                  ;
  8475                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8476                                  ;	  still report that there was a cluster left when the disk was
  8477                                  ;	  actually full. Very graceful failure for a corrupt system
  8478                                  ;	  configuration. There may be worse cases that were never
  8479                                  ;	  properly traced back to this bug. The problem cases only
  8480                                  ;	  occurred when partition sizes were very near FAT sector
  8481                                  ;	  rounding boundaries, which were rare cases.
  8482                                  ;
  8483                                  ;	Also, it's possible that some third-party partition program might
  8484                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8485                                  ;	  scheme. In this hypothetical case, the number of allocation
  8486                                  ;	  clusters which don't actually have FAT entries to represent
  8487                                  ;	  them might be larger and might create a more catastrophic
  8488                                  ;	  failure. So we'll provide the safeguard of limiting the
  8489                                  ;	  max_cluster to the amount that will fit in the FATs.
  8490                                  ;
  8491                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8492                                  
  8493                                  ;	make sure the number of fat sectors is actually enough to
  8494                                  ;	  hold that many clusters. otherwise, back the number of
  8495                                  ;	  clusters down
  8496                                  
  8497                                  	; 15/12/2022
  8498                                  	; bx = number of clusters
  8499                                  
  8500                                  	; 19/07/2018 - Retro DOS v3.0
  8501                                  	; MSDOS 6.0
  8502                                  	; 15/12/2022
  8503                                  	;mov	bx,ax			; remember calculated # clusters
  8504                                  
  8505                                  	; 01/08/2018 (MSDOS 3.3)
  8506                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8507                                  	;xor	ah,ah 
  8508                                  
  8509                                  	; 10/05/2019 - Retro DOS v4.0
  8510                                  	;mov	ax,[ES:BP+0Fh]
  8511 0000105D 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8512                                  
  8513                                  	;mul	word [es:bp+2]	
  8514 00001061 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8515 00001065 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8516 00001069 720D                    	jb	short setend_fat12
  8517 0000106B D1EA                    	shr	dx,1
  8518                                  
  8519                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8520                                  	; 15/12/2022
  8521                                  ;cs3 7/2/92
  8522 0000106D 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8523                                  					; than enough for the maximum FAT,
  8524                                  					; so go ahead and use the calculated
  8525                                  					; number of clusters.
  8526                                  ;cs3 7/2/92
  8527                                  
  8528 0000106F D1D8                    	rcr	ax,1			; find number of entries
  8529 00001071 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8530                                  ;					;  into 12-bit fatland?
  8531 00001074 7215                    	jb	short setend_faterr	; then go ahead and let the
  8532                                  ;					;  inconsistency pass through
  8533                                  ;					;  rather than lose data by
  8534                                  ;					;  correcting the fat type
  8535 00001076 EB0E                    	jmp	short setend_fat16
  8536                                  
  8537                                  setend_fat12:
  8538 00001078 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8539 0000107A 11D2                    	adc	dx,dx
  8540                                  
  8541                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8542                                  ;cs3 7/2/92
  8543                                  	; 15/12/2022
  8544 0000107C 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8545 0000107F 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8546                                  					; here. Check for it and use
  8547                                  					; the calculated size in this case.
  8548                                  ;cs3 7/2/92
  8549                                  
  8550 00001081 2EF736[D60F]            	div	word [cs:word3]
  8551                                  
  8552                                  setend_fat16:
  8553 00001086 48                      	dec	ax			; limit at 1
  8554 00001087 39D8                    	cmp	ax,bx			; is fat big enough?
  8555 00001089 7602                    	jbe	short setend_fat	; use max value that'll fit
  8556                                  
  8557                                  setend_faterr:
  8558 0000108B 89D8                    	mov	ax,bx			; use calculated value
  8559                                  
  8560                                  setend_fat:
  8561                                  
  8562                                  ;	now ax = maximum legal cluster
  8563                                  
  8564                                  ;	end M008
  8565                                  
  8566                                  	;mov	[es:bp+0Dh], ax
  8567 0000108D 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8568                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8569                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8570 00001091 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8571                                  					; Init so first ALLOC starts at
  8572                                  					; begining of FAT
  8573                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8574                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8575 00001097 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8576                                  
  8577 0000109D C3                      	retn
  8578                                  
  8579                                  ;EndProc $SETDPB
  8580                                  
  8581                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8582                                  
  8583                                  ;
  8584                                  ;----------------------------------------------------------------------------
  8585                                  ;
  8586                                  ;**	$Dup_PDB
  8587                                  ;
  8588                                  ; Inputs:   DX is new segment address of process
  8589                                  ;	    SI is end of new allocation block
  8590                                  ;
  8591                                  ;----------------------------------------------------------------------------
  8592                                  ;
  8593                                  
  8594                                  _$DUP_PDB:
  8595                                  
  8596                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8597                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8598                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8599                                  
  8600                                  	; MSDOS 3.3
  8601                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8602                                  	;MOV	DS,[CS:CurrentPDB]
  8603                                  
  8604                                  	; 15/05/2019 - Retro DOS v4.0
  8605                                  	; MSDOS 6.0
  8606 0000109E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8607 000010A3 C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8608 000010A8 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8609                                  
  8610 000010AC 56                      	PUSH	SI
  8611 000010AD EB0A                    	JMP	SHORT CreateCopy
  8612                                  
  8613                                  ;
  8614                                  ;----------------------------------------------------------------------------
  8615                                  ;
  8616                                  ; Inputs:
  8617                                  ;	DX = Segment number of new base
  8618                                  ; Function:
  8619                                  ;	Set up program base and copy term and ^C from int area
  8620                                  ; Returns:
  8621                                  ;	None
  8622                                  ; Called at DOS init
  8623                                  ;
  8624                                  ;----------------------------------------------------------------------------
  8625                                  ;
  8626                                  
  8627                                  ; 15/05/2019 - Retro DOS v4.0
  8628                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8629                                  
  8630                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8631                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8632                                  
  8633                                  _$CREATE_PROCESS_DATA_BLOCK:
  8634                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8635 000010AF E8D3F3                  	CALL	Get_User_Stack
  8636                                  	;mov	ds,[si+14h]
  8637 000010B2 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8638                                  	;push	word [2]
  8639 000010B5 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8640                                  CreateCopy:
  8641 000010B9 8EC2                    	MOV	ES,DX
  8642                                  
  8643 000010BB 31F6                    	XOR	SI,SI			; copy entire PDB
  8644 000010BD 89F7                    	MOV	DI,SI
  8645 000010BF B98000                  	MOV	CX,128
  8646 000010C2 F3A5                    	REP	MOVSW
  8647                                  
  8648                                  ; DOS 3.3 7/9/86
  8649                                  	;mov	cx,20
  8650                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8651                                  	; 15/12/2022
  8652 000010C4 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8653                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8654                                  	;mov	cx,FILPERPROC
  8655                                  
  8656                                  	;mov	di,18h
  8657 000010C6 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8658                                  	;;PUSH	DS ; * 15/05/2019
  8659                                  	;;lds	si,[34h]
  8660                                  	;LDS	SI,[PDB.JFN_Pointer]
  8661                                  	;REP	MOVSB
  8662                                  	;;POP	DS ; * 15/05/2019
  8663                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8664                                  	; 05/12/2022
  8665                                  	; (push ds then pop ds is not needed here!)
  8666                                  	;push	ds
  8667                                  	;lds	si,[34h]
  8668 000010C9 C5363400                	lds	si,[PDB.JFN_Pointer]
  8669 000010CD F3A4                    	rep	movsb
  8670                                  	;pop	ds
  8671                                  
  8672                                  ; DOS 3.3 7/9/86
  8673                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8674                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8675                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8676                                  
  8677 000010CF 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8678                                  
  8679                                  	;;test	byte [cs:CreatePDB],0FFh
  8680                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8681                                  	; 17/12/2022
  8682 000010D4 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8683                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8684 000010D8 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8685                                  
  8686                                  ; Here we set up for a new process...
  8687                                  
  8688                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8689                                  	;POP	DS
  8690                                  
  8691                                  	; MSDOS 6.0
  8692                                  	;;getdseg <ds>			; ds -> dosdata
  8693                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8694                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8695                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8696                                  	; 15/12/2022
  8697                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8698                                  
  8699 000010DA 31DB                    	XOR	BX,BX			; dup all jfns
  8700                                  	;mov	cx,20
  8701                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8702                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8703                                  	; 15/12/2022
  8704 000010DC B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8705                                  
  8706                                  Create_dup_jfn:
  8707 000010DE 06                      	PUSH	ES ;**			; save new PDB
  8708 000010DF E8B755                  	call	SFFromHandle		; get sf pointer
  8709 000010E2 B0FF                    	MOV	AL,-1			; unassigned JFN
  8710 000010E4 7224                    	JC	short CreateStash	; file was not really open
  8711                                  	;;test	word [es:di+5],1000h
  8712                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8713                                  	; 15/05/2019
  8714                                  	;test	byte [es:di+6],10h
  8715 000010E6 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8716 000010EB 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8717                                  
  8718                                  ; We do not inherit network file handles.
  8719                                  
  8720                                  	;mov	ah,[es:di+2]
  8721 000010ED 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8722                                  	;and	ah,0F0h
  8723 000010F1 80E4F0                  	AND	AH,SHARING_MASK
  8724                                  	;cmp	ah,70h
  8725 000010F4 80FC70                  	CMP	AH,SHARING_NET_FCB
  8726 000010F7 7411                    	jz	short CreateStash
  8727                                  
  8728                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8729                                  ; duplication operation.
  8730                                  
  8731 000010F9 893E[9E05]              	MOV	[THISSFT],DI
  8732 000010FD 8C06[A005]              	MOV	[THISSFT+2],ES
  8733 00001101 E85C19                  	call	DOS_DUP 		; signal duplication
  8734                                  
  8735                                  ; get the old sfn for copy
  8736                                  
  8737 00001104 E87555                  	call	pJFNFromHandle		; ES:DI is jfn
  8738 00001107 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8739                                  
  8740                                  ; Take AL (old sfn or -1) and stash it into the new position
  8741                                  
  8742                                  CreateStash:
  8743 0000110A 07                      	POP	ES ;**
  8744                                  	;mov	[es:bx+18h],al
  8745 0000110B 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8746 0000110F 43                      	INC	BX			; next jfn...
  8747 00001110 E2CC                    	LOOP	Create_dup_jfn
  8748                                  
  8749 00001112 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8750                                  	; 06/11/2022
  8751                                  	;mov	[es:16h],bx
  8752 00001116 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8753 0000111B 8C06[3003]              	MOV	[CurrentPDB],ES
  8754                                  	;MOV	DS,BX ; 28/07/2019
  8755                                  	; 07/12/2022
  8756                                  	;mov	ds,[cs:DosDSeg]
  8757                                  	; 15/12/2022
  8758                                  	; ds = [cs:DosDSeg]
  8759 0000111F C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8760                                  	;mov	ds,bx
  8761                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8762                                  	; 15/12/2022
  8763                                  	;mov	ds,bx
  8764                                  
  8765                                  ; end of new process create
  8766                                  
  8767                                  Create_PDB_cont:
  8768                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8769                                  
  8770                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8771                                  
  8772                                  	;; 28/07/2019
  8773                                  	;;push	ds
  8774                                  	;;mov	ds,[cs:DosDSeg]
  8775                                  	;mov	byte [CreatePDB],0
  8776                                  	;;pop	ds
  8777                                  
  8778                                  ; 05/12/2022
  8779                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8780                                  ;	; (push-pop ds is nonsense here! 
  8781                                  ;	;  but i am using same code with original MSDOS.SYS
  8782                                  ;	;  for address compatibility.)
  8783                                  ;	push	ds
  8784                                  ;	; ds = [cs:DosDSeg] !
  8785                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8786                                  ;	mov	byte [CreatePDB],0
  8787                                  ;	pop	ds
  8788                                  
  8789 00001124 58                      	POP	AX ;*
  8790                                  
  8791                                  	;entry	SETMEM
  8792                                  
  8793                                  	; 17/12/2022
  8794                                  	; cx = 0
  8795                                  
  8796                                  ;---------------------------------------------------------------------------
  8797                                  ; Inputs:
  8798                                  ;	AX = Size of memory in paragraphs
  8799                                  ;	DX = Segment
  8800                                  ; Function:
  8801                                  ;	Completely prepares a program base at the
  8802                                  ;	specified segment.
  8803                                  ; Called at DOS init
  8804                                  ; Outputs:
  8805                                  ;	DS = DX
  8806                                  ;	ES = DX
  8807                                  ;	[0] has INT int_abort
  8808                                  ;	[2] = First unavailable segment
  8809                                  ;	[5] to [9] form a long call to the entry point
  8810                                  ;	[10] to [13] have exit address (from int_terminate)
  8811                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8812                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8813                                  ; DX,BP unchanged. All other registers destroyed.
  8814                                  ;---------------------------------------------------------------------------
  8815                                  
  8816                                  SETMEM:
  8817                                  	;XOR	CX,CX
  8818                                  	; 17/12/2022
  8819                                  	; cx = 0
  8820 00001125 8ED9                    	MOV	DS,CX
  8821 00001127 8EC2                    	MOV	ES,DX
  8822                                  	;mov	si,88h
  8823 00001129 BE8800                  	MOV	SI,addr_int_terminate
  8824                                  	;mov	di,10 ; 0Ah
  8825 0000112C BF0A00                  	MOV	DI,SAVEXIT
  8826                                  	;MOV	CX,6
  8827                                  	; 15/12/2022
  8828 0000112F B106                    	mov	cl,6
  8829 00001131 F3A5                    	REP	MOVSW
  8830 00001133 26A30200                	MOV	[ES:2],AX
  8831 00001137 29D0                    	SUB	AX,DX
  8832 00001139 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8833 0000113C 7603                    	JBE	short HAVDIF
  8834 0000113E B8FF0F                  	MOV	AX,MAXDIF
  8835                                  HAVDIF:
  8836 00001141 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8837 00001144 BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8838 00001147 29C3                    	SUB	BX,AX
  8839 00001149 B104                    	MOV	CL,4
  8840 0000114B D3E0                    	SHL	AX,CL
  8841 0000114D 8EDA                    	MOV	DS,DX
  8842                                  
  8843                                  	; (MSDOS 6.0 note)
  8844                                  	;
  8845                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8846                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8847                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8848                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8849                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8850                                  	; making this equvalence valid for this particular case. If however
  8851                                  	; there is less than 64K remaining the address in BX:AX will not 
  8852                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8853                                  	; into the PSP.
  8854                                  	;
  8855                                  	; Therefore for the case where there is less than 64K remaining in 
  8856                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8857                                  	; requirements will not work. Call 5, however will continue to work
  8858                                  	; for all cases.
  8859                                  	;
  8860                                  
  8861                                  	;mov	[6],ax
  8862                                  	;mov	[8],bx
  8863                                  
  8864 0000114F A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8865 00001152 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8866                                  
  8867                                  	; 06/05/2019 - Retro DOS v4.0
  8868 00001156 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8869                                  					;    memory left
  8870 00001159 740C                    	je	short addr_ok		; Y: the above calculated address is
  8871                                  					;    OK
  8872                                  					; N: 
  8873                                  
  8874 0000115B C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8875 00001161 C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8876                                  addr_ok:
  8877                                  	;mov	word [0],20CDh
  8878 00001167 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8879                                  	;mov	byte [5],9Ah
  8880 0000116D C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8881                                  	;mov	word [50h],21CDh
  8882 00001172 C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8883                                  	;mov	byte [52h],0CBh
  8884 00001178 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8885                                  	;mov	word [34h],18h
  8886 0000117D C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8887                                  	;mov	word [36h],ds
  8888 00001183 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8889                                  	;mov	word [32h],20
  8890 00001187 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8891                                  ;
  8892                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8893                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8894                                  ; particular SFT.  We perform this by requiring that the server link together
  8895                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8896                                  ; initialize this pointer.
  8897                                  ;
  8898                                   	;mov	word [38h],-1
  8899 0000118D C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8900                                  	;mov	word [3Ah],-1
  8901 00001193 C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8902                                  
  8903                                  	; 06/05/2019
  8904                                  	; Set the real version number in the PSP - 5.00
  8905                                  
  8906                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8907                                  	; 07/12/2022
  8908 00001199 26C70640000500          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8909                                  
  8910 000011A0 C3                      	retn
  8911                                  
  8912                                  ; 29/04/2019 - Retro DOS v4.0
  8913                                  
  8914                                  ;BREAK <$GSetMediaID -- get set media ID>
  8915                                  
  8916                                  ;---------------------------------------------------------------------------
  8917                                  ; Inputs:
  8918                                  ;	BL= drive number as defined in IOCTL
  8919                                  ;	AL= 0 get media ID
  8920                                  ;	    1 set media ID
  8921                                  ;	DS:DX= buffer containing information
  8922                                  ;		DW  0  info level (set on input)
  8923                                  ;		DD  ?  serial #
  8924                                  ;		DB  11 dup(?)  volume id
  8925                                  ;		DB   8 dup(?)  file system type
  8926                                  ; Function:
  8927                                  ;	Get or set media ID
  8928                                  ; Returns:
  8929                                  ;	carry clear, DS:DX is filled
  8930                                  ;	carry set, error
  8931                                  ;---------------------------------------------------------------------------
  8932                                  
  8933                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8934                                  _$GSetMediaID:
  8935                                  	; RAWIO - GET_MEDIA_ID
  8936 000011A1 B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  8937 000011A4 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  8938 000011A6 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  8939                                  	;cmp	al,1		      ;AN000;MS.; set ?
  8940                                  	;jne	short errorfunc	      ;AN000;MS.; no
  8941                                  	; 15/12/2022
  8942 000011A8 FEC8                    	dec	al
  8943 000011AA 7507                    	jnz	short errorfunc ; al > 1
  8944                                  	; RAWIO - SET_MEDIA_ID
  8945                                  	;mov	cx,0846h	      ;AN001;MS.;
  8946                                  	; 15/12/2022
  8947 000011AC B146                    	mov	cl,46h	; cx = 0846h 
  8948                                  doioctl:			      ;AN000;
  8949 000011AE B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  8950                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  8951                                  	;call	_$IOCTL
  8952                                  	;retn			      ;AN000;MS.;
  8953                                  	; 15/12/2022
  8954 000011B0 E9E910                  	jmp	_$IOCTL
  8955                                  errorfunc:			      ;AN000;
  8956                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  8957                                  	;mov	al,1
  8958 000011B3 B001                    	mov	al,error_invalid_function
  8959 000011B5 E98CF4                  	jmp	SYS_RET_ERR
  8960                                  
  8961                                  ; 16/05/2019 - Retro DOS v4.0
  8962                                  
  8963                                  ;============================================================================
  8964                                  ; MISC2.ASM, MSDOS 6.0, 1991
  8965                                  ;============================================================================
  8966                                  ; 20/07/2018 - Retro DOS v3.0
  8967                                  ; 29/04/2019 - Retro DOS v4.0
  8968                                  
  8969                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  8970                                  ;----------------------------------------------------------------------------
  8971                                  ;
  8972                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  8973                                  ;	     Strings of different lengths don't match.
  8974                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  8975                                  ;   Outputs: Z if strings same, NZ if different
  8976                                  ;   Registers modified: NONE
  8977                                  ;----------------------------------------------------------------------------
  8978                                  
  8979                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8980                                  StrCmp:
  8981 000011B8 56                      	push	si
  8982 000011B9 57                      	push	di
  8983 000011BA 50                      	push	ax
  8984                                  
  8985                                  Cmplp:
  8986 000011BB AC                      	LODSB
  8987 000011BC E8AD3E                  	call	UCase			; convert to upper case
  8988 000011BF E8FF3E                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  8989 000011C2 88C4                    	MOV	AH,AL
  8990 000011C4 268A05                  	MOV	AL,[ES:DI]
  8991 000011C7 47                      	INC	DI
  8992 000011C8 E8A13E                  	call	UCase			; convert to upper case
  8993 000011CB E8F33E                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  8994 000011CE 38C4                    	CMP	AH,AL
  8995 000011D0 7504                    	JNZ	short PopRet		; Strings dif
  8996                                  
  8997 000011D2 08C0                    	OR	AL,AL
  8998 000011D4 75E5                    	JNZ	short Cmplp		; More string
  8999                                  PopRet:
  9000 000011D6 58                      	pop	ax
  9001 000011D7 5F                      	pop	di
  9002 000011D8 5E                      	pop	si
  9003 000011D9 C3                      	retn
  9004                                  
  9005                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  9006                                  ;----------------------------------------------------------------------------
  9007                                  ;
  9008                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  9009                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  9010                                  ;	characters.
  9011                                  ;
  9012                                  ;   Inputs:	DS:SI - pointer to source string
  9013                                  ;		ES:DI - pointer to destination string
  9014                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  9015                                  ;		DS:SI point byte after nul byte at end of source string
  9016                                  ;   Registers modified: SI,DI
  9017                                  ;----------------------------------------------------------------------------
  9018                                  
  9019                                  StrCpy:
  9020 000011DA 50                      	push	ax
  9021                                  CPYLoop:
  9022 000011DB AC                      	LODSB
  9023 000011DC E88D3E                  	call	UCase			; convert to upper case
  9024 000011DF E8DF3E                  	call	PATHCHRCMP		; convert / to \ ;
  9025 000011E2 AA                      	STOSB
  9026                                  
  9027 000011E3 08C0                    	OR	AL,AL
  9028 000011E5 75F4                    	JNZ	short CPYLoop
  9029 000011E7 58                      	pop	ax
  9030 000011E8 C3                      	retn
  9031                                  
  9032                                  ;----------------------------------------------------------------------------
  9033                                  ; Procedure Name : FStrCpy
  9034                                  ;----------------------------------------------------------------------------
  9035                                  
  9036                                  FStrCpy:
  9037 000011E9 50                      	push	ax
  9038                                  FCPYLoop:
  9039 000011EA AC                      	LODSB
  9040 000011EB AA                      	STOSB
  9041 000011EC 08C0                    	OR	AL,AL
  9042 000011EE 75FA                    	JNZ	short FCPYLoop
  9043 000011F0 58                      	pop	ax
  9044 000011F1 C3                      	retn
  9045                                  
  9046                                  ; 20/07/2018 - Retro DOS v3.0
  9047                                  ;----------------------------------------------------------------------------
  9048                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  9049                                  ;----------------------------------------------------------------------------
  9050                                  ;
  9051                                  ;UCase:	
  9052                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  9053                                  ;	retn
  9054                                  
  9055                                  ;Break <StrLen - compute length of string ES:DI>
  9056                                  ;----------------------------------------------------------------------------
  9057                                  ;**	StrLen - Compute Length of String
  9058                                  ;
  9059                                  ;	StrLen computes the length of a string, including the trailing 00
  9060                                  ;
  9061                                  ;	ENTRY	(es:di) = address of string
  9062                                  ;	EXIT	(cx) = size of string
  9063                                  ;	USES	cx, flags
  9064                                  ;----------------------------------------------------------------------------
  9065                                  
  9066                                  StrLen:
  9067 000011F2 57                      	push	di
  9068 000011F3 50                      	push	ax
  9069                                  	;MOV	CX,-1
  9070 000011F4 B9FFFF                  	mov	cx,65535
  9071 000011F7 30C0                    	XOR	AL,AL
  9072 000011F9 F2AE                    	REPNE	SCASB
  9073 000011FB F7D1                    	NOT	CX
  9074 000011FD 58                      	pop	ax
  9075 000011FE 5F                      	pop	di
  9076 000011FF C3                      	retn
  9077                                  
  9078                                  ;----------------------------------------------------------------------------
  9079                                  ;**	DStrLen - Compute Length of String
  9080                                  ;
  9081                                  ;	ENTRY	(ds:si) = address of string
  9082                                  ;	EXIT	(cx) = size of string, including trailing NUL
  9083                                  ;	USES	cx, flags
  9084                                  ;----------------------------------------------------------------------------
  9085                                  
  9086                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  9087 00001200 E80300                  	CALL	XCHGP
  9088 00001203 E8ECFF                  	CALL	StrLen
  9089                                  	;CALL	XCHGP
  9090                                  	;retn
  9091                                  	; 18/12/2022
  9092                                  	;jmp	short XCHGP
  9093                                  
  9094                                  ;----------------------------------------------------------------------------
  9095                                  ;**	XCHGP - Exchange Source and Destination Pointers
  9096                                  ;
  9097                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  9098                                  ;
  9099                                  ;	ENTRY	none
  9100                                  ;	EXIT	pairs exchanged
  9101                                  ;	USES	SI, DI, DS, ES
  9102                                  ;----------------------------------------------------------------------------
  9103                                  
  9104                                  XCHGP:
  9105 00001206 1E                      	push	ds
  9106 00001207 06                      	push	es
  9107 00001208 1F                      	pop	ds
  9108 00001209 07                      	pop	es
  9109 0000120A 87F7                    	XCHG	SI,DI
  9110                                  xchgp_retn:
  9111 0000120C C3                      	retn
  9112                                  
  9113                                  ;Break	<Idle - wait for a specified amount of time>
  9114                                  ;----------------------------------------------------------------------------
  9115                                  ;
  9116                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  9117                                  ;   	   we spin until RetryLoop is exhausted.
  9118                                  ;
  9119                                  ;   Inputs:	RetryLoop is the number of times we spin
  9120                                  ;   Outputs:	Wait
  9121                                  ;   Registers modified: none
  9122                                  ;----------------------------------------------------------------------------
  9123                                  
  9124                                  Idle:
  9125                                  	;test	byte [SS:FSHARING],0FFh
  9126 0000120D 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9127                                  	;retnz
  9128 00001213 75F7                    	jnz	short xchgp_retn
  9129                                  	;SAVE	<CX>
  9130 00001215 51                      	push	cx
  9131 00001216 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9132 0000121B E308                    	JCXZ	Idle3
  9133                                  Idle1:	
  9134 0000121D 51                      	PUSH	CX
  9135 0000121E 31C9                    	XOR	CX,CX
  9136                                  Idle2:	
  9137 00001220 E2FE                    	LOOP	Idle2
  9138 00001222 59                      	POP	CX
  9139 00001223 E2F8                    	LOOP	Idle1
  9140                                  Idle3:	
  9141                                  	;RESTORE <CX>
  9142 00001225 59                      	pop	cx
  9143 00001226 C3                      	retn
  9144                                  
  9145                                  ;Break	<TableDispatch - dispatch to a table>
  9146                                  ;----------------------------------------------------------------------------
  9147                                  ;
  9148                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9149                                  ;   routine. Preserve all input registers to the routine.
  9150                                  ;
  9151                                  ;   Inputs:	Push	return address
  9152                                  ;		Push	Table address
  9153                                  ;		Push	index (byte)
  9154                                  ;   Outputs:	appropriate routine gets jumped to.
  9155                                  ;		return indicates invalid index
  9156                                  ;   Registers modified: none.
  9157                                  ;----------------------------------------------------------------------------
  9158                                  
  9159                                  struc TFrame	 ; TableFrame
  9160 00000000 ????                    .OldBP:	 resw 1  ; 0
  9161 00000002 ????                    .OldRet: resw 1  ; 2
  9162 00000004 ??                      .Index:	 resb 1  ; 4
  9163 00000005 ??                      .Pad:	 resb 1  ; 5  
  9164 00000006 ????                    .Tab:	 resw 1  ; 6
  9165 00000008 ????                    .NewRet: resw 1  ; 8
  9166                                  endstruc
  9167                                  
  9168                                  TableDispatch:
  9169 00001227 55                      	PUSH	BP
  9170 00001228 89E5                    	MOV	BP,SP
  9171 0000122A 53                      	PUSH	BX			; save BX
  9172                                  	;mov	bx,[bp+6]
  9173 0000122B 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9174 0000122E 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9175                                  	;cmp	[bp+4],bl
  9176 00001231 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9177 00001234 7317                    	JAE	short TableError	; yes
  9178                                  	;mov	bl,[bp+4]
  9179 00001236 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9180 00001239 30FF                    	XOR	BH,BH			; convert to word
  9181 0000123B D1E3                    	SHL	BX,1			; convert to word pointer
  9182 0000123D 43                      	INC	BX			; point past first length byte
  9183                                  	; 17/08/2018
  9184                                  	;add	bx,[bp+6]
  9185 0000123E 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9186 00001241 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9187                                  	;mov	[bp+6],bx
  9188 00001244 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9189 00001247 5B                      	POP	BX			; restore BX
  9190 00001248 5D                      	POP	BP			; restore BP
  9191 00001249 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9192 0000124C C3                      	retn				; do operation
  9193                                  TableError:
  9194 0000124D 5B                      	POP	BX			; restore BX
  9195 0000124E 5D                      	POP	BP			; restore BP
  9196 0000124F C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9197                                  
  9198                                  
  9199                                  ;Break	<TestNet - determine if a CDS is for the network>
  9200                                  ;----------------------------------------------------------------------------
  9201                                  ;
  9202                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9203                                  ;	network CDS. This will handle NULL cds also.
  9204                                  ;
  9205                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9206                                  ;   Outputs:	ES:DI = ThisCDS
  9207                                  ;		carry Set => network
  9208                                  ;		carry Clear => local
  9209                                  ;   Registers modified: none.
  9210                                  ;----------------------------------------------------------------------------
  9211                                  
  9212                                  TestNet:
  9213                                  	;LES	DI,[CS:THISCDS]
  9214                                  
  9215                                  	; 16/05/2019 - Retro DOS v4.0
  9216 00001252 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9217 00001257 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9218 0000125C 83FFFF                  	CMP	DI,-1
  9219 0000125F 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9220                                  	;;test	word [es:di+43h],8000h
  9221                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9222                                  	;test	byte [es:di+44h],80h
  9223 00001261 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9224 00001266 7501                    	JNZ	short CMCRet		; jump has carry clear
  9225 00001268 C3                      	retn				; carry is clear
  9226                                  CMCRet: 
  9227 00001269 F5                      	CMC
  9228 0000126A C3                      	retn
  9229                                  
  9230                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9231                                  ;----------------------------------------------------------------------------
  9232                                  ;
  9233                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9234                                  ;	network file.
  9235                                  ;
  9236                                  ;   Inputs:	ES:DI point to SFT
  9237                                  ;   Outputs:	Zero set if not network sft
  9238                                  ;		zero reset otherwise
  9239                                  ;		Carry CLEAR!!!
  9240                                  ;   Registers modified: none.
  9241                                  ;----------------------------------------------------------------------------
  9242                                  
  9243                                  IsSFTNet:
  9244                                  	;;test	word [es:di+5],8000h
  9245                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9246                                  	; 16/05/2019 
  9247                                  	;test	byte [es:di+6],80h
  9248 0000126B 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9249 00001270 C3                      	retn
  9250                                  
  9251                                  ;Break	<FastInit - Initialize FastTable entries >
  9252                                  ;----------------------------------------------------------------------------
  9253                                  ;   DOS 4.00   2/9/87
  9254                                  ;   FastInit  - initialize the FASTXXX routine entry
  9255                                  ;		  in the FastTable
  9256                                  ;
  9257                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9258                                  ;		DS:SI = address of FASTXXX routine entry
  9259                                  ;		   SI = -1 for query only
  9260                                  ;   Outputs:	Carry flag clear, if success
  9261                                  ;		Carry flag set,   if failure
  9262                                  ;
  9263                                  ;
  9264                                  ;----------------------------------------------------------------------------
  9265                                  
  9266                                  ;Procedure FastInit,NEAR
  9267                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9268                                  
  9269                                  ;	; MSDOS 3.3
  9270                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9271                                  ;FastInit:
  9272                                  ;	mov	di,FastTable ; FastOpenTable
  9273                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9274                                  ;	mov	bx,cs			; get DOS segment
  9275                                  ;	cmp	ax,bx			; first time installed ?	
  9276                                  ;	je	short ok_install	; yes
  9277                                  ;	stc				; set carry
  9278                                  ;	retn				; (cf=1 means) already installed !
  9279                                  ;
  9280                                  ;ok_install:
  9281                                  ;	mov	bx,FastTable ; FastOpenTable
  9282                                  ;	mov	cx,ds
  9283                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9284                                  ;	mov	[cs:bx+4],cx
  9285                                  ;	mov	[cs:bx+2],si
  9286                                  ;	retn
  9287                                  
  9288                                  ; 16/05/2019 - Retro DOS v4.0
  9289                                  
  9290                                  FastInit:
  9291                                  	; MSDOS 6.0
  9292                                  	;hkn; set up es to dosdataseg.
  9293 00001271 06                      	push	es
  9294                                  	;getdseg <es>			; es -> dosdata
  9295 00001272 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9296                                  
  9297                                  	;hkn; FastTable is in DOSDATA
  9298 00001277 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9299 0000127A 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9300 0000127B 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9301 0000127D D1E3                    	SHL	BX,1			;AN000;FO.;; times 4 , each entry is DWORD
  9302 0000127F D1E3                    	SHL	BX,1			;AN000;FO.
  9303 00001281 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9304 00001283 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9305                                  fcheck: 				;AN000;
  9306 00001287 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9307 00001289 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9308 0000128B 7407                    	JZ	short ok_install	;AN000;FO.;; yes
  9309 0000128D 09C0                    	OR	AX,AX			;AN000;FO.;
  9310 0000128F 7403                    	JZ	short ok_install	;AN000;FO.;
  9311 00001291 F9                      	STC				;AN000;FO.;; already installed !
  9312 00001292 EB17                    	JMP	SHORT FSret		;AN000;FO. set carry
  9313                                  ok_install:				;AN000;
  9314 00001294 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9315 00001297 7412                    	JZ	short FSret		;AN000;FO.; yes
  9316 00001299 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9317 0000129B 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9318 0000129F 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9319                                  
  9320                                  ;hkn; FastFlg moved to DOSDATA
  9321 000012A2 BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9322 000012A5 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9323                                  	;or	byte [es:di],80h
  9324 000012A7 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9325                                  FSret:					;AN000;
  9326 000012AB 07                      	pop	es
  9327 000012AC C3                      	retn				;AN000;FO.
  9328                                  
  9329                                  ;EndProc FastInit
  9330                                  
  9331                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9332                                  ;----------------------------------------------------------------------------
  9333                                  ;   DOS 3.3   6/10/86
  9334                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9335                                  ;
  9336                                  ;   Inputs:	None
  9337                                  ;   Outputs:	AX = -1 and carry flag set
  9338                                  ;
  9339                                  ;   Registers modified: none.
  9340                                  ;----------------------------------------------------------------------------
  9341                                  
  9342                                  FastRet:
  9343                                  	;mov	ax,-1
  9344                                  	;stc
  9345                                  	;retf
  9346 000012AD F9                      	STC
  9347 000012AE 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9348 000012B0 CB                      	RETF
  9349                                  
  9350                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9351                                  ;----------------------------------------------------------------------------
  9352                                  ;   DOS 3.3   6/10/86
  9353                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9354                                  ;
  9355                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9356                                  ;   Outputs:	same output as $OPEN
  9357                                  ;
  9358                                  ;----------------------------------------------------------------------------
  9359                                  
  9360                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9361                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9362                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9363                                  
  9364                                  NLS_OPEN:
  9365                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9366                                  ;	MOV	BYTE [CPSWFLAG],0
  9367                                  ;	PUSH	BX		 ; save current state
  9368                                  
  9369 000012B1 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9370 000012B3 E84D5C                  	call	_$OPEN
  9371                                  
  9372                                  ;	POP	BX		 ; restore current state
  9373                                  ;	MOV	[CPSWFLAG],BL
  9374                                  	
  9375 000012B6 C3                      	RETN
  9376                                  
  9377                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9378                                  ;----------------------------------------------------------------------------
  9379                                  ;   DOS 3.3   6/10/86
  9380                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9381                                  ;
  9382                                  ;   Inputs:	BP = open mode
  9383                                  ;   Outputs:	same output as $LSEEK
  9384                                  ;
  9385                                  ;----------------------------------------------------------------------------
  9386                                  
  9387                                  ; 16/05/2019 - Retro DOS v4.0
  9388                                  
  9389                                  NLS_LSEEK:
  9390 000012B7 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9391 000012BC 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9392 000012C1 E81000                  	CALL	Fake_User_Stack
  9393 000012C4 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9394 000012C6 E8E755                  	call	_$LSEEK
  9395 000012C9 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9396 000012CE 368F06[8405]            	POP	word [SS:USER_SP]
  9397 000012D3 C3                      	RETN
  9398                                  
  9399                                  ;Break	<Fake_User_Stack - save user stack>
  9400                                  ;----------------------------------------------------------------------------
  9401                                  ;   DOS 3.3   6/10/86
  9402                                  ;   Fake_User_Stack - save user stack pointer
  9403                                  ;
  9404                                  ;----------------------------------------------------------------------------
  9405                                  
  9406                                  Fake_User_Stack:
  9407 000012D4 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9408 000012D8 36A3[8405]              	MOV	[SS:USER_SP],AX
  9409 000012DC 8CD0                    	MOV	AX,SS
  9410 000012DE 36A3[8605]              	MOV	[SS:USER_SS],AX
  9411 000012E2 C3                      	RETN
  9412                                  
  9413                                  ;Break	<GetDevList - get device header list pointer>
  9414                                  ;----------------------------------------------------------------------------
  9415                                  ;   DOS 3.3   7/25/86
  9416                                  ;   GetDevList - get device header list pointer
  9417                                  ;
  9418                                  ;   Output: AX:BX points to the device header list
  9419                                  ;----------------------------------------------------------------------------
  9420                                  
  9421                                  GetDevList:
  9422                                  	; 16/05/2019 - Retro DOS v4.0
  9423 000012E3 BE[280D]                	MOV	SI,SysInitTable
  9424 000012E6 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9425 000012EB C534                    	LDS	SI,[SI]
  9426                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9427 000012ED 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9428                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9429 000012F0 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9430 000012F3 C3                      	RETN
  9431                                  
  9432                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC   >
  9433                                  ;----------------------------------------------------------------------------
  9434                                  ;   DOS 3.3   7/25/86
  9435                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9436                                  ;
  9437                                  ;   Inputs:	BP = function code 0CH
  9438                                  ;   Outputs:	same output as generic $IOCTL
  9439                                  ;
  9440                                  ;----------------------------------------------------------------------------
  9441                                  
  9442                                  NLS_IOCTL:
  9443                                  	; 16/05/2019 - Retro DOS v4.0
  9444 000012F4 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9445 000012F9 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9446 000012FE E8D3FF                  	CALL	Fake_User_Stack
  9447 00001301 89E8                    	MOV	AX,BP	     ; set up correct interface for $LSEEK
  9448 00001303 E8960F                  	call	_$IOCTL
  9449 00001306 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9450 0000130B 368F06[8405]            	POP	word [SS:USER_SP]
  9451 00001310 C3                      	RETN
  9452                                  
  9453                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9454                                  ;----------------------------------------------------------------------------
  9455                                  ;   DOS 3.3   7/25/86
  9456                                  ;   NLS_GETEXT	-
  9457                                  ;
  9458                                  ;   Inputs:	none
  9459                                  ;   Outputs:	AX = extended error
  9460                                  ;
  9461                                  ;----------------------------------------------------------------------------
  9462                                  
  9463                                  NLS_GETEXT:
  9464                                  	; 16/05/2019 - Retro DOS v4.0
  9465 00001311 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9466                                  	; 23/09/2023
  9467                                  MSG_RETRIEVAL:
  9468 00001315 C3                      	RETN
  9469                                  
  9470                                  ; 29/04/2019 - Retro DOS v4.0
  9471                                  
  9472                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9473                                  
  9474                                  ;----------------------------------------------------------------------------
  9475                                  ;   DOS 4.00
  9476                                  ;
  9477                                  ;   Inputs:	DL=0 get extended error message addr
  9478                                  ;		  =1 set extended error message addr
  9479                                  ;		  =2 get parser error message addr
  9480                                  ;		  =3 set parser error message addr
  9481                                  ;		  =4 get critical error message addr
  9482                                  ;		  =5 set critical error message addr
  9483                                  ;		  =6 get file system error message addr
  9484                                  ;		  =7 set file system error message addr
  9485                                  ;		  =8 get address for code reduction
  9486                                  ;		  =9 set address for code reduction
  9487                                  ;   Function:	get/set message address
  9488                                  ;   Outputs:	ES:DI points to addr when get
  9489                                  ;----------------------------------------------------------------------------
  9490                                  
  9491                                  ;Procedure MSG_RETRIEVAL,NEAR
  9492                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9493                                  
  9494                                  ; 23/09/2023
  9495                                  ;MSG_RETRIEVAL:
  9496                                  
  9497                                  ;;	NOTE:  This function lives in command.com resident code now.
  9498                                  ;;	If the int 2F ever gets this far, we'll return registers
  9499                                  ;;	unchanged, which produces the same result as before, if
  9500                                  ;;	command.com wasn't present (and therefore no messages available).
  9501                                  ;;
  9502                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9503                                  ;;	No_Op zeroes AL.
  9504                                  ;;
  9505                                  ;;;hkn; set up ds to point to DOSDATA
  9506                                  ;;	push	ds
  9507                                  ;;	getdseg	<ds>			; ds -> dosdata
  9508                                  ;;
  9509                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9510                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9511                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9512                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9513                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9514                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9515                                  ;;	DEC	AL		    ;AN000;;MS.
  9516                                  ;;toget:				    ;AN000;
  9517                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9518                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9519                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9520                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9521                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9522                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9523                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9524                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9525                                  ;;getget: 				     ;AN000;
  9526                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9527                                  ;;MSGret: 				     ;AN000;
  9528                                  ;;	POP	SI			     ;AN000;;MS.
  9529                                  ;;	POP	AX			     ;AN000;;MS.
  9530                                  ;;
  9531                                  ;;	pop	ds
  9532                                  
  9533                                  ;	return				     ;AN000;;MS. exit
  9534                                  
  9535                                  ; 23/09/2023
  9536                                  ;	retn	; 29/04/2019
  9537                                  
  9538                                  ;============================================================================
  9539                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9540                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9541                                  ;============================================================================
  9542                                  ; 20/07/2018 - Retro DOS v3.0
  9543                                  
  9544                                  ;	; MSDOS 3.3
  9545                                  ;	; 08/08/2018 - Retro DOS v3.0
  9546                                  ;ECritMEM:
  9547                                  ;ECritSFT:
  9548                                  ;	;
  9549                                  ;ECritDisk:
  9550                                  ;	retn
  9551                                  ;	;push	ax
  9552                                  ;	
  9553                                  ;	mov	ax,8001h
  9554                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9555                                  ;			; AL = critical section number (00h-0Fh)
  9556                                  ;	pop	ax
  9557                                  ;	retn
  9558                                  ;
  9559                                  ;	; MSDOS 3.3
  9560                                  ;	; 08/08/2018 - Retro DOS v3.0
  9561                                  ;LCritMEM:
  9562                                  ;LCritSFT:
  9563                                  ;	;
  9564                                  ;LCritDisk:
  9565                                  ;	retn
  9566                                  ;	;push	ax
  9567                                  ;	
  9568                                  ;	mov	ax,8101h
  9569                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9570                                  ;			; AL = critical section number (00h-0Fh)
  9571                                  ;	pop	ax
  9572                                  ;	retn
  9573                                  ;
  9574                                  ;ECritDevice:
  9575                                  ;	retn
  9576                                  ;	;push	ax
  9577                                  ;	
  9578                                  ;	mov	ax,8002h
  9579                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9580                                  ;			; AL = critical section number (00h-0Fh)
  9581                                  ;	pop	ax
  9582                                  ;	retn
  9583                                  ;
  9584                                  ;LCritDevice:
  9585                                  ;	retn
  9586                                  ;	;push	ax
  9587                                  ;	
  9588                                  ;	mov	ax,8102h
  9589                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9590                                  ;			; AL = critical section number (00h-0Fh)
  9591                                  ;	pop	ax
  9592                                  ;	retn
  9593                                  
  9594                                  ;============================================================================
  9595                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9596                                  ;============================================================================
  9597                                  ; 12/05/2019 - Retro DOS v4.0
  9598                                  
  9599                                  ; Critical Section Routines
  9600                                  
  9601                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9602                                  
  9603                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9604                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9605                                  
  9606                                  ; ---------------------------------------------------------------------------
  9607                                  ; Each handler must leave everything untouched; including flags!
  9608                                  ;
  9609                                  ; Sleaze for time savings:  first instruction is a return. This is patched
  9610                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9611                                  ; ---------------------------------------------------------------------------
  9612                                  
  9613                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9614                                  ; ---------------------------------------------------------------------------
  9615                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9616                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9617                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9618                                  ; ---------------------------------------------------------------------------
  9619                                  
  9620                                  ;%macro POPFF 0
  9621                                  ;	jmp	$+3
  9622                                  ;	iret
  9623                                  ;	push	cs
  9624                                  ;	call	$-2
  9625                                  ;%endmacro
  9626                                  
  9627                                  ; ---------------------------
  9628                                  
  9629                                  ;Procedure  ECritDisk,NEAR
  9630                                  	;public  ECritMEM
  9631                                  	;public  ECritSFT
  9632                                  ECritMEM:
  9633                                  ECritSFT:
  9634                                  ;
  9635                                  ECritDisk:
  9636                                  
  9637                                  ;SR; Check if critical section is to be entered
  9638                                  
  9639 00001316 9C                      	pushf
  9640 00001317 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9641 0000131D 740D                    	jz	short ECritDisk_2
  9642                                  
  9643                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9644                                  ;	;popff  ; * (macro)
  9645                                  ;	jmp	short ECritDisk_1 ; *
  9646                                  ;
  9647                                  ;ECritDisk_iret: ; *
  9648                                  ;	iret ; *
  9649                                  
  9650                                  	; 16/12/2022
  9651                                  	; 13/11/2022
  9652                                  	;jmp	short ECritDisk_1
  9653                                  	; 06/11/2022
  9654                                  ;ECritDisk_iret:
  9655                                  ;	iret	
  9656                                  
  9657                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9658                                  ECritDisk_1:
  9659 0000131F 0E                      	push	cs ; *
  9660 00001320 E80800                  	call	ECritDisk_iret ; *		
  9661                                  	
  9662                                  ECritDisk_0:
  9663 00001323 50                      	PUSH    AX
  9664                                  	;MOV	AX,8000h+critDisk
  9665                                  	;INT	int_IBM
  9666 00001324 B80180                  	mov	ax,8001h
  9667 00001327 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9668                                  			; AL = critical section number (00h-0Fh)
  9669 00001329 58                      	POP     AX
  9670 0000132A C3                      	retn
  9671                                  
  9672                                  	; 16/12/2022
  9673                                  	; 13/11/2022
  9674                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9675                                  LCritDisk_iret: 
  9676 0000132B CF                      	iret
  9677                                  
  9678                                  ECritDisk_2:
  9679                                  	;;popff ; *
  9680                                  	;;retn
  9681                                  ;	jmp	short ECritDisk_3 ; *
  9682                                  ;ECritDisk_iret2: ; *
  9683                                  ;	iret
  9684                                  	
  9685                                  	; 16/12/2022
  9686                                  	; 13/11/2022
  9687                                  	;jmp	short ECritDisk_3
  9688                                  ;ECritDisk_iret2:
  9689                                  	;iret
  9690                                  
  9691                                  ECritDisk_3:
  9692 0000132C 0E                      	push    cs ; *
  9693                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9694                                  	;call	ECritDisk_iret2 ; *
  9695                                  	;retn
  9696                                  	; 16/12/2022
  9697 0000132D E8FBFF                  	call	ECritDisk_iret
  9698 00001330 C3                      	retn
  9699                                  
  9700                                  ;EndProc ECritDisk
  9701                                  
  9702                                  ; ---------------------------
  9703                                  
  9704                                  ;Procedure   LCritDisk,NEAR
  9705                                  	;public  LCritMEM
  9706                                  	;public  LCritSFT
  9707                                  LCritMEM:
  9708                                  LCritSFT:
  9709                                  ;
  9710                                  LCritDisk:
  9711                                  
  9712                                  ;SR; Check if critical section is to be entered
  9713                                  
  9714 00001331 9C                      	pushf
  9715 00001332 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9716 00001338 740C                    	jz	short LCritDisk_2
  9717                                  	;popff  ; * (macro)
  9718                                  ;	jmp	short LCritDisk_1 ; *
  9719                                  ;
  9720                                  ;LCritDisk_iret: ; *
  9721                                  ;	iret ; *
  9722                                  
  9723                                  	; 16/12/2022
  9724                                  	; 13/11/2022
  9725                                  	;jmp	short LCritDisk_1
  9726                                  ;LCritDisk_iret:
  9727                                  	;iret
  9728                                  
  9729                                  LCritDisk_1:
  9730 0000133A 0E                      	push	cs ; *
  9731 0000133B E8EDFF                  	call	LCritDisk_iret ; *		
  9732                                  	
  9733                                  LCritDisk_0:
  9734 0000133E 50                      	PUSH	AX
  9735                                  	;MOV	AX,8100h+critDisk
  9736                                  	;INT	int_IBM
  9737 0000133F B80181                  	mov	ax,8101h
  9738 00001342 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9739                                  			; AL = critical section number (00h-0Fh)
  9740 00001344 58                      	POP	AX
  9741 00001345 C3                      	retn
  9742                                  
  9743                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9744                                  ;	iret
  9745                                  
  9746                                  LCritDisk_2:
  9747                                  	;;popff ; *
  9748                                  	;;retn
  9749                                  ;	jmp	short LCritDisk_3 ; *
  9750                                  ;LCritDisk_iret2: ; *
  9751                                  ;	iret
  9752                                  
  9753                                  	; 16/12/2022
  9754                                  	; 13/11/2022
  9755                                  	;jmp	short LCritDisk_3
  9756                                  ;LCritDisk_iret2:
  9757                                  	;iret
  9758                                  
  9759                                  LCritDisk_3:
  9760 00001346 0E                      	push    cs ; *
  9761                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9762                                  	;call	LCritDisk_iret2 ; *
  9763                                  	;retn
  9764                                  	; 16/12/2022
  9765 00001347 E8E1FF                  	call	LCritDisk_iret
  9766 0000134A C3                      	retn
  9767                                  
  9768                                  ;EndProc LCritDisk
  9769                                  
  9770                                  ; ---------------------------
  9771                                  
  9772                                  ;Procedure   ECritDevice,NEAR
  9773                                  
  9774                                  ECritDevice:
  9775                                  
  9776                                  ;SR; Check if critical section is to be entered
  9777                                  
  9778 0000134B 9C                      	pushf
  9779 0000134C 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9780 00001352 740D                    	jz	short ECritDevice_2
  9781                                  	;popff  ; * (macro)
  9782                                  ;	jmp	short ECritDevice_1 ; *
  9783                                  ;
  9784                                  ;ECritDevice_iret: ; *
  9785                                  ;	iret ; *
  9786                                  
  9787                                  	; 16/12/2022	
  9788                                  	; 13/11/2022
  9789                                  	;jmp	short ECritDevice_1
  9790                                  ;ECritDevice_iret:
  9791                                  	;iret
  9792                                  
  9793                                  ECritDevice_1:
  9794 00001354 0E                      	push	cs ; *
  9795 00001355 E80800                  	call	ECritDevice_iret ; *		
  9796                                  	
  9797                                  ECritDevice_0:
  9798 00001358 50                      	PUSH	AX
  9799                                  	;MOV	AX,8000h+critDevice
  9800                                  	;INT	int_IBM
  9801 00001359 B80280                  	mov	ax,8002h
  9802 0000135C CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9803                                  			; AL = critical section number (00h-0Fh)
  9804 0000135E 58                      	POP     AX
  9805 0000135F C3                      	retn
  9806                                  
  9807                                  	; 16/12/2022
  9808                                  	; 06/12/2022
  9809                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9810                                  LCritDevice_iret: 
  9811 00001360 CF                      	iret
  9812                                  
  9813                                  ECritDevice_2:
  9814                                  	;;popff ; *
  9815                                  	;;retn
  9816                                  ;	jmp	short ECritDevice_3 ; *
  9817                                  ;ECritDevice_iret2: ; *
  9818                                  ;	iret
  9819                                  
  9820                                  	; 16/12/2022
  9821                                  	; 13/11/2022
  9822                                  	;jmp	short ECritDevice_3
  9823                                  ;ECritDevice_iret2:
  9824                                  	;iret
  9825                                  
  9826                                  ECritDevice_3:
  9827 00001361 0E                      	push    cs ; *
  9828                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9829                                  	;call	ECritDevice_iret2 ; *
  9830                                  	;retn
  9831                                  	; 16/12/2022
  9832 00001362 E8FBFF                  	call	ECritDevice_iret
  9833 00001365 C3                      	retn
  9834                                  
  9835                                  ;EndProc ECritDevice
  9836                                  
  9837                                  ; ---------------------------
  9838                                  
  9839                                  ;Procedure   LCritDevice,NEAR
  9840                                  
  9841                                  LCritDevice:
  9842                                  
  9843                                  ;SR; Check if critical section is to be entered
  9844                                  
  9845 00001366 9C                      	pushf
  9846 00001367 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9847 0000136D 740C                    	jz	short LCritDevice_2
  9848                                  	;popff  ; * (macro)
  9849                                  ;	jmp	short LCritDevice_1 ; *
  9850                                  ;
  9851                                  ;LCritDevice_iret: ; *
  9852                                  ;	iret ; *
  9853                                  
  9854                                  	; 16/12/2022
  9855                                  	; 13/11/2022
  9856                                  	;jmp	short LCritDevice_1
  9857                                  ;LCritDevice_iret:
  9858                                  	;iret
  9859                                  
  9860                                  LCritDevice_1:
  9861 0000136F 0E                      	push	cs ; *
  9862 00001370 E8EDFF                  	call	LCritDevice_iret ; *		
  9863                                  	
  9864                                  LCritDevice_0:
  9865 00001373 50                      	PUSH	AX
  9866                                  	;MOV	AX,8100h+critDevice
  9867                                  	;INT	int_IBM
  9868 00001374 B80281                  	mov	ax,8102h
  9869 00001377 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9870                                  			; AL = critical section number (00h-0Fh)
  9871 00001379 58                      	POP     AX
  9872 0000137A C3                      	retn
  9873                                  
  9874                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9875                                  ;	iret
  9876                                  
  9877                                  LCritDevice_2:
  9878                                  	;;popff ; *
  9879                                  	;;retn
  9880                                  ;	jmp	short LCritDevice_3 ; *
  9881                                  ;LCritDevice_iret2: ; *
  9882                                  ;	iret
  9883                                  
  9884                                  	; 16/12/2022
  9885                                  	; 13/11/2022
  9886                                  	;jmp	short LCritDevice_3
  9887                                  ;LCritDevice_iret2:
  9888                                  	;iret
  9889                                  
  9890                                  LCritDevice_3:
  9891 0000137B 0E                      	push    cs ; *
  9892                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9893                                  	;call	LCritDevice_iret2 ; *
  9894                                  	;retn
  9895                                  	; 16/12/2022
  9896 0000137C E8E1FF                  	call	LCritDevice_iret
  9897 0000137F C3                      	retn
  9898                                  
  9899                                  ;EndProc LCritDevice
  9900                                  
  9901                                  ;============================================================================
  9902                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9903                                  ;============================================================================
  9904                                  ; 20/07/2018 - Retro DOS v3.0
  9905                                  
  9906                                  ;============================================================================
  9907                                  ; STDIO.ASM - (MSDOS 2.0)
  9908                                  ;============================================================================
  9909                                  
  9910                                  ;
  9911                                  ; Standard device IO for MSDOS (first 12 function calls)
  9912                                  ;
  9913                                  
  9914                                  ;.xlist
  9915                                  ;.xcref
  9916                                  ;INCLUDE STDSW.ASM
  9917                                  ;INCLUDE DOSSEG.ASM
  9918                                  ;.cref
  9919                                  ;.list
  9920                                  
  9921                                  ;TITLE   STDIO - device IO for MSDOS
  9922                                  ;NAME    STDIO
  9923                                  
  9924                                  ;INCLUDE IO.ASM
  9925                                  
  9926                                  ; ---------------------------------------------------------------------------
  9927                                  ;
  9928                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9929                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9930                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9931                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9932                                  ;			    to restore MSDOS 2.0 device IO source code 
  9933                                  ;
  9934                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9935                                  	
  9936                                  ;============================================================================
  9937                                  ; STDIO.ASM - (MSDOS 2.0)
  9938                                  ;============================================================================
  9939                                  
  9940                                  ;
  9941                                  ; Standard device IO for MSDOS (first 12 function calls)
  9942                                  ;
  9943                                  
  9944                                  ;.xlist
  9945                                  ;.xcref
  9946                                  ;INCLUDE STDSW.ASM
  9947                                  ;INCLUDE DOSSEG.ASM
  9948                                  ;.cref
  9949                                  ;.list
  9950                                  
  9951                                  ;TITLE   STDIO - device IO for MSDOS
  9952                                  ;NAME    STDIO
  9953                                  
  9954                                  ;INCLUDE IO.ASM
  9955                                  
  9956                                  ; ---------------------------------------------------------------------------
  9957                                  ;
  9958                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9959                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9960                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9961                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9962                                  ;			    to restore MSDOS 2.0 device IO source code 
  9963                                  ;
  9964                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
  9965                                  ;
  9966                                  ;============================================================================
  9967                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
  9968                                  ;============================================================================
  9969                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
  9970                                  
  9971                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
  9972                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
  9973                                  
  9974                                  ;============================================================================
  9975                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
  9976                                  ;============================================================================
  9977                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
  9978                                  
  9979                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9980                                  
  9981                                  ;**	Standard device IO for MSDOS (first 12 function calls)
  9982                                  ;
  9983                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
  9984                                  ;	NAME	IBMCPMIO
  9985                                  
  9986                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
  9987                                  ;
  9988                                  ;	$Std_Con_Input_No_Echo
  9989                                  ;	$Std_Con_String_Output
  9990                                  ;	$Std_Con_String_Input
  9991                                  ;	$RawConIO
  9992                                  ;	$RawConInput
  9993                                  ;	RAWOUT
  9994                                  ;	RAWOUT2
  9995                                  ;
  9996                                  
  9997                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9998                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9999                                  ; references to be SS or CS relative which is desired.
 10000                                  
 10001                                  ; ---------------------------------------------------------------------------
 10002                                  
 10003                                  ;	TITLE	CPMIO2 - device IO for MSDOS
 10004                                  ;	NAME	CPMIO2
 10005                                  
 10006                                  ;
 10007                                  ;	Microsoft Confidential
 10008                                  ;	Copyright (C) Microsoft Corporation 1991
 10009                                  ;	All Rights Reserved.
 10010                                  ;
 10011                                  
 10012                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
 10013                                  ;
 10014                                  ;	$Std_Con_Input
 10015                                  ;	$Std_Con_Output
 10016                                  ;	OUTT
 10017                                  ;	TAB
 10018                                  ;	BUFOUT
 10019                                  ;	$Std_Aux_Input
 10020                                  ;	$Std_Aux_Output
 10021                                  ;	$Std_Printer_Output
 10022                                  ;	$Std_Con_Input_Status
 10023                                  ;	$Std_Con_Input_Flush
 10024                                  ;
 10025                                  ;	Revision History:
 10026                                  ;
 10027                                  ;	  AN000	 version 4.00 - Jan. 1988
 10028                                  
 10029                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10030                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10031                                  ; references to be SS or CS relative which is desired.
 10032                                  
 10033                                  ;DOSCODE SEGMENT
 10034                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
 10035                                  
 10036                                  
 10037                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10038                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10039                                  ;hkn;	not valid. 
 10040                                  
 10041                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
 10042                                  ; 08/11/2022
 10043                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
 10044                                  
 10045                                  ;
 10046                                  ;----------------------------------------------------------------------------
 10047                                  ;
 10048                                  ; Procedure : $Std_Con_Input_No_Echo
 10049                                  ;
 10050                                  ;----------------------------------------------------------------------------
 10051                                  ;
 10052                                  
 10053                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
 10054                                  
 10055                                  ; Inputs:
 10056                                  ;	None
 10057                                  ; Function:
 10058                                  ;	Input character from console, no echo
 10059                                  ; Returns:
 10060                                  ;	AL = character
 10061                                  
 10062 00001380 1E                      	push	ds
 10063 00001381 56                      	push	si
 10064                                  INTEST:
 10065 00001382 E8063E                  	call	STATCHK
 10066 00001385 753B                    	jnz	short GET ; 08/09/2018
 10067                                  ;*************************************************************************
 10068                                  ;hkn; SS override
 10069 00001387 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
 10070 0000138D 7505                    	jnz	short no_sys_wait
 10071 0000138F B405                    	mov	ah,5			; get input status with system wait
 10072 00001391 E82E31                  	call	IOFUNC
 10073                                  no_sys_wait:
 10074                                  ;**************************************************************************
 10075 00001394 B484                    	MOV	AH,84h
 10076 00001396 CD2A                    	INT	int_IBM	 ; int 2Ah
 10077                                  
 10078                                  ;;; 7/15/86  update the date in the idle loop
 10079                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
 10080                                  ;;;;		 to shorten loop in consideration of the PC Convertible
 10081                                  
 10082                                  ;hkn; SS override
 10083 00001398 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
 10084 0000139E 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
 10085                                  
 10086 000013A0 50                      	PUSH	AX
 10087 000013A1 53                      	PUSH	BX			; following is tricky,
 10088 000013A2 51                      	PUSH	CX			; it may be called by critical handler
 10089 000013A3 52                      	PUSH	DX			; at that time, DEVCALL is used by
 10090                                  					; other's READ or WRITE
 10091 000013A4 1E                      	PUSH	DS			; save DS = SFT's segment
 10092                                  
 10093                                  ;hkn; READTIME must use ds = DOSDATA
 10094                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
 10095                                  
 10096 000013A5 16                      	PUSH	SS ; 04/05/2019
 10097 000013A6 1F                      	POP	DS
 10098                                  
 10099 000013A7 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
 10100 000013AA E89A02                  	CALL	Save_Restore_Packet	; save DEVCALL packet
 10101                                  	;invoke	READTIME		; readtime
 10102 000013AD E86FF7                  	call	READTIME
 10103 000013B0 B80100                  	MOV	AX,1
 10104 000013B3 E89102                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
 10105                                  
 10106                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
 10107                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
 10108                                  ;	push	bx
 10109                                  ;	mov	bx,DATE_FLAG
 10110                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
 10111                                  ;	cmp	word [cs:bx],5872h
 10112                                  ;	jz	short FETCHI_TAG_chk_ok
 10113                                  ;	call	DOSINIT
 10114                                  ;FETCHI_TAG_chk_ok:
 10115                                  ;	pop	bx
 10116                                  
 10117 000013B6 1F                      	POP	DS			; restore DS
 10118 000013B7 5A                      	POP	DX
 10119 000013B8 59                      	POP	CX
 10120 000013B9 5B                      	POP	BX
 10121 000013BA 58                      	POP	AX
 10122                                  NoUpdate:
 10123                                  
 10124                                  ;hkn; SS override
 10125 000013BB 36FF06[910D]            	INC	word [SS:DATE_FLAG]
 10126                                  
 10127                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10128 000013C0 EBC0                    	JMP	short INTEST
 10129                                  GET:
 10130 000013C2 30E4                    	XOR	AH,AH
 10131 000013C4 E8FB30                  	call	IOFUNC
 10132 000013C7 5E                      	POP	SI
 10133 000013C8 1F                      	POP	DS
 10134                                  ;;; 7/15/86
 10135                                  
 10136                                  ;hkn; SS override
 10137                                  	; MSDOS 6.0
 10138 000013C9 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10139                                  	;
 10140 000013CF 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10141 000013D1 7505                    	JNZ	short noscan
 10142                                  
 10143                                  ;hkn; SS override
 10144                                  	;MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10145                                  	; 20/06/2023
 10146 000013D3 36FE06[900D]            	inc	byte [SS:SCAN_FLAG]
 10147                                  noscan:
 10148 000013D8 C3                      	retn
 10149                                  ;
 10150                                  ;----------------------------------------------------------------------------
 10151                                  ;
 10152                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10153                                  ;
 10154                                  ;
 10155                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10156                                  ;	EXIT	none
 10157                                  ;	USES	ALL
 10158                                  ;
 10159                                  ;----------------------------------------------------------------------------
 10160                                  ;
 10161                                  
 10162                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10163                                  
 10164 000013D9 89D6                    	mov	si,dx
 10165                                  STRING_OUT1:	
 10166 000013DB AC                      	lodsb
 10167 000013DC 3C24                    	cmp	al,'$'
 10168 000013DE 74F8                    	je	short noscan
 10169                                  NEXT_STR1:
 10170 000013E0 E88F02                  	call	OUTT
 10171 000013E3 EBF6                    	jmp	short STRING_OUT1
 10172                                  
 10173                                  ;----------------------------------------------------------------------------
 10174                                  ;
 10175                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10176                                  ;
 10177                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10178                                  ;
 10179                                  ;	ENTRY	(ds:dx) = input buffer
 10180                                  ;	EXIT	none
 10181                                  ;	USES	ALL
 10182                                  ;
 10183                                  ;----------------------------------------------------------------------------
 10184                                  
 10185                                  _$STD_CON_STRING_INPUT:		;System call 10
 10186                                  
 10187 000013E5 8CD0                    	mov	ax,ss
 10188 000013E7 8EC0                    	mov	es,ax
 10189 000013E9 89D6                    	mov	si,dx
 10190 000013EB 30ED                    	xor	ch,ch
 10191 000013ED AD                      	lodsw
 10192                                  
 10193                                  ;	(AL) = the buffer length
 10194                                  ;	(AH) = the template length
 10195                                  
 10196 000013EE 08C0                            or	al,al
 10197 000013F0 74E6                            jz	short noscan	;Buffer is 0 length!!?
 10198 000013F2 88E3                    	mov	bl,ah		;Init template counter
 10199 000013F4 88EF                            mov	bh,ch		;Init template counter
 10200                                  
 10201                                  ;	(BL) = the number of bytes in the template
 10202                                  
 10203 000013F6 38D8                            cmp	al,bl
 10204 000013F8 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10205 000013FA 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10206 000013FD 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10207                                  
 10208                                  ; The number of chars in the template is >= the number of chars in buffer or
 10209                                  ; there is no CR at the end of the template.  This is an inconsistant state
 10210                                  ; of affairs.  Pretend that the template was empty:
 10211                                  ;
 10212                                  
 10213                                  NOEDIT:	
 10214 000013FF 88EB                    	mov	bl,ch		;Reset buffer
 10215                                  EDITON: 
 10216 00001401 88C2                    	mov	dl,al
 10217 00001403 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10218                                  
 10219                                  ;	Top level. We begin to read a line in.
 10220                                  
 10221                                  NEWLIN: 
 10222 00001404 36A0[F901]              	mov	al,[SS:CARPOS]
 10223 00001408 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10224                                  
 10225 0000140C 56                      	push	si
 10226 0000140D BF[FB01]                	mov	di,INBUF ;Build the new line here
 10227 00001410 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10228 00001415 88EF                    	mov	bh,ch		;No chars from template yet
 10229 00001417 88EE                    	mov	dh,ch		;No chars to new line yet
 10230 00001419 E864FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10231 0000141C 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10232 0000141E 7503                    	jnz	short GOTCH
 10233                                  
 10234                                  ;	This is the main loop of reading in a character and processing it.
 10235                                  ;
 10236                                  ;	(BH) = the index of the next byte in the template
 10237                                  ;	(BL) = the length of the template
 10238                                  ;	(DH) = the number of bytes in the buffer
 10239                                  ;	(DL) = the length of the buffer
 10240                                  
 10241                                  GETCH:
 10242 00001420 E85DFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10243                                  GOTCH:
 10244                                  ;
 10245                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10246                                  ; input queue.
 10247                                  ;
 10248 00001423 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10249 00001425 74F9                    	jz	short GETCH
 10250                                  
 10251                                  ;	If the leading char is the function-key lead byte
 10252                                  
 10253                                  	;cmp	al,[SS:ESCCHAR]
 10254                                  
 10255                                  	; 04/05/2019 - Retro DOS v4.0
 10256                                  
 10257                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10258                                  
 10259 00001427 2E3A06[1F0A]            	CMP	AL,[cs:ESCCHAR]
 10260 0000142C 743B                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10261                                  
 10262                                  ;	Rubout and ^H are both destructive backspaces.
 10263                                  
 10264 0000142E 3C7F                            cmp	al,c_DEL ; 7FH
 10265 00001430 742E                            jz	short BACKSPJ
 10266 00001432 3C08                            cmp	al,c_BS  ; 8
 10267 00001434 742A                            jz	short BACKSPJ
 10268                                  
 10269                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10270                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10271                                  	;	   	after CMP and a CMP again!
 10272                                  	;		
 10273                                  	;		-It would be better if they use a 'JMP short' to 
 10274                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10275                                  	;		between them. Then, they would be able use a patch
 10276                                  	;		between 5271h and 5279h when if it will be required.
 10277                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10278                                  	;	
 10279                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10280                                  
 10281                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10282                                  	;
 10283                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10284                                  
 10285                                  ;DOSCODE:526D	cmp     al, 8
 10286                                  ;DOSCODE:526F	jz      short BACKSPJ
 10287                                  ;DOSCODE:5271	cmp     al, 17h
 10288                                  ;DOSCODE:5273	nop
 10289                                  ;DOSCODE:5274	nop
 10290                                  ;DOSCODE:5275	cmp     al, 15h
 10291                                  ;DOSCODE:5277	nop
 10292                                  ;DOSCODE:5278	nop
 10293                                  ;DOSCODE:5279	cmp     al, 0Dh
 10294                                  ;DOSCODE:527B	jz      short ENDLIN
 10295                                  ;DOSCODE:527D	cmp     al, 0Ah
 10296                                  ;DOSCODE:527F	jz      short PHYCRLF
 10297                                  	
 10298                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10299                                  	; DOSCODE:525Dh
 10300                                  
 10301                                  ; 16/12/2022
 10302                                  %if 0
 10303                                  	; MSDOS 6.0
 10304                                  ;	^W deletes backward once and then backs up until a letter is before the
 10305                                  ;	cursor
 10306                                  
 10307                                  	CMP     AL,"W"-"@" ; 17h
 10308                                  
 10309                                  ;	The removal of the comment characters before the jump statement will
 10310                                  ;	cause ^W to backup a word.
 10311                                  
 10312                                  ;***	JZ	short WordDel
 10313                                  	NOP
 10314                                  	NOP
 10315                                  
 10316                                  	CMP     AL,"U"-"@" ; 15h
 10317                                  
 10318                                  ;	The removal of the comment characters before the jump statement will
 10319                                  ;	cause ^U to clear a line.
 10320                                  
 10321                                  ;***	JZ	short LineDel
 10322                                  	NOP
 10323                                  	NOP
 10324                                  
 10325                                  %endif
 10326                                  
 10327                                  ;	CR terminates the line.
 10328                                  
 10329 00001436 3C0D                            cmp	al,c_CR ; 0Dh
 10330 00001438 7432                            jz	short ENDLIN
 10331                                  
 10332                                  ;	LF goes to a new line and keeps on reading.
 10333                                  
 10334 0000143A 3C0A                            cmp	al,c_LF ; 0Ah
 10335 0000143C 7444                    	jz	short PHYCRLF
 10336                                  
 10337                                  ;	^X (or ESC) deletes the line and starts over
 10338                                  
 10339                                  	; MSDOS 3.3
 10340                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10341                                  	;jz	short KILNEW
 10342                                  
 10343                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10344                                  
 10345                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10346                                  
 10347 0000143E 2E3A06[1E0A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10348 00001443 7442                    	jz	short KILNEW
 10349                                  	
 10350                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10351                                  	;jz	short KILNEW
 10352                                  
 10353                                  ; Otherwise, we save the input character.
 10354                                  
 10355                                  SAVCH:	
 10356 00001445 38D6                    	cmp	dh,dl
 10357 00001447 7319                    	jnb	short BUFFUL		; buffer is full.
 10358 00001449 AA                              stosb
 10359 0000144A FEC6                    	inc	dh                      ; increment count in buffer.
 10360 0000144C E8B702                  	call	BUFOUT			; Print control chars nicely
 10361                                  
 10362 0000144F 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10363 00001455 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10364 00001457 38DF                            cmp	bh,bl
 10365 00001459 73C5                            jnb	short GETCH		; no more characters in template
 10366 0000145B 46                              inc	si                      ; Skip to next char in template
 10367 0000145C FEC7                            inc	bh                      ; remember position in template
 10368 0000145E EBC0                            jmp	short GETCH
 10369                                  
 10370                                  BACKSPJ: 
 10371 00001460 EB38                    	jmp	short BACKSP
 10372                                  
 10373                                  BUFFUL: 
 10374 00001462 B007                    	mov	al, 7			; Bell to signal full buffer
 10375 00001464 E80B02                  	call	OUTT
 10376 00001467 EBB7                    	jmp	short GETCH
 10377                                  
 10378                                  ESCAPE: 
 10379                                  	;transfer OEMFunctionKey
 10380 00001469 E9DEF5                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10381                                  
 10382                                  ENDLIN:
 10383 0000146C AA                              stosb				; Put the CR in the buffer
 10384 0000146D E80202                  	call	OUTT                    ; Echo it
 10385 00001470 5F                              pop	di                      ; Get start of user buffer
 10386 00001471 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10387 00001474 FEC6                            inc	dh			; DH is length including CR
 10388                                  
 10389                                  COPYNEW:
 10390                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10391                                  	;mov	bp, es
 10392                                  	;mov	bx, ds
 10393                                  	;mov	es, bx
 10394                                  	;mov	ds, bp
 10395                                  	;mov	si, INBUF
 10396                                  	;mov	cl, dh
 10397                                  	;rep	movsb
 10398                                  	;retn
 10399                                  
 10400                                  	; CPMIO.ASM (MSDOS 6.0)
 10401                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10402                                  	;SAVE	<DS,ES>
 10403 00001476 1E                      	PUSH	DS
 10404 00001477 06                      	PUSH	ES
 10405                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10406 00001478 1F                      	POP	DS
 10407 00001479 07                      	POP	ES
 10408                                  
 10409                                  ;;hkn; INBUF is in DOSDATA
 10410 0000147A BE[FB01]                        MOV     SI,INBUF
 10411 0000147D 88F1                            MOV     CL,DH                   ; set up count
 10412 0000147F F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10413                                  OLDBAK_RETN:
 10414 00001481 C3                              RETN
 10415                                  
 10416                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10417                                  
 10418                                  PHYCRLF:
 10419 00001482 E82001                  	CALL	CRLF
 10420 00001485 EB99                            JMP	short GETCH
 10421                                  
 10422                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10423                                  
 10424                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10425                                  
 10426                                  	; Note: Following routines were not used in IBMDOS.COM
 10427                                  	;	-CRTL+W, CRTL+U is not activated-
 10428                                  	;	but they were in the kernel code!?)
 10429                                  
 10430                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10431                                  	; DOSCODE:52B6h
 10432                                  
 10433                                  ;;;;;;;;
 10434                                  
 10435                                  ; 16/12/2022
 10436                                  %if 0
 10437                                  ;
 10438                                  ; Delete the previous line
 10439                                  ;
 10440                                  LineDel:
 10441                                  	OR      DH,DH
 10442                                  	JZ	short GETCH	 ; 06/12/2022
 10443                                  	Call    BackSpace
 10444                                  	JMP	short LineDel
 10445                                  
 10446                                  %endif
 10447                                  
 10448                                  ;
 10449                                  ; delete the previous word.
 10450                                  ;
 10451                                  WordDel:
 10452                                  WordLoop:
 10453                                  ;	Call    BackSpace               ; backspace the one spot
 10454                                  ;	OR      DH,DH
 10455                                  ;	JZ	short GetChj
 10456                                  ;	MOV     AL,[ES:DI-1]
 10457                                  ;	cmp     al,'0'
 10458                                  ;	jb	short GetChj
 10459                                  ;	cmp     al,'9'
 10460                                  ;	jbe	short WordLoop
 10461                                  ;	OR      AL,20h
 10462                                  ;	CMP     AL,'a'
 10463                                  ;	JB	short GetChj
 10464                                  ;	CMP     AL,'z'
 10465                                  ;	JBE	short WordLoop
 10466                                  ;GetChj: 
 10467                                  ;	JMP	GETCH
 10468                                  
 10469                                  ; 16/12/2022
 10470                                  %if 0
 10471                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10472                                  	; (Worddel is not called or jumped from anywhere!)
 10473                                  WordDel:
 10474                                  WordLoop:
 10475                                  	Call    BackSpace               ; backspace the one spot
 10476                                  	OR      DH,DH
 10477                                  	JZ	short GetChj
 10478                                  	MOV     AL,[ES:DI-1]
 10479                                  	cmp     al,'0'
 10480                                  	jb	short GetChj
 10481                                  	cmp     al,'9'
 10482                                  	jbe	short WordLoop
 10483                                  	OR      AL,20h
 10484                                  	CMP     AL,'a'
 10485                                  	JB	short GetChj
 10486                                  	CMP     AL,'z'
 10487                                  	JBE	short WordLoop
 10488                                  GetChj: 
 10489                                  	JMP	GETCH
 10490                                  
 10491                                  %endif
 10492                                  
 10493                                  ;;;;;;;;
 10494                                  
 10495                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10496                                  
 10497                                  ; The user wants to throw away what he's typed in and wants to start over.
 10498                                  ; We print the backslash and then go to the next line and tab to the correct
 10499                                  ; spot to begin the buffered input.
 10500                                  
 10501                                  KILNEW:
 10502 00001487 B05C                            mov	al,'\'
 10503 00001489 E8E601                          call	OUTT            ;Print the CANCEL indicator
 10504 0000148C 5E                              pop	si		;Remember start of edit buffer
 10505                                  PUTNEW:
 10506 0000148D E81501                  	call	CRLF            ;Go to next line on screen
 10507 00001490 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10508 00001494 E84F02                  	call	TAB             ;Tab over
 10509 00001497 E96AFF                          JMP     NEWLIN		;Start over again
 10510                                  
 10511                                  ;	Destructively back up one character position
 10512                                  
 10513                                  BACKSP:
 10514                                  	; 09/09/2018
 10515 0000149A E80200                  	Call    BackSpace
 10516 0000149D EB81                    	JMP     GETCH
 10517                                  
 10518                                  BackSpace:
 10519 0000149F 08F6                    	or	dh,dh
 10520 000014A1 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10521 000014A3 E85800                  	call	BACKUP          ;Do the backup
 10522 000014A6 268A05                  	mov	al,[es:di]	;Get the deleted char
 10523 000014A9 3C20                            cmp	al,20h	; ' '
 10524 000014AB 730F                    	jnb	short OLDBAK	;Was a normal char
 10525 000014AD 3C09                            cmp	al,c_HT ; 9
 10526 000014AF 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10527                                  ;; 9/27/86 fix for ctrl-U backspace
 10528 000014B1 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10529 000014B3 7407                    	JZ	short OLDBAK
 10530 000014B5 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10531 000014B7 7403                    	JZ	short OLDBAK
 10532                                  ;; 9/27/86 fix for ctrl-U backspace
 10533 000014B9 E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10534                                  OLDBAK:
 10535 000014BC 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10536 000014C2 75BD                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10537 000014C4 08FF                    	or	bh,bh
 10538 000014C6 74B9                            jz	short OLDBAK_RETN 
 10539                                  				;Not advanced in template, stay where we are
 10540 000014C8 FECF                    	dec	bh		;Go back in template
 10541 000014CA 4E                              dec	si
 10542 000014CB C3                      	retn
 10543                                  BAKTAB:
 10544 000014CC 57                              push	di
 10545 000014CD 4F                              dec	di		;Back up one char
 10546 000014CE FD                              std			;Go backward
 10547 000014CF 88F1                            mov	cl,dh		;Number of chars currently in line
 10548 000014D1 B020                            mov	al,20h	; ' '
 10549 000014D3 53                              push	bx
 10550 000014D4 B307                            mov	bl,7		;Max
 10551 000014D6 E30E                            jcxz	FIGTAB		;At start, do nothing
 10552                                  FNDPOS:
 10553 000014D8 AE                              scasb			;Look back
 10554 000014D9 7609                    	jbe	short CHKCNT
 10555 000014DB 26807D0109              	cmp	byte [es:di+1],9
 10556 000014E0 7409                    	jz	short HAVTAB	;Found a tab
 10557 000014E2 FECB                    	dec	bl		;Back one char if non tab control char
 10558                                  CHKCNT:
 10559 000014E4 E2F2                            loop	FNDPOS
 10560                                  FIGTAB:		
 10561 000014E6 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10562                                  HAVTAB:
 10563 000014EB 28F3                    	sub	bl,dh
 10564 000014ED 00D9                    	add	cl,bl
 10565 000014EF 80E107                  	and	cl,7		;CX has correct number to erase
 10566 000014F2 FC                      	cld			;Back to normal
 10567 000014F3 5B                      	pop	bx
 10568 000014F4 5F                      	pop	di
 10569 000014F5 74C5                    	jz	short OLDBAK	;Nothing to erase
 10570                                  TABBAK:
 10571 000014F7 E80700                  	call	BACKMES
 10572 000014FA E2FB                    	loop	TABBAK		;Erase correct number of chars
 10573 000014FC EBBE                    	jmp	short OLDBAK
 10574                                  
 10575                                  BACKUP:
 10576 000014FE FECE                            dec	dh		;Back up in line
 10577 00001500 4F                              dec	di
 10578                                  BACKMES:
 10579 00001501 B008                            mov	al,c_BS ; 8	;Backspace
 10580 00001503 E86C01                          call	OUTT
 10581 00001506 B020                            mov	al,20h ; ' '	;Erase
 10582 00001508 E86701                          call	OUTT
 10583 0000150B B008                            mov	al,c_BS ; 8	;Backspace
 10584 0000150D E96201                  	jmp	OUTT		;Done
 10585                                  
 10586                                  ;User really wants an ESC character in his line
 10587                                  TWOESC:	
 10588 00001510 2EA0[1F0A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10589 00001514 E92EFF                  	jmp	SAVCH
 10590                                  
 10591                                  ;Copy the rest of the template
 10592                                  COPYLIN:
 10593 00001517 88D9                            mov	cl,bl		;Total size of template
 10594 00001519 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10595 0000151B EB07                            jmp	short COPYEACH
 10596                                  
 10597                                  COPYSTR:
 10598 0000151D E83400                  	call	FINDOLD         ;Find the char
 10599 00001520 EB02                    	jmp	short COPYEACH  ;Copy up to it
 10600                                  
 10601                                  ;Copy one char from template to line
 10602                                  COPYONE:
 10603 00001522 B101                            mov	cl,1
 10604                                  ;Copy CX chars from template to line
 10605                                  COPYEACH:
 10606 00001524 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10607 0000152A 38D6                    	cmp	dh,dl
 10608 0000152C 740F                            jz	short GETCH2		;At end of line, can't do anything
 10609 0000152E 38DF                            cmp	bh,bl
 10610 00001530 740B                            jz	short GETCH2		;At end of template, can't do anything
 10611 00001532 AC                              lodsb
 10612 00001533 AA                              stosb
 10613 00001534 E8CF01                  	call	BUFOUT
 10614 00001537 FEC7                            inc	bh			;Ahead in template
 10615 00001539 FEC6                            inc	dh			;Ahead in line
 10616 0000153B E2E7                            loop	COPYEACH
 10617                                  GETCH2:
 10618 0000153D E9E0FE                          jmp	GETCH
 10619                                  
 10620                                  ;Skip one char in template
 10621                                  SKIPONE:
 10622 00001540 38DF                    	cmp	bh,bl
 10623 00001542 74F9                    	jz	short GETCH2		;At end of template
 10624 00001544 FEC7                    	inc	bh			;Ahead in templat
 10625 00001546 46                      	inc	si
 10626 00001547 E9D6FE                  	jmp	GETCH
 10627                                  
 10628                                  SKIPSTR:
 10629 0000154A E80700                  	call	FINDOLD                 ;Find out how far to go
 10630 0000154D 01CE                            add	si,cx			;Go there
 10631 0000154F 00CF                            add	bh,cl
 10632 00001551 E9CCFE                          jmp	GETCH
 10633                                  
 10634                                  ;Get the next user char, and look ahead in template for a match
 10635                                  ;CX indicates how many chars to skip to get there on output
 10636                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10637                                  ;       address is popped off and a jump to GETCH is taken.
 10638                                  ;       Make sure nothing extra on stack when this routine
 10639                                  ;       is called!!! (no PUSHes before calling it).
 10640                                  
 10641                                  FINDOLD:
 10642 00001554 E829FE                          call	_$STD_CON_INPUT_NO_ECHO
 10643                                  
 10644                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10645                                  
 10646                                  	;CMP     AL,[SS:ESCCHAR]	
 10647                                  	;JNZ     SHORT FINDSETUP
 10648                                  
 10649                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10650                                  
 10651                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10652                                  
 10653 00001557 2E3A06[1F0A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10654 0000155C 7505                    	JNZ     SHORT FINDSETUP		; no, set up for scan
 10655                                  
 10656 0000155E E81FFE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10657 00001561 EB1D                            JMP     SHORT NOTFND		; go try again
 10658                                  FINDSETUP:
 10659 00001563 88D9                    	mov	cl,bl
 10660 00001565 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10661 00001567 7417                    	jz	short NOTFND	;At end of template
 10662 00001569 49                              dec	cx		;Cannot point past end, limit search
 10663 0000156A 7414                            jz	short NOTFND	 ;If only one char in template, forget it
 10664 0000156C 06                      	push	es
 10665 0000156D 1E                      	push	ds
 10666 0000156E 07                      	pop	es
 10667 0000156F 57                      	push	di
 10668 00001570 89F7                    	mov	di,si		;Template to ES:DI
 10669 00001572 47                      	inc	di
 10670 00001573 F2AE                    	repne	scasb		;Look
 10671 00001575 5F                      	pop	di
 10672 00001576 07                      	pop	es
 10673 00001577 7507                    	jnz	short NOTFND	;Didn't find the char
 10674 00001579 F6D1                            not	cl		;Turn how far to go into how far we went
 10675 0000157B 00D9                            add	cl,bl		;Add size of template
 10676 0000157D 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10677                                  FINDOLD_RETN:
 10678 0000157F C3                      	retn
 10679                                  
 10680                                  NOTFND:
 10681 00001580 5D                              pop	bp              ;Chuck return address
 10682 00001581 E99CFE                          jmp	GETCH
 10683                                  
 10684                                  REEDIT:
 10685 00001584 B040                    	mov	al,'@'		;Output re-edit character
 10686 00001586 E8E900                  	call	OUTT
 10687 00001589 5F                      	pop	di
 10688 0000158A 57                      	push	di
 10689 0000158B 06                      	push	es
 10690 0000158C 1E                      	push	ds
 10691 0000158D E8E6FE                  	call	COPYNEW		;Copy current line into template
 10692 00001590 1F                      	pop	ds
 10693 00001591 07                      	pop	es
 10694 00001592 5E                      	pop	si
 10695 00001593 88F3                    	mov	bl,dh		;Size of line is new size template
 10696 00001595 E9F5FE                  	jmp	PUTNEW		;Start over again
 10697                                  
 10698                                  EXITINS:
 10699                                  ENTERINS:
 10700 00001598 36F616[7905]            	not	byte [SS:INSMODE]
 10701 0000159D E980FE                  	jmp	GETCH
 10702                                  
 10703                                  ;Put a real live ^Z in the buffer (embedded)
 10704                                  CTRLZ:
 10705 000015A0 B01A                    	mov	al,"Z"-"@" ; 1Ah
 10706 000015A2 E9A0FE                          jmp	SAVCH
 10707                                  
 10708                                  ;Output a CRLF
 10709                                  CRLF:
 10710 000015A5 B00D                    	mov	al,c_CR ; 0Dh 
 10711 000015A7 E8C800                  	call	OUTT
 10712 000015AA B00A                    	mov	al,c_LF ; 0Ah
 10713 000015AC E9C300                  	jmp	OUTT
 10714                                  
 10715                                  ;
 10716                                  ;----------------------------------------------------------------------------
 10717                                  ;
 10718                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10719                                  ;
 10720                                  ;	Input or output raw character from console, no echo
 10721                                  ;
 10722                                  ;	ENTRY	DL = -1 if input
 10723                                  ;		   =  output character if output
 10724                                  ;	EXIT	(AL) = input character if input
 10725                                  ;	USES	all
 10726                                  ;
 10727                                  ;----------------------------------------------------------------------------
 10728                                  ; 20/07/2018 - Retro DOS v3.0
 10729                                  
 10730                                  ; 04/05/2019 - Retro DOS v4.0
 10731                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10732                                  
 10733                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10734                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10735                                  
 10736                                  _$RAW_CON_IO:			; System call 6
 10737                                  
 10738 000015AF 88D0                            MOV     AL,DL
 10739 000015B1 3CFF                            CMP     AL,-1
 10740 000015B3 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10741                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10742                                  	;jz	short rci1
 10743                                  	;jmp	short RAWOUT
 10744                                  	; 16/12/202
 10745                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10746                                  	;nop
 10747                                  rci1:	        
 10748                                  			; Get pointer to register save area
 10749 000015B5 36C43E[8405]                    LES     DI,[SS:USER_SP] ; 12/03/2018
 10750 000015BA 31DB                    	XOR     BX,BX
 10751                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10752 000015BC E8BD20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10753                                          ;JC	SHORT RET17
 10754 000015BF 72BE                            jc	short FINDOLD_RETN
 10755 000015C1 B401                    	MOV     AH,1
 10756 000015C3 E8FC2E                          CALL	IOFUNC
 10757 000015C6 750B                            JNZ     SHORT RESFLG
 10758 000015C8 E8923B                          CALL	SPOOLINT
 10759                                          ;OR	BYTE [ES:DI+16H],40H
 10760 000015CB 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10761 000015D0 30C0                            XOR     AL,AL
 10762                                  RET17:
 10763 000015D2 C3                              RETN
 10764                                  
 10765                                  RESFLG:
 10766                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10767 000015D3 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10768                                  				; Reset user's zero flag
 10769                                  ;RILP:
 10770                                  rci0:
 10771 000015D8 E8823B                       	CALL	SPOOLINT
 10772                                  ;
 10773                                  ;----------------------------------------------------------------------------
 10774                                  ;
 10775                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10776                                  ;
 10777                                  ;	Input raw character from console, no echo
 10778                                  ;
 10779                                  ;	ENTRY	none
 10780                                  ;	EXIT	(al) = character
 10781                                  ;	USES	all
 10782                                  ;
 10783                                  ;----------------------------------------------------------------------------
 10784                                  ;
 10785                                  
 10786                                  ;rci0:	invoke	SPOOLINT
 10787                                  
 10788                                  	;entry	$RAW_CON_INPUT
 10789                                  
 10790                                  	; 04/05/2019 - Retro DOS v4.0
 10791                                  
 10792                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10793                                  
 10794                                  _$RAW_CON_INPUT:		; System call 7
 10795 000015DB 53                      	push	bx
 10796 000015DC 31DB                            XOR     BX,BX
 10797                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10798 000015DE E89B20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10799 000015E1 5B                              pop	bx
 10800 000015E2 72EE                    	JC	SHORT RET17
 10801 000015E4 B401                            MOV     AH,1
 10802 000015E6 E8D92E                          CALL	IOFUNC
 10803                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10804                                  	;XOR	AH,AH
 10805                                          ;CALL	IOFUNC
 10806                                          ;RETN
 10807 000015E9 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10808 000015EB B484                    	MOV	AH,84h
 10809 000015ED CD2A                    	INT	int_IBM  ; int 2Ah
 10810 000015EF EBE7                    	JMP	short rci0
 10811                                  rci5:	
 10812 000015F1 30E4                            XOR     AH,AH
 10813                                          ;CALL	IOFUNC
 10814                                          ;RETN
 10815                                  	; 18/12/2022
 10816 000015F3 E9CC2E                  	jmp	IOFUNC
 10817                                  
 10818                                  ;       Output the character in AL to stdout
 10819                                  ;
 10820                                  	;entry   RAWOUT
 10821                                  RAWOUT:
 10822 000015F6 53                              PUSH    BX
 10823 000015F7 BB0100                          MOV     BX,1
 10824                                  
 10825                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10826 000015FA E87F20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10827 000015FD 721B                            JC      SHORT RAWRET1
 10828                                  
 10829                                  	;
 10830                                  	; MSDOS 2.11
 10831                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10832                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10833                                          ;PUSH	DS
 10834                                          ;PUSH	SI
 10835                                          ;LDS	SI,[SI+19H]		; output to special?
 10836                                  	;TEST	BYTE [SI+4],ISSPEC
 10837                                  	;POP	SI
 10838                                  	;
 10839                                          
 10840                                  	; MSDOS 3.3 & MSDOS 6.0
 10841                                  	;mov	bx,[si+5]
 10842 000015FF 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10843                                   ;
 10844                                   ; If we are a network handle OR if we are not a local device then go do the
 10845                                   ; output the hard way.
 10846                                   ;	
 10847                                  	;and	bx,8080h
 10848 00001602 81E38080                	AND	BX,sf_isnet+devid_device
 10849                                  	;cmp	bx,80h
 10850 00001606 81FB8000                	CMP	BX,devid_device
 10851 0000160A 7510                    	jnz     short RAWNORM
 10852 0000160C 1E                      	push    ds
 10853                                  	;lds	bx,[si+7]
 10854 0000160D C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10855                                  	;test	byte [bx+4],10h
 10856 00001610 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10857                                  	;
 10858                                  
 10859 00001614 1F                              POP     DS
 10860 00001615 7405                            JZ      SHORT RAWNORM		; if not, do normally
 10861                                  
 10862 00001617 CD29                            INT	int_fastcon  ; int 29h	; quickly output the char
 10863                                  
 10864                                          ;JMP	SHORT RAWRET
 10865                                  ;RAWNORM:
 10866                                  ;	CALL    RAWOUT3
 10867                                  RAWRET: 
 10868 00001619 F8                      	CLC
 10869                                  RAWRET1:
 10870 0000161A 5B                              POP     BX
 10871                                  RAWRET2:
 10872 0000161B C3                      	RETN
 10873                                  RAWNORM:
 10874 0000161C E80700                  	CALL    RAWOUT3
 10875 0000161F EBF8                    	jmp	short RAWRET
 10876                                  
 10877                                  ;       Output the character in AL to handle in BX
 10878                                  ;
 10879                                  ;	entry   RAWOUT2
 10880                                  
 10881                                  RAWOUT2:
 10882                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10883                                  	;JC	SHORT RET18
 10884 00001621 E85820                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10885 00001624 72F5                    	JC	SHORT RAWRET2
 10886                                  RAWOUT3:
 10887 00001626 50                              PUSH    AX
 10888 00001627 EB0C                            JMP     SHORT RAWOSTRT
 10889                                  ROLP:
 10890 00001629 E8313B                          CALL	SPOOLINT
 10891                                  
 10892                                  	; 01/05/2019 - Retro DOS v4.0
 10893                                  
 10894                                  	; MSDOS 6.0
 10895                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10896                                  	; 17/12/2022
 10897 0000162C 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h	
 10898                                  	;or	word [ss:DOS34_FLAG],200h
 10899                                  				;AN002; set control break
 10900                                  	;invoke DSKSTATCHK
 10901 00001632 E8A53A                  	call	DSKSTATCHK	;AN002; check control break
 10902                                  RAWOSTRT:
 10903 00001635 B403                            MOV     AH,3
 10904 00001637 E8882E                          CALL    IOFUNC
 10905 0000163A 74ED                            JZ      SHORT ROLP
 10906                                  
 10907                                  	; MSDOS 6.0
 10908                                  ;SR;
 10909                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10910                                  ;the user failed. We do not send a char if this happens. We however return 
 10911                                  ;to the caller with carry clear because this DOS call does not return any
 10912                                  ;status. 
 10913                                  ;
 10914 0000163C 40                      	inc	ax		;fail on I24 if ax = -1
 10915 0000163D 58                      	POP	AX
 10916 0000163E 7405                    	jz	short nosend	;yes, do not send char
 10917 00001640 B402                    	MOV	AH,2
 10918 00001642 E87D2E                  	call	IOFUNC
 10919                                  nosend:
 10920 00001645 F8                      	CLC			; Clear carry indicating successful
 10921 00001646 C3                      	retn
 10922                                  
 10923                                  	; MSDOS 3.3 & MSDOS 2.11
 10924                                  	;POP	AX
 10925                                  	;MOV	AH,2
 10926                                          ;CALL	IOFUNC
 10927                                  	;CLC			; Clear carry indicating successful
 10928                                  ;RET18:    
 10929                                  	;RETN
 10930                                  
 10931                                  ;;10/08/2018
 10932                                  ; 20/07/2018 - Retro DOS v3.0
 10933                                  ; ---------------------------------------------------------------------------
 10934                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 10935                                  ; ---------------------------------------------------------------------------
 10936                                  
 10937                                  ; This routine is called at DOS init
 10938                                  
 10939                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 10940                                  ;;OUTMES:
 10941                                  ;;	;LODS	CS:BYTE PTR [SI]
 10942                                  ;;	CS	LODSB
 10943                                  ;;	CMP     AL,"$" ; 24h
 10944                                  ;;	JZ	SHORT RET18
 10945                                  ;;	CALL	OUTT
 10946                                  ;;	JMP     SHORT OUTMES
 10947                                  
 10948                                  ; ---------------------------------------------------------------------------
 10949                                  
 10950                                  ; 20/07/2018 - Retro DOS v3.0
 10951                                  
 10952                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 10953                                  
 10954                                  ;
 10955                                  ;----------------------------------------------------------------------------
 10956                                  ;
 10957                                  ; Inputs:
 10958                                  ;	AX=0 save the DEVCALL request packet
 10959                                  ;	  =1 restore the DEVCALL request packet
 10960                                  ; Function:
 10961                                  ;	save or restore the DEVCALL packet
 10962                                  ; Returns:
 10963                                  ;	none
 10964                                  ;
 10965                                  ;----------------------------------------------------------------------------
 10966                                  ;
 10967                                  
 10968                                  ; 04/05/2019 - Retro DOS v4.0
 10969                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 10970                                  
 10971                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10972                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 10973                                  
 10974                                  ; 12/05/2019
 10975                                  
 10976                                  Save_Restore_Packet:
 10977 00001647 1E                      	PUSH	DS
 10978 00001648 06                      	PUSH	ES
 10979 00001649 56                      	PUSH	SI
 10980 0000164A 57                      	PUSH	DI
 10981                                  
 10982                                  	; 16/12/2022
 10983                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10984                                  	; 09/09/2018
 10985 0000164B BF[6C0D]                	mov	di,FAKE_STACK_2F 
 10986 0000164E BE[5A03]                	mov	si,DEVCALL
 10987                                  	;
 10988                                  	; 21/09/2023
 10989 00001651 09C0                    	or	ax,ax
 10990                                  	;CMP	AX,0		; save packet
 10991 00001653 7402                    	JZ	short save_packet ; 16/12/2022
 10992                                  	;je	short set_seg
 10993                                  
 10994                                  	; MSDOS 6.0
 10995                                  restore_packet:
 10996                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 10997                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 10998                                  	; MSDOS 3.3
 10999                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11000                                  	;mov	di,DEVCALL  ; 09/09/2018
 11001                                  	;
 11002                                  	;JMP	short set_seg
 11003                                  
 11004                                  	; 16/12/2022	
 11005                                  	; 09/09/2018
 11006 00001655 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 11007                                  
 11008                                  ; 16/12/2022
 11009                                  %if 0
 11010                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11011                                  	cmp	ax,0		; save packet
 11012                                  	jz	short save_packet
 11013                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 11014                                  	mov	di,DEVCALL 
 11015                                  	jmp	short set_seg
 11016                                  
 11017                                  	; MSDOS 6.0
 11018                                  save_packet:
 11019                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 11020                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 11021                                  	; 09/09/2018
 11022                                  	; MSDOS 3.3
 11023                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11024                                  	;mov	si,DEVCALL ; 09/09/2018
 11025                                  
 11026                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11027                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11028                                  	mov	si,DEVCALL
 11029                                  %endif
 11030                                  
 11031                                  ; 16/12/2022
 11032                                  save_packet:
 11033                                  ;set_seg:
 11034                                  	; MSDOS 3.3
 11035                                  	;mov	ax,cs
 11036                                  
 11037                                  	; MSDOS 6.0
 11038 00001657 8CD0                    	MOV	AX,SS		; set DS,ES to DOSDATA	
 11039                                  
 11040 00001659 8ED8                    	MOV	DS,AX
 11041 0000165B 8EC0                    	MOV	ES,AX
 11042 0000165D B90B00                  	MOV	CX,11		; 11 words to move
 11043 00001660 F3A5                    	REP	MOVSW
 11044                                  
 11045 00001662 5F                      	POP	DI
 11046 00001663 5E                      	POP	SI
 11047 00001664 07                      	POP	ES
 11048 00001665 1F                      	POP	DS
 11049 00001666 C3                      	retn
 11050                                  
 11051                                  ;============================================================================
 11052                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 11053                                  ;============================================================================
 11054                                  ; 20/07/2018 - Retro DOS v3.0
 11055                                  ; 01/05/2019 - Retro DOS v4.0
 11056                                  
 11057                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 11058                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 11059                                  ;hkn;	not valid. 
 11060                                  
 11061                                  ;
 11062                                  ;----------------------------------------------------------------------------
 11063                                  ;
 11064                                  ;**	$STD_CON_INPUT - System Call 1
 11065                                  ;
 11066                                  ;	Input character from console, echo
 11067                                  ;
 11068                                  ;	ENTRY	none
 11069                                  ;	EXIT	(al) = character
 11070                                  ;	USES	ALL
 11071                                  ;
 11072                                  ;----------------------------------------------------------------------------
 11073                                  ;
 11074                                  
 11075                                  _$STD_CON_INPUT:	;System call 1
 11076                                  	
 11077 00001667 E816FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 11078 0000166A 50                      	PUSH	AX
 11079 0000166B E80400                  	CALL	OUTT
 11080 0000166E 58                      	POP	AX
 11081                                  CON_INPUT_RETN:	
 11082 0000166F C3                      	RETN
 11083                                  
 11084                                  ;
 11085                                  ;----------------------------------------------------------------------------
 11086                                  ;
 11087                                  ;**	$STD_CON_OUTPUT - System Call 2
 11088                                  ;
 11089                                  ;	Output character to console
 11090                                  ;
 11091                                  ;	ENTRY	(dl) = character
 11092                                  ;	EXIT	none
 11093                                  ;	USES	all
 11094                                  ;
 11095                                  ;----------------------------------------------------------------------------
 11096                                  ;
 11097                                  
 11098                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 11099                                  
 11100                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11101                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 11102                                  
 11103                                  _$STD_CON_OUTPUT:	;System call 2
 11104                                  
 11105 00001670 88D0                    	MOV	AL,DL
 11106                                  OUTT:
 11107 00001672 3C20                    	CMP	AL,20H ; " "
 11108 00001674 725C                    	JB	SHORT CTRLOUT
 11109 00001676 3C7F                    	CMP	AL,c_DEL ; 7Fh
 11110 00001678 7405                    	JZ	SHORT OUTCH
 11111                                  OUTCHA:	
 11112                                  	;INC	BYTE PTR [CARPOS]
 11113 0000167A 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 11114                                  OUTCH:
 11115 0000167F 1E                      	PUSH	DS
 11116 00001680 56                      	PUSH	SI
 11117                                  	;INC	BYTE PTR [CHARCO]		;invoke  statchk...
 11118                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 11119 00001681 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 11120                                  	;AND	BYTE [SS:CHARCO],00111111B
 11121                                  	; 01/05/2019 - Retro DOS v4.0
 11122 00001686 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 11123 0000168C 7505                    	JNZ	SHORT OUTSKIP
 11124                                  
 11125 0000168E 50                      	PUSH	AX
 11126 0000168F E8F93A                  	CALL	STATCHK
 11127 00001692 58                      	POP	AX
 11128                                  OUTSKIP:
 11129 00001693 E860FF                  	CALL	RAWOUT				;output the character
 11130                                  
 11131 00001696 5E                      	POP	SI
 11132 00001697 1F                      	POP	DS
 11133                                  
 11134                                  	;TEST	BYTE PTR [PFLAG],-1
 11135                                  	;retz
 11136 00001698 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11137 0000169E 74CF                    	JZ	SHORT CON_INPUT_RETN
 11138                                  
 11139 000016A0 53                      	PUSH	BX
 11140 000016A1 1E                      	PUSH	DS
 11141 000016A2 56                      	PUSH	SI
 11142 000016A3 BB0100                  	MOV	BX,1
 11143                                  	; 20/07/2018 - Retro DOS v3.0
 11144                                  	; MSDOS 3.3
 11145                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11146 000016A6 E8D31F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI 
 11147                                  					;hkn; to sft entry
 11148 000016A9 7224                    	JC	SHORT TRIPOPJ
 11149                                  
 11150                                  	; 01/05/2019 - Retro DOS v4.0
 11151                                  
 11152                                  	;mov	bx,[si+5]
 11153 000016AB 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11154                                  	;test	bx,8000h
 11155                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11156 000016AE F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11157 000016B1 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11158                                  	;;test	bx,80h
 11159                                  	;TEST	BX,devid_device 		; output to file?
 11160 000016B3 F6C380                  	test	bl,devid_device ; 80h
 11161 000016B6 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11162                                  	; 14/03/2018
 11163                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11164                                  	;jc	short TRIPOPJ
 11165                                  	; MSDOS 2.11
 11166                                  	;test	byte [SI+18H], 80h
 11167                                  	;jz	short TRIPOPJ
 11168 000016B8 BB0400                  	MOV	BX,4
 11169 000016BB E8BE1F                  	CALL	GET_IO_SFT
 11170 000016BE 720F                    	JC	SHORT TRIPOPJ
 11171                                  	;;test	word [si+5], 800h
 11172                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11173                                  	;test	byte [si+6],8 ; 08/11/2022
 11174 000016C0 F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11175                                  						; StdPrn redirected?
 11176                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11177                                  	;jz	LISSTRT2 ; 10/08/2018 
 11178                                  	; 16/12/2022
 11179 000016C4 7503                    	jnz	short outch1
 11180 000016C6 E98700                  	jmp	LISSTRT2
 11181                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11182                                  	;jz	short LISSTRT2J
 11183                                  outch1:
 11184                                  	;MOV	BYTE [PFLAG],0			
 11185 000016C9 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11186                                  	; MSDOS 2.11
 11187                                  	;mov	bx,4
 11188                                  	;jmp	short LISSTRT2
 11189                                  	
 11190                                  TRIPOPJ:
 11191                                  	; 20/07/2018
 11192 000016CF E98100                  	JMP	TRIPOP
 11193                                  
 11194                                  	; 16/12/2022
 11195                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11196                                  ;LISSTRT2J:
 11197                                  ;	JMP	LISSTRT2
 11198                                  
 11199                                  CTRLOUT:
 11200 000016D2 3C0D                    	CMP	AL,c_CR ; 0Dh
 11201 000016D4 7420                    	JZ	SHORT ZERPOS
 11202 000016D6 3C08                    	CMP	AL,c_BS ; 8
 11203 000016D8 7424                    	JZ	SHORT BACKPOS
 11204 000016DA 3C09                    	CMP	AL,c_HT ; 9
 11205 000016DC 75A1                    	JNZ	SHORT OUTCH
 11206                                  	;MOV	AL,[CARPOS]
 11207 000016DE 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11208 000016E2 0CF8                    	OR	AL,0F8H
 11209 000016E4 F6D8                    	NEG	AL
 11210                                  TAB:
 11211 000016E6 51                      	PUSH	CX
 11212 000016E7 88C1                    	MOV	CL,AL
 11213 000016E9 B500                    	MOV	CH,0
 11214 000016EB E307                    	JCXZ	POPTAB
 11215                                  TABLP:
 11216 000016ED B020                    	MOV	AL," "
 11217 000016EF E880FF                  	CALL	OUTT
 11218 000016F2 E2F9                    	LOOP	TABLP
 11219                                  POPTAB:
 11220 000016F4 59                      	POP	CX
 11221                                  
 11222 000016F5 C3                      	RETN
 11223                                  
 11224                                  ZERPOS:
 11225                                  	;MOV	BYTE PTR [CARPOS],0
 11226 000016F6 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11227                                  	; 10/08/2018
 11228 000016FC EB81                    	JMP	short OUTCH ; 04/05/2019
 11229                                  	
 11230                                  	; 18/12/2022
 11231                                  ;OUTJ:	
 11232                                  	;JMP	OUTT
 11233                                  
 11234                                  BACKPOS:
 11235                                  	;DEC	BYTE PTR [CARPOS]
 11236 000016FE 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11237 00001703 E979FF                  	JMP	OUTCH
 11238                                  
 11239                                  BUFOUT:
 11240 00001706 3C20                    	CMP	AL," "
 11241 00001708 7315                    	JAE	SHORT OUTJ		;Normal char
 11242 0000170A 3C09                    	CMP	AL,9
 11243 0000170C 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11244                                  	;DOS 3.3  7/14/86
 11245 0000170E 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11246 00001710 740D                    	JZ	short CTRLU
 11247 00001712 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11248 00001714 7409                    	JZ	short CTRLU
 11249                                  NOT_CTRLU:
 11250                                  	;DOS 3.3  7/14/86
 11251 00001716 50                      	PUSH	AX
 11252 00001717 B05E                    	MOV	AL,"^"
 11253 00001719 E856FF                  	CALL	OUTT		;Print '^' before control chars
 11254 0000171C 58                      	POP	AX
 11255 0000171D 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11256                                  CTRLU:
 11257                                  	;CALL	OUTT
 11258                                  	; 18/12/2022
 11259                                  OUTJ:
 11260 0000171F E950FF                  	jmp	OUTT
 11261                                  ;BUFOUT_RETN:
 11262                                  	;RETN
 11263                                  
 11264                                  ;
 11265                                  ;----------------------------------------------------------------------------
 11266                                  ;
 11267                                  ;**	$STD_AUX_INPUT - System Call 3
 11268                                  ;
 11269                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11270                                  ;
 11271                                  ;	ENTRY	none
 11272                                  ;	EXIT	(al) = character
 11273                                  ;	USES	all
 11274                                  ;
 11275                                  ;----------------------------------------------------------------------------
 11276                                  ;
 11277                                  
 11278                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11279                                  
 11280                                  _$STD_AUX_INPUT:	;System call 3
 11281                                  
 11282 00001722 E8663A                  	CALL	STATCHK
 11283 00001725 BB0300                  	MOV	BX,3
 11284 00001728 E8511F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11285                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11286                                  	;retc
 11287                                  	; 16/12/2022
 11288                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11289                                  	;JC	SHORT BUFOUT_RETN
 11290                                  	;JMP	SHORT TAISTRT
 11291                                  	; 07/12/2022
 11292 0000172B 7304                    	jnc	SHORT TAISTRT
 11293 0000172D C3                      	retn	
 11294                                  
 11295                                  AUXILP:
 11296 0000172E E82C3A                  	CALL	SPOOLINT
 11297                                  TAISTRT:
 11298 00001731 B401                    	MOV	AH,1
 11299 00001733 E88C2D                  	CALL	IOFUNC
 11300 00001736 74F6                    	JZ	SHORT AUXILP
 11301 00001738 30E4                    	XOR	AH,AH
 11302                                  	; 16/12/2022
 11303                                  	;CALL	IOFUNC
 11304                                  	;RETN
 11305                                  	; 07/12/2022
 11306 0000173A E9852D                  	jmp	IOFUNC
 11307                                  
 11308                                  ;
 11309                                  ;----------------------------------------------------------------------------
 11310                                  ;
 11311                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11312                                  ;
 11313                                  ;	ENTRY	(dl) = character
 11314                                  ;	EXIT	none
 11315                                  ;	USES	all
 11316                                  ;
 11317                                  ;----------------------------------------------------------------------------
 11318                                  ;
 11319                                  
 11320                                  _$STD_AUX_OUTPUT:	;System call 4
 11321                                  
 11322 0000173D 53                      	PUSH	BX
 11323 0000173E BB0300                  	MOV	BX,3
 11324 00001741 EB04                    	JMP	SHORT SENDOUT
 11325                                  
 11326                                  ;
 11327                                  ;----------------------------------------------------------------------------
 11328                                  ;
 11329                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11330                                  ;
 11331                                  ;	ENTRY	(dl) = character
 11332                                  ;	EXIT	none
 11333                                  ;	USES	all
 11334                                  ;
 11335                                  ;----------------------------------------------------------------------------
 11336                                  ;
 11337                                  
 11338                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11339                                  
 11340 00001743 53                      	PUSH	BX
 11341 00001744 BB0400                  	MOV	BX,4
 11342                                  
 11343                                  SENDOUT:
 11344 00001747 88D0                    	MOV	AL,DL
 11345 00001749 50                      	PUSH	AX
 11346 0000174A E83E3A                  	CALL	STATCHK
 11347 0000174D 58                      	POP	AX
 11348 0000174E 1E                      	PUSH	DS
 11349 0000174F 56                      	PUSH	SI
 11350                                  LISSTRT2:
 11351 00001750 E8CEFE                  	CALL	RAWOUT2
 11352                                  TRIPOP:
 11353 00001753 5E                      	POP	SI
 11354 00001754 1F                      	POP	DS
 11355 00001755 5B                      	POP	BX
 11356                                  SCIS_RETN:	; 20/07/2018
 11357 00001756 C3                      	RETN
 11358                                  ;
 11359                                  ;----------------------------------------------------------------------------
 11360                                  ;
 11361                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11362                                  ;
 11363                                  ;	Check console input status
 11364                                  ;
 11365                                  ;	ENTRY	none
 11366                                  ;	EXIT	AL = -1 character available, = 0 no character
 11367                                  ;	USES	all
 11368                                  ;
 11369                                  ;----------------------------------------------------------------------------
 11370                                  ;
 11371                                  
 11372                                  _$STD_CON_INPUT_STATUS:		;System call 11
 11373                                  
 11374 00001757 E8313A                  	CALL	STATCHK
 11375 0000175A B000                    	MOV	AL,0		; no xor!!
 11376                                  	;retz
 11377 0000175C 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11378 0000175E 0CFF                    	OR	AL,-1
 11379                                  ;SCIS_RETN:
 11380 00001760 C3                      	RETN
 11381                                  
 11382                                  ;
 11383                                  ;----------------------------------------------------------------------------
 11384                                  ;
 11385                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11386                                  ;
 11387                                  ;	Flush console input buffer and perform call in AL
 11388                                  ;
 11389                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11390                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11391                                  ;		return arguments for the fcn supplied in (AL)
 11392                                  ;	USES	all
 11393                                  ;
 11394                                  ;----------------------------------------------------------------------------
 11395                                  ;
 11396                                  
 11397                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11398                                  
 11399 00001761 50                      	PUSH	AX
 11400 00001762 52                      	PUSH	DX
 11401 00001763 31DB                    	XOR	BX,BX
 11402 00001765 E8141F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11403                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11404 00001768 7205                    	JC	SHORT BADJFNCON
 11405 0000176A B404                    	MOV	AH,4
 11406 0000176C E8532D                  	CALL	IOFUNC
 11407                                  
 11408                                  BADJFNCON:
 11409 0000176F 5A                      	POP	DX
 11410 00001770 58                      	POP	AX
 11411 00001771 88C4                    	MOV	AH,AL
 11412 00001773 3C01                    	CMP	AL,1
 11413 00001775 7413                    	JZ	SHORT REDISPJ
 11414 00001777 3C06                    	CMP	AL,6
 11415 00001779 740F                    	JZ	SHORT REDISPJ
 11416 0000177B 3C07                    	CMP	AL,7
 11417 0000177D 740B                    	JZ	SHORT REDISPJ
 11418 0000177F 3C08                    	CMP	AL,8
 11419 00001781 7407                    	JZ	SHORT REDISPJ
 11420 00001783 3C0A                    	CMP	AL,10
 11421 00001785 7403                    	JZ	SHORT REDISPJ
 11422 00001787 B000                    	MOV	AL,0
 11423 00001789 C3                      	RETN
 11424                                  
 11425                                  REDISPJ:
 11426 0000178A FA                      	CLI
 11427                                  	;transfer REDISP
 11428 0000178B E9F9EB                  	JMP	REDISP
 11429                                  
 11430                                  ;============================================================================
 11431                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11432                                  ;============================================================================
 11433                                  ; 20/07/2018 - Retro DOS v3.0
 11434                                  ; 17/05/2019 - Retro DOS v4.0
 11435                                  
 11436                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11437                                  ;
 11438                                  ;	$GET_FCB_POSITION
 11439                                  ;	$FCB_DELETE
 11440                                  ;	$GET_FCB_FILE_LENGTH
 11441                                  ;	$FCB_CLOSE
 11442                                  ;	$FCB_RENAME
 11443                                  ;	SaveFCBInfo
 11444                                  ;	ResetLRU
 11445                                  ;	SetOpenAge
 11446                                  ;	LRUFCB
 11447                                  ;	FCBRegen
 11448                                  ;	BlastSFT
 11449                                  ;	CheckFCB
 11450                                  ;	SFTFromFCB
 11451                                  ;	FCBHardErr
 11452                                  ;
 11453                                  ;	Revision history:
 11454                                  ;
 11455                                  ;		Created: ARR 4 April 1983"
 11456                                  ;			 MZ  6 June  1983 completion of functions
 11457                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11458                                  ;					  times.  Change so successive closes work by
 11459                                  ;					  always returning OK.	Also, detect I/O to
 11460                                  ;					  already closed FCB and return EOF.
 11461                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11462                                  ;					  out of sft into FCB for reconnection
 11463                                  ;
 11464                                  ;		A000	 version 4.00  Jan. 1988
 11465                                  
 11466                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11467                                  ;----------------------------------------------------------------------------
 11468                                  ;
 11469                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11470                                  ;	extent and next record field and set the random record field to point
 11471                                  ;	to that record
 11472                                  ;
 11473                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11474                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11475                                  ;   Registers modified: all
 11476                                  ;
 11477                                  ;----------------------------------------------------------------------------
 11478                                  ;
 11479                                  
 11480                                  _$GET_FCB_POSITION:
 11481 0000178E E8F204                  	call	GetExtended		; point to FCB
 11482 00001791 E8C204                  	call	GetExtent		; DX:AX is current record
 11483                                  	;mov	[si+21h],ax
 11484 00001794 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11485                                  	;mov	[si+23h],dl
 11486 00001797 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11487                                  	;cmp	word [si+0Eh],64
 11488 0000179A 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11489 0000179E 7303                    	JAE	short GetFCBBye
 11490                                  	;mov	[si+24h],dh
 11491 000017A0 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11492                                  GoodPath:	; 16/12/2022
 11493                                  GetFCBBye:
 11494 000017A3 E9B1EE                  	jmp	FCB_RET_OK
 11495                                  
 11496                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11497                                  ;----------------------------------------------------------------------------
 11498                                  ;
 11499                                  ;**	$FCB_Delete - Delete from FCB Template
 11500                                  ;
 11501                                  ;	given an FCB, remove all directory entries in the current
 11502                                  ;	directory that have names that match the FCB's ?  marks.
 11503                                  ;
 11504                                  ;	ENTRY	(DS:DX) = address of FCB
 11505                                  ;	EXIT	entries matching the FCB are deleted
 11506                                  ;		(al) = ff iff no entries were deleted
 11507                                  ;	USES	all
 11508                                  ;
 11509                                  ;----------------------------------------------------------------------------
 11510                                  ;
 11511                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11512                                  
 11513                                  _$FCB_DELETE:		; System call 19
 11514                                  					; OpenBuf is in DOSDATA
 11515 000017A6 BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11516                                  
 11517 000017A9 E88653                  	call	TransFCB		; convert FCB to path
 11518 000017AC 7207                    	JC	short BadPath 		; signal no deletions
 11519                                  
 11520 000017AE 16                      	push	SS
 11521 000017AF 1F                      	pop	DS			; SS is DOSDATA
 11522                                  
 11523 000017B0 E89D0D                  	call	DOS_DELETE		; wham
 11524                                  	;JC	short BadPath
 11525                                  	; 16/12/2022
 11526 000017B3 73EE                    	jnc 	short GoodPath
 11527                                  ;GoodPath:
 11528                                  ;	;jmp	FCB_RET_OK		; do a good return
 11529                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11530                                  ;	jmp	short GetFCBBye
 11531                                  
 11532                                  BadPath:
 11533                                  	; Error code is in AX
 11534                                  
 11535 000017B5 E9A2EE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11536                                  
 11537                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11538                                  ;----------------------------------------------------------------------------
 11539                                  ;
 11540                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11541                                  ;	file in records (rounded up if partial).
 11542                                  ;
 11543                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11544                                  ;   Outputs:	Random record field updated to reflect the number of records
 11545                                  ;   Registers modified: all
 11546                                  ;
 11547                                  ;----------------------------------------------------------------------------
 11548                                  ;
 11549                                  
 11550                                  _$GET_FCB_FILE_LENGTH:
 11551                                  
 11552 000017B8 E8C804                  	call	GetExtended		; get real FCB pointer
 11553                                  					; DX points to Input FCB
 11554                                  
 11555                                  					; OpenBuf is in DOSDATA
 11556 000017BB BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11557                                  
 11558 000017BE 1E                      	push	ds			; save pointer to true FCB
 11559 000017BF 56                      	push	si
 11560 000017C0 E86F53                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11561 000017C3 5E                      	pop	si
 11562 000017C4 1F                      	pop	ds
 11563 000017C5 72EE                    	JC	short BadPath
 11564 000017C7 1E                      	push	ds			; save pointer
 11565 000017C8 56                      	push	si
 11566 000017C9 16                      	push	ss		
 11567 000017CA 1F                      	pop	ds
 11568 000017CB E89211                  	call	GET_FILE_INFO		; grab the info
 11569 000017CE 5E                      	pop	si			; get pointer back
 11570 000017CF 1F                      	pop	ds
 11571 000017D0 72E3                    	JC	short BadPath 		; invalid something
 11572 000017D2 89DA                    	MOV	DX,BX			; get high order size
 11573 000017D4 89F8                    	MOV	AX,DI			; get low order size
 11574                                  	;mov	bx,[si+0Eh]
 11575 000017D6 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11576 000017D9 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11577 000017DB 7503                    	JNZ	short GetSize 		; not empty
 11578 000017DD BB8000                  	MOV	BX,128
 11579                                  GetSize:
 11580 000017E0 89C7                    	MOV	DI,AX			; save low order word
 11581 000017E2 89D0                    	MOV	AX,DX			; move high order for divide
 11582 000017E4 31D2                    	XOR	DX,DX			; clear out high
 11583 000017E6 F7F3                    	DIV	BX			; wham
 11584 000017E8 50                      	PUSH	AX			; save dividend
 11585 000017E9 89F8                    	MOV	AX,DI			; get low order piece
 11586 000017EB F7F3                    	DIV	BX			; wham
 11587 000017ED 89D1                    	MOV	CX,DX			; save remainder
 11588 000017EF 5A                      	POP	DX			; get high order dividend
 11589 000017F0 E306                    	JCXZ	LengthStore		; no roundup
 11590 000017F2 83C001                  	ADD	AX,1
 11591 000017F5 83D200                  	ADC	DX,0			; 32-bit increment
 11592                                  LengthStore:
 11593                                  	;mov	[si+21h],ax
 11594 000017F8 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11595                                  	;mov	[si+23h],dl
 11596 000017FB 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11597 000017FE 08F6                    	OR	DH,DH
 11598 00001800 74A1                    	JZ	short GoodPath		; not storing insignificant zero
 11599                                  	;mov	[si+24h],dh
 11600 00001802 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11601                                  	; 16/12/2022
 11602                                  GoodRet:
 11603                                  	;jmp	FCB_RET_OK
 11604 00001805 EB9C                    	jmp	short GoodPath
 11605                                  
 11606                                  ;Break <$FCB_Close - close a file>
 11607                                  ;----------------------------------------------------------------------------
 11608                                  ;
 11609                                  ;   $FCB_Close - given an FCB, look up the SFN and close it.  Do not free it
 11610                                  ;	as the FCB may be used for further I/O
 11611                                  ;
 11612                                  ;   Inputs:	DS:DX point to FCB
 11613                                  ;   Outputs:	AL = FF if file was not found on disk
 11614                                  ;   Registers modified: all
 11615                                  ;
 11616                                  ;----------------------------------------------------------------------------
 11617                                  ;
 11618                                  
 11619                                  _$FCB_CLOSE:		; System call 16
 11620                                  
 11621 00001807 30C0                    	XOR	AL,AL			; default search attributes
 11622 00001809 E87704                  	call	GetExtended		; DS:SI point to real FCB
 11623 0000180C 7403                    	JZ	short NoAttr		; not extended
 11624 0000180E 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11625                                  NoAttr:
 11626                                  					; SS override
 11627 00001811 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11628 00001815 E8D903                  	call	SFTFromFCB
 11629 00001818 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11630                                  
 11631                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11632                                  	; there is no need to set the SFT's attribute.
 11633                                  
 11634                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11635                                  	;;; done
 11636                                  
 11637                                  	;mov	al,[es:di+4]
 11638 0000181A 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11639 0000181E 30E4                    	XOR	AH,AH
 11640 00001820 50                      	PUSH	AX
 11641                                  
 11642                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11643                                  	;;; done
 11644                                  
 11645 00001821 E83A5B                  	call	CheckShare
 11646 00001824 7508                    	JNZ	short NoStash
 11647 00001826 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11648                                  	;mov	[es:di+4],al
 11649 0000182A 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11650                                  NoStash:
 11651                                  	;mov	ax,[si+14h]
 11652 0000182E 8B4414                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11653                                  	;mov	[es:di+0Fh],ax
 11654 00001831 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11655                                  	;mov	ax,[si+16h]
 11656 00001835 8B4416                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11657                                  	;mov	[es:di+0Dh],ax
 11658 00001838 2689450D                	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11659                                  	;mov	ax,[si+10h]
 11660 0000183C 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11661                                  	;mov	[es:di+11h],ax
 11662 0000183F 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11663                                  	;mov	ax,[si+12h]
 11664 00001843 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11665                                  	;mov	[es:di+13h],ax
 11666 00001846 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11667                                  	;or	word [es:di+5],4000h
 11668                                  	; 17/12/2022
 11669 0000184A 26804D0640              	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11670                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11671 0000184F 16                      	push	ss
 11672 00001850 1F                      	pop	ds
 11673 00001851 E80517                  	call	DOS_CLOSE	; wham
 11674 00001854 C43E[9E05]              	LES	DI,[THISSFT]
 11675                                  
 11676                                  	;;; 9/8/86 F.C. restore SFT attribute
 11677 00001858 59                      	POP	CX
 11678                                  	;mov	[es:di+4],cl
 11679 00001859 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11680                                  	;;; 9/8/86 F.C. restore SFT attribute
 11681                                  
 11682 0000185D 9C                      	PUSHF
 11683                                  	;test	word [es:di],0FFFFh
 11684                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11685                                  				; zero ref count gets blasted
 11686 0000185E 26833D00                	cmp	word [ES:DI],0
 11687 00001862 7507                    	jnz     short CloseOK
 11688 00001864 50                      	PUSH	AX
 11689 00001865 B04D                    	MOV	AL,'M'
 11690 00001867 E8FC02                  	call	BlastSFT
 11691 0000186A 58                      	POP	AX
 11692                                  CloseOK:
 11693 0000186B 9D                      	POPF
 11694 0000186C 7397                    	JNC	short GoodRet
 11695                                  	;cmp	al,6
 11696 0000186E 3C06                    	CMP	AL,error_invalid_handle
 11697 00001870 7493                    	JZ	short GoodRet
 11698                                  	;mov	al,2
 11699 00001872 B002                    	MOV	AL,error_file_not_found
 11700                                  fren90:
 11701                                  	; 16/12/2022
 11702                                  fcb_close_err:
 11703 00001874 E9E3ED                  	jmp	FCB_RET_ERR
 11704                                  
 11705                                  ;
 11706                                  ;----------------------------------------------------------------------------
 11707                                  ;
 11708                                  ;**	$FCB_Rename - Rename a File
 11709                                  ;
 11710                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11711                                  ;	multiple files copying from the meta characters.
 11712                                  ;
 11713                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11714                                  ;		    name of the files to be renamed. Starting at offset 11h
 11715                                  ;		    in the FCB is the destination name.
 11716                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11717                                  ;		AL = FF -> some files may have been renamed but:
 11718                                  ;			rename to existing file or source file not found
 11719                                  ;	USES	ALL
 11720                                  ;
 11721                                  ;----------------------------------------------------------------------------
 11722                                  ;
 11723                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11724                                  
 11725                                  _$FCB_RENAME:		; System call 23
 11726                                  
 11727 00001877 E80904                  	call	GetExtended		; get pointer to real FCB
 11728 0000187A 52                      	push	dx
 11729 0000187B 8A04                    	MOV	AL,[SI] 		; get drive byte
 11730 0000187D 83C610                  	ADD	SI,10h			; point to destination
 11731                                  
 11732                                  					; RenBuf is in DOSDATA
 11733 00001880 BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11734 00001883 FF34                    	push	word [SI]
 11735 00001885 1E                      	push	ds
 11736 00001886 57                      	push	di			; save source pointer for TransFCB
 11737 00001887 8804                    	MOV	[SI],AL			; drop in real drive
 11738 00001889 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11739 0000188B E8A452                  	call	TransFCB		; munch this pathname
 11740 0000188E 5E                      	pop	si
 11741 0000188F 1F                      	pop	ds	
 11742 00001890 8F04                    	pop	WORD [SI]		; get path back
 11743 00001892 5A                      	pop	dx			; Original FCB pointer
 11744 00001893 72DF                    	JC	short fren90		; bad path -> error
 11745                                  
 11746                                  					; SS override for WFP_Start & Ren_WFP
 11747 00001895 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11748 0000189A 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11749                                  
 11750                                  					; OpenBuf is in DOSDATA
 11751 0000189F BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11752 000018A2 E88D52                  	call	TransFCB		; wham
 11753                                  					; NOTE that this call is pointing
 11754                                  					;  back to the ORIGINAL FCB so
 11755                                  					;  SATTRIB gets set correctly
 11756 000018A5 72CD                    	JC	short fren90		; error
 11757 000018A7 E8840E                  	call	DOS_RENAME
 11758 000018AA 72C8                    	JC	short fren90
 11759                                  	; 16/12/2022
 11760 000018AC E9A8ED                  	jmp	FCB_RET_OK
 11761                                  	
 11762                                  ;	Error -
 11763                                  ;
 11764                                  ;	(al) = error code
 11765                                  
 11766                                  	; 16/12/2022
 11767                                  ;fren90:	
 11768                                  ;	;jmp	FCB_RET_ERR
 11769                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11770                                  ;	jmp	short fcb_close_err
 11771                                  
 11772                                  ;Break <Misbehavior fixers>
 11773                                  ;
 11774                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11775                                  ;   user's space so he may move them at will. Second, they have a small
 11776                                  ;   reserved area that may be used for system information. Third, there was
 11777                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11778                                  ;   usage.
 11779                                  ;
 11780                                  ;   This results in the following misbehavior:
 11781                                  ;
 11782                                  ;	infinite opens of the same file:
 11783                                  ;
 11784                                  ;	While (TRUE) {			While (TRUE) {
 11785                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11786                                  ;	    Read (FCB); 		    Write (FCB);
 11787                                  ;	    }				    }
 11788                                  ;
 11789                                  ;	infinite opens of different files:
 11790                                  ;
 11791                                  ;	While (TRUE) {			While (TRUE) {
 11792                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11793                                  ;	    Read (FCB); 		    Write (FCB);
 11794                                  ;	    }				    }
 11795                                  ;
 11796                                  ;	multiple closes of the same file:
 11797                                  ;
 11798                                  ;	FCBOpen (FCB);
 11799                                  ;	while (TRUE)
 11800                                  ;	    FCBClose (FCB);
 11801                                  ;
 11802                                  ;	I/O after closing file:
 11803                                  ;
 11804                                  ;	FCBOpen (FCB);
 11805                                  ;	while (TRUE) {
 11806                                  ;	    FCBWrite (FCB);
 11807                                  ;	    FCBClose (FCB);
 11808                                  ;	    }
 11809                                  ;
 11810                                  ;   The following is am implementation of a methodology for emulating the
 11811                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11812                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11813                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11814                                  ;   the local machine.
 11815                                  ;
 11816                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11817                                  ;   structures depending on the file itself and the state of operations of the
 11818                                  ;   OS. The information contained in this reserved field is enough to
 11819                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11820                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11821                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11822                                  ;
 11823                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11824                                  ;
 11825                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11826                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11827                                  ;   regenerated.
 11828                                  ;
 11829                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11830                                  ;   longer available. We can make up for this by using the following
 11831                                  ;   information:
 11832                                  ;
 11833                                  ;	The Drive number (from the DPB).
 11834                                  ;	The physical sector of the directory that contains the entry.
 11835                                  ;	The relative position of the entry in the sector.
 11836                                  ;	The first cluster field.
 11837                                  ;	The last used SFT.
 11838                                  ;      OR In the case of a device FCB
 11839                                  ;	The low 6 bits of sf_flags (indicating device type)
 11840                                  ;	The pointer to the device header
 11841                                  ;
 11842                                  ;   We read in the particular directory sector and examine the indicated
 11843                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11844                                  ;
 11845                                  ;   Some key items need to be remembered:
 11846                                  ;
 11847                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11848                                  ;	information. We enforce good behavior on the FCBs.
 11849                                  ;
 11850                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11851                                  ;	open VCs. The VCs may be closed only at process termination.
 11852                                  ;
 11853                                  ;	If this is not an installed version of the DOS, file sharing will
 11854                                  ;	always be present.
 11855                                  ;
 11856                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11857                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11858                                  ;
 11859                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11860                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11861                                  ;	proper OI record.
 11862                                  ;
 11863                                  ;   The test bits are:
 11864                                  ;
 11865                                  ;	00 -> local file
 11866                                  ;	40 -> sharing local
 11867                                  ;	80 -> network
 11868                                  ;	C0 -> local device
 11869                                  
 11870                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 11871                                  ;----------------------------------------------------------------------------
 11872                                  ;
 11873                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 11874                                  ;	pieces of information into the FCB to allow for subsequent
 11875                                  ;	regeneration. Poke LRU also.
 11876                                  ;
 11877                                  ;   Inputs:	ThisSFT points to a complete SFT.
 11878                                  ;		DS:SI point to the FCB (not an extended one)
 11879                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 11880                                  ;		DS:SI preserved
 11881                                  ;		ES:DI point to sft
 11882                                  ;   Registers modified: All
 11883                                  ;
 11884                                  ;
 11885                                  ;----------------------------------------------------------------------------
 11886                                  ;
 11887                                  
 11888                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11889                                  
 11890                                  SaveFCBInfo:
 11891                                  
 11892 000018AF 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 11893 000018B4 E8B4F9                  	call	IsSFTNet
 11894 000018B7 740B                    	JZ	short SaveLocal		; if not network then save local info
 11895                                  ;
 11896                                  ;----- In net support -----
 11897                                  ;
 11898                                  	; 17/05/2019 - Retro DOS v4.0
 11899                                  
 11900                                  	; MSDOS 3.3
 11901                                  	;;mov	ax,[es:di+1Dh]
 11902                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 11903                                  	;;mov	[si+1Ah],ax
 11904                                  	;mov	[si+fcb_net_handle],ax
 11905                                  	;push	es
 11906                                  	;push	di
 11907                                  	;;les	di,[es:di+19h]
 11908                                  	;LES	DI,[ES:DI+sf_netid]
 11909                                  	;;mov	[si+1Ch],di
 11910                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 11911                                  	;;mov 	[si+1Eh],es
 11912                                  	;MOV	[SI+fcb_netID+2],ES
 11913                                  	;pop	di
 11914                                  	;pop	es
 11915                                  
 11916                                  	; MSDOS 6.0
 11917                                  	;mov	ax,[es:di+0Bh]
 11918 000018B9 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 11919                                  	;mov	[si+1Ch],ax
 11920 000018BD 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 11921                                  	
 11922                                  	;mov	bl,80h
 11923 000018C0 B380                    	MOV	BL,FCBNETWORK
 11924                                  ;
 11925                                  ;----- END In net support -----
 11926                                  ;
 11927 000018C2 EB65                    	jmp	SHORT SaveSFN
 11928                                  
 11929                                  SaveLocal:
 11930                                  	;IF	Installed
 11931 000018C4 E8975A                  	call	CheckShare
 11932                                  	;JZ	short SaveNoShare	; no sharer
 11933                                  	;JMP	short SaveShare		; sharer present
 11934                                  	; 16/12/2022
 11935                                  	; 28/07/2019
 11936 000018C7 755B                    	jnz	short SaveShare
 11937                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11938                                  	;JZ	short SaveNoShare	; no sharer
 11939                                  	;JMP	short SaveShare		; sharer present
 11940                                  
 11941                                  SaveNoShare:
 11942                                  	;;test 	word [es:di+5],80h
 11943                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 11944 000018C9 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 11945 000018CE 7542                    	JNZ	short SaveNoShareDev	; Device
 11946                                  
 11947                                  	; Save no sharing local file information
 11948                                  
 11949                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 11950                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 11951 000018D0 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 11952                                  	;mov	[si+1Dh],ax
 11953 000018D4 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 11954                                  
 11955                                  	; MSDOS 6.0
 11956                                  
 11957                                  	;SR; Store high byte of directory sector
 11958                                  	;mov	ax,[es:di+1Dh]
 11959 000018D7 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 11960                                  	
 11961                                  	; SR;
 11962                                  	; We have to store the read-only and archive attributes of the file.
 11963                                  	; We extract it from the SFT and store it in the top two bits of the 
 11964                                  	; sector number ( sector number == 22 bits only )
 11965                                  
 11966                                  	;mov	bl,[es:di+4]
 11967 000018DB 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 11968 000018DF 88DF                    	mov	bh,bl
 11969 000018E1 D0CB                    	ror	bl,1
 11970 000018E3 D0E7                    	shl	bh,1
 11971 000018E5 08FB                    	or	bl,bh
 11972 000018E7 80E3C0                  	and	bl,0C0h
 11973 000018EA 08D8                    	or	al,bl
 11974                                  	;mov	[si+18h],al ; 08/11/2022
 11975 000018EC 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 11976                                  
 11977                                  	; MSDOS 6.0 (& MSDOS 3.3)
 11978                                  	;mov	al,[es:di+1Fh]
 11979 000018EF 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 11980                                  	;mov	[si+1Fh],al
 11981 000018F3 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 11982                                  	;mov	ax,[es:di+0Bh]
 11983 000018F6 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 11984                                  	;mov	[si+1Bh],ax
 11985 000018FA 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 11986 000018FD B300                    	MOV	BL,0
 11987                                  
 11988                                  	; Create the bits field from the dirty/device bits of the flags word 
 11989                                  	; and the mode byte
 11990                                  
 11991                                  SetFCBBits:
 11992                                  	;mov	ax,[es:di+5]
 11993 000018FF 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11994 00001903 24C0                    	AND	AL,0C0h 		; mask off drive bits
 11995                                  	;or	al,[es:di+2]
 11996 00001905 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 11997                                  	;mov	[si+1Ah], al
 11998 00001909 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 11999                                  
 12000                                  	; MSDOS 6.0
 12001                                  	
 12002                                  	; SR;
 12003                                  	; Check if we came here for local file or device. If for local file, 
 12004                                  	; skip setting of SFT index
 12005                                  	
 12006 0000190C 08DB                    	or	bl,bl
 12007 0000190E 742A                    	jz	short SaveNoSFN		; do not save SFN if local file
 12008                                  
 12009 00001910 EB17                    	JMP	short SaveSFN 		; go and save SFN
 12010                                  
 12011                                  	; Save no sharing local device information
 12012                                  
 12013                                  SaveNoShareDev:
 12014                                  	;mov	ax,[es:di+7]
 12015 00001912 268B4507                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 12016                                  	;mov	[si+1Ah],ax
 12017 00001916 89441A                  	MOV	[SI+fcb_nsld_drvptr],AX
 12018                                  	;mov	ax,[es:di+9]
 12019 00001919 268B4509                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 12020 0000191D 89441C                  	MOV	[SI+fcb_nsld_drvptr+2],AX
 12021                                  	;mov	bl,40h
 12022 00001920 B340                    	MOV	BL,FCBDEVICE
 12023                                  	; 28/12/2022
 12024 00001922 EBDB                    	JMP	short SetFCBBits	; go and save SFN
 12025                                  
 12026                                  SaveShare:
 12027                                  	;ENDIF
 12028                                  
 12029                                  ;----- In share support -----
 12030                                  
 12031                                  	;call	far [ss:ShSave]
 12032 00001924 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 12033                                  
 12034                                  ;----- end in share support -----
 12035                                  
 12036                                  	; 17/05/2019
 12037                                  
 12038                                  SaveSFN:
 12039                                  	;lea	ax,[di-6]
 12040 00001929 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 12041                                  	
 12042                                  	; Adjust for offset to table.
 12043                                  	
 12044 0000192C 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 12045                                  
 12046 00001931 53                      	push	bx			;bx = FCB type (net/Share or local)
 12047                                  	;;mov	bl,53 ; MSDOS 3.3
 12048                                  	;mov	bl,59 ; MSDOS 6.0
 12049 00001932 B33B                    	MOV	BL,SF_ENTRY.size
 12050 00001934 F6F3                    	DIV	BL
 12051                                  	;mov	[si+18h],al
 12052 00001936 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 12053 00001939 5B                      	pop	bx			;restore bx
 12054                                  
 12055                                  SaveNoSFN:
 12056                                  	;mov	ax,[es:di+5]
 12057 0000193A 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12058 0000193E 243F                    	AND	AL,3Fh			; get real drive
 12059 00001940 08D8                    	OR	AL,BL
 12060                                  	;mov	[si+19h],al
 12061 00001942 884419                  	MOV	[SI+fcb_l_drive],AL
 12062                                  
 12063 00001945 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 12064 00001949 40                      	INC	AX
 12065                                  	;mov	[es:di+15h],ax
 12066 0000194A 26894515                	MOV	[ES:DI+sf_LRU],AX
 12067 0000194E 7506                    	JNZ	short SimpleStuff
 12068                                  	
 12069                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 12070                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 12071                                  	
 12072                                  	;mov	bx,15h
 12073 00001950 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 12074 00001953 E80500                  	call	ResetLRU
 12075                                  
 12076                                  	; Set new LRU to AX
 12077                                  SimpleStuff:
 12078 00001956 36A3[1000]              	MOV	[SS:FCBLRU],AX
 12079 0000195A C3                      	retn
 12080                                  
 12081                                  ;Break	<ResetLRU - reset overflowed lru counts>
 12082                                  ;----------------------------------------------------------------------------
 12083                                  ;
 12084                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 12085                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 12086                                  ;   at 0.
 12087                                  ;
 12088                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 12089                                  ;		ES:DI point to SFT currently being updated
 12090                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 12091                                  ;		AX has 8000h
 12092                                  ;   Registers modified: none
 12093                                  ;
 12094                                  ;----------------------------------------------------------------------------
 12095                                  ;
 12096                                  
 12097                                  	; 17/05/2019 - Retro DOS v4.0
 12098                                  ResetLRU:
 12099                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 12100                                  	; DOSDATA
 12101                                  
 12102 0000195B B80080                  	MOV	AX,8000h
 12103 0000195E 06                      	push	es
 12104 0000195F 57                      	push	di
 12105                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 12106 00001960 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 12107                                  	;mov	cx,[es:di+4]
 12108 00001965 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 12109                                  	;lea	di,[di+6]
 12110 00001969 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 12111                                  ovScan:
 12112 0000196C 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 12113 0000196F 7703                    	JA	short ovLoop
 12114 00001971 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 12115                                  ovLoop:
 12116                                  	;;add	di,53	; MSDOS 3.3
 12117                                  	;add	di,59	; MSDOS 6.0	
 12118 00001974 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 12119 00001977 E2F3                    	LOOP	ovScan
 12120 00001979 5F                      	pop	di
 12121 0000197A 07                      	pop	es
 12122 0000197B 268901                  	MOV	[ES:DI+BX],AX
 12123 0000197E C3                      	retn
 12124                                  
 12125                                  ;IF  0  ; We dont need this routine any more.
 12126                                  ;
 12127                                  ;Break	<SetOpenAge - update the open age of a SFT>
 12128                                  ;----------------------------------------------------------------------------
 12129                                  ;
 12130                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 12131                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 12132                                  ;   count here and fill in the appropriate field.
 12133                                  ;
 12134                                  ;   Inputs:	ES:DI point to SFT
 12135                                  ;   Outputs:	ES:DI has the open age field filled in.
 12136                                  ;		If open age has wraparound, we will have subtracted 8000h
 12137                                  ;		    from all open ages.
 12138                                  ;   Registers modified: AX
 12139                                  ;
 12140                                  ;----------------------------------------------------------------------------
 12141                                  ;
 12142                                  ;SetOpenAge:
 12143                                  ;	; 20/07/2018 - Retro DOS v3.0
 12144                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12145                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12146                                  ;
 12147                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12148                                  ;
 12149                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12150                                  ;	INC	AX
 12151                                  ;	;mov	[es:di+17h],ax
 12152                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12153                                  ;	JNZ	short SetDone
 12154                                  ;	;mov	bx,17h
 12155                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12156                                  ;	call	ResetLRU
 12157                                  ;SetDone:
 12158                                  ;	MOV	[CS:OpenLRU],AX
 12159                                  ;	retn
 12160                                  ;
 12161                                  ;ENDIF	; SetOpenAge no longer needed
 12162                                  
 12163                                  ; 21/07/2018 - Retro DOS v3.0
 12164                                  ; LRUFCB for MSDOS 6.0 !
 12165                                  
 12166                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12167                                  ;----------------------------------------------------------------------------
 12168                                  ;
 12169                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12170                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12171                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12172                                  ;
 12173                                  ;   Inputs:	none
 12174                                  ;   Outputs:	ES:DI point to SFT
 12175                                  ;		ThisSFT points to SFT
 12176                                  ;		SFT is zeroed
 12177                                  ;		Carry set of closes failed
 12178                                  ;   Registers modified: none
 12179                                  ;
 12180                                  ;----------------------------------------------------------------------------
 12181                                  ;
 12182                                  ; MSDOS 6.0
 12183                                  ;IF 0	; rewritten this routine
 12184                                  ;
 12185                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12186                                  ;	call	save_world
 12187                                  ;	
 12188                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12189                                  ; to find the lease recently used one that is younger than the open age.  We
 12190                                  ; operate be scanning the list n times finding the least age that is greater
 12191                                  ; or equal to the previous minimum age.
 12192                                  ;
 12193                                  ;   BP is the count of times we need to go through this loop.
 12194                                  ;   AX is the current acceptable minimum age to consider
 12195                                  ;
 12196                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12197                                  ;	XOR	AX,AX			; low = 0;
 12198                                  ;
 12199                                  ; If we've scanned the table n times, then we are done.
 12200                                  ;
 12201                                  ;lru1:
 12202                                  ;	CMP	bp,0			; while (k--) {
 12203                                  ;	JZ	short lru75
 12204                                  ;	DEC	bp
 12205                                  ;
 12206                                  ; Set up for scan.
 12207                                  ;
 12208                                  ;   AX is the minimum age for consideration
 12209                                  ;   BX is the minimum age found during the scan
 12210                                  ;   SI is the position of the entry that corresponds to BX
 12211                                  ;
 12212                                  ;	MOV	BX,-1			;     min = 0xffff;
 12213                                  ;	MOV	si,BX			;     pos = 0xffff;
 12214                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12215                                  ;	;mov	cx,[es:di+4]
 12216                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12217                                  ;	;lea	di,[di+6]
 12218                                  ;	LEA	DI,[DI+SFT.SFTable]
 12219                                  ;
 12220                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12221                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12222                                  ; are done.  In both cases, we use the found entry.
 12223                                  ;
 12224                                  ;lru2:
 12225                                  ;	cmp	word [es:di],0
 12226                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12227                                  ;	jz	short lru25
 12228                                  ;	;cmp	word [es:di],-1
 12229                                  ;	;cmp	word [es:di+SFT_ENTRY.sf_ref_count],sf_busy
 12230                                  ;	cmp	word [es:di],sf_busy
 12231                                  ;	jnz	short lru3
 12232                                  ;
 12233                                  ; The entry is usable without further scan.  Go and use it.
 12234                                  ;
 12235                                  ;lru25:
 12236                                  ;	MOV	si,DI			;	      pos = i;
 12237                                  ;	JMP	short lru11		;	      goto got;
 12238                                  ;
 12239                                  ; See if the entry is for the network or for the sharer.
 12240                                  ;
 12241                                  ;  If for the sharer or network then
 12242                                  ;	if the age < current minimum AND >= allowed minimum then
 12243                                  ;	    this entry becomes current minimum
 12244                                  ;
 12245                                  ;lru3:
 12246                                  ;	;test	word [es:di+5],8000h
 12247                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12248                                  ;					;	  if (!net[i]
 12249                                  ;	JNZ	short lru35
 12250                                  ;if installed
 12251                                  ;	call	CheckShare		;		&& !sharing)
 12252                                  ;	JZ	short lru5		;	  else
 12253                                  ;ENDIF
 12254                                  ;
 12255                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12256                                  ; current minimum.
 12257                                  ;
 12258                                  ;lru35:
 12259                                  ;	;mov	dx,[es:di+17h]
 12260                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12261                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12262                                  ;	JB	short lru5
 12263                                  ;	CMP	DX,BX
 12264                                  ;	JAE	short lru5		;	      age[i] < min) {
 12265                                  ;
 12266                                  ; entry is new minimum.  Remember his age.
 12267                                  ;
 12268                                  ;	mov	bx,DX			;	      min = age[i];
 12269                                  ;	mov	si,di			;	      pos = i;
 12270                                  ;
 12271                                  ; End of loop.	gp back for more
 12272                                  ;
 12273                                  ;lru5:
 12274                                  ;	;add	di,53
 12275                                  ;	add	di,SF_ENTRY.size
 12276                                  ;	loop	lru2			;	      }
 12277                                  ;
 12278                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12279                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12280                                  ; complete.  Go find LRU.
 12281                                  ;
 12282                                  ;lru6:	
 12283                                  ;	cmp	si,-1			; position not -1?
 12284                                  ;	jz	short lru75		; no, done with everything
 12285                                  ;	lea	ax,[bx+1]		; set new threshold age
 12286                                  ;	jmp	short lru1		; go and loop for more
 12287                                  ;lru65:	
 12288                                  ;	stc
 12289                                  ;	jmp	short LRUDead		;	  return -1;
 12290                                  ;
 12291                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12292                                  ; network entry. We now make a second pass through to find the LRU entry
 12293                                  ; that is local-no-share or has age >= AX
 12294                                  ;
 12295                                  ;lru75:
 12296                                  ;	mov	bx,-1			; min = 0xffff;
 12297                                  ;	mov	si,bx			; pos = 0xffff;
 12298                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12299                                  ;	;mov	cx,[es:di+4]
 12300                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12301                                  ;	;lea	di,[di+6]
 12302                                  ;	LEA	DI,[DI+SFT.SFTable]
 12303                                  ;
 12304                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12305                                  ; then check for lru.
 12306                                  ;
 12307                                  ;lru8:
 12308                                  ;	;test	word [es:di+5],8000h
 12309                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12310                                  ;	jnz	short lru85		; is for network, go check age
 12311                                  ;	call	CheckShare		; sharer here?
 12312                                  ;	jz	short lru86		; no, go check lru
 12313                                  ;
 12314                                  ; Network or sharer.  Check age
 12315                                  ;
 12316                                  ;lru85:
 12317                                  ;	;cmp	[es:di+17h],ax
 12318                                  ;	cmp	[es:di+sf_OpenAge],ax
 12319                                  ;	jb	short lru9		; age is before threshold, skip it
 12320                                  ;
 12321                                  ; Check LRU
 12322                                  ;
 12323                                  ;lru86:
 12324                                  ;	;cmp	[es:di+15h],bx
 12325                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12326                                  ;	jae	short lru9		; no, skip this
 12327                                  ;	mov	si,di			; remember position
 12328                                  ;	;mov	bx,[es:di+15h]
 12329                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12330                                  ;
 12331                                  ; Done with this entry, go back for more.
 12332                                  ;
 12333                                  ;lru9:
 12334                                  ;	;add	di, 53
 12335                                  ;	add	di,SF_ENTRY.size
 12336                                  ;	loop	lru8
 12337                                  ;
 12338                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12339                                  ; out. The conditions here are:
 12340                                  ;
 12341                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12342                                  ;
 12343                                  ;lru10:
 12344                                  ;	cmp	si,-1			; if no one f
 12345                                  ;	jz	short lru65		;     return -1;
 12346                                  ;lru11:
 12347                                  ;	mov	di,si
 12348                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12349                                  ;	MOV	[CS:THISSFT+2],ES
 12350                                  ;
 12351                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12352                                  ; is 0.
 12353                                  ;
 12354                                  ;	;test	word [es:di+5],8000h
 12355                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12356                                  ;	JNZ	short LRUClose
 12357                                  ;IF INSTALLED
 12358                                  ;	call	CheckShare
 12359                                  ;	JZ	short LRUDone
 12360                                  ;ENDIF
 12361                                  ;
 12362                                  ; Repeat close until ref count is 0
 12363                                  ;
 12364                                  ;LRUClose:
 12365                                  ;	push	ss
 12366                                  ;	pop	ds
 12367                                  ;	LES	DI,[THISSFT]
 12368                                  ;	cmp     word [es:di],0
 12369                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12370                                  ;	JZ	short LRUDone 		; nope, all done
 12371                                  ;	call	DOS_CLOSE
 12372                                  ;	jnc	short LRUClose		; no error => clean up
 12373                                  ;	;cmp	al,6
 12374                                  ;	cmp	al,error_invalid_handle
 12375                                  ;	jz	short LRUClose
 12376                                  ;	stc
 12377                                  ;	JMP	short LRUDead
 12378                                  ;LRUDone:
 12379                                  ;	XOR	AL,AL
 12380                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12381                                  ;
 12382                                  ;LRUDead:
 12383                                  ;	call	restore_world
 12384                                  ;	LES     DI,[CS:THISSFT]
 12385                                  ;	jnc	short LRUFCB_retn
 12386                                  ;LRUFCB_err:
 12387                                  ;	; mov	al, 23h	
 12388                                  ;	MOV	AL,error_FCB_unavailable
 12389                                  ;LRUFCB_retn:	
 12390                                  ;	retn:
 12391                                  ;
 12392                                  ;ENDIF	; LRUFCB has been rewritten below.
 12393                                  
 12394                                  ; 17/05/2019 - Retro DOS v4.0
 12395                                  ; LRUFCB for MSDOS 6.0 !
 12396                                  ;----------------------------------------------------------------------------
 12397                                  ;
 12398                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12399                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12400                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12401                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12402                                  ; optimize regeneration operations by keeping track of the current local
 12403                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12404                                  ; local SFT in the SFT Block.
 12405                                  ;
 12406                                  ; Inputs: al = 0 => Regenerate SFT operation
 12407                                  ;	    = 1 => Allocate new SFT for Open/Create
 12408                                  ;
 12409                                  ; Outputs: Carry clear
 12410                                  ;	 	es:di = Address of allocated SFT
 12411                                  ;	  	ThisSFT = Address of allocated SFT
 12412                                  ;
 12413                                  ;	  carry set if closes of net/Share files failed 
 12414                                  ;		al = error_FCB_unavailable
 12415                                  ;
 12416                                  ; Registers affected: None
 12417                                  ;
 12418                                  ;----------------------------------------------------------------------------
 12419                                  
 12420                                  ;LruFCB	PROC	NEAR
 12421                                  LRUFCB:
 12422                                  	; 17/05/2019 - Retro DOS v4.0
 12423                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12424                                  
 12425                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12426                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12427                                  
 12428 0000197F 06                      	push	es	; * (MSDOS 6.21)
 12429                                  	
 12430 00001980 E8E3EA                  	call	save_world
 12431                                  	
 12432                                  	;getdseg <ds>		;ds = DOSDATA
 12433 00001983 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12434                                  
 12435 00001988 08C0                    	or	al,al		;Check if regenerate allocation
 12436 0000198A 751A                    	jnz	short lru1	;Try to find SFT to use
 12437                                  
 12438                                  	; This is a regen call. If LocalSFT contains the address of a valid 
 12439                                  	; local SFT, just return that SFT to reuse
 12440                                  
 12441 0000198C 8B3E[4410]              	mov	di,[LocalSFT]
 12442 00001990 0B3E[4610]              	or	di,[LocalSFT+2]	;is address == 0?
 12443 00001994 7410                    	jz	short lru1	;invalid local SFT, find one
 12444                                  
 12445                                  	; We have found a valid local SFT. Recycle this SFT
 12446                                  
 12447 00001996 C43E[4410]              	les	di,[LocalSFT]
 12448                                  
 12449                                  gotlocalSFT:
 12450 0000199A 893E[9E05]              	mov	[THISSFT],di
 12451 0000199E 8C06[A005]              	mov	[THISSFT+2],es
 12452 000019A2 F8                      	clc
 12453 000019A3 E9AD00                  	jmp	LRUDone		;clear up SFT and return
 12454                                  
 12455                                  lru1:
 12456 000019A6 C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12457                                  	;mov	cx,[es:di+4]
 12458 000019AA 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12459                                  	;lea	di,[di+6]
 12460 000019AE 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12461                                  
 12462                                  	; We scan through all the SFTs scanning for a free one. It also 
 12463                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately. 
 12464                                  	; bx = min. LRU for local SFTs
 12465                                  	; si = pos. of local SFT with min. LRU
 12466                                  	; dx = min. LRU for net/Share SFTs
 12467                                  	; bp = pos. of net/Share SFT with min. LRU
 12468                                  
 12469 000019B1 BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12470 000019B4 89DE                    	mov	si,bx
 12471 000019B6 89DA                    	mov	dx,bx
 12472 000019B8 89DD                    	mov	bp,bx
 12473                                  
 12474                                  findSFT:
 12475                                  	;See if this SFT is a free one. If so, return it
 12476 000019BA 26830D00                	or	word [es:di],0
 12477                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12478 000019BE 744D                    	jz	short gotSFT	;yes, SFT is free
 12479                                  	;;cmp	word [es:di],-1
 12480                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12481 000019C0 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12482 000019C4 7447                    	jz	short gotSFT	;no, can use it
 12483                                  
 12484                                  	; Check if this SFT is local and store its address in LocalSFT. Can be 
 12485                                  	; used for a later regen.
 12486                                  
 12487                                  	; 16/12/2022
 12488                                  	; 08/11/2022
 12489                                  	;test	byte [es:di+6],80h
 12490 000019C6 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12491                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12492                                  	;;test	word [es:di+5],8000h
 12493                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12494 000019CB 7532                    	jnz	short lru5	;yes, get net/Share LRU
 12495                                  
 12496                                  ;IF installed
 12497 000019CD E88E59                  	call	CheckShare	;Share present?
 12498                                  ;ENDIF
 12499 000019D0 752D                    	jnz	short lru5	;yes, get net/Share LRU
 12500                                  
 12501                                  	;Local SFT, register its address
 12502                                  
 12503                                  	; !!HACK!!!
 12504                                  	; There is a slightly dirty hack out here in a desperate bid to save  
 12505                                  	; code space. There is similar code duplicated at label 'gotSFT'. We 
 12506                                  	; enter from there if al = 0, update the LocalSFT variable, and since 
 12507                                  	; al = 0, we jump out of the loop to the exit point. I have commented 
 12508                                  	; out the code that previously existed at label 'gotSFT'
 12509                                  
 12510                                  hackpoint:
 12511 000019D2 893E[4410]              	mov	[LocalSFT],di
 12512 000019D6 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12513                                  
 12514 000019DA 08C0                    	or	al,al		;Is operation = REGEN?
 12515 000019DC 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12516                                  
 12517                                  	;Get LRU for local files
 12518                                  	
 12519                                  	;cmp	[es:di+15h],bx
 12520 000019DE 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12521 000019E2 7306                    	jae	short lru4	;no, skip 
 12522                                  
 12523                                  	;mov	bx,[es:di+15h]
 12524 000019E4 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12525 000019E8 89FE                    	mov	si,di		;store SFT position
 12526                                  lru4:
 12527                                  	;add	di,59
 12528 000019EA 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12529 000019ED E2CB                    	loop	findSFT
 12530                                  
 12531                                  	; Check whether we got a net/Share or local SFT. If local SFT 
 12532                                  	; available, we will reuse it instead of net/Share LRU
 12533                                  
 12534 000019EF 89F7                    	mov	di,si
 12535 000019F1 83FEFF                  	cmp	si,-1		;local SFT available?
 12536 000019F4 7517                    	jnz	short gotSFT	;yes, return it
 12537                                  
 12538                                  	;No local SFT, see if we got a net/Share SFT
 12539                                  
 12540 000019F6 89EF                    	mov	di,bp
 12541 000019F8 83FDFF                  	cmp	bp,-1		;net/Share SFT available?
 12542 000019FB 7530                    	jnz	short gotnetSFT	;yes, return it
 12543                                  noSFT:
 12544                                  	; NB: This error should never occur. We always must have an LRU SFT. 
 12545                                  	; This error can occur only if the SFT has been corrupted or the LRU 
 12546                                  	; count is not maintained properly.
 12547                                  
 12548 000019FD EB51                    	jmp	short errorbadSFT ;error, no FCB available.
 12549                                  
 12550                                  	; Handle the LRU for net/Share SFTs
 12551                                  lru5:
 12552                                  	;cmp	[es:di+15h],dx
 12553 000019FF 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12554 00001A03 73E5                    	jae	short lru4	;no, skip 
 12555                                  
 12556                                  	;mov	dx,[es:di+15h]
 12557 00001A05 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12558                                  
 12559 00001A09 89FD                    	mov	bp,di		;store SFT position
 12560 00001A0B EBDD                    	jmp	short lru4	;continue with next SFT
 12561                                  
 12562                                  gotSFT:
 12563 00001A0D 08C0                    	or	al,al
 12564 00001A0F 74C1                    	jz	short hackpoint	;save es:di in LocalSFT
 12565                                  
 12566                                  	; HACK!!!
 12567                                  	; The code here differs from the code at 'hackpoint' only in the 
 12568                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint' 
 12569                                  	; and then from there jump out to 'gotlocalSFT'. The original code 
 12570                                  	; has been commented out below and replaced by the code just above.
 12571                                  
 12572                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12573                                  ;
 12574                                  ;	or	al,al		  ;Regen?
 12575                                  ;	jnz	short notlocaluse ;yes, register it and return
 12576                                  ;
 12577                                  ;Register this SFT as a local one
 12578                                  ;
 12579                                  ;	mov	[LocalSFT],di
 12580                                  ;	mov	[LocalSFT+2],es
 12581                                  ;	jmp	gotlocalSFT	;return to caller
 12582                                  ;
 12583                                  ;notlocaluse:
 12584                                  
 12585                                  	; The caller is probably going to use this SFT for a net/Share file. 
 12586                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN) 
 12587                                  	; does not really know whether it is a local file or not. We 
 12588                                  	; invalidate LocalSFT if the SFT we are going to use was previously 
 12589                                  	; registered as a local SFT that can be recycled.
 12590                                  
 12591 00001A11 8CC0                    	mov	ax,es
 12592 00001A13 393E[4410]              	cmp	[LocalSFT],di		;Offset same?
 12593 00001A17 7506                    	jne	short notinvalid
 12594 00001A19 3906[4610]              	cmp	[LocalSFT+2],ax		;Segments same?
 12595 00001A1D 7403                    	je	short zerolocalSFT	;no, no need to invalidate
 12596                                  notinvalid:
 12597 00001A1F E978FF                  	jmp	gotlocalSFT
 12598                                  
 12599                                  	; The SFT we are going to use was registered in the LocalSFT variable. 
 12600                                  	; Invalidate this variable i.e LocalSFT = NULL
 12601                                  
 12602                                  zerolocalSFT:
 12603 00001A22 31C0                    	xor	ax,ax ; 0
 12604 00001A24 A3[4410]                	mov	[LocalSFT],ax
 12605 00001A27 A3[4610]                	mov	[LocalSFT+2],ax
 12606                                  
 12607 00001A2A E96DFF                  	jmp	gotlocalSFT
 12608                                  
 12609                                  gotnetSFT:
 12610                                  	; We have an SFT that is currently net/Share. If it is going to be 
 12611                                  	; used for a regen, we know it has to be a local SFT. Update the 
 12612                                  	; LocalSFT variable
 12613                                  
 12614 00001A2D 08C0                    	or	al,al
 12615 00001A2F 7508                    	jnz	short closenet
 12616                                  
 12617 00001A31 893E[4410]              	mov	[LocalSFT],di
 12618 00001A35 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12619                                  closenet:
 12620 00001A39 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12621 00001A3D 8C06[A005]              	mov	[THISSFT+2],es	
 12622                                  
 12623                                  	; If we have sharing or thisSFT is a net sft, then close it until ref 
 12624                                  	; count is 0.
 12625                                  	; NB: We come here only if it is a net/Share SFT that is going to be 
 12626                                  	; recycled -- no need to check for this.
 12627                                  
 12628                                  LRUClose:
 12629 00001A41 26833D00                	cmp	word [es:di],0
 12630                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12631 00001A45 740C                    	jz	short LRUDone	; nope, all done
 12632                                  
 12633 00001A47 E80F15                  	call	DOS_CLOSE
 12634 00001A4A 73F5                    	jnc	short LRUClose	; no error => clean up
 12635                                  
 12636                                  	; Bugbug: I dont know why we are trying to close after we get an 
 12637                                  	; error closing. Seems like we could have a potential infinite loop  
 12638                                  	; here. This has to be verified.
 12639                                  
 12640 00001A4C 3C06                    	cmp	al,error_invalid_handle ; 6
 12641 00001A4E 74F1                    	je	short LRUClose
 12642                                  errorbadSFT:
 12643 00001A50 F9                      	stc
 12644 00001A51 EB05                    	JMP	short LRUDead
 12645                                  LRUDone:
 12646 00001A53 30C0                    	XOR	AL,AL
 12647 00001A55 E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12648                                  
 12649                                  LRUDead:
 12650 00001A58 E8F4E9                  	call	restore_world		; use macro
 12651                                  	
 12652 00001A5B 07                      	pop	es ; * (MSDOS 6.21)
 12653                                  
 12654                                  	;getdseg <es>
 12655 00001A5C 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12656 00001A61 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12657                                  
 12658                                  	;;retnc
 12659                                  	;jc	short LruFCB_err
 12660                                  	;retn
 12661                                  
 12662                                  	; 16/12/2022
 12663                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12664 00001A66 7302                    	jnc	short LruFCB_retn
 12665                                  	;jc	short LruFCB_err
 12666                                  	;retn
 12667                                  		
 12668                                  LruFCB_err:
 12669 00001A68 B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12670                                  LruFCB_retn:
 12671 00001A6A C3                      	retn
 12672                                  	
 12673                                  ;LruFCB	ENDP
 12674                                  
 12675                                  ; 17/05/2019 - Retro DOS v4.0
 12676                                  
 12677                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12678                                  
 12679                                  ; --------------------------------------------------------------------------
 12680                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12681                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12682                                  ; to copy the name to different destinations
 12683                                  ;
 12684                                  ; Inputs: ds:si = source string
 12685                                  ;	 es:di = destination string
 12686                                  ;	 cx = length of string
 12687                                  ;
 12688                                  ; Outputs: String copied to destination
 12689                                  ;
 12690                                  ; Registers affected: cx,di,si
 12691                                  ; --------------------------------------------------------------------------
 12692                                  
 12693                                  RegenCopyName:
 12694                                  CopyName:
 12695 00001A6B AC                      	lodsb			;load character
 12696 00001A6C E8FD35                  	call	UCase		; convert char to upper case
 12697                                  StuffChar2:
 12698 00001A6F AA                      	STOSB			;store converted character
 12699 00001A70 E2F9                    	LOOP	CopyName	;
 12700                                  DoneName:
 12701 00001A72 C3                      	retn
 12702                                  
 12703                                  ; --------------------------------------------------------------------------
 12704                                  
 12705                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12706                                  FCBRegen:
 12707                                  	; called from SFTFromFCB. SS already DOSDATA
 12708                                  
 12709                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12710                                  	; we do not fill, size we do no fill, position we do not fill,
 12711                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12712                                  
 12713                                  	;mov	al,[si+19h]
 12714 00001A73 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12715                                  
 12716                                  	; We discriminate based on the first two bits in the reserved field.
 12717                                  	
 12718                                  	;test	al,80h
 12719 00001A76 A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12720 00001A78 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12721                                  
 12722                                  	; The FCB is for a network or a sharing based system. At this point 
 12723                                  	; we have already closed the SFT for this guy and reconnection is 
 12724                                  	; impossible.
 12725                                  	;
 12726                                  	; Remember that he may have given us a FCB with bogus information in
 12727                                  	; it. Check to see if sharing is present or if the redir is present.
 12728                                  	; If either is around, presume that we have cycled out the FCB and 
 12729                                  	; give the hard error. Otherwise, just return with carry set.
 12730                                  
 12731 00001A7A E8E158                  	call	CheckShare		; test for sharer
 12732 00001A7D 7509                    	JNZ	short RegenFail		; yep, fail this.
 12733                                  	
 12734                                  	;mov	ax,1100h
 12735 00001A7F B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12736 00001A82 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12737                                  			; Return: AL = 00h  not installed, OK to install
 12738                                  			; 01h  not installed, not OK to install
 12739                                  			; FFh  installed
 12740 00001A84 08C0                    	OR	AL,AL			; is it there?
 12741 00001A86 740C                    	JZ	short RegenDead		; no, just fail the operation
 12742                                  RegenFail:
 12743                                  	; 17/05/2019 - Retro DOS v4.0
 12744                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12745 00001A88 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12746                                  
 12747                                  	;cmp	ah,10h
 12748 00001A8C 80FC10                  	cmp	AH,FCB_CLOSE
 12749 00001A8F 7403                    	jz	short RegenDead
 12750 00001A91 E89301                  	call	FCBHardErr		; massive hard error.
 12751                                  RegenDead:
 12752 00001A94 F9                      	STC				; carry set
 12753                                  FCBRegen_retn:
 12754 00001A95 C3                      	retn
 12755                                  
 12756                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12757                                  	; so fail the operation.
 12758                                  
 12759                                  RegenNoSharing:
 12760 00001A96 E8C558                  	call	CheckShare		; Sharing around?
 12761 00001A99 75ED                    	JNZ	short RegenFail
 12762                                  	
 12763                                  	; Find an SFT for this guy.
 12764                                  	
 12765                                  	; 17/05/2019 - Retro DOS v4.0
 12766                                  
 12767                                  	; MSDOS 3.3
 12768                                  	;call	LRUFCB
 12769                                  	;jc	short FCBRegen_retn
 12770                                  	
 12771                                  	; MSDOS 6.0
 12772 00001A9B 50                      	push	ax
 12773 00001A9C B000                    	mov	al,0			;indicate it is a regen operation
 12774 00001A9E E8DEFE                  	call	LRUFCB
 12775 00001AA1 58                      	pop	ax
 12776 00001AA2 72F1                    	jc	short FCBRegen_retn
 12777                                  
 12778                                  	;mov	word [es:di+2],8002h
 12779 00001AA4 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12780 00001AAA 243F                    	AND	AL,3Fh			; get drive number for flags
 12781 00001AAC 98                      	CBW
 12782                                  	;or	ax,4000h
 12783 00001AAD 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12784                                  
 12785                                  	; The bits field consists of the upper two bits (dirty and device) 
 12786                                  	; from the SFT and the low 4 bits from the open mode.
 12787                                  
 12788                                  	;mov	cl,[si+1Ah]
 12789 00001AB0 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12790 00001AB3 88CD                    	MOV	CH,CL
 12791 00001AB5 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12792 00001AB8 08E8                    	OR	AL,CH
 12793                                  	;and	cl,0Fh
 12794 00001ABA 80E10F                  	AND	CL,access_mask		; get the mode bits
 12795                                  	;mov	[es:di+2],cl
 12796 00001ABD 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12797                                  	;mov	[es:di+5],ax
 12798 00001AC1 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12799                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12800 00001AC5 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12801                                  	;mov	[es:di+31h],ax
 12802 00001AC9 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12803 00001ACD 1E                      	push	ds
 12804 00001ACE 56                      	push	si
 12805 00001ACF 06                      	push	es
 12806 00001AD0 57                      	push	di
 12807 00001AD1 16                      	push	ss
 12808 00001AD2 07                      	pop	es
 12809 00001AD3 BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12810                                  
 12811 00001AD6 B90800                  	MOV	CX,8
 12812 00001AD9 46                      	INC	SI			; Skip past drive byte to name in FCB
 12813                                  
 12814                                  	; MSDOS 3.3
 12815                                  ;RegenCopyName:
 12816                                  	;lodsb
 12817                                  	;call	UCase
 12818                                  	;stosb
 12819                                  	;loop	RegenCopyName
 12820                                  
 12821                                  	; MSDOS 6.0
 12822 00001ADA E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 12823                                  
 12824 00001ADD 16                      	push	ss	; SS is DOSDATA
 12825 00001ADE 1F                      	pop	ds
 12826                                  
 12827                                  	;mov	byte [ATTRIB],16h
 12828 00001ADF C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12829                                  					; Must set this to something interesting
 12830                                  					; to call DEVNAME.
 12831 00001AE4 E81327                  	call	DEVNAME 		; check for device
 12832 00001AE7 5E                      	pop	si
 12833 00001AE8 07                      	pop	es
 12834 00001AE9 5E                      	pop	si
 12835 00001AEA 1F                      	pop	ds
 12836 00001AEB 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 12837                                  
 12838                                  	; Device found. We can ignore disk-specific info
 12839                                  
 12840                                  	;mov	[es:di+5],bh
 12841 00001AED 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 12842                                  	;mov	byte [es:di+4],0
 12843 00001AF1 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 12844                                  					; SS override
 12845                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 12846 00001AF6 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 12847                                  	;mov	[es:di+7],si
 12848 00001AFB 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12849                                  	;mov	[es:di+9],ds
 12850 00001AFF 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12851 00001B03 C3                      	retn				; carry is clear
 12852                                  
 12853                                  RegenDeadJ:
 12854 00001B04 EB8E                    	JMP	short RegenDead
 12855                                  
 12856                                  	; File found. Just copy in the remaining pieces.
 12857                                  
 12858                                  RegenFileNoSharing:
 12859                                  	;mov	ax,[es:di+5]
 12860 00001B06 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12861 00001B0A 83E03F                  	AND	AX,03Fh
 12862 00001B0D 1E                      	push	ds
 12863 00001B0E 56                      	push	si
 12864 00001B0F E8D94E                  	call	FIND_DPB
 12865                                  	;mov	[es:di+7],si
 12866 00001B12 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12867                                  	;mov	[es:di+9],ds
 12868 00001B16 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12869 00001B1A 5E                      	pop	si
 12870 00001B1B 1F                      	pop	ds
 12871 00001B1C 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 12872                                  					; indicator was bogus
 12873                                  	;mov	ax,[si+1Dh]
 12874 00001B1E 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 12875                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 12876                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 12877 00001B21 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 12878                                  
 12879                                  	; MSDOS 6.0
 12880                                  
 12881                                  	; SR;
 12882                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 12883                                  	; number
 12884                                  
 12885                                  	;mov	al,[si+18h]
 12886 00001B25 8A4418                  	mov	al,[si+fcb_sfn]
 12887 00001B28 24C0                    	and	al,0C0h		;get the 2 attribute bits
 12888 00001B2A 88C4                    	mov	ah,al
 12889 00001B2C D0C4                    	rol	ah,1
 12890 00001B2E D0E8                    	shr	al,1
 12891 00001B30 08E0                    	or	al,ah
 12892 00001B32 243F                    	and	al,03Fh		;mask off unused bits
 12893                                  	;mov	[es:di+4],al
 12894 00001B34 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 12895                                  
 12896                                  	; SR;
 12897                                  	; Update the higher word of the directory sector from the FCB
 12898                                  
 12899                                  	;;mov	al,[si+18h]
 12900 00001B38 8A4418                  	mov	al,[si+fcb_sfn]
 12901 00001B3B 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 12902 00001B3D 28E4                    	sub	ah,ah
 12903                                  	;mov	[es:di+1Dh],ax
 12904 00001B3F 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 12905                                  
 12906                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12907                                  	;mov	ax,[si+1Bh]
 12908 00001B43 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 12909                                  	;mov	[es:di+0Bh],ax
 12910 00001B46 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 12911                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 12912                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 12913 00001B4A 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 12914                                  	;mov	al,[si+1Fh]
 12915 00001B4E 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 12916                                  	;mov  	[es:di+1Fh],al
 12917 00001B51 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 12918                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 12919 00001B55 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 12920                                  					; Existing FCB entries would be
 12921                                  					; flushed unnecessarily because of
 12922                                  					; check in CheckFCB of the ref_count.
 12923                                  					; July 22/85 - BAS
 12924                                  	;lea	si,[si+1]
 12925 00001B58 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 12926                                  	;lea	di,[di+20h]
 12927 00001B5B 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 12928                                  	;mov	cx,11
 12929 00001B5E B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 12930                                  	
 12931                                  	; MSDOS 6.0
 12932 00001B61 E807FF                  	call	RegenCopyName	;copy name to SFT 
 12933                                  	
 12934                                  	; MSDOS 3.3
 12935                                  ;RegenCopyName2:
 12936                                  	;lodsb
 12937                                  	;call    UCase
 12938                                  	;stosb
 12939                                  	;loop    RegenCopyName2
 12940                                  
 12941 00001B64 F8                      	clc
 12942 00001B65 C3                      	retn
 12943                                  
 12944                                  ; 17/05/2019 - Retro DOS v4.0
 12945                                  
 12946                                  ;**	BlastSFT - FIll SFT with Garbage
 12947                                  ; --------------------------------------------------------------------------
 12948                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 12949                                  ;	various garbage values to put into the SFT.  I don't know why,
 12950                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 12951                                  ;	necessary to show that the SFT is free after filling it.
 12952                                  ;
 12953                                  ;	ENTRY	(es:di) = address of SFT
 12954                                  ;		(al) = fill character
 12955                                  ;	EXIT	(ax) = -1
 12956                                  ;		'C' clear
 12957                                  ;	USES	AX, CX, Flags
 12958                                  
 12959                                  BlastSFT:
 12960 00001B66 57                      	push	di
 12961                                  	;mov	cx,53 ; MSDOS 3.3
 12962                                  	;mov	cx,59 ; MSDOS 6.0
 12963 00001B67 B93B00                  	mov	cx,SF_ENTRY.size
 12964 00001B6A F3AA                    	rep	stosb
 12965 00001B6C 5F                      	pop	di
 12966 00001B6D 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 12967 00001B6F 268905                  	mov	[es:di],ax
 12968                                  	;mov	[es:di+SFT_ENTRY.sf_ref_count],ax ; set ref count   ;
 12969                                  	;mov	[es:di+15h],ax
 12970 00001B72 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 12971 00001B76 48                      	dec	ax	; -1					    ;
 12972                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 12973 00001B77 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 12974                                  BlastSFT_retn:
 12975 00001B7B C3                      	retn				; return with 'C' clear     ;
 12976                                  
 12977                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 12978                                  ; --------------------------------------------------------------------------
 12979                                  ;
 12980                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 12981                                  ;   regenerated.
 12982                                  ;
 12983                                  ;   Inputs:	DS:SI point to FCB (not extended)
 12984                                  ;		AL is SFT index
 12985                                  ;   Outputs:	Carry Set - FCB needs to be regened
 12986                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 12987                                  ;   Registers modified: AX and BX
 12988                                  ;
 12989                                  ; --------------------------------------------------------------------------
 12990                                  
 12991                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12992                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 12993                                  CheckFCB:
 12994                                  		
 12995                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 12996                                  
 12997                                  	; MSDOS 3.3
 12998                                  
 12999                                  	; LES	DI,[CS:SFTFCB]
 13000                                  
 13001                                  	; MSDOS 6.0
 13002                                  	
 13003                                  	; SR;
 13004                                  	; We check if the given FCB is for a local file. If so, we return a 
 13005                                  	; bad SFT status forcing the caller to regenerate the SFT.
 13006                                  
 13007                                  	;test	byte [si+19h],0C0h
 13008 00001B7C F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 13009 00001B80 744F                    	jz	short BadSFT		;Local file, return bad SFT
 13010 00001B82 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 13011                                  
 13012                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13013                                  	;cmp	[es:di+4],al
 13014 00001B87 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 13015 00001B8B 7244                    	JC	short BadSFT
 13016                                  	;;mov	bl,53 ; MSDOS 3.3
 13017                                  	;mov	bl,59 ; MSDOS 6.0
 13018 00001B8D B33B                    	MOV	BL,SF_ENTRY.size
 13019 00001B8F F6E3                    	MUL	BL
 13020                                  	;lea	di,[di+6]
 13021 00001B91 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 13022 00001B94 01C7                    	ADD	DI,AX
 13023                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 13024 00001B96 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 13025                                  	;cmp	[es:di+31h],ax
 13026 00001B9A 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 13027 00001B9E 7531                    	JNZ	short BadSFT		; must match process
 13028 00001BA0 26833D00                	cmp	word [es:di],0
 13029                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 13030 00001BA4 742B                    	JZ	short BadSFT		; must also be in use
 13031                                  	;mov	al,[si+19h]
 13032 00001BA6 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 13033                                  	;test	al,80h
 13034 00001BA9 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 13035 00001BAB 7430                    	JZ	short CheckNoShare	; No. try local or device
 13036                                  
 13037                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 13038                                  	; FCBSHARE is a superset of FCBNETWORK.
 13039                                  
 13040 00001BAD 50                      	PUSH	AX
 13041                                  	;and	al,0C0h
 13042 00001BAE 24C0                    	AND	AL,FCBMASK
 13043                                  	;cmp	al,0C0h
 13044 00001BB0 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 13045 00001BB2 58                      	POP	AX
 13046 00001BB3 751E                    	JNZ	short CheckNet		; yes
 13047                                  ;
 13048                                  ;----- In share support -----
 13049                                  ;
 13050                                  	;call	far [cs:JShare+(11*4)]
 13051 00001BB5 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 13052 00001BBA 7215                    	JC	short BadSFT
 13053 00001BBC EB06                    	JMP	SHORT CheckD
 13054                                  ;
 13055                                  ;----- End in share support -----
 13056                                  ;
 13057                                  	; 09/11/2022
 13058                                  	; (There is not any procedure/sub
 13059                                  	;  which calls or jumps to CheckFirClus here)
 13060                                  	;;;
 13061                                  CheckFirClus:
 13062                                  	;cmp     bx,[es:di+0Bh]
 13063                                  	; 07/12/2022
 13064 00001BBE 263B5D0B                	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 13065 00001BC2 750D                    	JNZ	short BadSFT
 13066                                  	;;;
 13067                                  CheckD: 
 13068 00001BC4 243F                    	AND	AL,3Fh
 13069                                  	;mov	ah,[es:di+5]
 13070 00001BC6 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 13071 00001BCA 80E43F                  	AND	AH,3Fh
 13072 00001BCD 38C4                    	CMP	AH,AL
 13073                                  	; 16/12/2022
 13074 00001BCF 74AA                    	jz	short BlastSFT_retn	; carry is clear
 13075                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13076                                  	;jnz	short BadSFT
 13077                                  ;CheckD_retn:
 13078                                  	;retn
 13079                                  BadSFT: 
 13080 00001BD1 F9                      	STC
 13081 00001BD2 C3                      	retn
 13082                                  				
 13083                                  CheckNet:
 13084                                  	; 17/05/2019 - Retro DOS v4.0
 13085                                  	
 13086                                  ;----- In net support -----
 13087                                  
 13088                                  	; MSDOS 3.3
 13089                                  	;;mov	ax,[si+1Ah]
 13090                                  	;mov	ax,[si+fcb_net_handle]
 13091                                  	;;cmp	ax,[es:di+1Dh]
 13092                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 13093                                  	;jnz	short BadSFT
 13094                                  	;;cmp	ax,[es:di+19h]
 13095                                  	;cmp	ax,[ES:DI+sf_netid]
 13096                                  	;jnz     short BadSFT
 13097                                  	;;mov	ax,[si+1Eh]
 13098                                  	;mov	ax,[si+fcb_l_attr]
 13099                                  	;;cmp	ax,[es:di+1Bh]
 13100                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 13101                                  	;jnz     short BadSFT
 13102                                  
 13103                                  	; MSDOS 6.0
 13104                                  	;mov	ax,[si+1Ch]
 13105 00001BD3 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 13106                                  	; 09/11/2022
 13107                                  	;cmp	ax,[es:di+0Bh] 
 13108 00001BD6 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 13109 00001BDA 75F5                    	JNZ	short BadSFT
 13110                                  
 13111                                  ;----- END In net support -----
 13112                                  
 13113                                  CheckNet_retn:
 13114 00001BDC C3                      	retn
 13115                                  
 13116                                  CheckNoShare:
 13117                                  
 13118                                  ; 16/12/2022
 13119                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 13120                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 13121                                  ;	;test	al,40h
 13122                                  ;	test	AL,FCBDEVICE		; Device?
 13123                                  ;	;jnz	short $+2 ; 09/11/2022
 13124                                  ;	JNZ	short CheckNoShareDev 	; Yes
 13125                                  
 13126                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 13127                                  	;;mov	bx,[si+1Dh]
 13128                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 13129                                  	;;cmp	bx,[es:di+1Dh]
 13130                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 13131                                  	;jnz	short BadSFT
 13132                                  	;;mov	bl,[si+1Fh]
 13133                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13134                                  	;;cmp	bl,[es:di+1Fh]
 13135                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13136                                  	;jnz	short BadSFT
 13137                                  	;;mov	bl,[si+1Ah]
 13138                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13139                                  	;;mov	bh,[es:di+5]
 13140                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13141                                  	;xor	bh,bl
 13142                                  	;and	bh,0C0h
 13143                                  	;jnz	short BadSFT
 13144                                  	;;xor	bl,[es:di+2]
 13145                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13146                                  	;and	bl,0Fh
 13147                                  	;jnz	short BadSFT
 13148                                  	;push	di
 13149                                  	;push	si
 13150                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13151                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13152                                  	;;lea	si,[si+1]
 13153                                  	;LEA	SI,[SI+SYS_FCB.name]
 13154                                  	;;mov	cx,11
 13155                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13156                                  	;repe	cmpsb
 13157                                  	;pop	si
 13158                                  	;pop	di
 13159                                  	;jnz	short BadSFT
 13160                                  	;;mov	bx,[si+1Bh]
 13161                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13162                                  	;jmp	short CheckFirClus
 13163                                  
 13164                                  	; MSDOS 6.0
 13165                                  
 13166                                  	; SR;
 13167                                  	; The code below to match a local FCB with its SFT can no longer be
 13168                                  	; used. We just return a no-match status. This check is done right
 13169                                  	; at the top.
 13170                                  
 13171                                  CheckNoShareDev:
 13172                                  	;mov	bx,[si+1Ah]
 13173 00001BDD 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13174                                  	;cmp	bx,[es:di+7]
 13175 00001BE0 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13176 00001BE4 75EB                    	JNZ	short BadSFT
 13177                                  	;mov	bx,[si+1Ch]
 13178 00001BE6 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13179                                  	;cmp	bx,[es:di+9]
 13180 00001BE9 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13181 00001BED 75E2                    	JNZ	short BadSFT
 13182 00001BEF EBD3                    	JMP	short CheckD
 13183                                  
 13184                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13185                                  ;----------------------------------------------------------------------------
 13186                                  ;
 13187                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13188                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13189                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13190                                  ;	with PID
 13191                                  ;
 13192                                  ;   Inputs:	DS:SI point to FCB
 13193                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13194                                  ;		Carry clear -> OK ES:DI -> SFT
 13195                                  ;		Carry set -> error in ax
 13196                                  ;   Registers modified: ES,DI, AX
 13197                                  ;
 13198                                  ;----------------------------------------------------------------------------
 13199                                  
 13200                                  SFTFromFCB:
 13201                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13202                                  
 13203                                  	; 17/05/2019 - Retro DOS v4.0
 13204                                  
 13205 00001BF1 50                      	push	ax
 13206 00001BF2 53                      	push	bx
 13207                                  	;mov	al,[si+18h]
 13208 00001BF3 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13209 00001BF6 E883FF                  	call	CheckFCB
 13210 00001BF9 5B                      	pop	bx
 13211 00001BFA 58                      	pop	ax
 13212                                  	;MOV	[CS:THISSFT],DI		; SS override
 13213                                  	;MOV	[CS:THISSFT+2],ES
 13214 00001BFB 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13215 00001C00 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13216 00001C05 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13217                                  	
 13218                                  	; 09/11/2022 (MSDOS 5.0)
 13219                                  	; 31/05/2019
 13220 00001C07 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13221 00001C08 E85BE8                  	call	save_world
 13222 00001C0B E865FE                  	call	FCBRegen
 13223 00001C0E E83EE8                  	call	restore_world		; use macro restore world
 13224 00001C11 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13225                                  
 13226                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13227 00001C12 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13228 00001C16 72C4                    	jc	short CheckNet_retn
 13229                                  
 13230                                  Set_SFT: 
 13231                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13232 00001C18 36C43E[9E05]            	les	di,[ss:THISSFT]
 13233                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13234 00001C1D 36FF36[3C03]            	push	word [ss:PROC_ID]
 13235                                  	;pop	word [es:di+31h]
 13236 00001C22 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13237 00001C26 C3                      	retn				; carry is clear
 13238                                  
 13239                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13240                                  ;----------------------------------------------------------------------------
 13241                                  ;
 13242                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13243                                  ;	unavailable FCB.
 13244                                  ;
 13245                                  ;   Inputs:	none.
 13246                                  ;   Outputs:	none.
 13247                                  ;   Registers modified: all
 13248                                  ;
 13249                                  ;----------------------------------------------------------------------------
 13250                                  
 13251                                  FCBHardErr:
 13252                                  	; 17/05/2019 - Retro DOS v4.0
 13253 00001C27 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13254                                  	;
 13255                                  	;mov	ax,23h
 13256 00001C2C B82300                  	MOV	AX,error_FCB_unavailable
 13257                                  	;;mov	byte [cs:ALLOWED],8
 13258                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13259 00001C2F 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13260                                  	
 13261                                  	;LES	BP,[CS:THISDPB]
 13262 00001C35 26C42E[8A05]            	les	bp,[es:THISDPB]
 13263                                  	
 13264 00001C3A BF0100                  	MOV	DI,1			; Fake some registers
 13265 00001C3D 89F9                    	MOV	CX,DI
 13266                                  	;mov	dx,[es:bp+0Bh]
 13267 00001C3F 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13268 00001C43 E8E436                  	call	HARDERR
 13269 00001C46 F9                      	STC
 13270 00001C47 C3                      	retn
 13271                                  
 13272                                  ;============================================================================
 13273                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13274                                  ;============================================================================
 13275                                  ; 21/07/2018 - Retro DOS v3.0
 13276                                  ; 17/05/2019 - Retro DOS v4.0
 13277                                  
 13278                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13279                                  ;
 13280                                  ;	GetRR
 13281                                  ;	GetExtent
 13282                                  ;	SetExtent
 13283                                  ;	GetExtended
 13284                                  ;	GetRecSize
 13285                                  ;	FCBIO
 13286                                  ;	$FCB_OPEN
 13287                                  ;	$FCB_CREATE
 13288                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13289                                  ;	$FCB_RANDOM_READ_BLOCK
 13290                                  ;	$FCB_SEQ_READ
 13291                                  ;	$FCB_SEQ_WRITE
 13292                                  ;	$FCB_RANDOM_READ
 13293                                  ;	$FCB_RANDOM_WRITE
 13294                                  ;
 13295                                  ;	Revision history:
 13296                                  ;
 13297                                  ;		Created: ARR 4 April 1983
 13298                                  ;			 MZ  6 June  1983 completion of functions
 13299                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13300                                  ;				  times.  Change so successive closes work by
 13301                                  ;				  always returning OK.	Also, detect I/O to
 13302                                  ;				  already closed FCB and return EOF.
 13303                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13304                                  ;				  out of sft into FCB for reconnection
 13305                                  ;
 13306                                  ;	    A000   version 4.00	Jan. 1988
 13307                                  
 13308                                  ; Defintions for FCBOp flags
 13309                                  
 13310                                  RANDOM	equ 2				; random operation
 13311                                  FCBREAD equ 4				; doing a read
 13312                                  BLOCK	equ 8				; doing a block I/O
 13313                                  
 13314                                  ;Break <GetRR - return the random record field in DX:AX>
 13315                                  ;---------------------------------------------------------------------------
 13316                                  ;
 13317                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13318                                  ;	from the FCB pointed to by DS:SI
 13319                                  ;
 13320                                  ;   Inputs:	DS:SI point to an FCB
 13321                                  ;		BX has record size
 13322                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13323                                  ;   Registers modified: none
 13324                                  ;---------------------------------------------------------------------------
 13325                                  
 13326                                  GetRR:
 13327                                  	;mov	ax,[si+21h]
 13328 00001C48 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13329                                  	;mov	dx,[si+23h]
 13330 00001C4B 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13331 00001C4E 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13332 00001C51 7202                    	JB	short GetRRBye
 13333 00001C53 30F6                    	XOR	DH,DH
 13334                                  GetRRBye:
 13335 00001C55 C3                      	retn
 13336                                  
 13337                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13338                                  ;---------------------------------------------------------------------------
 13339                                  ;
 13340                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13341                                  ;	NR fields in the FCB.
 13342                                  ;
 13343                                  ;   Inputs:	DS:SI - point to FCB
 13344                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13345                                  ;   Registers modified: none
 13346                                  ;---------------------------------------------------------------------------
 13347                                  
 13348                                  GetExtent:
 13349                                  	;mov	al,[si+20h]
 13350 00001C56 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13351                                  	;mov	dx,[si+0Ch]
 13352 00001C59 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13353 00001C5C D0E0                    	SHL	AL,1
 13354 00001C5E D1EA                    	SHR	DX,1
 13355 00001C60 D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13356 00001C62 88D4                    	MOV	AH,DL
 13357 00001C64 88F2                    	MOV	DL,DH
 13358 00001C66 30F6                    	XOR	DH,DH
 13359 00001C68 C3                      	retn
 13360                                  
 13361                                  ;Break <SetExtent - update the extent/NR field>
 13362                                  ;---------------------------------------------------------------------------
 13363                                  ;
 13364                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13365                                  ;	fields
 13366                                  ;
 13367                                  ;   Inputs:	DS:SI point to FCB
 13368                                  ;		DX:AX is a record location in file
 13369                                  ;   Outputs:	Extent/NR fields are filled in
 13370                                  ;   Registers modified: CX
 13371                                  ;---------------------------------------------------------------------------
 13372                                  
 13373                                  SetExtent:
 13374 00001C69 50                      	push	ax
 13375 00001C6A 52                      	push	dx
 13376 00001C6B 89C1                    	MOV	CX,AX
 13377 00001C6D 247F                    	AND	AL,7FH			; next rec field
 13378                                  	;mov	[si+20h],al
 13379 00001C6F 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13380 00001C72 80E180                  	AND	CL,80H			; save upper bit
 13381 00001C75 D1E1                    	SHL	CX,1
 13382 00001C77 D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13383 00001C79 88E8                    	MOV	AL,CH
 13384 00001C7B 88D4                    	MOV	AH,DL
 13385                                  	;mov	[si+0Ch], ax
 13386 00001C7D 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13387 00001C80 5A                      	pop	dx
 13388 00001C81 58                      	pop	ax
 13389 00001C82 C3                      	retn
 13390                                  
 13391                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13392                                  ;---------------------------------------------------------------------------
 13393                                  ;
 13394                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13395                                  ;
 13396                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13397                                  ;   Outputs:	DS:SI point to the FCB part
 13398                                  ;		zeroflag set if not extended fcb
 13399                                  ;   Registers modified: SI
 13400                                  ;---------------------------------------------------------------------------
 13401                                  
 13402                                  GetExtended:
 13403 00001C83 89D6                    	MOV	SI,DX			; point to Something
 13404 00001C85 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13405 00001C88 7503                    	JNZ	short GetBye		; not there
 13406 00001C8A 83C607                  	ADD	SI,7			; point to FCB
 13407                                  GetBye:
 13408 00001C8D 39D6                    	CMP	SI,DX			; set condition codes
 13409                                  getextd_retn:
 13410 00001C8F C3                      	retn
 13411                                  
 13412                                  ;Break <GetRecSize - return in BX the FCB record size>
 13413                                  ;---------------------------------------------------------------------------
 13414                                  ;
 13415                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13416                                  ;
 13417                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13418                                  ;   Outputs:	BX contains the record size
 13419                                  ;   Registers modified: None
 13420                                  ;---------------------------------------------------------------------------
 13421                                  
 13422                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13423                                  GetRecSize:
 13424                                  	;mov	bx,[si+0Eh]
 13425 00001C90 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13426 00001C93 09DB                    	OR	BX,BX			; is it nul?
 13427 00001C95 74F8                    	jz	short getextd_retn
 13428 00001C97 BB8000                  	MOV	BX,128			; use default size
 13429                                  	;mov	[si+0Eh],bx
 13430 00001C9A 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13431 00001C9D C3                      	retn
 13432                                  
 13433                                  ;BREAK <FCBIO - do internal FCB I/O>
 13434                                  ;---------------------------------------------------------------------------
 13435                                  ;
 13436                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13437                                  ;
 13438                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13439                                  ;		DS:DX point to FCB
 13440                                  ;		CX may have count of number of records to xfer
 13441                                  ;   Outputs:	AL has error code
 13442                                  ;   Registers modified: all
 13443                                  ;---------------------------------------------------------------------------
 13444                                  
 13445                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13446                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13447                                  FCBIO:
 13448                                  
 13449                                  FEOF	EQU	1
 13450                                  FTRIM	EQU	2
 13451                                  
 13452                                  %define	FCBErr	byte [bp-1]  ; byte	
 13453                                  %define	cRec	word [bp-3]  ; word	
 13454                                  ;%define RecPos	word [bp-7]  ; dword
 13455                                  %define RecPosL	word [bp-7]  ; word
 13456                                  %define RecPosH	word [bp-5]  ; word
 13457                                  %define	RecSize	word [bp-9]  ; word
 13458                                  ;%define bPos	word [bp-13] ; dword
 13459                                  %define bPosL	word [bp-13] ; word
 13460                                  %define bPosH	word [bp-11] ; word
 13461                                  %define cByte	word [bp-15] ; word	
 13462                                  %define cResult word [bp-17] ; word	
 13463                                  %define	cRecRes	word [bp-19] ; word
 13464                                  %define	FCBOp	byte [bp-20] ; byte
 13465                                  
 13466                                  	;Enter
 13467                                  
 13468 00001C9E 55                      	push	bp
 13469 00001C9F 89E5                    	mov	bp,sp
 13470 00001CA1 83EC14                  	sub	sp,20
 13471                                  	;mov	[bp-20],al
 13472 00001CA4 8846EC                  	MOV	FCBOp,AL
 13473                                  	;mov	byte [bp-1],0
 13474 00001CA7 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13475 00001CAB E8D5FF                  	call	GetExtended		;   FCB = GetExtended ();
 13476                                  	;test	byte [bp-20],8
 13477 00001CAE F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13478 00001CB2 7503                    	JNZ	short GetPos
 13479 00001CB4 B90100                  	MOV	CX,1			;	cRec = 1;
 13480                                  GetPos:
 13481                                  	;mov	[bp-3],cx
 13482 00001CB7 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13483 00001CBA E899FF                  	call	GetExtent		;   RecPos = GetExtent ();
 13484 00001CBD E8D0FF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13485                                  	;mov	[bp-9],bx
 13486 00001CC0 895EF7                  	MOV	RecSize,BX
 13487                                  	;test	byte [bp-20],2
 13488 00001CC3 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13489 00001CC7 7403                    	JZ	short GetRec
 13490 00001CC9 E87CFF                  	call	GetRR			;	RecPos = GetRR ();
 13491                                  GetRec:
 13492                                  	;mov	[bp-7],ax
 13493 00001CCC 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13494                                  	;mov	[bp-5],dx
 13495 00001CCF 8956FB                  	MOV	RecPosH,DX
 13496 00001CD2 E894FF                  	call	SetExtent		;   SetExtent (RecPos);
 13497                                  	;mov	ax,[bp-5]
 13498 00001CD5 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13499 00001CD8 F7E3                    	MUL	BX
 13500 00001CDA 89C7                    	MOV	DI,AX
 13501                                  	;mov	ax,[bp-7]
 13502 00001CDC 8B46F9                  	MOV	AX,RecPosL
 13503 00001CDF F7E3                    	MUL	BX
 13504 00001CE1 01FA                    	ADD	DX,DI
 13505                                  	;mov	[bp-13],ax
 13506 00001CE3 8946F3                  	MOV	bPosL,AX
 13507                                  	;mov	[bp-11],dx
 13508 00001CE6 8956F5                  	MOV	bPosH,DX
 13509                                  	;mov	ax,[bp-3]
 13510 00001CE9 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13511 00001CEC F7E3                    	MUL	BX
 13512                                  	;mov	[bp-15],ax
 13513 00001CEE 8946F1                  	MOV	cByte,AX
 13514                                  
 13515                                  ;hkn; 	SS override
 13516 00001CF1 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13517 00001CF6 83D200                  	ADC	DX,0
 13518 00001CF9 7419                    	JZ	short DoOper
 13519                                  	;mov	byte [bp-1],2
 13520 00001CFB C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13521                                  
 13522                                  ;hkn; 	SS override
 13523 00001CFF 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13524 00001D03 F7D8                    	NEG	AX
 13525 00001D05 7501                    	JNZ	short DoDiv
 13526 00001D07 48                      	DEC	AX
 13527                                  DoDiv:
 13528 00001D08 31D2                    	XOR	DX,DX
 13529 00001D0A F7F3                    	DIV	BX
 13530                                  	;mov	[bp-3],ax
 13531 00001D0C 8946FD                  	MOV	cRec,AX
 13532 00001D0F F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13533                                  	;mov	[bp-15],ax
 13534 00001D11 8946F1                  	MOV	cByte,AX		;	}
 13535                                  DoOper:
 13536 00001D14 31DB                    	XOR	BX,BX
 13537                                  	;mov	[bp-17],bx
 13538 00001D16 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13539                                  	;cmp	[bp-15],bx
 13540 00001D19 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13541 00001D1C 7506                    	JNZ	short DoGetExt
 13542                                  	;test	byte [bp-1],2
 13543 00001D1E F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13544                                  	;JZ	short DoGetExt
 13545                                  	;JMP	short SkipOp
 13546                                  	; 16/12/2022
 13547 00001D22 7576                    	jnz	short SkipOp
 13548                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13549                                  	;JZ	short DoGetExt
 13550                                  	;JMP	short SkipOp
 13551                                  DoGetExt:
 13552 00001D24 E8CAFE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13553 00001D27 730F                    	JNC	short ContinueOp
 13554                                  FCBDeath:
 13555 00001D29 E82EE9                  	call	FCB_RET_ERR		; signal error, map for extended
 13556                                  	;mov	word [bp-19],0
 13557 00001D2C C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13558                                  	;mov	byte [bp-1],1
 13559 00001D31 C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13560 00001D35 E9EF00                  	JMP	FCBSave 		; bam!
 13561                                  ContinueOp:
 13562                                  	;mov	ax,[si+10h]
 13563 00001D38 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 13564                                  	;mov	[es:di+11h],ax
 13565 00001D3B 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13566                                  	;mov	ax,[si+12h]
 13567 00001D3F 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13568                                  	;mov	[es:di+13h],ax
 13569 00001D42 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13570                                  	;mov	ax,[bp-13]
 13571 00001D46 8B46F3                  	MOV	AX,bPosL
 13572                                  	;mov	dx,[bp-11]
 13573 00001D49 8B56F5                  	MOV	DX,bPosH
 13574                                  	;mov	[es:di+15h],ax
 13575 00001D4C 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13576                                  	;xchg	dx,[es:di+17h]
 13577 00001D50 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13578 00001D54 52                      	PUSH	DX			; save away Open age.
 13579                                  	;mov	cx,[bp-15]
 13580 00001D55 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13581                                  
 13582                                  ;hkn; DOS_Read is in DOSCODE
 13583 00001D58 BF[0033]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13584                                  	;test	byte [bp-20],4
 13585 00001D5B F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13586 00001D5F 7503                    	JNZ	short DoContext
 13587                                  
 13588                                  ;hkn; DOS_Write is in DOSCODE
 13589 00001D61 BF[2935]                	MOV	DI,DOS_WRITE
 13590                                  DoContext:
 13591 00001D64 55                      	push	bp
 13592 00001D65 1E                      	push	ds
 13593 00001D66 56                      	push	si
 13594                                  
 13595                                  ;hkn; SS is DOSDATA
 13596 00001D67 16                      	push	ss
 13597 00001D68 1F                      	pop	ds
 13598                                  
 13599                                  ;; Fix for disk full
 13600 00001D69 FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE	
 13601                                  	
 13602 00001D6B 5E                      	pop	si
 13603 00001D6C 1F                      	pop	ds
 13604 00001D6D 5D                      	pop	bp
 13605 00001D6E 72B9                    	JC	short FCBDeath
 13606                                  	
 13607 00001D70 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13608 00001D76 740A                    	JZ	short NODSKFULL
 13609 00001D78 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13610                                  	;mov	byte [bp-1],1 
 13611 00001D7E C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13612                                  NODSKFULL:
 13613                                  ;; Fix for disk full
 13614                                  	;mov	[bp-17],cx
 13615 00001D82 894EEF                  	MOV	cResult,CX
 13616 00001D85 E827FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13617                                  	;pop	word [es:di+17h]	
 13618 00001D88 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13619                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)			
 13620                                  	;mov	ax,[es:di+11h]
 13621 00001D8C 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13622                                  	;mov	[si+10h],ax
 13623 00001D90 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13624                                  	;mov	ax,[es:di+13h]
 13625 00001D93 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13626                                  	;mov	[si+12h],ax
 13627 00001D97 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13628                                  					;	}
 13629                                  SkipOp:
 13630                                  	;mov	ax,[bp-17]
 13631 00001D9A 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13632 00001D9D 31D2                    	XOR	DX,DX
 13633                                  	;div	word [bp-9]
 13634 00001D9F F776F7                  	DIV	RecSize
 13635                                  	;mov	[bp-19],ax
 13636 00001DA2 8946ED                  	MOV	cRecRes,AX
 13637                                  	;add	[bp-7],ax
 13638 00001DA5 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13639                                  	;adc	word [bp-5],0
 13640 00001DA8 8356FB00                	ADC	RecPosH,0
 13641                                  
 13642                                  ; If we have not gotten the expected number of records, we signal an EOF
 13643                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13644                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13645                                  ; do we.
 13646                                  
 13647                                  	;cmp	ax,[bp-3]
 13648 00001DAC 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 13649 00001DAF 7411                    	JZ	short TryBlank
 13650                                  	;test	byte [bp-20],4
 13651 00001DB1 F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 13652 00001DB5 7507                    	JNZ	short SetEOF
 13653                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13654                                  	; MSDOS 3.3
 13655                                  	;;test	word [es:di+5],80h
 13656                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13657                                  	;JNZ	short TryBlank
 13658                                  	; MSDOS 5.0 & MSDOS 6.0
 13659                                  	;test	byte [es:di+5],80h
 13660 00001DB7 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 13661 00001DBC 7504                    	jnz	short TryBlank
 13662                                  
 13663                                  SetEOF:
 13664                                  	;mov	byte [bp-1],1
 13665 00001DBE C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 13666                                  TryBlank:				;
 13667 00001DC2 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 13668 00001DC4 7426                    	JZ	short SetExt
 13669                                  	;add	word [bp-7],1
 13670 00001DC6 8346F901                	ADD	RecPosL,1		;	RecPos++;
 13671                                  	;adc	word [bp-5],0
 13672 00001DCA 8356FB00                	ADC	RecPosH,0
 13673                                  	;test	byte [bp-20],4
 13674 00001DCE F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 13675 00001DD2 7418                    	JZ	short SetExt
 13676                                  	;inc	word [bp-19]
 13677 00001DD4 FF46ED                  	INC	cRecRes 		;	cRecRes++;
 13678                                  	;mov	byte [bp-1],3
 13679 00001DD7 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 13680                                  	;mov	cx,[bp-9]
 13681 00001DDB 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 13682 00001DDE 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 13683 00001DE0 30C0                    	XOR	AL,AL
 13684                                  ;hkn; 	SS override
 13685 00001DE2 36C43E[2C03]            	les     di,[ss:DMAADD]
 13686                                  	;add	di,[bp-17]
 13687 00001DE7 037EEF                  	ADD	DI,cResult
 13688 00001DEA F3AA                    	REP	STOSB			;   }	}
 13689                                  SetExt:
 13690                                  	;mov	dx,[bp-5]
 13691 00001DEC 8B56FB                  	MOV	DX,RecPosH
 13692                                  	;mov	ax,[bp-7]
 13693 00001DEF 8B46F9                  	MOV	AX,RecPosL
 13694                                  	;test	byte [bp-20],2
 13695 00001DF2 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 13696 00001DF6 7406                    	JZ	short DoSetExt
 13697                                  	;test	byte [bp-20],8
 13698 00001DF8 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 13699 00001DFC 7403                    	JZ	short TrySetRR
 13700                                  DoSetExt:
 13701 00001DFE E868FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 13702                                  TrySetRR:
 13703                                  	;test	byte [bp-20],8
 13704 00001E01 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13705 00001E05 740F                    	JZ	short TryReturn
 13706                                  	;mov	[si+21h],ax
 13707 00001E07 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 13708                                  	;mov	[si+23h],dl
 13709 00001E0A 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 13710                                  	;cmp	word [si+0Eh],64
 13711 00001E0D 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 13712 00001E11 7303                    	JAE	short TryReturn
 13713                                  	;mov	[si+24h],dh
 13714 00001E13 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 13715                                  TryReturn: 
 13716                                  	;test	byte [bp-20],4
 13717 00001E16 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 13718 00001E1A 750B                    	JNZ	short FCBSave
 13719 00001E1C 1E                      	push	ds			;	FCB->FDate = date;
 13720 00001E1D E8D5EC                  	call	DATE16			;	FCB->FTime = time;
 13721 00001E20 1F                      	pop	ds
 13722                                  	;mov	[si+14h],ax
 13723 00001E21 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13724                                  	;mov	[si+16h],dx
 13725 00001E24 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 13726                                  FCBSave: 
 13727                                  	;test	byte [bp-20],8
 13728 00001E27 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13729 00001E2B 7409                    	jz	short DoReturn
 13730                                  	;mov	cx,[bp-19]
 13731 00001E2D 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 13732 00001E30 E852E6                  	call    Get_User_Stack
 13733                                  	;mov	[si+4],cx
 13734 00001E33 894C04                  	MOV	[SI+user_env.user_CX],CX
 13735                                  DoReturn:
 13736                                  	;mov	al,[bp-1]
 13737 00001E36 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 13738                                  	;Leave	
 13739 00001E39 89EC                    	mov     sp,bp
 13740 00001E3B 5D                      	pop     bp
 13741 00001E3C C3                      	retn
 13742                                  
 13743                                  ; 22/07/2018 - Retro DOS v3.0
 13744                                  
 13745                                  ;Break <$FCB_Open - open an old-style FCB>
 13746                                  ;---------------------------------------------------------------------------
 13747                                  ;
 13748                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 13749                                  ;	for us and asked to have the rest filled in.
 13750                                  ;
 13751                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13752                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13753                                  ;		FCB has the following fields filled in:
 13754                                  ;		    Time/Date Extent/NR Size
 13755                                  ;---------------------------------------------------------------------------
 13756                                  
 13757                                  _$FCB_OPEN:			; System call 15
 13758                                  
 13759 00001E3D B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 13760                                  
 13761                                  ;hkn; DOS_Open is in DOSCODE
 13762 00001E40 B9[A02B]                	MOV	CX,DOS_OPEN
 13763                                  
 13764                                  ; The following is common code for Creation and openning of FCBs. AX is
 13765                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 13766                                  ; the FCB
 13767                                  
 13768                                  DoAccess:
 13769 00001E43 1E                      	push	ds
 13770 00001E44 52                      	push	dx
 13771 00001E45 51                      	push	cx
 13772 00001E46 50                      	push	ax			; save FCB pointer away
 13773                                  
 13774                                  ;hkn; 	OpenBuf is in DOSDATA
 13775 00001E47 BF[BE03]                	MOV	DI,OPENBUF
 13776 00001E4A E8E54C                  	call	TransFCB		; crunch the fcb
 13777 00001E4D 58                      	pop	ax
 13778 00001E4E 59                      	pop	cx
 13779 00001E4F 5A                      	pop	dx
 13780 00001E50 1F                      	pop	ds			; get fcb
 13781 00001E51 7303                    	JNC	short FindFCB		; everything seems ok
 13782                                  FCBOpenErr:
 13783                                  	; AL has error code
 13784 00001E53 E904E8                  	jmp	FCB_RET_ERR
 13785                                  FindFCB:
 13786 00001E56 E82AFE                  	call	GetExtended		; DS:SI will point to FCB
 13787                                  
 13788                                  	; 17/05/2019 - Retro DOS v4.0
 13789                                  
 13790                                  	; MSDOS 3.3
 13791                                  	;call	LRUFCB
 13792                                  	;jc	short HardMessage
 13793                                  
 13794                                  	; MSDOS 6.0
 13795 00001E59 50                      	push	ax
 13796 00001E5A B001                    	mov	al,1			;indicate Open/Create operation
 13797 00001E5C E820FB                  	call	LRUFCB			; get a sft entry (no error)
 13798 00001E5F 58                      	pop	ax
 13799 00001E60 722A                    	jc	short HardMessage
 13800                                  	
 13801                                  	;mov	word [es:di+2],8000h
 13802 00001E62 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 13803 00001E68 1E                      	push	ds
 13804 00001E69 56                      	push	si	
 13805 00001E6A 53                      	push	bx			; save fcb pointer
 13806 00001E6B 89CE                    	MOV	SI,CX
 13807                                  
 13808                                  ;hkn; SS is DOSDATA
 13809 00001E6D 16                      	push	ss
 13810 00001E6E 1F                      	pop	ds			    ; let DOS_Open see variables
 13811 00001E6F FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 13812 00001E71 5B                      	pop	bx
 13813 00001E72 5E                      	pop	si
 13814 00001E73 1F                      	pop	ds			; get fcb
 13815                                  
 13816                                  ;hkn; SS override
 13817 00001E74 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 13818 00001E79 7318                    	JNC	short FCBOK		; operation succeeded
 13819                                  failopen:
 13820 00001E7B 50                      	PUSH	AX
 13821 00001E7C B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 13822 00001E7E E8E5FC                  	call	BlastSFT
 13823 00001E81 58                      	POP	AX
 13824                                  	;cmp	ax,4
 13825 00001E82 83F804                  	CMP	AX,error_too_many_open_files
 13826 00001E85 7405                    	JZ	short HardMessage
 13827                                  	;cmp	ax,24h
 13828 00001E87 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 13829 00001E8A 7505                    	jnz	short DeadFCB
 13830                                  HardMessage:
 13831 00001E8C 50                      	PUSH	AX
 13832 00001E8D E897FD                  	call	FCBHardErr
 13833 00001E90 58                      	POP	AX
 13834                                  DeadFCB:
 13835                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13836                                  	;jmp	FCB_RET_ERR
 13837 00001E91 EBC0                    	jmp	short FCBOpenErr
 13838                                  FCBOK:
 13839                                  	; MSDOS 6.0
 13840 00001E93 E8D5F3                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 13841 00001E96 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 13842 00001E98 E8C354                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 13843 00001E9B 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 13844                                  ;SR;
 13845                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 13846                                  ; LocalSFT variable to reflect this.
 13847                                  
 13848 00001E9D 36893E[4410]            	mov	[ss:LocalSFT],di
 13849 00001EA2 368C06[4610]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 13850                                  ;;SR;
 13851                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 13852                                  ;;
 13853                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 13854                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 13855                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 13856                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 13857                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 13858                                  
 13859                                  FCBOK2:
 13860                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13861 00001EA7 26FF05                  	inc	word [es:di]
 13862                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 13863 00001EAA E802FA                  	call	SaveFCBInfo
 13864                                  	; MSDOS 3.3
 13865                                  	;call	SetOpenAge
 13866                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13867                                  	;test	word [es:di+5],80h
 13868                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13869 00001EAD 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 13870 00001EB2 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 13871 00001EB4 8A04                    	MOV	AL,[SI]			; get drive byte
 13872 00001EB6 E8044C                  	call	GETTHISDRV		; convert
 13873                                  	;INC	AL
 13874                                  	; 17/12/2022
 13875 00001EB9 40                      	inc	ax
 13876 00001EBA 8804                    	MOV	[SI],AL			; stash in good drive letter
 13877                                  FCBNoDrive:
 13878                                  	;mov	word [si+0Eh],128
 13879 00001EBC C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 13880                                  
 13881                                  	;mov	ax,[es:di+0Dh]
 13882 00001EC1 268B450D                	MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 13883                                  	;mov	[si+16h],ax
 13884 00001EC5 894416                  	MOV	[SI+SYS_FCB.FTIME],AX
 13885                                  	;mov	ax,[es:di+0Fh]
 13886 00001EC8 268B450F                	MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 13887                                  	;mov	[si+14h],ax
 13888 00001ECC 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13889                                  	;mov	ax,[es:di+11h]
 13890 00001ECF 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 13891                                  	;mov	[si+10h],ax
 13892 00001ED3 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13893                                  	;mov	ax,[es:di+13h]
 13894 00001ED6 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13895                                  	;mov	[si+12h],ax
 13896 00001EDA 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13897 00001EDD 31C0                    	XOR	AX,AX			; convenient zero
 13898                                  	;mov	[si+0Ch],ax
 13899 00001EDF 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 13900                                  
 13901                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 13902                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 13903                                  
 13904                                  ;hkn; 	SS override
 13905 00001EE2 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 13906                                  	;mov	ah,[es:di+4]
 13907 00001EE7 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 13908                                  OpenScan:
 13909                                  	;cmp	al,[si+18h]
 13910 00001EEB 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 13911 00001EEE 7407                    	JZ	short SkipCheck
 13912 00001EF0 50                      	push	ax			; preserve count
 13913 00001EF1 E888FC                  	call	CheckFCB		; do they match
 13914 00001EF4 58                      	pop	ax			; get count back
 13915 00001EF5 7309                    	JNC	short OpenFound		; found a match!
 13916                                  SkipCheck:
 13917 00001EF7 FEC0                    	INC	AL			; advance to next FCB
 13918 00001EF9 38E0                    	CMP	AL,AH			; table full?
 13919 00001EFB 75EE                    	JNZ	short OpenScan		; no, go for more
 13920                                  OpenDone:
 13921 00001EFD 30C0                    	xor	al,al			; return success
 13922 00001EFF C3                      	retn
 13923                                  
 13924                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 13925                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 13926                                  ; Consider:
 13927                                  ;
 13928                                  ;   open (foo)	delete (foo) open (bar)
 13929                                  ;
 13930                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 13931                                  ; foo even though foo is no longer needed; this is due to the server closing
 13932                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 13933                                  ; If we were to CLOSE bar, the server would then close the only reference to
 13934                                  ; bar and subsequent I/O would be lost to the redirector.
 13935                                  ;
 13936                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 13937                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 13938                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 13939                                  ; around. This will allow us to access the same file through multiple network
 13940                                  ; connections and NOT prematurely terminate when the ref count on one
 13941                                  ; connection goes to zero.
 13942                                  
 13943                                  OpenFound:
 13944                                  	;mov	[si+18h],al
 13945 00001F00 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 13946 00001F03 26FF05                  	inc	word [es:di]
 13947                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13948                                  					; remember this new invocation
 13949 00001F06 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; update LRU counts
 13950                                  	;mov	[es:di+15h],ax
 13951 00001F0A 26894515                	MOV	[ES:DI+sf_LRU],AX
 13952                                  ;
 13953                                  ; We have an FCB sft that is now of no use.  We release sharing info and then
 13954                                  ; blast it to prevent other reuse.
 13955                                  ;
 13956 00001F0E 16                      	push	ss
 13957 00001F0F 1F                      	pop	ds
 13958 00001F10 C43E[9E05]              	LES	DI,[THISSFT]
 13959 00001F14 26FF0D                  	dec	word [es:di]
 13960                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13961                                  					; free the newly allocated SFT
 13962 00001F17 E87C54                  	call	ShareEnd
 13963 00001F1A B043                    	MOV	AL,'C'	 ; 43h
 13964 00001F1C E847FC                  	call	BlastSFT
 13965 00001F1F EBDC                    	JMP	short OpenDone
 13966                                  
 13967                                  ;BREAK	<$FCB_Create - create a new directory entry>
 13968                                  ;----------------------------------------------------------------------------
 13969                                  ;
 13970                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 13971                                  ;	FCB for us and asked to have the rest filled in.
 13972                                  ;
 13973                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13974                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13975                                  ;		FCB has the following fields filled in:
 13976                                  ;		    Time/Date Extent/NR Size
 13977                                  ;----------------------------------------------------------------------------
 13978                                  
 13979                                  _$FCB_CREATE:		; System call 22
 13980                                  
 13981                                  ;hkn; DOS_Create is in DOSCODE
 13982 00001F21 B9[762A]                	MOV	CX,DOS_CREATE		; routine to call
 13983 00001F24 31C0                    	XOR	AX,AX			; attributes to create
 13984 00001F26 E85AFD                  	call	GetExtended		; get extended FCB
 13985 00001F29 7403                    	JZ	short DoAccessJ		; not an extended FCB
 13986 00001F2B 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 13987                                  DoAccessJ:
 13988 00001F2E E912FF                  	JMP	DoAccess		; do dirty work
 13989                                  
 13990                                  ; 22/07/2018 - Retro DOS v3.0
 13991                                  
 13992                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13993                                  ;----------------------------------------------------------------------------
 13994                                  ;
 13995                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13996                                  ;	and write a number of blocks from it.
 13997                                  ;
 13998                                  ;   Inputs:	DS:DX point to an FCB
 13999                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 14000                                  ;		AL <> 0 Not enough room on disk for the output
 14001                                  ;
 14002                                  ;----------------------------------------------------------------------------
 14003                                  
 14004                                  _$FCB_RANDOM_WRITE_BLOCK:
 14005                                  	;mov	AL,0Ah	
 14006 00001F31 B00A                    	MOV	AL,RANDOM+BLOCK
 14007 00001F33 E968FD                  	JMP	FCBIO
 14008                                  
 14009                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 14010                                  ;----------------------------------------------------------------------------
 14011                                  ;
 14012                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 14013                                  ;	and read a number of blocks from it.
 14014                                  ;
 14015                                  ;   Inputs:	DS:DX point to an FCB
 14016                                  ;   Outputs:	AL = error codes defined above
 14017                                  ;
 14018                                  ;----------------------------------------------------------------------------
 14019                                  
 14020                                  _$FCB_RANDOM_READ_BLOCK:
 14021                                  	;mov	AL,0Eh	
 14022 00001F36 B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 14023 00001F38 E963FD                  	JMP	FCBIO
 14024                                  
 14025                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 14026                                  ;----------------------------------------------------------------------------
 14027                                  ;
 14028                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 14029                                  ;	memory
 14030                                  ;
 14031                                  ;   Inputs:	DS:DX point to an FCB
 14032                                  ;   Outputs:	AL = error codes defined above
 14033                                  ;
 14034                                  ;----------------------------------------------------------------------------
 14035                                  
 14036                                  _$FCB_SEQ_READ:
 14037                                  	;mov	AL,4	
 14038 00001F3B B004                    	MOV	AL,FCBREAD
 14039 00001F3D E95EFD                  	JMP	FCBIO
 14040                                  
 14041                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 14042                                  ;----------------------------------------------------------------------------
 14043                                  ;
 14044                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 14045                                  ;	file
 14046                                  ;
 14047                                  ;   Inputs:	DS:DX point to an FCB
 14048                                  ;   Outputs:	AL = error codes defined above
 14049                                  ;
 14050                                  ;----------------------------------------------------------------------------
 14051                                  
 14052                                  _$FCB_SEQ_WRITE:
 14053 00001F40 B000                    	MOV	AL,0
 14054 00001F42 E959FD                  	jmp	FCBIO
 14055                                  
 14056                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 14057                                  ;----------------------------------------------------------------------------
 14058                                  ;
 14059                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 14060                                  ;	record from it.
 14061                                  ;
 14062                                  ;   Inputs:	DS:DX point to an FCB
 14063                                  ;   Outputs:	AL = error codes defined above
 14064                                  ;
 14065                                  ;----------------------------------------------------------------------------
 14066                                  
 14067                                  _$FCB_RANDOM_READ:
 14068                                  	;mov	AL,6	
 14069 00001F45 B006                    	MOV	AL,RANDOM+FCBREAD
 14070 00001F47 E954FD                  	jmp	FCBIO			; single block
 14071                                  
 14072                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 14073                                  ;----------------------------------------------------------------------------
 14074                                  ;
 14075                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 14076                                  ;	a record to it.
 14077                                  ;
 14078                                  ;   Inputs:	DS:DX point to an FCB
 14079                                  ;   Outputs:	AL = error codes defined above
 14080                                  ;
 14081                                  ;----------------------------------------------------------------------------
 14082                                  
 14083                                  _$FCB_RANDOM_WRITE:
 14084                                  	;mov	AL,2	
 14085 00001F4A B002                    	MOV	AL,RANDOM
 14086 00001F4C E94FFD                  	jmp	FCBIO
 14087                                  
 14088                                  ;============================================================================
 14089                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 14090                                  ;============================================================================
 14091                                  ; 22/07/2018 - Retro DOS v3.0
 14092                                  ; 17/05/2019 - Retro DOS v4.0
 14093                                  
 14094                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 14095                                  
 14096                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14097                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 14098                                  
 14099                                  ;**	Search.asm
 14100                                  ;----------------------------------------------------------------------------
 14101                                  ;	Directory search system calls.
 14102                                  ;	These will be passed direct text of the pathname from the user. 
 14103                                  ;	They will need to be passed through the macro expander prior to
 14104                                  ;	being sent through the low-level stuff. 
 14105                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 14106                                  ;
 14107                                  ;	$Dir_Search_First	  written
 14108                                  ;	$Dir_Search_Next	  written
 14109                                  ;	$Find_First	  written
 14110                                  ;	$Find_Next		  written
 14111                                  ;	PackName		  written
 14112                                  ;
 14113                                  ;	Modification history:
 14114                                  ;
 14115                                  ;	  Created: ARR 4 April 1983
 14116                                  
 14117                                  ;----------------------------------------------------------------------------
 14118                                  ; Procedure Name : $DIR_SEARCH_FIRST
 14119                                  ;
 14120                                  ; Inputs:
 14121                                  ;	DS:DX Points to unopenned FCB
 14122                                  ; Function:
 14123                                  ;	Directory is searched for first matching entry and the directory
 14124                                  ;	entry is loaded at the disk transfer address
 14125                                  ; Returns:
 14126                                  ;	AL = -1 if no entries matched, otherwise 0
 14127                                  ;----------------------------------------------------------------------------
 14128                                  
 14129                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 14130                                  
 14131                                  _$DIR_SEARCH_FIRST:
 14132 00001F4F 368916[A605]            	MOV	[SS:THISFCB],DX
 14133 00001F54 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14134 00001F59 89D6                    	MOV	SI,DX
 14135 00001F5B 803CFF                  	CMP	BYTE [SI],0FFH
 14136 00001F5E 7503                    	JNZ	short NORMFCB4
 14137 00001F60 83C607                  	ADD	SI,7			; Point to drive select byte
 14138                                  NORMFCB4:
 14139 00001F63 FF34                    	push	word [SI]		; Save original drive byte for later
 14140                                  
 14141 00001F65 16                      	push	ss
 14142 00001F66 07                      	pop	es			; get es to address DOSGroup
 14143                                  
 14144 00001F67 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14145 00001F6A E8C54B                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14146 00001F6D 7304                    	JNC	short SearchIt		; no error, go and look
 14147 00001F6F 5B                      	pop	bx			; Clean stack
 14148                                  
 14149                                  ; Error code is in AX
 14150                                  
 14151                                  	; 09/11/2022
 14152                                  dcf_errj:
 14153 00001F70 E9E7E6                  	jmp	FCB_RET_ERR		; error
 14154                                  
 14155                                  SearchIt:
 14156 00001F73 16                      	push	ss
 14157 00001F74 1F                      	pop	ds			; get ready for search
 14158 00001F75 FF36[2C03]              	push	word [DMAADD]
 14159 00001F79 FF36[2E03]              	push	word [DMAADD+2]
 14160 00001F7D C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14161 00001F83 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14162                                  	; MSDOS 3.3
 14163                                  	;call	DOS_SEARCH_FIRST
 14164                                  	; MSDOS 6.0
 14165 00001F87 E88501                  	call	GET_FAST_SEARCH		; search
 14166 00001F8A 8F06[2E03]              	pop	word [DMAADD+2]
 14167 00001F8E 8F06[2C03]              	pop	word [DMAADD]
 14168 00001F92 7303                    	JNC	short SearchSet		; no error, transfer info
 14169 00001F94 5B                      	pop	bx			; Clean stack
 14170                                  
 14171                                  ; Error code is in AX
 14172                                  
 14173                                  	; 09/11/2022
 14174                                  	;jmp	FCB_RET_ERR
 14175 00001F95 EBD9                    	jmp	short dcf_errj
 14176                                  
 14177                                  ; The search was successful (or the search-next). We store the information
 14178                                  ; into the user's FCB for continuation.
 14179                                  
 14180                                  SearchSet:
 14181 00001F97 BE[BE04]                	MOV	SI,SEARCHBUF
 14182 00001F9A C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14183 00001F9E F606[6C05]FF            	TEST	byte [EXTFCB],0FFh		;
 14184 00001FA3 7403                    	JZ	short NORMFCB1
 14185 00001FA5 83C707                  	ADD	DI,7			; Point past the extension
 14186                                  NORMFCB1:
 14187 00001FA8 5B                      	pop	bx			; Get original drive byte
 14188 00001FA9 08DB                    	OR	BL,BL
 14189 00001FAB 7506                    	JNZ	short SearchDrv
 14190 00001FAD 8A1E[3603]              	MOV	BL,[CURDRV]
 14191 00001FB1 FEC3                    	INC	BL
 14192                                  SearchDrv:
 14193 00001FB3 AC                      	LODSB				; Get correct search contin drive byte
 14194 00001FB4 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14195 00001FB6 47                      	INC	DI
 14196                                  	;STOSB				; Store the correct "user" drive byte
 14197                                  					;  at the start of the search info
 14198 00001FB7 B90A00                  	MOV	CX,20/2
 14199 00001FBA F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14200 00001FBC 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14201                                  					;   byte to AL
 14202 00001FBE AA                      	STOSB				; Search contin drive byte at end of
 14203                                  					;   contin info
 14204 00001FBF C43E[2C03]              	LES	DI,[DMAADD]
 14205 00001FC3 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14206 00001FC8 740D                    	JZ	short NORMFCB2
 14207 00001FCA B0FF                    	MOV	AL,0FFh
 14208 00001FCC AA                      	STOSB
 14209 00001FCD FEC0                    	INC	AL
 14210                                  	;MOV	CX,5
 14211                                  	; 17/12/2022
 14212 00001FCF B105                    	mov	cl,5
 14213 00001FD1 F3AA                    	REP	STOSB
 14214 00001FD3 A0[6D05]                	MOV	AL,[SATTRIB]
 14215 00001FD6 AA                      	STOSB
 14216                                  NORMFCB2:
 14217 00001FD7 88D8                    	MOV	AL,BL			; User Drive byte
 14218 00001FD9 AA                      	STOSB
 14219                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14220                                  	; 17/12/2022
 14221 00001FDA B110                    	mov	cl,16
 14222 00001FDC F3A5                    	REP	MOVSW
 14223 00001FDE E976E6                  	jmp	FCB_RET_OK
 14224                                  
 14225                                  ;----------------------------------------------------------------------------
 14226                                  ;
 14227                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14228                                  ;
 14229                                  ; Inputs:
 14230                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14231                                  ; Function:
 14232                                  ;	Directory is searched for the next matching entry and the directory
 14233                                  ;	entry is loaded at the disk transfer address
 14234                                  ; Returns:
 14235                                  ;	AL = -1 if no entries matched, otherwise 0
 14236                                  ;----------------------------------------------------------------------------
 14237                                  
 14238                                  _$DIR_SEARCH_NEXT:
 14239 00001FE1 368916[A605]            	MOV	[SS:THISFCB],DX
 14240 00001FE6 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14241 00001FEB 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14242 00001FF1 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14243                                  
 14244 00001FF7 16                      	push	ss
 14245 00001FF8 07                      	pop	es
 14246                                  
 14247 00001FF9 BF[BE04]                	MOV	DI,SEARCHBUF
 14248                                  
 14249 00001FFC 89D6                    	MOV	SI,DX
 14250 00001FFE 803CFF                  	CMP	BYTE [SI],0FFh
 14251 00002001 750D                    	JNZ	short NORMFCB6
 14252 00002003 83C606                  	ADD	SI,6
 14253 00002006 AC                      	LODSB
 14254                                  
 14255 00002007 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14256 0000200B 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14257                                  NORMFCB6:
 14258 00002010 AC                      	LODSB				; Get original user drive byte
 14259 00002011 50                      	push	ax			; Put it on stack
 14260 00002012 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14261 00002015 AA                      	STOSB				; Put in correct place
 14262 00002016 B90A00                  	MOV	CX,20/2
 14263 00002019 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14264                                  
 14265 0000201B 16                      	push	ss
 14266 0000201C 1F                      	pop	ds
 14267                                  
 14268 0000201D FF36[2C03]              	push	word [DMAADD]
 14269 00002021 FF36[2E03]              	push	word [DMAADD+2]
 14270 00002025 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14271 0000202B 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14272 0000202F E8220E                  	call	DOS_SEARCH_NEXT 	; Find it
 14273 00002032 8F06[2E03]              	pop	word [DMAADD+2]
 14274 00002036 8F06[2C03]              	pop	word [DMAADD]
 14275 0000203A 7203                    	JC	short SearchNoMore
 14276 0000203C E958FF                  	JMP	SearchSet		; Ok set return
 14277                                  
 14278                                  SearchNoMore:
 14279 0000203F C43E[A605]              	LES	DI,[THISFCB]
 14280 00002043 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14281 00002048 7403                    	JZ	short NORMFCB8
 14282 0000204A 83C707                  	ADD	DI,7			; Point past the extension
 14283                                  NORMFCB8:
 14284 0000204D 5B                      	pop	bx			; Get original drive byte
 14285 0000204E 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14286                                  					;  at the right spot
 14287                                  ; error code is in AX
 14288                                  
 14289 00002051 E906E6                  	jmp	FCB_RET_ERR
 14290                                  
 14291                                  ; 17/05/2019 - Retro DOS v4.0
 14292                                  
 14293                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14294                                  
 14295                                  ;---------------------------------------------------------------------------
 14296                                  ;
 14297                                  ;   Procedure Name : $FIND_FIRST
 14298                                  ; 
 14299                                  ;   Assembler usage:
 14300                                  ;	    MOV AH, FindFirst
 14301                                  ;	    LDS DX, name
 14302                                  ;	    MOV CX, attr
 14303                                  ;	    INT 21h
 14304                                  ;	; DMA address has datablock
 14305                                  ;
 14306                                  ;   Error Returns:
 14307                                  ;	    AX = error_path_not_found
 14308                                  ;	       = error_no_more_files
 14309                                  ;---------------------------------------------------------------------------
 14310                                  
 14311                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14312                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14313                                  
 14314                                  _$FIND_FIRST:
 14315 00002054 89D6                    	MOV	SI,DX			; get name in appropriate place
 14316 00002056 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14317                                  
 14318 0000205B BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14319                                  
 14320 0000205E E8374B                  	call	TransPathSet		; convert the path
 14321 00002061 7305                    	JNC	short Find_it 		; no error, go and look
 14322                                  FindError:
 14323                                  	;mov	al,3
 14324 00002063 B003                    	mov	al, error_path_not_found ; error and map into one.
 14325                                  	; 09/11/2022
 14326                                  FF_errj:
 14327 00002065 E9DCE5                  	jmp	SYS_RET_ERR
 14328                                  Find_it:
 14329 00002068 16                      	push	ss
 14330 00002069 1F                      	pop	ds
 14331                                  
 14332 0000206A FF36[2C03]              	push	word [DMAADD]
 14333 0000206E FF36[2E03]              	push	word [DMAADD+2]
 14334 00002072 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14335 00002078 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14336                                  	; MSDOS 3.3
 14337                                  	;call	DOS_SEARCH_FIRST
 14338                                  	; MSDOS 6.0
 14339 0000207C E89000                  	call	GET_FAST_SEARCH 	; search
 14340 0000207F 8F06[2E03]              	pop	word [DMAADD+2]
 14341 00002083 8F06[2C03]              	pop	word [DMAADD]
 14342                                  	
 14343                                  	; 16/12/2022
 14344                                  	;JNC	short FindSet 		; no error, transfer info
 14345 00002087 72DC                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14346                                  	;
 14347                                  	;jmp	SYS_RET_ERR
 14348                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14349                                  ;FFF_errj:
 14350                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14351                                  
 14352                                  FindSet:
 14353 00002089 BE[BE04]                	MOV	SI,SEARCHBUF
 14354 0000208C C43E[2C03]              	LES	DI,[DMAADD]
 14355 00002090 B91500                  	MOV	CX,21
 14356 00002093 F3A4                    	REP	MOVSB
 14357 00002095 56                      	PUSH	SI			; Save pointer to start of entry
 14358                                  	;mov	al,[si+0Bh]
 14359 00002096 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14360 00002099 AA                      	STOSB
 14361                                  	;add	si,16h ; 22
 14362 0000209A 83C616                  	ADD	SI,dir_entry.dir_time
 14363 0000209D A5                      	MOVSW				; dir_time
 14364 0000209E A5                      	MOVSW				; dir_date
 14365 0000209F 46                      	INC	SI
 14366 000020A0 46                      	INC	SI			; Skip dir_first
 14367 000020A1 A5                      	MOVSW				; dir_size (2 words)
 14368 000020A2 A5                      	MOVSW
 14369 000020A3 5E                      	POP	SI			; Point back to dir_name
 14370 000020A4 E83500                   	CALL	PackName
 14371 000020A7 E991E5                  	jmp	SYS_RET_OK		; bye with no errors
 14372                                  
 14373                                  ;---------------------------------------------------------------------------
 14374                                  ;
 14375                                  ;   Procedure Name : $FIND_NEXT
 14376                                  ;
 14377                                  ;   Assembler usage:
 14378                                  ;	; dma points at area returned by find_first
 14379                                  ;	    MOV AH, findnext
 14380                                  ;	    INT 21h
 14381                                  ;	; next entry is at dma
 14382                                  ;
 14383                                  ;   Error Returns:
 14384                                  ;	    AX = error_no_more_files
 14385                                  ;---------------------------------------------------------------------------
 14386                                  
 14387                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14388                                  _$FIND_NEXT:
 14389 000020AA 16                      	push	ss
 14390 000020AB 07                      	pop	es
 14391                                  
 14392 000020AC BF[BE04]                	MOV	DI,SEARCHBUF
 14393                                  
 14394 000020AF 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14395                                  
 14396 000020B4 B91500                  	MOV	CX,21
 14397 000020B7 F3A4                    	REP	MOVSB			; Put the search continuation info
 14398                                  					;  in the right place
 14399 000020B9 16                      	push	ss
 14400 000020BA 1F                      	pop	ds			; get ready for search
 14401                                  	
 14402 000020BB FF36[2C03]              	push	word [DMAADD]
 14403 000020BF FF36[2E03]              	push	word [DMAADD+2]
 14404 000020C3 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14405 000020C9 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14406 000020CD E8840D                  	call	DOS_SEARCH_NEXT 	; Find it
 14407 000020D0 8F06[2E03]              	pop	word [DMAADD+2]
 14408 000020D4 8F06[2C03]              	pop	word [DMAADD]
 14409 000020D8 73AF                    	JNC	short FindSet 		; No error, set info
 14410                                  	;jmp	SYS_RET_ERR
 14411                                  	; 16/12/2022
 14412 000020DA EB89                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14413                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14414                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14415                                  
 14416                                  ;---------------------------------------------------------------------------
 14417                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14418                                  ;
 14419                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14420                                  ;	the ASCIZ format.
 14421                                  ;
 14422                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14423                                  ;		(ES:DI) = destination area (13 bytes)
 14424                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14425                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14426                                  ;---------------------------------------------------------------------------
 14427                                  
 14428                                  PackName:
 14429                                  ;	Move over 8 characters to cover the name component, then trim it's
 14430                                  ;	trailing blanks.
 14431                                  
 14432 000020DC B90800                  	MOV	CX,8			; Pack the name
 14433 000020DF F3A4                    	REP	MOVSB			; Move all of it
 14434                                  main_kill_tail:
 14435 000020E1 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14436 000020E6 7507                    	JNZ	short find_check_dot
 14437 000020E8 4F                      	DEC	DI			; Back up over trailing space
 14438 000020E9 41                      	INC	CX
 14439 000020EA 83F908                  	CMP	CX,8
 14440 000020ED 72F2                    	JB	short main_kill_tail
 14441                                  find_check_dot:
 14442                                  	;CMP	WORD [SI],(" " << 8) | " "
 14443 000020EF 813C2020                	cmp     word [si],2020h 
 14444 000020F3 7506                    	JNZ	short got_ext 		; Some chars in extension
 14445 000020F5 807C0220                	CMP	BYTE [SI+2]," "
 14446 000020F9 7410                    	JZ	short find_done		; No extension
 14447                                  got_ext:
 14448 000020FB B02E                    	MOV	AL,"."	; 2Eh
 14449 000020FD AA                      	STOSB
 14450                                  	;MOV	CX,3
 14451                                  	; 18/12/2022
 14452                                  	;mov	cl,3
 14453                                  	;REP	MOVSB
 14454 000020FE A4                      	movsb
 14455 000020FF A4                      	movsb
 14456 00002100 A4                      	movsb
 14457                                  ext_kill_tail:
 14458 00002101 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14459 00002106 7503                    	JNZ	short find_done
 14460 00002108 4F                      	DEC	DI			; Back up over trailing space
 14461 00002109 EBF6                    	JMP	short ext_kill_tail
 14462                                  find_done:
 14463 0000210B 31C0                    	XOR	AX,AX
 14464 0000210D AA                      	STOSB				; NUL terminate
 14465 0000210E C3                      	retn
 14466                                  
 14467                                  ;---------------------------------------------------------------------------
 14468                                  
 14469                                  	; 17/05/2019 - Retro DOS v4.0
 14470                                  GET_FAST_SEARCH:
 14471                                  	; 22/07/2018
 14472                                  	; MSDOS 6.0
 14473                                  	; 17/12/2022
 14474 0000210F 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14475                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14476                                  					;FO.trigger fastopen ;AN000;
 14477                                  	;call	DOS_SEARCH_FIRST
 14478                                  	;retn
 14479                                  	; 17/12/2022
 14480 00002115 E9500C                  	jmp	DOS_SEARCH_FIRST
 14481                                  
 14482                                  ;============================================================================
 14483                                  ; PATH.ASM, MSDOS 6.0, 1991
 14484                                  ;============================================================================
 14485                                  ; 06/08/2018 - Retro DOS v3.0
 14486                                  ; 17/05/2019 - Retro DOS v4.0
 14487                                  
 14488                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14489                                  
 14490                                  ;**	Directory related system calls. These will be passed direct text of the
 14491                                  ;	pathname from the user. They will need to be passed through the macro
 14492                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14493                                  ;	defined in DISPATCH. The system calls are:
 14494                                  ;
 14495                                  ;	$CURRENT_DIR  Written
 14496                                  ;	$RMDIR	  Written
 14497                                  ;	$CHDIR	  Written
 14498                                  ;	$MKDIR	  Written
 14499                                  ;
 14500                                  ;
 14501                                  ;	Modification history:
 14502                                  ;
 14503                                  ;	    Created: ARR 4 April 1983
 14504                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14505                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14506                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14507                                  ;				    current directory.
 14508                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14509                                  
 14510                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14511                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14512                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14513                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14514                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14515                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14516                                  ;	I_Need	cMeta,BYTE
 14517                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14518                                  
 14519                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14520                                  ;----------------------------------------------------------------------------
 14521                                  ;
 14522                                  ;   Procedure Name : $CURRENT_DIR
 14523                                  ;
 14524                                  ;   Assembler usage:
 14525                                  ;		LDS	SI,area
 14526                                  ;		MOV	DL,drive
 14527                                  ;		INT	21h
 14528                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14529                                  ;	    ; current directory.
 14530                                  ;   Error returns:
 14531                                  ;	    AX = error_invalid_drive
 14532                                  ;
 14533                                  ;----------------------------------------------------------------------------
 14534                                  
 14535                                  _$CURRENT_DIR:
 14536                                  	;06/08/2018 - Retro DOS v3.0
 14537                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14538 00002118 E8FBF1                  	call	ECritDisk
 14539 0000211B 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14540 0000211D E88149                  	call	GetVisDrv		; grab it
 14541 00002120 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14542                                  CurdirErr:
 14543 00002122 E80CF2                  	call	LCritDisk
 14544                                  
 14545                                  	; MSDOS 3.3
 14546                                  	;mov	al,0Fh
 14547                                  	
 14548                                  	; MSDOS 6.0
 14549 00002125 1E                      	push	ds
 14550 00002126 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14551 0000212B A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14552 0000212E 1F                      	pop	ds
 14553                                  
 14554                                  curdir_errj:
 14555 0000212F E912E5                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14556                                  
 14557                                  CurrentValidate:
 14558 00002132 1E                      	push	ds			; save destination
 14559 00002133 56                      	push	si
 14560                                  	
 14561                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14562                                  	
 14563                                  	; MSDOS 6.0
 14564 00002134 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14565 00002139 C536[A205]              	lds     si,[THISCDS]
 14566                                  
 14567                                  ; 16/12/2022
 14568                                  %if 0
 14569                                  	; 09/11/2022 (following test instruction is nonsense!)
 14570                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14571                                  
 14572                                  	;test	word [si+43h],8000h
 14573                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14574                                  	;jnz	short $+2  ; 09/11/2022	
 14575                                  	jnz	short DoCheck
 14576                                  %endif
 14577                                  
 14578                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14579                                  ; media check.
 14580                                  ;	CMP	word [SI+curdir.ID],0
 14581                                  ;	JZ	short GetDst
 14582                                  DoCheck:
 14583                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14584                                  
 14585                                  	; MSDOS 6.0
 14586 0000213D 1E                      	push	ds
 14587 0000213E 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14588 00002143 C606[4C03]00            	mov	byte [NoSetDir],0
 14589 00002148 1F                      	pop	ds
 14590                                  
 14591 00002149 BF[BE03]                	MOV	DI,OPENBUF
 14592 0000214C E83821                  	call	ValidateCDS		; output is ES:DI -> CDS
 14593                                  
 14594 0000214F 06                      	push	es	 		; swap source and destination
 14595 00002150 57                      	push	di
 14596 00002151 5E                      	pop	si
 14597 00002152 1F                      	pop	ds
 14598                                  GetDst:
 14599 00002153 5F                      	pop	di
 14600 00002154 07                      	pop	es			; get real destination
 14601 00002155 72CB                    	JC	short CurdirErr
 14602                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14603                                  	;
 14604                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14605                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14606                                  	; 16/12/2022
 14607                                  	;add	si,0  ; add si,curdir.text
 14608                                  	;
 14609                                  	;add	si,[si+4Fh] ; 17/05/2019
 14610 00002157 03744F                  	ADD	SI,[SI+curdir.end]
 14611 0000215A 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14612 0000215D 7501                    	JNZ	short CurrentCopy
 14613 0000215F 46                      	INC	SI
 14614                                  CurrentCopy:
 14615                                  ;	call	FStrCpy
 14616                                  ;; 10/29/86 E5 char
 14617 00002160 50                      	PUSH	AX
 14618 00002161 AC                      	LODSB				; get char
 14619 00002162 08C0                    	OR	AL,AL
 14620 00002164 7413                    	JZ	short FOK
 14621 00002166 3C05                    	CMP	AL,05H
 14622 00002168 740D                    	JZ	short FCHANGE
 14623 0000216A EB01                    	JMP	short FFF
 14624                                  FCPYNEXT:
 14625 0000216C AC                      	LODSB				; get char
 14626                                  FFF:
 14627 0000216D 3C5C                    	CMP	AL,'\'			; beginning of directory
 14628 0000216F 7508                    	JNZ	short FOK		; no
 14629 00002171 AA                      	STOSB				; put into user's buffer
 14630 00002172 AC                      	LODSB				; 1st char of dir is 05?
 14631 00002173 3C05                    	CMP	AL,05H
 14632 00002175 7502                    	JNZ	short FOK		; no
 14633                                  FCHANGE:
 14634 00002177 B0E5                    	MOV	AL,0E5H			; make it E5
 14635                                  FOK:
 14636 00002179 AA                      	STOSB				; put into user's buffer
 14637 0000217A 08C0                    	OR	AL,AL			; final char
 14638 0000217C 75EE                    	JNZ	short FCPYNEXT		; no
 14639 0000217E 58                      	POP	AX
 14640                                  
 14641                                  ;; 10/29/86 E5 char
 14642 0000217F 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14643 00002181 E8ADF1                  	call	LCritDisk
 14644 00002184 E9B4E4                  	jmp	SYS_RET_OK		; no more, bye!
 14645                                  
 14646                                  ; 17/05/2019 - Retro DOS v4.0
 14647                                  
 14648                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14649                                  
 14650                                  ;BREAK <$RmDir -- Remove a directory>
 14651                                  ;----------------------------------------------------------------------------
 14652                                  ;
 14653                                  ; Procedure Name : $RmDir
 14654                                  ;
 14655                                  ; Inputs:
 14656                                  ;	DS:DX Points to asciz name
 14657                                  ; Function:
 14658                                  ;	Delete directory if empty
 14659                                  ; Returns:
 14660                                  ;	STD XENIX Return
 14661                                  ;	AX = error_path_not_found If path bad
 14662                                  ;	AX = error_access_denied If
 14663                                  ;		Directory not empty
 14664                                  ;		Path not directory
 14665                                  ;		Root directory specified
 14666                                  ;		Directory malformed (. and .. not first two entries)
 14667                                  ;		User tries to delete a current directory
 14668                                  ;	AX = error_current_directory
 14669                                  ;
 14670                                  ;----------------------------------------------------------------------------
 14671                                  
 14672                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14673                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 14674                                  
 14675                                  _$RMDIR:
 14676 00002187 52                      	push	dx			; Save ptr to name
 14677 00002188 1E                      	push	ds
 14678 00002189 89D6                    	mov	si,dx			; Load ptr into si
 14679 0000218B BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 14680 0000218E 57                      	push	di
 14681 0000218F E80E4A                  	call	TransPathNoSet		; Translate the name
 14682 00002192 5F                      	pop	di			; di = ptr to buf for trans name
 14683 00002193 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 14684 00002195 1F                      	pop	ds
 14685 00002196 5A                      	pop	dx			; Restore the name
 14686                                  	;mov	al,3
 14687 00002197 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 14688                                  	; 16/12/2022
 14689                                  rmdir_errj: ; 10/08/2018
 14690                                  chdir_errj:
 14691 00002199 EB94                    	jmp	short curdir_errj
 14692                                  	;jmp	SYS_RET_ERR
 14693                                  rmlset:
 14694 0000219B 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 14695 000021A1 7512                    	Jnz	short rmerr		;	return (-1);
 14696 000021A3 16                      	push	ss
 14697 000021A4 07                      	pop	es
 14698 000021A5 30C0                    	xor	al,al			; al = 0 , ie drive a:
 14699                                  rmloop: 
 14700 000021A7 E86849                  	call	GetCDSFromDrv		; Get curdir for drive in al
 14701 000021AA 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 14702 000021AC E809F0                  	call	StrCmp			; Are the 2 paths the same?
 14703 000021AF 7404                    	jz	short rmerr		; Yes, report error.
 14704 000021B1 FEC0                    	inc	al			; No, inc al to next drive number
 14705 000021B3 EBF2                    	jmp	short rmloop		; Go check next drive.
 14706                                  rmerr:
 14707 000021B5 1F                      	pop	ds
 14708 000021B6 5A                      	pop	dx			; Restore the name
 14709                                  	;mov	al,10h
 14710 000021B7 B010                    	mov	al,error_current_directory ; error
 14711                                  	; 16/12/2022
 14712                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14713                                  ;chdir_errj:
 14714 000021B9 EBDE                    	jmp	short rmdir_errj
 14715                                  rmcont:
 14716 000021BB 1F                      	pop	ds
 14717 000021BC 5A                      	pop	dx			; Restore the name
 14718 000021BD BE[2932]                	MOV	SI,DOS_RMDIR
 14719 000021C0 EB7C                    	JMP	DoDirCall
 14720                                  
 14721                                  ; 17/05/2019 - Retro DOS v4.0
 14722                                  
 14723                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 14724                                  
 14725                                  ;BREAK <$ChDir -- Change current directory on a drive>
 14726                                  ;----------------------------------------------------------------------------
 14727                                  ;
 14728                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 14729                                  ; for setting up the CDS for the specified drive appropriately.  There are
 14730                                  ; several cases to consider:
 14731                                  ;
 14732                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 14733                                  ;	it into a WFP.	We verify the existance of this directory and then
 14734                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 14735                                  ;	directory cluster.
 14736                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 14737                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 14738                                  ;	WFP back into the CDS.
 14739                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 14740                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 14741                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 14742                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 14743                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 14744                                  ;	to process the path but to return the logical CDS and the logical
 14745                                  ;	path.  We then copy the logical path into the logical CDS.
 14746                                  ;
 14747                                  ; Inputs:
 14748                                  ;	DS:DX Points to asciz name
 14749                                  ; Returns:
 14750                                  ;	STD XENIX Return
 14751                                  ;	AX = chdir_path_not_found if error
 14752                                  ;
 14753                                  ;----------------------------------------------------------------------------
 14754                                  
 14755                                  _$CHDIR:
 14756 000021C2 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14757 000021C5 89D6                    	MOV	SI,DX			; get source
 14758 000021C7 E8CA49                  	call	TransPath		; go munge the path and get real CDS
 14759 000021CA 7304                    	JNC	short ChDirCrack	; no errors, try path
 14760                                  ChDirErrP:
 14761                                  	;mov	al,3
 14762 000021CC B003                    	MOV	AL,error_path_not_found
 14763                                  ChDirErr:
 14764                                  	;jmp	SYS_RET_ERR 	; oops!
 14765                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14766 000021CE EBC9                    	jmp	short chdir_errj
 14767                                  
 14768                                  ChDirCrack:
 14769 000021D0 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 14770 000021D5 75F5                    	JNZ	short ChDirErrP
 14771                                  
 14772                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 14773                                  ; found.
 14774                                  
 14775 000021D7 C43E[A205]              	LES	DI,[THISCDS]
 14776 000021DB 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 14777 000021DE 74EC                    	JZ	short ChDirErrP		;	error ();
 14778                                  
 14779                                  ; Find out if the directory exists.
 14780                                  
 14781 000021E0 E80310                  	call	DOS_CHDIR
 14782                                  	;Jc	short ChDirErr
 14783                                  	; 16/12/2022
 14784 000021E3 72B4                    	jc	short chdir_errj
 14785                                  ;
 14786                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 14787                                  ; not network). If one was seen, all we need to do is copy in the text
 14788                                  ;
 14789 000021E5 C43E[A205]              	LES	DI,[THISCDS]
 14790                                  	;test	word [es:di+43h],2000h
 14791                                  	; 17/12/2022
 14792 000021E9 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14793                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 14794 000021EE 7425                    	JZ	short GotCDS
 14795                                  
 14796                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 14797                                  
 14798 000021F0 06                      	push	es	
 14799 000021F1 57                      	push	di
 14800 000021F2 51                      	push	cx			; save CDS and cluster...
 14801 000021F3 E88FE2                  	call	Get_User_Stack		; get original text
 14802                                  	
 14803                                  	;mov	di,[si+6]
 14804 000021F6 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 14805                                  	;mov	ds,[si+0Eh]
 14806 000021F9 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 14807                                  	
 14808 000021FC BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 14809 000021FF 87F7                    	XCHG	SI,DI
 14810 00002201 30C0                    	XOR	AL,AL			; do no splicing
 14811 00002203 57                      	push	di
 14812 00002204 E89949                  	call	TransPathNoSet		; Munge path
 14813 00002207 5E                      	pop	si
 14814                                  
 14815                                  ; There should NEVER be an error here.
 14816                                  
 14817                                  ;IF FALSE
 14818                                  ;	JNC SKipErr
 14819                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 14820                                  ;SkipErr:
 14821                                  ;ENDIF
 14822 00002208 C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 14823                                  	;mov	word [es:di+49h],-1
 14824 0000220C 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 14825                                  					; no valid cluster here...
 14826 00002212 59                      	pop	cx
 14827 00002213 5F                      	pop	di
 14828 00002214 07                      	pop	es
 14829                                  
 14830                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 14831                                  
 14832                                  GotCDS:
 14833                                  
 14834                                  ; wfp_start points to the text. See if it is long enough
 14835                                  
 14836                                  	; MSDOS 3.3
 14837                                  	;push	ss
 14838                                  	;pop	ds
 14839                                  	;mov	si,[WFP_START]
 14840                                  	;push	cx
 14841                                  	;call	DStrLen
 14842                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 14843                                  	;pop	cx
 14844                                  	;ja	short ChDirErrP
 14845                                  
 14846                                  	; MSDOS 6.0
 14847 00002215 E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 14848 00002218 77B2                    	JA	short ChDirErrP
 14849                                  	; MSDOS 3.3 & MSDOS 6.0
 14850                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 14851                                  	; 17/12/2022
 14852 0000221A 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 14853 0000221F 7512                    	JNZ	short SkipRecency
 14854                                  	; MSDOS 6.0
 14855                                  	;test	word [es:di+43h],2000h
 14856                                  	; 17/12/2022
 14857 00002221 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14858                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 14859                                  					;PTM. for Join and Subst ;AN000;
 14860 00002226 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 14861 00002228 B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 14862                                  setdirclus:
 14863                                  	;mov	[es:di+49h],cx
 14864 0000222B 26894D49                	MOV	[ES:DI+curdir.ID],CX
 14865 0000222F C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 14866                                  SkipRecency:
 14867 00002233 E8B3EF                  	call	FStrCpy
 14868 00002236 30C0                    	XOR	AL,AL
 14869                                  mkdir_ok:
 14870 00002238 E900E4                  	jmp	SYS_RET_OK
 14871                                  
 14872                                  ; 17/05/2019 - Retro DOS v4.0
 14873                                  
 14874                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 14875                                  
 14876                                  ;BREAK <$MkDir - Make a directory entry>
 14877                                  ;---------------------------------------------------------------------------
 14878                                  ;
 14879                                  ; Procedure Name : $MkDir
 14880                                  ; Inputs:
 14881                                  ;	DS:DX Points to asciz name
 14882                                  ; Function:
 14883                                  ;	Make a new directory
 14884                                  ; Returns:
 14885                                  ;	STD XENIX Return
 14886                                  ;	AX = mkdir_path_not_found if path bad
 14887                                  ;	AX = mkdir_access_denied  If
 14888                                  ;		Directory cannot be created
 14889                                  ;		Node already exists
 14890                                  ;		Device name given
 14891                                  ;		Disk or directory(root) full
 14892                                  ;---------------------------------------------------------------------------
 14893                                  
 14894                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14895                                  
 14896                                  _$MKDIR:
 14897 0000223B BE[F630]                	MOV	SI,DOS_MKDIR
 14898                                  DoDirCall:
 14899 0000223E BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14900                                  
 14901 00002241 56                      	push	si
 14902 00002242 89D6                    	MOV	SI,DX			; get source
 14903 00002244 E84D49                  	call	TransPath		; go munge the path
 14904 00002247 5E                      	pop	si
 14905 00002248 7305                    	JNC	short MkDirCrack	; no errors, try path
 14906                                  MkErrP:
 14907 0000224A B003                    	MOV	AL,error_path_not_found	; oops!
 14908                                  MkErr:
 14909 0000224C E9F5E3                  	jmp	SYS_RET_ERR
 14910                                  MkDirCrack:
 14911 0000224F 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 14912 00002255 75F3                    	JNZ	short MkErrP
 14913                                  
 14914                                  	; MSDOS 3.3
 14915                                  	;push	ss
 14916                                  	;pop	ds
 14917                                  	;call	si
 14918                                  	;jb	short MkErr
 14919                                  	;;jmp	short mkdir_ok
 14920                                  	;jmp	SYS_RET_OK
 14921                                  
 14922                                  	; MSDOS 6.0
 14923 00002257 56                      	PUSH	SI			;PTM.			;AN000;
 14924 00002258 E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 14925 0000225B 5E                      	POP	SI			;PTM.			;AN000;
 14926 0000225C 7604                    	JBE	short pathok		;PTM.			;AN000;
 14927                                  	;mov	al,5
 14928 0000225E B005                    	MOV	AL,error_access_denied	;PTM. ops!
 14929                                  	;jmp	SYS_RET_ERR		;PTM.
 14930 00002260 EBEA                    	jmp	short MkErr
 14931                                  pathok:
 14932 00002262 FFD6                    	CALL	SI			; go get file
 14933 00002264 72E6                    	JC	short MkErr		; no errors
 14934                                  	; 16/12/2022
 14935                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14936 00002266 EBD0                    	jmp	short mkdir_ok
 14937                                  	;jmp	SYS_RET_OK
 14938                                  
 14939                                  ;----------------------------------------------------------------------------
 14940                                  ;
 14941                                  ; Procedure Name : Check_PathLen
 14942                                  ;
 14943                                  ; Inputs:
 14944                                  ;	nothing
 14945                                  ; Function:
 14946                                  ;	check if final path length greater than 67
 14947                                  ; Returns:
 14948                                  ;	Above flag set if > 67
 14949                                  ;
 14950                                  ;---------------------------------------------------------------------------
 14951                                  
 14952                                  Check_PathLen:
 14953                                  	; 09/09/2018
 14954                                  	;mov	SI,[WFP_START]
 14955 00002268 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 14956                                  Check_PathLen2:
 14957 0000226D 16                      	push	ss
 14958 0000226E 1F                      	pop	ds
 14959                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 14960 0000226F 51                      	push	CX	
 14961 00002270 E88DEF                  	CALL	DStrLen
 14962 00002273 83F943                  	CMP	CX,DIRSTRLEN ; 67
 14963 00002276 59                      	POP	CX
 14964 00002277 C3                      	retn
 14965                                  
 14966                                  ;============================================================================
 14967                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 14968                                  ;============================================================================
 14969                                  ; 07/08/2018 - Retro DOS v3.0
 14970                                  ; 17/05/2019 - Retro DOS v4.0
 14971                                  
 14972                                  ;**	IOCTL system call.
 14973                                  ;----------------------------------------------------------------------------
 14974                                  ;	$IOCTL
 14975                                  ;
 14976                                  ;	  Revision history:
 14977                                  ;
 14978                                  ;		Created: ARR 4 April 1983
 14979                                  ;
 14980                                  ;		GenericIOCTL added:		KGS	22 April 1985
 14981                                  ;
 14982                                  ;		A000	version 4.00	Jan. 1988
 14983                                  ;
 14984                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 14985                                  ;
 14986                                  
 14987                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 14988                                  ;---------------------------------------------------------------------------
 14989                                  ;
 14990                                  ;   Assembler usage:
 14991                                  ;	    MOV     BX, Handle
 14992                                  ;	    MOV     DX, Data
 14993                                  ;
 14994                                  ;	(or LDS     DX,BUF
 14995                                  ;	    MOV     CX,COUNT)
 14996                                  ;
 14997                                  ;	    MOV     AH, Ioctl
 14998                                  ;	    MOV     AL, Request
 14999                                  ;	    INT     21h
 15000                                  ;
 15001                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 15002                                  ;	    attribute word in DX, handle in BX:
 15003                                  ;	    DH = high word of device driver attributes
 15004                                  ;	    DL = low byte of sf_flags
 15005                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 15006                                  ;	    in BX.
 15007                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 15008                                  ;	    into DS:DX.  Return number read in AX.
 15009                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 15010                                  ;	    DS:DX.  Return bytes written in AX.
 15011                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 15012                                  ;	    into DS:DX.  Return number read in AX.
 15013                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 15014                                  ;	    DS:DX.  Return bytes written in AX.
 15015                                  ;	 6  Return input status of handle in BX. If a read will go to the
 15016                                  ;	    device, AL = 0FFh, otherwise 0.
 15017                                  ;	 7  Return output status of handle in BX. If a write will go to the
 15018                                  ;	    device, AL = 0FFh, otherwise 0.
 15019                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 15020                                  ;	    removable media, 0 otherwise.
 15021                                  ;	 9  Return the contents of the device attribute word in DX for the
 15022                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 15023                                  ;	    network. 8000h is the bit for local use.
 15024                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 15025                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 15026                                  ;	    the count and CX is the delay.
 15027                                  ;
 15028                                  ;   Error returns:
 15029                                  ;	    AX = error_invalid_handle
 15030                                  ;	       = error_invalid_function
 15031                                  ;	       = error_invalid_data
 15032                                  ;
 15033                                  ;-------------------------------------------------------------------------------
 15034                                  ;
 15035                                  ;   This is the documentation copied from DOS 4.0 it is much better
 15036                                  ;   than the above
 15037                                  ;
 15038                                  ;	There are several basic forms of IOCTL calls:
 15039                                  ;
 15040                                  ;
 15041                                  ;	** Get/Set device information:	**
 15042                                  ;
 15043                                  ;	ENTRY	(AL) = function code
 15044                                  ;		  0 - Get device information
 15045                                  ;		  1 - Set device information
 15046                                  ;		(BX) = file handle
 15047                                  ;		(DX) = info for "Set Device Information"
 15048                                  ;	EXIT	'C' set if error
 15049                                  ;		  (AX) = error code
 15050                                  ;		'C' clear if OK
 15051                                  ;		  (DX) = info for "Get Device Information"
 15052                                  ;	USES	ALL
 15053                                  ;
 15054                                  ;
 15055                                  ;	**  Read/Write Control Data From/To Handle  **
 15056                                  ;
 15057                                  ;	ENTRY	(AL) = function code
 15058                                  ;		  2 - Read device control info
 15059                                  ;		  3 - Write device control info
 15060                                  ;		(BX) = file handle
 15061                                  ;		(CX) = transfer count
 15062                                  ;		(DS:DX) = address for data
 15063                                  ;	EXIT	'C' set if error
 15064                                  ;		  (AX) = error code
 15065                                  ;		'C' clear if OK
 15066                                  ;		  (AX) = count of bytes transfered
 15067                                  ;	USES	ALL
 15068                                  ;
 15069                                  ;
 15070                                  ;	**  Read/Write Control Data From/To Block Device  **
 15071                                  ;
 15072                                  ;	ENTRY	(AL) = function code
 15073                                  ;		  4 - Read device control info
 15074                                  ;		  5 - Write device control info
 15075                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15076                                  ;		(CX) = transfer count
 15077                                  ;		(DS:DX) = address for data
 15078                                  ;	EXIT	'C' set if error
 15079                                  ;		  (AX) = error code
 15080                                  ;		'C' clear if OK
 15081                                  ;		  (AX) = count of bytes transfered
 15082                                  ;	USES	ALL
 15083                                  ;
 15084                                  ;
 15085                                  ;	**  Get Input/Output Status  **
 15086                                  ;
 15087                                  ;	ENTRY	(AL) = function code
 15088                                  ;		  6 - Get Input status
 15089                                  ;		  7 - Get Output Status
 15090                                  ;		(BX) = file handle
 15091                                  ;	EXIT	'C' set if error
 15092                                  ;		  (AX) = error code
 15093                                  ;		'C' clear if OK
 15094                                  ;		  (AL) = 00 if not ready
 15095                                  ;		  (AL) = FF if ready
 15096                                  ;	USES	ALL
 15097                                  ;
 15098                                  ;
 15099                                  ;	**  Get Drive Information  **
 15100                                  ;
 15101                                  ;	ENTRY	(AL) = function code
 15102                                  ;		  8 - Check for removable media
 15103                                  ;		  9 - Get device attributes
 15104                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15105                                  ;	EXIT	'C' set if error
 15106                                  ;		  (AX) = error code
 15107                                  ;		'C' clear if OK
 15108                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 15109                                  ;		  (DX) = device attribute word (func. 9)
 15110                                  ;	USES	ALL
 15111                                  ;
 15112                                  ;
 15113                                  ;	**  Get Redirected bit	**
 15114                                  ;
 15115                                  ;	ENTRY	(AL) = function code
 15116                                  ;		  0Ah - Network stuff
 15117                                  ;		(BX) = file handle
 15118                                  ;	EXIT	'C' set if error
 15119                                  ;		  (AX) = error code
 15120                                  ;		'C' clear if OK
 15121                                  ;		  (DX) = SFT flags word, 8000h set if network file
 15122                                  ;	USES	ALL
 15123                                  ;
 15124                                  ;
 15125                                  ;	**  Change sharer retry parameters  **
 15126                                  ;
 15127                                  ;	ENTRY	(AL) = function code
 15128                                  ;		  0Bh - Set retry parameters
 15129                                  ;		(CX) = retry loop count
 15130                                  ;		(DX) = number of retries
 15131                                  ;	EXIT	'C' set if error
 15132                                  ;		  (AX) = error code
 15133                                  ;		'C' clear if OK
 15134                                  ;	USES	ALL
 15135                                  ;
 15136                                  ;
 15137                                  ;   =================================================================
 15138                                  ;
 15139                                  ;	**  New Standard Control  **
 15140                                  ;
 15141                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15142                                  ;	FORMS ARE OBSOLETE.
 15143                                  ;
 15144                                  ;   =================================================================
 15145                                  ;
 15146                                  ;	ENTRY	(AL) = function code
 15147                                  ;		  0Ch - Control Function subcode
 15148                                  ;		(BX) = File Handle
 15149                                  ;		(CH) = Category Indicator
 15150                                  ;		(CL) = Function within category
 15151                                  ;		(DS:DX) = address for data, if any
 15152                                  ;		(SI) = Passed to device as argument, use depends upon function
 15153                                  ;		(DI) = Passed to device as argument, use depends upon function
 15154                                  ;	EXIT	'C' set if error
 15155                                  ;		  (AX) = error code
 15156                                  ;		'C' clear if OK
 15157                                  ;		  (SI) = Return value, meaning is function dependent
 15158                                  ;		  (DI) = Return value, meaning is function dependent
 15159                                  ;		  (DS:DX) = Return address, use is function dependent
 15160                                  ;	USES	ALL
 15161                                  ;
 15162                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15163                                  ;     (See inc\ioctl.inc for more info)
 15164                                  ;
 15165                                  ;	ENTRY	(AL) = function code
 15166                                  ;		  0Dh - Control Function subcode
 15167                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15168                                  ;		(CH) = Category Indicator
 15169                                  ;		(CL) = Function within category
 15170                                  ;		(DS:DX) = address for data, if any
 15171                                  ;		(SI) = Passed to device as argument, use depends upon function
 15172                                  ;		(DI) = Passed to device as argument, use depends upon function
 15173                                  ;
 15174                                  ;	EXIT	'C' set if error
 15175                                  ;		  (AX) = error code
 15176                                  ;		'C' clear if OK
 15177                                  ;		  (DS:DX) = Return address, use is function dependent
 15178                                  ;	USES	ALL
 15179                                  ;
 15180                                  ;---------------------------------------------------------------------------
 15181                                  	
 15182                                  	; 17/05/2019 - Retro DOS v4.0
 15183                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15184                                  
 15185                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15186                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15187                                  
 15188                                  IOCTLJMPTABLE:	;label	word
 15189                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15190 00002278 [B622]                  	dw	ioctl_getset_data	; 0
 15191 0000227A [B622]                  	dw	ioctl_getset_data   	; 1
 15192 0000227C [0623]                  	dw	ioctl_control_string	; 2
 15193 0000227E [0623]                  	dw	ioctl_control_string	; 3
 15194 00002280 [5A24]                  	dw	ioctl_get_dev		; 4
 15195 00002282 [5A24]                  	dw	ioctl_get_dev		; 5
 15196 00002284 [2023]                  	dw	ioctl_status		; 6
 15197 00002286 [2023]                  	dw	ioctl_status		; 7
 15198 00002288 [C123]                  	dw	ioctl_rem_media		; 8
 15199 0000228A [FF23]                  	dw	ioctl_drive_attr	; 9
 15200 0000228C [4C24]                  	dw	ioctl_handle_redir	; A
 15201 0000228E [3C23]                  	dw	Set_Retry_Parameters	; B
 15202 00002290 [4A23]                  	dw	GENERICIOCTLHANDLE	; C
 15203 00002292 [6123]                  	dw	GENERICIOCTL		; D
 15204                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15205 00002294 [0B25]                  	dw	ioctl_drive_owner	; E
 15206 00002296 [0B25]                  	dw	ioctl_drive_owner	; F
 15207                                  	; MSDOS 6.0
 15208 00002298 [4A23]                  	dw	query_handle_support	; 10h
 15209 0000229A [6123]                  	dw	query_device_support	; 11h
 15210                                  
 15211                                  	; 11/11/2022
 15212                                  _$IOCTL:
 15213 0000229C 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15214 0000229E 16                      	push	ss
 15215 0000229F 1F                      	pop	ds			;hkn; SS is DOSDATA
 15216                                  
 15217                                  	; MSDOS 3.3
 15218                                  	;cmp	al,0Fh 
 15219                                  	; MSDOS 6.0
 15220 000022A0 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15221 000022A2 770F                    	ja	short ioctl_bad_funj2	; if not bad function #
 15222                                  
 15223                                  	; 28/05/2019
 15224 000022A4 50                      	push	AX			; Need to save AL for generic IOCTL
 15225 000022A5 89C7                    	mov	di,ax			; di NOT a PARM
 15226 000022A7 81E7FF00                	and	di,0FFh			; di = al
 15227 000022AB D1E7                    	shl	di,1			; di = index into jmp table
 15228 000022AD 58                      	pop	AX			; Restore AL for generic IOCTL
 15229                                  
 15230 000022AE 2EFFA5[7822]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15231                                  
 15232                                  ioctl_bad_funj2:
 15233 000022B3 E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15234                                  
 15235                                  ;--------------------------------------------------------------------------
 15236                                  ;
 15237                                  ; IOCTL: AL = 0,1
 15238                                  ;
 15239                                  ; ENTRY: DS = DOSDATA
 15240                                  ;
 15241                                  ;--------------------------------------------------------------------------
 15242                                  
 15243                                  ioctl_getset_data:
 15244                                  	; MSDOS 6.0
 15245 000022B6 E8E043                  	call	SFFromHandle		; ES:DI -> SFT
 15246 000022B9 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15247                                  ioctl_bad_handle:
 15248                                  	;mov	al,6
 15249 000022BB B006                    	mov	al,error_invalid_handle
 15250                                  ioctl_error:
 15251 000022BD E984E3                  	jmp	SYS_RET_ERR
 15252                                  
 15253                                  ioctl_check_permissions:
 15254 000022C0 3C00                    	CMP	AL,0
 15255                                  	;mov	al,[es:di+5]
 15256 000022C2 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15257 000022C6 741B                    	JZ	short ioctl_read	; read the byte
 15258                                  
 15259 000022C8 08F6                    	or	dh,dh
 15260 000022CA 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15261                                  	;mov	al,0Dh
 15262 000022CC B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15263                                  	;jmp	SYS_RET_ERR
 15264 000022CE EBED                    	jmp	short ioctl_error
 15265                                  
 15266                                  ioctl_check_device:
 15267 000022D0 A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15268 000022D2 74DF                    	jz	short ioctl_bad_funj2
 15269 000022D4 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15270                                  					;   device bit!! He can muck with the
 15271                                  					;   others at will.
 15272 000022D7 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15273 000022DC 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15274                                  ioctl_ok:
 15275 000022E0 E958E3                  	jmp	SYS_RET_OK
 15276                                  
 15277                                  ioctl_read:
 15278 000022E3 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15279 000022E8 30E4                    	XOR	AH,AH
 15280 000022EA A880                    	test	AL,devid_device 	; Should I set high byte
 15281 000022EC 740D                    	JZ	short ioctl_no_high	; no
 15282 000022EE C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15283                                  	;les	di,[es:di+7]
 15284 000022F3 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15285                                  	;mov	ah,[es:di+5]
 15286 000022F7 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15287                                  ioctl_no_high:
 15288 000022FB 89C2                    	MOV	DX,AX
 15289                                  ioctl_set_dx:	; 16/12/2022
 15290 000022FD E885E1                  	call	Get_User_Stack
 15291                                  	;mov	[si+6],dx
 15292 00002300 895406                  	MOV	[SI+user_env.user_DX],DX
 15293                                  	;;jmp	SYS_RET_OK
 15294                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15295                                  ioctl_ok_j:
 15296                                  	; 16/12/2022
 15297 00002303 E938E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15298                                  	;jmp	short ioctl_ok
 15299                                  	; 26/07/2019
 15300                                  	;jmp	SYS_RET_OK_clc
 15301                                  
 15302                                  ;--------------------------------------------------------------------------
 15303                                  ;
 15304                                  ; IOCTL: AL = 2,3
 15305                                  ;
 15306                                  ; ENTRY: DS = DOSDATA
 15307                                  ;	 SI = user's DS
 15308                                  ;
 15309                                  ;--------------------------------------------------------------------------
 15310                                  
 15311                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15312                                  ioctl_control_string:
 15313 00002306 E89043                  	call	SFFromHandle		; ES:DI -> SFT
 15314 00002309 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15315                                  	; 07/12/2022
 15316                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15317                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15318                                  	; MSDOS 5.0 & MSDOS 6.0
 15319 0000230B 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15320 00002310 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15321 00002312 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15322 00002317 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15323 0000231B 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15324 0000231D E94201                  	JMP	ioctl_do_string
 15325                                  
 15326                                  ;--------------------------------------------------------------------------
 15327                                  ;
 15328                                  ; IOCTL: AL = 6,7
 15329                                  ;
 15330                                  ; ENTRY: DS = DOSDATA
 15331                                  ;
 15332                                  ;--------------------------------------------------------------------------
 15333                                  
 15334                                  ioctl_status:
 15335 00002320 B401                    	MOV	AH,1
 15336 00002322 2C06                    	SUB	AL,6			; 6=0,7=1
 15337 00002324 7402                    	JZ	short ioctl_get_status
 15338 00002326 B403                    	MOV	AH,3
 15339                                  ioctl_get_status:
 15340 00002328 50                      	PUSH	AX
 15341 00002329 E85013                  	call	GET_IO_SFT
 15342 0000232C 58                      	POP	AX
 15343                                  	;JNC	short DO_IOFUNC
 15344                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15345                                  	; 16/12/2022
 15346 0000232D 728C                    	jc	short ioctl_bad_handle
 15347                                  DO_IOFUNC:
 15348 0000232F E89021                  	call	IOFUNC
 15349 00002332 88C4                    	MOV	AH,AL
 15350 00002334 B0FF                    	MOV	AL,0FFH
 15351 00002336 7502                    	JNZ	short ioctl_status_ret
 15352 00002338 FEC0                    	INC	AL
 15353                                  ioctl_status_ret:
 15354                                  	;jmp	SYS_RET_OK
 15355                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15356                                  	;jmp	short ioctl_ok_j
 15357                                  	; 16/12/2022
 15358 0000233A EBA4                    	jmp	short ioctl_ok
 15359                                  
 15360                                  ;--------------------------------------------------------------------------
 15361                                  ;
 15362                                  ; IOCTL: AL = B
 15363                                  ;
 15364                                  ; ENTRY: DS = DOSDATA
 15365                                  ;
 15366                                  ;--------------------------------------------------------------------------
 15367                                  
 15368                                  Set_Retry_Parameters:
 15369                                  	; 09/09/2018
 15370 0000233C 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15371 00002340 09D2                    	OR	DX,DX			; zero retries not allowed
 15372 00002342 7475                    	JZ	short ioctl_bad_fun
 15373 00002344 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15374                                  doneok:
 15375                                  	;jmp	SYS_RET_OK		; Done
 15376                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15377                                  	;jmp	short ioctl_status_ret
 15378                                  	; 16/12/2022
 15379 00002348 EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15380                                  
 15381                                  ;--------------------------------------------------------------------------
 15382                                  ;
 15383                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15384                                  ;
 15385                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15386                                  ;	SI:DX -> Users Device Parameter Table
 15387                                  ;	IOCALL -> IOCTL_Req structure
 15388                                  ;
 15389                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15390                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15391                                  ;	call.
 15392                                  ;
 15393                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15394                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15395                                  ;         return address off the stack if the drive is invalid.
 15396                                  ;
 15397                                  ;--------------------------------------------------------------------------
 15398                                  
 15399                                  query_handle_support:	; Entry point for handles
 15400                                  GENERICIOCTLHANDLE:
 15401 0000234A E84C43                  	call	SFFromHandle		; Get SFT for device.
 15402 0000234D 726F                    	jc	short ioctl_bad_handlej
 15403                                  
 15404                                  	;test	word [es:di+5],8000h
 15405                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15406                                  	;test	byte [es:di+6],80h
 15407 0000234F 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15408 00002354 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15409                                  
 15410 00002356 C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15411                                  	;les	di,[es:di+7]
 15412 0000235B 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15413 0000235F EB0F                    	jmp	short Do_GenIOCTL
 15414                                  
 15415                                  query_device_support:	; Entry point for devices:
 15416                                  GENERICIOCTL:
 15417 00002361 C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15418 00002366 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15419 00002369 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15420                                  
 15421 0000236B E88101                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15422 0000236E 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15423                                  
 15424                                  Do_GenIOCTL:
 15425                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15426                                  					; Can device handle Generic IOCTL funcs
 15427                                  	; 09/09/2018
 15428                                  	;test	byte [es:di+4],40h
 15429 00002370 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15430 00002375 7442                    	jz	short ioctl_bad_fun
 15431                                  
 15432                                  	; 17/05/2019 - Retro DOS v4.0
 15433                                  
 15434                                  	; MSDOS 6.0
 15435                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15436 00002377 C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15437                                  	;cmp	al,10h
 15438 0000237C 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15439 0000237E 7C0C                    	jl	short SetIOCtlBlock
 15440                                  	
 15441                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15442                                  	;test	byte [es:di+4],80h 
 15443 00002380 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15444 00002385 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15445                                  	;
 15446                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15447 00002387 C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15448                                  
 15449                                  SetIOCtlBlock:
 15450 0000238C 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15451 0000238D 57                      	PUSH	DI			; in DS:SI
 15452                                  					; Setup Generic IOCTL Request Block
 15453                                  	;mov	byte [IOCALL_REQLEN],23
 15454 0000238E C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15455                                  	; 07/09/2018 (MSDOS 3.3)
 15456                                  	;;mov	byte [IOCALL_REQFUNC],19
 15457                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15458                                  	;
 15459 00002393 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15460 00002397 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15461 0000239B 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15462 0000239F 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15463 000023A3 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15464 000023A7 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15465 000023AB 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15466                                  
 15467                                  ;hkn; IOCALL is in DOSDATA
 15468 000023AF BB[7C03]                	MOV	BX,IOCALL
 15469                                  
 15470 000023B2 16                      	PUSH	SS
 15471 000023B3 07                      	POP	ES
 15472                                  					; DS:SI -> Device header.
 15473 000023B4 5E                      	POP	SI
 15474 000023B5 1F                      	POP	DS
 15475                                  	; 10/08/2018
 15476 000023B6 E9E200                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15477                                  
 15478                                  ioctl_bad_fun:
 15479 000023B9 B001                    	mov	al, error_invalid_function  ; 1
 15480 000023BB E986E2                  	jmp	SYS_RET_ERR	
 15481                                  
 15482                                  ioctl_bad_handlej:
 15483 000023BE E9FAFE                  	jmp	ioctl_bad_handle
 15484                                  
 15485                                  ;---------------------------------------------------------------------------
 15486                                  ;
 15487                                  ; IOCTL: AL = 8
 15488                                  ;
 15489                                  ; ENTRY: DS = DOSDATA
 15490                                  ;
 15491                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15492                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15493                                  ;         return address off the stack if the drive is invalid.
 15494                                  ;
 15495                                  ;-------------------------------------------------------------------------
 15496                                  
 15497                                  ioctl_rem_media:
 15498                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15499 000023C1 E82B01                  	CALL	Check_If_Net
 15500 000023C4 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15501                                  					;   certainly don't know how to do this
 15502                                  					;   call.
 15503                                  	;test	word [es:di+4],800h
 15504                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15505                                  	;test	byte [es:di+5],8
 15506 000023C6 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15507 000023CB 74EC                    	JZ	short ioctl_bad_fun		; NO
 15508                                  
 15509                                  ;hkn; SS override for IOCALL
 15510 000023CD 36C606[7E03]0F          	MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15511 000023D3 B00D                    	MOV	AL,REMHL  ; 13
 15512 000023D5 88DC                    	MOV	AH,BL			; Unit number
 15513 000023D7 36A3[7C03]              	MOV	[SS:IOCALL_REQLEN],AX
 15514 000023DB 31C0                    	XOR	AX,AX
 15515 000023DD 36A3[7F03]              	MOV	[SS:IOCALL_REQSTAT],AX
 15516 000023E1 06                      	PUSH	ES
 15517 000023E2 1F                      	POP	DS
 15518 000023E3 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15519 000023E5 16                      	PUSH	SS
 15520 000023E6 07                      	POP	ES
 15521                                  
 15522                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15523 000023E7 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15524 000023EA 1E                      	push	ds
 15525 000023EB 56                      	push	si
 15526 000023EC E8A822                  	call	DEVIOCALL2
 15527 000023EF 5E                      	pop	si
 15528 000023F0 1F                      	pop	ds
 15529                                  
 15530                                  ;hkn; SS override
 15531 000023F1 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15532 000023F5 250002                  	AND	AX,STBUI ; 200h		; Mask to busy bit
 15533 000023F8 B109                    	MOV	CL,9
 15534 000023FA D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15535                                  ioctl_da_ok_j:	; 11/11/2022
 15536 000023FC E93CE2                  	jmp	SYS_RET_OK
 15537                                  
 15538                                  ;-------------------------------------------------------------------------
 15539                                  ;
 15540                                  ; IOCTL: AL = 9
 15541                                  ;
 15542                                  ; ENTRY: DS = DOSDATA
 15543                                  ;
 15544                                  ;-------------------------------------------------------------------------
 15545                                  
 15546                                  ioctl_drive_attr:
 15547                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15548 000023FF 88D8                    	mov	al,bl
 15549 00002401 E8B946                  	call	GETTHISDRV
 15550 00002404 7241                    	jc	short ioctl_drv_err
 15551 00002406 E8B800                  	call	Get_Driver_BL
 15552                                  	; MSDOS 6.0
 15553 00002409 723C                    	JC	short ioctl_drv_err	; drive not valid
 15554                                  
 15555                                  	;mov	dx,[es:di+4]
 15556 0000240B 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15557                                  					; get device attribute word
 15558 0000240F 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15559                                  
 15560                                  ;hkn; SS override
 15561 00002411 36C43E[A205]            	LES	DI,[SS:THISCDS]
 15562                                  	;test	word [es:di+43h],8000h
 15563                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15564                                  	;test	byte [es:di+44h],80h
 15565 00002416 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15566 0000241B 7403                    	JZ	short IOCTLShare
 15567                                  
 15568                                  	;or	dx,1000h ; (MSDOS 3.3)
 15569                                  
 15570                                  ;	Net devices don't return a device attribute word.
 15571                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15572                                  
 15573 0000241D BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15574                                  IOCTLShare:
 15575 00002420 16                      	push	ss
 15576 00002421 1F                      	pop	ds
 15577 00002422 BE[BE03]                	MOV	SI,OPENBUF
 15578 00002425 80C341                  	ADD	BL,"A"	; 41h
 15579 00002428 881C                    	MOV	[SI],BL
 15580 0000242A C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15581 0000242F B80003                  	MOV	AX,0300h
 15582 00002432 F8                      	CLC
 15583                                  	;INT	int_IBM
 15584 00002433 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15585                                  			; DS:SI -> ASCIZ disk device name 
 15586                                  			; (may be full path or only drive
 15587                                  			; specifier--must include the colon)
 15588                                  			; Return: CF clear if absolute disk access allowed
 15589 00002435 7303                    	JNC	short IOCTLLocal	; Not shared
 15590                                  	;OR	DX,0200H		; Shared, bit 9
 15591                                  	; 17/12/2022
 15592 00002437 80CE02                  	or	dh,02h
 15593                                  IOCTLLocal:
 15594                                  	;test	word [es:di+43h],1000h
 15595                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15596                                  	;test	byte [es:di+44h],10h
 15597 0000243A 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15598                                  	;JZ	short ioctl_set_DX
 15599                                  	; 16/12/2022
 15600 0000243F 7403                    	jz	short _ioctl_set_DX
 15601                                  	;OR	DX,8000h
 15602                                  	; 17/12/2022
 15603 00002441 80CE80                  	or	dh,80h
 15604                                  ;ioctl_set_DX:
 15605                                  _ioctl_set_DX:
 15606                                  	; 16/12/2022
 15607 00002444 E9B6FE                  	jmp	ioctl_set_dx
 15608                                  ; 16/12/2022
 15609                                  %if 0	
 15610                                  	call	Get_User_Stack
 15611                                  	MOV	[SI+user_env.user_DX],DX
 15612                                  	;;jmp	SYS_RET_OK
 15613                                  	;; 25/06/2019
 15614                                  	;jmp	SYS_RET_OK_clc
 15615                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15616                                  ioctl_gd_ok_j:
 15617                                  	jmp	short ioctl_da_ok_j
 15618                                  %endif
 15619                                  
 15620                                  ioctl_drv_err:
 15621 00002447 B00F                    	mov	al,error_invalid_drive ; 0Fh
 15622                                  ioctl_gd_err_j:	; 11/11/2022
 15623 00002449 E9F8E1                  	jmp	SYS_RET_ERR
 15624                                  
 15625                                  ;--------------------------------------------------------------------------
 15626                                  ;
 15627                                  ; IOCTL: AL = A
 15628                                  ;
 15629                                  ; ENTRY: DS = DOSDATA
 15630                                  ;
 15631                                  ;--------------------------------------------------------------------------
 15632                                  
 15633                                  ioctl_handle_redir:
 15634 0000244C E84A42                  	call	SFFromHandle		; ES:DI -> SFT
 15635 0000244F 7303                    	JNC	short ioctl_got_sft	; have valid handle
 15636 00002451 E967FE                  	jmp	ioctl_bad_handle ; 10/08/2018
 15637                                  
 15638                                  ioctl_got_sft:
 15639                                  	;mov	dx,[es:di+5]
 15640 00002454 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 15641                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 15642                                  	; 16/12/2022
 15643 00002458 EBEA                    	jmp	short _ioctl_set_DX
 15644                                  
 15645                                  	; 16/12/2022
 15646                                  ;ioctl_bad_funj:
 15647                                  	;JMP	ioctl_bad_fun
 15648                                  
 15649                                  ;--------------------------------------------------------------------------
 15650                                  ;
 15651                                  ; IOCTL: AL= 4,5
 15652                                  ;
 15653                                  ; ENTRY: DS = DOSDATA
 15654                                  ;	 SI = user's DS
 15655                                  ;
 15656                                  ;
 15657                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 15658                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15659                                  ;         return address off the stack if the drive is invalid.
 15660                                  ;
 15661                                  ;-------------------------------------------------------------------------
 15662                                  
 15663                                  ioctl_get_dev:
 15664 0000245A E89200                  	CALL	Check_If_Net
 15665                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 15666                                  					; certainly don't know how to do this
 15667                                  					; call.
 15668                                  	; 16/12/2022
 15669 0000245D 7403                    	jz	short ioctl_do_string
 15670                                  ioctl_bad_funj:
 15671 0000245F E957FF                  	JMP	ioctl_bad_fun
 15672                                  
 15673                                  ioctl_do_string:
 15674                                  	;test	word [es:di+4],4000h
 15675                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 15676                                  	;test	byte [es:di+5],40h
 15677 00002462 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 15678 00002467 74F6                    	JZ	short ioctl_bad_funj		; NO
 15679                                  					; assume IOCTL read
 15680 00002469 C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 15681                                  
 15682 0000246E A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 15683 00002470 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 15684                                  
 15685                                  					; it is an IOCTL write
 15686 00002472 C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 15687                                  
 15688                                  ioctl_control_call:
 15689 00002477 B016                    	MOV	AL,DRDWRHL ; 22
 15690                                  ioctl_setup_pkt:
 15691 00002479 88DC                    	MOV	AH,BL			; Unit number
 15692 0000247B A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15693 0000247E 31C0                    	XOR	AX,AX
 15694 00002480 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15695 00002483 A2[8903]                	MOV	[IOMED],AL
 15696 00002486 890E[8E03]              	MOV	[IOSCNT],CX
 15697 0000248A 8916[8A03]              	MOV	[IOXAD],DX
 15698 0000248E 8936[8C03]              	MOV	[IOXAD+2],SI
 15699 00002492 06                      	PUSH	ES
 15700 00002493 1F                      	POP	DS
 15701 00002494 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15702 00002496 16                      	PUSH	SS
 15703 00002497 07                      	POP	ES
 15704                                  
 15705 00002498 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15706                                  ioctl_do_IO:
 15707 0000249B E8F921                  	call	DEVIOCALL2
 15708                                  
 15709                                  ;hkn; SS override for IOCALL
 15710                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 15711                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15712                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15713 0000249E 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15714 000024A4 7507                    	JNZ	short ioctl_string_err
 15715                                  
 15716                                  ;hkn; SS override
 15717 000024A6 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 15718                                  	; 16/12/2022
 15719 000024AA E98EE1                  	jmp	SYS_RET_OK
 15720                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15721                                  	;jmp	short ioctl_gd_ok_j
 15722                                  
 15723                                  ioctl_string_err:
 15724 000024AD 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 15725                                  device_err:
 15726 000024B2 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 15727 000024B6 89F8                    	MOV	AX,DI
 15728 000024B8 E86B30                  	call	SET_I24_EXTENDED_ERROR
 15729                                  
 15730                                  ;hkn; use SS override
 15731                                  ;hkn;	mov	ax,[CS:EXTERR]
 15732 000024BB 36A1[2403]              	mov	ax,[SS:EXTERR]
 15733                                  	;jmp	SYS_RET_ERR
 15734                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15735 000024BF EB88                    	jmp	short ioctl_gd_err_j
 15736                                  
 15737                                  ; 17/05/2019 - Retro DOS v4.0
 15738                                  
 15739                                  ;--------------------------------------------------------------------------
 15740                                  ; Proc name : Get_Driver_BL
 15741                                  ;
 15742                                  ;	DS is DOSDATA
 15743                                  ;	BL is drive number (0=default)
 15744                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 15745                                  ;	No regs modified
 15746                                  ;
 15747                                  ;---------------------------------------------------------------------------
 15748                                  
 15749                                  Get_Driver_BL:
 15750 000024C1 50                      	PUSH	AX
 15751 000024C2 88D8                    	MOV	AL,BL			; Drive
 15752 000024C4 E8F645                  	call	GETTHISDRV
 15753 000024C7 7224                    	jc	short ioctl_bad_drv
 15754 000024C9 30DB                    	XOR	BL,BL			; Unit zero on Net device
 15755 000024CB C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 15756 000024D0 C43E[A205]              	LES	DI,[THISCDS]
 15757                                  	;test	word [es:di+43h],8000h
 15758                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15759                                  	;test	byte [es:di+44h],80h
 15760 000024D4 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15761                                  	;les	di,[es:di+45h]
 15762 000024D9 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 15763 000024DD 750D                    	JNZ	short got_dev_ptr	 ; Is net
 15764 000024DF C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15765                                  	;mov	bl,[es:di+1]
 15766 000024E4 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 15767                                  	;les	di,[es:di+13h]
 15768 000024E8 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 15769                                  got_dev_ptr:
 15770 000024EC F8                      	CLC
 15771                                  ioctl_bad_drv:
 15772 000024ED 58                      	POP	AX
 15773 000024EE C3                      	retn
 15774                                  
 15775                                  ;-------------------------------------------------------------------------
 15776                                  ; Proc Name : Check_If_Net:
 15777                                  ;
 15778                                  ;
 15779                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 15780                                  ; If no device is found, the return address is popped off the stack, and a
 15781                                  ; jump is made to ioctl_drv_err.
 15782                                  ;
 15783                                  ; On Entry:
 15784                                  ; Registers same as those for Get_Driver_BL
 15785                                  ;
 15786                                  ; On Exit:
 15787                                  ; ZERO flag	- set if not a net device
 15788                                  ;		- reset if net device
 15789                                  ; ES:DI -> the device
 15790                                  ;
 15791                                  ;
 15792                                  ; BUGBUG: This function assumes the following stack setup on entry
 15793                                  ;
 15794                                  ;	  SP+2 -> Error return address
 15795                                  ;	  SP   -> Normal return address
 15796                                  ;
 15797                                  ;-------------------------------------------------------------------------
 15798                                  
 15799                                  Check_If_Net:
 15800                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15801 000024EF E8CFFF                  	CALL	Get_Driver_BL
 15802 000024F2 720E                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 15803 000024F4 06                      	PUSH	ES
 15804 000024F5 57                      	PUSH	DI
 15805 000024F6 C43E[A205]              	LES	DI,[THISCDS]
 15806                                  	;test	word [es:di+43h],8000h
 15807                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15808                                  	;test	byte [es:di+44h],80h
 15809 000024FA 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15810 000024FF 5F                      	POP	DI
 15811 00002500 07                      	POP	ES
 15812 00002501 C3                      	retn
 15813                                  
 15814                                  ioctl_drv_err_pop:
 15815 00002502 58                      	pop	ax			; pop off return address
 15816 00002503 E941FF                  	jmp	ioctl_drv_err
 15817                                  
 15818                                  ioctl_bad_funj3:
 15819 00002506 E9B0FE                  	jmp	ioctl_bad_fun
 15820                                  
 15821                                  ioctl_string_errj:
 15822 00002509 EBA2                    	jmp	short ioctl_string_err  ; 25/05/2019
 15823                                  
 15824                                  ;--------------------------------------------------------------------------
 15825                                  ;
 15826                                  ; IOCTL: AL = E, F
 15827                                  ;
 15828                                  ; ENTRY: DS = DOSDATA
 15829                                  ;
 15830                                  ;
 15831                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 15832                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15833                                  ;         return address off the stack if the drive is invalid.
 15834                                  ;
 15835                                  ;--------------------------------------------------------------------------
 15836                                  
 15837                                  ioctl_drive_owner:
 15838                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15839 0000250B E8E1FF                  	Call	Check_If_Net
 15840 0000250E 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 15841                                  					;   certainly don't know how to do this
 15842                                  					;   call.
 15843                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 15844                                  	; 09/09/2018
 15845                                  	;test	byte [es:di+4],40h
 15846 00002510 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15847 00002515 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 15848                                  	;mov	byte [IOCALL_REQFUNC],23
 15849 00002517 C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 15850 0000251C 3C0E                    	cmp	al,0Eh			; Get Owner ?
 15851 0000251E 7405                    	jz	short GetOwner
 15852                                  SetOwner:
 15853 00002520 C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 15854                                  GetOwner:
 15855 00002525 B00D                    	MOV	AL,OWNHL ; 13
 15856 00002527 88DC                    	MOV	AH,BL			; Unit number
 15857 00002529 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15858 0000252C 31C0                    	XOR	AX,AX
 15859 0000252E A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15860 00002531 06                      	PUSH	ES
 15861 00002532 1F                      	POP	DS
 15862 00002533 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15863 00002535 16                      	PUSH	SS
 15864 00002536 07                      	POP	ES
 15865 00002537 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15866 0000253A 1E                      	push	ds
 15867 0000253B 56                      	push	si
 15868 0000253C E85821                  	call	DEVIOCALL2
 15869 0000253F 5E                      	pop	si
 15870 00002540 1F                      	pop	ds
 15871                                  ;hkn; SS override
 15872                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15873                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15874 00002541 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15875 00002547 75C0                    	jnz	short ioctl_string_errj
 15876 00002549 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 15877                                  					; owner returned is 1-based.
 15878 0000254D E9EBE0                  	jmp	SYS_RET_OK
 15879                                  
 15880                                  ;============================================================================
 15881                                  ; DELETE.ASM, MSDOS 6.0, 1991
 15882                                  ;============================================================================
 15883                                  ; 07/08/2018 - Retro DOS v3.0
 15884                                  ; 17/05/2019 - Retro DOS v4.0
 15885                                  
 15886                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 15887                                  ;	NAME	DOS_DELETE
 15888                                  
 15889                                  ;
 15890                                  ;	Microsoft Confidential
 15891                                  ;	Copyright (C) Microsoft Corporation 1991
 15892                                  ;	All Rights Reserved.
 15893                                  ;
 15894                                  
 15895                                  ;**	DELETE.ASM - Low level routine for deleting files
 15896                                  ;----------------------------------------------------------------------------
 15897                                  ;		DOS_DELETE
 15898                                  ;		REN_DEL_Check
 15899                                  ;		FastOpen_Delete	       ; DOS 3.3
 15900                                  ;		FastOpen_Update	       ; DOS 3.3
 15901                                  
 15902                                  ;   Revision history:
 15903                                  ;
 15904                                  ;   A000  version 4.00	Jan. 1988
 15905                                  ;   A001  Fastopen Rename fix	April 1989
 15906                                  
 15907                                  ;Installed = TRUE
 15908                                  
 15909                                  ;	i_need	NoSetDir,BYTE
 15910                                  ;	i_need	Creating,BYTE
 15911                                  ;	i_need	DELALL,BYTE
 15912                                  ;	i_need	THISDPB,DWORD
 15913                                  ;	i_need	THISSFT,DWORD
 15914                                  ;	i_need	THISCDS,DWORD
 15915                                  ;	i_need	CURBUF,DWORD
 15916                                  ;	i_need	ATTRIB,BYTE
 15917                                  ;	i_need	SATTRIB,BYTE
 15918                                  ;	i_need	WFP_START,WORD
 15919                                  ;	i_need	REN_WFP,WORD			 ;BN001
 15920                                  ;	i_need	NAME1,BYTE			 ;BN001
 15921                                  ;	i_need	FoundDel,BYTE
 15922                                  ;	i_need	AUXSTACK,BYTE
 15923                                  ;	i_need	VOLCHNG_FLAG,BYTE
 15924                                  ;	i_need	JShare,DWORD
 15925                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 15926                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 15927                                  ;
 15928                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 15929                                  ;
 15930                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 15931                                  ;	i_need	DMAADD,DWORD
 15932                                  ;	i_need	RENAMEDMA,BYTE
 15933                                  
 15934                                  ;----------------------------------------------------------------------------
 15935                                  ;
 15936                                  ; Procedure Name : DOS_DELETE
 15937                                  ;
 15938                                  ; Inputs:
 15939                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15940                                  ;		terminated)
 15941                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15942                                  ;		( = -1 if current dir not involved, else
 15943                                  ;		 Points to first char after last "/" of current dir part)
 15944                                  ;	[THISCDS] Points to CDS being used
 15945                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15946                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15947                                  ; Function:
 15948                                  ;	Delete the specified file(s)
 15949                                  ; Outputs:
 15950                                  ;	CARRY CLEAR
 15951                                  ;		OK
 15952                                  ;	CARRY SET
 15953                                  ;	    AX is error code
 15954                                  ;		error_file_not_found
 15955                                  ;			Last element of path not found
 15956                                  ;		error_path_not_found
 15957                                  ;			Bad path (not in curr dir part if present)
 15958                                  ;		error_bad_curr_dir
 15959                                  ;			Bad path in current directory part of path
 15960                                  ;		error_access_denied
 15961                                  ;			Attempt to delete device or directory
 15962                                  ;		***error_sharing_violation***
 15963                                  ;			Deny both access required, generates an INT 24.
 15964                                  ;			This error is NOT returned. The INT 24H is generated,
 15965                                  ;			  and the file is ignored (not deleted). Delete will
 15966                                  ;			  simply continue on looking for more files.
 15967                                  ;			  Carry will NOT be set in this case.
 15968                                  ; DS preserved, others destroyed
 15969                                  ;
 15970                                  ;----------------------------------------------------------------------------
 15971                                  
 15972                                  FILEFOUND   equ 01h
 15973                                  FILEDELETED equ 10h
 15974                                  
 15975                                  
 15976                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15977                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 15978                                  
 15979                                  DOS_DELETE:
 15980                                  
 15981                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 15982                                  ;hkn; appropriately at this point.
 15983                                  
 15984 00002550 E8FFEC                  	call	TestNet
 15985 00002553 7306                    	JNC	short LOCAL_DELETE
 15986                                  
 15987                                  ;IF NOT Installed
 15988                                  ;	transfer NET_DELETE
 15989                                  ;ELSE
 15990                                  	;MOV	AX,(MultNET SHL 8) | 19
 15991                                  	;INT	2FH
 15992                                  	;return
 15993                                  
 15994 00002555 B81311                  	mov	ax,1113h
 15995 00002558 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 15996                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 15997                                  			;		fully-qualified filename in DOS CS
 15998                                  			; SDA CDS pointer -> current directory structure for drive with file
 15999                                  			; Return: CF set on error
 16000 0000255A C3                      	retn
 16001                                  ;ENDIF
 16002                                  
 16003                                  LOCAL_DELETE:
 16004 0000255B C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 16005 00002560 E8B3ED                  	call	ECritDisk
 16006                                  	;mov	word [CREATING],0E500h
 16007 00002563 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 16008 00002569 8B36[B205]              	MOV	SI,[WFP_START]
 16009                                  SKPNUL:
 16010 0000256D AC                      	LODSB
 16011 0000256E 08C0                    	OR	AL,AL
 16012 00002570 75FB                    	JNZ	short SKPNUL		; go to end
 16013 00002572 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 16014 00002575 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 16015 00002579 7506                    	JNZ	short TEST_QUEST
 16016 0000257B 807C022A                	CMP	BYTE [SI+2],"*"
 16017 0000257F 741F                    	JZ	short CHECK_ATTS
 16018                                  TEST_QUEST:
 16019 00002581 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 16020 00002584 87FE                    	XCHG	DI,SI
 16021                                  
 16022 00002586 16                      	push	ss
 16023                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 16024 00002587 07                      	pop	es ; 17/05/2019
 16025                                  
 16026 00002588 B83F3F                  	MOV	AX,"??" ; 3F3Fh
 16027 0000258B B90400                  	MOV	CX,4		; four sets of "??"
 16028 0000258E F3AF                    	REPE	SCASW
 16029 00002590 751C                    	JNZ	short NOT_ALL
 16030 00002592 87FE                    	XCHG	DI,SI
 16031 00002594 AD                      	LODSW
 16032 00002595 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 16033 00002598 7514                    	JNZ	short NOT_ALL
 16034 0000259A AD                      	LODSW
 16035 0000259B 3D3F3F                  	CMP	AX,"??"
 16036 0000259E 750E                    	JNZ	short NOT_ALL
 16037                                  CHECK_ATTS:
 16038 000025A0 A0[6D05]                	MOV	AL,[SATTRIB]
 16039                                  	;and	al,1Fh
 16040 000025A3 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16041                                  					; Look only at hidden bits
 16042                                  	;cmp	al,1Fh
 16043 000025A5 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16044                                  					; All must be set
 16045 000025A7 7505                    	JNZ	short NOT_ALL
 16046                                  
 16047                                  ; NOTE WARNING DANGER-----
 16048                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 16049                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 16050                                  
 16051 000025A9 C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 16052                                  NOT_ALL:
 16053 000025AE C606[4C03]01            	MOV	byte [NoSetDir],1
 16054 000025B3 E89519                  	call	GetPathNoSet
 16055 000025B6 7312                    	JNC	short Del_found
 16056 000025B8 750B                    	JNZ	short _bad_path
 16057 000025BA 08C9                    	OR	CL,CL
 16058 000025BC 7407                    	JZ	short _bad_path
 16059                                  No_file:
 16060 000025BE B80200                  	MOV	AX,error_file_not_found
 16061                                  ErrorReturn:
 16062 000025C1 F9                      	STC
 16063                                  	;call	LCritDisk
 16064                                  	;retn
 16065                                  	; 18/12/2022
 16066 000025C2 E96CED                  	jmp	LCritDisk
 16067                                  
 16068                                  _bad_path:
 16069 000025C5 B80300                  	MOV	AX,error_path_not_found
 16070 000025C8 EBF7                    	JMP	short ErrorReturn
 16071                                  
 16072                                  Del_found:
 16073 000025CA 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 16074 000025CC 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 16075 000025D1 7405                    	JZ	short NOT_DIR
 16076                                  Del_access_err:
 16077 000025D3 B80500                  	MOV	AX,error_access_denied
 16078 000025D6 EBE9                    	JMP	short ErrorReturn
 16079                                  
 16080                                  NOT_DIR:
 16081 000025D8 08E4                    	OR	AH,AH			; Check if device name
 16082 000025DA 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 16083                                  
 16084                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 16085                                  
 16086                                  DELFILE:
 16087 000025DC 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 16088                                  
 16089                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 16090                                  ; DOS issue a build BPB call the next time this drive is accessed.
 16091                                  
 16092 000025E1 1E                      	PUSH	DS
 16093 000025E2 8A26[7F05]              	MOV	AH,[DELALL]
 16094 000025E6 C53E[E205]              	LDS	DI,[CURBUF]
 16095                                  	
 16096                                  ;hkn; SS override
 16097 000025EA 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 16098 000025F0 7509                    	JNZ	short DoDelete		; yes
 16099                                  
 16100 000025F2 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 16101 000025F6 7403                    	JZ	short DoDelete		; not read only
 16102                                  
 16103 000025F8 1F                      	POP	DS
 16104 000025F9 EB32                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 16105                                  
 16106                                  DoDelete:
 16107 000025FB E88400                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 16108 000025FE 7303                    	JNC	short DEL_SHARE_OK
 16109 00002600 1F                      	POP	DS
 16110 00002601 EB2A                    	JMP	SHORT DELNXT		; Skip it
 16111                                  
 16112                                  DEL_SHARE_OK:
 16113                                  	; 17/05/2019 - Retro DOS v4.0
 16114                                  	; MSDOS 6.0
 16115                                  	;test	byte [di+5],40h
 16116 00002603 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16117                                  					;LB. if already dirty		  ;AN000;
 16118 00002607 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 16119 00002609 E86C35                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 16120                                  	;or	byte [di+5],40h
 16121 0000260C 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16122                                  yesdirty:
 16123 00002610 8827                    	mov	[bx],ah 
 16124                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 16125 00002612 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 16126 00002614 1F                      	POP	DS
 16127 00002615 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 16128                                  
 16129 0000261A 83FB02                  	CMP	BX,2
 16130 0000261D 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 16131                                  	;cmp	bx,[es:bp+0Dh]
 16132 0000261F 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16133 00002623 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16134                                  
 16135 00002625 E8BE28                  	call	RELEASE 		; Free file data
 16136 00002628 7252                    	JC	short No_fileJ
 16137                                  
 16138                                  ; DOS 3.3  FastOpen
 16139                                  
 16140 0000262A E8C300                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16141                                  
 16142                                  ; DOS 3.3  FastOpen
 16143                                  
 16144                                  DELNXT:
 16145 0000262D C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16146 00002631 E88218                  	call	GETENTRY		; Registers need to be reset
 16147 00002634 7246                    	JC	short No_fileJ
 16148 00002636 E8BB17                  	call	NEXTENT
 16149 00002639 73A1                    	JNC	short DELFILE
 16150 0000263B C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16151                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16152                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16153                                  	;;mov	al,[es:bp+0]
 16154                                  	; 15/12/2022
 16155 0000263F 268A4600                	MOV	AL,[ES:BP]
 16156 00002643 E82D34                  	call	FLUSHBUF
 16157 00002646 7234                    	JC	short No_fileJ
 16158                                  ;
 16159                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16160                                  ;
 16161                                  ;   not found not deleted		file not found
 16162                                  ;   not found	  deleted		*** impossible ***
 16163                                  ;	found not deleted		access denied (read-only)
 16164                                  ;	found	  deleted		no error
 16165                                  ;
 16166 00002648 F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16167 0000264D 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16168                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16169                                  ; and to force the DOS to issue a media check.
 16170 0000264F F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16171 00002654 741C                    	jz	short No_Set_Flag
 16172 00002656 50                      	PUSH	AX
 16173 00002657 06                      	PUSH	ES
 16174 00002658 57                      	PUSH	DI
 16175 00002659 C43E[A205]              	LES	DI,[THISCDS]
 16176 0000265D 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16177 00002660 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16178 00002663 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16179                                  	
 16180                                  	; MSDOS 6.0
 16181 00002667 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16182 00002669 E8DC04                  	call	Set_Media_ID		;>32mb set volumme id to boot record	 ;AN000;
 16183                                  	 
 16184 0000266C E88B30                  	call	FATREAD_CDS		; force media check
 16185 0000266F 5F                      	POP	DI
 16186 00002670 07                      	POP	ES
 16187 00002671 58                      	POP	AX
 16188                                  No_Set_Flag:
 16189                                  	;call	LCritDisk		; carry is clear
 16190                                  	;retn
 16191                                  	; 18/12/2022
 16192 00002672 E9BCEC                  	jmp	LCritDisk
 16193                                  DelError:
 16194 00002675 F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16195 0000267A 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16196                                  No_fileJ:
 16197 0000267C E93FFF                  	JMP	No_file ; 10/08/2018 		; Nope
 16198                                  Del_access_errJ:
 16199 0000267F E951FF                  	JMP	Del_access_err ; 10/08/2018
 16200                                  
 16201                                  ; 08/08/2018 - Retro DOS v3.0
 16202                                  
 16203                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16204                                  ;---------------------------------------------------------------------------
 16205                                  ; Procedure Name : REN_DEL_Check
 16206                                  ;
 16207                                  ; Inputs:
 16208                                  ;	[THISDPB] set
 16209                                  ;	[CURBUF+2]:BX points to entry
 16210                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16211                                  ;	[WFP_Start] points to name
 16212                                  ; Function:
 16213                                  ;	Check for Exclusive access on given file.
 16214                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16215                                  ; Outputs:
 16216                                  ;	ES:BP = [THISDPB]
 16217                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16218                                  ;		last element will be loaded from the directory entry.  This is
 16219                                  ;		so the name given to the sharer doesn't have any meta chars in
 16220                                  ;		it.
 16221                                  ;	Carry set if sharing violation, INT 24H generated
 16222                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16223                                  ;		This is because input AX is preserved.
 16224                                  ;		Caller must set the error if needed.
 16225                                  ;	Carry clear
 16226                                  ;		OK
 16227                                  ; AX,DS,BX,SI,DI preserved
 16228                                  ;---------------------------------------------------------------------------
 16229                                  
 16230                                  REN_DEL_Check:
 16231                                  
 16232 00002682 1E                      	PUSH	DS
 16233 00002683 57                      	PUSH	DI
 16234 00002684 50                      	PUSH	AX
 16235 00002685 53                      	PUSH	BX
 16236 00002686 56                      	PUSH	SI		; Save CURBUF pointers
 16237                                  	
 16238 00002687 16                      	push	ss
 16239 00002688 07                      	pop	es
 16240                                  
 16241                                  ;hkn; context ES will assume ES to DOSDATA
 16242                                  ;hkn; ASSUME	ES:DOSGROUP
 16243                                  
 16244                                  ;hkn; SS override
 16245 00002689 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16246 0000268E 89DE                    	MOV	SI,BX
 16247                                  
 16248                                  ;hkn; SS override
 16249 00002690 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16250 00002695 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16251 00002697 83C302                  	ADD	BX,2		; Skip over d: to point to leading '\'
 16252 0000269A E855EB                  	call	StrLen		; CX is length of ES:DI including NUL
 16253 0000269D 49                      	DEC	CX		; Don't include nul in count
 16254 0000269E 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16255 000026A0 E8D446                  	call	SkipBack	; Back up one element
 16256 000026A3 47                      	INC	DI		; Point to start of last element
 16257                                  
 16258                                  	; 17/05/2019 - Retro DOS v4.0
 16259                                  ;hkn; SS override
 16260                                  	; MSDOS 6.0
 16261 000026A4 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16262                                  	;
 16263 000026A9 E830FA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16264 000026AC 5E                      	POP	SI		; Get back entry pointers
 16265 000026AD 5B                      	POP	BX
 16266 000026AE 53                      	PUSH	BX
 16267 000026AF 56                      	PUSH	SI		; Back on stack
 16268                                  	
 16269 000026B0 16                      	push	ss
 16270 000026B1 1F                      	pop	ds
 16271                                  
 16272                                  ;hkn; context DS will assume ES to DOSDATA
 16273                                  ;hkn; ASSUME	DS:DOSGROUP
 16274                                  
 16275                                  ; Close the file if possible by us.
 16276                                  ;
 16277                                  ;if installed
 16278 000026B2 FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16279                                  ;else
 16280                                  ;	Call	ShCloseFile
 16281                                  ;endif
 16282 000026B6 8C1E[A005]              	MOV	[THISSFT+2],DS
 16283                                  
 16284                                  ;hkn; AUXSTACK is in DOSDATA
 16285 000026BA C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16286                                  				; Scratch space
 16287 000026C0 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16288 000026C2 E8AB24                  	call	DOOPEN		; Fill in SFT for share check
 16289 000026C5 C43E[9E05]              	LES	DI,[THISSFT]
 16290                                  	;mov	word [es:di+2],10h
 16291 000026C9 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16292                                  				; requires exclusive access
 16293                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16294 000026CF 26C7050100              	mov	word [ES:DI],1
 16295 000026D4 E8C44C                  	call	ShareEnter
 16296 000026D7 720D                    	jc	short CheckDone
 16297 000026D9 C43E[9E05]              	LES	DI,[THISSFT]
 16298                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16299 000026DD 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16300                                  	
 16301 000026E2 E8B14C                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16302 000026E5 F8                      	CLC
 16303                                  CheckDone:
 16304 000026E6 C42E[8A05]              	LES	BP,[THISDPB]
 16305 000026EA 5E                      	POP	SI
 16306 000026EB 5B                      	POP	BX
 16307 000026EC 58                      	POP	AX
 16308 000026ED 5F                      	POP	DI
 16309 000026EE 1F                      	POP	DS
 16310 000026EF C3                      	retn
 16311                                  
 16312                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16313                                  ;---------------------------------------------------------------------------
 16314                                  ; Procedure Name : FastOpen_Delete
 16315                                  ; Inputs:
 16316                                  ;	None
 16317                                  ; Function:
 16318                                  ;	Call FastOpen to delete the dir info.
 16319                                  ; Outputs:
 16320                                  ;	None
 16321                                  ;---------------------------------------------------------------------------
 16322                                  
 16323                                  FastOpen_Delete:
 16324 000026F0 9C                      	PUSHF			; save flag
 16325 000026F1 56                      	PUSH	SI		; save registers
 16326 000026F2 53                      	PUSH	BX
 16327 000026F3 50                      	PUSH	AX
 16328                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16329                                  ;hkn; SS override
 16330                                  	; 17/05/2019 - Retro DOS v4.0
 16331                                  	; MSDOS 6.0
 16332 000026F4 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16333                                  	
 16334 000026F9 B003                    	MOV	AL,FONC_delete	; al = 3
 16335                                  fastinvoke:
 16336                                  ;hkn; FastTable is in DOSDATA
 16337 000026FB BB[320D]                	MOV	BX,FastTable+2
 16338 000026FE FF1F                    	CALL	far [BX]	; call fastopen
 16339 00002700 58                      	POP	AX		; restore registers
 16340 00002701 5B                      	POP	BX
 16341 00002702 5E                      	POP	SI
 16342 00002703 9D                      	POPF			; restore flag
 16343 00002704 C3                      	retn
 16344                                  
 16345                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16346                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16347                                  
 16348                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16349                                  ;---------------------------------------------------------------------------
 16350                                  ; PROCEDURE Name : FastOpen_Rename
 16351                                  ;
 16352                                  ; Inputs:
 16353                                  ;	 REN_WFP   = Path Name
 16354                                  ;	 NAME1	   = New Name
 16355                                  ; Function:
 16356                                  ;	Call FastOpen to rename the dir entry in the cache
 16357                                  ; Outputs:
 16358                                  ;	None
 16359                                  ;---------------------------------------------------------------------------
 16360                                  
 16361                                  FastOpen_Rename:
 16362                                  	; 17/05/2019 - Retro DOS v4.0
 16363                                  	; 08/08/2018 - Retro DOS v3.0
 16364                                  	; MSDOS 6.0
 16365 00002705 9C                      	PUSHF			;AN001 save flag
 16366 00002706 56                      	PUSH	SI		;AN001 save registers
 16367 00002707 57                      	PUSH	DI		;AN001
 16368 00002708 53                      	PUSH	BX		;AN001
 16369 00002709 50                      	PUSH	AX		;AN001
 16370                                  	;
 16371                                  ;hkn; SS override
 16372 0000270A 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16373                                  
 16374                                  ;hkn; NAME1 is in DOSDATA
 16375 0000270F BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16376                                  	;mov	al,6
 16377 00002712 B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16378                                  	
 16379                                  ;hkn; FastTable is in DOSDATA
 16380 00002714 BB[320D]                	MOV	BX,FastTable+2
 16381 00002717 FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16382                                  	
 16383 00002719 58                      	POP	AX		; restore registers  ;AN001
 16384 0000271A 5B                      	POP	BX				     ;AN001
 16385 0000271B 5F                      	POP	DI				     ;AN001
 16386 0000271C 5E                      	POP	SI				     ;AN001
 16387 0000271D 9D                      	POPF			; restore flag	     ;AN001
 16388 0000271E C3                      	retn					     ;AN001
 16389                                  
 16390                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16391                                  ;---------------------------------------------------------------------------
 16392                                  ; Procedure Name : FastOpen_Update
 16393                                  ;
 16394                                  ; Inputs:
 16395                                  ;	DL     drive number (A=0,B=1,,,)
 16396                                  ;	CX     first cluster #
 16397                                  ;	AH     0 updates dir entry
 16398                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16399                                  ;	ES:DI  directory entry
 16400                                  ; Function:
 16401                                  ;	Call FastOpen to update the dir info.
 16402                                  ; Outputs:
 16403                                  ;	None
 16404                                  ;---------------------------------------------------------------------------
 16405                                  
 16406                                  FastOpen_Update:
 16407 0000271F 9C                      	PUSHF			; save flag
 16408 00002720 56                      	PUSH	SI
 16409 00002721 53                      	PUSH	BX		; save regs
 16410 00002722 50                      	PUSH	AX
 16411 00002723 B004                    	MOV	AL,FONC_update	; al = 4
 16412 00002725 EBD4                    	JMP	short fastinvoke
 16413                                  
 16414                                  	; 17/05/2019
 16415                                  
 16416                                  	; MSDOS 6.0
 16417                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16418                                  ;---------------------------------------------------------------------------
 16419                                  Fast_Dispatch:
 16420                                  ;hkn; FastTable is in DOSDATA
 16421 00002727 BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16422                                  ;hkn; use SS override
 16423 0000272A 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16424 0000272D C3                      	retn
 16425                                  
 16426                                  ;============================================================================
 16427                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16428                                  ;============================================================================
 16429                                  ; 08/08/2018 - Retro DOS v3.0
 16430                                  ; 17/05/2019 - Retro DOS v4.0
 16431                                  
 16432                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16433                                  ;	NAME	DOS_RENAME
 16434                                  
 16435                                  ;**	Low level routine for renaming files
 16436                                  ;----------------------------------------------------------------------------
 16437                                  ;	DOS_RENAME
 16438                                  ;
 16439                                  ;	Modification history:
 16440                                  ;
 16441                                  ;	    Created: ARR 30 March 1983
 16442                                  
 16443                                  ;----------------------------------------------------------------------------
 16444                                  ;
 16445                                  ; Procedure Name : DOS_RENAME
 16446                                  ;
 16447                                  ; Inputs:
 16448                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16449                                  ;		chars, NUL terminated)
 16450                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16451                                  ;		( = -1 if current dir not involved, else
 16452                                  ;		 Points to first char after last "/" of current dir part)
 16453                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16454                                  ;		chars, NUL terminated)
 16455                                  ;	[THISCDS] Points to CDS being used
 16456                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16457                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16458                                  ; Function:
 16459                                  ;	Rename the specified file(s)
 16460                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16461                                  ; Outputs:
 16462                                  ;	CARRY CLEAR
 16463                                  ;	    OK
 16464                                  ;	CARRY SET
 16465                                  ;	    AX is error code
 16466                                  ;		error_file_not_found
 16467                                  ;			No match for source, or dest path invalid
 16468                                  ;		error_not_same_device
 16469                                  ;			Source and dest are on different devices
 16470                                  ;		error_access_denied
 16471                                  ;			Directory specified (not simple rename),
 16472                                  ;			Device name given, Destination exists.
 16473                                  ;			NOTE: In third case some renames may have
 16474                                  ;			 been done if metas.
 16475                                  ;		error_path_not_found
 16476                                  ;			Bad path (not in curr dir part if present)
 16477                                  ;			SOURCE ONLY
 16478                                  ;		error_bad_curr_dir
 16479                                  ;			Bad path in current directory part of path
 16480                                  ;			SOURCE ONLY
 16481                                  ;		error_sharing_violation
 16482                                  ;			Deny both access required, generates an INT 24.
 16483                                  ; DS preserved, others destroyed
 16484                                  ;
 16485                                  ;----------------------------------------------------------------------------
 16486                                  
 16487                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16488                                  
 16489                                  DOS_RENAME:
 16490                                  
 16491                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16492                                  ;hkn; at this point to DOSDATA.
 16493                                  
 16494 0000272E E821EB                  	call	TestNet
 16495 00002731 7306                    	JNC	short LOCAL_RENAME
 16496                                  
 16497                                  ;IF NOT Installed
 16498                                  ;	transfer NET_RENAME
 16499                                  ;ELSE
 16500                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16501                                  	;INT	2FH
 16502                                  	;return
 16503                                  
 16504 00002733 B81111                  	mov     ax, 1111h
 16505 00002736 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16506                                  			; SS = DS = DOS CS, 
 16507                                  			; SDA first filename pointer = offset of fully-qualified old name
 16508                                  			; SDA CDS pointer -> current directory
 16509                                  			; Return: CF set on error
 16510 00002738 C3                      	retn
 16511                                  ;ENDIF
 16512                                  
 16513                                  LOCAL_RENAME:
 16514 00002739 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16515 0000273E 8B36[B205]              	MOV	SI,[WFP_START]
 16516 00002742 8B3E[B405]              	MOV	DI,[REN_WFP]
 16517 00002746 8A04                    	MOV	AL,[SI]
 16518 00002748 8A25                    	MOV	AH,[DI]
 16519 0000274A 0D2020                  	OR	AX,2020H		; Lower case
 16520 0000274D 38E0                    	CMP	AL,AH
 16521 0000274F 7405                    	JZ	short SAMEDRV
 16522 00002751 B81100                  	MOV	AX,error_not_same_device ; 11h
 16523 00002754 F9                      	STC
 16524 00002755 C3                      	retn
 16525                                  
 16526                                  SAMEDRV:
 16527 00002756 FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16528 0000275A FF36[2C03]              	PUSH	WORD [DMAADD]
 16529 0000275E 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16530                                  
 16531                                  ;hkn; RENAMEDMA is in DOSDATA
 16532 00002762 C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16533 00002768 C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16534 0000276D E8A6EB                  	call	ECritDisk
 16535 00002770 E8F505                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16536                                  					;    points to entry
 16537 00002773 7314                    	JNC	short Check_Dev
 16538 00002775 83F812                  	CMP	AX,error_no_more_files ; 12h
 16539 00002778 7503                    	JNZ	short GOTERR
 16540 0000277A B80200                  	MOV	AX,error_file_not_found ; 2
 16541                                  GOTERR:
 16542 0000277D F9                      	STC
 16543                                  RENAME_POP:
 16544 0000277E 8F06[2C03]              	POP	WORD [DMAADD]
 16545 00002782 8F06[2E03]              	POP	WORD [DMAADD+2]
 16546                                  	;call	LCritDisk
 16547                                  	;retn
 16548                                  	; 16/12/2022
 16549 00002786 E9A8EB                  	jmp	LCritDisk
 16550                                  
 16551                                  Check_Dev:
 16552                                  	; 17/05/2019 - Retro DOS v4.0
 16553                                  	;mov	ax,5
 16554 00002789 B80500                  	MOV	AX,error_access_denied	; Assume error
 16555                                  	
 16556                                  	; MSDOS 6.0
 16557 0000278C 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16558 0000278D C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  chek if source a dir   ;AN000;
 16559                                  	;add	si,21
 16560 00002791 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16561                                  	;test	byte [si+11],10h
 16562 00002794 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16563 00002798 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16564 0000279A 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16565 0000279E E8CCFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16566                                  notdir:
 16567 000027A1 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16568 000027A2 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16569                                  
 16570                                  	; MSDOS 3.3 & MSDOS 6.0
 16571 000027A4 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16572 000027A9 75D2                    	JNZ	short GOTERR
 16573                                  
 16574                                  ; At this point a source has been found. There is search continuation info (a
 16575                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16576                                  ; directory entry found.
 16577                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16578                                  ; throughout the RENAME since it is known at this point that the source and
 16579                                  ; destination are both on the same device.
 16580                                  ; [SATTRIB] is also set.
 16581                                  
 16582 000027AB 89DE                    	MOV	SI,BX
 16583                                  	;add	si,26
 16584 000027AD 83C61A                  	ADD	SI,dir_entry.dir_first
 16585 000027B0 E8CFFE                  	call	REN_DEL_Check
 16586 000027B3 7305                    	JNC	short REN_OK1
 16587 000027B5 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16588 000027B8 EBC4                    	JMP	short RENAME_POP
 16589                                  
 16590                                  ;------------------------------------------------------------------------------
 16591                                  ; Check if the source is a file or directory. If file, delete the entry
 16592                                  ; from the Fastopen cache. If directory, rename it later
 16593                                  ;------------------------------------------------------------------------------
 16594                                  
 16595                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 16596                                  	; MSDOS 6.0
 16597 000027BA 56                      	PUSH	SI
 16598 000027BB C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 16599                                  	;add	si,21
 16600 000027BF 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16601                                  	;test	byte [si+11],10h
 16602 000027C2 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 16603 000027C6 7403                    	JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 16604 000027C8 5E                      	POP	SI			;BN00X
 16605 000027C9 EB04                    	JMP	SHORT SWAP_SOURCE	;BN00X
 16606                                  NOT_DIR1:				;;BN00X it is a file, delete the entry
 16607 000027CB 5E                      	POP	SI
 16608                                  
 16609                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 16610 000027CC E821FF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 16611                                  SWAP_SOURCE:
 16612                                  	; MSDOS 3.3
 16613                                  	;MOV	SI,[REN_WFP]
 16614                                  	;MOV	[WFP_START],SI
 16615                                  	; MSDOS 6.0
 16616 000027CF A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 16617 000027D2 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 16618 000027D6 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 16619 000027DA A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 16620                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16621 000027DD C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 16622                                  	;mov	word [CREATING],0E5FFh
 16623 000027E3 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 16624                                  					; A rename is like a CREATE_NEW as far
 16625                                  					; as the destination is concerned.
 16626 000027E9 E85F17                  	call	GetPathNoSet
 16627                                  
 16628                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 16629                                  ;   since no files match the destination name. If it fails for any other
 16630                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 16631                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 16632                                  ;   if the rename should fail because we haven't built an explicit name by
 16633                                  ;   substituting for the meta chars in it. In this case the destination file
 16634                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 16635                                  ;   in the directory entry part.
 16636                                  	
 16637 000027EC 7223                    	JC	short NODEST
 16638                                  	
 16639                                  	; MSDOS 6.0
 16640                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 16641                                  	; !! MSDOS 3.3 !!
 16642                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 16643                                  
 16644 000027EE 08E4                    	OR	AH,AH			; Device?
 16645 000027F0 792C                    	JNS	short SAVEDEST		; No, continue
 16646                                  BAD_ACC:
 16647 000027F2 B80500                  	MOV	AX,error_access_denied
 16648 000027F5 F9                      	STC
 16649                                  RENAME_CLEAN:
 16650 000027F6 9C                      	PUSHF				; Save carry state
 16651 000027F7 50                      	PUSH	AX			; and error code (if carry set)
 16652 000027F8 A0[7605]                	MOV	AL,[THISDRV]
 16653 000027FB E87532                  	call	FLUSHBUF
 16654 000027FE 58                      	POP	AX
 16655 000027FF 803E[4A03]00            	CMP	byte [FAILERR],0
 16656 00002804 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 16657 00002806 9D                      	POPF
 16658 00002807 E974FF                  	JMP	RENAME_POP
 16659                                  
 16660                                  BAD_ERR:
 16661 0000280A 58                      	POP	AX			; Saved flags
 16662                                  	; 16/12/202
 16663                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16664                                  BAD_PATH: ; *
 16665 0000280B B80300                  	MOV	AX,error_path_not_found
 16666 0000280E E96CFF                  	JMP	GOTERR
 16667                                  
 16668                                  NODEST:
 16669 00002811 75F8                    	JNZ	short BAD_PATH
 16670 00002813 803E[4A03]00            	CMP	byte [FAILERR],0
 16671 00002818 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 16672                                  					; because user FAILed on I 24
 16673                                  	; 14/11/2022
 16674 0000281A 08C9                    	OR	CL,CL
 16675                                  	;JNZ	short SAVEDEST
 16676                                  	; 17/05/2019
 16677 0000281C 74ED                    	jz	short BAD_PATH ; *
 16678                                  ;BAD_PATH: ; *
 16679                                  ;	MOV	AX,error_path_not_found
 16680                                  ;	;STC
 16681                                  ;	;JMP	RENAME_POP
 16682                                  ;	; 17/05/2019
 16683                                  ;	jmp	GOTERR 
 16684                                  
 16685                                  ; 16/12/2022
 16686                                  %if 0
 16687                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16688                                  	or	cl,cl
 16689                                  	jnz	short SAVEDEST
 16690                                  	;jz	short BAD_PATH ; *
 16691                                  BAD_PATH: ; *
 16692                                  	;mov	ax,3
 16693                                  	mov	ax,error_path_not_found
 16694                                  	stc
 16695                                  	jmp	RENAME_POP
 16696                                  %endif
 16697                                  
 16698                                  SAVEDEST:
 16699 0000281E 16                      	push	ss
 16700 0000281F 07                      	pop	es
 16701                                  
 16702                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 16703 00002820 BF[5705]                	MOV	DI,NAME2
 16704 00002823 BE[4B05]                	MOV	SI,NAME1
 16705                                  
 16706 00002826 B90B00                  	MOV	CX,11
 16707 00002829 F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 16708 0000282B A1[C205]                	MOV	AX,[DIRSTART]
 16709 0000282E A3[6405]                	MOV	[DESTSTART],AX
 16710                                  BUILDDEST:
 16711 00002831 16                      	push	ss
 16712 00002832 07                      	pop	es			; needed due to JMP BUILDDEST below
 16713                                  
 16714                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 16715 00002833 BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 16716 00002836 BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 16717 00002839 BE[5705]                	MOV	SI,NAME2		; Raw dest
 16718                                  
 16719 0000283C B90B00                  	MOV	CX,11
 16720                                  
 16721                                  	; 17/05/2019 - Retro DOS v4.0
 16722                                  	
 16723                                  	; MSDOS 6.0
 16724 0000283F E81201                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 16725                                  
 16726                                  	; MSDOS 3.3
 16727                                  
 16728                                  ; 08/08/2018 - Retro DOS v3.0
 16729                                  ; MSDOS 6.0 
 16730                                  ;---------------------------------------------------------------------------
 16731                                  ;Procedure: NEW_RENAME
 16732                                  ;
 16733                                  ;Input: DS:SI -> raw string with ?
 16734                                  ;	ES:DI -> destination string
 16735                                  ;	DS:BX -> source string
 16736                                  ;Function: replace ? chars of raw string with chars in source string and
 16737                                  ;	   put in destination string
 16738                                  ;Output: ES:DI-> new string
 16739                                  ;---------------------------------------------------------------------------
 16740                                  ;
 16741                                  ;NEW_RENAME:
 16742                                  ;NEWNAM:
 16743                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 16744                                  ;	LODSB
 16745                                  ;	CMP	AL,"?"
 16746                                  ;	JNZ	short NOCHG
 16747                                  ;	MOV	AL,[BX] 		; Get replace char
 16748                                  ;NOCHG:
 16749                                  ;	STOSB
 16750                                  ;	INC	BX			; Next replace char
 16751                                  ;	LOOP	NEWNAM
 16752                                  ;	; MSDOS 6.0
 16753                                  ;	;retn
 16754                                  
 16755                                  	; MSDOS 3.3 & MSDOS 6.0
 16756                                  	;mov	byte [ATTRIB],16h
 16757 00002842 C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 16758 00002847 C606[7E05]FF            	MOV	byte [CREATING],0FFH
 16759 0000284C E8AB19                  	call	DEVNAME 		; Check if we built a device name
 16760 0000284F 73A1                    	JNC	short BAD_ACC
 16761 00002851 8B1E[6405]              	MOV	BX,[DESTSTART]
 16762 00002855 C42E[8A05]              	LES	BP,[THISDPB]
 16763 00002859 E88C16                  	call	SETDIRSRCH		; Reset search to start of dir
 16764 0000285C 7294                    	JC	short BAD_ACC 		; Screw up
 16765 0000285E E84615                  	call	FINDENTRY		; See if new name already exists
 16766 00002861 738F                    	JNC	short BAD_ACC 		; Error if found
 16767 00002863 803E[4A03]00            	CMP	byte [FAILERR],0
 16768 00002868 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 16769 0000286A A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 16770 0000286D 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 16771 00002871 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 16772                                  
 16773                                  	;mov	al,[RENAMEDMA+32]
 16774 00002873 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 16775 00002876 A810                    	TEST	AL,attr_directory ; 10h
 16776 00002878 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 16777                                  					; otherwise the . and .. entries get
 16778                                  					; wiped.
 16779 0000287A A2[6B05]                	MOV	[ATTRIB],AL
 16780 0000287D 8C1E[A005]              	MOV	[THISSFT+2],DS
 16781                                  
 16782                                  ;hkn; AUXSTACK is in DOSDATA
 16783                                  	;mov	si,[RENAMEDMA+145h]
 16784 00002881 BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 16785 00002884 8936[9E05]              	MOV	[THISSFT],SI
 16786                                  	;mov	word [SI+2],2
 16787 00002888 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 16788 0000288D 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 16789 0000288F E84621                  	call	RENAME_MAKE		; This is in mknode
 16790 00002892 7303                    	JNC	short GOT_DEST
 16791                                  BAD_ACCJ:
 16792 00002894 E95BFF                  	JMP	BAD_ACC
 16793                                  
 16794                                  GOT_DEST:
 16795 00002897 53                      	push	bx
 16796 00002898 C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 16797 0000289C E8F74A                  	call	ShareEnd		; we need to remove it.
 16798 0000289F 5B                      	pop	bx
 16799                                  
 16800                                  ; A zero length entry with the correct new name has now been made at
 16801                                  ;   [CURBUF+2]:BX.
 16802                                  
 16803 000028A0 C43E[E205]              	LES	DI,[CURBUF]
 16804                                  
 16805                                  	; MSDOS 6.0
 16806                                  	;test	byte [es:di+5],40h
 16807 000028A4 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16808                                  					;LB. if already dirty		  ;AN000;
 16809 000028A9 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 16810 000028AB E8CA32                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16811                                  	;or	byte [es:di+5],40h
 16812 000028AE 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16813                                  yesdirty1:
 16814 000028B3 89DF                    	MOV	DI,BX
 16815                                  	;add	di,11
 16816 000028B5 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 16817                                  
 16818                                  ;hkn; RENAMEDMA is in DOSDATA
 16819                                  	;mov	si,[RENAMEDMA+32]
 16820 000028B8 BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 16821                                  	;mov	cx,21
 16822 000028BB B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 16823 000028BE F3A4                    	REP	MOVSB
 16824 000028C0 E87B00                  	CALL	GET_SOURCE
 16825 000028C3 7276                    	JC	short RENAME_OVER
 16826 000028C5 89DF                    	MOV	DI,BX
 16827 000028C7 8E06[E405]              	MOV	ES,[CURBUF+2]
 16828 000028CB B0E5                    	MOV	AL,DIRFREE ; 0E5h
 16829 000028CD AA                      	STOSB				; "free" the source
 16830 000028CE EB13                    	JMP	SHORT DIRTY_IT
 16831                                  
 16832                                  SIMPLE_RENAME:
 16833 000028D0 E86B00                  	CALL	GET_SOURCE		; Get the source back
 16834 000028D3 7266                    	JC	short RENAME_OVER
 16835 000028D5 89DF                    	MOV	DI,BX
 16836 000028D7 8E06[E405]              	MOV	ES,[CURBUF+2]
 16837                                  
 16838                                  ;hkn; NAME1 is in DOSDATA
 16839 000028DB BE[4B05]                	MOV	SI,NAME1		; New Name
 16840 000028DE B90B00                  	MOV	CX,11
 16841 000028E1 F3A4                    	REP	MOVSB
 16842                                  DIRTY_IT:
 16843 000028E3 8B3E[E205]              	MOV	DI,[CURBUF]
 16844                                  
 16845                                  	; MSDOS 6.0
 16846 000028E7 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16847                                  					;LB. if already dirty		  ;AN000;
 16848 000028EC 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 16849 000028EE E88732                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16850                                  	
 16851 000028F1 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16852                                  
 16853                                  ;------------------------------------------------------------------------------
 16854                                  ; Check if the source is a directory of file. If directory rename it to the
 16855                                  ; the new name in the Fastopen cache buffer. If file name it has been
 16856                                  ; previously deleted.
 16857                                  ;------------------------------------------------------------------------------
 16858                                  
 16859                                  yesdirty2:
 16860                                  	; MSDOS 6.0
 16861 000028F6 56                      	PUSH	SI
 16862 000028F7 C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 16863 000028FB 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16864 000028FE F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 16865 00002902 7406                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 16866 00002904 E8FEFD                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 16867 00002907 5E                      	POP	SI
 16868 00002908 EB01                    	JMP	SHORT NOT_DIRTY1
 16869                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 16870 0000290A 5E                      	POP	SI
 16871                                  NOT_DIRTY1:				;;BN00X
 16872                                  NEXT_SOURCE:
 16873                                  ;hkn; RENAMEDMA is in DOSDATA
 16874 0000290B BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 16875                                  
 16876                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 16877                                  ; to enter it before going to RENAME_Next.
 16878                                  
 16879 0000290E E805EA                  	call	ECritDisk
 16880 00002911 C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 16881                                  				  ;  to FF when we made the prev new file).
 16882 00002916 E88705                  	call	RENAME_NEXT
 16883                                  
 16884                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 16885                                  ; we were before.
 16886                                  
 16887 00002919 7220                    	JC	short RENAME_OVER
 16888                                  
 16889                                  	;lea	si,[bx+26]
 16890 0000291B 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 16891 0000291E E861FD                  	call	REN_DEL_Check
 16892 00002921 7306                    	JNC	short REN_OK2
 16893 00002923 B82000                  	MOV	AX,error_sharing_violation ; 20h
 16894                                  jmp_to_rename_clean: ; 28/12/2022
 16895 00002926 E9CDFE                  	JMP	RENAME_CLEAN ; 10/08/2018
 16896                                  
 16897                                  ;------------------------------------------------------------------------------
 16898                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 16899                                  ; if directory, rename directory name in the Fastopen cache.
 16900                                  ;-----------------------------------------------------------------------------
 16901                                  
 16902                                  REN_OK2:
 16903                                  	; MSDOS 6.0
 16904                                  	;mov	al,[RERNAMEDMA+32]
 16905 00002929 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 16906                                  	;test	al,10h
 16907 0000292C A810                    	TEST	AL,attr_directory	;;BN00X directory
 16908 0000292E 7406                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 16909                                  	
 16910                                  	; MSDOS 3.3 & MSDOS 6.0
 16911 00002930 E8BDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 16912                                  jmp_to_builddest: ; 28/12/2022
 16913 00002933 E9FBFE                  	JMP	BUILDDEST		;;BN00X
 16914                                  
 16915                                  	; MSDOS 6.0
 16916                                  Ren_Directory:
 16917 00002936 E8CCFD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 16918                                  	;JMP	BUILDDEST
 16919                                  	; 28/12/2022
 16920 00002939 EBF8                    	jmp	short jmp_to_builddest
 16921                                  
 16922                                  RENAME_OVER:
 16923 0000293B F8                      	CLC
 16924                                  	;JMP	RENAME_CLEAN ; 10/08/2018
 16925                                  	; 28/12/2022
 16926 0000293C EBE8                    	jmp	short jmp_to_rename_clean
 16927                                  
 16928                                  ;----------------------------------------------------------------------------
 16929                                  ; Procedure: GET_SOURCE
 16930                                  ;
 16931                                  ; Inputs:
 16932                                  ;	RENAMEDMA has source info
 16933                                  ; Function:
 16934                                  ;	Re-find the source
 16935                                  ; Output:
 16936                                  ;	[CURBUF] set
 16937                                  ;	[CURBUF+2]:BX points to entry
 16938                                  ;	Carry set if error (currently user FAILed to I 24)
 16939                                  ; DS preserved, others destroyed
 16940                                  ;----------------------------------------------------------------------------
 16941                                  
 16942                                  GET_SOURCE:
 16943 0000293E 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 16944 00002942 C42E[8A05]              	LES	BP,[THISDPB]
 16945 00002946 E89F15                  	call	SETDIRSRCH
 16946 00002949 7214                    	JC	short gs_ret_label	; retc
 16947 0000294B E88B18                  	call	STARTSRCH
 16948 0000294E A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 16949                                  	;call	GETENT
 16950                                  	; 18/12/2022
 16951 00002951 E96515                  	jmp	GETENT
 16952                                  ;gs_ret_label:
 16953                                  	;retn
 16954                                  
 16955                                  ; MSDOS 6.0 
 16956                                  ;---------------------------------------------------------------------------
 16957                                  ;Procedure: NEW_RENAME
 16958                                  ;
 16959                                  ;Input: DS:SI -> raw string with ?
 16960                                  ;	ES:DI -> destination string
 16961                                  ;	DS:BX -> source string
 16962                                  ;Function: replace ? chars of raw string with chars in source string and
 16963                                  ;	   put in destination string
 16964                                  ;Output: ES:DI-> new string
 16965                                  ;---------------------------------------------------------------------------
 16966                                  
 16967                                  NEW_RENAME:
 16968                                  	; 17/05/2019 - Retro DOS v4.0
 16969                                  NEWNAM:
 16970                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 16971 00002954 AC                      	LODSB
 16972 00002955 3C3F                    	CMP	AL,"?" ; 3Fh
 16973 00002957 7502                    	JNZ	short NOCHG
 16974 00002959 8A07                    	MOV	AL,[BX] 		; Get replace char
 16975                                  NOCHG:
 16976 0000295B AA                      	STOSB
 16977 0000295C 43                      	INC	BX			; Next replace char
 16978 0000295D E2F5                    	LOOP	NEWNAM
 16979                                  	; MSDOS 6.0
 16980                                  gs_ret_label:	; 18/12/2022
 16981 0000295F C3                      	retn
 16982                                  
 16983                                  ;============================================================================
 16984                                  ; FINFO.ASM, MSDOS 6.0, 1991
 16985                                  ;============================================================================
 16986                                  ; 08/08/2018 - Retro DOS v3.0
 16987                                  ; 17/05/2019 - Retro DOS v4.0
 16988                                  
 16989                                  ;**	Low level routines for returning file information and setting file
 16990                                  ;	attributes
 16991                                  ;
 16992                                  ;	GET_FILE_INFO
 16993                                  ;	SET_FILE_ATTRIBUTE
 16994                                  ;
 16995                                  ;	Modification history:
 16996                                  ;
 16997                                  ;	    Created: ARR 30 March 1983
 16998                                  ;
 16999                                  ;	M025: Return access_denied if attempting to set
 17000                                  ;	      attribute of root directory.
 17001                                  ;
 17002                                  
 17003                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 17004                                  
 17005                                  ;---------------------------------------------------------------------------
 17006                                  ; Procedure Name : GET_FILE_INFO
 17007                                  ;
 17008                                  ; Inputs:
 17009                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17010                                  ;		terminated)
 17011                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17012                                  ;		( = -1 if current dir not involved, else
 17013                                  ;		 Points to first char after last "/" of current dir part)
 17014                                  ;	[THISCDS] Points to CDS being used
 17015                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17016                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17017                                  ; Function:
 17018                                  ;	Get Information about a file
 17019                                  ; Returns:
 17020                                  ;	CARRY CLEAR
 17021                                  ;	    AX = Attribute of file
 17022                                  ;	    CX = Time stamp of file
 17023                                  ;	    DX = Date stamp of file
 17024                                  ;	    BX:DI = Size of file (32 bit)
 17025                                  ;	CARRY SET
 17026                                  ;	    AX is error code
 17027                                  ;		error_file_not_found
 17028                                  ;			Last element of path not found
 17029                                  ;		error_path_not_found
 17030                                  ;			Bad path (not in curr dir part if present)
 17031                                  ;		error_bad_curr_dir
 17032                                  ;			Bad path in current directory part of path
 17033                                  ; DS preserved, others destroyed
 17034                                  ;---------------------------------------------------------------------------
 17035                                  
 17036                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17037                                  
 17038                                  GET_FILE_INFO:
 17039                                  
 17040                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 17041                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17042                                  
 17043 00002960 E8EFE8                  	call	TestNet
 17044 00002963 7306                    	JNC	short LOCAL_INFO
 17045                                  
 17046                                  ;IF NOT Installed
 17047                                  ;	transfer NET_GET_FILE_INFO
 17048                                  ;ELSE
 17049                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 17050                                  ;	INT	2FH
 17051                                  ;	return
 17052                                  
 17053 00002965 B80F11                  	mov     ax, 110Fh
 17054 00002968 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 17055                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17056                                  			; SDA CDS pointer -> current directory
 17057                                  			; Return: CF set on error, AX = file attributes
 17058 0000296A C3                      	retn
 17059                                  ;ENDIF
 17060                                  
 17061                                  LOCAL_INFO:
 17062 0000296B E8A8E9                  	call	ECritDisk
 17063 0000296E C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17064                                  	; MSDOS 3.3
 17065                                  	;call	GETPATH
 17066                                  	; MSDOS 6.0
 17067 00002973 E8D800                  	call	GET_FAST_PATH
 17068                                  	; MSDOS 3.3 & MSDOS 6.0
 17069 00002976 7312                    	JNC	short info_check_dev
 17070                                  NO_PATH:
 17071 00002978 750B                    	JNZ	short bad_path1
 17072 0000297A 08C9                    	OR	CL,CL
 17073 0000297C 7407                    	JZ	short bad_path1
 17074                                  info_no_file:
 17075 0000297E B80200                  	MOV	AX,error_file_not_found
 17076                                  BadRet:
 17077 00002981 F9                      	STC
 17078                                  JustRet:
 17079                                  	;call	LCritDisk
 17080                                  	;retn
 17081                                  	; 18/12/2022
 17082 00002982 E9ACE9                  	jmp	LCritDisk
 17083                                  
 17084                                  bad_path1:
 17085 00002985 B80300                  	MOV	AX,error_path_not_found
 17086 00002988 EBF7                    	jmp	short BadRet
 17087                                  
 17088                                  info_check_dev:
 17089 0000298A 08E4                    	OR	AH,AH
 17090 0000298C 78F0                    	JS	short info_no_file	; device
 17091                                  
 17092                                  	; MSDOS 6.0
 17093                                  ;SR;
 17094                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 17095                                  ;for a root dir
 17096                                  
 17097 0000298E 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 17098 00002993 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 17099                                  
 17100 00002995 30E4                    	xor	ah,ah
 17101 00002997 B010                    	mov	al,attr_directory ; 10h
 17102                                  	;clc
 17103                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17104                                  	; (DOSCODE:683Eh)
 17105                                  	; 16/12/2022
 17106                                  	;clc
 17107 00002999 EBE7                    	jmp	short JustRet
 17108                                  
 17109                                  not_root:
 17110                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17111 0000299B 1E                      	PUSH	DS
 17112 0000299C 8E1E[E405]              	MOV	DS,[CURBUF+2]
 17113 000029A0 89DE                    	MOV	SI,BX
 17114 000029A2 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 17115 000029A4 89DF                    	MOV	DI,BX
 17116                                  	;mov	cx,[si+16h]
 17117 000029A6 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 17118                                  	;mov	dx,[si+18h]
 17119 000029A9 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 17120 000029AC 30E4                    	XOR	AH,AH
 17121                                  	;mov	al,[si+0Bh]
 17122 000029AE 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 17123                                  	;test	al,10h
 17124 000029B1 A810                    	TEST	AL,attr_directory
 17125 000029B3 7506                    	JNZ	short NO_SIZE
 17126                                  	;mov	di,[si+1Ch]
 17127 000029B5 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 17128                                  	;mov	bx,[si+1Eh]
 17129 000029B8 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 17130                                  NO_SIZE:
 17131 000029BB 1F                      	POP	DS
 17132                                  	;CLC
 17133                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17134                                  	; (DOSCODE:6864h)
 17135                                  	; 16/12/2022
 17136                                  	;clc
 17137 000029BC EBC4                    	jmp	short JustRet
 17138                                  
 17139                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17140                                  ;-------------------------------------------------------------------------------
 17141                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17142                                  ; Inputs:
 17143                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17144                                  ;		terminated)
 17145                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17146                                  ;		( = -1 if current dir not involved, else
 17147                                  ;		 Points to first char after last "/" of current dir part)
 17148                                  ;	[THISCDS] Points to CDS being used
 17149                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17150                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17151                                  ;	AX is new attributes to give to file
 17152                                  ; Function:
 17153                                  ;	Set File Attributes
 17154                                  ; Returns:
 17155                                  ;	CARRY CLEAR
 17156                                  ;	    No error
 17157                                  ;	CARRY SET
 17158                                  ;	    AX is error code
 17159                                  ;		error_file_not_found
 17160                                  ;			Last element of path not found
 17161                                  ;		error_path_not_found
 17162                                  ;			Bad path (not in curr dir part if present)
 17163                                  ;		error_bad_curr_dir
 17164                                  ;			Bad path in current directory part of path
 17165                                  ;		error_access_denied
 17166                                  ;			Attempt to set an attribute which cannot be set
 17167                                  ;			(attr_directory, attr_volume_ID)
 17168                                  ;		error_sharing_violation
 17169                                  ;			Sharing mode of file did not allow the change
 17170                                  ;			(this request requires exclusive write/read access)
 17171                                  ;			(INT 24H generated)
 17172                                  ; DS preserved, others destroyed
 17173                                  ;----------------------------------------------------------------------------
 17174                                  
 17175                                  SET_FILE_ATTRIBUTE:
 17176                                  
 17177                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17178                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17179                                  
 17180 000029BE A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17181 000029C1 7414                    	JZ	short set_look
 17182                                  _BAD_ACC:
 17183 000029C3 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17184 000029C8 C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17185 000029CD C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17186 000029D2 B80500                  	MOV	AX,error_access_denied ; 5
 17187 000029D5 F9                      	STC
 17188 000029D6 C3                      	retn
 17189                                  
 17190                                  set_look:
 17191 000029D7 E878E8                  	call	TestNet
 17192 000029DA 7308                    	JNC	short LOCAL_SET
 17193                                  
 17194                                  ;IF NOT Installed
 17195                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17196                                  ;ELSE
 17197 000029DC 50                      	PUSH	AX
 17198                                  	
 17199                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17200                                  	;INT	2FH
 17201                                  
 17202 000029DD B80E11                  	mov     ax, 110Eh
 17203 000029E0 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17204                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17205                                  			; SDA CDS pointer -> current directory
 17206                                  			; STACK: WORD new file attributes
 17207                                  			; Return: CF set on error
 17208                                  
 17209 000029E2 5B                      	POP	BX			; clean stack
 17210 000029E3 C3                      	retn
 17211                                  ;ENDIF
 17212                                  
 17213                                  LOCAL_SET:
 17214 000029E4 E82FE9                  	call	ECritDisk
 17215 000029E7 50                      	PUSH	AX			; Save new attributes
 17216 000029E8 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17217 000029ED E85515                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17218 000029F0 7303                    	JNC	short set_check_device
 17219 000029F2 5B                      	POP	BX			; Clean stack (don't zap AX)
 17220 000029F3 EB83                    	JMP	short NO_PATH
 17221                                  
 17222                                  set_check_device:
 17223 000029F5 08E4                    	OR	AH,AH
 17224 000029F7 7906                    	JNS	short set_check_share
 17225 000029F9 58                      	POP	AX
 17226 000029FA E834E9                  	call	LCritDisk
 17227 000029FD EBC4                    	JMP	short _BAD_ACC 		; device
 17228                                  
 17229                                  set_check_share:
 17230 000029FF 58                      	POP	AX			; Get new attributes
 17231                                  
 17232                                  	; MSDOS 6.0
 17233 00002A00 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17234 00002A05 740A                    	je	short cannot_set_root	; M025: Y: return error
 17235                                  
 17236                                  	; MSDOS 3.3 & MSDOS 6.0
 17237 00002A07 E878FC                  	call	REN_DEL_Check
 17238 00002A0A 730B                    	JNC	short set_do
 17239 00002A0C B82000                  	MOV	AX,error_sharing_violation ; 32
 17240 00002A0F EB3A                    	jmp	short OK_BYE
 17241                                  
 17242                                  	; MSDOS 6.0
 17243                                  cannot_set_root:			; M025:
 17244 00002A11 B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17245 00002A14 F9                      	stc				; M025: to set attr. of root
 17246 00002A15 EB34                    	jmp	short OK_BYE		; M025:
 17247                                  
 17248                                  set_do:
 17249                                  	; MSDOS 3.3 & MSDOS 6.0
 17250 00002A17 C43E[E205]              	LES	DI,[CURBUF]
 17251 00002A1B 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17252 00002A20 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17253                                  
 17254                                  	; MSDOS 6.0
 17255 00002A24 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17256                                  					;LB. if already dirty		  ;AN000;
 17257 00002A29 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17258 00002A2B E84A31                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17259                                  	
 17260 00002A2E 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17261                                  yesdirty3:
 17262 00002A33 A0[7605]                	MOV	AL,[THISDRV]
 17263                                  ;;;; 10/1/86 F.C update fastopen cache
 17264 00002A36 52                      	PUSH	DX
 17265 00002A37 57                      	PUSH	DI
 17266 00002A38 B400                    	MOV	AH,0		  ; dir entry update
 17267 00002A3A 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17268 00002A3C 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17269 00002A3E E8DEFC                  	call	FastOpen_Update
 17270 00002A41 5F                      	POP	DI
 17271 00002A42 5A                      	POP	DX
 17272                                  ;;;; 9/11/86 F.C update fastopen cache
 17273 00002A43 E82D30                  	call	FLUSHBUF
 17274 00002A46 7303                    	JNC	short OK_BYE
 17275 00002A48 B80200                  	MOV	AX,error_file_not_found
 17276                                  OK_BYE:
 17277                                  	;call	LCritDisk
 17278                                  	;retn
 17279                                  	; 16/12/2022
 17280 00002A4B E9E3E8                  	jmp	LCritDisk
 17281                                  
 17282                                  	; 17/05/2019 - Retro DOS v4.0
 17283                                  
 17284                                  	; MSDOS 6.0
 17285                                  GET_FAST_PATH:
 17286                                  ;hkn; use SS override for FastOpenFlg
 17287 00002A4E 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17288                                  					;FO. trigger fastopen	;AN000;
 17289 00002A54 E8EE14                  	call	GETPATH
 17290 00002A57 9C                      	PUSHF			 	;FO.			;AN000;
 17291 00002A58 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17292                                  					;FO. clear all fastopen flags ;AN000;
 17293 00002A5E 9D                      	POPF				;FO.			;AN000;
 17294 00002A5F C3                      	retn
 17295                                  
 17296                                  ;============================================================================
 17297                                  ; DUP.ASM, MSDOS 6.0, 1991
 17298                                  ;============================================================================
 17299                                  ; 08/08/2018 - Retro DOS v3.0
 17300                                  ; 17/05/2019 - Retro DOS v4.0
 17301                                  
 17302                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17303                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17304                                  ;
 17305                                  ;	DOS_DUP
 17306                                  ;
 17307                                  ;	Modification history:
 17308                                  ;
 17309                                  ;	  Created: ARR 30 March 1983
 17310                                  
 17311                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17312                                  ;---------------------------------------------------------------------------
 17313                                  ; Procedure Name : DOS_DUP
 17314                                  ;
 17315                                  ; Inputs:
 17316                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17317                                  ;		(a non net SFT is OK, in this case the ref
 17318                                  ;		 count is simply incremented)
 17319                                  ; Function:
 17320                                  ;	Signal to the devices that a logical open is occurring
 17321                                  ; Returns:
 17322                                  ;	ES:DI point to SFT
 17323                                  ;    Carry clear
 17324                                  ;	SFT ref_count is incremented
 17325                                  ; Registers modified: None.
 17326                                  ; NOTE:
 17327                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17328                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17329                                  ;	that time.
 17330                                  ;---------------------------------------------------------------------------
 17331                                  
 17332                                  DOS_DUP:
 17333                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17334                                  
 17335                                  	; MSDOS 6.0
 17336 00002A60 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17337 00002A65 26C43E[9E05]            	les	di,[es:THISSFT]
 17338                                  
 17339                                  	;Entry	Dos_Dup_Direct
 17340                                  DOS_Dup_Direct:
 17341 00002A6A E8FEE7                  	call	IsSFTNet
 17342 00002A6D 7503                    	JNZ	short DO_INC
 17343 00002A6F E8A11B                  	call	DEV_OPEN_SFT
 17344                                  DO_INC:
 17345                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17346 00002A72 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17347                                  					;   we're in big trouble anyway)
 17348 00002A75 C3                      	retn
 17349                                  
 17350                                  ;============================================================================
 17351                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17352                                  ;============================================================================
 17353                                  ; 08/08/2018 - Retro DOS v3.0
 17354                                  ; 18/05/2019 - Retro DOS v4.0
 17355                                  
 17356                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17357                                  ;NAME	DOS_CREATE
 17358                                  ;----------------------------------------------------------------------------
 17359                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17360                                  ;
 17361                                  ;	DOS_CREATE
 17362                                  ;	DOS_CREATE_NEW
 17363                                  ;	SET_MKND_ERR
 17364                                  ;	SET_Media_ID
 17365                                  ;	SET_EXT_Mode
 17366                                  ;
 17367                                  ;	Revision history:
 17368                                  ;
 17369                                  ;	    A000 version 4.00	  Jan. 1988
 17370                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17371                                  
 17372                                  ;Installed = TRUE
 17373                                  
 17374                                  ;	i_need	THISSFT,DWORD
 17375                                  ;	i_need	THISCDS,DWORD
 17376                                  ;	I_need	EXTERR,WORD
 17377                                  ;	I_Need	ExtErr_locus,BYTE
 17378                                  ;	I_need	JShare,DWORD
 17379                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17380                                  ;	I_need	SATTRIB,BYTE
 17381                                  ;	I_need	CALLVIDM,DWORD
 17382                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17383                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17384                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17385                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17386                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17387                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17388                                  
 17389                                  ;***	DOS_CREATE - Create a File
 17390                                  ;----------------------------------------------------------------------------
 17391                                  ;	DOS_Create is called to create the specified file, truncating
 17392                                  ;	the old one if it exists.
 17393                                  ;
 17394                                  ;	ENTRY	AX is Attribute to create
 17395                                  ;		(ds) = DOSDATA
 17396                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17397                                  ;			terminated)
 17398                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17399                                  ;			( = -1 if current dir not involved, else
 17400                                  ;			 Points to first char after last "/" of current dir part)
 17401                                  ;		[THISCDS] Points to CDS being used
 17402                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17403                                  ;		[THISSFT] Points to SFT to fill in if file created
 17404                                  ;			(sf_mode field set so that FCB may be detected)
 17405                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17406                                  ;
 17407                                  ;	EXIT	sf_ref_count is NOT altered
 17408                                  ;		CARRY CLEAR
 17409                                  ;		    THISSFT filled in.
 17410                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17411                                  ;		CARRY SET
 17412                                  ;		    AX is error code
 17413                                  ;			error_path_not_found
 17414                                  ;				Bad path (not in curr dir part if present)
 17415                                  ;			error_bad_curr_dir
 17416                                  ;				Bad path in current directory part of path
 17417                                  ;			error_access_denied
 17418                                  ;				Attempt to re-create read only file , or
 17419                                  ;				create a second volume id or create a dir
 17420                                  ;			error_sharing_violation
 17421                                  ;				The sharing mode was correct but not allowed
 17422                                  ;				generates an INT 24
 17423                                  ;	USES	all but DS
 17424                                  ;----------------------------------------------------------------------------
 17425                                  
 17426                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17427                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17428                                  
 17429                                  DOS_CREATE:
 17430                                  	; 18/05/2019 - Retro DOS v4.0
 17431                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17432                                  
 17433                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17434                                  ;hkn; this point.
 17435                                  
 17436 00002A76 30E4                    	XOR	AH,AH		; Truncate is OK
 17437                                  
 17438                                  ;	Enter here from Dos_Create_New
 17439                                  ;
 17440                                  ;	(ah) = 0 iff truncate OK
 17441                                  
 17442                                  Create_inter:
 17443 00002A78 A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17444                                  				; Mask out any meaningless bits
 17445 00002A7A 7511                    	JNZ	short AttErr
 17446 00002A7C A808                    	TEST	AL,attr_volume_id
 17447 00002A7E 7407                    	JZ	short NoReset
 17448                                  	
 17449                                  	; MSDOS 6.0
 17450                                  	; 16/12/2022
 17451 00002A80 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17452                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17453                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17454                                  	
 17455 00002A85 B008                    	MOV	AL,attr_volume_id ; 8
 17456                                  NoReset:
 17457 00002A87 0C20                    	OR	AL,attr_archive ; File changed  ; 20 h
 17458 00002A89 A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17459 00002A8B 740A                    	JZ	short ATT_OK
 17460                                  AttErr:
 17461 00002A8D B80500                  	MOV	AX,5		; Attribute problem
 17462 00002A90 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17463 00002A95 EB66                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17464                                  				   ;	attr_device to be set.
 17465                                  ATT_OK:
 17466 00002A97 C43E[9E05]              	LES	DI,[THISSFT]
 17467 00002A9B 06                      	PUSH	ES
 17468 00002A9C C436[A205]              	LES	SI,[THISCDS]
 17469 00002AA0 83FEFF                  	CMP	SI,-1
 17470 00002AA3 751D                    	JNE	short TEST_RE_NET
 17471                                  
 17472                                  ;	No CDS, it must be redirected.
 17473                                  
 17474 00002AA5 07                      	POP	ES
 17475                                  
 17476                                  	; MSDOS 6.0
 17477                                  ;Extended open hooks
 17478                                  	;test	byte [EXTOPEN_ON],1
 17479 00002AA6 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17480 00002AAB 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17481                                  IFS_extopen:				    ;AN000;EO.
 17482 00002AAD 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17483                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17484 00002AAE B82E11                  	mov	ax,112Eh
 17485 00002AB1 CD2F                    	INT	2FH			    ;AN000;EO.
 17486 00002AB3 5B                      	POP	BX			    ;AN000;EO. trash bx
 17487 00002AB4 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17488 00002AB9 C3                      	retn				    ;AN000;EO.
 17489                                  NOEXTOP:				    ;AN000;
 17490                                  ;Extended open hooks
 17491                                  
 17492                                  ;IF NOT Installed
 17493                                  ;	transfer NET_SEQ_CREATE
 17494                                  ;ELSE
 17495 00002ABA 50                      	PUSH	AX
 17496                                  
 17497                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17498                                  	;INT	2FH
 17499                                  
 17500 00002ABB B81811                  	mov     ax,1118h
 17501 00002ABE CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17502                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17503                                  			; SDA first filename pointer -> fully-qualified name of file
 17504                                  			; STACK: WORD file creation mode???
 17505                                  
 17506 00002AC0 5B                      	POP	BX			; BX is trashed anyway
 17507 00002AC1 C3                      	retn
 17508                                  ;ENDIF
 17509                                  
 17510                                  ;	We have a CDS. See if it's network
 17511                                  
 17512                                  TEST_RE_NET:
 17513                                  	;;test	word [es:si+43h],8000h
 17514                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17515                                  	; 07/12/2022
 17516                                  	;test	byte [es:si+44h],80h
 17517                                  	; 17/12/2022
 17518 00002AC2 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17519 00002AC7 07                      	POP	ES
 17520 00002AC8 7419                    	JZ	short LOCAL_CREATE
 17521                                  
 17522                                  	; MSDOS 6.0
 17523 00002ACA E8BF00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17524 00002ACD 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17525                                  	;;or	word [es:di+2],2
 17526                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17527                                  	; 17/12/2022
 17528 00002ACF 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17529                                  
 17530                                  ;Extended open hooks
 17531                                  dochk:
 17532 00002AD4 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17533 00002AD9 75D2                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17534                                  ;Extended open hooks
 17535                                  
 17536                                  ;IF NOT Installed
 17537                                  ;	transfer NET_CREATE
 17538                                  ;ELSE
 17539 00002ADB 50                      	PUSH	AX
 17540                                  	
 17541                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17542                                  	;INT	2FH
 17543                                  	
 17544 00002ADC B81711                  	mov     ax,1117h
 17545 00002ADF CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17546                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17547                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17548                                  			; SDA CDS pointer -> current directory
 17549                                  			; Return: CF set on error
 17550                                  
 17551 00002AE1 5B                      	POP	BX			; BX is trashed anyway
 17552                                  ;nomore:
 17553 00002AE2 C3                      	retn
 17554                                  ;ENDIF
 17555                                  
 17556                                  ;**	It's a local create. We have a local CDS for it.
 17557                                  
 17558                                  LOCAL_CREATE:
 17559                                  	; MSDOS 6.0
 17560 00002AE3 E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17561 00002AE6 7205                    	JC	short setdone	;AN000;EO.
 17562                                  	
 17563                                  	; MSDOS 3.3 & MSDOS 6.0
 17564                                  	; 17/12/2022
 17565                                  	;;or	word [es:di+2],2
 17566                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17567                                  	;or	byte [es:di+2],2
 17568 00002AE8 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17569                                  setdone:
 17570 00002AED E826E8                  	call	ECritDisk
 17571 00002AF0 E8BF1E                  	call	MakeNode
 17572 00002AF3 7317                    	JNC	short Create_ok
 17573 00002AF5 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17574 00002AFA E834E8                  	call	LCritDisk
 17575                                  
 17576                                  	;entry	SET_MKND_ERR
 17577                                  SET_MKND_ERR:
 17578                                  
 17579                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 17580                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 17581                                  
 17582                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 17583 00002AFD BB[042B]                	MOV     BX,CRTERRTAB
 17584                                  	;XLAT  ; MSDOS 3.3
 17585                                  	; 18/05/2019 - Retro DOS v4.0
 17586 00002B00 2E                      	CS
 17587 00002B01 D7                      	XLAT
 17588                                  CreatBadRet:
 17589 00002B02 F9                      	STC
 17590 00002B03 C3                      	retn
 17591                                  
 17592                                  ; 13/05/2019 - Retro DOS v4.0
 17593                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 17594                                  ; ---------------------------------------------------------------------------
 17595                                  
 17596                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 17597                                  
 17598                                  ; 17/07/2018 - Retro DOS v3.0
 17599                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 17600                                  
 17601                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 17602                                  ;	db	0,5,52h,50h,3,5,20h
 17603                                  
 17604                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 17605                                  ;	db	0,5,52h,50h,3,5,20h,2
 17606                                  
 17607                                  ; 08/08/2018
 17608                                  
 17609                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 17610 00002B04 00                      	DB	0			; none
 17611 00002B05 05                      	DB	error_access_denied	; MakeNode error 1
 17612 00002B06 52                      	DB	error_cannot_make	; MakeNode error 2
 17613 00002B07 50                      	DB	error_file_exists	; MakeNode error 3
 17614 00002B08 03                      	DB	error_path_not_found	; MakeNode error 4
 17615 00002B09 05                      	DB	error_access_denied	; MakeNode error 5
 17616 00002B0A 20                      	DB	error_sharing_violation ; MakeNode error 6
 17617                                  	; MSDOS 6.0
 17618 00002B0B 02                      	DB	error_file_not_found	; MakeNode error 7
 17619                                  
 17620                                  ; ---------------------------------------------------------------------------
 17621                                  
 17622                                  ; We have just created a new file. This results in the truncation of old
 17623                                  ; files. We must inform the sharer to slash all the open SFT's for this
 17624                                  ; file to the current size.
 17625                                  
 17626                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 17627                                  ; drive number to force a Build BPB after Media Check.
 17628                                  
 17629                                  ;;; FASTOPEN 8/29/86
 17630                                  Create_ok:
 17631 00002B0C E8E1FB                  	call	FastOpen_Delete
 17632                                  ;;; FASTOPEN 8/29/86
 17633 00002B0F A0[6D05]                	mov	al,[SATTRIB]
 17634 00002B12 A808                    	test	al,attr_volume_id
 17635 00002B14 741C                    	jz	short NoVolLabel
 17636 00002B16 C43E[A205]              	LES	DI,[THISCDS]
 17637                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 17638 00002B1A 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 17639 00002B1D 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 17640 00002B20 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 17641                                  	
 17642                                  	; 18/05/2019 - Retro DOS v4.0
 17643                                  
 17644                                  	; MSDOS 6.0
 17645 00002B24 B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 17646 00002B26 E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 17647                                  	
 17648 00002B29 E8EAE7                  	call	ECritDisk
 17649 00002B2C E8CB2B                  	call	FATREAD_CDS		; force a media check
 17650 00002B2F E8FFE7                  	call	LCritDisk
 17651                                  
 17652                                  NoVolLabel:
 17653 00002B32 B80200                  	MOV	ax,2
 17654 00002B35 C43E[9E05]              	LES	DI,[THISSFT]
 17655                                  ;if installed
 17656                                  	;call	JShare + 14 * 4
 17657 00002B39 FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 17658                                  ;else
 17659                                  ;	Call	ShSU
 17660                                  ;endif
 17661 00002B3D E8F1E7                  	call	LCritDisk
 17662 00002B40 E94901                  	jmp	SET_SFT_MODE
 17663                                  
 17664                                  ;---------------------------------------------------------------------------
 17665                                  ; Procedure Name : Dos_Create_New
 17666                                  ;
 17667                                  ; Inputs:
 17668                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17669                                  ;		terminated)
 17670                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17671                                  ;		( = -1 if current dir not involved, else
 17672                                  ;		 Points to first char after last "/" of current dir part)
 17673                                  ;	[THISCDS] Points to CDS being used
 17674                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17675                                  ;	[THISSFT] Points to SFT to fill in if file created
 17676                                  ;		(sf_mode field set so that FCB may be detected)
 17677                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17678                                  ;	AX is Attribute to create
 17679                                  ; Function:
 17680                                  ;	Try to create the specified file truncating an old one that exists
 17681                                  ; Outputs:
 17682                                  ;	sf_ref_count is NOT altered
 17683                                  ;	CARRY CLEAR
 17684                                  ;	    THISSFT filled in.
 17685                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 17686                                  ;	CARRY SET
 17687                                  ;	    AX is error code
 17688                                  ;		error_path_not_found
 17689                                  ;			Bad path (not in curr dir part if present)
 17690                                  ;		error_bad_curr_dir
 17691                                  ;			Bad path in current directory part of path
 17692                                  ;		error_access_denied
 17693                                  ;			Create a second volume id or create a dir
 17694                                  ;		error_file_exists
 17695                                  ;			Already a file by this name
 17696                                  ; DS preserved, others destroyed
 17697                                  ;---------------------------------------------------------------------------
 17698                                  
 17699                                  DOS_Create_New:
 17700 00002B43 B401                    	MOV	AH,1		; Truncate is NOT OK
 17701 00002B45 E930FF                  	JMP	Create_inter
 17702                                  
 17703                                  ; MSDOS 6.0
 17704                                  ;---------------------------------------------------------------------------
 17705                                  ; Procedure Name : Set_Media_ID
 17706                                  ;
 17707                                  ; Inputs:
 17708                                  ;	NAME1= Volume ID
 17709                                  ;	BH= 0, delete volume id
 17710                                  ;	    1, set new volume id
 17711                                  ;	DS= DOSGROUP
 17712                                  ; Function:
 17713                                  ;	Set Volume ID to DOS 4.00 Boot record.
 17714                                  ; Outputs:
 17715                                  ;	CARRY CLEAR
 17716                                  ;	    volume id set
 17717                                  ;	CARRY SET
 17718                                  ;	    AX is error code
 17719                                  ;---------------------------------------------------------------------------
 17720                                  
 17721                                  	; 18/05/2019 - Retro DOS v4.0
 17722                                  Set_Media_ID:
 17723 00002B48 50                      	PUSH	AX		;AN000;;>32mb
 17724 00002B49 06                      	PUSH	ES		;AN000;;>32mb
 17725 00002B4A 57                      	PUSH	DI		;AN000;;>32mb
 17726                                  
 17727 00002B4B FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 17728 00002B4D 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 17729 00002B4F B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 17730 00002B51 B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 17731                                  
 17732                                  ;hkn; PACKET_TEMP is in DOSDATA
 17733 00002B54 BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 17734                                  
 17735 00002B57 53                      	PUSH	BX		;AN000;;>32mb
 17736 00002B58 52                      	PUSH	DX		;AN000;;>32mb
 17737 00002B59 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17738                                  
 17739                                  	;invoke	$IOCTL		;AN000;;>32mb
 17740 00002B5B E83EF7                  	call	_$IOCTL	
 17741                                  
 17742 00002B5E 5A                      	POP	DX		;AN000;;>32mb
 17743 00002B5F 5B                      	POP	BX		;AN000;;>32mb
 17744 00002B60 7224                    	JC	short geterr	;AN000;;>32mb
 17745                                  
 17746 00002B62 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 17747 00002B64 7405                    	JZ	short NoName	;AN000;>32mb yes
 17748                                  
 17749                                  ;hkn; NAME1 is in DOSDATA
 17750 00002B66 BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 17751                                  
 17752 00002B69 EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 17753                                  NoName: 			;AN000;
 17754                                  
 17755                                  ;hkn; NO_NAME_ID is in DOSDATA
 17756 00002B6B BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 17757                                  
 17758                                  doset:				;AN000;
 17759 00002B6E 89D7                    	MOV	DI,DX		;AN000;;>32mb
 17760                                  	;add	di,6
 17761 00002B70 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 17762                                  
 17763                                  ;hkn; ES & DS must point to SS
 17764                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 17765 00002B73 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 17766                                  
 17767 00002B74 1F                      	POP	DS		;AN000;;>32mb
 17768                                  
 17769                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 17770 00002B75 16                      	PUSH	SS		;AN000;;>32mb
 17771                                  
 17772 00002B76 07                      	POP	ES		;AN000;;>32mb
 17773 00002B77 B90B00                  	MOV	CX,11		;AN000;;>32mb
 17774 00002B7A F3A4                    	REP	MOVSB		;AN000;;>32mb
 17775 00002B7C B94608                  	MOV	CX,0846H	;AN001;;>32mb
 17776 00002B7F B00D                    	MOV	AL,0DH		;AN000;;>32mb
 17777 00002B81 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17778                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 17779 00002B83 E816F7                  	call	_$IOCTL	
 17780                                  geterr: 			;AN000;
 17781                                  ;hkn;	PUSH	CS		;AN000;>32mb
 17782 00002B86 16                      	PUSH	SS		;AN000;>32mb
 17783                                  
 17784 00002B87 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 17785                                  
 17786 00002B88 5F                      	POP	DI		;AN000;;>32mb
 17787 00002B89 07                      	POP	ES		;AN000;;>32mb
 17788 00002B8A 58                      	POP	AX		;AN000;;>32mb
 17789 00002B8B C3                      	retn			;AN000;>32mb
 17790                                  
 17791                                  ; MSDOS 6.0
 17792                                  ;---------------------------------------------------------------------------
 17793                                  ; Procedure Name : Set_EXT_mode
 17794                                  ;
 17795                                  ; Inputs:
 17796                                  ;	[EXTOPEN_ON]= flag for extended open
 17797                                  ;	SAVE_BX= mode specified in Extended Open
 17798                                  ; Function:
 17799                                  ;	Set mode in ThisSFT
 17800                                  ; Outputs:
 17801                                  ;	carry set,mode is set if from Extended Open
 17802                                  ;	carry clear, mode not set yet
 17803                                  ;---------------------------------------------------------------------------
 17804                                  
 17805                                  ; 13/05/2019 - Retro DOS v4.0
 17806                                  
 17807                                  Set_EXT_mode:
 17808                                  
 17809                                  ;hkn; SS override
 17810 00002B8C 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17811 00002B92 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 17812 00002B94 50                      	PUSH	AX			    ;AN000;EO.
 17813                                  
 17814                                  ;hkn; SS override
 17815 00002B95 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 17816                                  	;or	[es:di+2],ax
 17817 00002B99 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 17818 00002B9D 58                      	POP	AX			    ;AN000;EO.
 17819 00002B9E F9                      	STC				    ;AN000;EO.
 17820                                  NOTEX:					    ;AN000;
 17821 00002B9F C3                      	retn				    ;AN000;EO.
 17822                                  
 17823                                  ;============================================================================
 17824                                  ; OPEN.ASM, MSDOS 6.0, 1991
 17825                                  ;============================================================================
 17826                                  ; 08/08/2018 - Retro DOS v3.0
 17827                                  ; 18/05/2019 - Retro DOS v4.0
 17828                                  
 17829                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 17830                                  ;	NAME	DOS_OPEN
 17831                                  
 17832                                  ;**	OPEN.ASM - File Open
 17833                                  ;----------------------------------------------------------------------------
 17834                                  ;	Low level routines for openning a file from a file spec.
 17835                                  ;	Also misc routines for sharing errors
 17836                                  ;
 17837                                  ;	DOS_Open
 17838                                  ;	Check_Access_AX
 17839                                  ;	SHARE_ERROR
 17840                                  ;	SET_SFT_MODE
 17841                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 17842                                  ;
 17843                                  ;	Revision history:
 17844                                  ;
 17845                                  ;	    Created: ARR 30 March 1983
 17846                                  ;	    A000	version 4.00   Jan. 1988
 17847                                  ;
 17848                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 17849                                  ; 	       remote extended opens and not save_cx.
 17850                                  ;
 17851                                  ;	M035 - if open made from exec then we must set the appropriate bits
 17852                                  ;	       on the stack before calling off to the redir.
 17853                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 17854                                  ;	       to handle open from exec. In this case set the appropriate bit
 17855                                  ;	       else do not.
 17856                                  ;----------------------------------------------------------------------------	
 17857                                  
 17858                                  ;Installed = TRUE
 17859                                  
 17860                                  ;	i_need	NoSetDir,BYTE
 17861                                  ;	i_need	THISSFT,DWORD
 17862                                  ;	i_need	THISCDS,DWORD
 17863                                  ;	i_need	CURBUF,DWORD
 17864                                  ;	i_need	CurrentPDB,WORD
 17865                                  ;	i_need	CURR_DIR_END,WORD
 17866                                  ;	I_need	RetryCount,WORD
 17867                                  ;	I_need	Open_Access,BYTE
 17868                                  ;	I_need	fSharing,BYTE
 17869                                  ;	i_need	JShare,DWORD
 17870                                  ;	I_need	FastOpenFlg,byte
 17871                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 17872                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 17873                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 17874                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 17875                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 17876                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 17877                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 17878                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 17879                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 17880                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 17881                                  ;	I_need	SAVE_BX,WORD			  ;M034
 17882                                  ;
 17883                                  ;	I_need	DOS_FLAG,BYTE
 17884                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 17885                                  
 17886                                  ;Break	<DOS_Open - internal file access>
 17887                                  ;---------------------------------------------------------------------------
 17888                                  ; Procedure Name : DOS_Open
 17889                                  ;
 17890                                  ; Inputs:
 17891                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17892                                  ;		terminated)
 17893                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17894                                  ;		( = -1 if current dir not involved, else
 17895                                  ;		 Points to first char after last "/" of current dir part)
 17896                                  ;	[THISCDS] Points to CDS being used
 17897                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17898                                  ;	[THISSFT] Points to SFT to fill in if file found
 17899                                  ;		(sf_mode field set so that FCB may be detected)
 17900                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17901                                  ;	AX is Access and Sharing mode
 17902                                  ;	  High NIBBLE of AL (Sharing Mode)
 17903                                  ;		sharing_compat	   file is opened in compatibility mode
 17904                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 17905                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 17906                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 17907                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 17908                                  ;	  Low NIBBLE of AL (Access Mode)
 17909                                  ;		open_for_read	file is opened for reading
 17910                                  ;		open_for_write	file is opened for writing
 17911                                  ;		open_for_both	file is opened for both reading and writing.
 17912                                  ;
 17913                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 17914                                  ;		(not checked)
 17915                                  ; Function:
 17916                                  ;	Try to open the specified file
 17917                                  ; Outputs:
 17918                                  ;	sf_ref_count is NOT altered
 17919                                  ;	CARRY CLEAR
 17920                                  ;	    THISSFT filled in.
 17921                                  ;	CARRY SET
 17922                                  ;	    AX is error code
 17923                                  ;		error_file_not_found
 17924                                  ;			Last element of path not found
 17925                                  ;		error_path_not_found
 17926                                  ;			Bad path (not in curr dir part if present)
 17927                                  ;		error_bad_curr_dir
 17928                                  ;			Bad path in current directory part of path
 17929                                  ;		error_invalid_access
 17930                                  ;			Bad sharing mode or bad access mode or bad combination
 17931                                  ;		error_access_denied
 17932                                  ;			Attempt to open read only file for writting, or
 17933                                  ;			open a directory
 17934                                  ;		error_sharing_violation
 17935                                  ;			The sharing mode was correct but not allowed
 17936                                  ;			generates an INT 24 on compatibility mode SFTs
 17937                                  ; DS preserved, others destroyed
 17938                                  ;----------------------------------------------------------------------------
 17939                                  
 17940                                  ; 18/05/2019 - Retro DOS v4.0
 17941                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 17942                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17943                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 17944                                  
 17945                                  DOS_OPEN:
 17946                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 17947                                  
 17948 00002BA0 C606[4C03]00            	MOV	byte [NoSetDir],0
 17949 00002BA5 E83301                  	CALL	Check_Access_AX
 17950 00002BA8 722B                    	JC	short do_ret_label	    ; retc
 17951                                  
 17952 00002BAA C43E[9E05]              	LES	DI,[THISSFT]
 17953 00002BAE 30E4                    	XOR	AH,AH
 17954                                  
 17955                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 17956                                  
 17957 00002BB0 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 17958 00002BB4 06                      	PUSH	ES
 17959 00002BB5 C436[A205]              	LES	SI,[THISCDS]
 17960                                  	; 18/08/2018
 17961 00002BB9 83FEFF                  	CMP	SI,-1
 17962 00002BBC 7530                    	JNZ	short TEST_RE_NET1
 17963 00002BBE 07                      	POP	ES
 17964                                  
 17965                                  	; MSDOS 6.0
 17966                                  ;Extended open hooks
 17967 00002BBF F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 17968 00002BC4 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 17969                                  _IFS_extopen:									;AN000;
 17970 00002BC6 A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 17971                                  					    ; with which call was made. This
 17972                                  					    ; has the open access bits. 
 17973                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 17974                                  	
 17975 00002BC9 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 17976                                  	;mov	ax,112Eh
 17977                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 17978 00002BCA B82E11                  	mov	ax,(MultNET*256)+46 
 17979 00002BCD CD2F                    	INT	2FH			    ;FT.				;AN000;
 17980 00002BCF 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 17981 00002BD0 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 17982                                  
 17983                                  do_ret_label:
 17984 00002BD5 C3                      	retn				    ;FT.				;AN000;
 17985                                  _NOEXTOP:
 17986                                  ;Extended open hooks
 17987                                  	;
 17988                                  ;IF NOT Installed
 17989                                  	;transfer NET_SEQ_OPEN
 17990                                  ;ELSE
 17991                                  	
 17992                                  do_net_int2f:
 17993 00002BD6 F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 17994 00002BDB 7409                    	jz	short not_exec_open	; N: just do net open
 17995                                  					; Y: check to see if redir is aware
 17996                                  					;    of this 
 17997                                  	
 17998                                  					; M042 - start
 17999                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 18000 00002BDD F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 18001                                  					; Q: does this redir know how to 
 18002                                  					;    this
 18003 00002BE2 7402                    	jz	short not_exec_open	; N: just do net open
 18004                                  					; Y: set bit 3 of access byte and 
 18005                                  					;    set sharing mode to DENY_WRITE
 18006                                  					; M042 - end
 18007                                  	
 18008                                  	; NOTE: This specific mode has not been set for the code assembled
 18009                                  	; under the "NOT Installed" conditional. Currently Installed is 
 18010                                  	; always one.
 18011                                  					; M035 - set the bits on the stack
 18012                                  	;mov	al,23h
 18013 00002BE4 B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 18014                                  	
 18015                                  not_exec_open:
 18016                                  	; MSDOS 3.3 & MSDOS 6.0
 18017 00002BE6 50                      	PUSH	AX
 18018                                  
 18019                                  	;MOV	AX,(MultNET SHL 8) OR 22
 18020                                  	;INT	2FH
 18021                                  
 18022 00002BE7 B81611                  	mov     ax,1116h
 18023 00002BEA CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 18024                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 18025                                  			; SDA first filename pointer -> fully-qualified name of file to open
 18026                                  			; STACK: WORD file open mode
 18027                                  			; Return: CF set on error
 18028                                  
 18029 00002BEC 5B                      	POP	BX			; clean stack
 18030                                  ;do_ret_label: ; 09/08/2018
 18031 00002BED C3                      	retn
 18032                                  ;ENDIF
 18033                                  
 18034                                  TEST_RE_NET1:
 18035                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 18036                                  	; 17/12/2022
 18037 00002BEE 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 18038 00002BF3 07                      	POP	ES
 18039                                  	; 18/05/2019
 18040 00002BF4 7409                    	JZ	short LOCAL_OPEN
 18041                                  
 18042                                  ;Extended open hooks
 18043                                  	; MSDOS 6.0
 18044 00002BF6 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 18045 00002BFB 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 18046                                  ;Extended open hooks
 18047                                  
 18048                                  ;IF NOT Installed
 18049                                  ;	transfer NET_OPEN
 18050                                  ;ELSE
 18051 00002BFD EBD7                    	jmp	short do_net_int2f
 18052                                  ;ENDIF
 18053                                  
 18054                                  LOCAL_OPEN:
 18055                                  	; MSDOS 3.3 & MSDOS 6.0
 18056 00002BFF E814E7                  	call	ECritDisk
 18057                                  
 18058                                  ; DOS 3.3 FastOPen 6/16/86
 18059                                  
 18060                                  	;or	byte [FastOpenFlg],5
 18061 00002C02 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 18062                                  
 18063 00002C07 E83B13                  	call	GETPATH
 18064                                  
 18065                                  ; DOS 3.3 FastOPen 6/16/86
 18066                                  
 18067 00002C0A 731D                    	JNC	short Open_found
 18068 00002C0C 7511                    	JNZ	short bad_path2
 18069 00002C0E 08C9                    	OR	CL,CL
 18070 00002C10 740D                    	JZ	short bad_path2
 18071                                  OpenFNF:
 18072 00002C12 B80200                  	MOV	AX,error_file_not_found	; 2
 18073                                  OpenBadRet:
 18074                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 18075                                  	; 12/08/2018
 18076                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 18077                                  	; MSDOS 6.0
 18078 00002C15 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 18079 00002C1B F9                      	STC
 18080                                  	;call	LCritDisk
 18081                                  	; 16/12/2022
 18082 00002C1C E912E7                  	jmp	LCritDisk
 18083                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 18084                                  	;retn 	; 08/09/2018
 18085                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18086                                  	;jmp	Clear_FastOpen
 18087                                  
 18088                                  bad_path2:
 18089 00002C1F B80300                  	MOV	AX,error_path_not_found	; 3
 18090 00002C22 EBF1                    	JMP	short OpenBadRet
 18091                                  
 18092                                  Open_Bad_Access:
 18093 00002C24 B80500                  	MOV	AX,error_access_denied	; 5
 18094 00002C27 EBEC                    	JMP	short OpenBadRet
 18095                                  
 18096                                  Open_found:
 18097 00002C29 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 18098 00002C2B 08E4                    	OR	AH,AH
 18099 00002C2D 783E                    	JS	short open_ok		; Devices don't have attributes
 18100 00002C2F 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 18101                                  	;mov	al,[es:bx+0Bh]
 18102 00002C33 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 18103 00002C37 A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 18104 00002C39 75E9                    	JNZ	short Open_Bad_Access
 18105 00002C3B A801                    	TEST	AL,attr_read_only	; check write on read only
 18106 00002C3D 742E                    	JZ	short open_ok
 18107                                  
 18108                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 18109                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 18110                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 18111                                  ; processing until the actual write operation:
 18112                                  ;
 18113                                  ; If FCB, then we change the mode to be read_only.
 18114                                  ; If net_FCB, then we change the mode to be read_only.
 18115                                  ; If not open for read then error.
 18116                                  
 18117 00002C3F 1E                      	push	ds
 18118 00002C40 56                      	push	si
 18119 00002C41 C536[9E05]              	LDS	SI,[THISSFT]
 18120                                  	;mov	cx,[si+2]
 18121 00002C45 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 18122                                  	; 17/12/2022
 18123                                  	;test	ch,80h
 18124 00002C48 F6C580                  	test	ch,sf_isFCB>>8
 18125                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 18126 00002C4B 750A                    	JNZ	short ResetAccess	; yes, reset the access
 18127 00002C4D 88CA                    	MOV	DL,CL
 18128 00002C4F 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 18129 00002C52 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 18130 00002C55 7508                    	JNZ	short NormalOpen	; no
 18131                                  ResetAccess:
 18132                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 18133                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 18134                                  	; 16/12/2022
 18135 00002C57 80E1F0                  	and	cl,0F0h ; 18/05/2019
 18136                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 18137 00002C5A 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18138 00002C5D EB0C                    	JMP	SHORT FillSFT
 18139                                  
 18140                                  ; The SFT is normal. See if the requested access is open_for_read
 18141                                  
 18142                                  NormalOpen:
 18143 00002C5F 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18144 00002C62 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18145 00002C65 7404                    	JZ	short FillSFT
 18146 00002C67 5E                      	pop	si
 18147 00002C68 1F                      	pop	ds
 18148 00002C69 EBB9                    	JMP	short Open_Bad_Access
 18149                                  ;
 18150                                  ; All done, restore registers and fill the SFT.
 18151                                  ;
 18152                                  FillSFT:
 18153 00002C6B 5E                      	pop	si
 18154 00002C6C 1F                      	pop	ds
 18155                                  open_ok:
 18156 00002C6D E8001F                  	call	DOOPEN			; Fill in SFT
 18157                                  
 18158                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18159                                  	; 18/05/2019
 18160                                  	;and	byte [ss:FastOpenFlag],80h
 18161 00002C70 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18162                                  	; 12/08/2018
 18163                                  	;and	byte [FastOpenFlg],Fast_yes	
 18164                                  
 18165                                  	; MSDOS 6.0
 18166 00002C76 E84300                  	CALL	DO_SHARE_CHECK
 18167 00002C79 7303                    	JNC	short SHARE_OK
 18168                                  	;call	LCritDisk
 18169                                  	; 16/12/2022
 18170 00002C7B E9B3E6                  	jmp	LCritDisk
 18171                                  	;;JMP	short Clear_FastOpen
 18172                                  	;retn	; 18/05/2019
 18173                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18174                                  	;jmp	short Clear_FastOpen	
 18175                                  
 18176                                  	; MSDOS 3.3
 18177                                  ;DO_SHARE_CHECK:
 18178                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18179                                  ;OpenShareRetry:
 18180                                  ;	push	cx			; Save number left to do
 18181                                  ;	call	SHARE_CHECK		; Final Check
 18182                                  ;	pop	cx			; CX = # left
 18183                                  ;	JNC	short SHARE_OK		; No problem with access
 18184                                  ;	call	Idle
 18185                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18186                                  ;OpenShareFail:
 18187                                  ;	LES	DI,[THISSFT]
 18188                                  ;	call	SHARE_ERROR
 18189                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18190                                  	
 18191                                  	;12/08/2018
 18192                                  	;mov	byte [ss:FastOpenFlg],0
 18193                                  	;08/09/2018
 18194                                  	;mov	byte [FastOpenFlg],0
 18195                                  	;call	LCritDisk
 18196                                  	;JMP	short Clear_FastOpen
 18197                                  	;retn
 18198                                  
 18199                                  SHARE_OK:
 18200                                  	; MSDOS 3.3 & MSDOS 6.0
 18201 00002C7E B80300                  	MOV	AX,3
 18202 00002C81 C43E[9E05]              	LES	DI,[THISSFT]
 18203                                  ;if installed
 18204                                  	;call	JShare + 14 * 4
 18205 00002C85 FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18206                                  ;else
 18207                                  ;	Call	ShSU
 18208                                  ;endif
 18209 00002C89 E8A5E6                  	call	LCritDisk
 18210                                  	
 18211                                  	;FallThru Set_SFT_Mode
 18212                                  
 18213                                  ;----------------------------------------------------------------------------
 18214                                  ; Procedure Name : SET_SFT_MODE
 18215                                  ;
 18216                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18217                                  ;
 18218                                  ;   Inputs:
 18219                                  ;	ThisSFT points to SFT
 18220                                  ;
 18221                                  ;   Outputs:
 18222                                  ;	Carry clear
 18223                                  ;   Registers modified: AX.
 18224                                  ;---------------------------------------------------------------------------
 18225                                  
 18226                                  ;hkn; called from create. DS already set up to DOSDATA.
 18227                                  
 18228                                  SET_SFT_MODE:
 18229 00002C8C C43E[9E05]              	LES	DI,[THISSFT]
 18230 00002C90 E88019                  	call	DEV_OPEN_SFT
 18231                                  	;test	word [es:di+2],8000h
 18232                                  	; 17/12/2022
 18233                                  	;test	byte [es:di+3],80h
 18234 00002C93 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18235                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18236 00002C98 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18237 00002C9A A1[3003]                	MOV	AX,[CurrentPDB]
 18238                                  	;mov	[es:di+31h],ax
 18239 00002C9D 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18240                                  
 18241                                  Clear_FastOpen:
 18242 00002CA1 C3                      	retn			       ;;;;; DOS 3.3
 18243                                  
 18244                                  ;----------------------------------------------------------------------------
 18245                                  ; Procedure Name : SHARE_ERROR
 18246                                  ;
 18247                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18248                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18249                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18250                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18251                                  ;---------------------------------------------------------------------------
 18252                                  
 18253                                  SHARE_ERROR:
 18254                                  	; 17/12/2022
 18255                                  	;test	byte [es:di+3],80h
 18256 00002CA2 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18257                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18258 00002CA7 7509                    	JNZ	short _HARD_ERR
 18259 00002CA9 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18260 00002CAD 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18261                                  	;CMP	CL,SHARING_COMPAT ; 0
 18262                                  	;JNE	short _NO_HARD_ERR
 18263                                  	; 21/09/2023
 18264 00002CB0 7505                    	jnz	short _NO_HARD_ERR
 18265                                  _HARD_ERR:
 18266 00002CB2 E8BB46                  	call	SHARE_VIOLATION
 18267                                  	;retnc				; User wants retry
 18268 00002CB5 73EA                    	jnc	short Clear_FastOpen
 18269                                  _NO_HARD_ERR:
 18270 00002CB7 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18271 00002CBA F9                      	STC
 18272 00002CBB C3                      	retn
 18273                                  
 18274                                  ; MSDOS 6.0
 18275                                  ;----------------------------------------------------------------------------
 18276                                  ; Procedure Name : DO_SHARE_CHECK
 18277                                  ;
 18278                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18279                                  ; Functions: check file sharing mode is valid
 18280                                  ; Output: carry set, error
 18281                                  ;	  carry clear, share ok
 18282                                  ;----------------------------------------------------------------------------
 18283                                  
 18284                                  	; 18/05/2019 - Retro DOS v4.0
 18285                                  DO_SHARE_CHECK:
 18286 00002CBC E857E6                  	call	ECritDisk		; enter critical section
 18287                                  OPN_RETRY:
 18288 00002CBF 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18289                                  OpenShareRetry:
 18290 00002CC3 51                      	push	cx			; Save number left to do
 18291 00002CC4 E8A446                  	call	SHARE_CHECK		; Final Check
 18292 00002CC7 59                      	pop	cx			; CX = # left
 18293 00002CC8 730E                    	JNC	short Share_Ok2		; No problem with access
 18294 00002CCA E840E5                  	call	Idle
 18295 00002CCD E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18296                                  OpenShareFail:
 18297 00002CCF C43E[9E05]              	LES	DI,[THISSFT]
 18298 00002CD3 E8CCFF                  	call	SHARE_ERROR
 18299 00002CD6 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18300                                  Share_Ok2:
 18301                                  	;call	LCritDisk		; leave critical section
 18302                                  	;retn
 18303                                  	; 18/12/2022
 18304 00002CD8 E956E6                  	jmp	LCritDisk
 18305                                  
 18306                                  ;-----------------------------------------------------------------------------
 18307                                  ; Procedure Name : Check_Access
 18308                                  ;
 18309                                  ; Inputs:
 18310                                  ;	AX is mode
 18311                                  ;	  High NIBBLE of AL (Sharing Mode)
 18312                                  ;		sharing_compat	   file is opened in compatibility mode
 18313                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18314                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18315                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18316                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18317                                  ;	  Low NIBBLE of AL (Access Mode)
 18318                                  ;		open_for_read	file is opened for reading
 18319                                  ;		open_for_write	file is opened for writing
 18320                                  ;		open_for_both	file is opened for both reading and writing.
 18321                                  ; Function:
 18322                                  ;	Check this access mode for correctness
 18323                                  ; Outputs:
 18324                                  ;	[open_access] = AL input
 18325                                  ;	Carry Clear
 18326                                  ;		Mode is correct
 18327                                  ;		AX unchanged
 18328                                  ;	Carry Set
 18329                                  ;		Mode is bad
 18330                                  ;		AX = error_invalid_access
 18331                                  ; No other registers effected
 18332                                  ;----------------------------------------------------------------------------
 18333                                  
 18334                                  Check_Access_AX:
 18335 00002CDB A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18336 00002CDE 53                      	PUSH	BX
 18337                                  
 18338                                  ;	If sharing, then test for special sharing mode for FCBs
 18339                                  
 18340 00002CDF 88C3                    	MOV	BL,AL
 18341 00002CE1 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18342 00002CE4 803E[7205]FF            	CMP	byte [FSHARING],-1
 18343 00002CE9 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18344 00002CEB 80FB70                  	CMP	BL,SHARING_NET_FCB
 18345 00002CEE 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18346                                  CheckShareMode:
 18347 00002CF0 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18348 00002CF3 770D                    	JA	short Make_Bad_Access
 18349                                  CheckAccessMode:
 18350 00002CF5 88C3                    	MOV	BL,AL
 18351 00002CF7 80E30F                  	AND	BL,access_mask
 18352 00002CFA 80FB02                  	CMP	BL,2
 18353 00002CFD 7703                    	JA	short Make_Bad_Access
 18354 00002CFF 5B                      	POP	BX
 18355 00002D00 F8                      	CLC
 18356 00002D01 C3                      	retn
 18357                                  
 18358                                  Make_Bad_Access:
 18359 00002D02 B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18360 00002D05 5B                      	POP	BX
 18361 00002D06 F9                      	STC
 18362 00002D07 C3                      	retn
 18363                                  
 18364                                  ;============================================================================
 18365                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18366                                  ;============================================================================
 18367                                  ; 08/08/2018 - Retro DOS v3.0
 18368                                  ; 18/05/2019 - Retro DOS v4.0
 18369                                  
 18370                                  ;**	Low level routine for returning disk drive information from a local
 18371                                  ;	  or NET device
 18372                                  ;
 18373                                  ;	DISK_INFO
 18374                                  ;
 18375                                  ;	  Modification history:
 18376                                  ;
 18377                                  ;		Created: ARR 30 March 1983
 18378                                  
 18379                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18380                                  ;---------------------------------------------------------------------------
 18381                                  ; Procedure Name : DISK_INFO
 18382                                  ;
 18383                                  ; Inputs:
 18384                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18385                                  ;		(It MAY NOT be NUL, error not detected)
 18386                                  ; Function:
 18387                                  ;	Get Interesting Drive Information
 18388                                  ; Returns:
 18389                                  ;	DX = Number of free allocation units
 18390                                  ;	BX = Total Number of allocation units on disk
 18391                                  ;	CX = Sector size
 18392                                  ;	AL = Sectors per allocation unit
 18393                                  ;	AH = FAT ID BYTE
 18394                                  ;	Carry set if error (currently user FAILed to I 24)
 18395                                  ; Segs except ES preserved, others destroyed
 18396                                  ;----------------------------------------------------------------------------
 18397                                  
 18398                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18399                                  ;hkn; DOSDATA. 
 18400                                  
 18401                                  DISK_INFO:
 18402                                  	; 08/08/2018 - Retro DOS v3.0
 18403                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18404                                  
 18405 00002D08 E847E5                  	call	TestNet
 18406 00002D0B 7306                    	JNC	short LOCAL_DSK_INFO
 18407                                  
 18408                                  ;IF NOT Installed
 18409                                  ;	transfer NET_DISK_INFO
 18410                                  ;ELSE
 18411                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18412                                  	;INT	2FH
 18413                                  	;return
 18414                                  
 18415 00002D0D B80C11                  	mov     ax,110Ch
 18416 00002D10 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18417                                  			; ES:DI -> current directory
 18418                                  			; Return: AL = sectors per cluster, BX = total clusters
 18419                                  			; CX = bytes per sector, DX = number of available clusters
 18420 00002D12 C3                      	retn
 18421                                  ;ENDIF
 18422                                  
 18423                                  LOCAL_DSK_INFO:
 18424 00002D13 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18425 00002D18 E8FBE5                  	call	ECritDisk
 18426 00002D1B E8DC29                  	call	FATREAD_CDS		; perform media check.
 18427 00002D1E 7241                    	JC	short CRIT_LEAVE
 18428 00002D20 BB0200                  	MOV	BX,2
 18429 00002D23 E83E28                  	call	UNPACK			; Get first FAT sector into CURBUF
 18430 00002D26 7239                    	JC	short CRIT_LEAVE
 18431 00002D28 C536[E205]              	LDS	SI,[CURBUF]
 18432                                  	;mov	ah,[si+20]
 18433 00002D2C 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18434                                  
 18435                                  ;hkn; SS is DOSDATA
 18436 00002D2F 16                      	push	ss
 18437 00002D30 1F                      	pop	ds
 18438                                  	;mov	cx,[es:bp+0Dh]
 18439 00002D31 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18440                                  
 18441                                  ; Examine the current free count. If it indicates that we have an invalid
 18442                                  ; count, do the expensive calculation.
 18443                                  
 18444                                  	;mov	dx,[es:bp+1Fh]
 18445 00002D35 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18446 00002D39 83FAFF                  	CMP	DX,-1			; is it valid?
 18447 00002D3C 7404                    	JZ	short DoScan
 18448                                  
 18449                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18450                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18451                                  ; the count.
 18452                                  
 18453 00002D3E 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18454 00002D40 7222                    	JB	short GotVal		; yes, trust it.
 18455                                  DoScan:
 18456 00002D42 31D2                    	XOR	DX,DX
 18457 00002D44 49                      	DEC	CX
 18458                                  SCANFREE:
 18459 00002D45 E81C28                  	call	UNPACK
 18460 00002D48 7217                    	JC	short CRIT_LEAVE
 18461 00002D4A 7501                    	JNZ	short NOTFREECLUS
 18462 00002D4C 42                      	INC	DX			; A free one
 18463                                  NOTFREECLUS:
 18464 00002D4D 43                      	INC	BX			; Next cluster
 18465 00002D4E E2F5                    	LOOP	SCANFREE
 18466 00002D50 4B                      	DEC	BX			; BX was next cluster. Convert to
 18467                                  ReturnVals:
 18468 00002D51 4B                      	DEC	BX			; count
 18469                                  	;mov	al,[es:bp+4]
 18470 00002D52 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18471 00002D56 FEC0                    	INC	AL			; Sectors/cluster
 18472                                  	;mov	cx,[es:bp+2]
 18473 00002D58 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18474                                  	;mov	[es:bp+1Fh],dx
 18475 00002D5C 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18476 00002D60 F8                      	CLC
 18477                                  CRIT_LEAVE:
 18478                                  	;call	LCritDisk
 18479                                  	;retn
 18480                                  	; 17/12/2022
 18481 00002D61 E9CDE5                  	jmp	LCritDisk
 18482                                  
 18483                                  ; We have correctly computed everything previously. Load up registers for
 18484                                  ; return.
 18485                                  
 18486                                  GotVal: 
 18487 00002D64 89CB                    	MOV	BX,CX			; get cluster count
 18488 00002D66 EBE9                    	JMP	short ReturnVals
 18489                                  
 18490                                  ;============================================================================
 18491                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18492                                  ;============================================================================
 18493                                  ; 22/07/2018 - Retro DOS v3.0
 18494                                  
 18495                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18496                                  ;	NAME	DOS_SEARCH
 18497                                  
 18498                                  ;**	Low level routines for doing local and NET directory searches
 18499                                  ;
 18500                                  ;	DOS_SEARCH_FIRST
 18501                                  ;	DOS_SEARCH_NEXT
 18502                                  ;	RENAME_NEXT
 18503                                  ;
 18504                                  ;	Revision history:
 18505                                  ;
 18506                                  ;	    Created: ARR 30 March 1983
 18507                                  ;	    A000	version 4.00  Jan. 1988
 18508                                  ;	    A001	PTM 3564 -- search for fastopen
 18509                                  
 18510                                  ;Installed = TRUE
 18511                                  
 18512                                  ;--------------------------------------------------------------------------
 18513                                  ;
 18514                                  ; Procedure Name : DOS_SEARCH_FIRST
 18515                                  ;
 18516                                  ; Inputs:
 18517                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18518                                  ;		terminated)
 18519                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18520                                  ;		( = -1 if current dir not involved, else
 18521                                  ;		 Points to first char after last "/" of current dir part)
 18522                                  ;	[THISCDS] Points to CDS being used
 18523                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18524                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18525                                  ;	[DMAADD] Points to 53 byte buffer
 18526                                  ; Function:
 18527                                  ;	Initiate a search for the given file spec
 18528                                  ; Outputs:
 18529                                  ;	CARRY CLEAR
 18530                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18531                                  ;
 18532                                  ;	LOCAL
 18533                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18534                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18535                                  ;	    11 byte search name with Meta chars in it
 18536                                  ;	    Search Attribute Byte, attribute of search
 18537                                  ;	    WORD LastEnt value
 18538                                  ;	    WORD DirStart
 18539                                  ;	    4 byte pad
 18540                                  ;	    32 bytes of the directory entry found
 18541                                  ;	NET
 18542                                  ;	    21 bytes First byte has high bit set
 18543                                  ;	    32 bytes of the directory entry found
 18544                                  ;
 18545                                  ;	CARRY SET
 18546                                  ;	    AX = error code
 18547                                  ;		error_no_more_files
 18548                                  ;			No match for this file
 18549                                  ;		error_path_not_found
 18550                                  ;			Bad path (not in curr dir part if present)
 18551                                  ;		error_bad_curr_dir
 18552                                  ;			Bad path in current directory part of path
 18553                                  ; DS preserved, others destroyed
 18554                                  ;---------------------------------------------------------------------------
 18555                                  
 18556                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18557                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 18558                                  
 18559                                  DOS_SEARCH_FIRST:
 18560                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 18561                                  
 18562 00002D68 C43E[A205]              	LES	DI,[THISCDS]
 18563 00002D6C 83FFFF                  	CMP	DI,-1
 18564 00002D6F 7506                    	JNZ	short TEST_RE_NET2
 18565                                  
 18566                                  ;IF NOT Installed
 18567                                  ;	transfer NET_SEQ_SEARCH_FIRST
 18568                                  ;ELSE
 18569                                  	;mov	ax,1119h
 18570 00002D71 B81911                  	MOV	AX,(MultNET<<8)|25
 18571 00002D74 CD2F                    	INT	2Fh
 18572 00002D76 C3                      	retn
 18573                                  ;ENDIF
 18574                                  
 18575                                  TEST_RE_NET2:
 18576                                  	;test	word [es:di+43h],8000h
 18577                                  	; 17/12/2022
 18578                                  	;test	byte [es:di+44h],80h
 18579                                  	; 28/12/2022
 18580 00002D77 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8	
 18581                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 18582 00002D7C 7406                    	JZ	short LOCAL_SEARCH_FIRST
 18583                                  
 18584                                  ;IF NOT Installed
 18585                                  ;	transfer NET_SEARCH_FIRST
 18586                                  ;ELSE
 18587                                  	;mov	ax,111Bh
 18588 00002D7E B81B11                  	MOV	AX,(MultNET<<8)|27
 18589 00002D81 CD2F                    	INT	2FH
 18590 00002D83 C3                      	retn
 18591                                  ;ENDIF
 18592                                  	; 18/05/2019 - Retro DOS v4.0
 18593                                  LOCAL_SEARCH_FIRST:
 18594 00002D84 E88FE5                  	call	ECritDisk
 18595                                  	; MSDOS 6.0
 18596                                  	;;test	word [DOS34_FLAG],400h
 18597                                  	; 17/12/2022
 18598                                  	;test	byte [DOS34_FLAG+1],04h
 18599 00002D87 F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 18600                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 18601 00002D8C 7405                    	JZ	short NOFN			;AN000;
 18602                                  	;or	byte [FastOpenFlg],1
 18603 00002D8E 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 18604                                  NOFN:						;AN000;
 18605 00002D93 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18606                                  	; MSDOS 6.0
 18607 00002D98 E84101                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 18608 00002D9B 7305                    	JNC	short norm_GETPATH	;AN000;;FO. no
 18609                                  	;and	byte [FastOpenFlg],80h
 18610 00002D9D 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18611                                  norm_GETPATH:
 18612 00002DA2 E8A011                  	call	GETPATH
 18613                                  	; BX = offset NAME1
 18614                                  ;_getdone:
 18615 00002DA5 7318                    	JNC	short find_check_dev
 18616 00002DA7 7511                    	JNZ	short bad_path3
 18617 00002DA9 08C9                    	OR	CL,CL
 18618 00002DAB 740D                    	JZ	short bad_path3
 18619                                  find_no_more:
 18620                                  	;mov	ax,12h
 18621 00002DAD B81200                  	MOV	AX,error_no_more_files
 18622                                  BadBye:
 18623                                  	; MSDOS 6.0
 18624 00002DB0 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 18625                                  
 18626 00002DB6 F9                      	STC
 18627                                  	;call	LCritDisk
 18628                                  	;retn
 18629                                  	; 18/12/2022
 18630 00002DB7 E977E5                  	jmp	LCritDisk
 18631                                  
 18632                                  bad_path3:
 18633                                  	;mov	ax,3
 18634 00002DBA B80300                  	MOV	AX,error_path_not_found
 18635 00002DBD EBF1                    	JMP	short BadBye
 18636                                  
 18637                                  find_check_dev:
 18638 00002DBF 08E4                    	OR	AH,AH
 18639 00002DC1 790A                    	JNS	short found_entry
 18640 00002DC3 C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 18641 00002DC9 FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 18642                                  found_entry:
 18643                                  
 18644                                  ; We set the physical drive byte here Instead of after found_it; Doing
 18645                                  ; a search-next may not have wfp_start set correctly
 18646                                  
 18647 00002DCD C43E[2C03]              	LES	DI,[DMAADD]
 18648 00002DD1 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 18649 00002DD5 AC                      	LODSB
 18650 00002DD6 2C40                    	SUB	AL,'A'-1                ; logical drive
 18651 00002DD8 AA                      	STOSB				; High bit not set (local)
 18652                                  found_it:
 18653 00002DD9 C43E[2C03]              	LES	DI,[DMAADD]
 18654 00002DDD 47                      	INC	DI
 18655                                  
 18656                                  	; MSDOS 6.0
 18657 00002DDE 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 18658                                  	;test	byte [FastOpenFlg],10h
 18659 00002DDF F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 18660 00002DE4 7408                    	JZ	short notfast			  ;FO.;AN001;
 18661 00002DE6 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 18662 00002DE8 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 18663 00002DEC EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 18664                                  
 18665                                  notfast:
 18666 00002DEE BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 18667                                  movmov:
 18668                                  ; Special E5 code
 18669 00002DF1 A4                      	MOVSB
 18670 00002DF2 26807DFF05              	CMP	BYTE [ES:DI-1],5
 18671 00002DF7 7505                    	JNZ	short NOTKANJB
 18672 00002DF9 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 18673                                  NOTKANJB:
 18674 00002DFE B90A00                  	MOV	CX,10
 18675 00002E01 F3A4                    	REP	MOVSB
 18676                                  
 18677                                  	; 08/09/2018
 18678 00002E03 1F                      	POP	DS			;FO.;AN001; restore ds
 18679                                  
 18680 00002E04 A0[6B05]                	MOV	AL,[ATTRIB]
 18681 00002E07 AA                      	STOSB
 18682 00002E08 50                      	PUSH	AX			; Save AH device info
 18683 00002E09 A1[4803]                	MOV	AX,[LASTENT]
 18684 00002E0C AB                      	STOSW
 18685 00002E0D A1[C205]                	MOV	AX,[DIRSTART]
 18686 00002E10 AB                      	STOSW
 18687                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 18688 00002E11 83C704                  	ADD	DI,4
 18689 00002E14 58                      	POP	AX			; Recover AH device info
 18690 00002E15 08E4                    	OR	AH,AH
 18691 00002E17 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 18692 00002E19 833E[E205]FF            	CMP	WORD [CURBUF],-1
 18693 00002E1E 7510                    	JNZ	short OKSTORE
 18694                                  
 18695                                  	; MSDOS 6.0
 18696 00002E20 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 18697                                  					;AN000;;FO. from fastopen and is good
 18698 00002E25 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 18699                                  
 18700                                  	; The user has specified the root directory itself, rather than some
 18701                                  	; contents of it. We can't "find" that.
 18702                                  
 18703 00002E27 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 18704                                  					;   stuffing a -1 at Lastent
 18705 00002E2D E97DFF                  	JMP	find_no_more
 18706                                  
 18707                                  OKSTORE:
 18708 00002E30 8E1E[E405]              	MOV	DS,[CURBUF+2]
 18709                                  DOSREL:
 18710                                  	; BX = offset NAME1 (from GETPATH)
 18711 00002E34 89DE                    	MOV	SI,BX			; SI-> start of entry
 18712                                  
 18713                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 18714                                  
 18715                                  	;mov	cx,32
 18716 00002E36 B92000                  	MOV	CX,dir_entry.size
 18717                                  ;;;;; 7/29/86
 18718 00002E39 89F8                    	MOV	AX,DI			; save the 1st byte addr
 18719 00002E3B F3A4                    	REP	MOVSB
 18720 00002E3D 89C7                    	MOV	DI,AX			; restore 1st byte addr
 18721 00002E3F 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 18722 00002E43 7504                    	JNZ	short NO05
 18723 00002E45 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 18724                                  NO05:
 18725                                  
 18726                                  ;;;;; 7/29/86
 18727                                  
 18728                                  ;hkn; FastOpenflg is in DOSDATA use SS
 18729                                  	; 16/12/2022
 18730                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18731                                  	; MSDOS 6.0
 18732                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18733                                  	; 18/05/2019 - Retro DOS v4.0
 18734 00002E49 16                      	push	ss
 18735 00002E4A 1F                      	pop	ds
 18736                                  	; 16/12/2022
 18737 00002E4B 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 18738                                  
 18739                                  ;hkn; SS is DOSDATA
 18740                                  	;push	ss
 18741                                  	;pop	ds
 18742 00002E50 F8                      	CLC
 18743                                  	;call	LCritDisk
 18744                                  	;retn
 18745                                  	; 16/12/2022
 18746 00002E51 E9DDE4                  	jmp	LCritDisk
 18747                                  
 18748                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 18749                                  ;----------------------------------------------------------------------------
 18750                                  ;
 18751                                  ; Procedure Name : DOS_SEARCH_NEXT
 18752                                  ;
 18753                                  ; Inputs:
 18754                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 18755                                  ;	    (only first 21 bytes must have valid information)
 18756                                  ; Function:
 18757                                  ;	Look for subsequent matches
 18758                                  ; Outputs:
 18759                                  ;	CARRY CLEAR
 18760                                  ;	    The 53 bytes at DMAADD are updated for next call
 18761                                  ;		(see DOS_SEARCH_FIRST)
 18762                                  ;	CARRY SET
 18763                                  ;	    AX = error code
 18764                                  ;		error_no_more_files
 18765                                  ;			No more files to find
 18766                                  ; DS preserved, others destroyed
 18767                                  ;---------------------------------------------------------------------------
 18768                                  
 18769                                  ;hkn; called from search.asm. DS already set up at this point.
 18770                                  
 18771                                  DOS_SEARCH_NEXT:
 18772 00002E54 C43E[2C03]              	LES	DI,[DMAADD]
 18773 00002E58 268A05                  	MOV	AL,[ES:DI]
 18774 00002E5B A880                    	TEST	AL,80H			; Test for NET
 18775 00002E5D 7406                    	JZ	short LOCAL_SEARCH_NEXT
 18776                                  ;IF NOT Installed
 18777                                  ;	transfer NET_SEARCH_NEXT
 18778                                  ;ELSE
 18779                                  	;mov	ax,111Ch
 18780 00002E5F B81C11                  	MOV	AX,(MultNET<<8)|28
 18781 00002E62 CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 18782                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 18783                                  		     ; Return: CF set on error, AX = DOS error code
 18784                                  		     ; CF clear if successful
 18785 00002E64 C3                      	retn
 18786                                  ;ENDIF
 18787                                  
 18788                                  LOCAL_SEARCH_NEXT:
 18789                                  	;AL is drive A=1
 18790                                  	;mov	byte [EXTERR_LOCUS],2
 18791 00002E65 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18792 00002E6A E8A9E4                  	call	ECritDisk
 18793                                  
 18794                                  ;hkn; DummyCDS is in DOSDATA
 18795 00002E6D C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 18796                                  ;hkn; Segment address is DOSDATA - use ds
 18797                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 18798 00002E73 8C1E[A405]              	mov	[THISCDS+2],DS
 18799                                  
 18800 00002E77 0440                    	ADD	AL,'A'-1
 18801 00002E79 E8843B                  	call	InitCDS
 18802                                  
 18803                                  ;	call	GETTHISDRV		; Set CDS pointer
 18804                                  
 18805 00002E7C 7236                    	JC	short No_files		; Bogus drive letter
 18806 00002E7E C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 18807                                  	;les	bp,[es:di+45h]
 18808 00002E82 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 18809 00002E86 E8A9D7                  	call	GOTDPB			; [THISDPB] = ES:BP
 18810                                  
 18811                                  	 ;16/12/2022
 18812 00002E89 268A4600                	mov	al,[ES:BP]
 18813                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18814                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 18815 00002E8D A2[7605]                	mov	[THISDRV],AL
 18816                                  	;mov	word [CREATING],0E500h
 18817 00002E90 C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 18818 00002E96 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18819 00002E9B C536[2C03]              	LDS	SI,[DMAADD]
 18820 00002E9F AC                      	LODSB				; Drive Byte
 18821                                  
 18822                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 18823                                  RENAME_NEXT:
 18824                                  	;context ES
 18825 00002EA0 16                      	push	ss
 18826 00002EA1 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 18827                                  
 18828                                  ;hkn; NAME1 is in DOSDATA
 18829 00002EA2 BF[4B05]                	MOV	DI,NAME1
 18830                                  
 18831 00002EA5 B90B00                  	MOV	CX,11
 18832 00002EA8 F3A4                    	REP	MOVSB			; Search name
 18833 00002EAA AC                      	LODSB				; Attribute
 18834                                  
 18835                                  ;hkn; SS override
 18836 00002EAB 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 18837 00002EAF AD                      	LODSW				; LastEnt
 18838 00002EB0 09C0                    	OR	AX,AX
 18839 00002EB2 7903                    	JNS	short cont_load
 18840                                  No_files:
 18841 00002EB4 E9F6FE                  	JMP	find_no_more
 18842                                  
 18843                                  cont_load:
 18844 00002EB7 50                      	PUSH	AX			; Save LastEnt
 18845 00002EB8 AD                      	LODSW				; DirStart
 18846 00002EB9 89C3                    	MOV	BX,AX
 18847                                  
 18848                                  ;hkn; SS is DOSDATA
 18849                                  	;context DS
 18850 00002EBB 16                      	push	ss
 18851 00002EBC 1F                      	pop	ds
 18852 00002EBD C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 18853                                  	;invoke	SetDirSrch
 18854 00002EC1 E82410                  	call	SETDIRSRCH
 18855 00002EC4 7303                    	JNC	short SEARCH_GOON
 18856 00002EC6 58                      	POP	AX			; Clean stack
 18857 00002EC7 EBEB                    	JMP	short No_files
 18858                                  
 18859                                  SEARCH_GOON:
 18860 00002EC9 E80D13                  	call	STARTSRCH
 18861 00002ECC 58                      	POP	AX
 18862 00002ECD E8E90F                  	call	GETENT
 18863 00002ED0 72E2                    	JC	short No_files
 18864 00002ED2 E81F0F                  	call	NEXTENT
 18865 00002ED5 72DD                    	JC	short No_files
 18866 00002ED7 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 18867 00002ED9 E9FDFE                  	JMP	found_it ; 10/08/2018
 18868                                  
 18869                                  ; MSDOS 6.0
 18870                                  ;---------------------------------------------------------------------------
 18871                                  ;
 18872                                  ; Procedure Name : CHECK_QUESTION
 18873                                  ;
 18874                                  ; Input: [WFP_START]= pointer to final path
 18875                                  ; Function: check '?' char
 18876                                  ; Output: carry clear, if no '?'
 18877                                  ;	 carry set, if '?' exists
 18878                                  ;---------------------------------------------------------------------------
 18879                                  
 18880                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18881                                  CHECK_QUESTION:
 18882                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 18883                                  ;hkn;	PUSH	CS			;AN000;;FO.
 18884 00002EDC 16                      	push	ss
 18885 00002EDD 1F                      	POP	DS			;AN000;;FO. ds:si -> final path
 18886                                  	; 16/12/2022
 18887                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18888 00002EDE 8B36[B205]              	MOV	SI,[WFP_START]		;AN000;;FO.
 18889                                  	;mov	si,[ss:WFP_START]
 18890                                  getnext:				;AN000;
 18891 00002EE2 AC                      	LODSB				;AN000;;FO. get char
 18892 00002EE3 08C0                    	OR	AL,AL			;AN000;;FO. is it null
 18893 00002EE5 7405                    	JZ	short NO_Question	;AN000;;FO. yes
 18894 00002EE7 3C3F                    	CMP	AL,'?'                  ;AN000;;FO. is '?'
 18895 00002EE9 75F7                    	JNZ	short getnext 		;AN000;;FO. no
 18896 00002EEB F9                      	STC				;AN000;;FO.
 18897                                  NO_Question:				;AN000;
 18898 00002EEC C3                      	retn				;AN000;;FO.
 18899                                  
 18900                                  ;============================================================================
 18901                                  ; ABORT.ASM, MSDOS 6.0, 1991
 18902                                  ;============================================================================
 18903                                  ; 23/07/2018 - Retro DOS v3.0
 18904                                  ; 18/05/2019 - Retro DOS v4.0
 18905                                  
 18906                                  ;**
 18907                                  ;
 18908                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 18909                                  ;  If process has NET resources a close all is sent out over the net.
 18910                                  ;
 18911                                  ;   DOS_ABORT
 18912                                  ;
 18913                                  ;   Modification history:
 18914                                  ;
 18915                                  ;       Created: ARR 30 March 1983
 18916                                  ;
 18917                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 18918                                  ;				being terminated only if it is busy.
 18919                                  ;
 18920                                  
 18921                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 18922                                  ;--------------------------------------------------------------------------
 18923                                  ;
 18924                                  ; Procedure Name : DOS_ABORT
 18925                                  ;
 18926                                  ; Inputs:
 18927                                  ;       [CurrentPDB] set to PID of process aborting
 18928                                  ; Function:
 18929                                  ;       Close all files and free all SFTs for this PID
 18930                                  ; Returns:
 18931                                  ;       None
 18932                                  ; All destroyed except stack
 18933                                  ;---------------------------------------------------------------------------
 18934                                  
 18935                                  DOS_ABORT:
 18936 00002EED 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 18937 00002EF2 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 18938                                  reset_free_jfn:
 18939 00002EF7 89CB                    	MOV     BX,CX
 18940 00002EF9 51                      	PUSH    CX
 18941 00002EFA 4B                      	DEC     BX                      ; get jfn (start with last one)
 18942                                  
 18943 00002EFB E83638                  	CALL	_$CLOSE
 18944 00002EFE 59                      	POP     CX
 18945 00002EFF E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 18946                                  
 18947                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 18948                                  ; are running in the no-sharing no-network environment, we are simulating the
 18949                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 18950                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 18951                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 18952                                  ;
 18953                                  ; If sharing is loaded, then the following call to close process will
 18954                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 18955                                  ;
 18956                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 18957                                  ; known network resources. These resources are then responsible for cleaning
 18958                                  ; up after this process.
 18959                                  ;
 18960                                  ; Sleazy, eh?
 18961                                  
 18962                                  	;context DS			; SS is DOSDATA
 18963 00002F01 16                      	push	ss
 18964 00002F02 1F                      	pop	ds  ; 09/09/2018
 18965                                  
 18966                                  	;CallInstall Net_Abort, MultNET, 29
 18967 00002F03 B81D11                  	mov	ax, 111Dh
 18968 00002F06 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 18969                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 18970                                  			; DS???, SS = DOS CS
 18971                                  ;if installed
 18972 00002F08 FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 18973                                  ;else
 18974                                  ;	call 	MFTCloseP
 18975                                  ;endif
 18976                                  
 18977                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 18978                                  ; counts.
 18979                                  					; SS override
 18980 00002F0C 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 18981                                  	;mov	cx,[es:di+4]
 18982 00002F11 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 18983 00002F15 E317                    	jcxz    FCBScanDone
 18984                                  	;lea	di,[di+6]
 18985 00002F17 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 18986 00002F1A 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 18987                                  FCBTest:
 18988                                  	;cmp	[es:di+31h],ax
 18989 00002F1E 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 18990 00002F22 7505                    	jnz	short FCBNext		; no, skip it
 18991 00002F24 26C7050000              	mov	word [es:di],0
 18992                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 18993                                  FCBNext:
 18994 00002F29 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 18995 00002F2C E2F0                    	loop    FCBTest
 18996                                  FCBScanDone:
 18997                                  
 18998                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 18999                                  
 19000 00002F2E 31DB                    	XOR     BX,BX
 19001                                  Scan:
 19002 00002F30 53                      	push    bx
 19003 00002F31 E87B37                  	call	SFFromSFN
 19004 00002F34 5B                      	pop     bx
 19005                                  	;jnc	short Scan1
 19006                                  	;retn
 19007                                  	; 18/12/2022
 19008 00002F35 72B5                    	jc	short NO_Question ; retn
 19009                                  
 19010                                  ;M038
 19011                                  ; Do what the comment above says, check for busy state
 19012                                  
 19013                                  Scan1:
 19014                                  	;cmp	word [es:di],0
 19015                                  	;jz	short scan_next  ; MSDOS 3.3
 19016                                  	; MSDOS 6.0
 19017 00002F37 26833DFF                	cmp	word [es:di],sf_busy ; -1
 19018                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 19019                                  				; Is Sft busy? ;M038
 19020 00002F3B 7519                    	jnz	short scan_next
 19021                                  ;
 19022                                  ; we have a SFT that is busy. See if it is for the current process
 19023                                  ;
 19024 00002F3D 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19025                                  	;cmp	[es:di+31h],ax
 19026 00002F41 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 19027 00002F45 750F                    	jnz	short scan_next
 19028 00002F47 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 19029                                  	;cmp	[es:di+2Fh],ax
 19030 00002F4B 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 19031 00002F4F 7505                    	jnz	short scan_next
 19032                                  
 19033                                  ; This SFT is labelled as ours.
 19034                                  
 19035 00002F51 26C7050000              	mov	word [es:di],0
 19036                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 19037                                  scan_next:
 19038 00002F56 43                      	inc     bx
 19039 00002F57 EBD7                    	jmp     short Scan
 19040                                  
 19041                                  ;============================================================================
 19042                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 19043                                  ;============================================================================
 19044                                  ; 23/07/2018 - Retro DOS v3.0
 19045                                  ; 18/05/2019 - Retro DOS v4.0
 19046                                  
 19047                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 19048                                  ;
 19049                                  ;	DOS_CLOSE
 19050                                  ;	DOS_COMMIT
 19051                                  ;	FREE_SFT
 19052                                  ;	SetSFTTimes
 19053                                  ;
 19054                                  ;	Revision history:
 19055                                  ;
 19056                                  ;	   AN000  version 4.00	Jan. 1988
 19057                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 19058                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 19059                                  
 19060                                  ;Installed = TRUE
 19061                                  
 19062                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 19063                                  ;---------------------------------------------------------------------------
 19064                                  ;
 19065                                  ; Procedure Name : DOS_CLOSE
 19066                                  ;
 19067                                  ; Inputs:
 19068                                  ;	[THISSFT] set to the SFT for the file being used
 19069                                  ; Function:
 19070                                  ;	Close the indicated file via the SFT
 19071                                  ; Returns:
 19072                                  ;	sf_ref_count decremented otherwise
 19073                                  ;	ES:DI point to SFT
 19074                                  ;	Carry set if error
 19075                                  ;	    AX has error code
 19076                                  ; DS preserved, others destroyed
 19077                                  ;---------------------------------------------------------------------------
 19078                                  
 19079                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS alreday set up.
 19080                                  
 19081                                  ; 18/05/2019 - Retro DOS v4.0
 19082                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 19083                                  
 19084                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19085                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 19086                                  
 19087                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 19088                                  
 19089                                  DOS_CLOSE:
 19090 00002F59 C43E[9E05]              	LES	DI,[THISSFT]
 19091                                  	;mov	bx,[ES:DI+5]
 19092 00002F5D 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19093                                  
 19094                                  ; Network closes are handled entirely by the net code.
 19095                                  
 19096                                  	;;test	bx,8000h
 19097                                  	;TEST	BX,sf_isnet
 19098                                  	; 17/12/2022
 19099                                  	;test	bh,80h
 19100 00002F61 F6C780                  	test	bh,(sf_isnet>>8)
 19101 00002F64 7406                    	JZ	short LocalClose
 19102                                  
 19103                                  	;CallInstall Net_Close,MultNET,6
 19104 00002F66 B80611                  	mov     ax,1106h
 19105 00002F69 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 19106                                  			; ES:DI -> SFT
 19107                                  			; SFT DPB field -> DPB of drive containing file
 19108                                  			; Return: CF set on error, AX = DOS error code
 19109                                  			; CF clear if successful
 19110 00002F6B C3                      	retn
 19111                                  
 19112                                  ; All closes release the sharing information.
 19113                                  ; No commit releases sharing information
 19114                                  ;
 19115                                  ; All closes decrement the ref count.
 19116                                  ; No commit decrements the ref count.
 19117                                  
 19118                                  LocalClose:
 19119 00002F6C E8A7E3                  	call	ECritDisk
 19120 00002F6F E86401                  	CALL	SetSFTTimes
 19121 00002F72 E8E200                  	CALL	FREE_SFT		; dec ref count or mark as busy
 19122                                  
 19123                                  ;hkn; SS is DOSDATA
 19124                                  	;Context DS
 19125 00002F75 16                      	push	ss
 19126 00002F76 1F                      	pop	ds
 19127                                  
 19128 00002F77 50                      	push	ax
 19129 00002F78 53                      	push	bx
 19130 00002F79 E81A44                  	call	ShareEnd
 19131 00002F7C 5B                      	pop	bx
 19132 00002F7D 58                      	pop	ax
 19133                                  
 19134                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 19135                                  
 19136                                  CloseEntry:
 19137 00002F7E 50                      	PUSH	AX
 19138                                  
 19139                                  ; File clean or device does not get stamped nor disk looked at.
 19140                                  
 19141                                  	;test	bx,0C0h
 19142                                  	; 17/12/2022
 19143 00002F7F F6C3C0                  	test	bl,devid_file_clean+devid_device
 19144                                  	;TEST	BX,devid_file_clean+devid_device
 19145 00002F82 7403                    	JZ	short rdir
 19146                                  	; 14/11/2022
 19147 00002F84 E9BD00                  	JMP	FREE_SFT_OK		; either clean or device
 19148                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19149                                  
 19150                                  ; Retrieve the directory entry for the file
 19151                                  
 19152                                  rdir:
 19153 00002F87 E8DA00                  	CALL	DirFromSFT
 19154                                  	;mov	al,5
 19155 00002F8A B005                    	MOV	AL,error_access_denied
 19156 00002F8C 7303                    	JNC	short clook
 19157                                  	; 14/11/2022
 19158 00002F8E E9B400                  	JMP	CloseFinish		; pretend the close worked.
 19159                                  	;jc	short CloseFinish ; 24/07/2019
 19160                                  clook:
 19161                                  
 19162                                  ; ES:DI points to entry
 19163                                  ; DS:SI points to SFT
 19164                                  ; ES:BX points to buffer header
 19165                                  
 19166 00002F91 57                      	push	di
 19167 00002F92 56                      	push	si
 19168                                  	;lea	si,[si+20h]
 19169 00002F93 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19170                                  
 19171                                  ; ES:DI point to directory entry
 19172                                  ; DS:SI point to unpacked name
 19173                                  
 19174 00002F96 E86DE2                  	call	XCHGP
 19175                                  
 19176                                  ; ES:DI point to unpacked name
 19177                                  ; DS:SI point to directory entry
 19178                                  
 19179 00002F99 E8B60E                  	call	MetaCompare
 19180 00002F9C E867E2                  	call	XCHGP
 19181 00002F9F 5E                      	pop	si
 19182 00002FA0 5F                      	pop	di
 19183 00002FA1 740C                    	JZ	short CLOSE_GO		; Name OK
 19184                                  Bye:	
 19185 00002FA3 89F7                    	MOV	DI,SI
 19186 00002FA5 1E                      	PUSH	DS
 19187 00002FA6 07                      	POP	ES			; ES:DI points to SFT
 19188 00002FA7 16                      	PUSH	SS
 19189 00002FA8 1F                      	POP	DS
 19190 00002FA9 F9                      	STC
 19191                                  	;mov	al,2
 19192 00002FAA B002                    	MOV	AL,error_file_not_found
 19193 00002FAC E99600                  	JMP	CloseFinish ; 24/07/2019
 19194                                  
 19195                                  	; 18/05/2019 - Retro DOS v4.0
 19196                                  CLOSE_GO:
 19197                                  	; MSDOS 6.0
 19198                                  	;test	word [si+2],8000h
 19199                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19200                                  	; 17/12/2022
 19201                                  	;test	byte [si+3],80h
 19202 00002FAF F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19203 00002FB3 740D                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19204                                  	; MSDOS 3.3 & MSDOS 6.0
 19205                                  	;mov	ch,[es:di+0Bh]
 19206 00002FB5 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19207                                  	;mov	al,[si+4]
 19208 00002FB9 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr]
 19209                                  
 19210                                  ;hkn; SS override
 19211 00002FBC 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19212                                  	; MSDOS 3.3
 19213                                  	;;call	MatchAttributes
 19214                                  	;;JNZ	short Bye		; attributes do not match
 19215                                  	; 18/05/2019
 19216 00002FC0 EB07                    	JMP	SHORT setattr		;FT.
 19217                                  nofcb:
 19218                                  	; MSDOS 6.0
 19219                                  	;mov	al,[si+4]
 19220 00002FC2 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19221 00002FC5 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19222                                  setattr:
 19223                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19224                                  	;or	byte [es:di+0Bh],20h
 19225 00002FC9 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19226                                  	; MSDOS 6.0
 19227                                  	;mov	ax,[es:di+1Ah]
 19228 00002FCE 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19229                                  					;F.O. save old first cluster
 19230                                  ;hkn; SS override
 19231 00002FD2 36A3[BE0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19232                                  
 19233                                  	;mov	ax,[si+0Bh]
 19234 00002FD6 8B440B                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19235                                  	;mov	[es:di+1Ah],ax
 19236 00002FD9 2689451A                	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19237                                  	;mov	ax,[si+11h]
 19238 00002FDD 8B4411                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19239                                  	;mov	[es:di+1Ch],ax
 19240 00002FE0 2689451C                	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19241                                  	;mov	ax,[si+13h]
 19242 00002FE4 8B4413                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19243                                  	;mov	[es:di+1Eh],ax
 19244 00002FE7 2689451E                	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19245                                  	;mov	ax,[si+0Fh]
 19246 00002FEB 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19247                                  	;mov	[es:di+18h],ax
 19248 00002FEE 26894518                	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19249                                  	;mov	ax,[si+0Dh]
 19250 00002FF2 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19251                                  	;mov	[es:di+16h],ax
 19252 00002FF5 26894516                	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19253                                  
 19254                                  	; MSDOS 6.0
 19255                                  ;; File Tagging
 19256 00002FF9 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty  
 19257                                  				  ;LB. if already dirty		    ;AN000;
 19258 00002FFE 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19259                                  	; 02/06/2019
 19260 00003000 E8752B                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19261                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19262                                  	;or	byte [es:bx+5],40h
 19263 00003003 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19264                                  yesdirty4:
 19265 00003008 1E                      	push	ds
 19266 00003009 56                      	push	si
 19267                                  	; MSDOS 6.0
 19268                                  	;mov	cx,[si+0Bh]
 19269                                  	; 07/12/2022
 19270 0000300A 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19271                                  ;hkn; SS override
 19272 0000300D 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19273                                  	; MSDOS 3.3 
 19274                                  	;push	ss
 19275                                  	;pop	ds
 19276                                  	;MOV	AL,[THISDRV]
 19277                                  ;;; 10/1/86  update fastopen cache
 19278                                  	; MSDOS 3.3 & MSDOS 6.0
 19279 00003011 52                      	PUSH	DX
 19280 00003012 B400                    	MOV	AH,0			; dir entry update
 19281 00003014 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19282                                  	; MSDOS 6.0
 19283 00003016 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19284 00003018 750D                    	JNZ	short do_update2	;AN005; no, do update
 19285 0000301A B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19286                                  	;mov	di,[si+1Bh]
 19287 0000301C 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19288                                  	;mov	cx,[si+1Dh]
 19289 0000301F 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19290                                  	;mov	dh,[si+1Fh]
 19291 00003022 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19292 00003025 EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19293                                  do_update2:				;AN011;F.O.
 19294                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19295                                  	; 
 19296 00003027 363B0E[BE0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19297 0000302C 7407                    	JZ	short do_update		;AN011;F.O. yes
 19298 0000302E B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19299 00003030 368B0E[BE0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19300                                  do_update:				;AN005;
 19301                                  ;hkn; SS is DOSDATA
 19302                                  	;Context DS
 19303 00003035 16                      	push	ss
 19304 00003036 1F                      	pop	ds	
 19305                                  	; MSDOS 3.3 & MSDOS 6.0
 19306 00003037 E8E5F6                  	call	FastOpen_Update 	; invoke fastopen
 19307 0000303A 5A                      	POP	DX
 19308                                  
 19309                                  ;;; 10/1/86  update fastopen cache
 19310 0000303B E8352A                  	call	FLUSHBUF		; flush all relevant buffers
 19311 0000303E 5F                      	pop	di
 19312 0000303F 07                      	pop	es
 19313                                  	;mov	al,5
 19314 00003040 B005                    	MOV	AL,error_access_denied
 19315 00003042 7201                    	JC	short CloseFinish
 19316                                  FREE_SFT_OK:
 19317 00003044 F8                      	CLC				; signal no error.
 19318                                  CloseFinish:
 19319                                  
 19320                                  ; Indicate to the device that the SFT is being closed.
 19321                                  
 19322                                  ;;;; 7/21/86
 19323 00003045 9C                      	PUSHF				; save flag from DirFromSFT
 19324 00003046 E8D215                  	call	DEV_CLOSE_SFT
 19325 00003049 9D                      	POPF
 19326                                  ;;;; 7/21/86
 19327                                  ;
 19328                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19329                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19330                                  ; going to be moving from busy to free.
 19331                                  ;
 19332 0000304A 59                      	POP	CX			; get old ref count
 19333 0000304B 9C                      	PUSHF
 19334 0000304C 49                      	DEC	CX			; if cx != 1
 19335 0000304D 7503                    	JNZ	short NoFree		; then do NOT free SFT
 19336 0000304F 26890D                  	mov	[es:di],cx
 19337                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19338                                  NoFree:
 19339 00003052 E8DCE2                  	call	LCritDisk
 19340 00003055 9D                      	POPF
 19341 00003056 C3                      	retn
 19342                                  
 19343                                  ;---------------------------------------------------------------------------
 19344                                  ;
 19345                                  ; Procedure Name : FREE_SFT
 19346                                  ;
 19347                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19348                                  ; Flags preserved. Return old ref count in AX
 19349                                  ;
 19350                                  ; Note that busy is indicated by the SFT ref count being -1.
 19351                                  ;
 19352                                  ;---------------------------------------------------------------------------
 19353                                  
 19354                                  FREE_SFT:
 19355 00003057 9C                      	PUSHF		; Save carry state
 19356 00003058 268B05                  	mov	ax,[es:di]
 19357                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19358 0000305B 48                      	DEC	AX
 19359 0000305C 7501                    	JNZ	short SetCount
 19360 0000305E 48                      	DEC	AX
 19361                                  SetCount:
 19362 0000305F 268705                  	xchg	ax,[es:di]
 19363                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19364 00003062 9D                      	POPF
 19365 00003063 C3                      	retn
 19366                                  
 19367                                  	; 18/05/2019 - Retro DOS v4.0
 19368                                  
 19369                                  ;----------------------------------------------------------------------------
 19370                                  ;
 19371                                  ; Procedure Name : DirFromSFT
 19372                                  ;
 19373                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19374                                  ;
 19375                                  ;   Inputs:	ES:DI point to SFT
 19376                                  ;		DS = DOSDATA
 19377                                  ;   Outputs:
 19378                                  ;		EXTERR_LOCUS = errLOC_Disk
 19379                                  ;		CurBuf points to buffer
 19380                                  ;		Carry Clear -> operation OK
 19381                                  ;		    ES:DI point to entry
 19382                                  ;		    ES:BX point to buffer
 19383                                  ;		    DS:SI point to SFT
 19384                                  ;		Carry SET   -> operation failed
 19385                                  ;		    registers trashified
 19386                                  ;   Registers modified: ALL
 19387                                  ;----------------------------------------------------------------------------
 19388                                  
 19389                                  DirFromSFT:
 19390                                  	;mov	byte [EXTERR_LOCUS],2
 19391 00003064 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19392 00003069 06                      	push	es
 19393 0000306A 57                      	push	di
 19394                                  	; MSDOS 3.3
 19395                                  	;;mov	dx,[es:di+1Dh]
 19396                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19397                                  	; MSDOS 6.0
 19398                                  	;mov	dx,[es:[di+1Dh]
 19399 0000306B 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19400 0000306F 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19401                                  	;mov	dx,[es:di+1Bh]
 19402 00003073 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19403                                  	; 19/05/2019
 19404 00003077 FF36[0706]              	PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19405                                  	; MSDOS 3.3 & MSDOS 6.0
 19406 0000307B 52                      	PUSH	DX
 19407 0000307C E86B26                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19408                                  					; [THISDPB] set
 19409 0000307F 5A                      	POP	DX
 19410 00003080 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19411 00003084 721E                    	JC	short PopDone
 19412                                  	; 22/09/2023
 19413                                  	;XOR	AL,AL	; *		; Pre read
 19414                                  	;;mov	byte [ALLOWED],18h
 19415                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19416                                  	;call	GETBUFFR
 19417                                  	; 22/09/2023
 19418 00003086 E8E628                  	call	GETBUFFER ; * 		; Pre read
 19419 00003089 7219                    	JC	short PopDone
 19420 0000308B 5E                      	pop	si
 19421 0000308C 1F                      	pop	ds			; Get back SFT pointer
 19422                                  
 19423                                  ;hkn; SS override
 19424 0000308D 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19425                                  	;or	byte [es:di+5],4
 19426 00003092 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19427 00003097 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19428                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19429                                  	;lea	di,[di+20] ; MSDOS 6.0
 19430 00003099 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19431                                  	;mov	al,32
 19432 0000309C B020                    	MOV	AL,dir_entry.size
 19433                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19434 0000309E F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19435 000030A1 01C7                    	ADD	DI,AX			; Point at the entry
 19436 000030A3 C3                      	retn				; carry is clear
 19437                                  PopDone:
 19438 000030A4 5F                      	pop	di
 19439 000030A5 07                      	pop	es
 19440                                  PopDone_retn:
 19441 000030A6 C3                      	retn
 19442                                  
 19443                                  ;----------------------------------------------------------------------------
 19444                                  ;
 19445                                  ;**	DOS_Commit - UPdate Directory Entries
 19446                                  ;
 19447                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19448                                  ;		(DS) = DOSGROUP
 19449                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19450                                  ;	USES	all but DS
 19451                                  ;
 19452                                  ;----------------------------------------------------------------------------
 19453                                  
 19454                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19455                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19456                                  
 19457                                  DOS_COMMIT:
 19458                                  	;hkn; called from srvcall. DS already set up.
 19459 000030A7 C43E[9E05]              	LES	DI,[THISSFT]
 19460                                  	;mov	bx,[es:di+5]
 19461 000030AB 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19462                                  	;test	bx,0C0h
 19463                                  	; 17/12/2022
 19464 000030AF F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19465                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19466 000030B2 75F2                    	jnz	short PopDone_retn
 19467                                  	;test	bx,8000h
 19468                                  	; 17/12/2022
 19469                                  	;test	bh,80h
 19470 000030B4 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19471                                  	;TEST	BX,sf_isnet ; 8000h
 19472 000030B7 7406                    	JZ	short LOCAL_COMMIT
 19473                                  
 19474                                  ;IF NOT Installed
 19475                                  ;	transfer NET_COMMIT
 19476                                  ;ELSE
 19477                                  	;mov	ax,1107h
 19478 000030B9 B80711                  	MOV	AX,(MultNET<<8)|7
 19479 000030BC CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19480                                  			; ES:DI -> SFT
 19481                                  			; SFT DPB field -> DPB of drive containing file
 19482                                  			; Return: CF set on error, AX = DOS error code
 19483                                  			; CF clear if successful
 19484                                  localcommit_retn: ; 18/12/2022	
 19485 000030BE C3                      	retn
 19486                                  ;ENDIF
 19487                                  
 19488                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19489                                  ; There are three ways we can do this. One is to enter a critical section to
 19490                                  ; protect a potential free. The second is to increment the ref count to mask
 19491                                  ; the close decrementing.
 19492                                  ;
 19493                                  ; The proper way is to let the caller's of close decide if a decrement should
 19494                                  ; be done. We do this by providing another entry into close after the
 19495                                  ; decrement and after the share information release.
 19496                                  
 19497                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 19498                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 19499                                  
 19500                                  LOCAL_COMMIT:
 19501 000030BF E854E2                  	call	ECritDisk
 19502                                  	; MSDOS 6.0
 19503 000030C2 E851E2                  	call	ECritDisk	;PTM.
 19504 000030C5 E80E00                  	call	SetSFTTimes
 19505 000030C8 B8FFFF                  	MOV	AX,-1
 19506 000030CB E8B0FE                  	call	CloseEntry
 19507                                  	; MSDOS 6.0
 19508 000030CE 9C                      	PUSHF			;PTM.				;AN000;
 19509 000030CF E84115                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 19510 000030D2 9D                      	POPF			;PTM.				;AN000;
 19511                                  	;call	LCritDisk	;PTM.				;AN000;
 19512                                  	; 18/12/2022
 19513 000030D3 E95BE2                  	jmp	LCritDisk
 19514                                  ;localcommit_retn:
 19515                                  ;	retn
 19516                                  
 19517                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 19518                                  ;----------------------------------------------------------------------------
 19519                                  ;
 19520                                  ; Procedure Name : SetSFTTimes
 19521                                  ;
 19522                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 19523                                  ;   Reflect these times in other SFT's for the same file.
 19524                                  ;
 19525                                  ;   Inputs:	ES:DI point to SFT
 19526                                  ;		BX = sf_flags set apprpriately
 19527                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 19528                                  ;   Registers modified: All except ES:DI, BX, AX
 19529                                  ;
 19530                                  ;----------------------------------------------------------------------------
 19531                                  
 19532                                  SetSFTTimes:
 19533                                  ;	File clean or device does not get stamped nor disk looked at.
 19534                                  	
 19535                                  	;test	bx,0C0h
 19536                                  	; 17/12/2022
 19537 000030D6 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19538                                  	;TEST	BX,devid_file_clean+devid_device
 19539                                  	;retnz				; clean or device => no timestamp
 19540 000030D9 75E3                    	jnz	short localcommit_retn
 19541                                  
 19542                                  ;	file and dirty. See if date is good
 19543                                  
 19544                                  	;test	bx,4000h
 19545                                  	; 17/12/2022
 19546                                  	;test	bh,40h
 19547 000030DB F6C740                  	test	bh,(sf_close_nodate>>8)
 19548                                  	;TEST	BX,sf_close_nodate
 19549                                  	;retnz				; nodate => no timestamp
 19550 000030DE 75DE                    	jnz	short localcommit_retn
 19551                                  
 19552 000030E0 50                      	push	ax
 19553 000030E1 53                      	push	bx
 19554 000030E2 E810DA                  	call	DATE16			; Date/Time to AX/DX
 19555                                  	;mov	[es:di+0Fh],ax
 19556 000030E5 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 19557                                  	;mov	[es:di+0Dh],dx
 19558 000030E9 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 19559 000030ED 31C0                    	XOR	AX,AX
 19560                                  ;if installed
 19561                                  	;call	JShare + 14 * 4
 19562 000030EF FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 19563                                  ;else
 19564                                  ;	call	ShSU
 19565                                  ;endif
 19566 000030F3 5B                      	pop	bx
 19567 000030F4 58                      	pop	ax
 19568 000030F5 C3                      	retn
 19569                                  
 19570                                  ;============================================================================
 19571                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 19572                                  ;============================================================================
 19573                                  ; 23/07/2018 - Retro DOS v3.0
 19574                                  ; 18/05/2019 - Retro DOS v4.0
 19575                                  
 19576                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 19577                                  
 19578                                  ;TITLE DIRCALL - Directory manipulation internal calls
 19579                                  ;NAME  DIRCALL
 19580                                  
 19581                                  ;**	Low level directory manipulation routines for making removing and
 19582                                  ;	  verifying local or NET directories
 19583                                  ;
 19584                                  ;	DOS_MKDIR
 19585                                  ;	DOS_CHDIR
 19586                                  ;	DOS_RMDIR
 19587                                  ;
 19588                                  ;	Modification history:
 19589                                  ;
 19590                                  ;		Created: ARR 30 March 1983
 19591                                  
 19592                                  ;BREAK <DOS_MkDir - Make a directory entry>
 19593                                  ;---------------------------------------------------------------------------
 19594                                  ;
 19595                                  ; Procedure Name : DOS_MkDir
 19596                                  ;
 19597                                  ; Inputs:
 19598                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19599                                  ;		terminated)
 19600                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19601                                  ;		( = -1 if current dir not involved, else
 19602                                  ;		 Points to first char after last "/" of current dir part)
 19603                                  ;	[THISCDS] Points to CDS being used
 19604                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19605                                  ; Function:
 19606                                  ;	Make a new directory
 19607                                  ; Returns:
 19608                                  ;	Carry Clear
 19609                                  ;		No error
 19610                                  ;	Carry Set
 19611                                  ;	    AX is error code
 19612                                  ;		error_path_not_found
 19613                                  ;			Bad path (not in curr dir part if present)
 19614                                  ;		error_bad_curr_dir
 19615                                  ;			Bad path in current directory part of path
 19616                                  ;		error_access_denied
 19617                                  ;			Already exists, device name
 19618                                  ; DS preserved, Others destroyed
 19619                                  ;---------------------------------------------------------------------------
 19620                                  
 19621                                  ;hkn; called from path.asm. DS already set up.
 19622                                  
 19623                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19624                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 19625                                  
 19626                                  DOS_MKDIR:
 19627 000030F6 E859E1                  	call	TestNet
 19628 000030F9 7313                    	JNC	short LOCAL_MKDIR
 19629                                  
 19630                                  ;IF NOT Installed
 19631                                  ;	transfer NET_MKDIR
 19632                                  ;ELSE
 19633                                  	;mov	ax,1103h
 19634 000030FB B80311                  	MOV	AX,(MultNET<<8)|3
 19635 000030FE CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 19636                                  			; SS = DOS CS
 19637                                  			; SDA first filename pointer -> fully-qualified directory name
 19638                                  			; SDA CDS pointer -> current directory
 19639                                  			; Return: CF set on error, AX = DOS error code
 19640                                  			; CF clear if successful
 19641 00003100 C3                      	retn
 19642                                  ;ENDIF
 19643                                  
 19644                                  NODEACCERRJ:
 19645                                  	;mov	ax,5
 19646 00003101 B80500                  	MOV	AX,error_access_denied
 19647                                  _BadRet:
 19648 00003104 F9                      	STC
 19649                                  	;call	LCritDisk
 19650                                  	;retn
 19651                                  	; 18/12/2022
 19652 00003105 E929E2                  	jmp	LCritDisk
 19653                                  
 19654                                  PATHNFJ:
 19655 00003108 E826E2                  	call	LCritDisk
 19656 0000310B E9EFF9                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 19657                                  
 19658                                  LOCAL_MKDIR:
 19659 0000310E E805E2                  	call	ECritDisk
 19660                                  
 19661                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 19662                                  
 19663 00003111 8C16[A005]              	MOV	[THISSFT+2],SS
 19664                                  
 19665                                  ;hkn; DOSDATA
 19666 00003115 C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 19667                                  
 19668                                  ;  NOTE: Need WORD PTR because MASM takes type of
 19669                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 19670                                  
 19671                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 19672 0000311B C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 19673                                  				; make sure SHARER won't complain.
 19674                                  	;mov	al,10h
 19675 00003121 B010                    	MOV	AL,attr_directory
 19676 00003123 E88C18                  	call	MakeNode
 19677 00003126 72E0                    	JC	short PATHNFJ
 19678 00003128 83F803                  	CMP	AX,3
 19679 0000312B 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 19680 0000312D C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 19681 00003131 C53E[E205]              	LDS	DI,[CURBUF]
 19682 00003135 29FE                    	SUB	SI,DI
 19683 00003137 56                      	PUSH	SI		; Pointer to dir_first
 19684                                  	; MSDOS 6.0
 19685                                  	;push	word [DI+8]
 19686 00003138 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 19687                                  	; MSDOS 3.3 & MSDOS 6.0
 19688                                  	;push	word [di+6]
 19689 0000313B FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 19690 0000313E 16                      	push	ss
 19691 0000313F 1F                      	pop	ds
 19692 00003140 FF36[C205]              	PUSH	word [DIRSTART]	; Parent for .. entry
 19693 00003144 31C0                    	XOR	AX,AX
 19694 00003146 A3[C205]                	MOV	[DIRSTART],AX	; Null directory
 19695 00003149 E8A217                  	call	NEWDIR
 19696 0000314C 726F                    	JC	short NODEEXISTSPOPDEL ; No room
 19697 0000314E E8680D                  	call	GETENT		; First entry
 19698 00003151 726A                    	JC	short NODEEXISTSPOPDEL ; Screw up
 19699 00003153 C43E[E205]              	LES	DI,[CURBUF]
 19700                                  
 19701                                  	; MSDOS 6.0
 19702 00003157 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 19703                                  				 ;LB. if already dirty		    ;AN000;
 19704 0000315C 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 19705 0000315E E8172A                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 19706                                  	
 19707                                  	; MSDOS 3.3 & MSDOS 6.0
 19708                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 19709 00003161 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 19710                                  yesdirty5:
 19711                                  	;;add	di,16 ; MSDOS 3.3
 19712                                  	;add	di,20 ; MSDOS 6.0
 19713 00003166 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 19714 00003169 B82E20                  	MOV	AX,202EH	; ". "
 19715 0000316C 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 19716 00003170 E81B18                  	call	SETDOTENT
 19717 00003173 B82E2E                  	MOV	AX,2E2EH	; ".."
 19718 00003176 5A                      	POP	DX		; Parent
 19719 00003177 E81418                  	call	SETDOTENT
 19720 0000317A C42E[8A05]              	LES	BP,[THISDPB]
 19721                                  	; 22/09/2023
 19722                                  	;;mov	byte [ALLOWED],18h
 19723                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19724 0000317E 5A                      	POP	DX		; Entry sector
 19725                                  	; MSDOS 6.0
 19726 0000317F 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 19727                                  
 19728                                  	;XOR	AL,AL ; *	; Pre read
 19729                                  	;call	GETBUFFR
 19730                                  	; 22/09/2023
 19731 00003183 E8E927                  	call	GETBUFFER ; *	 ;Pre read
 19732 00003186 725B                    	JC	short NODEEXISTSP
 19733 00003188 8B16[C205]              	MOV	DX,[DIRSTART]
 19734 0000318C C53E[E205]              	LDS	DI,[CURBUF]
 19735                                  	;or	byte [di+5],4
 19736 00003190 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19737 00003194 5E                      	POP	SI		; dir_first pointer
 19738 00003195 01FE                    	ADD	SI,DI
 19739 00003197 8914                    	MOV	[SI],DX
 19740 00003199 31D2                    	XOR	DX,DX
 19741 0000319B 895402                  	MOV	[SI+2],DX	; Zero size
 19742 0000319E 895404                  	MOV	[SI+4],DX
 19743                                  DIRUP:
 19744                                  	; MSDOS 6.0
 19745 000031A1 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 19746                                  	;			 ;LB. if already dirty 		   ;AN000;
 19747 000031A5 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 19748 000031A7 E8CE29                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 19749                                  	
 19750                                  	; MSDOS 3.3 & MSDOS 6.0
 19751                                  	;or	byte [di+5],40h
 19752 000031AA 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 19753                                  yesdirty6:
 19754 000031AE 16                      	push	ss
 19755 000031AF 1F                      	pop	ds
 19756 000031B0 268A4600                	mov	al,[es:bp]
 19757                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 19758 000031B4 E8BC28                  	call	FLUSHBUF
 19759                                  	;mov	ax,5
 19760 000031B7 B80500                  	MOV	AX,error_access_denied
 19761                                  	;call	LCritDisk
 19762                                  	;retn
 19763                                  	; 18/12/2022
 19764 000031BA E974E1                  	jmp	LCritDisk
 19765                                  
 19766                                  NODEEXISTSPOPDEL:
 19767 000031BD 5A                      	POP	DX		; Parent
 19768 000031BE 5A                      	POP	DX		; Entry sector
 19769                                  	; MSDOS 6.0 
 19770 000031BF 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 19771 000031C3 C42E[8A05]              	LES	BP,[THISDPB]
 19772                                  	; 22/09/2023
 19773                                  	;;mov	byte [ALLOWED],18h
 19774                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19775                                  	;XOR	AL,AL ; *	; Pre read
 19776                                  	;call	GETBUFFR
 19777                                  	; 22/09/2023
 19778 000031C7 E8A527                  	call	GETBUFFER ; *	; Pre read
 19779 000031CA 7217                    	JC	short NODEEXISTSP
 19780 000031CC C53E[E205]              	LDS	DI,[CURBUF]
 19781                                  	;or	byte [di+5],4
 19782 000031D0 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19783 000031D4 5E                      	POP	SI		; dir_first pointer
 19784 000031D5 01FE                    	ADD	SI,DI
 19785                                  	;sub	si,1Ah ; 26
 19786 000031D7 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 19787 000031DA C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 19788 000031DD E8C1FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 19789                                  NODEEXISTS:
 19790 000031E0 E91EFF                  	JMP	NODEACCERRJ ; 10/08/2018
 19791                                  
 19792                                  NODEEXISTSP:
 19793 000031E3 5E                      	POP	SI		; Clean stack
 19794 000031E4 EBFA                    	JMP	short NODEEXISTS
 19795                                  
 19796                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19797                                  
 19798                                  ;BREAK <DOS_ChDir -- Verify a directory>
 19799                                  ;----------------------------------------------------------------------------
 19800                                  ;
 19801                                  ; Procedure Name : DOS_ChDir
 19802                                  ;
 19803                                  ; Inputs:
 19804                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19805                                  ;		terminated)
 19806                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19807                                  ;		( = -1 if current dir not involved, else
 19808                                  ;		 Points to first char after last "/" of current dir part)
 19809                                  ;	[THISCDS] Points to CDS being used May not be NUL
 19810                                  ; Function:
 19811                                  ;	Validate the path for potential new current directory
 19812                                  ; Returns:
 19813                                  ;	NOTE:
 19814                                  ;	    [SATTRIB] is modified by this call
 19815                                  ;	Carry Clear
 19816                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 19817                                  ;		Caller must NOT set ID fields on a NET CDS.
 19818                                  ;	Carry Set
 19819                                  ;	    AX is error code
 19820                                  ;		error_path_not_found
 19821                                  ;			Bad path
 19822                                  ;		error_access_denied
 19823                                  ;			device or file name
 19824                                  ; DS preserved, Others destroyed
 19825                                  ;----------------------------------------------------------------------------
 19826                                  
 19827                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 19828                                  
 19829                                  ; 18/05/2019 - Retro DOS v4.0
 19830                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 19831                                  
 19832                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19833                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 19834                                  
 19835                                  DOS_CHDIR:
 19836 000031E6 E869E0                  	call	TestNet
 19837 000031E9 7306                    	JNC	short LOCAL_CHDIR
 19838                                  
 19839                                  ;IF NOT Installed
 19840                                  ;	transfer NET_CHDIR
 19841                                  ;ELSE
 19842                                  	;mov	ax,1105h
 19843 000031EB B80511                  	MOV	AX,(MultNET<<8)|5
 19844 000031EE CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 19845                                  			; SS = DOS CS
 19846                                  			; SDA first filename pointer -> fully-qualified directory name
 19847                                  			; SDA CDS pointer -> current directory
 19848                                  			; Return: CF set on error, AX = DOS error code
 19849                                  			; CF clear if successful
 19850 000031F0 C3                      	retn
 19851                                  ;ENDIF
 19852                                  
 19853                                  LOCAL_CHDIR:
 19854 000031F1 E822E1                  	call	ECritDisk
 19855                                  	; MSDOS 6.0
 19856                                  	;;test	word [es:di+43h],2000h
 19857                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 19858                                  	; 17/12/2022
 19859                                  	;test	byte [es:di+44h],20h
 19860 000031F4 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 19861 000031F9 7406                    	JZ	short nojoin		   ;PTM.
 19862                                  	;mov	word [es:di+49h], 0FFFFh
 19863 000031FB 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 19864                                  nojoin:
 19865                                  	; MSDOS 3.3 & MSDOS 6.0
 19866 00003201 C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 19867                                  	;mov	byte [SATTRIB],16h
 19868 00003206 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 19869                                  				; Dir calls can find these
 19870                                  ; DOS 3.3  6/24/86 FastOpen
 19871 0000320B 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 19872 00003210 E8320D                  	call	GETPATH
 19873 00003213 9C                      	PUSHF						;AN000;
 19874 00003214 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 19875 00003219 9D                      	POPF						;AN000;
 19876                                  ; DOS 3.3  6/24/86 FastOpen
 19877                                  
 19878                                  	; MSDOS 3.3
 19879                                  	;mov	byte [FastOpenFlg],0
 19880                                  	
 19881                                  	;mov	ax,3
 19882 0000321A B80300                  	MOV	AX,error_path_not_found
 19883 0000321D 7207                    	JC	short ChDirDone
 19884 0000321F 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 19885 00003221 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 19886 00003225 F8                      	CLC
 19887                                  ChDirDone:
 19888                                  	;call	LCritDisk
 19889                                  	;retn
 19890                                  	; 18/12/2022
 19891 00003226 E908E1                  	jmp	LCritDisk
 19892                                  
 19893                                  ;BREAK <DOS_RmDir -- Remove a directory>
 19894                                  ;----------------------------------------------------------------------------
 19895                                  ;
 19896                                  ; Procedure Name : DOS_RmDir
 19897                                  ;
 19898                                  ; Inputs:
 19899                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19900                                  ;		terminated)
 19901                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19902                                  ;		( = -1 if current dir not involved, else
 19903                                  ;		 Points to first char after last "/" of current dir part)
 19904                                  ;	[THISCDS] Points to CDS being used
 19905                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19906                                  ; Function:
 19907                                  ;	Remove a directory
 19908                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 19909                                  ; Returns:
 19910                                  ;	NOTE:
 19911                                  ;	    [SATTRIB] is modified by this call
 19912                                  ;	Carry Clear
 19913                                  ;		No error
 19914                                  ;	Carry Set
 19915                                  ;	    AX is error code
 19916                                  ;		error_path_not_found
 19917                                  ;			Bad path (not in curr dir part if present)
 19918                                  ;		error_bad_curr_dir
 19919                                  ;			Bad path in current directory part of path
 19920                                  ;		error_access_denied
 19921                                  ;			device or file name, root directory
 19922                                  ;			Bad directory ('.' '..' messed up)
 19923                                  ; DS preserved, Others destroyed
 19924                                  ;----------------------------------------------------------------------------
 19925                                  
 19926                                  ;hkn; called from path.asm. DS already set up.
 19927                                  
 19928                                  ; 18/05/2019 - Retro DOS v4.0
 19929                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 19930                                  
 19931                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19932                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 19933                                  
 19934                                  DOS_RMDIR:
 19935 00003229 E826E0                  	call	TestNet
 19936 0000322C 7306                    	JNC	short LOCAL_RMDIR
 19937                                  
 19938                                  ;IF NOT Installed
 19939                                  ;	transfer NET_RMDIR
 19940                                  ;ELSE
 19941                                  	;mov	ax,1101h
 19942 0000322E B80111                  	MOV	AX,(MultNET<<8)|1
 19943 00003231 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 19944                                  			; SS = DOS CS
 19945                                  			; SDA first filename pointer -> fully-qualified directory name
 19946                                  			; SDA CDS pointer -> current directory
 19947                                  			; Return: CF set on error, AX = DOS error code
 19948                                  			; CF clear if successful
 19949 00003233 C3                      	retn
 19950                                  ;ENDIF
 19951                                  
 19952                                  LOCAL_RMDIR:
 19953 00003234 E8DFE0                  	call	ECritDisk
 19954 00003237 C606[4C03]00            	MOV	byte [NoSetDir],0
 19955                                  	;mov	byte [SATTRIB],16h
 19956 0000323C C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 19957                                  					; Dir calls can find these
 19958 00003241 E8010D                  	call	GETPATH
 19959 00003244 720C                    	JC	short NOPATH		; Path not found
 19960 00003246 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 19961 00003248 8B3E[C205]              	MOV	DI,[DIRSTART]
 19962 0000324C 09FF                    	OR	DI,DI			; Root ?
 19963 0000324E 750E                    	JNZ	short rmdir_get_buf	; No
 19964 00003250 EB09                    	JMP	SHORT NOTDIRPATH
 19965                                  
 19966                                  NOPATH:
 19967                                  	;mov	ax,3
 19968 00003252 B80300                  	MOV	AX,error_path_not_found
 19969 00003255 E9ACFE                  	JMP	_BadRet
 19970                                  
 19971                                  NOTDIRPATHPOP:
 19972 00003258 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 19973 00003259 58                      	POP	AX
 19974                                  NOTDIRPATHPOP2:
 19975 0000325A 58                      	POP	AX
 19976                                  NOTDIRPATH:
 19977 0000325B E9A3FE                  	JMP	NODEACCERRJ
 19978                                  
 19979                                  rmdir_get_buf:
 19980 0000325E C53E[E205]              	LDS	DI,[CURBUF]
 19981 00003262 29FB                    	SUB	BX,DI		; Compute true offset
 19982 00003264 53                      	PUSH	BX		; Save entry pointer
 19983                                  	
 19984                                  	; MSDOS 6.0
 19985                                  	;push	word [di+8]
 19986 00003265 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 19987                                  	
 19988                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19989                                  	;push	word [di+6]
 19990 00003268 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 19991                                  
 19992                                  ;hkn; SS is DOSDATA
 19993                                  	;context DS
 19994 0000326B 16                      	push	ss
 19995 0000326C 1F                      	pop	ds
 19996                                  	;context ES
 19997 0000326D 16                      	push	ss
 19998 0000326E 07                      	pop	es
 19999                                  
 20000                                  ;hkn; NAME1 is in DOSDATA
 20001 0000326F BF[4B05]                	MOV	DI,NAME1
 20002 00003272 B03F                    	MOV	AL,'?'
 20003 00003274 B90B00                  	MOV	CX,11
 20004 00003277 F3AA                    	REP	STOSB
 20005 00003279 30C0                    	XOR	AL,AL
 20006 0000327B AA                      	STOSB				; Nul terminate it
 20007 0000327C E85A0F                  	call	STARTSRCH		; Set search
 20008 0000327F E8340C                  	call	GETENTRY		; Get start of directory
 20009 00003282 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 20010 00003284 8E1E[E405]              	MOV	DS,[CURBUF+2]
 20011 00003288 89DE                    	MOV	SI,BX
 20012 0000328A AD                      	LODSW
 20013                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 20014 0000328B 3D2E20                  	cmp	ax,202Eh ; ". "
 20015 0000328E 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 20016                                  	;add	si,30
 20017 00003290 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 20018 00003293 AD                      	LODSW
 20019                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 20020                                  	;cmp	ax, '..'
 20021 00003294 3D2E2E                  	cmp	ax,2E2Eh
 20022 00003297 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 20023                                  
 20024                                  ;hkn; SS is DOSDATA
 20025                                  	;context DS
 20026 00003299 16                      	push	ss
 20027 0000329A 1F                      	pop	ds
 20028 0000329B C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 20029 000032A1 E8120C                  	call	GETENTRY		; Get next entry
 20030 000032A4 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 20031                                  	;mov	byte [ATTRIB],16h
 20032 000032A6 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 20033 000032AB E8100B                  	call	SRCH			; Do a search
 20034 000032AE 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 20035 000032B0 803E[4A03]00            	CMP	byte [FAILERR],0
 20036 000032B5 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 20037 000032B7 C42E[8A05]              	LES	BP,[THISDPB]
 20038 000032BB 8B1E[C205]              	MOV	BX,[DIRSTART]
 20039 000032BF E8241C                  	call	RELEASE 		; Release data in sub dir
 20040 000032C2 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 20041 000032C4 5A                      	POP	DX			; Sector # of entry
 20042 000032C5 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 20043                                  	; 22/09/2023
 20044                                  	;;mov	byte [ALLOWED],18h
 20045                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20046                                  	;XOR	AL,AL ; *		; Pre read
 20047                                  	;call	GETBUFFR		; Get sector back
 20048 000032C9 E8A326                  	call	GETBUFFER ; *		; Pre Read
 20049 000032CC 728C                    	JC	short NOTDIRPATHPOP2	; Screw up
 20050 000032CE C53E[E205]              	LDS	DI,[CURBUF]
 20051                                  	;or	byte [di+5],4
 20052 000032D2 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20053 000032D6 5B                      	POP	BX			; Pointer to start of entry
 20054 000032D7 01FB                    	ADD	BX,DI			; Corrected
 20055 000032D9 C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 20056                                  
 20057                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20058 000032DC 1E                      	PUSH	DS
 20059                                  
 20060                                  ;hkn; SS is DOSDATA
 20061                                  	;context DS
 20062 000032DD 16                      	push	ss
 20063 000032DE 1F                      	pop	ds
 20064                                  
 20065                                  	; MSDOS 6.0
 20066 000032DF E80EF4                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 20067                                  
 20068                                  ;	; MSDOS 3.3
 20069                                  ;_FastOpen_Delete:
 20070                                  ;	push	ax
 20071                                  ;	mov	si,[WFP_START]
 20072                                  ;	mov	bx,FastTable
 20073                                  ;	;mov	al,3  ; FONC_delete
 20074                                  ;	mov	al,FONC_delete
 20075                                  ;	call	far [BX+2]  ; FastTable+2
 20076                                  ;	pop	ax
 20077                                  
 20078 000032E2 1F                      	POP	DS
 20079                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20080                                  
 20081 000032E3 E9BBFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 20082                                  
 20083                                  ;============================================================================
 20084                                  ; DISK.ASM, MSDOS 6.0, 1991
 20085                                  ;============================================================================
 20086                                  ; 23/07/2018 - Retro DOS v3.0 
 20087                                  ; 04/05/2019 - Retro DOS v4.0
 20088                                  
 20089                                  ;	TITLE	DISK - Disk utility routines
 20090                                  ;	NAME	Disk
 20091                                  
 20092                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 20093                                  ;
 20094                                  ;	SWAPCON
 20095                                  ;	SWAPBACK
 20096                                  ;	DOS_READ
 20097                                  ;	DOS_WRITE
 20098                                  ;	get_io_sft
 20099                                  ;	DirRead
 20100                                  ;	FIRSTCLUSTER
 20101                                  ;	SET_BUF_AS_DIR
 20102                                  ;	FATSecRd
 20103                                  ;	DREAD
 20104                                  ;	CHECK_WRITE_LOCK
 20105                                  ;	CHECK_READ_LOCK
 20106                                  ;
 20107                                  ;	Revision history:
 20108                                  ;
 20109                                  ;		A000   version 4.00  Jan. 1988
 20110                                  ;
 20111                                  ;----------------------------------------------------------------------------
 20112                                  ;
 20113                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 20114                                  ;		error happens, DOS retries the entire block assuming that
 20115                                  ;		zero characters were transferred. Modified the code to take
 20116                                  ;		into account the number of characters transfered before
 20117                                  ;		retrying the operation.
 20118                                  ;
 20119                                  ;----------------------------------------------------------------------------
 20120                                  ;
 20121                                  
 20122                                  ;Installed = TRUE
 20123                                  
 20124                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 20125                                  
 20126                                  ; **** Drivers for file input from devices ****
 20127                                  ;----------------------------------------------------------------------------
 20128                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 20129                                  ;   of handles 0 and 1
 20130                                  ;
 20131                                  ;   Inputs:	DS is DOSDATA
 20132                                  ;   Outputs:	CONSWAP is set to false.
 20133                                  ;   Registers modified: none
 20134                                  ;----------------------------------------------------------------------------
 20135                                  
 20136                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 20137                                  
 20138                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 20139                                  ; 04/05/2019 - Retro DOS v4.0
 20140                                  
 20141                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 20142                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20143                                  
 20144                                  SWAPBACK:
 20145 000032E6 C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 20146 000032EB C3                      	retn
 20147                                  
 20148                                  ;----------------------------------------------------------------------------
 20149                                  ;
 20150                                  ; Procedure Name : SWAPCON
 20151                                  ;
 20152                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20153                                  ;
 20154                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20155                                  ;		DS is DOSDATA
 20156                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20157                                  ;   Registers modified: none
 20158                                  ;--------------------------------------------------------------------------
 20159                                  
 20160                                  SWAPCON:
 20161                                  	; MSDOS 3.3
 20162                                  	;push	es
 20163                                  	;push	di
 20164                                  	;mov	byte [CONSWAP],1
 20165                                  	;les	di,[THISSFT]
 20166                                  	;mov	word [CONSFT],di
 20167                                  	;mov	word [CONSFT+2],es
 20168                                  	;pop	di
 20169                                  	;pop	es
 20170                                  	;retn
 20171                                  
 20172                                  	; MSDOS 6.0
 20173 000032EC C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20174 000032F1 50                      	push	ax
 20175 000032F2 A1[9E05]                	mov	ax,[THISSFT]
 20176 000032F5 A3[E605]                	mov	[CONSFT],ax
 20177 000032F8 A1[A005]                	mov	ax,[THISSFT+2]
 20178 000032FB A3[E805]                	mov	[CONSFT+2],ax
 20179 000032FE 58                      	pop	ax
 20180 000032FF C3                      	retn
 20181                                  
 20182                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20183                                  ; 04/05/2019 - Retro DOS v4.0
 20184                                  
 20185                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20186                                  ;-----------------------------------------------------------------------------
 20187                                  ;
 20188                                  ; Inputs:
 20189                                  ;	ThisSFT set to the SFT for the file being used
 20190                                  ;	[DMAADD] contains transfer address
 20191                                  ;	CX = No. of bytes to read
 20192                                  ;	DS = DOSDATA
 20193                                  ; Function:
 20194                                  ;	Perform read operation
 20195                                  ; Outputs:
 20196                                  ;    Carry clear
 20197                                  ;	SFT Position and cluster pointers updated
 20198                                  ;	CX = No. of bytes read
 20199                                  ;	ES:DI point to SFT
 20200                                  ;    Carry set
 20201                                  ;	AX is error code
 20202                                  ;	CX = 0
 20203                                  ;	ES:DI point to SFT
 20204                                  ; DS preserved, all other registers destroyed
 20205                                  ;
 20206                                  ;-----------------------------------------------------------------------------
 20207                                  
 20208                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20209                                  
 20210                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20211                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20212                                  
 20213                                  DOS_READ:
 20214 00003300 C43E[9E05]              	LES	DI,[THISSFT]
 20215                                  
 20216                                  ; Verify that the sft has been opened in a mode that allows reading.
 20217                                  
 20218                                  	;mov	al,[es:di+2]
 20219 00003304 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20220                                  	;and	al,0Fh
 20221 00003308 240F                    	AND	AL,access_mask
 20222                                  	;cmp	al,1
 20223 0000330A 3C01                    	CMP	AL,open_for_write
 20224 0000330C 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20225 0000330E E90306                  	jmp	SET_ACC_ERR
 20226                                  
 20227                                  READ_NO_MODE:
 20228 00003311 E8E104                  	call	SETUP
 20229 00003314 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20230 00003316 E852DF                  	call	IsSFTNet
 20231 00003319 7408                    	JZ	short LOCAL_READ
 20232                                  
 20233                                  ;IF NOT Installed
 20234                                  ;	transfer NET_READ
 20235                                  ;ELSE
 20236                                  	;mov	ax,1108h
 20237 0000331B B80811                  	MOV	AX,(MultNET<<8)|8
 20238 0000331E CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20239                                  			; ES:DI -> SFT
 20240                                  			; SFT DPB field -> DPB of drive containing file
 20241                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20242                                  			; Return: CF set on error, CX = bytes read
 20243 00003320 C3                      	retn
 20244                                  ;ENDIF
 20245                                  
 20246                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20247                                  ; except return immediately.
 20248                                  
 20249                                  NoIORet:
 20250 00003321 F8                      	CLC
 20251 00003322 C3                      	retn
 20252                                  
 20253                                  LOCAL_READ:
 20254                                  	;test	word [es:di+5],80h
 20255                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20256 00003323 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20257 00003328 750E                    	JNZ	short READDEV
 20258                                  
 20259                                  	;mov	byte [EXTERR_LOCUS],2
 20260 0000332A C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20261 0000332F E8E4DF                  	call	ECritDisk
 20262 00003332 E89B05                  	call	DISKREAD
 20263                                  
 20264                                  critexit:
 20265                                  	;call	LCritDisk
 20266                                  	;retn
 20267                                  	; 16/12/2022
 20268 00003335 E9F9DF                  	jmp	LCritDisk
 20269                                  
 20270                                  ; We are reading from a device. Examine the status of the device to see if we
 20271                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20272                                  ; null device, we can safely indicate no transfer.
 20273                                  
 20274                                  READDEV:
 20275                                  	;mov	byte [EXTERR_LOCUS],4
 20276 00003338 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20277                                  	;mov	bl,[es:di+5]
 20278 0000333D 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20279 00003341 C43E[2C03]              	LES	DI,[DMAADD]
 20280                                  	;test	bl,40h
 20281 00003345 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20282 00003348 7407                    	JZ	short ENDRDDEVJ3
 20283                                  	;test	bl,4
 20284 0000334A F6C304                  	test	BL,devid_device_null	; NUL device?
 20285 0000334D 7405                    	JZ	short TESTRAW 		; NO
 20286 0000334F 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20287                                  ENDRDDEVJ3:
 20288                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20289                                  	;JMP	short ENDRDDEVJ2
 20290                                  	; 16/12/2022
 20291 00003351 E96701                  	jmp	ENDRDDEV ; 04/05/2019
 20292                                  
 20293                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20294                                  ; bizarre std_con_string_input.
 20295                                  
 20296                                  TESTRAW:
 20297                                  	;test	bl,20h
 20298 00003354 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20299 00003357 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20300                                  	;test	bl,1
 20301 00003359 F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20302 0000335C 7461                    	JZ	short NOTRDCON
 20303 0000335E E98F01                  	JMP	READCON
 20304                                  
 20305                                  DVRDRAW:
 20306 00003361 06                      	PUSH	ES
 20307 00003362 1F                      	POP	DS			; Xaddr to DS:DI
 20308                                  
 20309                                  	; 04/05/2019 - Retro DOS v4.0
 20310                                  
 20311                                  	; MSDOS 6.0
 20312                                  ;SR;
 20313                                  ;Check for win386 presence -- if present, do polled read of characters
 20314                                  
 20315 00003363 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20316 00003369 7408                    	jz	short ReadRawRetry	;not present
 20317 0000336B F6C301                  	test	bl,devid_device_con_in	;is it console device
 20318 0000336E 7403                    	jz	short ReadRawRetry	;no, do normal read
 20319 00003370 E9BA00                  	jmp	do_polling		;yes, do win386 polling loop
 20320                                  
 20321                                  ReadRawRetry:
 20322 00003373 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 20323 00003375 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20324 00003377 89C2                    	MOV	DX,AX			; Start at 0
 20325 00003379 E89113                  	call	SETREAD
 20326 0000337C 1E                      	PUSH	DS			; Save Seg part of Xaddr
 20327                                  
 20328                                  ;hkn; SS override
 20329 0000337D 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20330 00003382 E80F13                  	call	DEVIOCALL
 20331 00003385 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20332 00003387 B486                    	MOV	AH,86H			; Read error
 20333                                  
 20334                                  ;hkn; SS override
 20335 00003389 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20336                                  	; MSDOS 3.3
 20337                                  	;test	di,8000h
 20338                                  	;jz	short CRDROK
 20339                                  	; MSDOS 6.0
 20340 0000338E 09FF                    	or	di,di
 20341 00003390 7923                    	jns	short CRDROK		; no errors
 20342                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20343 00003392 E8641F                  	call	CHARHARD
 20344 00003395 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 20345                                  
 20346                                  	; 04/05/2019
 20347                                  
 20348                                  	; MSDOS 6.0
 20349 00003397 36033E[6C03]            	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20350 0000339C 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20351                                  
 20352                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20353 000033A1 08C0                    	OR	AL,AL
 20354 000033A3 7410                    	JZ	short CRDROK		; Ignore
 20355 000033A5 3C03                    	CMP	AL,3
 20356 000033A7 7403                    	JZ	short CRDFERR 		; fail.
 20357 000033A9 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20358 000033AA EBC7                    	JMP	short ReadRawRetry	; Retry
 20359                                  
 20360                                  ; We have encountered a device-driver error. We have informed the user of it
 20361                                  ; and he has said for us to fail the system call.
 20362                                  
 20363                                  CRDFERR:
 20364 000033AC 5F                      	POP	DI			; Clean stack
 20365                                  DEVIOFERR:
 20366                                  
 20367                                  ;hkn; SS override
 20368 000033AD 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20369 000033B2 E95D05                  	jmp	SET_ACC_ERR_DS
 20370                                  
 20371                                  CRDROK:
 20372 000033B5 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20373 000033B6 89D7                    	MOV	DI,DX
 20374                                  
 20375                                  ;hkn; SS override
 20376 000033B8 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20377                                  	;JMP	SHORT ENDRDDEVJ3
 20378                                  	; 16/12/2022
 20379 000033BD EB6B                    	jmp	short ENDRDDEVJ2
 20380                                  
 20381                                  ; We are going to do a cooked read on some character device. There is a
 20382                                  ; problem here, what does the data look like? Is it a terminal device, line
 20383                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20384                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20385                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20386                                  ; included in data). this "simulates" the way con works in cooked mode
 20387                                  ; reading one line at a time. With file data, however, the lines will look
 20388                                  ; like, LF line CR. This is a little weird.
 20389                                  
 20390                                  NOTRDCON:
 20391 000033BF 8CC0                    	MOV	AX,ES
 20392 000033C1 8ED8                    	MOV	DS,AX
 20393 000033C3 89FB                    	MOV	BX,DI
 20394 000033C5 31D2                    	XOR	DX,DX
 20395 000033C7 89D0                    	MOV	AX,DX
 20396 000033C9 51                      	PUSH	CX
 20397 000033CA B90100                  	MOV	CX,1
 20398 000033CD E83D13                  	call	SETREAD
 20399 000033D0 59                      	POP	CX
 20400                                  
 20401                                  ;hkn; SS override
 20402 000033D1 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20403                                  	;lds	si,[si+7]
 20404 000033D6 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20405                                  DVRDLP:
 20406 000033D9 E8FE1C                  	call	DSKSTATCHK
 20407 000033DC E8B812                  	call	DEVIOCALL2
 20408 000033DF 57                      	PUSH	DI		; Save "count" done
 20409 000033E0 B486                    	MOV	AH,86H
 20410                                  
 20411                                  ;hkn; SS override
 20412 000033E2 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20413                                  	
 20414                                  	; MSDOS 3.3
 20415                                  	;test	di,8000h
 20416                                  	;jz	short CRDOK
 20417                                  	; MSDOS 6.0
 20418 000033E7 09FF                    	or	di,di
 20419 000033E9 7917                    	jns	short CRDOK
 20420                                  	
 20421 000033EB E80B1F                  	call	CHARHARD
 20422 000033EE 5F                      	POP	DI
 20423                                  
 20424                                  ;hkn; SS override
 20425 000033EF 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20426 000033F6 3C01                    	CMP	AL,1
 20427 000033F8 74DF                    	JZ	short DVRDLP		;Retry
 20428 000033FA 3C03                    	CMP	AL,3
 20429 000033FC 74AF                    	JZ	short DEVIOFERR		; FAIL
 20430 000033FE 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 20431 00003400 EB12                    	JMP	SHORT DVRDIGN
 20432                                  
 20433                                  CRDOK:
 20434 00003402 5F                      	POP	DI
 20435                                  
 20436                                  ;hkn; SS override
 20437 00003403 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 20438                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20439 00003409 751F                    	JNZ	short ENDRDDEVJ2
 20440                                  	; 16/12/2022
 20441                                  	;jnz	short ENDRDDEV ; 24/07/2019
 20442                                  
 20443 0000340B 1E                      	PUSH	DS
 20444                                  
 20445                                  ;hkn; SS override
 20446 0000340C 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20447 00003411 8A05                    	MOV	AL,[DI]			; Get the character we just read
 20448 00003413 1F                      	POP	DS
 20449                                  DVRDIGN:
 20450                                  
 20451                                  ;hkn; SS override
 20452 00003414 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 20453 00003419 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20454 00003420 47                      	INC	DI			; Next character
 20455 00003421 3C1A                    	CMP	AL,1Ah			; ^Z?
 20456                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20457 00003423 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 20458                                  	; 16/12/2022
 20459                                  	;jz	short ENDRDDEV ; 24/07/2019	
 20460 00003425 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 20461 00003427 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 20462 00003429 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 20463                                  					;  AX=FFFF which is not likely
 20464                                  ENDRDDEVJ2:
 20465                                  	; 16/12/2022
 20466                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 20467                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20468 0000342A E98E00                  	jmp	ENDRDDEV
 20469                                  
 20470                                  	; 04/05/2019
 20471                                  
 20472                                  	; MSDOS 6.0
 20473                                  ;SR;
 20474                                  ;Polling code for raw read on CON when WIN386 is present
 20475                                  ;
 20476                                  ;At this point -- ds:di is transfer address
 20477                                  ;		  cx is count
 20478                                  
 20479                                  do_polling:
 20480 0000342D 89FB                    	mov	bx,di			;ds:bx is Xfer address
 20481 0000342F 31C0                    	xor	ax,ax
 20482 00003431 89C2                    	mov	dx,ax
 20483 00003433 E8D712                  	call	SETREAD			;prepare device packet
 20484                                  
 20485                                  do_io:
 20486                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 20487                                  
 20488 00003436 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 20489 0000343B 1E                      	push	ds
 20490 0000343C 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 20491 00003441 E85012                  	call	DEVIOCALL		;call device driver
 20492 00003444 1F                      	pop	ds
 20493                                  	
 20494                                  	;test	word [es:bx+3],8000h
 20495                                  	; 16/12/2022
 20496                                  	;test	byte [es:bx+4],80h
 20497 00003445 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 20498                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 20499 0000344A 7413                    	jz	short check_busy	;no
 20500                                  
 20501 0000344C 1E                      	push	ds
 20502 0000344D 89FA                    	mov	dx,di
 20503                                  	;invoke charhard		;invoke int 24h handler
 20504 0000344F E8A71E                  	call	CHARHARD
 20505 00003452 89D7                    	mov	di,dx
 20506 00003454 08C0                    	or	al,al
 20507 00003456 745D                    	jz	short pop_done_read	;ignore by user, assume read done
 20508 00003458 3C03                    	cmp	al,3
 20509 0000345A 7448                    	jz	short devrderr		;user asked to fail
 20510 0000345C 1F                      	pop	ds
 20511 0000345D EBD7                    	jmp	short do_io		;user asked to retry
 20512                                  
 20513                                  check_busy:
 20514                                  	;test	word [es:bx+3],200h
 20515                                  	; 16/12/2022
 20516 0000345F 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 20517                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 20518 00003464 7547                    	jnz	short no_char		;yes, no character available
 20519                                  
 20520                                  ;Character is available. Read in 1 character at a time until all characters
 20521                                  ;are read in or no character is available
 20522                                  
 20523 00003466 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 20524 0000346B 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 20525 00003471 1E                      	push	ds
 20526 00003472 36C536[9E05]            	lds	si,[ss:THISSFT]
 20527 00003477 E81A12                  	call	DEVIOCALL
 20528                                  
 20529 0000347A 89FA                    	mov	dx,di
 20530 0000347C B486                    	mov	ah,86h
 20531                                  	;mov	di,[es:bx+3]
 20532 0000347E 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 20533 00003482 F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 20534 00003486 7410                    	jz	short next_char		;no,read next character
 20535                                  
 20536                                  	;invoke	charhard		;invoke int 24h handler
 20537 00003488 E86E1E                  	call	CHARHARD
 20538 0000348B 89D7                    	mov	di,dx			;restore di
 20539 0000348D 08C0                    	or	al,al			;
 20540 0000348F 7424                    	jz	short pop_done_read	;ignore by user,assume read is done
 20541 00003491 3C03                    	cmp	al,3
 20542 00003493 740F                    	jz	short devrderr		;user issued a 'fail',indicate error
 20543 00003495 1F                      	pop	ds
 20544 00003496 EB9E                    	jmp	short do_io		;user issued a retry
 20545                                  
 20546                                  next_char:
 20547 00003498 1F                      	pop	ds
 20548 00003499 89D7                    	mov	di,dx
 20549 0000349B 49                      	dec	cx			;decrement count
 20550 0000349C E318                    	jcxz	done_read		;all characters read in
 20551 0000349E 26FF470E                	inc	word [es:bx+14]		;update transfer address
 20552 000034A2 EB92                    	jmp	short do_io			;read next character in
 20553                                  
 20554                                  devrderr:
 20555 000034A4 5F                      	pop	di			;discard segment address
 20556 000034A5 36C43E[9E05]            	les	di,[ss:THISSFT]
 20557                                  	;transfer SET_ACC_ERR_DS	;indicate error
 20558 000034AA E96504                  	jmp     SET_ACC_ERR_DS
 20559                                  
 20560                                  no_char:
 20561                                  ;Since no character is available, we let win386 switch the VM out
 20562                                  
 20563 000034AD 50                      	push	ax
 20564 000034AE B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 20565 000034B0 CD2A                    	int	2Ah			;indicate idle to WIN386
 20566                                  
 20567                                  ;When control returns from WIN386, we continue the raw read
 20568                                  
 20569 000034B2 58                      	pop	ax
 20570 000034B3 EB81                    	jmp	do_io
 20571                                  
 20572                                  pop_done_read:
 20573 000034B5 1F                      	pop	ds
 20574                                  done_read:
 20575 000034B6 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 20576                                  
 20577                                  	; 16/12/2022
 20578                                  
 20579                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20580                                  	;jmp	ENDRDDEV ; 04/05/2019
 20581                                  
 20582                                  	; 04/05/2019 - Retro DOS v4.0
 20583                                  ENDRDDEV:
 20584 000034BB 16                      	push	ss
 20585 000034BC 1F                      	pop	ds
 20586 000034BD EB1F                    	jmp	short endrddev1
 20587                                  
 20588                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20589                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20590                                  
 20591                                  TRANBUF:
 20592 000034BF AC                      	LODSB
 20593 000034C0 AA                      	STOSB
 20594 000034C1 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 20595 000034C3 7503                    	JNZ	short NORMCH
 20596 000034C5 C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 20597                                  NORMCH:
 20598 000034C8 3C0A                    	CMP	AL,c_LF ; 0Ah
 20599 000034CA E0F3                    	LOOPNZ	TRANBUF
 20600 000034CC 7507                    	JNZ	short ENDRDCON
 20601 000034CE 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 20602 000034D0 E89FE1                  	call	OUTT		; Transmit linefeed
 20603 000034D3 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 20604                                  ENDRDCON:
 20605                                  ;hkn; SS is DOSDATA
 20606 000034D5 16                      	push	ss
 20607 000034D6 1F                      	pop	ds
 20608 000034D7 E80CFE                  	CALL	SWAPBACK
 20609 000034DA 8936[2200]              	MOV	[CONTPOS],SI
 20610                                  
 20611                                  	; 16/12/2022
 20612                                  ;ENDRDDEV:
 20613                                  ;;hkn; SS is DOSDATA
 20614                                  ;	push	ss
 20615                                  ;	pop	ds
 20616                                  endrddev1:	; 04/05/2019
 20617 000034DE 893E[B805]              	MOV	[NEXTADD],DI
 20618 000034E2 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20619 000034E4 C43E[9E05]              	LES	DI,[THISSFT]
 20620                                  	;and	byte [es:di+5],0BFh
 20621 000034E8 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20622                                  				; Mark as no more data available
 20623                                  SETSFTC:
 20624                                  	; 31/07/2019
 20625                                  	;call	SETSFT
 20626                                  	;retn
 20627 000034ED E9B604                  	jmp	SETSFT
 20628                                  
 20629                                  ; 16/12/2022
 20630                                  %if 0
 20631                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20632                                  ENDRDDEV:
 20633                                  ;hkn; SS is DOSDATA
 20634                                  	push	ss
 20635                                  	pop	ds
 20636                                  	MOV	[NEXTADD],DI
 20637                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20638                                  	LES	DI,[THISSFT]
 20639                                  	;and	byte [es:di+5],0BFh
 20640                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20641                                  				; Mark as no more data available
 20642                                  SETSFTC:
 20643                                  	;call	SETSFT
 20644                                  	;retn
 20645                                  	jmp	SETSFT	
 20646                                  %endif
 20647                                  
 20648                                  READCON:
 20649 000034F0 E8F9FD                  	CALL	SWAPCON
 20650 000034F3 8B36[2200]              	MOV	SI,[CONTPOS]
 20651 000034F7 09F6                    	OR	SI,SI
 20652 000034F9 75C4                    	JNZ	short TRANBUF
 20653 000034FB 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 20654 00003500 7406                    	JZ	short GETBUF
 20655 00003502 C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 20656                                  GETBUF:
 20657 00003508 51                      	PUSH	CX
 20658 00003509 06                      	PUSH	ES
 20659 0000350A 57                      	PUSH	DI
 20660                                  
 20661                                  ;hkn; CONBUF is in DOSDATA
 20662 0000350B BA[7B02]                	MOV	DX,CONBUF
 20663                                  
 20664 0000350E E8D4DE                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 20665 00003511 5F                      	POP	DI
 20666 00003512 07                      	POP	ES
 20667 00003513 59                      	POP	CX
 20668                                  
 20669                                  ;hkn; CONBUF is in DOSDATA
 20670 00003514 BE[7D02]                	MOV	SI,CONBUF+2
 20671                                  
 20672 00003517 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 20673 0000351A 75A3                    	JNZ	short TRANBUF
 20674 0000351C B01A                    	MOV	AL,1AH
 20675 0000351E AA                      	STOSB
 20676 0000351F 4F                      	DEC	DI
 20677 00003520 B00A                    	MOV	AL,c_LF
 20678 00003522 E84DE1                  	call	OUTT		; Send linefeed
 20679 00003525 31F6                    	XOR	SI,SI
 20680 00003527 EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 20681                                  
 20682                                  ; 24/07/2018 - Retro DOS v3.0
 20683                                  
 20684                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 20685                                  ;---------------------------------------------------------------------------
 20686                                  ;
 20687                                  ; Procedure Name : DOS_WRITE
 20688                                  ;
 20689                                  ; Inputs:
 20690                                  ;	ThisSFT set to the SFT for the file being used
 20691                                  ;	[DMAADD] contains transfer address
 20692                                  ;	CX = No. of bytes to write
 20693                                  ; Function:
 20694                                  ;	Perform write operation
 20695                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 20696                                  ;		to current sf_position
 20697                                  ; Outputs:
 20698                                  ;    Carry clear
 20699                                  ;	SFT Position and cluster pointers updated
 20700                                  ;	CX = No. of bytes written
 20701                                  ;	ES:DI point to SFT
 20702                                  ;    Carry set
 20703                                  ;	AX is error code
 20704                                  ;	CX = 0
 20705                                  ;	ES:DI point to SFT
 20706                                  ; DS preserved, all other registers destroyed
 20707                                  ;---------------------------------------------------------------------------
 20708                                  
 20709                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 20710                                  ;hkn; point to DOSDATA.
 20711                                  
 20712                                  ; 04/05/2019 - Retro DOS v4.0
 20713                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 20714                                  
 20715                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20716                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 20717                                  
 20718                                  DOS_WRITE:
 20719 00003529 C43E[9E05]              	LES	DI,[THISSFT]
 20720                                  	;mov	al,[ES:DI+2]
 20721 0000352D 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20722                                  	;and	al,0Fh
 20723 00003531 240F                    	AND	AL,access_mask
 20724                                  	;cmp	al,0
 20725 00003533 3C00                    	CMP	AL,open_for_read
 20726 00003535 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 20727                                  BadMode:
 20728 00003537 E9DA03                  	jmp	SET_ACC_ERR
 20729                                  
 20730                                  ; NOTE: The following check for writting to a Read Only File is performed
 20731                                  ;	    ONLY on FCBs!!!!
 20732                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 20733                                  ;	    of a read only file which can then be written to.
 20734                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 20735                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 20736                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 20737                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 20738                                  ;	    to a read-only file.
 20739                                  
 20740                                  Check_FCB_RO:
 20741                                  	;;test	word [es:di+2],8000h
 20742                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 20743                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 20744                                  	
 20745                                  	;test	byte [es:di+3],80h
 20746 0000353A 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 20747 0000353F 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 20748                                  
 20749                                  	;test	byte [es:di+4],1
 20750 00003541 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 20751 00003546 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 20752                                  WRITE_NO_MODE:
 20753 00003548 E8AA02                  	call	SETUP
 20754 0000354B E81DDD                  	call	IsSFTNet
 20755 0000354E 7406                    	JZ	short LOCAL_WRITE
 20756                                  
 20757                                  ;IF NOT Installed
 20758                                  ;	transfer NET_WRITE
 20759                                  ;ELSE
 20760                                  	;mov	ax,1109h
 20761 00003550 B80911                  	MOV	AX,(MultNET<<8)|9
 20762 00003553 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 20763                                  			; ES:DI -> SFT
 20764                                  			; SFT DPB field -> DPB of drive containing file
 20765                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20766                                  			; Return: CF set on error, CX = bytes written
 20767 00003555 C3                      	retn
 20768                                  ;ENDIF
 20769                                  
 20770                                  LOCAL_WRITE:
 20771                                  	;;test	word [es:di+5],80h
 20772                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 20773                                  	;jnz	short WRTDEV
 20774                                  
 20775                                  	;test	byte [es:di+5],80h
 20776 00003556 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 20777 0000355B 756E                    	jnz	short WRTDEV
 20778                                  
 20779                                  	;mov	byte [EXTERR_LOCUS],2
 20780 0000355D C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20781 00003562 E8B1DD                  	call	ECritDisk
 20782                                  
 20783 00003565 E8F404                  	call	DISKWRITE
 20784                                  
 20785                                  	; 04/05/2019 - Retro DOS v4.0
 20786                                  
 20787                                  	; MSDOS 6.0
 20788                                  ; Extended Open
 20789 00003568 7210                    	JC	short nocommit
 20790                                  	
 20791 0000356A C43E[9E05]              	LES	DI,[THISSFT]
 20792                                  	
 20793                                  	;;test	word [ES:DI+2],4000h
 20794                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 20795                                  	;JZ	short nocommit
 20796                                  	
 20797                                  	;test	byte [ES:DI+3],40h
 20798 0000356E 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 20799 00003573 7405                    	JZ	short nocommit
 20800                                  	
 20801 00003575 51                      	PUSH	CX
 20802 00003576 E82EFB                  	call	DOS_COMMIT
 20803 00003579 59                      	POP	CX
 20804                                  nocommit:
 20805                                  ; Extended Open
 20806                                  	;call	LCritDisk
 20807                                  	;retn
 20808                                  	; 18/12/2022
 20809 0000357A E9B4DD                  	jmp	LCritDisk
 20810                                  
 20811                                  DVWRTRAW:
 20812 0000357D 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20813 0000357F E8BE11                  	call	SETWRITE
 20814 00003582 1E                      	PUSH	DS			; Save seg of transfer
 20815                                  
 20816                                  ;hkn; SS override
 20817 00003583 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20818 00003588 E80911                  	call	DEVIOCALL		; DS:SI -> DEVICE
 20819                                  
 20820 0000358B 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 20821 0000358D B487                    	MOV	AH,87H
 20822                                  
 20823                                  ;hkn; SS override
 20824 0000358F 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20825                                  
 20826                                  	; MSDOS 3.3
 20827                                  	;test	di,8000h
 20828                                  	;jz	short CWRTROK
 20829                                  
 20830                                  	; MSDOS 6.0
 20831 00003594 09FF                    	or	di,di
 20832 00003596 7920                    	jns	short CWRTROK
 20833                                  	
 20834                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20835 00003598 E85E1D                  	call	CHARHARD
 20836                                  
 20837                                  	; 04/05/2019  - Retro DOS v4.0
 20838                                  
 20839                                  	; MSDOS 6.0
 20840 0000359B 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 20841 000035A0 89D3                    	mov	bx,dx			; number of chars xferred	M065
 20842 000035A2 36031E[6C03]            	add	bx,[ss:CALLSCNT]	;				M065
 20843 000035A7 89DF                    	mov	di,bx			;				M065
 20844                                  	
 20845                                  	; MSDOS 3.3
 20846                                  	;MOV	BX,DX			; Recall transfer addr		M065
 20847                                  
 20848                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20849 000035A9 08C0                    	OR	AL,AL
 20850 000035AB 740B                    	JZ	short CWRTROK 		; Ignore
 20851 000035AD 3C03                    	CMP	AL,3
 20852 000035AF 7403                    	JZ	short CWRFERR
 20853 000035B1 1F                      	POP	DS			; Recover saved seg of transfer
 20854 000035B2 EBC9                    	JMP	short DVWRTRAW		; Try again
 20855                                  CWRFERR:
 20856 000035B4 58                      	POP	AX			; Chuck saved seg of transfer
 20857 000035B5 E9F4FD                  	JMP	CRDFERR 		; Will pop one more stack element
 20858                                  CWRTROK:
 20859 000035B8 58                      	POP	AX			; Chuck saved seg of transfer
 20860 000035B9 1F                      	POP	DS
 20861 000035BA A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 20862                                  ENDWRDEV:
 20863 000035BD C43E[9E05]              	LES	DI,[THISSFT]
 20864 000035C1 89C1                    	MOV	CX,AX
 20865                                  	;call	ADDREC
 20866                                  	;retn
 20867                                  	; 16/12/2022
 20868                                  	; 10/06/2019
 20869 000035C3 E90104                  	jmp	ADDREC
 20870                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20871                                  	;call	ADDREC
 20872                                  	;retn
 20873                                  	
 20874                                  WRTNUL:
 20875 000035C6 89CA                    	MOV	DX,CX			; Entire transfer done
 20876                                  WRTCOOKJ:
 20877 000035C8 E98D00                  	JMP	WRTCOOKDONE
 20878                                  WRTDEV:
 20879                                  	;mov	byte [EXTERR_LOCUS],4
 20880 000035CB C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20881                                  	;or	byte [es:di+5],40h
 20882 000035D0 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 20883                                  					; Reset EOF for input
 20884                                  	;mov	bl,[es:di+5]
 20885 000035D5 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20886 000035D9 31C0                    	XOR	AX,AX
 20887 000035DB E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 20888 000035DD 1E                      	PUSH	DS
 20889 000035DE 88D8                    	MOV	AL,BL
 20890 000035E0 C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 20891 000035E4 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 20892 000035E6 31D2                    	XOR	DX,DX			; Set starting point
 20893                                  	;test	al,20h
 20894 000035E8 A820                    	test	AL,devid_device_raw	; Raw?
 20895                                  	;JZ	short TEST_DEV_CON
 20896                                  	;JMP	DVWRTRAW
 20897                                  	; 16/12/2022
 20898 000035EA 7591                    	jnz	short DVWRTRAW
 20899                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20900                                  	;JZ	short TEST_DEV_CON
 20901                                  	;JMP	short DVWRTRAW
 20902                                  
 20903                                  TEST_DEV_CON:
 20904                                  	;test	al,2
 20905 000035EC A802                    	test	AL,devid_device_con_out ; Console output device?
 20906 000035EE 756E                    	jnz	short WRITECON
 20907                                  	;test	al,4
 20908 000035F0 A804                    	test	AL,devid_device_null
 20909 000035F2 75D2                    	JNZ	short WRTNUL
 20910 000035F4 89D0                    	MOV	AX,DX
 20911 000035F6 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 20912 000035F9 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 20913 000035FB 51                      	PUSH	CX
 20914 000035FC B90100                  	MOV	CX,1
 20915 000035FF E83E11                  	call	SETWRITE
 20916 00003602 59                      	POP	CX
 20917                                  
 20918                                  ;hkn; SS override
 20919 00003603 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20920                                  ;
 20921                                  ;SR; Removed X25 support from here
 20922                                  ;
 20923                                  	;lds	si,[si+7]
 20924 00003608 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20925                                  DVWRTLP:
 20926 0000360B E8CC1A                  	call	DSKSTATCHK
 20927 0000360E E88610                  	call	DEVIOCALL2
 20928 00003611 57                      	PUSH	DI
 20929 00003612 B487                    	MOV	AH,87H
 20930                                  
 20931                                  ;hkn; SS override
 20932 00003614 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20933                                  	
 20934                                  	; MSDOS 3.3
 20935                                  	;test	di,8000h
 20936                                  	;jz	short CWROK
 20937                                  
 20938                                  	; MSDOS 6.0
 20939 00003619 09FF                    	or	di,di
 20940 0000361B 7916                    	jns	short CWROK
 20941                                  	
 20942                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20943 0000361D E8D91C                  	call	CHARHARD
 20944 00003620 5F                      	POP	DI
 20945                                  
 20946                                  ;hkn; SS override
 20947 00003621 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20948 00003628 3C01                    	CMP	AL,1
 20949 0000362A 74DF                    	JZ	short DVWRTLP 	; Retry
 20950 0000362C 08C0                    	OR	AL,AL
 20951 0000362E 740C                    	JZ	short DVWRTIGN	; Ignore
 20952                                  	; 10/08/2018
 20953 00003630 E979FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 20954                                  CWROK:
 20955 00003633 5F                      	POP	DI
 20956                                  
 20957                                  ;hkn; SS override
 20958 00003634 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 20959 0000363A 741C                    	JZ	short WRTCOOKDONE
 20960                                  DVWRTIGN:
 20961 0000363C 42                      	INC	DX
 20962                                  
 20963                                  ;hkn; SS override for CALLXAD
 20964 0000363D 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 20965 00003642 47                      	INC	DI
 20966 00003643 1E                      	PUSH	DS
 20967 00003644 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20968 00003649 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 20969 0000364C 1F                      	POP	DS
 20970 0000364D 7409                    	JZ	short WRTCOOKDONE
 20971                                  
 20972                                  ;hkn; SS override
 20973 0000364F 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20974 00003656 E2B3                    	LOOP	DVWRTLP
 20975                                  WRTCOOKDONE:
 20976 00003658 89D0                    	MOV	AX,DX
 20977 0000365A 1F                      	POP	DS
 20978 0000365B E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 20979                                  
 20980                                  WRITECON:
 20981 0000365E 1E                      	PUSH	DS
 20982                                  
 20983                                  ;hkn; SS is DOSDATA
 20984 0000365F 16                      	push	ss
 20985 00003660 1F                      	pop	ds
 20986 00003661 E888FC                  	CALL	SWAPCON
 20987 00003664 1F                      	POP	DS
 20988 00003665 89DE                    	MOV	SI,BX
 20989 00003667 51                      	PUSH	CX
 20990                                  WRCONLP:
 20991 00003668 AC                      	LODSB
 20992 00003669 3C1A                    	CMP	AL,1Ah		; ^Z?
 20993 0000366B 7405                    	JZ	short CONEOF
 20994 0000366D E802E0                  	call	OUTT
 20995 00003670 E2F6                    	LOOP	WRCONLP
 20996                                  CONEOF:
 20997 00003672 58                      	POP	AX			; Count
 20998 00003673 29C8                    	SUB	AX,CX			; Amount actually written
 20999 00003675 1F                      	POP	DS
 21000 00003676 E86DFC                  	CALL	SWAPBACK
 21001 00003679 E941FF                  	JMP	ENDWRDEV
 21002                                  
 21003                                  ;---------------------------------------------------------------------------
 21004                                  ;
 21005                                  ; Procedure Name : get_io_sft
 21006                                  ;
 21007                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 21008                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 21009                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 21010                                  ;
 21011                                  ;---------------------------------------------------------------------------
 21012                                  
 21013                                  ; 04/05/2019 - Retro DOS v4.0
 21014                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 21015                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21016                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 21017                                  
 21018                                  GET_IO_SFT:
 21019                                  	;test	byte [SS:CONSWAP],0FFh
 21020 0000367C 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 21021 00003682 7512                    	JNZ	short GetRedir
 21022                                  GetNormal:
 21023 00003684 16                      	push	ss
 21024 00003685 1F                      	pop	ds
 21025 00003686 06                      	PUSH	ES
 21026 00003687 57                      	PUSH	DI
 21027 00003688 E80E30                  	call	SFFromHandle
 21028 0000368B 7206                    	JC	short RET44P
 21029 0000368D 8CC6                    	MOV	SI,ES
 21030 0000368F 8EDE                    	MOV	DS,SI
 21031 00003691 89FE                    	MOV	SI,DI
 21032                                  RET44P:
 21033 00003693 5F                      	POP	DI
 21034 00003694 07                      	POP	ES
 21035 00003695 C3                      	retn
 21036                                  GetRedir:
 21037 00003696 83FB01                  	CMP	BX,1
 21038 00003699 77E9                    	JA	short GetNormal
 21039 0000369B 36C536[E605]            	LDS	SI,[SS:CONSFT]
 21040 000036A0 F8                      	CLC
 21041                                  get_io_sft_retn:
 21042 000036A1 C3                      	retn
 21043                                  
 21044                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 21045                                  ;---------------------------------------------------------------------------
 21046                                  ;
 21047                                  ; Procedure Name : DIRREAD
 21048                                  ;
 21049                                  ; Inputs:
 21050                                  ;	AX = Directory block number (relative to first block of directory)
 21051                                  ;	ES:BP = Base of drive parameters
 21052                                  ;	[DIRSEC] = First sector of first cluster of directory
 21053                                  ;	[CLUSNUM] = Next cluster
 21054                                  ;	[CLUSFAC] = Sectors/Cluster
 21055                                  ; Function:
 21056                                  ;	Read the directory block into [CURBUF].
 21057                                  ; Outputs:
 21058                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 21059                                  ;	[SECCLUSPOS] Set
 21060                                  ;	ES:BP unchanged
 21061                                  ;	[CURBUF] Points to Buffer with dir sector
 21062                                  ;	Carry set if error (user said FAIL to I 24)
 21063                                  ; DS preserved, all other registers destroyed.
 21064                                  ;---------------------------------------------------------------------------
 21065                                  
 21066                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 21067                                  
 21068                                  DIRREAD:
 21069                                  
 21070                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 21071                                  ; the same as what is in the DPB! In the case of the root directory, we have
 21072                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 21073                                  ; by DIRStart = 0.
 21074                                  
 21075 000036A2 31D2                    	XOR	DX,DX
 21076                                  	;CMP	word [DIRSTART],0
 21077                                  	; 21/09/2023
 21078 000036A4 3916[C205]              	cmp	[DIRSTART],dx ; 0
 21079 000036A8 7503                    	jnz	short SubDir
 21080 000036AA 92                      	XCHG	AX,DX
 21081 000036AB EB0C                    	JMP	short DoRead
 21082                                  
 21083                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 21084                                  
 21085                                  SubDir:
 21086 000036AD 88C2                    	MOV	DL,AL
 21087                                  	;and	dl,[es:bp+4]
 21088 000036AF 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 21089                                  
 21090                                  ;	(DX) = sector-in-cluster
 21091                                  
 21092                                  	;mov	cl,[es:bp+5]
 21093 000036B3 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21094 000036B7 D3E8                    	SHR	AX,CL
 21095                                  
 21096                                  ;	(DX) = position in cluster
 21097                                  ;	(AX) = number of clusters to skip
 21098                                  
 21099                                  DoRead:
 21100 000036B9 8816[7305]              	MOV	[SECCLUSPOS],DL
 21101 000036BD 89C1                    	MOV	CX,AX
 21102 000036BF 88D4                    	MOV	AH,DL
 21103                                  
 21104                                  ;	(CX) = number of clusters to skip.
 21105                                  ;	(AH) = remainder
 21106                                  
 21107                                  	; 04/05/2019 - Retro DOS v4.0
 21108                                  
 21109                                  	; MSDOS 6.0
 21110                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 21111                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 21112                                  	;MOV	DX,[DIRSEC]
 21113                                  	;ADD	DL,AH
 21114                                  	;ADC	DH,0
 21115                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 21116                                  	; 21/09/2023
 21117 000036C1 31DB                    	xor	bx,bx ; 0
 21118 000036C3 8B16[BE05]              	mov	dx,[DIRSEC]
 21119 000036C7 00E2                    	add	dl,ah
 21120 000036C9 10DE                    	adc	dh,bl ; 0
 21121 000036CB 131E[C005]              	adc	bx,[DIRSEC+2]
 21122 000036CF 891E[0706]              	mov	[HIGH_SECTOR],bx
 21123                                  
 21124 000036D3 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21125 000036D7 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21126 000036DB E319                    	JCXZ	FIRSTCLUSTER
 21127                                  SKPCLLP:
 21128 000036DD E8841E                  	call	UNPACK
 21129 000036E0 72BF                    	jc	short get_io_sft_retn
 21130 000036E2 87DF                    	XCHG	BX,DI
 21131 000036E4 E8661E                  	call	IsEOF			; test for eof based on fat size
 21132 000036E7 7302                    	JAE	short HAVESKIPPED
 21133 000036E9 E2F2                    	LOOP	SKPCLLP
 21134                                  HAVESKIPPED:
 21135 000036EB 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21136 000036EF 89FA                    	MOV	DX,DI
 21137 000036F1 88E3                    	MOV	BL,AH
 21138 000036F3 E81717                  	call	FIGREC
 21139                                  
 21140                                  	;entry	FIRSTCLUSTER
 21141                                  
 21142                                  FIRSTCLUSTER:
 21143                                  	; 22/09/2023
 21144                                  	;;mov	byte [ALLOWED],18h
 21145                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 21146                                  	;XOR	AL,AL ; *	; Indicate pre-read
 21147                                  	;call	GETBUFFR
 21148 000036F6 E87622                  	call	GETBUFFER ; *	; pre-read
 21149 000036F9 72A6                    	jc	short get_io_sft_retn
 21150                                  
 21151                                  	;entry	SET_BUF_AS_DIR
 21152                                  
 21153                                  SET_BUF_AS_DIR:
 21154                                  
 21155                                  ;	Set the type of CURBUF to be a directory sector.
 21156                                  ;	Only flags are modified.
 21157                                  
 21158 000036FB 1E                      	PUSH	DS
 21159 000036FC 56                      	PUSH	SI
 21160 000036FD C536[E205]              	LDS	SI,[CURBUF]
 21161                                  	;or	byte [si+5],4
 21162 00003701 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21163 00003705 5E                      	POP	SI
 21164 00003706 1F                      	POP	DS
 21165                                  dirread_retn:
 21166 00003707 C3                      	retn
 21167                                  
 21168                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21169                                  ;----------------------------------------------------------------------------
 21170                                  ;
 21171                                  ; Procedure Name : FATSECRD
 21172                                  ; Inputs:
 21173                                  ;	Same as DREAD
 21174                                  ;	DS:BX = Transfer address
 21175                                  ;	CX = Number of sectors
 21176                                  ;	DX = Absolute record number
 21177                                  ;	ES:BP = Base of drive parameters
 21178                                  ; Function:
 21179                                  ;	Calls BIOS to perform FAT read.
 21180                                  ; Outputs:
 21181                                  ;	Same as DREAD
 21182                                  ;---------------------------------------------------------------------------
 21183                                  
 21184                                  	; 04/05/2019 - Retro DOS v4.0
 21185                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)	
 21186                                  
 21187                                  FATSECRD:
 21188                                  ;hkn; SS override
 21189                                  	;mov	byte [ss:ALLOWED],18h
 21190 00003708 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21191 0000370E 89CF                    	MOV	DI,CX
 21192                                  	;mov	cl,[es:bp+8]
 21193 00003710 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21194                                  	; MSDOS 3.3
 21195                                  	;;mov	al,[es:bp+0Fh]
 21196                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE] 				
 21197                                  	;XOR	AH,AH
 21198                                  	; MSDOS 6.0
 21199                                  	;mov	ax,[es:bp+0Fh]
 21200 00003714 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21201 00003718 30ED                    	XOR	CH,CH	
 21202 0000371A 52                      	PUSH	DX
 21203                                  NXTFAT:
 21204                                  	; MSDOS 6.0
 21205                                  ;hkn; SS override
 21206 0000371B 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21207 00003722 51                      	PUSH	CX			;32mb
 21208 00003723 50                      	PUSH	AX
 21209 00003724 89F9                    	MOV	CX,DI
 21210 00003726 E85B00                  	call	DSKREAD
 21211 00003729 58                      	POP	AX
 21212 0000372A 59                      	POP	CX
 21213 0000372B 7420                    	JZ	short RET41P		; Carry clear
 21214 0000372D 01C2                    	ADD	DX,AX
 21215 0000372F E2EA                    	LOOP	NXTFAT
 21216 00003731 5A                      	POP	DX
 21217 00003732 89F9                    	MOV	CX,DI
 21218                                  
 21219                                  ; NOTE FALL THROUGH
 21220                                  
 21221                                  ;Break	<DREAD -- DO A DISK READ>
 21222                                  ;---------------------------------------------------------------------------
 21223                                  ;
 21224                                  ; Procedure Name : DREAD
 21225                                  ;
 21226                                  ; Inputs:
 21227                                  ;	DS:BX = Transfer address
 21228                                  ;	CX = Number of sectors
 21229                                  ;	DX = Absolute record number	      (LOW)
 21230                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21231                                  ;	ES:BP = Base of drive parameters
 21232                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21233                                  ; Function:
 21234                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21235                                  ;	errors, will call HARDERRRW for further action.
 21236                                  ; Outputs:
 21237                                  ;	Carry set if error (currently user FAILED to INT 24)
 21238                                  ; DS,ES:BP preserved. All other registers destroyed.
 21239                                  ;---------------------------------------------------------------------------
 21240                                  
 21241                                  	;entry	DREAD
 21242                                  DREAD:
 21243 00003734 E84D00                  	call	DSKREAD
 21244 00003737 74CE                    	jz	short dirread_retn	; Carry clear
 21245                                  ;hkn; SS override
 21246 00003739 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21247 0000373F E89A00                  	call	HARDERRRW
 21248 00003742 3C01                    	CMP	AL,1			; Check for retry
 21249 00003744 74EE                    	JZ	short DREAD
 21250 00003746 3C03                    	CMP	AL,3			; Check for FAIL
 21251 00003748 F8                      	CLC
 21252 00003749 7501                    	JNZ	short NO_CAR		; Ignore
 21253 0000374B F9                      	STC
 21254                                  NO_CAR:
 21255 0000374C C3                      	retn
 21256                                  RET41P: 
 21257 0000374D 5A                      	POP	DX
 21258 0000374E C3                      	retn
 21259                                  
 21260                                  ; 24/07/2018 - Retro DOS v3.0
 21261                                  
 21262                                  ;Break	<CHECK_WRITE_LOCK>
 21263                                  ;---------------------------------------------------------------------------
 21264                                  ;
 21265                                  ; Procedure Name : CHECK_WRITE_LOCK
 21266                                  ;
 21267                                  ; Inputs:
 21268                                  ;	output of SETUP
 21269                                  ;	ES:DI -> SFT
 21270                                  ; Function:
 21271                                  ;	check write lock
 21272                                  ; Outputs:
 21273                                  ;	Carry set if error
 21274                                  ;	Carry clear if ok
 21275                                  ;
 21276                                  ;----------------------------------------------------------------------------
 21277                                  
 21278                                  	; 04/05/2019 - Retro DOS v4.0
 21279                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21280                                  
 21281                                  CHECK_WRITE_LOCK:
 21282                                  	; MSDOS 6.0
 21283                                  	;test	byte [es:di+4],8
 21284 0000374F 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21285                                  	;JZ	short write_cont			     ;no
 21286                                  	;;call	SET_ACC_ERR_DS
 21287                                  	;;retn
 21288                                  	;;jnz	SET_ACC_ERR_DS
 21289                                  	; 19/08/2018
 21290                                  	;jz	short write_cont
 21291                                  	;jmp	SET_ACC_ERR_DS
 21292                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21293 00003754 7403                    	JZ	short write_cont
 21294                                  	;call	SET_ACC_ERR_DS
 21295                                  	;retn
 21296                                  	; 16/12/2022
 21297 00003756 E9B901                  	jmp	SET_ACC_ERR_DS
 21298                                  
 21299                                  write_cont:				;
 21300 00003759 51                      	PUSH	CX			;save reg
 21301 0000375A 09C9                    	OR	CX,CX			;
 21302 0000375C 7501                    	JNZ	short Not_Truncate	;
 21303 0000375E 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21304                                  Not_Truncate:				;
 21305 0000375F B080                    	MOV	AL,80H			;check write access
 21306 00003761 E8BE3B                  	call	LOCK_CHECK		;check lock
 21307 00003764 59                      	POP	CX			;restore reg
 21308 00003765 7305                    	JNC	short WRITE_OK		;lock ok
 21309 00003767 E85F01                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21310 0000376A 73ED                    	JNC	short write_cont	;retry
 21311                                  WRITE_OK:				;
 21312 0000376C C3                      	retn				;
 21313                                  
 21314                                  ;Break	<CHECK_READ_LOCK>
 21315                                  ;---------------------------------------------------------------------------
 21316                                  ;
 21317                                  ; Procedure Name : CHECK_READ_LOC
 21318                                  ;
 21319                                  ; Inputs:
 21320                                  ;	ES:DI -> SFT
 21321                                  ;	output of SETUP
 21322                                  ; Function:
 21323                                  ;	check read lock
 21324                                  ; Outputs:
 21325                                  ;	Carry set if error
 21326                                  ;	Carry clear if ok
 21327                                  ;----------------------------------------------------------------------------
 21328                                  
 21329                                  CHECK_READ_LOCK:
 21330                                  	; MSDOS 6.0
 21331                                  	;test	byte [es:di+4],8
 21332 0000376D 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21333                                  	;JZ	short do_retry			   	     ; no
 21334                                  	;;call	SET_ACC_ERR
 21335                                  	;;retn
 21336                                  	;;jnz	SET_ACC_ERR
 21337                                  	; 16/12/2022
 21338                                  	; 28/07/2019
 21339 00003772 7403                    	jz	short do_retry
 21340 00003774 E99D01                  	jmp	SET_ACC_ERR
 21341                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21342                                  	;JZ	short do_retry
 21343                                  	;call	SET_ACC_ERR
 21344                                  	;retn
 21345                                  do_retry:				;
 21346 00003777 30C0                    	xor	al,al			;check read access
 21347 00003779 E8A63B                  	call	LOCK_CHECK		;check lock
 21348 0000377C 7305                    	JNC	short READLOCK_OK 	;lock ok
 21349 0000377E E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 21350 00003781 73F4                    	JNC	short do_retry		;retry
 21351                                  READLOCK_OK:				;
 21352 00003783 C3                      	retn				;
 21353                                  
 21354                                  ;============================================================================
 21355                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21356                                  ;============================================================================
 21357                                  ; 24/07/2018 - Retro DOS v3.0
 21358                                  ; 04/05/2019 - Retro DOS v4.0
 21359                                  
 21360                                  ;	TITLE	DISK2 - Disk utility routines
 21361                                  ;	NAME	Disk2
 21362                                  
 21363                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21364                                  ;
 21365                                  ;	DskRead
 21366                                  ;	DWRITE
 21367                                  ;	DSKWRITE
 21368                                  ;	HarderrRW
 21369                                  ;	SETUP
 21370                                  ;	BREAKDOWN
 21371                                  ;	READ_LOCK_VIOLATION
 21372                                  ;	WRITE_LOCK_VIOLATION
 21373                                  ;	DISKREAD
 21374                                  ;	SET_ACC_ERR_DS
 21375                                  ;	SET_ACC_ERR
 21376                                  ;	SETSFT
 21377                                  ;	SETCLUS
 21378                                  ;	AddRec
 21379                                  ;
 21380                                  ;	Revision history:
 21381                                  ;
 21382                                  ;		AN000 version 4.00 Jan. 1988
 21383                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21384                                  
 21385                                  ; 04/05/2019 - Retro DOS v4.0
 21386                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21387                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21388                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21389                                  
 21390                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21391                                  ;---------------------------------------------------------------------------
 21392                                  ;
 21393                                  ; Procedure Name : DSKREAD
 21394                                  ;
 21395                                  ; Inputs:
 21396                                  ;	DS:BX = Transfer addr
 21397                                  ;	CX = Number of sectors
 21398                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21399                                  ;	DX = Absolute record number	       (LOW)
 21400                                  ;	ES:BP = Base of drive parameters
 21401                                  ; Function:
 21402                                  ;	Call BIOS to perform disk read
 21403                                  ; Outputs:
 21404                                  ;	DI = CX on entry
 21405                                  ;	CX = Number of sectors unsuccessfully transfered
 21406                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21407                                  ;	Zero set if OK (from BIOS) (carry clear)
 21408                                  ;	Zero clear if error (carry clear)
 21409                                  ; SI Destroyed, others preserved
 21410                                  ;---------------------------------------------------------------------------
 21411                                  
 21412                                  DSKREAD:
 21413 00003784 51                      	PUSH	CX
 21414                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21415 00003785 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21416                                  	;mov	al,[es:bp+1]
 21417 00003789 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21418 0000378D 53                      	PUSH	BX
 21419 0000378E 06                      	PUSH	ES
 21420 0000378F E87B0F                  	call	SETREAD
 21421 00003792 EB27                    	JMP	short DODSKOP
 21422                                  
 21423                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 21424                                  ;--------------------------------------------------------------------------
 21425                                  ;
 21426                                  ; Procedure Name : DWRITE
 21427                                  ;
 21428                                  ; Inputs:
 21429                                  ;	DS:BX = Transfer address
 21430                                  ;	CX = Number of sectors
 21431                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21432                                  ;	DX = Absolute record number	       (LOW)
 21433                                  ;	ES:BP = Base of drive parameters
 21434                                  ;	[ALLOWED] must be set in case HARDERR called
 21435                                  ; Function:
 21436                                  ;	Calls BIOS to perform disk write. If BIOS reports
 21437                                  ;	errors, will call HARDERRRW for further action.
 21438                                  ; Output:
 21439                                  ;	Carry set if error (currently, user FAILed to I 24)
 21440                                  ; BP preserved. All other registers destroyed.
 21441                                  ;----------------------------------------------------------------------------
 21442                                  
 21443                                  	;entry	DWRITE
 21444                                  DWRITE:
 21445 00003794 E81600                  	CALL	DSKWRITE
 21446 00003797 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 21447                                  
 21448                                  ;hkn; SS override
 21449 00003799 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 21450 0000379F E83A00                  	call	HARDERRRW
 21451 000037A2 3C01                    	CMP	AL,1		; Check for retry
 21452 000037A4 74EE                    	JZ	short DWRITE
 21453 000037A6 3C03                    	CMP	AL,3		; Check for FAIL
 21454 000037A8 F8                      	CLC
 21455 000037A9 7501                    	JNZ	short NO_CAR2 	; Ignore
 21456 000037AB F9                      	STC
 21457                                  NO_CAR2:
 21458                                  dw_ret_label:
 21459 000037AC C3                      	retn
 21460                                  
 21461                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 21462                                  ;---------------------------------------------------------------------------
 21463                                  ;
 21464                                  ; Procedure Name : DSKWRITE
 21465                                  ;
 21466                                  ; Inputs:
 21467                                  ;	DS:BX = Transfer addr
 21468                                  ;	CX = Number of sectors
 21469                                  ;	DX = Absolute record number	       (LOW)
 21470                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21471                                  ;	ES:BP = Base of drive parameters
 21472                                  ; Function:
 21473                                  ;	Call BIOS to perform disk read
 21474                                  ; Outputs:
 21475                                  ;	DI = CX on entry
 21476                                  ;	CX = Number of sectors unsuccessfully transfered
 21477                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21478                                  ;	Zero set if OK (from BIOS) (carry clear)
 21479                                  ;	Zero clear if error (carry clear)
 21480                                  ; SI Destroyed, others preserved
 21481                                  ;
 21482                                  ;----------------------------------------------------------------------------
 21483                                  
 21484                                  	;entry	DSKWRITE
 21485                                  DSKWRITE:
 21486 000037AD 51                      	PUSH	CX
 21487                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21488 000037AE 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21489                                  	;mov	al,[es:bp+1]
 21490 000037B2 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21491 000037B6 53                      	PUSH	BX
 21492 000037B7 06                      	PUSH	ES
 21493 000037B8 E8850F                  	call	SETWRITE
 21494                                  DODSKOP:
 21495 000037BB 8CD9                    	MOV	CX,DS		; Save DS
 21496 000037BD 1F                      	POP	DS		; DS:BP points to DPB
 21497 000037BE 1E                      	PUSH	DS
 21498                                  
 21499                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 21500 000037BF 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 21501 000037C3 E8D10E                  	call	DEVIOCALL2
 21502                                  
 21503 000037C6 8ED9                    	MOV	DS,CX		; Restore DS
 21504 000037C8 07                      	POP	ES		; Restore ES
 21505 000037C9 5B                      	POP	BX
 21506                                  
 21507                                  ;hkn; SS override
 21508 000037CA 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 21509 000037CF 5F                      	POP	DI
 21510 000037D0 29F9                    	SUB	CX,DI
 21511 000037D2 F7D9                    	NEG	CX		; Number of sectors not transferred
 21512                                  
 21513                                  ;hkn; SS override
 21514 000037D4 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 21515                                  	;test	ax,8000h
 21516                                  	; 17/12/2022
 21517                                  	;test	ah,80h
 21518 000037D8 F6C480                  	test	ah,(STERR>>8)
 21519                                  	;test	AX,STERR
 21520 000037DB C3                      	retn
 21521                                  
 21522                                  ;Break	<HardErrRW - map extended errors and call harderr>
 21523                                  ;---------------------------------------------------------------------------
 21524                                  ;
 21525                                  ; Procedure Name : HardErrRW
 21526                                  ;
 21527                                  ; Inputs:
 21528                                  ;	AX is error code from read or write
 21529                                  ;	Other registers set as per HARDERR
 21530                                  ; Function:
 21531                                  ;	Checks the error code for special extended
 21532                                  ;	errors and maps them if needed. Then invokes
 21533                                  ;	Harderr
 21534                                  ; Outputs:
 21535                                  ;	Of HARDERR
 21536                                  ; AX may be modified prior to call to HARDERR.
 21537                                  ; No other registers altered.
 21538                                  ;
 21539                                  ;---------------------------------------------------------------------------
 21540                                  
 21541                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21542                                  HARDERRRW:
 21543                                  	;cmp	al,0Fh
 21544 000037DC 3C0F                    	CMP	AL,error_I24_wrong_disk
 21545 000037DE 7512                    	JNZ	short DO_ERR				; Nothing to do
 21546                                  
 21547                                  	; MSDOS 3.3
 21548                                  	;push	ds
 21549                                  	;push	si
 21550                                  	;lds	si,[ss:CALLVIDRW]
 21551                                  	;mov	[ss:EXTERRPT+2], ds
 21552                                  	;mov	[ss:EXTERRPT], si
 21553                                  	;pop	si
 21554                                  	;pop	ds
 21555                                  
 21556                                  	; MSDOS 6.0
 21557 000037E0 50                      	push	ax
 21558 000037E1 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 21559 000037E5 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 21560 000037E9 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 21561 000037ED 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 21562 000037F1 58                      	pop	ax
 21563                                  DO_ERR:
 21564                                  	;;call	HARDERR
 21565                                  	;;retn
 21566                                  	; 16/12/2022
 21567                                  	; 10/06/2019
 21568 000037F2 E9351B                  	jmp	HARDERR	
 21569                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21570                                  	;call	HARDERR
 21571                                  	;retn
 21572                                  
 21573                                  ; 24/07/2018 - Retro DOS v3.0
 21574                                  
 21575                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 21576                                  ;----------------------------------------------------------------------------
 21577                                  ;
 21578                                  ; Procedure Name : SETUP
 21579                                  ;
 21580                                  ; Inputs:
 21581                                  ;	ES:DI point to SFT (value also in THISSFT)
 21582                                  ;	DMAAdd contains transfer address
 21583                                  ;	CX = Byte count
 21584                                  ;	DS = DOSDATA
 21585                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 21586                                  ;		2nd of caller of caller.
 21587                                  ; Outputs:
 21588                                  ;	    CX = byte count
 21589                                  ;	    [THISDPB] = Base of drive parameters if file
 21590                                  ;		      = Pointer to device header if device or NET
 21591                                  ;	    ES:DI Points to SFT
 21592                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 21593                                  ;	    [TRANS] = 0 (No transfers yet)
 21594                                  ;	    BytPos = Byte position in file
 21595                                  ;
 21596                                  ;	The following fields are relevant to local files (not devices) only:
 21597                                  ;
 21598                                  ;	    SecPos = Position of first sector (local files only)
 21599                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 21600                                  ;	    [CLUSNUM] = First cluster (local files only)
 21601                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 21602                                  ;	    [THISDRV] = Physical unit number (local files only)
 21603                                  ;
 21604                                  ;      RETURNS ONE LEVEL UP WITH:
 21605                                  ;	   CX = 0
 21606                                  ;	   CARRY = Clear
 21607                                  ;	IF AN ERROR IS DETECTED
 21608                                  ; All other registers destroyed
 21609                                  ;----------------------------------------------------------------------------
 21610                                  
 21611                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 21612                                  
 21613                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 21614                                  
 21615                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21616                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 21617                                  
 21618                                  SETUP:
 21619                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 21620                                  
 21621                                  	;lds 	si,[es:di+7]
 21622 000037F5 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 21623                                  
 21624                                  ;hkn; SS override
 21625 000037F9 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 21626                                  
 21627                                  ;hkn; SS is DOSDATA
 21628 000037FE 16                      	push	ss
 21629 000037FF 1F                      	pop	ds
 21630                                  
 21631 00003800 8936[8A05]              	MOV	[THISDPB],SI
 21632                                  
 21633 00003804 8B1E[2C03]              	MOV	BX,[DMAADD]
 21634 00003808 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 21635 0000380C C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 21636                                  	;mov	ax,[es:di+15h]
 21637 00003811 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 21638                                  	;mov	dx,[es:di+17h]
 21639 00003815 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 21640 00003819 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 21641 0000381D A3[CE05]                	MOV	[BYTPOS],AX
 21642                                  	;test	word [es:di+5],8080h
 21643 00003820 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 21644 00003826 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 21645 00003828 06                      	PUSH	ES
 21646 00003829 C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 21647                                  
 21648                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21649                                  	;;mov	bl,[es:bp+0]
 21650                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 21651                                  	; 05/12/2022
 21652 0000382D 268A5E00                	mov	bl,[es:bp]
 21653                                  	
 21654 00003831 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 21655                                  	;mov	bx,[es:bp+2]
 21656 00003835 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 21657                                  
 21658                                  	;; MSDOS 3.3
 21659                                  	;cmp	dx,bx
 21660                                  	;jnb	short EOFERR
 21661                                  	;div	bx
 21662                                  	;mov	[SECPOS],ax
 21663                                  	;mov	[BYTSECPOS],dx
 21664                                  	;mov	dx,ax
 21665                                  	;;and	al,[es:bp+4]
 21666                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 21667                                  	;mov	[SECCLUSPOS],al
 21668                                  	;mov	ax,cx
 21669                                  	;;mov	cl,[es:bp+5]
 21670                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21671                                  	;shr	dx,cl
 21672                                  	;mov	[CLUSNUM],dx
 21673                                  	;pop	es
 21674                                  	;mov	cx,ax
 21675                                  
 21676                                  	; 04/05/2019 - Retro DOS v4.0
 21677                                  
 21678                                  	; MSDOS 6.0
 21679                                  ;M039: Optimized this section.
 21680 00003839 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 21681 0000383A E83405                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 21682 0000383D 8916[CC05]              	MOV	[BYTSECPOS],DX
 21683 00003841 A3[C405]                	MOV	[SECPOS],AX
 21684 00003844 890E[C605]              	MOV	[SECPOS+2],CX
 21685 00003848 89CA                    	MOV	DX,CX
 21686                                  
 21687 0000384A 89C3                    	MOV	BX,AX
 21688                                  	;and	bl,[es:bp+4]
 21689 0000384C 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 21690 00003850 881E[7305]              	MOV	[SECCLUSPOS],BL
 21691                                  
 21692 00003854 E84105                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 21693 00003857 59                      	POP	CX			;CX = byte count.
 21694 00003858 751F                    	JNZ	short EOFERR		;cluster number above 64k
 21695                                  	;cmp	ax,[es:bp+0Dh]
 21696 0000385A 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 21697 0000385E 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 21698                                  
 21699 00003860 A3[BC05]                	MOV	[CLUSNUM],AX
 21700 00003863 07                      	POP	ES			; ES:DI point to SFT
 21701                                  ;M039
 21702                                  
 21703                                  NOSETSTUFF:
 21704 00003864 89C8                    	MOV	AX,CX		; AX = Byte count.
 21705 00003866 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 21706 0000386A 730C                    	JNC	short setup_OK	; Must be less than 64
 21707 0000386C A1[2C03]                	MOV	AX,[DMAADD]
 21708 0000386F F7D8                    	NEG	AX		; Amount of room left in segment (know
 21709                                  				;    less than 64K since max value of CX
 21710                                  				;    is FFFF).
 21711 00003871 7501                    	JNZ	short NoDec
 21712 00003873 48                      	DEC	AX
 21713                                  NoDec:
 21714 00003874 89C1                    	MOV	CX,AX		; Can do this much
 21715 00003876 E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 21716                                  setup_OK:
 21717 00003878 C3                      	retn
 21718                                  
 21719                                  EOFERR:
 21720 00003879 07                      	POP	ES		; ES:DI point to SFT
 21721 0000387A 31C9                    	XOR	CX,CX		; No bytes read
 21722                                  ;;;;;;;;;;; 7/18/86
 21723                                  	; MSDOS 3.3
 21724                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 21725                                  ;;;;;;;;;;;
 21726                                  NOROOM:
 21727 0000387C 5B                      	POP	BX		; Kill return address
 21728 0000387D F8                      	CLC
 21729 0000387E C3                      	retn			; RETURN TO CALLER OF CALLER
 21730                                  
 21731                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 21732                                  ;---------------------------------------------------------------------------
 21733                                  ;
 21734                                  ; Procedure Name : BREAKDOWN
 21735                                  ;
 21736                                  ; Inputs:
 21737                                  ;	CX = Length of disk transfer in bytes
 21738                                  ;	ES:BP = Base of drive parameters
 21739                                  ;	[BYTSECPOS] = Byte position within first sector
 21740                                  ;	DS = DOSDATA
 21741                                  ; Outputs:
 21742                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 21743                                  ;	[SECCNT] = No. of whole sectors to transfer
 21744                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 21745                                  ; AX, BX, DX destroyed. No other registers affected.
 21746                                  ;---------------------------------------------------------------------------
 21747                                  
 21748                                  BREAKDOWN:
 21749 0000387F A1[CC05]                	MOV	AX,[BYTSECPOS]
 21750 00003882 89CB                    	MOV	BX,CX
 21751 00003884 09C0                    	OR	AX,AX
 21752 00003886 740E                    	JZ	short SAVFIR	; Partial first sector?
 21753                                  	;sub	ax,[es:bp+2]
 21754 00003888 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 21755 0000388C F7D8                    	NEG	AX		; Max number of bytes left in first sector
 21756 0000388E 29C3                    	SUB	BX,AX		; Subtract from total length
 21757 00003890 7304                    	JAE	short SAVFIR
 21758 00003892 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 21759 00003894 31DB                    	XOR	BX,BX		; And no bytes are left
 21760                                  SAVFIR:
 21761 00003896 A3[D205]                	MOV	[BYTCNT1],AX
 21762 00003899 89D8                    	MOV	AX,BX
 21763 0000389B 31D2                    	XOR	DX,DX
 21764                                  	;div	word [ES:BP+2]
 21765 0000389D 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 21766 000038A1 A3[D605]                	MOV	[SECCNT],AX
 21767 000038A4 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 21768                                  	; MSDOS 3.3
 21769                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 21770                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 21771                                  	;CMP	AX,1
 21772                                  	;retnz
 21773                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 21774                                  	;MOV	[BYTCNT2],AX
 21775                                  	;MOV	[SECCNT],DX	; DX = 0
 21776                                  _RET45:
 21777 000038A8 C3                      	retn
 21778                                  
 21779                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 21780                                  
 21781                                  ;----------------------------------------------------------------------------
 21782                                  ;
 21783                                  ; Procedure Name : READ_LOCK_VIOLATION
 21784                                  ;
 21785                                  ; ES:DI points to SFT. This entry used by NET_READ
 21786                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 21787                                  ; Else do retrys.
 21788                                  ; ES:DI,DS,CX preserved
 21789                                  ;
 21790                                  ;----------------------------------------------------------------------------
 21791                                  
 21792                                  READ_LOCK_VIOLATION:
 21793 000038A9 C606[7505]00            	MOV	byte [READOP],0
 21794                                  ERR_ON_CHECK:
 21795                                  	;;test	word [es:di+2],8000h
 21796                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21797                                  	;JNZ	short HARD_ERR
 21798                                  
 21799                                  	; 04/05/2019
 21800                                  	;test	byte [es:di+3],80h
 21801 000038AE 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21802 000038B3 7508                    	JNZ	short HARD_ERR
 21803                                  
 21804                                  	;PUSH	CX
 21805                                  	;;mov	cl,[es:di+2]
 21806                                  	;MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 21807                                  	;;and	cl,0F0h
 21808                                  	;AND	CL,SHARING_MASK
 21809                                  	;;cmp	cl,0
 21810                                  	;CMP	CL,SHARING_COMPAT
 21811                                  	;POP	CX
 21812                                  	;JNE	short NO_HARD_ERR
 21813                                  	; 21/09/2023
 21814 000038B5 268A4502                	mov	al,[ES:DI+SF_ENTRY.sf_mode]
 21815 000038B9 24F0                    	and	al,SHARING_MASK
 21816                                  	;cmp	al,SHARING_COMPAT
 21817                                  	;jne	short NO_HARD_ERR
 21818 000038BB 7505                    	jnz	short NO_HARD_ERR
 21819                                  HARD_ERR:
 21820 000038BD E8783A                  	call	LOCK_VIOLATION
 21821 000038C0 73E6                    	jnc	short _RET45		; User wants Retrys
 21822                                  NO_HARD_ERR:
 21823 000038C2 31C9                    	XOR	CX,CX			;No bytes transferred
 21824                                  	;mov	ax,21h
 21825 000038C4 B82100                  	MOV	AX,error_lock_violation
 21826 000038C7 F9                      	STC
 21827 000038C8 C3                      	retn
 21828                                  
 21829                                  ;----------------------------------------------------------------------------
 21830                                  ;
 21831                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 21832                                  ;
 21833                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 21834                                  ; This entry used by NET_WRITE
 21835                                  ;
 21836                                  ;----------------------------------------------------------------------------
 21837                                  
 21838                                  WRITE_LOCK_VIOLATION:
 21839 000038C9 C606[7505]01            	MOV	byte [READOP],1
 21840 000038CE EBDE                    	JMP	short ERR_ON_CHECK
 21841                                  
 21842                                  ; 04/05/2019 - Retro DOS v4.0
 21843                                  
 21844                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 21845                                  
 21846                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 21847                                  ;----------------------------------------------------------------------------
 21848                                  ;
 21849                                  ; Procedure Name : DISKREAD
 21850                                  ;
 21851                                  ; Inputs:
 21852                                  ;	Outputs of SETUP
 21853                                  ; Function:
 21854                                  ;	Perform disk read
 21855                                  ; Outputs:
 21856                                  ;    Carry clear
 21857                                  ;	CX = No. of bytes read
 21858                                  ;	ES:DI point to SFT
 21859                                  ;	SFT offset and cluster pointers updated
 21860                                  ;    Carry set
 21861                                  ;	CX = 0
 21862                                  ;	ES:DI point to SFT
 21863                                  ;	AX has error code
 21864                                  ;----------------------------------------------------------------------------
 21865                                  
 21866                                  ;hkn; called from disk.asm. DS already set up.
 21867                                  
 21868                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21869                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 21870                                  
 21871                                  DISKREAD:
 21872                                  	;mov	ax,[es:di+11h]
 21873 000038D0 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 21874                                  	;mov	bx,[es:di+13h]
 21875 000038D4 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 21876 000038D8 2B06[CE05]              	SUB	AX,[BYTPOS]
 21877 000038DC 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 21878 000038E0 7226                    	JB	short RDERR		;Read starts past EOF
 21879 000038E2 750A                    	JNZ	short ENUF		;More than 64k to EOF
 21880 000038E4 09C0                    	OR	AX,AX
 21881 000038E6 7420                    	JZ	short RDERR		;Read starts at EOF
 21882 000038E8 39C8                    	CMP	AX,CX
 21883 000038EA 7302                    	JAE	short ENUF		;I/O fits
 21884 000038EC 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 21885                                  ENUF:
 21886                                  	; MSDOS 3.3
 21887                                  	;test	byte [es:di+4],8
 21888                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 21889                                  	;jnz	short SET_ACC_ERR
 21890                                  	;call	LOCK_CHECK
 21891                                  	;jnb	short _READ_OK
 21892                                  	;call	READ_LOCK_VIOLATION
 21893                                  	;jnb	short ENUF
 21894                                  	;retn
 21895                                  
 21896                                  	; MSDOS 6.0
 21897 000038EE E87CFE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 21898 000038F1 7301                    	JNC	short _READ_OK 		; There are no locks
 21899 000038F3 C3                      	retn
 21900                                  
 21901                                  _READ_OK:
 21902 000038F4 C42E[8A05]              	LES	BP,[THISDPB]
 21903 000038F8 E884FF                  	CALL	BREAKDOWN
 21904 000038FB 8B0E[BC05]              	MOV	CX,[CLUSNUM]
 21905                                  
 21906 000038FF E87113                  	call	FNDCLUS
 21907                                       	; MSDOS 6.0			;M022 conditional removed here
 21908 00003902 720E                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 21909                                  					; migrated from 330a - HKN
 21910 00003904 09C9                    	OR	CX,CX
 21911 00003906 7413                    	JZ	short SKIPERR
 21912                                  RDERR:
 21913 00003908 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 21914 0000390A E92102                  	jmp	WRTERR22
 21915                                  
 21916                                  ;RDLASTJ: 
 21917                                  	;JMP	RDLAST                  ;M039
 21918                                  
 21919                                  SETSFTJ2: 
 21920 0000390D E99600                  	JMP	SETSFT
 21921                                  
 21922                                  CANOT_READ:
 21923                                  	; MSDOS 3.3
 21924                                  	;POP	CX		;M039.
 21925                                  	; MSDOS 3.3 & MSDOS 6.0
 21926 00003910 59                      	POP	CX              ;Clean stack.
 21927 00003911 5B                      	POP	BX
 21928                                  
 21929                                  	;entry	SET_ACC_ERR_DS
 21930                                  SET_ACC_ERR_DS:
 21931                                  
 21932                                  ;hkn; SS is DOSDATA
 21933                                  	;Context DS
 21934 00003912 16                      	push	ss
 21935 00003913 1F                      	pop	ds
 21936                                  
 21937                                  	;entry	SET_ACC_ERR
 21938                                  SET_ACC_ERR:
 21939 00003914 31C9                    	XOR	CX,CX
 21940                                  	;mov	ax,5
 21941 00003916 B80500                  	MOV	AX,error_access_denied
 21942 00003919 F9                      	STC
 21943 0000391A C3                      	retn
 21944                                  
 21945                                  SKIPERR:
 21946 0000391B 8916[BA05]              	MOV	[LASTPOS],DX
 21947 0000391F 891E[BC05]              	MOV	[CLUSNUM],BX
 21948 00003923 833E[D205]00            	CMP	word [BYTCNT1],0
 21949 00003928 7405                    	JZ	short RDMID
 21950                                  
 21951 0000392A E8BC13                  	call	BUFRD
 21952 0000392D 72E3                    	JC	short SET_ACC_ERR_DS
 21953                                  
 21954                                  RDMID:
 21955 0000392F 833E[D605]00            	CMP	word [SECCNT],0
 21956                                  	;JZ	RDLAST ; 10/08/2018
 21957 00003934 7453                    	jz	short RDLAST
 21958                                  
 21959 00003936 E84514                  	call	NEXTSEC
 21960 00003939 72D2                    	JC	short SETSFTJ2
 21961                                  
 21962 0000393B C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 21963                                  ONSEC:
 21964 00003940 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 21965 00003944 8B0E[D605]              	MOV	CX,[SECCNT]
 21966 00003948 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21967                                  RDLP:
 21968 0000394C E86014                  	call	OPTIMIZE
 21969 0000394F 72C1                    	JC	short SET_ACC_ERR_DS
 21970                                  
 21971 00003951 57                      	PUSH	DI                      ;DI = Next physical cluster.
 21972 00003952 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 21973 00003953 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 21974                                  	;mov	byte [ALLOWED],38h
 21975 00003954 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 21976 00003959 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 21977                                  
 21978 0000395D 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 21979 0000395E 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 21980                                  
 21981                                  	; 04/05/2019 - Retro DOS v4.0
 21982                                  
 21983                                  	; MSDOS 6.0
 21984 0000395F E80322                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 21985                                  
 21986                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21987 00003962 E8CFFD                  	call	DREAD
 21988                                  
 21989                                  	; MSDOS 3.3 
 21990                                  	;pop	bx
 21991                                  	;pop	dx
 21992                                  	;jc	short CANOT_READ
 21993                                  	;add	bx,dx	; (bx = Extent end)
 21994                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 21995                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 21996                                  	;call	SETVISIT
 21997                                  	; ->***
 21998                                  ;M039
 21999                                  	; MSDOS 6.0 
 22000 00003965 59                      	pop	cx
 22001 00003966 5A                      	pop	dx
 22002 00003967 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 22003 0000396C 72A2                    	jc	short CANOT_READ
 22004                                  
 22005 0000396E 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 22006                                  
 22007                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22008                                  ;            sectors, also termed an "Extent".)
 22009                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22010                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22011                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22012                                  ;
 22013                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 22014                                  ;	buffers must be "read" into the transfer memory block, so that the
 22015                                  ;       transfer memory reflects the most recent data.
 22016                                  
 22017 00003973 E85E00                  	call	DskRdBufScan
 22018                                  
 22019                                  	;Context DS
 22020 00003976 16                      	push	ss
 22021 00003977 1F                      	pop	ds
 22022                                          
 22023 00003978 59                      	pop	cx
 22024 00003979 5B                              pop	bx
 22025                                  
 22026                                  ;       CX = # of sector remaining.
 22027                                  ;       BX = Next physical cluster.
 22028                                  
 22029                                  ;M039
 22030                                  
 22031                                  ;;;;;;;;
 22032                                  ;	; 25/07/2018 - Retro DOS v3.0
 22033                                  ;	; ***->
 22034                                  ;	; MSDOS 3.3
 22035                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 22036                                  ;bufq:
 22037                                  ;;	DX = Extent start.
 22038                                  ;;	BX = Extent end.
 22039                                  ;;	 AL = Drive #.
 22040                                  ;;     DS:DI-> 1st buffer in queue.
 22041                                  ;
 22042                                  ;	;or	byte [di+5],20h
 22043                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22044                                  ;	;cmp	al,[di+4]	
 22045                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 22046                                  ;	jnz	short bufq3
 22047                                  ;	;cmp	[di+6],dx
 22048                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 22049                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 22050                                  ;	;cmp	[di+6],bx
 22051                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 22052                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 22053                                  ;	
 22054                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 22055                                  ;
 22056                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 22057                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 22058                                  ;;      as MRU (Most Recently Used).
 22059                                  ;
 22060                                  ;	;test	byte [di+5],40h
 22061                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 22062                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 22063                                  ;	pop	ax ; transfer address
 22064                                  ;	push	ax
 22065                                  ;	push	di
 22066                                  ;	push	dx
 22067                                  ;	;sub	dx,[di+6]
 22068                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 22069                                  ;	neg	dx
 22070                                  ;
 22071                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 22072                                  ;;           block.
 22073                                  ;
 22074                                  ;	mov	si,di
 22075                                  ;	mov	di,ax
 22076                                  ;	mov	ax,dx
 22077                                  ;	;mov	cx,[es:bp+6]	
 22078                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 22079                                  ;	mul	cx
 22080                                  ;	add	di,ax
 22081                                  ;
 22082                                  ;	lea	si,[si+16]
 22083                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 22084                                  ;	shr	cx,1
 22085                                  ;	push	es
 22086                                  ;	mov	es,[SS:DMAADD+2]
 22087                                  ;
 22088                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22089                                  ;;      DS:SI-> Buffer sector data.
 22090                                  ;;      ES:DI-> Destination within Transfer memory block.
 22091                                  ;
 22092                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 22093                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22094                                  ;	;rep	movsb                   ;Copy last byte.
 22095                                  ;	jnc	short bufq1
 22096                                  ;	movsb
 22097                                  ;bufq1:
 22098                                  ;	pop	es
 22099                                  ;	pop	dx
 22100                                  ;	pop	di
 22101                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 22102                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 22103                                  ;bufq2:
 22104                                  ;	call	SCANPLACE
 22105                                  ;bufq3:
 22106                                  ;	call	SKIPVISIT
 22107                                  ;	jnz	short bufq
 22108                                  ;	
 22109                                  ;	push	ss
 22110                                  ;	pop	ds
 22111                                  ;	pop	cx
 22112                                  ;	pop	cx
 22113                                  ;	pop	bx	
 22114                                  ;bufq4:
 22115                                  ;;;;;;;
 22116 0000397A E30D                    	JCXZ	RDLAST
 22117                                  
 22118 0000397C E8CE1B                  	call	IsEOF			; test for eof on fat size
 22119 0000397F 7325                    	JAE	short SETSFT
 22120                                  
 22121 00003981 B200                    	MOV	DL,0
 22122 00003983 FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 22123 00003987 EBC3                    	JMP	short RDLP ; 19/05/2019
 22124                                  
 22125                                  RDLAST:
 22126 00003989 A1[D405]                	MOV	AX,[BYTCNT2]
 22127 0000398C 09C0                    	OR	AX,AX
 22128 0000398E 7416                    	JZ	short SETSFT
 22129 00003990 A3[D205]                	MOV	[BYTCNT1],AX
 22130                                  
 22131 00003993 E8E813                  	call	NEXTSEC
 22132 00003996 720E                    	JC	short SETSFT
 22133                                  
 22134 00003998 C706[CC05]0000          	MOV	word [BYTSECPOS],0
 22135 0000399E E84813                  	call	BUFRD
 22136                                  	; 10/08/2018
 22137                                  
 22138 000039A1 7303                    	JNC	short SETSFT
 22139 000039A3 E96CFF                  	JMP	SET_ACC_ERR_DS
 22140                                  
 22141                                  ;------------------------------------------------------------------------------
 22142                                  ;
 22143                                  ; Procedure Name : SETSFT
 22144                                  ; Inputs:
 22145                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 22146                                  ;		and set cluster fields
 22147                                  ; Function:
 22148                                  ;	Update [THISSFT] based on the transfer
 22149                                  ; Outputs:
 22150                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 22151                                  ;	ES:DI points to [THISSFT]
 22152                                  ;	CX No. of bytes transferred
 22153                                  ;	Carry clear
 22154                                  ;
 22155                                  ;----------------------------------------------------------------------------
 22156                                  
 22157                                  	;entry	SETSFT
 22158                                  
 22159                                  ; 26/07/2018 - Retro DOS v3.0
 22160                                  SETSFT:
 22161 000039A6 C43E[9E05]              	LES	DI,[THISSFT]
 22162                                  
 22163                                  ; Same as SETSFT except ES:DI already points to SFT
 22164                                  	;entry	SETCLUS
 22165                                  SETCLUS:	
 22166 000039AA 8B0E[B805]              	MOV	CX,[NEXTADD]
 22167 000039AE 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22168                                  	;;test	word [es:di+5],80h
 22169                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22170                                  	;JNZ	short ADDREC		; don't set clusters if device
 22171                                  
 22172                                  	; 04/05/2019 - Retro DOS v4.0
 22173                                  	;test	byte [es:di+5],80h
 22174 000039B2 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22175 000039B7 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22176                                  
 22177 000039B9 A1[BC05]                	MOV	AX,[CLUSNUM]
 22178                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22179                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22180 000039BC 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22181 000039C0 A1[BA05]                	MOV	AX,[LASTPOS]
 22182                                  	;mov	[es:di+19h],ax
 22183 000039C3 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22184                                  
 22185                                  ;----------------------------------------------------------------------------
 22186                                  ;
 22187                                  ; Procedure : AddRec
 22188                                  ; Inputs:
 22189                                  ;	ES:DI points to SFT
 22190                                  ;	CX is No. Bytes transferred
 22191                                  ; Function:
 22192                                  ;	Update the SFT offset based on the transfer
 22193                                  ; Outputs:
 22194                                  ;	sf_position updated to point to first byte after transfer
 22195                                  ;	ES:DI points to SFT
 22196                                  ;	CX No. of bytes transferred
 22197                                  ;	Carry clear
 22198                                  ;----------------------------------------------------------------------------
 22199                                  
 22200                                  	;entry	AddRec
 22201                                  ADDREC:
 22202 000039C7 E309                    	JCXZ	RET28		; If no records read,  don't change position
 22203                                  	;add	[es:di+15h],cx
 22204 000039C9 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22205                                  	;adc	word [es:di+17h], 0
 22206 000039CD 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22207                                  RET28:	
 22208 000039D2 F8                      	CLC
 22209 000039D3 C3                      	retn
 22210                                  
 22211                                  ; 25/07/2018
 22212                                  ; MSDOS 6.0
 22213                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22214                                  ;----------------------------------------------------------------------------
 22215                                  ;
 22216                                  ; Procedure Name : DskRdBufScan
 22217                                  ;
 22218                                  ; Inputs:
 22219                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22220                                  ;            sectors, also termed an "Extent".)
 22221                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22222                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22223                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22224                                  ;
 22225                                  ; Function:
 22226                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22227                                  ;	"read" into the transfer memory block, so that the transfer memory
 22228                                  ;	reflects the most recent data.
 22229                                  ;
 22230                                  ; Outputs:
 22231                                  ;       Transfer memory updated as required.
 22232                                  ;
 22233                                  ; Uses:
 22234                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22235                                  ;       SS override for all global variables.
 22236                                  ;
 22237                                  ; Notes:
 22238                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22239                                  ;	than the FIRST.
 22240                                  ;----------------------------------------------------------------------------
 22241                                  ;M039: Created
 22242                                  
 22243                                  ; 04/05/2019 - Retro DOS v4.0
 22244                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22245                                  
 22246                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22247                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22248                                  
 22249                                  ;procedure DskRdBufScan,NEAR
 22250                                  ;
 22251                                  ;ASSUME  DS:NOTHING
 22252                                  
 22253                                  DskRdBufScan:
 22254 000039D4 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22255 000039DA 743C                    	je	short bufx		     ; -no, skip all work.
 22256                                  
 22257 000039DC 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22258 000039E1 89DE                    	mov     si,bx
 22259 000039E3 01D1                    	add     cx,dx
 22260 000039E5 83D600                  	adc     si,0
 22261                                  
 22262 000039E8 E8121F                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22263                                  	;mov	ax,[di+2]
 22264 000039EB 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22265 000039EE 36A3[BB0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22266                                  		
 22267                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22268                                  	;;mov	al,[es:bp+0]
 22269                                  	;mov	al,[es:bp+DPB.DRIVE]
 22270                                  	; 15/12/2022
 22271 000039F2 268A4600                	mov	al,[es:bp]
 22272                                  
 22273                                  ;       BX:DX = Extent start.
 22274                                  ;       SI:CX = Extent end + 1.
 22275                                  ;          AL = Drive #.
 22276                                  ;       DS:DI-> 1st buffer in queue.
 22277                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22278                                  
 22279                                  bufq:	
 22280                                  	;cmp	al,[di+4]
 22281 000039F6 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22282 000039F9 7514                    	jne	short bufq1        	;  -no, jump.
 22283                                  
 22284                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22285                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22286                                  
 22287                                  	;cmp	bx,[di+8]
 22288 000039FB 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22289 000039FE 7503                    	jne	short bufq01
 22290                                  	;cmp	dx,[di+6]
 22291 00003A00 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22292                                  bufq01:
 22293 00003A03 770A                    	ja	short bufq1
 22294                                  
 22295                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22296                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22297                                  
 22298                                  	;cmp	si,[di+8]
 22299 00003A05 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22300 00003A08 7503                    	jne	short bufq02
 22301                                  	;cmp	cx,[di+6]
 22302 00003A0A 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22303                                  bufq02:
 22304 00003A0D 770A                    	ja	short bufq2
 22305                                  bufq1:	
 22306 00003A0F 363B3E[BB0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22307 00003A14 8B3D                    	mov	di,[di]
 22308                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22309 00003A16 75DE                    	jne	short bufq		; -no, do next buffer
 22310                                  bufx:
 22311 00003A18 C3                      	retn				;Exit.
 22312                                  
 22313                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22314                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22315                                  ;       as MRU (Most Recently Used).
 22316                                  
 22317                                  bufq2:	
 22318 00003A19 50                      	push	ax
 22319                                  	;test	byte [di+5],40h
 22320 00003A1A F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22321 00003A1E 742D                    	jz	short bufq3                    ; -no, jump.
 22322                                  
 22323                                  ;       SaveReg <cx,dx,si,di,es>
 22324 00003A20 51                      	push	cx
 22325 00003A21 52                      	push	dx
 22326 00003A22 56                      	push	si
 22327 00003A23 57                      	push	di
 22328 00003A24 06                      	push	es
 22329                                  
 22330 00003A25 89D0                    	mov     ax,dx
 22331                                  	;sub	ax,[di+6]
 22332 00003A27 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22333 00003A2A F7D8                    	neg	ax
 22334                                  
 22335                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22336                                  ;            block. (Note: the upper word of the sector # may be ignored
 22337                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22338                                  ;            is imposed by the input parameters of the disk read operation.)
 22339                                  
 22340                                  	;lea	si,[di+20]
 22341 00003A2C 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22342                                  	;mov	cx,[es:bp+2]
 22343 00003A2F 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22344 00003A33 F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22345 00003A35 368B3E[0C06]            	mov     di,[ss:TEMP_VAR]
 22346 00003A3A 01C7                    	add	di,ax
 22347 00003A3C 368E06[0E06]            	mov	es,[ss:TEMP_VAR2]
 22348 00003A41 D1E9                    	shr	cx,1
 22349                                  
 22350                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22351                                  ;       DS:SI-> Buffer sector data.
 22352                                  ;       ES:DI-> Destination within Transfer memory block.
 22353                                  
 22354 00003A43 F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22355                                  	;; 04/05/2019
 22356                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22357                                  	;;rep	movsb                   ;Copy last byte.
 22358                                  	;jnc	short bufq03	
 22359                                  	;movsb
 22360                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22361                                  	;adc	cx,0
 22362                                  	;rep	movsb
 22363                                  	; 22/09/2023
 22364 00003A45 7301                    	jnc	short bufq03
 22365 00003A47 A4                      	movsb
 22366                                  bufq03:
 22367                                  	;RestoreReg <es,di,si,dx,cx>
 22368 00003A48 07                      	pop	es
 22369 00003A49 5F                      	pop	di
 22370 00003A4A 5E                      	pop	si
 22371 00003A4B 5A                      	pop	dx
 22372 00003A4C 59                      	pop	cx
 22373                                  
 22374                                  ;       DS:DI -> current buffer.
 22375                                  bufq3:	
 22376 00003A4D 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 22377                                          ;invoke SCANPLACE
 22378 00003A4F E8BD1E                  	call	SCANPLACE
 22379 00003A52 363B06[BB0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 22380 00003A57 58                      	pop	ax
 22381                                  	;jne	short bufq		; -no, jump.
 22382                                  	;;jmp	short bufx		; -yes, exit.
 22383                                  	;; 12/06/2019
 22384                                  	;retn
 22385                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22386 00003A58 759C                    	jne	short bufq
 22387 00003A5A EBBC                    	jmp	short bufx
 22388                                  
 22389                                  ;EndProc DskRdBufScan
 22390                                  
 22391                                  ;============================================================================
 22392                                  ; DISK3.ASM, MSDOS 6.0, 1991
 22393                                  ;============================================================================
 22394                                  ; 04/05/2019 - Retro DOS v4.0
 22395                                  ; 24/07/2018 - Retro DOS v3.0
 22396                                  
 22397                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 22398                                  ;----------------------------------------------------------------------------
 22399                                  ;
 22400                                  ; Procedure Name : DISKWRITE
 22401                                  ;
 22402                                  ; Inputs:
 22403                                  ;       Outputs of SETUP
 22404                                  ; Function:
 22405                                  ;       Perform disk write
 22406                                  ; Outputs:
 22407                                  ;    Carry clear
 22408                                  ;       CX = No. of bytes written
 22409                                  ;       ES:DI point to SFT
 22410                                  ;       SFT offset and cluster pointers updated
 22411                                  ;    Carry set
 22412                                  ;       CX = 0
 22413                                  ;       ES:DI point to SFT
 22414                                  ;       AX has error code
 22415                                  ;----------------------------------------------------------------------------
 22416                                  
 22417                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 22418                                  
 22419                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 22420                                  
 22421                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22422                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 22423                                  
 22424                                  DISKWRITE:
 22425                                  	; MSDOS 3.3
 22426                                  	; IBMDOS.COM - Offset 436Dh
 22427                                  	;;test	byte [es:di+4],8
 22428                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22429                                  	;jz	short write_cont
 22430                                  	;jmp	SET_ACC_ERR_DS
 22431                                  ;write_cont:
 22432                                  	;push	cx
 22433                                  	;or	cx,cx
 22434                                  	;jnz	short Not_Truncate
 22435                                  	;;mov	cx,-1
 22436                                  	;dec	cx
 22437                                  ;Not_Truncate:
 22438                                  	;call	LOCK_CHECK
 22439                                  	;pop	cx
 22440                                  	;jnb	short _WRITE_OK
 22441                                  	;call	WRITE_LOCK_VIOLATION
 22442                                  	;jnb	short DISKWRITE
 22443                                  	;retn
 22444                                  
 22445                                  	; MSDOS 6.0
 22446 00003A5C E8F0FC                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 22447                                  	; 19/08/2018
 22448 00003A5F 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 22449 00003A61 C3                      	retn
 22450                                  
 22451                                  WRTEOFJ:
 22452 00003A62 E9DC01                  	JMP     WRTEOF
 22453                                  
 22454                                  _WRITE_OK:
 22455                                   	; 27/07/2018
 22456                                  	; IBMDOS.COM - Offset 438Eh
 22457                                  	
 22458                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22459                                  	;and	word [es:di+5],0BFBFh
 22460 00003A65 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 22461                                  				; Mark file as dirty, clear no date on close
 22462                                  
 22463                                  	; 04/05/2019 - Retro DOS v4.0	
 22464                                  
 22465                                  	; MSDOS 6.0
 22466                                  	; mov 	ax,[es:di+11h]
 22467 00003A6B 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 22468 00003A6F A3[0C06]                        MOV	[TEMP_VAR],AX                           ;M039
 22469                                  	;mov	ax,[es:di+13h]
 22470 00003A72 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 22471 00003A76 A3[0E06]                        MOV	[TEMP_VAR2],AX                          ;M039
 22472                                  
 22473                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 22474                                  
 22475                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22476 00003A79 C42E[8A05]              	LES     BP,[THISDPB]
 22477                                  
 22478 00003A7D E8FFFD                  	call	BREAKDOWN
 22479                                  
 22480 00003A80 A1[CE05]                	MOV     AX,[BYTPOS]
 22481 00003A83 8B16[D005]              	MOV     DX,[BYTPOS+2]
 22482 00003A87 E3D9                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 22483 00003A89 01C8                    	ADD     AX,CX
 22484 00003A8B 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 22485                                  
 22486                                  	;mov	bx,[es:bp+2]
 22487 00003A8E 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 22488                                  
 22489                                  	; MSDOS 3.3
 22490                                  	;cmp	dx,bx
 22491                                  	;jnb	short WRTERR33
 22492                                  	;div	bx
 22493                                  	;mov	bx,ax
 22494                                  	;OR	DX,DX
 22495                                  	;JNZ	short CALCLUS
 22496                                  	;dec	ax
 22497                                  ;CALCLUS:
 22498                                  	; MSDOS 3.3
 22499                                  	;mov	cl,[es:bp+5]
 22500                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22501                                  	;shr	ax,cl
 22502                                  	;push	ax
 22503                                  	;push	dx
 22504                                  	;push	es
 22505                                  	;les	di,[THISSFT]
 22506                                  	;;mov	ax,[es:di+11h]
 22507                                  	;;mov	dx,[es:di+13h]
 22508                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 22509                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 22510                                  	;pop	es
 22511                                  	;;DX:AX = current file size (in bytes).
 22512                                  	;;div	word [es:bp+2]
 22513                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22514                                  	;mov	cx,ax
 22515                                  	;or	dx,dx
 22516                                  	;jz	short NORND
 22517                                  	;inc	ax
 22518                                  ;NORND:
 22519                                  	; MSDOS 6.0
 22520 00003A92 E8DC02                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 22521 00003A95 89C6                    	MOV	SI,AX
 22522 00003A97 890E[0706]                      MOV	[HIGH_SECTOR],CX
 22523                                  
 22524                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 22525                                  
 22526 00003A9B 09D2                    	OR	DX,DX
 22527 00003A9D 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 22528 00003A9E 89CA                    	MOV	DX,CX			;M039
 22529 00003AA0 7506                    	JNZ	short CALCLUS
 22530 00003AA2 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 22531 00003AA5 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 22532                                  
 22533                                  CALCLUS:
 22534                                  	; MSDOS 6.0
 22535 00003AA8 E8ED02                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 22536 00003AAB 5A                      	POP	DX
 22537                                  
 22538                                  ;       AX = Last cluster to write.
 22539                                  ;       DX = # of bytes in last sector to write (the "tail").
 22540                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 22541                                  
 22542 00003AAC 50                      	PUSH	AX
 22543 00003AAD 52                      	PUSH	DX
 22544                                  ;M039
 22545 00003AAE 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 22546 00003AB2 A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 22547 00003AB5 E8B902                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 22548 00003AB8 890E[0E06]              	mov	[TEMP_VAR2],cx
 22549 00003ABC 890E[CA05]              	mov	[VALSEC+2],cx
 22550 00003AC0 89C1                    	mov	cx,ax
 22551 00003AC2 89F3                    	mov	bx,si
 22552                                  
 22553                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 22554                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 22555                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 22556                                  ;                     DX = # of bytes in last sector of current file.
 22557                                  ;M039
 22558 00003AC4 09D2                    	OR	DX,DX
 22559 00003AC6 7407                    	JZ	short NORND
 22560                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 22561                                  	;ADC	word [VALSEC+2],0
 22562                                  	; 22/09/2023
 22563 00003AC8 40                      	inc	ax  ; 0FFFFh -> 0
 22564 00003AC9 7504                    	jnz	short NORND
 22565 00003ACB FF06[CA05]              	inc	word [VALSEC+2]
 22566                                  NORND:		
 22567                                  	; MSDOS 3.3 & MSDOS 6.0
 22568 00003ACF A3[C805]                	MOV     [VALSEC],AX
 22569                                  
 22570                                  ;       [VALSEC] = Last sector of current file.
 22571                                  
 22572 00003AD2 31C0                    	XOR     AX,AX
 22573 00003AD4 A3[DE05]                	MOV     [GROWCNT],AX
 22574 00003AD7 A3[E005]                	MOV     [GROWCNT+2],AX
 22575 00003ADA 58                      	POP     AX
 22576                                  
 22577                                  	; MSDOS 6.0
 22578 00003ADB 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 22579 00003ADF 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 22580 00003AE3 7263                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 22581 00003AE5 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 22582 00003AE7 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 22583 00003AE9 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 22584 00003AED EB08                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 22585                                  lowsec:
 22586                                  	;MOV	DI,0			;F.C. >32mb
 22587                                  	; 22/09/2023
 22588 00003AEF 31FF                    	xor	di,di
 22589                                  	; MSDOS 3.3 & MSDOS 6.0
 22590 00003AF1 29CB                    	SUB	BX,CX			; Number of full sectors
 22591 00003AF3 7253                    	JB	short NOGROW
 22592 00003AF5 7444                    	JZ	short TESTTAIL
 22593                                  yesgrow:
 22594                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22595 00003AF7 89D1                    	MOV     CX,DX
 22596 00003AF9 93                      	XCHG    AX,BX
 22597                                  	;mul	word [es:bp+2]
 22598 00003AFA 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 22599                                  	
 22600                                  	; MSDOS 6.0
 22601 00003AFE 8916[0706]              	MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 22602 00003B02 A3[0E06]                	MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 22603 00003B05 89F8                    	MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 22604                                  	;mul	word [es:bp+2]
 22605 00003B07 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 22606                                  	
 22607 00003B0B 0306[0706]              	ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 22608 00003B0F 89C2                    	MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 22609 00003B11 A1[0E06]                	MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 22610                                  
 22611                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22612 00003B14 29C8                    	SUB     AX,CX			; Take off current "tail"
 22613 00003B16 83DA00                  	SBB     DX,0			; 32-bit extension
 22614 00003B19 01D8                    	ADD     AX,BX			; Add on new "tail"
 22615 00003B1B 83D200                  	ADC     DX,0			; ripple tim's head off
 22616 00003B1E EB21                    	JMP     SHORT SETGRW
 22617                                  
 22618                                  HAVSTART:
 22619                                  	;int 3
 22620 00003B20 89C1                    	MOV     CX,AX
 22621 00003B22 E86E11                  	call	SKPCLP
 22622                                  	;JCXZ	DOWRTJ
 22623                                  	; 16/12/2022
 22624 00003B25 E357                    	jcxz	DOWRT
 22625                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22626                                  	;jcxz	DOWRTJ
 22627                                  
 22628 00003B27 E81013                  	call	ALLOCATE
 22629                                  	;JNC	short DOWRTJ
 22630                                  	; 16/12/2022
 22631 00003B2A 7352                    	jnc	short DOWRT
 22632                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22633                                  	;jnc	short DOWRTJ
 22634                                  
 22635                                  	;entry   WRTERR
 22636                                  WRTERR:
 22637 00003B2C B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort      ;AN000;
 22638                                  
 22639                                  	;entry WRTERR22
 22640                                  WRTERR22:
 22641 00003B2E A0[7605]                	MOV     AL,[THISDRV]		;MS.                            ;AN000;
 22642                                  
 22643                                  	; 27/07/2018
 22644                                  WRTERR33:
 22645                                  	;MOV	CX,0			;No bytes transferred
 22646 00003B31 31C9                    	XOR     CX,CX
 22647                                  					
 22648 00003B33 C43E[9E05]              	LES     DI,[THISSFT]
 22649                                  	;CLC ; 19/05/2019
 22650                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22651                                  	; 16/12/2022
 22652                                  	;clc
 22653 00003B37 C3                      	retn
 22654                                  
 22655                                  	; 16/12/2022
 22656                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22657                                  ;DOWRTJ:
 22658                                  	;JMP	short DOWRT
 22659                                  
 22660                                  ACC_ERRWJ:
 22661                                  	; 10/08/2018
 22662                                  	;JMP	SET_ACC_ERRW
 22663                                  	; 16/12/2022
 22664 00003B38 E9D7FD                  	jmp	SET_ACC_ERR_DS
 22665                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22666                                  	;jmp	SET_ACC_ERRW	
 22667                                  
 22668                                  TESTTAIL:
 22669 00003B3B 29D0                    	SUB     AX,DX
 22670 00003B3D 7609                    	JBE	short NOGROW
 22671 00003B3F 31D2                    	XOR     DX,DX
 22672                                  SETGRW:
 22673 00003B41 A3[DE05]                	MOV	[GROWCNT],AX
 22674 00003B44 8916[E005]              	MOV	[GROWCNT+2],DX
 22675                                  NOGROW:
 22676 00003B48 58                      	POP     AX
 22677 00003B49 8B0E[BC05]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 22678 00003B4D E82311                  	call	FNDCLUS
 22679 00003B50 72E6                    	JC	short ACC_ERRWJ
 22680 00003B52 891E[BC05]              	MOV     [CLUSNUM],BX
 22681 00003B56 8916[BA05]              	MOV     [LASTPOS],DX
 22682                                  
 22683 00003B5A 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 22684 00003B5C 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 22685 00003B5E E3C0                    	JCXZ    HAVSTART        ; See if no more data
 22686 00003B60 51                      	PUSH    CX              ; No. of clusters short of first
 22687 00003B61 89C1                    	MOV     CX,AX
 22688 00003B63 E8D412                  	call	ALLOCATE
 22689 00003B66 59                      	POP     CX
 22690 00003B67 72C3                    	JC	short WRTERR
 22691 00003B69 8B16[BA05]              	MOV     DX,[LASTPOS]
 22692 00003B6D 42                      	INC     DX
 22693 00003B6E 49                      	DEC     CX
 22694 00003B6F 7405                    	JZ	short NOSKIP
 22695 00003B71 E81F11                  	call	SKPCLP
 22696 00003B74 72C2                    	JC	short ACC_ERRWJ
 22697                                  NOSKIP:
 22698 00003B76 891E[BC05]              	MOV     [CLUSNUM],BX
 22699 00003B7A 8916[BA05]              	MOV     [LASTPOS],DX
 22700                                  DOWRT:
 22701 00003B7E 833E[D205]00            	CMP     word [BYTCNT1],0
 22702 00003B83 7409                    	JZ	short WRTMID
 22703 00003B85 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22704 00003B89 E89611                  	call	BUFWRT
 22705 00003B8C 72AA                    	JC	short ACC_ERRWJ
 22706                                  WRTMID:
 22707 00003B8E A1[D605]                	MOV     AX,[SECCNT]
 22708 00003B91 09C0                    	OR      AX,AX
 22709                                  	; 20/11/2022
 22710 00003B93 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 22711 00003B95 0106[C405]              	ADD     [SECPOS],AX
 22712                                  	; 19/05/2019
 22713                                  	; MSDOS 6.0
 22714 00003B99 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 22715 00003B9E E8DD11                  	call	NEXTSEC
 22716                                  	; 16/12/2022
 22717 00003BA1 7295                    	JC	short ACC_ERRWJ
 22718                                  	;JC	short SET_ACC_ERRW	;M039
 22719 00003BA3 C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 22720 00003BA8 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 22721 00003BAC 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22722 00003BB0 8B0E[D605]              	MOV     CX,[SECCNT]
 22723                                  WRTLP:
 22724 00003BB4 E8F811                  	call	OPTIMIZE
 22725 00003BB7 7248                    	JC	short SET_ACC_ERRW
 22726                                  	; 16/12/2022
 22727                                  	;JC	short ACC_ERRWJ
 22728                                  
 22729                                  ;M039
 22730                                  ;       DI = Next physical cluster.
 22731                                  ;       AX = # sectors remaining.
 22732                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 22733                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 22734                                  ;	     sectors, also termed an "Extent".)
 22735                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22736                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22737                                  ;
 22738                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 22739                                  ;	are in Extent; they are being over-written.
 22740                                  
 22741 00003BB9 57                      	push    di
 22742 00003BBA 50                      	push    ax
 22743                                  
 22744                                  	; MSDOS 3.3
 22745                                  	; IBMDOS.COM (1987) - Offset 4497h
 22746                                  	;push	dx
 22747                                  	;push	bx
 22748                                  	;mov	al,[es:bp]
 22749                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 22750                                  	;mov	bx,cx
 22751                                  	;add	bx,dx	; (bx = Extent end)
 22752                                  
 22753                                  ;	DX = Extent start.
 22754                                  ;	BX = Extent end.
 22755                                  ;	AL = Drive #.
 22756                                  
 22757                                  	;call	SETVISIT
 22758                                  
 22759                                  ;wbufq1:
 22760                                  	;;or	byte [di+5],20h
 22761                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22762                                  	;;cmp	al,[di+4]	
 22763                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 22764                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 22765                                  	;;cmp	[di+6],dx
 22766                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 22767                                  	;jb	short wbufq2
 22768                                  	;;cmp	[di+6],bx
 22769                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 22770                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 22771                                  
 22772                                  	;; Buffer sector is in the Extent
 22773                                  
 22774                                  	;;mov	word [di+4],20FFh
 22775                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 22776                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 22777                                  	;				; .buf_flags, AH = 0, reset/clear
 22778                                  	;call	SCANPLACE
 22779                                  ;wbufq2:
 22780                                  	;call	SKIPVISIT
 22781                                  	;jnz	short wbufq1
 22782                                  	;pop	bx
 22783                                  	;pop	dx
 22784                                  
 22785                                          ; MSDOS 6.0
 22786 00003BBB E82D01                  	call	DskWrtBufPurge		;DS trashed.
 22787                                  
 22788                                  ;ASSUME DS:NOTHING
 22789                                  ;M039
 22790                                  	; MSDOS 3.3 & MSDOS 6.0
 22791                                  ;hkn; SS override for DMAADD and ALLOWED
 22792 00003BBE 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 22793                                  	;mov	byte [ss:ALLOWED],38h
 22794 00003BC3 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22795                                  
 22796                                  ;	put logic from DWRITE in-line here so we can modify it
 22797                                  ;	for DISK FULL conditions.
 22798                                  
 22799                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22800                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 22801                                  
 22802                                  	; 16/12/2022
 22803                                  	; MSDOS 3.3 (& MSDOS 5.0)
 22804                                  	;call	DWRITE
 22805                                  
 22806                                  ;DWRITE_OKAY:
 22807                                  
 22808                                  	; 16/12/2022
 22809                                  	; MSDOS 5.0 (& MSDOS 3.3)
 22810                                  	;pop     cx
 22811                                  	;pop     bx
 22812                                  	;push    ss
 22813                                  	;pop     ds
 22814                                  	;jc      short SET_ACC_ERRW
 22815                                  	;jcxz    WRTLAST
 22816                                  	;mov     dl, 0
 22817                                  	;inc     word [LASTPOS]
 22818                                  	;jmp     short WRTLP
 22819                                  
 22820                                  	; 16/12/2022
 22821                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22822                                  DWRITE_LUP:
 22823                                  	; 23/07/2019 - Retro DOS v3.2
 22824                                  
 22825                                  	; MSDOS 6.0
 22826 00003BC9 E8E1FB                  	call	DSKWRITE
 22827 00003BCC 7417                    	jz	short DWRITE_OKAY
 22828                                  
 22829                                  ;;	int	3
 22830                                  
 22831 00003BCE 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 22832 00003BD0 7423                    	jz	short DWRITE_DISK_FULL
 22833                                  
 22834                                  	; 16/12/2022
 22835                                  
 22836                                  ;;hkn; SS override
 22837 00003BD2 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 22838 00003BD8 E801FC                  	call	HARDERRRW
 22839 00003BDB 3C01                    	CMP	AL,1		; Check for retry
 22840 00003BDD 74EA                    	JZ	short DWRITE_LUP
 22841                                  
 22842                                  	; 16/12/2022
 22843                                  	; 23/07/2019
 22844                                  	;POP	CX ; *4*
 22845                                  	;POP	BX ; *5*
 22846                                  	;
 22847                                  	;push	ss
 22848                                  	;pop	ds
 22849                                  	;
 22850                                  
 22851                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22852                                  
 22853                                  	; 16/12/2022
 22854 00003BDF 3C03                    	CMP	AL,3		; Check for FAIL
 22855 00003BE1 F8                      	CLC
 22856 00003BE2 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 22857 00003BE4 F9                      	STC
 22858                                  
 22859                                  DWRITE_OKAY:
 22860                                  	; 16/12/2022
 22861                                  	; 23/07/2019
 22862                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22863 00003BE5 59                      	POP	CX ; *4*
 22864 00003BE6 5B                      	POP	BX ; *5*
 22865                                  
 22866                                  ;       CX = # sectors remaining.
 22867                                  ;       BX = Next physical cluster.
 22868                                  
 22869                                  ;hkn; SS override
 22870                                          ;Context DS
 22871                                  	; 16/12/2022
 22872                                  	;push	ss
 22873                                  	;pop	ds
 22874                                  
 22875                                  	; 16/12/2022
 22876 00003BE7 7218                    	jc	short SET_ACC_ERRW
 22877                                  
 22878                                  	; 16/12/2022
 22879 00003BE9 16                      	push	ss
 22880 00003BEA 1F                      	pop	ds
 22881                                  
 22882 00003BEB E317                    	JCXZ    WRTLAST
 22883                                  
 22884                                  	;MOV	DL,0
 22885 00003BED 30D2                    	xor	dl,dl ; 23/07/2019
 22886 00003BEF FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 22887 00003BF3 EBBF                    	JMP     short WRTLP
 22888                                  
 22889                                  	; 23/07/2019 - Retro DOS v3.2
 22890                                  	; 09/08/2018
 22891                                  	; MSDOS 6.0
 22892                                  DWRITE_DISK_FULL:
 22893                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 22894                                  	; 16/12/2022
 22895 00003BF5 16                      	push	ss
 22896 00003BF6 1F                      	pop	ds
 22897 00003BF7 59                      	pop	cx		; unjunk stack
 22898 00003BF8 5B                      	pop	bx
 22899 00003BF9 C606[0B06]01            	mov	byte [DISK_FULL],1
 22900                                  	;stc
 22901 00003BFE E92BFF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 22902                                  
 22903                                  	; 16/12/2022
 22904                                  SET_ACC_ERRW:
 22905 00003C01 E90EFD                  	jmp	SET_ACC_ERR_DS
 22906                                  
 22907                                  WRTLAST:
 22908 00003C04 A1[D405]                	MOV     AX,[BYTCNT2]
 22909 00003C07 09C0                    	OR      AX,AX
 22910 00003C09 7413                    	JZ	short FINWRT
 22911 00003C0B A3[D205]                	MOV     [BYTCNT1],AX
 22912 00003C0E E86D11                  	call	NEXTSEC
 22913 00003C11 72EE                    	JC	short SET_ACC_ERRW
 22914 00003C13 C706[CC05]0000          	MOV     word [BYTSECPOS],0
 22915 00003C19 E80611                  	call	BUFWRT
 22916 00003C1C 72E3                    	JC	short SET_ACC_ERRW
 22917                                  FINWRT:
 22918 00003C1E C43E[9E05]              	LES     DI,[THISSFT]
 22919 00003C22 A1[DE05]                	MOV     AX,[GROWCNT]
 22920 00003C25 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 22921 00003C29 09C0                    	OR      AX,AX
 22922 00003C2B 7502                    	JNZ	short UPDATE_size
 22923 00003C2D E30F                    	JCXZ    SAMSIZ
 22924                                  UPDATE_size:
 22925                                  	;add	[es:di+11h],ax
 22926 00003C2F 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 22927                                  	;adc	[es:di+13h],cx
 22928 00003C33 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 22929                                  
 22930                                  ; Make sure that all other SFT's see this growth also.
 22931                                  
 22932 00003C37 B80100                  	MOV     AX,1
 22933                                  ;if installed
 22934                                  	;Call	JShare + 14 * 4
 22935 00003C3A FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 22936                                  ;else
 22937                                  ;	Call    ShSU
 22938                                  ;endif
 22939                                  
 22940                                  SAMSIZ:
 22941 00003C3E E969FD                  	jmp	SETCLUS	; ES:DI already points to SFT
 22942                                  
 22943                                  	; 16/12/2022
 22944                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22945                                  ;SET_ACC_ERRW:
 22946                                  	;jmp	SET_ACC_ERR_DS
 22947                                  
 22948                                  WRTEOF:
 22949 00003C41 89C1                    	MOV     CX,AX
 22950 00003C43 09D1                    	OR      CX,DX
 22951 00003C45 746C                    	JZ	short KILLFIL
 22952 00003C47 83E801                  	SUB     AX,1
 22953 00003C4A 83DA00                  	SBB     DX,0
 22954                                  
 22955                                  	; MSDOS 3.3
 22956                                  	;;div	word [es:bp+2]
 22957                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22958                                  	;;mov	cl,[es:bp+5]
 22959                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 22960                                  	;shr	ax,cl
 22961                                  
 22962                                  	; MSDOS 6.0
 22963 00003C4D 53                      	PUSH	BX
 22964                                  	;mov	bx,[es:bp+2]
 22965 00003C4E 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 22966 00003C52 E81C01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 22967 00003C55 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 22968 00003C56 89CA                    	MOV	DX,CX			      ;M039
 22969 00003C58 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 22970 00003C5C E83901                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 22971                                  
 22972 00003C5F 89C1                    	MOV     CX,AX
 22973 00003C61 E80F10                  	call	FNDCLUS
 22974                                  SET_ACC_ERRWJ2:
 22975 00003C64 729B                    	JC	short SET_ACC_ERRW
 22976                                  
 22977 00003C66 E326                    	JCXZ    RELFILE
 22978 00003C68 E8CF11                  	call	ALLOCATE
 22979                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 22980                                  	; 16/12/2022
 22981 00003C6B 7303                    	jnc	short UPDATE
 22982 00003C6D E9BCFE                  	JMP	WRTERR
 22983                                  UPDATE:
 22984 00003C70 C43E[9E05]              	LES	DI,[THISSFT]
 22985 00003C74 A1[CE05]                	MOV	AX,[BYTPOS]
 22986                                  	;mov	[es:di+11h],ax
 22987 00003C77 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 22988 00003C7B A1[D005]                	MOV	AX,[BYTPOS+2]
 22989                                  	;mov	[es:di+13h],ax
 22990 00003C7E 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 22991                                  ;
 22992                                  ; Make sure that all other SFT's see this growth also.
 22993                                  ;
 22994 00003C82 B80200                  	MOV     AX,2
 22995                                  ;if installed
 22996                                  	;Call	JShare + 14 * 4
 22997 00003C85 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 22998                                  ;else
 22999                                  ;	Call    ShSU
 23000                                  ;endif
 23001 00003C89 31C9                    	XOR     CX,CX
 23002 00003C8B E939FD                  	jmp	ADDREC
 23003                                  
 23004                                  	; 16/12/2022
 23005                                  ;WRTERRJ: 
 23006                                  	;JMP	WRTERR
 23007                                  
 23008                                  ;;;;;;;;;;;;;;;; 7/18/86
 23009                                  ;;;;;;;;;;;;;;;;
 23010                                  
 23011                                  RELFILE:
 23012                                  	; MSDOS 6.0
 23013 00003C8E 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 23014 00003C8F C43E[9E05]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 23015                                  	;cmp	dx,[es:di+19h]
 23016 00003C93 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 23017 00003C97 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 23018                                  	;mov	[es:di+19h],0
 23019 00003C99 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 23020                                  	;mov	dx,[es:di+0Bh]
 23021 00003C9F 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 23022                                  	;mov	[es:di+35h],dx
 23023 00003CA3 26895535                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 23024                                  SKIPRESET:                            		;AN002; BL
 23025 00003CA7 07                      	POP     ES                    		;AN002; BL
 23026                                  ;
 23027 00003CA8 BAFFFF                  	MOV     DX,0FFFFH
 23028 00003CAB E83A12                  	call	RELBLKS
 23029                                  	; 16/12/2022
 23030                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23031 00003CAE 73C0                    	jnc	short UPDATE
 23032                                  SET_ACC_ERRWJ:
 23033                                  	;JC	short SET_ACC_ERRWJ2
 23034                                  	;JMP	SHORT UPDATE
 23035                                  	; 16/12/2022
 23036 00003CB0 E95FFC                  	jmp	SET_ACC_ERR_DS
 23037                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23038                                  	;JC	short SET_ACC_ERRWJ2
 23039                                  	;JMP	SHORT UPDATE
 23040                                  
 23041                                  KILLFIL:
 23042 00003CB3 31DB                    	XOR     BX,BX
 23043 00003CB5 06                      	PUSH    ES
 23044 00003CB6 C43E[9E05]              	LES     DI,[THISSFT]
 23045                                  	;mov	[es:di+19h],bx
 23046 00003CBA 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 23047                                  	;mov	[es:di+35h],bx ; 04/05/2019
 23048 00003CBE 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 23049                                  	;xchg	bx,[es:di+0Bh]
 23050 00003CC2 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 23051 00003CC6 07                      	POP	ES
 23052                                  
 23053 00003CC7 09DB                    	OR	BX,BX
 23054                                  	;JZ	short UPDATEJ
 23055                                  	; 16/12/2022
 23056 00003CC9 74A5                    	jz	short UPDATE
 23057                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23058                                  	;jz	short UPDATEJ
 23059                                  
 23060                                  ;; 10/23/86 FastOpen update
 23061 00003CCB 06                      	PUSH	ES              ; since first cluster # is 0
 23062 00003CCC 55                      	PUSH	BP              ; we must delete the old cache entry
 23063 00003CCD 50                      	PUSH	AX
 23064 00003CCE 51                      	PUSH	CX
 23065 00003CCF 52                      	PUSH	DX
 23066 00003CD0 C42E[8A05]              	LES	BP,[THISDPB]             ; get current DPB
 23067                                  	; 15/12/2022
 23068 00003CD4 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 23069                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23070                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 23071 00003CD8 89D9                    	MOV	CX,BX                    ; first cluster #
 23072 00003CDA B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 23073 00003CDC E840EA                  	call	FastOpen_Update          ; call fastopen
 23074 00003CDF 5A                      	POP	DX
 23075 00003CE0 59                      	POP	CX
 23076 00003CE1 58                      	POP	AX
 23077 00003CE2 5D                      	POP	BP
 23078 00003CE3 07                      	POP	ES
 23079                                  ;; 10/23/86 FastOpen update
 23080                                  
 23081 00003CE4 E8FF11                  	call	RELEASE
 23082 00003CE7 72C7                    	JC	short SET_ACC_ERRWJ
 23083                                  UPDATEJ:
 23084                                  	; 20/11/2022
 23085 00003CE9 EB85                    	JMP	short UPDATE ; 10/08/2018
 23086                                  
 23087                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 23088                                  ;----------------------------------------------------------------------------
 23089                                  ;
 23090                                  ; Procedure Name : DskWrtBufPurge
 23091                                  ;
 23092                                  ; Inputs:
 23093                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23094                                  ;	     sectors, also termed an "Extent".)
 23095                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23096                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23097                                  ;
 23098                                  ; Function:
 23099                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23100                                  ;	are in Extent; they are being over-written.
 23101                                  ;
 23102                                  ; Outputs:
 23103                                  ;       (Same as Input.)
 23104                                  ; Uses:
 23105                                  ;       All registers except DS,AX,SI,DI preserved.
 23106                                  ;       SS override for all global variables.
 23107                                  ;----------------------------------------------------------------------------
 23108                                  ;M039: Created
 23109                                  
 23110                                  ;procedure   DskWrtBufPurge,NEAR
 23111                                  ;
 23112                                  ;ASSUME  DS:NOTHING
 23113                                  
 23114                                  ; 04/05/2019 - Retro DOS v4.0
 23115                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 23116                                  
 23117                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23118                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 23119                                  
 23120                                  DskWrtBufPurge:
 23121                                  	;SaveReg <bx,cx>
 23122 00003CEB 53                      	push	bx
 23123 00003CEC 51                      	push	cx
 23124                                  
 23125 00003CED 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 23126 00003CF2 89DE                    	mov	si,bx
 23127 00003CF4 01D1                    	add	cx,dx
 23128 00003CF6 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 23129                                  
 23130                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23131                                  	;;mov	al,[es:bp+0]
 23132                                  	;mov	al,[es:bp+DPB.DRIVE]
 23133                                  	; 15/12/2022
 23134 00003CF9 268A4600                	mov	al,[es:bp]
 23135                                  
 23136                                  ;	BX:DX = Extent start.
 23137                                  ;	SI:CX = Extent end + 1.
 23138                                  ;	AL = Drive #
 23139                                  
 23140 00003CFD 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 23141 00003D03 7431                    	je	short nosc		; -no, jump.
 23142                                  
 23143                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 23144                                  ;	invalidate the entire SC. (This is an optimization; we really only
 23145                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 23146                                  
 23147 00003D05 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 23148 00003D0A 752A                    	jne	short nosc		; -no, jump.
 23149                                  
 23150 00003D0C 50                      	push    ax
 23151 00003D0D 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 23152 00003D11 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 23153                                  
 23154                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 23155                                  	;jbe	short sc5		; -yes, jump.
 23156                                  
 23157 00003D16 39FE                    	cmp	si,di
 23158 00003D18 7502                    	jne	short sc01
 23159 00003D1A 39C1                    	cmp	cx,ax
 23160                                  sc01: 
 23161 00003D1C 7617                    	jbe	short sc5	
 23162                                  
 23163 00003D1E 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 23164 00003D23 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 23165                                  	
 23166                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 23167                                  	;jae	short sc5		; -yes, jump.
 23168                                  
 23169 00003D26 39FB                    	cmp	bx,di
 23170 00003D28 7502                    	jne	short sc02
 23171 00003D2A 39C2                    	cmp	dx,ax
 23172                                  sc02:
 23173 00003D2C 7307                    	jnb	short sc5
 23174                                  
 23175 00003D2E 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 23176                                  sc5:	
 23177 00003D35 58                      	pop     ax
 23178                                  
 23179                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23180                                  ;	written.
 23181                                  
 23182                                  nosc:	
 23183 00003D36 E8C41B                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23184                                  
 23185                                  _bufq:	
 23186                                  	;cmpo	al,[di+4]
 23187 00003D39 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23188 00003D3C 7527                    	jne	short bufq5		; -no, jump.
 23189                                  
 23190                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23191                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23192                                  
 23193                                  	;cmp	bx,[di+8]
 23194 00003D3E 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23195 00003D41 7503                    	jne	short bufq04
 23196                                  	;cmp	dx,[di+6]
 23197 00003D43 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23198                                  bufq04:
 23199 00003D46 771D                    	ja	short bufq5
 23200                                  
 23201                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23202                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23203                                  
 23204                                  	;cmp	si,[di+8]
 23205 00003D48 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23206 00003D4B 7503                    	jne	short bufq05
 23207                                  	;cmp	cx,[di+6]
 23208 00003D4D 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23209                                  bufq05:
 23210 00003D50 7613                    	jbe	short bufq5
 23211                                  
 23212                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23213                                  
 23214                                  	;test	byte [di+5],40h
 23215 00003D52 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23216 00003D56 7403                    	jz	short bufq4		; -no, jump.
 23217 00003D58 E8231E                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23218                                  bufq4:
 23219                                  	;mov	word [di+4],20FFh
 23220 00003D5B C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23221                                  
 23222 00003D60 E8AC1B                  	call	SCANPLACE
 23223 00003D63 EB02                    	jmp     short bufq6
 23224                                  bufq5: 
 23225 00003D65 8B3D                    	mov     di,[di]
 23226                                  	;mov	di,[di+BUFFINFO.buf_next]
 23227                                  bufq6: 
 23228 00003D67 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23229 00003D6C 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23230                                  	
 23231                                  	;RestoreReg <cx,bx>
 23232 00003D6E 59                      	pop	cx
 23233 00003D6F 5B                      	pop	bx
 23234 00003D70 C3                      	retn
 23235                                  
 23236                                  ;EndProc DskWrtBufPurge
 23237                                  
 23238                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23239                                  ;----------------------------------------------------------------------------
 23240                                  ;
 23241                                  ; Procedure Name : DIV32
 23242                                  ;
 23243                                  ; Inputs:
 23244                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23245                                  ; Function:
 23246                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23247                                  ; Outputs:
 23248                                  ;       CX:AX = quotient , DX= remainder
 23249                                  ; Uses:
 23250                                  ;       All registers except AX,CX,DX preserved.
 23251                                  ;----------------------------------------------------------------------------
 23252                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23253                                  
 23254                                  ; 04/05/2019 - Retro DOS v4.0
 23255                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23256                                  
 23257                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23258                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23259                                  
 23260                                  DIV32:
 23261 00003D71 81FB0002                	cmp	bx,512
 23262 00003D75 7515                    	jne	short div5
 23263                                  
 23264 00003D77 89D1                    	mov	cx,dx
 23265 00003D79 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23266 00003D7B 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23267 00003D7F 88E0                    	mov	al,ah
 23268 00003D81 88CC                    	mov	ah,cl
 23269 00003D83 88E9                    	mov	cl,ch
 23270 00003D85 30ED                    	xor	ch,ch
 23271 00003D87 D1E9                    	shr	cx,1
 23272 00003D89 D1D8                    	rcr	ax,1
 23273 00003D8B C3                      	retn
 23274                                  div5:	
 23275 00003D8C 89C1                    	mov	cx,ax
 23276 00003D8E 89D0                    	mov	ax,dx
 23277 00003D90 31D2                    	xor	dx,dx
 23278 00003D92 F7F3                    	div	bx              ; 0:AX/BX
 23279 00003D94 91                      	xchg	cx,ax
 23280 00003D95 F7F3                    	div	bx              ; DX:AX/BX
 23281 00003D97 C3                      	retn
 23282                                  
 23283                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23284                                  ;----------------------------------------------------------------------------
 23285                                  ;
 23286                                  ; Procedure Name : SHR32
 23287                                  ;
 23288                                  ; Inputs:
 23289                                  ;	DX:AX = 32 bit sector number
 23290                                  ; Function:
 23291                                  ;       Perform 32 bit shift right
 23292                                  ; Outputs:
 23293                                  ;	AX = cluster number
 23294                                  ;	ZF = 1 if no error
 23295                                  ;	   = 0 if error (cluster number > 64k)
 23296                                  ; Uses:
 23297                                  ;       DX,CX
 23298                                  ;---------------------------------------------------------------------------
 23299                                  ; M017	- SHR32 rewritten for better performance
 23300                                  ; M039	- Additional optimization
 23301                                  
 23302                                  ; 04/05/2019 - Retro DOS v4.0
 23303                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23304                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23305                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS) 
 23306                                  
 23307                                  SHR32:
 23308                                  	;mov	cl,[es:bp+5]
 23309 00003D98 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23310 00003D9C 30ED                    	xor	ch,ch	    ;ZF=1
 23311 00003D9E E306                    	jcxz	norota
 23312                                  
 23313                                  rotashft2:
 23314 00003DA0 D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23315 00003DA2 D1D8                    	rcr	ax,1	    ;ZF not affected.
 23316 00003DA4 E2FA                    	loop	rotashft2
 23317                                  norota:
 23318 00003DA6 C3                      	retn
 23319                                  
 23320                                  ;============================================================================
 23321                                  ; DIR.ASM, MSDOS 6.0, 1991
 23322                                  ;============================================================================
 23323                                  ; 27/07/2018 - Retro DOS v3.0
 23324                                  ; 19/05/2019 - Retro DOS v4.0 
 23325                                  
 23326                                  ;	TITLE	DIR - Directory and path cracking
 23327                                  ;	NAME	Dir
 23328                                  
 23329                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 23330                                  ;---------------------------------------------------------------------------
 23331                                  ;
 23332                                  ; Procedure Name : FINDENTRY,SEARCH
 23333                                  ;
 23334                                  ; Inputs:
 23335                                  ;	[THISDPB] set
 23336                                  ;	[SECCLUSPOS] = 0
 23337                                  ;	[DIRSEC] = Starting directory sector number
 23338                                  ;	[CLUSNUM] = Next cluster of directory
 23339                                  ;	[CLUSFAC] = Sectors/Cluster
 23340                                  ;	[NAME1] = Name to look for
 23341                                  ; Function:
 23342                                  ;	Find file name in disk directory.
 23343                                  ;	"?" matches any character.
 23344                                  ; Outputs:
 23345                                  ;	Carry set if name not found
 23346                                  ;	ELSE
 23347                                  ;	Zero set if attributes match (always except when creating)
 23348                                  ;	AH = Device ID (bit 7 set if not disk)
 23349                                  ;	[THISDPB] = Base of drive parameters
 23350                                  ;	DS = DOSGROUP
 23351                                  ;	ES = DOSGROUP
 23352                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 23353                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 23354                                  ;	[CURBUF] has directory record with match
 23355                                  ;	[NAME1] has file name
 23356                                  ;	[LASTENT] is entry number of the entry
 23357                                  ; All other registers destroyed.
 23358                                  ;----------------------------------------------------------------------------
 23359                                  
 23360                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 23361                                  ;hkn; this point.
 23362                                  
 23363                                  SEARCH:
 23364                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23365                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 23366                                  
 23367                                  	; 19/05/2019 - Retro DOS v4.0
 23368                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 23369                                  
 23370                                  	; 27/07/2018 - Retro DOS v3.0
 23371                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 23372                                  	; 15/03/2018 - Retro DOS v2.0
 23373                                  
 23374                                  	;entry	FindEntry
 23375                                  FINDENTRY:
 23376 00003DA7 E82F04                  	call	STARTSRCH
 23377 00003DAA A0[6B05]                	MOV	AL,[ATTRIB]
 23378                                  	;and	al,9Eh
 23379 00003DAD 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 23380                                  	;cmp	al,8
 23381 00003DAF 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 23382 00003DB1 7503                    	JNZ	short NOTVOLSRCH	; No
 23383 00003DB3 E86D01                  	CALL	SETROOTSRCH		; Yes force search of root
 23384                                  NOTVOLSRCH:
 23385 00003DB6 E8FD00                  	CALL	GETENTRY
 23386 00003DB9 7303                    	JNC	short SRCH
 23387 00003DBB E99100                  	JMP	SETESRET
 23388                                  
 23389                                  	;entry	Srch
 23390                                  SRCH:
 23391 00003DBE 1E                      	PUSH	DS
 23392 00003DBF 8E1E[E405]              	MOV	DS,[CURBUF+2]
 23393                                  
 23394                                  ;	(DS:BX) = directory entry address
 23395                                  
 23396 00003DC3 8A27                    	mov	ah,[BX]
 23397                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 23398 00003DC5 08E4                    	OR	AH,AH			; End of directory?
 23399 00003DC7 7436                    	JZ	short FREE
 23400                                  
 23401                                  ;hkn; SS override
 23402 00003DC9 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 23403 00003DCE 742F                    	JZ	short FREE
 23404                                  	;test	byte [bx+0Bh],8
 23405 00003DD0 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 23406                                  					; Volume ID file?
 23407 00003DD4 7405                    	JZ	short CHKFNAM 		; NO
 23408                                  
 23409                                  ;hkn; SS override
 23410 00003DD6 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 23411                                  CHKFNAM:
 23412                                  ;	Context ES
 23413 00003DDB 8CD6                    	MOV	SI,SS
 23414 00003DDD 8EC6                    	MOV	ES,SI
 23415 00003DDF 89DE                    	MOV	SI,BX
 23416                                  
 23417                                  ;hkn; NAME1 is in DOSDATA
 23418 00003DE1 BF[4B05]                	MOV	DI,NAME1
 23419                                  ;;;;; 7/29/86
 23420                                  
 23421                                  ;hkn; SS override for NAME1
 23422                                  	;CMP	BYTE [SS:NAME1],0E5H	; special char check
 23423                                  	;JNZ	short NO_E5
 23424                                  	;MOV	BYTE [SS:NAME1],05H
 23425                                  	; 22/09/2023
 23426 00003DE4 26803DE5                	cmp	byte [es:di],0E5h
 23427 00003DE8 7504                    	jnz	short NO_E5
 23428 00003DEA 26C60505                	mov	byte [es:di],05h
 23429                                  NO_E5:
 23430                                  ;;;;; 7/29/86
 23431 00003DEE E86100                  	CALL	MetaCompare
 23432 00003DF1 7428                    	JZ	short FOUND
 23433 00003DF3 1F                      	POP	DS
 23434                                  
 23435                                  	;entry	NEXTENT
 23436                                  NEXTENT:
 23437 00003DF4 C42E[8A05]              	LES	BP,[THISDPB]
 23438 00003DF8 E86600                  	CALL	NEXTENTRY
 23439 00003DFB 73C1                    	JNC	short SRCH
 23440 00003DFD EB50                    	JMP	SHORT SETESRET
 23441                                  
 23442                                  FREE:
 23443 00003DFF 1F                      	POP	DS
 23444 00003E00 8B0E[4803]              	MOV	CX,[LASTENT]
 23445 00003E04 3B0E[D805]              	CMP	CX,[ENTFREE]
 23446 00003E08 7304                    	JAE	short TSTALL
 23447 00003E0A 890E[D805]              	MOV	[ENTFREE],CX
 23448                                  TSTALL:
 23449 00003E0E 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 23450                                  NEXTENTJ:
 23451 00003E12 74E0                    	je	short NEXTENT 		; No - continue search
 23452 00003E14 890E[DA05]              	MOV	[ENTLAST],CX
 23453 00003E18 F9                      	STC
 23454 00003E19 EB34                    	JMP	SHORT SETESRET
 23455                                  
 23456                                  FOUND:
 23457                                  ; We have a file with a matching name. We must now consider the attributes:
 23458                                  ; ATTRIB	Action
 23459                                  ; ------	------
 23460                                  ; Volume_ID	Is Volume_ID in test?
 23461                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 23462                                  ;		If create then Is ATTRIB equal to test?
 23463                                  
 23464 00003E1B 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 23465 00003E1D 1F                      	POP	DS
 23466 00003E1E 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 23467                                  	;and	ah,9Eh
 23468 00003E22 80E4DE                  	AND	AH,~attr_ignore
 23469                                  	;lea	si,[si+15]
 23470 00003E25 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 23471                                  					; point to first cluster field
 23472                                  	;test	ch,8
 23473 00003E28 F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 23474 00003E2B 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 23475                                  	;test	ah,8
 23476 00003E2D F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 23477                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 23478                                  	; 16/12/2022
 23479 00003E30 74C2                    	jz	short NEXTENT ; 19/05/2019
 23480                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23481                                  	;JZ	short NEXTENTJ
 23482 00003E32 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 23483 00003E34 EB11                    	JMP	SHORT RETFF		; Found Volume ID
 23484                                  check_one_volume_id:
 23485                                  	;CMP	ah,8
 23486 00003E36 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 23487                                  	;JZ	short NEXTENTJ		; Yes, continue search
 23488                                  	; 16/12/2022
 23489 00003E39 74B9                    	je	short NEXTENT ; 19/05/2019
 23490                                  	;JZ	short NEXTENTJ
 23491 00003E3B E8AF03                  	CALL	MatchAttributes
 23492 00003E3E 7407                    	JZ	SHORT RETFF
 23493 00003E40 F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 23494                                  	; 16/12/2022
 23495                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 23496 00003E45 74AD                    	jz	short NEXTENT ; 19/05/2019
 23497                                  RETFF:
 23498 00003E47 C42E[8A05]              	LES	BP,[THISDPB]
 23499                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23500                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 23501                                  	; 15/12/2022
 23502 00003E4B 268A6600                	MOV	AH,[ES:BP]
 23503                                  SETESRET:
 23504 00003E4F 16                      	PUSH	SS
 23505 00003E50 07                      	POP	ES
 23506 00003E51 C3                      	retn
 23507                                  
 23508                                  ;----------------------------------------------------------------------------
 23509                                  ;
 23510                                  ; Procedure Name : MetaCompare
 23511                                  ;
 23512                                  ; Inputs:
 23513                                  ;	DS:SI -> 11 character FCB style name NO '?'
 23514                                  ;	    Typically this is a directory entry. It MUST be in upper case
 23515                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 23516                                  ;	    Typically this is a FCB or SFT. It MUST be in upper case
 23517                                  ; Function:
 23518                                  ;	Compare FCB style names allowing for ? match to any char
 23519                                  ; Outputs:
 23520                                  ;	Zero if match else NZ
 23521                                  ; Destroys CX,SI,DI all others preserved
 23522                                  ;----------------------------------------------------------------------------
 23523                                  
 23524                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23525                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 23526                                  
 23527                                  MetaCompare:
 23528 00003E52 B90B00                  	MOV	CX,11
 23529                                  WILDCRD:
 23530 00003E55 F3A6                    	REPE	CMPSB
 23531 00003E57 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 23532                                  CHECK_META:
 23533 00003E59 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 23534 00003E5E 74F5                    	JZ	short WILDCRD
 23535                                  MetaRet:
 23536 00003E60 C3                       	retn				; Zero set, Match
 23537                                  
 23538                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 23539                                  ;----------------------------------------------------------------------------
 23540                                  ;
 23541                                  ; Procedure Name : NEXTENTRY
 23542                                  ;
 23543                                  ; Inputs:
 23544                                  ;	Same as outputs of GETENTRY, above
 23545                                  ; Function:
 23546                                  ;	Update BX, and [LASTENT] for next directory entry.
 23547                                  ;	Carry set if no more.
 23548                                  ;----------------------------------------------------------------------------
 23549                                  
 23550                                  NEXTENTRY:
 23551                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23552                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 23553                                  
 23554                                  	; 19/05/2019 - Retro DOS v4.0
 23555                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 23556                                  
 23557                                  	; 27/07/2018 - Retro DOS v3.0
 23558                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 23559                                  	; 15/03/2018 - Retro DOS v2.0
 23560                                  
 23561 00003E61 A1[4803]                	MOV	AX,[LASTENT]
 23562 00003E64 3B06[DA05]              	CMP	AX,[ENTLAST]
 23563 00003E68 7422                    	JZ	short NONE
 23564 00003E6A 40                      	INC	AX
 23565                                  	;ADD	BX,32
 23566 00003E6B 8D5F20                  	LEA	BX,[BX+32]
 23567 00003E6E 39D3                    	CMP	BX,DX
 23568                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 23569                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 23570                                  	; 16/12/2022
 23571 00003E70 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 23572 00003E72 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 23573 00003E76 FEC3                    	INC	BL
 23574 00003E78 3A1E[7705]              	CMP	BL,[CLUSFAC]
 23575 00003E7C 7215                    	JB	short SAMECLUS
 23576 00003E7E 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 23577 00003E82 E8C816                  	call	IsEOF
 23578 00003E85 7305                    	JAE	short NONE
 23579                                  	; 23/07/2019
 23580 00003E87 83FB02                  	CMP	BX,2
 23581                                  	;JB	short NONE
 23582                                  	;JMP	short GETENT
 23583                                  	; 16/12/2022
 23584 00003E8A 732D                    	jnb	short GETENT
 23585                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23586                                  	;JB	short NONE
 23587                                  	;JMP	short GETENT
 23588                                  NONE:
 23589 00003E8C F9                      	STC
 23590 00003E8D C3                      	retn
 23591                                  HAVIT:
 23592 00003E8E A3[4803]                	MOV	[LASTENT],AX
 23593 00003E91 F8                      	CLC
 23594                                  nextentry_retn:
 23595 00003E92 C3                      	retn
 23596                                  SAMECLUS:
 23597 00003E93 881E[7305]              	MOV	[SECCLUSPOS],BL
 23598 00003E97 A3[4803]                	MOV	[LASTENT],AX
 23599 00003E9A 1E                      	PUSH	DS
 23600 00003E9B C53E[E205]              	LDS	DI,[CURBUF]
 23601                                  	; 19/05/2019
 23602                                  	; MSDOS 6.0
 23603                                  	;;mov	dx,[di+8]
 23604                                  	; 23/09/2023
 23605                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 23606                                  ;hkn; SS override
 23607                                  	;MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 23608                                  	; 23/09/2023
 23609 00003E9F 8B7508                  	mov	si,[di+BUFFINFO.buf_sector+2]	
 23610                                  	
 23611                                  	;mov	dx,[di+6]
 23612 00003EA2 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 23613                                  	;inc	dx ; MSDOS 3.3
 23614                                  	; MSDOS 6.0
 23615                                  	;ADD	DX,1				;AN000; >32mb
 23616                                  	;ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 23617                                  	; 23/09/2023
 23618 00003EA5 42                      	inc	dx
 23619 00003EA6 7501                    	jnz	short nextexntry_fc
 23620 00003EA8 46                      	inc	si
 23621                                  	;inc	word [SS:HIGH_SECTOR]
 23622                                  nextexntry_fc:
 23623                                  	; 23/09/2023
 23624 00003EA9 368936[0706]            	mov	[SS:HIGH_SECTOR],si
 23625                                  	; MSDOS 3.3 & MSDOS 6.0
 23626 00003EAE 1F                      	POP	DS
 23627 00003EAF E844F8                  	call	FIRSTCLUSTER
 23628 00003EB2 31DB                    	XOR	BX,BX
 23629 00003EB4 EB23                    	JMP	short SETENTRY
 23630                                  
 23631                                  ;----------------------------------------------------------------------------
 23632                                  ;
 23633                                  ; Procedure Name : GETENTRY
 23634                                  ;
 23635                                  ; Inputs:
 23636                                  ;	[LASTENT] has directory entry
 23637                                  ;	ES:BP points to drive parameters
 23638                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 23639                                  ; Function:
 23640                                  ;	Locates directory entry in preparation for search
 23641                                  ;	GETENT provides entry for passing desired entry in AX
 23642                                  ; Outputs:
 23643                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 23644                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 23645                                  ;	[LASTENT] = New directory entry number
 23646                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 23647                                  ;	Carry set if error (currently user FAILed to I 24)
 23648                                  ;----------------------------------------------------------------------------
 23649                                  
 23650                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23651                                  GETENTRY:
 23652                                  	; 27/07/2018 - Retro DOS v3.0
 23653 00003EB6 A1[4803]                	MOV	AX,[LASTENT]
 23654                                  
 23655                                  	;entry	GETENT
 23656                                  GETENT:
 23657 00003EB9 A3[4803]                	MOV	[LASTENT],AX
 23658                                  ;
 23659                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 23660                                  ; directory.
 23661                                  ;
 23662 00003EBC B105                    	mov	cl,5			; shift left by 5 = mult by 32
 23663 00003EBE D3C0                    	rol	ax,cl			; keep hight order bits
 23664 00003EC0 89C2                    	mov	dx,ax
 23665                                  	; 19/05/2019 - Retro DOS v4.0
 23666                                  	;and	ax,0FFE0h
 23667                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23668                                  	;and	ax,~(32-1)		; mask off high order bits
 23669                                  	; 16/12/2022
 23670 00003EC2 24E0                    	and	al,0E0h ; ~31
 23671 00003EC4 83E21F                  	and	dx,1Fh
 23672                                  	;and	dx,32-1			; mask off low order bits
 23673                                  ;
 23674                                  ; DX:AX contain the byte offset of the required directory entry from the
 23675                                  ; beginning of the directory. Convert this to a sector number. Round the
 23676                                  ; sector size down to a multiple of 32.
 23677                                  ;
 23678                                  	;mov	bx,[es:bp+2]
 23679 00003EC7 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 23680 00003ECB 80E3E0                  	and	bl,0E0h
 23681                                  	;AND	BL,255-31		; Must be multiple of 32
 23682 00003ECE F7F3                    	DIV	BX
 23683 00003ED0 89D3                    	MOV	BX,DX			; Position within sector
 23684 00003ED2 53                      	PUSH	BX
 23685 00003ED3 E8CCF7                  	call	DIRREAD
 23686 00003ED6 5B                      	POP	BX
 23687                                  	;retc
 23688 00003ED7 72B9                    	jc	short nextentry_retn	
 23689                                  SETENTRY:
 23690 00003ED9 8B16[E205]              	MOV	DX,[CURBUF]
 23691                                  	;add	dx,16 ; MSDOS 3.3
 23692                                  	;add	dx,20 ; MSDOS 6.0 
 23693 00003EDD 83C214                  	ADD	DX,BUFINSIZ
 23694 00003EE0 01D3                    	ADD	BX,DX
 23695                                  	;add	dx,[es:bp+2]
 23696 00003EE2 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 23697                                  	; 29/12/2022
 23698                                  	; MSDOS 6.21 MSDOS.SYS contains a 'CLC' here, at DOSCODE:7E15h
 23699 00003EE6 F8                      	clc
 23700 00003EE7 C3                      	retn
 23701                                  
 23702                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 23703                                  ;----------------------------------------------------------------------------
 23704                                  ;
 23705                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 23706                                  ;
 23707                                  ; Inputs:
 23708                                  ;	BX cluster number of start of directory
 23709                                  ;	ES:BP Points to DPB
 23710                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 23711                                  ; Function:
 23712                                  ;	Set up a directory search
 23713                                  ; Outputs:
 23714                                  ;	[DIRSTART] = BX
 23715                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 23716                                  ;	Carry set if error (currently user FAILed to I 24)
 23717                                  ; destroys AX,DX,BX
 23718                                  ;----------------------------------------------------------------------------
 23719                                  
 23720                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23721                                  SETDIRSRCH:
 23722 00003EE8 09DB                    	OR	BX,BX
 23723 00003EEA 7437                    	JZ	short SETROOTSRCH
 23724 00003EEC 891E[C205]              	MOV	[DIRSTART],BX
 23725                                  	;mov	al,[es:bp+4]
 23726 00003EF0 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 23727 00003EF4 FEC0                    	INC	AL
 23728 00003EF6 A2[7705]                	MOV	[CLUSFAC],AL
 23729                                  
 23730                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23731                                  	;SAVE	<SI>
 23732 00003EF9 56                      	push	si
 23733                                  	;test	byte [FastOpenFlg],2
 23734 00003EFA F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 23735 00003EFF 7507                    	JNZ	short UNP_OK
 23736                                  
 23737                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23738                                  	;invoke	UNPACK
 23739 00003F01 E86016                  	call	UNPACK
 23740 00003F04 7302                    	JNC	short UNP_OK
 23741                                  	;RESTORE <SI>
 23742 00003F06 5E                      	pop	si
 23743                                  	;return
 23744 00003F07 C3                      	retn
 23745                                  
 23746                                  UNP_OK:
 23747 00003F08 893E[BC05]              	MOV	[CLUSNUM],DI
 23748 00003F0C 89DA                    	MOV	DX,BX
 23749 00003F0E 30DB                    	XOR	BL,BL
 23750 00003F10 881E[7305]              	MOV	[SECCLUSPOS],BL
 23751                                  	;invoke	FIGREC
 23752 00003F14 E8F60E                  	call	FIGREC
 23753                                  	;RESTORE <SI>
 23754 00003F17 5E                      	pop	si
 23755                                  	
 23756                                  	; 19/05/2019 - Retro DOS v4.0
 23757                                  
 23758                                  	; MSDOS 6.0
 23759                                  	;PUSH	DX			   ;AN000; >32mb
 23760                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 23761                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 23762                                  	;POP	DX			   ;AN000; >32mb
 23763                                  
 23764                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23765                                  	;push	dx
 23766                                  	;mov	dx,[HIGH_SECTOR]
 23767                                  	;mov	[DIRSEC+2],dx
 23768                                  	;pop	dx
 23769                                  	;MOV	[DIRSEC],dx
 23770                                  	; 16/12/2022
 23771 00003F18 A1[0706]                	mov	ax,[HIGH_SECTOR]
 23772 00003F1B A3[C005]                	mov	[DIRSEC+2],AX
 23773 00003F1E 8916[BE05]              	MOV	[DIRSEC],DX
 23774                                  
 23775                                  	; 16/12/2022
 23776                                  	; cf=0 (at the return of FIGREC)
 23777                                  	;CLC
 23778 00003F22 C3                      	retn
 23779                                  
 23780                                  	;entry	SETROOTSRCH
 23781                                  SETROOTSRCH:
 23782 00003F23 31C0                    	XOR	AX,AX
 23783 00003F25 A3[C205]                	MOV	[DIRSTART],AX
 23784                                  	; 22/09/2023
 23785 00003F28 A3[C005]                	mov	[DIRSEC+2],ax ; 0
 23786 00003F2B A2[7305]                	MOV	[SECCLUSPOS],AL
 23787 00003F2E 48                      	DEC	AX
 23788 00003F2F A3[BC05]                	MOV	[CLUSNUM],AX
 23789                                  	;mov	ax,[es:bp+0Bh]
 23790 00003F32 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 23791                                  	; 19/05/2019
 23792                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 23793                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 23794 00003F36 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 23795 00003F3A 29D0                    	SUB	AX,DX
 23796 00003F3C A2[7705]                	MOV	[CLUSFAC],AL
 23797 00003F3F 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 23798                                  	; 22/09/2023
 23799                                  	; MSDOS 6.0
 23800                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 23801 00003F43 F8                      	CLC
 23802 00003F44 C3                      	retn
 23803                                  
 23804                                  ;============================================================================
 23805                                  ; DIR2.ASM, MSDOS 6.0, 1991
 23806                                  ;============================================================================
 23807                                  ; 27/07/2018 - Retro DOS v3.0
 23808                                  ; 19/05/2019 - Retro DOS v4.0 
 23809                                  
 23810                                  ;	TITLE	DIR2 - Directory and path cracking
 23811                                  ;	NAME	Dir2
 23812                                  
 23813                                  ;Break	<GETPATH -- PARSE A WFP>
 23814                                  ;----------------------------------------------------------------------------
 23815                                  ;
 23816                                  ; Procedure Name : GETPATH
 23817                                  ;
 23818                                  ; Inputs:
 23819                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 23820                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 23821                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 23822                                  ;		( = -1 if current dir not involved, else
 23823                                  ;		 Points to first char after last "/" of current dir part)
 23824                                  ;	[THISCDS] Points to CDS being used
 23825                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 23826                                  ;	[NoSetDir] set
 23827                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 23828                                  ; Function:
 23829                                  ;	Crack the path
 23830                                  ; Outputs:
 23831                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 23832                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 23833                                  ;	ID1 field of [THISCDS] updated appropriately
 23834                                  ;	[ATTRIB] = [SATTRIB]
 23835                                  ;	ES:BP Points to DPB
 23836                                  ;	Carry set if bad path
 23837                                  ;	   SI Points to path element causing failure
 23838                                  ;	   Zero set
 23839                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 23840                                  ;	      start a search on the last directory
 23841                                  ;	      CL is zero if there is a bad name in the path
 23842                                  ;	      CL is non-zero if the name was simply not found
 23843                                  ;		 [ENTFREE] may have free spot in directory
 23844                                  ;		 [NAME1] is the name.
 23845                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 23846                                  ;	   Zero reset
 23847                                  ;	      File in middle of path or bad name in path or attribute mismatch
 23848                                  ;		or path too long or malformed path
 23849                                  ;	ELSE
 23850                                  ;	   [CurBuf] = -1 if root directory
 23851                                  ;	   [CURBUF] contains directory record with match
 23852                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 23853                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 23854                                  ;	   AH = device ID
 23855                                  ;	      bit 7 of AH set if device SI and BX
 23856                                  ;	      will point DOSGROUP relative The firclus
 23857                                  ;	      field of the device entry contains the device pointer
 23858                                  ;	   [NAME1] Has name looked for
 23859                                  ;	   If last element is a directory zero is set and:
 23860                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 23861                                  ;	      are set up to start a search on it.
 23862                                  ;	      unless [NoSetDir] is non zero in which case the return is
 23863                                  ;	      like that for a file (except for zero flag)
 23864                                  ;	   If last element is a file zero is reset
 23865                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 23866                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 23867                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 23868                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 23869                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 23870                                  ; DS preserved, Others destroyed
 23871                                  ;---------------------------------------------------------------------------
 23872                                  
 23873                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 23874                                  ;hkn; DS already set up at this point.
 23875                                  
 23876                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23877                                  GETPATH:
 23878                                  	;mov	word [CREATING],0E500h
 23879 00003F45 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 23880                                  
 23881                                  ; Same as GetPath only CREATING and DELALL already set
 23882                                  
 23883                                  	;entry	GetPathNoSet
 23884                                  GetPathNoSet:
 23885                                  	;mov	byte [EXTERR_LOCUS],2	
 23886 00003F4B C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 23887 00003F50 C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 23888                                  
 23889                                  ; See if the input indicates a device that has already been detected. If so,
 23890                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 23891                                  
 23892 00003F56 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 23893                                  	;cmp	word [DI+1],5C3Ah
 23894                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 23895 00003F5A 817D013A5C              	cmp	word [DI+1],':\'
 23896 00003F5F 7438                    	JZ	short CrackIt
 23897                                  
 23898                                  ; Let ChkDev find it in the device list
 23899                                  
 23900 00003F61 83C703                  	ADD	DI,3
 23901                                  	; 18/08/2018
 23902                                  	;MOV	SI,DI			; let CHKDEV see the original name
 23903                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23904                                  	; 16/12/2022
 23905                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 23906 00003F64 E8AB00                  	CALL	CHKDEV
 23907 00003F67 722E                    	JC	short InternalError
 23908                                  
 23909                                  Build_devJ:
 23910 00003F69 A0[6D05]                	MOV	AL,[SATTRIB]
 23911 00003F6C A2[6B05]                	MOV	[ATTRIB],AL
 23912                                  	;mov	byte [EXTERR_LOCUS],1
 23913 00003F6F C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 23914                                  					; "finding" a char device
 23915                                  					; set LOCUS to Unknown. This makes
 23916                                  					; certain idiotic problems reported
 23917                                  					; by a certain 3 letter OEM go away.
 23918                                  
 23919                                  ; Take name in name1 and pack it back into where wfp_start points. This
 23920                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 23921                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 23922                                  ; wfp into the share set.
 23923                                  ;
 23924                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 23925                                  ; non-space seen +1.  This position is kept in DX.
 23926                                  
 23927                                  ;hkn; SS is DOSDATA
 23928 00003F74 16                      	push	ss
 23929 00003F75 07                      	pop	es
 23930                                  
 23931                                  ;hkn; NAME1 is in DOSDATA
 23932 00003F76 BE[4B05]                	mov	si,NAME1
 23933 00003F79 8B3E[B205]              	mov	di,[WFP_START]
 23934 00003F7D 89FA                    	mov	dx,di
 23935 00003F7F B90800                  	mov	cx,8			; 8 chars in device name
 23936                                  MoveLoop:
 23937 00003F82 AC                      	lodsb
 23938 00003F83 AA                      	stosb
 23939 00003F84 3C20                    	cmp	al," "
 23940 00003F86 7402                    	jz	short NoSave
 23941                                  
 23942 00003F88 89FA                    	mov	dx,di
 23943                                  NoSave:
 23944 00003F8A E2F6                    	loop	MoveLoop
 23945                                  
 23946                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 23947                                  ; at this point.
 23948                                  
 23949 00003F8C 89D7                    	mov	di,dx
 23950 00003F8E C60500                  	mov	byte [di],0		; end of string
 23951 00003F91 E8C502                  	call	Build_device_ent	; Clears carry sets zero
 23952 00003F94 FEC0                    	INC	AL			; reset zero
 23953 00003F96 C3                      	retn
 23954                                  
 23955                                  InternalError:
 23956                                  InternalError_loop:
 23957 00003F97 EBFE                    	JMP	short InternalError_loop	; freeze
 23958                                  
 23959                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 23960                                  
 23961                                  CrackIt:
 23962 00003F99 8B36[B605]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 23963 00003F9D 83FEFF                  	CMP	SI,-1			; valid?
 23964 00003FA0 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 23965 00003FA2 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 23966                                  LOOK_SING:
 23967                                  	;mov	byte [ATTRIB],16h
 23968 00003FA5 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 23969                                  					; Attributes to search through Dirs
 23970 00003FAA C43E[A205]              	LES	DI,[THISCDS]
 23971 00003FAE B8FFFF                  	MOV	AX,-1
 23972                                  	;mov	bx,[es:di+73]
 23973 00003FB1 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 23974 00003FB5 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 23975                                  
 23976                                  ; AX = -1
 23977                                  ; BX = cluster number of current directory. THis number is -1 if the media
 23978                                  ;      has been uncertainly changed.
 23979                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 23980                                  ;      may be -1 if no current directory part has been used.
 23981                                  
 23982 00003FB9 39C6                    	CMP	SI,AX			; if Current directory is not part
 23983 00003FBB 743B                    	JZ	short NO_CURR_D		; then we must crack from root
 23984 00003FBD 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 23985                                  
 23986                                  ; DOS 3.3  6/25/86
 23987 00003FBF 7437                    	JZ	short NO_CURR_D		; no, crack form the root
 23988                                  	;test	byte [FastOpenFlg],1
 23989 00003FC1 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 23990 00003FC6 743D                    	JZ	short GOT_SEARCH_CLUSTER	; no
 23991 00003FC8 06                      	PUSH	ES			; save registers
 23992 00003FC9 57                      	PUSH	DI
 23993 00003FCA 51                      	PUSH	CX
 23994 00003FCB FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 23995 00003FCE 56                      	PUSH	SI
 23996 00003FCF 53                      	PUSH	BX
 23997                                  
 23998 00003FD0 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 23999 00003FD4 8B36[B205]              	MOV	SI,[WFP_START]
 24000                                  
 24001                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 24002 00003FD8 BB[300D]                	MOV	BX,FastOpenTable
 24003 00003FDB BF[460D]                	MOV	DI,Dir_Info_Buff
 24004 00003FDE B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24005                                  	;mov	al,1
 24006 00003FE1 B001                    	MOV	AL,FONC_Look_up
 24007 00003FE3 1E                      	PUSH	DS
 24008 00003FE4 07                      	POP	ES
 24009                                  	;call	far [BX+2]
 24010 00003FE5 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 24011 00003FE8 7203                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 24012                                  					; Go to Got_Srch_cluster
 24013                                  	; 29/12/2022
 24014                                  	;CMP	BYTE [SI],0		;fastopen has current dir info?
 24015                                  	;JE	short GO_Chk_end	;yes. Go to got_search_cluster
 24016                                  	;stc
 24017                                  	;jmp	short GO_Chk_end	;Go to No_Curr_D
 24018                                  
 24019 00003FEA 803C01                  	cmp	byte [si],1
 24020                                  GO_Chk_end1:	; 29/12/2022
 24021 00003FED F5                      	cmc 
 24022                                  	; [si] = 0 -> cf = 0
 24023                                  	; [si] > 0 -> cf = 1
 24024                                  
 24025                                  ;GO_Chk_end1:
 24026                                  	; 29/12/2022
 24027                                  	;clc
 24028                                  
 24029                                  GO_Chk_end:				; restore registers
 24030 00003FEE 5B                      	POP	BX
 24031 00003FEF 5E                      	POP	SI
 24032 00003FF0 8F44FF                  	POP	word [SI-1]
 24033 00003FF3 59                      	POP	CX
 24034 00003FF4 5F                      	POP	DI
 24035 00003FF5 07                      	POP	ES
 24036 00003FF6 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 24037                                  
 24038                                  ; DOS 3.3  6/25/86
 24039                                  ;
 24040                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 24041                                  ; of path and go crack from root.
 24042                                  
 24043                                  NO_CURR_D:
 24044 00003FF8 8B36[B205]              	MOV	SI,[WFP_START]
 24045 00003FFC 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 24046 00003FFF C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24047 00004003 EB3B                    	JMP	short ROOTPATH
 24048                                  
 24049                                  ; We are able to crack from the current directory part. Go set up for search
 24050                                  ; of specified cluster.
 24051                                  
 24052                                  GOT_SEARCH_CLUSTER:
 24053 00004005 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24054 00004009 E8DCFE                  	call	SETDIRSRCH
 24055                                  	;JC	short SETFERR
 24056                                  	;JMP	short FINDPATH
 24057                                  	; 16/12/2022
 24058 0000400C 7343                    	jnc	short FINDPATH ; 17/08/2018
 24059                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24060                                  	;JC	short SETFERR
 24061                                  	;JMP	short FINDPATH
 24062                                  SETFERR:
 24063 0000400E 30C9                    	XOR	CL,CL			; set zero
 24064 00004010 F9                      	STC
 24065 00004011 C3                      	retn
 24066                                  
 24067                                  ;---------------------------------------------------------------------------
 24068                                  ;
 24069                                  ; Procedure Name : ChkDev
 24070                                  ;
 24071                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 24072                                  ;   device.
 24073                                  ; Blasts CX,SI,DI,AX,BX
 24074                                  ;---------------------------------------------------------------------------
 24075                                  
 24076                                  CHKDEV:
 24077 00004012 89FE                    	MOV	SI,DI
 24078 00004014 8CD7                    	MOV	DI,SS
 24079 00004016 8EC7                    	MOV	ES,DI
 24080                                  
 24081 00004018 BF[4B05]                	MOV	DI,NAME1
 24082 0000401B B90900                  	MOV	CX,9
 24083                                  TESTLOOP:
 24084 0000401E E84A10                  	call	GETLET
 24085                                  
 24086 00004021 3C2E                    	CMP	AL,'.'
 24087 00004023 740E                    	JZ	short TESTDEVICE
 24088 00004025 E89910                  	call	PATHCHRCMP
 24089 00004028 7407                    	JZ	short NOTDEV
 24090 0000402A 08C0                    	OR	AL,AL
 24091 0000402C 7405                    	JZ	short TESTDEVICE
 24092                                  
 24093 0000402E AA                      	STOSB
 24094 0000402F E2ED                    	LOOP	TESTLOOP
 24095                                  NOTDEV:
 24096 00004031 F9                      	STC
 24097 00004032 C3                      	retn
 24098                                  
 24099                                  TESTDEVICE:
 24100                                  	;ADD	CX,2
 24101                                  	; 23/09/2023
 24102 00004033 41                      	inc	cx
 24103 00004034 41                      	inc	cx
 24104 00004035 B020                    	MOV	AL,' '
 24105 00004037 F3AA                    	REP	STOSB
 24106 00004039 8CD0                    	MOV	AX,SS
 24107 0000403B 8ED8                    	MOV	DS,AX
 24108                                  	;call	DEVNAME
 24109                                  	;retn
 24110                                  	; 18/12/2022
 24111 0000403D E9BA01                  	jmp	DEVNAME
 24112                                  
 24113                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 24114                                  ;----------------------------------------------------------------------------
 24115                                  ;
 24116                                  ; Procedure Name : ROOTPATH,FINDPATH
 24117                                  ;
 24118                                  ; Inputs:
 24119                                  ;	Same as FINDPATH but,
 24120                                  ;	SI Points to asciz string of path which is assumed to start at
 24121                                  ;		the root (no leading '/').
 24122                                  ; Function:
 24123                                  ;	Search from root for path
 24124                                  ; Outputs:
 24125                                  ;	Same as FINDPATH but:
 24126                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 24127                                  ;	[NoSetDir] is ignored.
 24128                                  ;----------------------------------------------------------------------------
 24129                                  
 24130                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24131                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 24132                                  
 24133                                  ROOTPATH:
 24134 00004040 E8E0FE                  	call	SETROOTSRCH
 24135 00004043 803C00                  	CMP	BYTE [SI],0
 24136 00004046 7509                    	JNZ	short FINDPATH
 24137                                  
 24138                                  ; Root dir specified
 24139 00004048 A0[6D05]                	MOV	AL,[SATTRIB]
 24140 0000404B A2[6B05]                	MOV	[ATTRIB],AL
 24141 0000404E 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 24142                                  					; (dir), clears carry.
 24143 00004050 C3                      	retn
 24144                                  
 24145                                  ; Inputs:
 24146                                  ;	[ATTRIB] Set to get through directories
 24147                                  ;	[SATTRIB] Set to find last element
 24148                                  ;	ES:BP Points to DPB
 24149                                  ;	SI Points to asciz string of path (no leading '/').
 24150                                  ;	[SECCLUSPOS] = 0
 24151                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 24152                                  ;	[CLUSNUM] = Cluster # of next cluster
 24153                                  ;	[CLUSFAC] = Sectors per cluster
 24154                                  ;	[NoSetDir] set
 24155                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24156                                  ;		( = -1 if current dir not involved, else
 24157                                  ;		 Points to first char after last "/" of current dir part)
 24158                                  ;	[THISCDS] Points to CDS being used
 24159                                  ;	[CREATING] and [DELALL] set
 24160                                  ; Function:
 24161                                  ;	Parse path name
 24162                                  ; Outputs:
 24163                                  ;	ID1 field of [THISCDS] updated appropriately
 24164                                  ;	[ATTRIB] = [SATTRIB]
 24165                                  ;	ES:BP Points to DPB
 24166                                  ;	[THISDPB] = ES:BP
 24167                                  ;	Carry set if bad path
 24168                                  ;	   SI Points to path element causing failure
 24169                                  ;	   Zero set
 24170                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24171                                  ;	      start a search on the last directory
 24172                                  ;	      CL is zero if there is a bad name in the path
 24173                                  ;	      CL is non-zero if the name was simply not found
 24174                                  ;		 [ENTFREE] may have free spot in directory
 24175                                  ;		 [NAME1] is the name.
 24176                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24177                                  ;	   Zero reset
 24178                                  ;	      File in middle of path or bad name in path
 24179                                  ;		or path too long or malformed path
 24180                                  ;	ELSE
 24181                                  ;	   [CURBUF] contains directory record with match
 24182                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24183                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 24184                                  ;	   [NAME1] Has name looked for
 24185                                  ;	   AH = device ID
 24186                                  ;	      bit 7 of AH set if device SI and BX
 24187                                  ;	      will point DOSGROUP relative The firclus
 24188                                  ;	      field of the device entry contains the device pointer
 24189                                  ;	   If last element is a directory zero is set and:
 24190                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24191                                  ;	      are set up to start a search on it,
 24192                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24193                                  ;	      like that for a file (except for zero flag)
 24194                                  ;	   If last element is a file zero is reset
 24195                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24196                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24197                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24198                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24199                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24200                                  ; Destroys all other registers
 24201                                  
 24202                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24203                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 24204                                  
 24205                                      	;entry	FINDPATH
 24206                                  FINDPATH:
 24207 00004051 06                      	PUSH	ES			; Save ES:BP
 24208 00004052 56                      	PUSH	SI
 24209 00004053 89F7                    	MOV	DI,SI
 24210 00004055 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 24211 00004059 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 24212 0000405E 740E                    	JZ	short NOIDS		; No current dir part
 24213 00004060 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24214 00004064 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24215 00004066 C43E[A205]              	LES	DI,[THISCDS]
 24216                                  	;mov	[es:di+73],cx
 24217 0000406A 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 24218                                  NOIDS:
 24219                                  
 24220                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24221                                  ; character in the string. CX,DI may be destroyed.
 24222                                  ;
 24223                                  ;	invoke	NAMETRANS
 24224                                  ;	MOV	CL,AL
 24225                                  ;
 24226                                  ; The above is the slow method. The name has *already* been munged by
 24227                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24228                                  ; the name until ., \ or 0 is hit.
 24229                                  
 24230 0000406E 8CD0                    	MOV	AX,SS
 24231 00004070 8EC0                    	MOV	ES,AX
 24232                                  
 24233                                  ;hkn; Name1 is in DOSDATA
 24234 00004072 BF[4B05]                	MOV	DI,NAME1
 24235 00004075 B82020                  	MOV	AX,'  ' ; 2020h
 24236 00004078 AA                      	STOSB
 24237 00004079 AB                      	STOSW
 24238 0000407A AB                      	STOSW
 24239 0000407B AB                      	STOSW
 24240 0000407C AB                      	STOSW
 24241 0000407D AB                      	STOSW
 24242                                  
 24243                                  ;hkn; Name1 is in DOSDATA
 24244 0000407E BF[4B05]                	MOV	DI,NAME1
 24245 00004081 30E4                    	XOR	AH,AH			; bits for CL
 24246                                  GetNam:
 24247                                  	; 19/05/2019 - Retro DOS v4.0
 24248                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24249                                  
 24250                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24251                                  	; 16/12/2022
 24252                                  	;inc	cl ; not required !	
 24253                                  	
 24254 00004083 AC                      	LODSB
 24255 00004084 3C2E                    	CMP	AL,'.'	; 2Eh
 24256 00004086 7412                    	JZ	short _SetExt
 24257 00004088 08C0                    	OR	AL,AL
 24258 0000408A 7424                    	JZ	short _GetDone
 24259 0000408C 3C5C                    	CMP	AL,'\'	; 5Ch
 24260 0000408E 7420                    	JZ	short _GetDone
 24261 00004090 3C3F                    	CMP	AL,'?'	; 3Fh
 24262 00004092 7503                    	JNZ	short StoNam
 24263 00004094 80CC01                  	OR	AH,1
 24264                                  StoNam: 
 24265 00004097 AA                      	STOSB
 24266 00004098 EBE9                    	JMP	short GetNam
 24267                                  _SetExt:
 24268 0000409A BF[5305]                	MOV	DI,NAME1+8
 24269                                  GetExt:
 24270 0000409D AC                      	LODSB
 24271 0000409E 08C0                    	OR	AL,AL
 24272 000040A0 740E                    	JZ	short _GetDone
 24273 000040A2 3C5C                    	CMP	AL,'\'
 24274 000040A4 740A                    	JZ	short _GetDone
 24275 000040A6 3C3F                    	CMP	AL,'?'
 24276 000040A8 7503                    	JNZ	short StoExt
 24277 000040AA 80CC01                  	OR	AH,1
 24278                                  StoExt: 
 24279 000040AD AA                      	STOSB
 24280 000040AE EBED                    	JMP	short GetExt
 24281                                  _GetDone:
 24282 000040B0 4E                      	DEC	SI
 24283 000040B1 88E1                    	MOV	CL,AH  ; 0 or 1 ; 29/12/2022
 24284 000040B3 80C980                  	OR	CL,80H
 24285 000040B6 5F                      	POP	DI			; Start of this element
 24286 000040B7 07                      	POP	ES			; Restore ES:BP
 24287 000040B8 39FE                    	CMP	SI,DI
 24288 000040BA 7503                    	JNZ	short check_device
 24289 000040BC E9E200                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 24290                                  check_device:
 24291 000040BF 56                      	PUSH	SI			; Start of next element
 24292                                  	;MOV	AL,[SI]
 24293                                  	;OR	AL,AL
 24294                                  	; 23/09/2023
 24295 000040C0 803C00                  	cmp	byte [si],0
 24296 000040C3 7508                    	JNZ	short NOT_LAST
 24297                                  
 24298                                  ; for last element of the path switch to the correct search attributes
 24299                                  
 24300 000040C5 8A3E[6D05]              	MOV	BH,[SATTRIB]
 24301 000040C9 883E[6B05]              	MOV	[ATTRIB],BH
 24302                                  
 24303                                  NOT_LAST:
 24304                                  
 24305                                  ; check name1 to see if we have a device...
 24306                                  
 24307 000040CD 06                      	PUSH	ES			; Save ES:BP
 24308                                  
 24309                                  ;hkn; SS is DOSDATA
 24310                                  	;context ES
 24311 000040CE 16                      	push	ss
 24312 000040CF 07                      	pop	es
 24313 000040D0 E82701                  	call	DEVNAME 		; blast BX
 24314 000040D3 07                      	POP	ES			; Restore ES:BP
 24315 000040D4 720B                    	JC	short FindFile		; Not a device
 24316 000040D6 08C0                    	OR	AL,AL			; Test next char again
 24317 000040D8 7403                    	JZ	short GO_BDEV
 24318 000040DA E9C800                  	JMP	FILEINPATH		; Device name in middle of path
 24319                                  
 24320                                  GO_BDEV:
 24321 000040DD 5E                      	POP	SI			; Points to NUL at end of path
 24322 000040DE E988FE                  	JMP	Build_devJ
 24323                                  
 24324                                  FindFile:
 24325                                  ;;;; 7/28/86
 24326 000040E1 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 24327 000040E6 7505                    	JNZ	short NOE5		; no
 24328 000040E8 C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 24329                                  NOE5:
 24330                                  ;;;; 7/28/86
 24331 000040ED 57                      	PUSH	DI			; Start of this element
 24332 000040EE 06                      	PUSH	ES			; Save ES:BP
 24333 000040EF 51                      	PUSH	CX			; CL return from NameTrans
 24334                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24335                                  
 24336 000040F0 E89502                  	CALL	LookupPath		; call fastopen to get dir entry
 24337 000040F3 7303                    	JNC	short DIR_FOUND		; found dir entry
 24338                                  
 24339                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24340 000040F5 E8AFFC                  	call	FINDENTRY
 24341                                  DIR_FOUND:
 24342 000040F8 59                      	POP	CX
 24343 000040F9 07                      	POP	ES
 24344 000040FA 5F                      	POP	DI
 24345 000040FB 7303                    	JNC	short LOAD_BUF
 24346 000040FD E9CA00                  	JMP	BADPATHPOP
 24347                                  
 24348                                  LOAD_BUF:
 24349 00004100 C53E[E205]              	LDS	DI,[CURBUF]
 24350                                  	;test	byte [bx+0Bh],10h
 24351 00004104 F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 24352 00004108 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 24353 0000410A E99800                  	JMP	FILEINPATH		; Error or end of path
 24354                                  
 24355                                  ; if we are not setting the directory, then check for end of string
 24356                                  
 24357                                  GO_NEXT:
 24358                                  ;hkn; SS override
 24359 0000410D 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 24360 00004113 7423                    	JZ	short SetDir
 24361 00004115 89FA                    	MOV	DX,DI			; Save pointer to entry
 24362 00004117 8CD9                    	MOV	CX,DS
 24363                                  
 24364                                  ;hkn; SS is DOSDATA
 24365                                  	;context DS
 24366 00004119 16                      	push	ss
 24367 0000411A 1F                      	pop	ds
 24368 0000411B 5F                      	POP	DI			; Start of next element
 24369                                  	; 19/05/2019 - Retro DOS v4.0
 24370                                  	; MSDOS 6.0
 24371 0000411C F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24372 00004121 740B                    	JZ	short _nofast			; the FastOpen
 24373 00004123 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 24374 00004128 7404                    	JZ	short _nofast			; no
 24375 0000412A 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 24376                                  _nofast:
 24377 0000412E 803D00                  	CMP	BYTE [DI],0
 24378                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 24379                                  	;;JMP	_SETRET  ; retn		; Got it
 24380                                  	;retn	; 05/09/2018
 24381                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24382                                  	;jmp	_SETRET
 24383                                  	; 16/12/2022
 24384 00004131 7421                    	jz	short _SETRET
 24385                                  
 24386                                  NEXT_ONE:
 24387 00004133 57                      	PUSH	DI			; Put start of next element back on stack
 24388 00004134 89D7                    	MOV	DI,DX
 24389 00004136 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 24390                                  SetDir:
 24391 00004138 8B14                    	MOV	DX,[SI] 		; Dir_first
 24392                                  
 24393                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24394 0000413A 1E                      	PUSH	DS		      ; save [curbuf+2]
 24395                                  ;hkn; SS is DOSDATA
 24396 0000413B 16                      	push	ss
 24397 0000413C 1F                      	pop	ds		      ; set DS Dosgroup
 24398                                  	;test	byte [FastOpenFlg],2
 24399 0000413D F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24400 00004142 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 24401 00004144 89D3                    	MOV	BX,DX		      ; not found
 24402 00004146 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 24403 0000414A 50                      	PUSH	AX		      ; save device id (AH)
 24404 0000414B E89AFD                  	call	SETDIRSRCH
 24405 0000414E 58                      	POP	AX		      ; restore device id (AH)
 24406 0000414F 83C402                  	ADD	SP,2		      ; pop ds in stack
 24407 00004152 EB37                    	JMP	short FAST_OPEN_SKIP
 24408                                  
 24409                                  	; 16/12/2022
 24410                                  _SETRET:
 24411 00004154 C3                      	retn
 24412                                  
 24413                                  DO_NORMAL:
 24414 00004155 1F                      	POP	DS			; DS = [curbuf + 2]
 24415                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24416                                  
 24417 00004156 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 24418 00004158 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 24419 0000415A 53                      	PUSH	BX
 24420 0000415B 50                      	PUSH	AX
 24421 0000415C 56                      	PUSH	SI
 24422 0000415D 51                      	PUSH	CX
 24423                                  	;push	word [di+6]
 24424 0000415E FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 24425                                  	; 19/05/2019
 24426                                  	; MSDOS 6.0
 24427                                  	;push	word [di+8]
 24428 00004161 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 24429 00004164 89D3                    	MOV	BX,DX
 24430                                  
 24431                                  ;hkn; SS is DOSDATA
 24432                                  	;context DS
 24433 00004166 16                      	push	ss
 24434 00004167 1F                      	pop	ds
 24435                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 24436 00004168 E87DFD                  	call	SETDIRSRCH		; the entry sector buffer
 24437                                  	; 19/05/2019
 24438                                  	; MSDOS 6.0
 24439 0000416B 8F06[0706]              	POP	word [HIGH_SECTOR]
 24440 0000416F 5A                      	POP	DX
 24441 00004170 7203                    	JC	short SKIP_GETB
 24442                                  	; 22/09/2023
 24443                                  	;;mov	byte [ALLOWED],18h
 24444                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 24445                                  	;XOR	AL,AL ; *
 24446                                  	;;invoke GETBUFFR		; Get the entry buffer back
 24447                                  	;call	GETBUFFR
 24448 00004172 E8FA17                  	call	GETBUFFER ; * ; pre-read
 24449                                  SKIP_GETB:
 24450 00004175 59                      	POP	CX
 24451 00004176 5E                      	POP	SI
 24452 00004177 58                      	POP	AX
 24453 00004178 5B                      	POP	BX
 24454 00004179 7305                    	JNC	short SET_THE_BUF
 24455 0000417B 5F                      	POP	DI			; Start of next element
 24456 0000417C 89FE                    	MOV	SI,DI			; Point with SI
 24457 0000417E EB21                    	JMP	SHORT _BADPATH
 24458                                  
 24459                                  SET_THE_BUF:
 24460 00004180 E878F5                  	call	SET_BUF_AS_DIR
 24461 00004183 8B3E[E205]              	MOV	DI,[CURBUF]
 24462 00004187 01FE                    	ADD	SI,DI			; Get the offsets back
 24463 00004189 01FB                    	ADD	BX,DI
 24464                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24465                                  FAST_OPEN_SKIP:
 24466 0000418B 5F                      	POP	DI			; Start of next element
 24467 0000418C E89D02                  	CALL	InsertPath		; insert dir entry info
 24468                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24469 0000418F 8A05                    	MOV	AL,[DI]
 24470 00004191 08C0                    	OR	AL,AL
 24471 00004193 74BF                    	JZ	short _SETRET		; At end
 24472 00004195 47                      	INC	DI			; Skip over "/"
 24473 00004196 89FE                    	MOV	SI,DI			; Point with SI
 24474 00004198 E8260F                  	call	PATHCHRCMP
 24475 0000419B 7503                    	JNZ	short find_bad_name	; oops
 24476 0000419D E9B1FE                  	JMP	FINDPATH		; Next element
 24477                                  
 24478                                  find_bad_name:
 24479 000041A0 4E                      	DEC	SI			; Undo above INC to get failure point
 24480                                  _BADPATH:
 24481 000041A1 30C9                    	XOR	CL,CL			; Set zero
 24482 000041A3 EB2C                    	JMP	SHORT BADPRET
 24483                                  
 24484                                  FILEINPATH:
 24485 000041A5 5F                      	POP	DI			; Start of next element
 24486                                  
 24487                                  ;hkn; SS is DOSDATA
 24488                                  	;context DS			; Got to from one place with DS gone
 24489 000041A6 16                      	push	ss
 24490 000041A7 1F                      	pop	ds
 24491                                  
 24492                                  ; DOS 3.3 FastOpen
 24493                                  	;test	byte [FastOpenFlg],1
 24494 000041A8 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 24495 000041AD 740B                    	JZ	short NO_FAST		; device info to fastopen
 24496                                  	;test	byte [FastOpenFlg],2
 24497 000041AF F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24498 000041B4 7404                    	JZ	short NO_FAST
 24499 000041B6 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 24500                                  					 ; success
 24501                                  NO_FAST:
 24502                                  ; DOS 3.3 FastOpen
 24503 000041BA 8A05                    	MOV	AL,[DI]
 24504 000041BC 08C0                    	OR	AL,AL
 24505 000041BE 7404                    	JZ	short INCRET
 24506 000041C0 89FE                    	MOV	SI,DI			; Path too long
 24507 000041C2 EB0D                    	JMP	SHORT BADPRET
 24508                                  
 24509                                  INCRET:
 24510                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24511                                  
 24512 000041C4 E86502                  	CALL   InsertPath		; insert dir entry info
 24513                                  
 24514                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24515 000041C7 FEC0                    	INC	AL			; Reset zero
 24516                                  	; 16/12/2022	
 24517                                  ;_SETRET:
 24518 000041C9 C3                      	retn
 24519                                  
 24520                                  BADPATHPOP:
 24521 000041CA 5E                      	POP	SI			; Start of next element
 24522 000041CB 8A04                    	MOV	AL,[SI]
 24523 000041CD 89FE                    	MOV	SI,DI			; Start of bad element
 24524 000041CF 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 24525                                  BADPRET:
 24526 000041D1 A0[6D05]                	MOV	AL,[SATTRIB]
 24527 000041D4 A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 24528 000041D7 F9                      	STC
 24529 000041D8 C3                      	retn
 24530                                  
 24531                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 24532                                  ;---------------------------------------------------------------------------
 24533                                  ;
 24534                                  ; Procedure Name : STARTSRCH
 24535                                  ;
 24536                                  ; Inputs:
 24537                                  ;	[THISDPB] Set
 24538                                  ; Function:
 24539                                  ;	Set up a search for GETENTRY and NEXTENTRY
 24540                                  ; Outputs:
 24541                                  ;	ES:BP = Drive parameters
 24542                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 24543                                  ; Destroys ES,BP,AX
 24544                                  ;--------------------------------------------------------------------------
 24545                                  
 24546                                  STARTSRCH:
 24547 000041D9 C42E[8A05]              	LES	BP,[THISDPB]
 24548 000041DD 31C0                    	XOR	AX,AX
 24549 000041DF A3[4803]                	MOV	[LASTENT],AX
 24550 000041E2 A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 24551 000041E5 48                      	DEC	AX
 24552 000041E6 A3[D805]                	MOV	[ENTFREE],AX
 24553 000041E9 A3[DA05]                	MOV	[ENTLAST],AX
 24554 000041EC C3                      	retn
 24555                                  
 24556                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 24557                                  ;----------------------------------------------------------------------------
 24558                                  ; Procedure Name : MatchAttributes
 24559                                  ;
 24560                                  ; Input:    [Attrib] = attribute to search for
 24561                                  ;	    CH = found attribute
 24562                                  ; Output:   JZ <match>
 24563                                  ;	    JNZ <nomatch>
 24564                                  ; Registers modified: noneski
 24565                                  ;----------------------------------------------------------------------------
 24566                                  
 24567                                  MatchAttributes:
 24568 000041ED 50                      	PUSH	AX
 24569                                  
 24570                                  ;hkn; SS override
 24571 000041EE 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 24572 000041F2 F6D0                    	NOT	AL			; AL <- SearchSet'
 24573 000041F4 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 24574                                  	;and	al,16h
 24575 000041F6 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 24576                                  ;
 24577                                  ; the result is non-zero if an attribute is not in the search set
 24578                                  ; and in the found set and in the important set. This means that we do not
 24579                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 24580                                  ;
 24581 000041F8 58                      	POP	AX
 24582 000041F9 C3                      	retn
 24583                                  
 24584                                  ; 19/05/2019 - Retro DOS v4.0
 24585                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 24586                                  
 24587                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24588                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 24589                                  
 24590                                  ;Break <DevName - Look for name of device>
 24591                                  ;---------------------------------------------------------------------------
 24592                                  ;
 24593                                  ; Procedure Name : DevName
 24594                                  ;
 24595                                  ; Inputs:
 24596                                  ;	DS,ES:DOSDATA
 24597                                  ;	Filename in NAME1
 24598                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 24599                                  ; Function:
 24600                                  ;	Determine if file is in list of I/O drivers
 24601                                  ; Outputs:
 24602                                  ;	Carry set if not a device
 24603                                  ;	ELSE
 24604                                  ;	Zero flag set
 24605                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 24606                                  ;	     bits 0-4 set from low byte of attribute word
 24607                                  ;	DEVPT = DWORD pointer to Device header of device
 24608                                  ; BX destroyed, others preserved
 24609                                  ;---------------------------------------------------------------------------
 24610                                  
 24611                                  DEVNAME:
 24612                                  	; 28/07/2018 - Retro DOS v3.0
 24613                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 24614                                  
 24615 000041FA 56                      	PUSH	SI
 24616 000041FB 57                      	PUSH	DI
 24617 000041FC 51                      	PUSH	CX
 24618 000041FD 50                      	PUSH	AX
 24619                                  
 24620                                  ; E5 special code
 24621 000041FE FF36[4B05]              	PUSH	WORD [NAME1]
 24622 00004202 803E[4B05]05            	CMP	byte [NAME1],5
 24623 00004207 7505                    	JNZ	short NOKTR
 24624 00004209 C606[4B05]E5            	MOV	byte [NAME1],0E5h
 24625                                  NOKTR:
 24626                                  	;test	byte [ATTRIB],8
 24627 0000420E F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 24628                                  					; If looking for VOL id don't find devs
 24629 00004213 7521                    	JNZ	short RET31
 24630                                  
 24631                                  ;hkn; NULDEV is in DOSDATA
 24632 00004215 BE[4800]                	MOV	SI,NULDEV
 24633                                  LOOKIO:
 24634                                  	; 21/11/2022
 24635                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 24636                                  	; 17/12/2022
 24637                                  	;test	byte [si+5],80h
 24638 00004218 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 24639                                  	;;test	word [si+4],8000h
 24640                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 24641 0000421C 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 24642 0000421E 89F0                    	MOV	AX,SI
 24643                                  	;add	si,10
 24644 00004220 83C60A                  	ADD	SI,SYSDEV.NAME
 24645                                  
 24646                                  ;hkn; NAME1 is in DOSDATA
 24647 00004223 BF[4B05]                	MOV	DI,NAME1
 24648 00004226 B90400                  	MOV	CX,4			; All devices are 8 letters
 24649 00004229 F3A7                    	REPE	CMPSW			; Check for name in list
 24650 0000422B 89C6                    	MOV	SI,AX
 24651 0000422D 7415                    	JZ	short IOCHK		; Found it?
 24652                                  SKIPDEV:
 24653 0000422F C534                    	LDS	SI,[SI]			; Get address of next device
 24654 00004231 83FEFF                  	CMP	SI,-1			; At end of list?
 24655 00004234 75E2                    	JNZ	short LOOKIO
 24656                                  RET31:	
 24657 00004236 F9                      	STC				; Not found
 24658                                  RETNV:	
 24659 00004237 8CD1                    	MOV	CX,SS
 24660 00004239 8ED9                    	MOV	DS,CX
 24661                                  
 24662 0000423B 8F06[4B05]              	POP	WORD [NAME1]
 24663 0000423F 58                      	POP	AX
 24664 00004240 59                      	POP	CX
 24665 00004241 5F                      	POP	DI
 24666 00004242 5E                      	POP	SI
 24667 00004243 C3                      	RETN
 24668                                  
 24669                                  IOCHK:
 24670                                  ;hkn; SS override for DEVPT
 24671 00004244 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 24672                                  	;mov	bh,[si+4]
 24673 00004249 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 24674 0000424C 80CFC0                  	OR	BH,0C0h
 24675 0000424F 80E7DF                  	and	bh,0DFh
 24676                                  	;AND	BH,~(020h)		; Clears Carry
 24677 00004252 368936[9A05]            	MOV	[SS:DEVPT],SI
 24678 00004257 EBDE                    	JMP	short RETNV
 24679                                  
 24680                                  ;BREAK <Build_device_ent - Make a Directory entry>
 24681                                  ;---------------------------------------------------------------------------
 24682                                  ; Procedure Name : Build_device_ent
 24683                                  ;
 24684                                  ; Inputs:
 24685                                  ;	[NAME1] has name
 24686                                  ;	BH is attribute field (supplied by DEVNAME)
 24687                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 24688                                  ; Function:
 24689                                  ;	Build a directory entry for a device at DEVFCB
 24690                                  ; Outputs:
 24691                                  ;	BX points to DEVFCB
 24692                                  ;	SI points to dir_first field
 24693                                  ;	AH = input BH
 24694                                  ;	AL = 0
 24695                                  ;	dir_first = DEVPT
 24696                                  ;	Zero Set, Carry Clear
 24697                                  ; DS,ES,BP preserved, others destroyed
 24698                                  ;--------------------------------------------------------------------------
 24699                                  
 24700                                  Build_device_ent:
 24701 00004259 B82020                  	MOV	AX,"  " ; 2020h
 24702                                  
 24703                                  ;hkn; DEVFCB is in DOSDATA
 24704 0000425C BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 24705                                  
 24706                                  ;	Fill dir_ext  BUGBUG - use ERRNZs for this stuff!
 24707                                  
 24708 0000425F AB                      	STOSW
 24709 00004260 AA                      	STOSB				; Blank out extent field
 24710                                  	;mov	al,40h
 24711 00004261 B040                    	MOV	AL,attr_device
 24712                                  
 24713                                  ;	Fill Dir_attr
 24714                                  
 24715 00004263 AA                      	STOSB				; Set attribute field
 24716 00004264 31C0                    	XOR	AX,AX
 24717 00004266 B90A00                  	MOV	CX,10
 24718                                  
 24719                                  ; Fill dir_pad
 24720                                  
 24721 00004269 F3AB                    	REP	STOSW			; Fill rest with zeros
 24722 0000426B E887C8                  	call	DATE16
 24723                                  
 24724                                  ;hkn; DEVFCB is in DOSDATA
 24725 0000426E BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 24726 00004271 92                      	XCHG	AX,DX
 24727                                  
 24728                                  ; Fill dir_time
 24729                                  
 24730 00004272 AB                      	STOSW
 24731 00004273 92                      	XCHG	AX,DX
 24732                                  
 24733                                  ; Fill dir_date
 24734                                  
 24735 00004274 AB                      	STOSW
 24736 00004275 89FE                    	MOV	SI,DI			; SI points to dir_first field
 24737 00004277 A1[9A05]                	MOV	AX,[DEVPT]
 24738                                  
 24739                                  ; Fill dir_first
 24740                                  
 24741 0000427A AB                      	STOSW				; Dir_first points to device
 24742 0000427B A1[9C05]                	MOV	AX,[DEVPT+2]
 24743                                  ;
 24744                                  ; Fill dir_size_l
 24745                                  ;
 24746 0000427E AB                      	STOSW
 24747 0000427F 88FC                    	MOV	AH,BH			; Put device atts in AH
 24748                                  
 24749                                  ;hkn; DEVFCB is in DOSDATA
 24750 00004281 BB[4B05]                	MOV	BX,DEVFCB
 24751 00004284 30C0                    	XOR	AL,AL			; Set zero, clear carry
 24752 00004286 C3                      	retn
 24753                                  
 24754                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 24755                                  ;----------------------------------------------------------------------------
 24756                                  ;
 24757                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 24758                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 24759                                  ;   If invalid, reset original CDS to root.
 24760                                  ;
 24761                                  ;   Inputs:	ThisCDS points to CDS of interest
 24762                                  ;		SS:DI points to temp buffer
 24763                                  ;   Outputs:	The current directory string is validated on the appropriate
 24764                                  ;		    drive
 24765                                  ;		ThisDPB changed
 24766                                  ;		ES:DI point to CDS
 24767                                  ;		Carry set if error (currently user FAILed to I 24)
 24768                                  ;   Registers modified: all
 24769                                  ;----------------------------------------------------------------------------
 24770                                  
 24771                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24772                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 24773                                  
 24774                                  ValidateCDS:
 24775                                  	; 19/05/2019 - Retro DOS v4.0
 24776                                  	; 28/07/2018 - Retro DOS v3.0
 24777                                  
 24778                                     %define  Temp	[bp-2]	; word
 24779                                     %define  SaveCDS	[bp-6]	; dword
 24780                                     %define  SaveCDSL	[bp-6]	; word
 24781                                     %define  SaveCDSH	[bp-4]	; word
 24782                                  
 24783                                  	;Enter
 24784 00004287 55                      	push	bp
 24785 00004288 89E5                    	mov	bp,sp
 24786 0000428A 83EC06                  	sub	sp,6
 24787                                  
 24788 0000428D 897EFE                  	MOV	Temp,DI
 24789                                  
 24790                                  ;hkn; SS override
 24791 00004290 36C536[A205]            	LDS	SI,[SS:THISCDS]
 24792 00004295 8976FA                  	MOV	SaveCDSL,SI
 24793 00004298 8C5EFC                  	MOV	SaveCDSH,DS
 24794                                  	;EnterCrit critDisk
 24795 0000429B E878D0                  	call	ECritDisk
 24796                                  	; 21/11/2022
 24797                                  	;test	byte [SI+curdir.flags+1],80h
 24798                                  	;test	word [si+67],8000h
 24799                                  	; 17/12/2022
 24800                                  	;test	byte [SI+68],80h
 24801 0000429E F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 24802                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 24803 000042A2 7403                    	JZ	short _DoSplice
 24804 000042A4 E99200                  	JMP	FatFail
 24805                                  _DoSplice:
 24806 000042A7 30D2                    	XOR	DL,DL
 24807 000042A9 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 24808                                  
 24809                                  ;hkn; SS is DOSDATA
 24810                                  	;Context ES
 24811 000042AE 16                      	push	ss
 24812 000042AF 07                      	pop	es
 24813                                  	;Invoke	FStrcpy
 24814 000042B0 E836CF                  	call	FStrCpy
 24815 000042B3 8B76FE                  	MOV	SI,Temp
 24816                                  
 24817                                  ;hkn; SS is DOSDATA
 24818                                  	;Context DS
 24819 000042B6 16                      	push	ss
 24820 000042B7 1F                      	pop	ds	
 24821                                  	;Invoke	Splice
 24822 000042B8 E85D2B                  	call	Splice
 24823                                  
 24824                                   ;hkn; SS is DOSDATA
 24825                                  	;Context DS			;   FatReadCDS (ThisCDS);
 24826 000042BB 16                      	push	ss
 24827 000042BC 1F                      	pop	ds
 24828 000042BD 8816[4C03]              	MOV	[NoSetDir],DL
 24829 000042C1 C43E[A205]              	LES	DI,[THISCDS]
 24830                                  	;SAVE	<BP>
 24831 000042C5 55                      	push	bp
 24832                                  	;Invoke	FATREAD_CDS
 24833 000042C6 E83114                  	call	FATREAD_CDS	
 24834                                  	;RESTORE <BP>
 24835 000042C9 5D                      	pop	bp
 24836 000042CA 726D                    	JC	short FatFail
 24837                                  
 24838 000042CC C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 24839                                  	;cmp	word [si+73],-1
 24840 000042D0 837C49FF                	CMP	word [SI+curdir.ID],-1
 24841 000042D4 7555                    	JNZ	short RestoreCDS
 24842                                  
 24843                                  ;hkn; SS is DOSDATA
 24844                                  	;Context ES
 24845 000042D6 16                      	push	ss
 24846 000042D7 07                      	pop	es
 24847                                  
 24848                                  ;hkn; SS override
 24849                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 24850 000042D8 36FF36[B205]            	push	word [SS:WFP_START]
 24851                                  	;cmp	si,[bp-6]
 24852 000042DD 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 24853 000042E0 750B                    	JNZ	short DoChdir
 24854                                  	;mov	di,[bp-2]
 24855 000042E2 8B7EFE                  	MOV	DI,Temp
 24856                                  
 24857                                  ;hkn; SS override
 24858 000042E5 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 24859                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 24860 000042EA E8FCCE                  	call	FStrCpy
 24861                                  DoChdir:
 24862                                  ;hkn; SS is DOSDATA
 24863                                  	;Context DS
 24864 000042ED 16                      	push	ss
 24865 000042EE 1F                      	pop	ds
 24866                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 24867 000042EF FF36[6D05]              	push	word [SATTRIB]
 24868 000042F3 55                      	push	bp
 24869                                  	;Invoke	DOS_ChDir
 24870 000042F4 E8EFEE                  	call	DOS_CHDIR
 24871                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 24872 000042F7 5D                      	pop	bp
 24873 000042F8 5B                      	pop	bx
 24874 000042F9 8F06[B205]              	pop	word [WFP_START]
 24875 000042FD 881E[6D05]              	MOV	[SATTRIB],BL
 24876 00004301 C576FA                  	LDS	SI,SaveCDS
 24877 00004304 730F                    	JNC	short SetCluster	;	if (c == -1) {
 24878                                  
 24879                                  ;hkn; SS override for THISCDS
 24880 00004306 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 24881 0000430B 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 24882 00004310 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 24883 00004312 884C03                  	MOV	[SI+3],CL		;	    }
 24884                                  SetCluster:
 24885                                  	;mov	word [si+73],0FFFFh
 24886 00004315 C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 24887 0000431A 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 24888                                  	; 21/11/2022
 24889                                  	;test	byte [si+curdir.flags+1],20h
 24890                                  	; 19/05/2019
 24891                                  	; MSDOS 6.0
 24892                                  	; 17/12/2022
 24893                                  	;test	byte [si+68],20h
 24894 0000431F F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 24895                                  	;;test	word [si+67],2000h
 24896                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 24897 00004323 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 24898 00004325 B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 24899                                  _setdirclus:
 24900                                  	;mov	[si+73],cx
 24901 00004328 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 24902                                  RestoreCDS:
 24903 0000432B C47EFA                  	LES	DI,SaveCDS
 24904 0000432E 36893E[A205]            	MOV	[SS:THISCDS],DI
 24905 00004333 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 24906 00004338 F8                      	CLC
 24907                                  FatFail:
 24908                                  	;LeaveCrit critDisk
 24909 00004339 E8F5CF                  	call	LCritDisk
 24910                                  
 24911                                  	;les	di,[bp-6]
 24912 0000433C C47EFA                  	LES	DI,SaveCDS
 24913                                  	;Leave
 24914 0000433F 89EC                    	mov	sp,bp
 24915 00004341 5D                      	pop	bp
 24916 00004342 C3                      	retn
 24917                                  
 24918                                  ; 28/07/2018 - Retro DOS v3.0
 24919                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 24920                                  
 24921                                  ;Break	<CheckThisDevice - Check for being a device>
 24922                                  ;---------------------------------------------------------------------------
 24923                                  ;
 24924                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 24925                                  ;   device specified. We will return carry if there is a device present. 
 24926                                  ;   The forms of devices we will recognize are:
 24927                                  ;
 24928                                  ;	[path]device
 24929                                  ;
 24930                                  ;   Note that the drive letter has *already* been removed. All other forms
 24931                                  ;   are not considered to be devices. If such a device is found we change
 24932                                  ;   the source pointer to point to the device component.
 24933                                  ;
 24934                                  ;   Inputs:	ES is DOSDATA
 24935                                  ;		DS:SI contains name
 24936                                  ;   Outputs:	ES is DOSDATA
 24937                                  ;		DS:SI point to name or device
 24938                                  ;		Carry flag set if device was found
 24939                                  ;		Carry flag reset otherwise
 24940                                  ;   Registers Modified: all except ES:DI, DS
 24941                                  ;----------------------------------------------------------------------------
 24942                                  
 24943                                  CheckThisDevice:
 24944 00004343 57                      	push	di
 24945 00004344 56                      	push	si
 24946 00004345 89F7                    	MOV	DI,SI
 24947                                  
 24948                                  ; Check for presence of \dev\ (Dam multiplan!)
 24949                                  
 24950 00004347 8A04                    	MOV	AL,[SI]
 24951 00004349 E8750D                  	call	PATHCHRCMP		; is it a path char?
 24952 0000434C 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 24953 0000434E 46                      	INC	SI			; simulate LODSB
 24954                                  
 24955                                  ; We have the leading path separator. Look for DEV part.
 24956                                  
 24957 0000434F AD                      	LODSW
 24958 00004350 0D2020                  	OR	AX,2020h
 24959 00004353 3D6465                  	cmp	ax,"de"
 24960                                  	;CMP	AX,"e"<< 8 + "d"
 24961 00004356 752D                    	JNZ	short NotDevice		; not "de", assume not device
 24962 00004358 AC                      	LODSB
 24963 00004359 0C20                    	OR	AL,20h
 24964 0000435B 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 24965 0000435D 7526                    	JNZ	short NotDevice
 24966 0000435F AC                      	LODSB
 24967 00004360 E85E0D                  	call	PATHCHRCMP		; do we have the last path separator?
 24968 00004363 7520                    	JNZ	short NotDevice		; no. go for it.
 24969                                  
 24970                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 24971                                  ; SI and DevName may destroy DS.
 24972                                  
 24973                                  ParseDev:
 24974 00004365 1E                      	push	ds
 24975 00004366 56                      	push	si			; preserve the source pointer
 24976 00004367 E8950C                  	call	NameTrans		; advance DS:SI
 24977 0000436A 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 24978 0000436D F9                      	STC				; simulate a Carry return from DevName
 24979 0000436E 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 24980                                  
 24981                                  ;hkn; SS is DOSDATA
 24982 00004370 16                      	push	ss
 24983 00004371 1F                      	pop	ds
 24984                                  
 24985                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 24986                                  ;
 24987                                  ; SR;
 24988                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 24989                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 24990                                  ; old call set the volume attribute bit.
 24991                                  
 24992 00004372 A0[6D05]                	mov	al,[SATTRIB]
 24993 00004375 A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 24994                                  
 24995                                  ; M026 - end
 24996                                  
 24997 00004378 E87FFE                  	call	DEVNAME
 24998                                  
 24999                                  SkipSearch:
 25000 0000437B 5E                      	pop	si
 25001 0000437C 1F                      	pop	ds
 25002                                  
 25003                                  ; SI points to the beginning of the potential device. If we have a device
 25004                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 25005                                  ; original value. At this point Carry set indicates FILE.
 25006                                  
 25007                                  CheckReturn:
 25008 0000437D 5F                      	pop	di			; get original SI
 25009 0000437E 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 25010 00004380 89FE                    	MOV	SI,DI
 25011                                  Check_Done:
 25012 00004382 5F                      	pop	di
 25013 00004383 F5                      	CMC				; invert carry. Carry => device
 25014 00004384 C3                      	retn
 25015                                  NotDevice:
 25016 00004385 F9                      	STC
 25017 00004386 EBF5                    	JMP	short CheckReturn
 25018                                  
 25019                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 25020                                  ;-----------------------------------------------------------------------------
 25021                                  ;
 25022                                  ; Procedure Name : LookupPath
 25023                                  ;
 25024                                  ; Output  DS:SI -> path name,
 25025                                  ;	  ES:DI -> dir entry info buffer
 25026                                  ;	  ES:CX -> extended dir info buffer
 25027                                  ;
 25028                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 25029                                  ;			     FastOpen, DS:SI points to char just one after
 25030                                  ;			     the last char of path name which is fully or
 25031                                  ;			     partially found in FastOPen
 25032                                  ;	  carry flag set : FastOpen not in memory or path name not found
 25033                                  ;
 25034                                  ;----------------------------------------------------------------------------
 25035                                  
 25036                                  LookupPath:
 25037                                  ;	PUSH	AX
 25038                                  
 25039                                  ;hkn; SS override
 25040                                  	;test	byte [ss:FastOpenFlg],1
 25041 00004388 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 25042 0000438E 7503                    	JNZ	short FASTINST			    ; and this routine is
 25043                                  NOLOOK:
 25044 00004390 E99700                  	JMP	NOLOOKUP			    ; executed once
 25045                                  
 25046                                  FASTINST:
 25047                                  ;hkn; SS override
 25048                                  	;test	byte [ss:FastOpenFlg],8
 25049 00004393 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 25050 00004399 75F5                    	JNZ	short NOLOOK			    ; yes
 25051                                  
 25052 0000439B BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 25053                                  
 25054                                  ;hkn; SS override
 25055 0000439E 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 25056 000043A3 BF[460D]                	MOV	DI,Dir_Info_Buff
 25057 000043A6 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 25058 000043A9 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 25059 000043AB 1E                      	PUSH	DS
 25060 000043AC 07                      	POP	ES
 25061                                  
 25062                                  ;hkn; SS override
 25063                                  	;call	far [bx+2]
 25064 000043AD FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 25065 000043B0 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 25066                                  
 25067 000043B2 8D5CFE                  	LEA	BX,[SI-2]
 25068                                  
 25069                                  ;hkn; SS override
 25070 000043B5 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 25071 000043BA 745D                    	JZ	short NOTFOUND			    ; no
 25072                                  
 25073                                  	; 19/05/2019 - Retro DOS v4.0
 25074                                  
 25075                                  	; MSDOS 6.0				    ; fully or partially found
 25076 000043BC 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 25077 000043BF 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 25078 000043C1 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 25079                                  
 25080                                  ;hkn; SS override for attrib/sattrib
 25081 000043C2 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 25082 000043C7 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 25083 000043CC 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 25084                                  	;mov	ch,[es:di+0Bh]
 25085 000043D1 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 25086 000043D5 E815FE                  	call	MatchAttributes 		    ;AN000;FO.;
 25087                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 25088 000043D8 59                      	POP	CX				    ;AN000;FO.;
 25089 000043D9 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 25090                                  parfnd:
 25091                                  
 25092                                  ;hkn; SS override
 25093 000043DB 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 25094 000043E0 89CB                    	MOV	BX,CX
 25095                                  	; MSDOS 6.0
 25096                                  	;mov	ax,[bx+7]
 25097 000043E2 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 25098                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 25099 000043E5 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 25100 000043E9 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 25101 000043EC 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 25102                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25103                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 25104                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 25105 000043F0 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 25106 000043F3 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 25107                                  
 25108 000043F7 06                      	PUSH	ES				    ; save ES
 25109                                  ;hkn; SS override
 25110 000043F8 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 25111 000043FD 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 25112                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 25113 00004400 07                      	POP	ES				    ; pop ES
 25114                                  ;SR;
 25115                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 25116                                  ;indicate it is not a root dir
 25117                                  
 25118 00004401 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 25119 00004408 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 25120 0000440D 89FB                    	MOV	BX,DI				    ; start of entry
 25121                                  	;lea	si,[di+1Ah]
 25122 0000440F 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 25123                                  						    ; dir_first field in the
 25124                                  						    ; dir entry
 25125                                  ;hkn; SS override for FastOpenFlg
 25126                                  	;or	byte [ss:FastOpenFlg],12h ; 29/12/2022
 25127 00004412 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 25128                                  ;	POP	AX
 25129 00004418 C3                      	RETN
 25130                                  NOTFOUND:
 25131 00004419 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 25132 0000441C 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 25133 0000441E 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 25134                                  Partial_Success:
 25135                                  	;and	byte [SS:FastOpenFlg],0FBh
 25136 00004424 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 25137                                  NOLOOKUP:
 25138                                  ;	POP	AX
 25139 0000442A F9                      	STC
 25140 0000442B C3                      	RETN
 25141                                  
 25142                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 25143                                  ;-----------------------------------------------------------------------------
 25144                                  ;
 25145                                  ; Procedure Name : InsertPath
 25146                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 25147                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 25148                                  ;	  DS = DOSDATA
 25149                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 25150                                  ;
 25151                                  ;-----------------------------------------------------------------------------
 25152                                  
 25153                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25154                                  
 25155                                  InsertPath:
 25156 0000442C 9C                      	PUSHF
 25157                                  ;hkn; SS override for FastOpenFlag
 25158                                  	;test	byte [SS:FastOpenFlg], 1
 25159 0000442D 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25160 00004433 7479                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 25161                                  	;test	byte [ss:FastOpenFlg],2
 25162 00004435 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 25163 0000443B 740D                    	JZ	short INSERT_DIR_INFO		; no
 25164                                  	;and	byte [ss:FastOpenFlg],0FDh
 25165 0000443D 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 25166 00004443 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 25167 00004448 EB5E                    	JMP	short GET_NEXT2
 25168                                  INSERT_DIR_INFO:				; save registers
 25169 0000444A 1E                      	PUSH	DS
 25170 0000444B 06                      	PUSH	ES
 25171 0000444C 53                      	PUSH	BX
 25172 0000444D 56                      	PUSH	SI
 25173 0000444E 57                      	PUSH	DI
 25174 0000444F 51                      	PUSH	CX
 25175 00004450 50                      	PUSH	AX
 25176                                  
 25177                                  ;hkn; SS override
 25178 00004451 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 25179 00004456 BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 25180                                  	;mov	ax,[di+6]
 25181 00004459 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 25182                                  	; MSDOS 6.0
 25183                                  	;mov	[ss:si+1],ax
 25184 0000445C 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 25185                                  	; 19/05/2019 - Retro DOS v4.0
 25186 00004460 8B4508                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 25187                                  
 25188                                  ;hkn; SS is DOSDATA
 25189 00004463 16                      	push	ss
 25190 00004464 1F                      	pop	ds
 25191                                  	; MSDOS 3.3	
 25192                                  	;;mov	[si+1],ax	
 25193                                  	;MOV	[SI+FEI.dirsec],AX
 25194                                  	; MSDOS 6.0
 25195                                  	;mov	[si+3],ax
 25196 00004465 894403                  	MOV	[SI+FEI.dirsec+2],AX		;AN000;>32mb save high dir sector
 25197                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25198 00004468 A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 25199                                  	;;mov	[si+5],ax ; MSDOS 6.0
 25200                                  	;mov	[si+3],ax ; MSDOS 3.3
 25201 0000446B 894405                  	MOV	[SI+FEI.clusnum],AX
 25202                                  	; MSDOS 6.0
 25203 0000446E A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 25204                                  	;mov	[si+7],ax
 25205 00004471 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 25206 00004474 A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 25207                                  	;mov	[si+9],ax
 25208 00004477 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 25209                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25210 0000447A 89D8                    	MOV	AX,BX
 25211                                  	;;add	di,16  ; MSDOS 3.3
 25212                                  	;add	di,20  ; MSDOS 6.0
 25213 0000447C 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 25214 0000447F 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 25215                                  	;mov	cl,32
 25216 00004481 B120                    	MOV	CL,dir_entry.size
 25217 00004483 F6F1                    	DIV	CL
 25218                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 25219 00004485 8804                    	mov	[si],al
 25220                                  
 25221 00004487 1E                      	PUSH	DS
 25222 00004488 07                      	POP	ES
 25223                                  
 25224 00004489 8E1E[E405]              	MOV	DS,[CURBUF+2]
 25225 0000448D 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 25226                                  	;cmp	word [di+1Ah],0
 25227 0000448F 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 25228                                  					; never insert info when file is empty
 25229 00004493 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25230                                  
 25231 00004495 56                      	PUSH	SI			; ES:BX -> extended info
 25232 00004496 5B                      	POP	BX
 25233                                  
 25234                                  	;mov	al,2
 25235 00004497 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25236 00004499 BE[300D]                	MOV	SI,FastOpenTable
 25237                                  	;call	far [es:si+2]	 ; call dword ptr es:[si+2] ; 29/12/2022
 25238                                  	; 07/12/2022
 25239 0000449C 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25240                                  
 25241 000044A0 F8                      	CLC
 25242                                  SKIP_INSERT:
 25243 000044A1 58                      	POP	AX
 25244 000044A2 59                      	POP	CX			; restore registers
 25245 000044A3 5F                      	POP	DI
 25246 000044A4 5E                      	POP	SI
 25247 000044A5 5B                      	POP	BX
 25248 000044A6 07                      	POP	ES
 25249 000044A7 1F                      	POP	DS
 25250                                  GET_NEXT2:
 25251                                  	;or	[ss:FastOpenFlg],8
 25252 000044A8 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 25253                                  					; we got dir info from fastopen so
 25254                                  GET_NEXT_ELEMENT:
 25255 000044AE 9D                      	POPF
 25256 000044AF C3                      	RETN
 25257                                  
 25258                                  ;============================================================================
 25259                                  ; DEV.ASM (MSDOS 6.0, 1991)
 25260                                  ;============================================================================
 25261                                  ; 17/07/2018 - Retro DOS v3.0
 25262                                  ; 30/04/2019 - Retro DOS v4.0
 25263                                  
 25264                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 25265                                  
 25266                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 25267                                  
 25268                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 25269                                  
 25270                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 25271                                  ;DEV001s:
 25272                                  ;		length of packets
 25273 000044B0 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 25274                                  ;LenTab: db	22,14,22,13,15,14
 25275                                  
 25276                                  ;	Error Function
 25277                                  
 25278                                  CmdTab:
 25279 000044B6 8604                    	DB	86h, DEVRD	; 0 input
 25280 000044B8 8605                    	DB	86h, DEVRDND	; 1 input status
 25281 000044BA 8708                    	DB	87h, DEVWRT	; 2 output
 25282 000044BC 870A                    	DB	87h, DEVOST	; 3 output status
 25283 000044BE 8607                    	DB	86h, DEVIFL	; 4 input flush
 25284 000044C0 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 25285                                  
 25286                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 25287                                  
 25288                                  ;CmdTab:
 25289                                  ;	db	86h, 4
 25290                                  ;	db	86h, 5
 25291                                  ;	db	87h, 8
 25292                                  ;	db	87h, 10
 25293                                  ;	db	86h, 7
 25294                                  ;	db	86h, 5
 25295                                  
 25296                                  ;DEV001E:
 25297                                  
 25298                                  ; 30/04/2019 - Retro DOS v4.0
 25299                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 25300                                  
 25301                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 25302                                  ;----------------------------------------------------------------------------
 25303                                  ;
 25304                                  ; Procedure Name : IOFUNC
 25305                                  ;
 25306                                  ; Inputs:
 25307                                  ;	DS:SI Points to SFT
 25308                                  ;	AH is function code
 25309                                  ;		= 0 Input
 25310                                  ;		= 1 Input Status
 25311                                  ;		= 2 Output
 25312                                  ;		= 3 Output Status
 25313                                  ;		= 4 Flush
 25314                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 25315                                  ;				   present.
 25316                                  ;	AL = character if output
 25317                                  ; Function:
 25318                                  ;	Perform indicated I/O to device or file
 25319                                  ; Outputs:
 25320                                  ;	AL is character if input
 25321                                  ;	If a status call
 25322                                  ;		zero set if not ready
 25323                                  ;		zero reset if ready (character in AL for input status)
 25324                                  ; For regular files:
 25325                                  ;	Input Status
 25326                                  ;		Gets character but restores position
 25327                                  ;		Zero set on EOF
 25328                                  ;	Input
 25329                                  ;		Gets character advances position
 25330                                  ;		Returns ^Z on EOF
 25331                                  ;	Output Status
 25332                                  ;		Always ready
 25333                                  ; AX altered, all other registers preserved
 25334                                  ;----------------------------------------------------------------------------
 25335                                  
 25336                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25337                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 25338                                  
 25339                                  IOFUNC:
 25340 000044C2 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 25341                                  					; DEVIOBUF
 25342 000044C7 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 25343 000044CE 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 25344 000044D5 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 25345                                  	;test	byte [si+6],80h
 25346                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 25347 000044D9 F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25348 000044DD 7403                    	JZ	short IOTO22		;AN000;
 25349 000044DF E9A500                  	JMP	IOTOFILE		;AN000;
 25350                                  IOTO22:
 25351                                  	;test	word [si+5],80h
 25352                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 25353 000044E2 F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 25354 000044E6 7503                    	JNZ	short IOTO33		;AN000;
 25355 000044E8 E99C00                  	JMP	IOTOFILE		;AN000;
 25356                                  IOTO33:
 25357 000044EB 06                      	push	es ; * (MSDOS 6.21)
 25358 000044EC E877BF                  	call	save_world
 25359 000044EF 8CDA                    	MOV	DX,DS
 25360 000044F1 8CD3                    	MOV	BX,SS
 25361 000044F3 8EDB                    	MOV	DS,BX
 25362 000044F5 8EC3                    	MOV	ES,BX
 25363 000044F7 31DB                    	XOR	BX,BX
 25364 000044F9 80FC05                  	cmp	ah,5		    ; system wait enabled?
 25365 000044FC 7503                    	jnz	short _no_sys_wait
 25366                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25367                                  	; 16/12/2022
 25368 000044FE 80CF04                  	or	bh,04h
 25369                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 25370                                  				    ; It is up to device driver to carry out
 25371                                  				    ; appropriate action.
 25372                                  _no_sys_wait:
 25373 00004501 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 25374 00004505 31DB                    	XOR	BX,BX
 25375 00004507 881E[8903]              	MOV	[IOMED],BL
 25376                                  
 25377 0000450B 88E3                    	MOV	BL,AH		 	; get function
 25378 0000450D 2E8AA7[B044]            	MOV	AH,[cs:BX+LenTab]
 25379 00004512 D1E3                    	SHL	BX,1
 25380 00004514 2E8B8F[B644]            	MOV	CX,[cs:BX+CmdTab]
 25381 00004519 BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 25382 0000451C 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 25383 00004520 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 25384                                  
 25385 00004524 8EDA                    	MOV	DS,DX
 25386 00004526 E86B01                  	CALL	DEVIOCALL
 25387 00004529 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 25388 0000452E 21FF                    	and	di,di
 25389 00004530 7834                    	js	short DevErr
 25390                                  OKDevIO:
 25391 00004532 8CD0                    	MOV	AX,SS
 25392 00004534 8ED8                    	MOV	DS,AX
 25393                                  
 25394                                  	;cmp	ch,5
 25395 00004536 80FD05                  	CMP	CH,DEVRDND
 25396 00004539 7506                    	JNZ	short DNODRD
 25397 0000453B A0[8903]                	MOV	AL,[IORCHR]
 25398 0000453E A2[BC03]                	MOV	[DEVIOBUF],AL
 25399                                  
 25400                                  DNODRD: 
 25401 00004541 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 25402 00004545 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 25403                                  	;and	ah,2
 25404 00004547 80E402                  	AND	AH,STBUI>>8
 25405                                  
 25406                                  QuickReturn:				;AN000; 2/13/KK
 25407 0000454A E802BF                  	call	restore_world
 25408 0000454D 07                      	pop	es ; * (MSDOS 6.21)
 25409                                  
 25410                                  	; SR;
 25411                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 25412                                  	; IoStatFail = -1 (set after return from the I24)
 25413                                  
 25414                                  	; MSDOS 6.0
 25415 0000454E 9C                      	pushf
 25416 0000454F 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 25417 00004553 98                      	cbw				;sign extend to word
 25418 00004554 83F8FF                  	cmp	ax,-1
 25419 00004557 7507                    	jne	short not_fail_ret
 25420 00004559 36FE06[8300]            	inc	byte [ss:IoStatFail]
 25421 0000455E 9D                      	popf
 25422 0000455F C3                      	retn
 25423                                  
 25424                                  not_fail_ret:
 25425 00004560 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 25426 00004564 9D                      	popf
 25427 00004565 C3                      	retn
 25428                                  
 25429                                  DevErr:
 25430 00004566 88CC                    	MOV	AH,CL
 25431 00004568 E88E0D                  	call	CHARHARD
 25432 0000456B 3C01                    	CMP	AL,1
 25433 0000456D 7507                    	JNZ	short NO_RETRY
 25434 0000456F E8DDBE                  	call	restore_world
 25435                                  	; 12/05/2019
 25436 00004572 07                      	pop	es ; * (MSDOS 6.21)		
 25437 00004573 E94CFF                  	JMP	IOFUNC	; 10/08/2018
 25438                                  
 25439                                  NO_RETRY:
 25440                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 25441                                  	; ready so that DOS doesn't get caught in a status loop when user 
 25442                                  	; simply wants to ignore the error.
 25443                                  	;
 25444                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 25445                                  	; should be checked by the caller on return
 25446                                  
 25447                                  					; SS override
 25448 00004576 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 25449                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 25450                                  
 25451                                  	; SR;
 25452                                  	; Check if user failed
 25453                                  
 25454                                  	; MSDOS 6.0
 25455 0000457C 3C03                    	cmp	al,3
 25456 0000457E 7505                    	jnz	short not_fail
 25457 00004580 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 25458                                  not_fail:
 25459 00004585 EBAB                    	JMP	short OKDevIO
 25460                                  
 25461                                  IOTOFILE:
 25462 00004587 08E4                    	OR	AH,AH
 25463 00004589 7421                    	JZ	short IOIN
 25464 0000458B FECC                    	DEC	AH
 25465 0000458D 7405                    	JZ	short IOIST
 25466 0000458F FECC                    	DEC	AH
 25467 00004591 7411                    	JZ	short IOUT
 25468                                  IOUT_retn:	; 18/12/2022
 25469 00004593 C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 25470                                  IOIST:
 25471                                  	;push	word [si+15h]
 25472 00004594 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 25473                                  	;push	word [si+17h]
 25474 00004597 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 25475 0000459A E80F00                  	CALL	IOIN
 25476                                  	;pop	word [si+17h]
 25477 0000459D 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 25478                                  	;pop	word [si+15h]
 25479 000045A0 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 25480 000045A3 C3                      	retn
 25481                                  IOUT:
 25482 000045A4 E82500                  	CALL	SETXADDR
 25483 000045A7 E87FEF                  	call	DOS_WRITE
 25484                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 25485                                  	; 18/12/2022
 25486 000045AA EB52                    	jmp	RESTXADDR
 25487                                  ;IOUT_retn:
 25488                                  	;retn			; come crying to me when things don't
 25489                                  				; work ARR
 25490                                  IOIN:
 25491 000045AC E81D00                  	CALL	SETXADDR
 25492                                  					; SS override for DOS34_FLAG
 25493                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 25494                                  	;or	word [ss:DOS34_FLAG],40h
 25495                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25496                                  	; 16/12/2022
 25497 000045AF 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 25498 000045B5 E848ED                  	CALL	DOS_READ
 25499                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 25500                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 25501                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25502                                  	; 16/12/2022
 25503 000045B8 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 25504 000045BE 09C9                    	OR	CX,CX			; Check EOF
 25505 000045C0 E83B00                  	CALL	RESTXADDR
 25506                                  					; SS override
 25507 000045C3 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 25508 000045C7 75CA                    	jnz	short IOUT_retn	
 25509 000045C9 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 25510 000045CB C3                      	retn
 25511                                  
 25512                                  SETXADDR:
 25513                                  					; SS override
 25514 000045CC 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 25515                                  
 25516 000045D1 06                      	push	es ; * (MSDOS 6.21)
 25517                                  
 25518 000045D2 E891BE                  	call	save_world
 25519                                  					; SS override for DMAADD and THISSFT
 25520                                  	; 24/09/2023
 25521                                  	;PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 25522                                  	;PUSH	WORD [SS:DMAADD+2]
 25523 000045D5 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 25524                                  
 25525 000045DA 16                      	push	ss
 25526 000045DB 1F                      	pop	ds
 25527                                  
 25528                                  	; 24/09/2023
 25529 000045DC FF36[2C03]              	push	word [DMAADD]
 25530 000045E0 FF36[2E03]              	push	word [DMAADD+2]
 25531                                  
 25532 000045E4 8936[9E05]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 25533 000045E8 8B0E[8C03]              	MOV	CX,[IOXAD+2]
 25534 000045EC 890E[2E03]              	MOV	[DMAADD+2],CX
 25535 000045F0 8B0E[8A03]              	MOV	CX,[IOXAD]
 25536 000045F4 890E[2C03]              	MOV	[DMAADD],CX		; Set byte trans addr
 25537 000045F8 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 25538 000045FC EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 25539                                  
 25540                                  RESTXADDR:
 25541 000045FE 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 25542 00004602 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 25543 00004606 8F06[2C03]              	POP	WORD [DMAADD]
 25544                                  
 25545 0000460A E842BE                  	call	restore_world
 25546                                  
 25547 0000460D 07                      	pop	es ; * (MSDOS 6.21)
 25548                                  					; SS override
 25549                                  RESTRET:
 25550 0000460E 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 25551                                  
 25552                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 25553                                  ; 21/11/2022
 25554                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 25555                                  
 25556                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 25557                                  
 25558                                  ;----------------------------------------------------------------------------
 25559                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 25560                                  ;
 25561                                  ;	Dev_Open_SFT issues an open call to the device associated with
 25562                                  ;	the SFT.
 25563                                  ;
 25564                                  ;	ENTRY	(ES:DI) = SFT
 25565                                  ;	EXIT	none
 25566                                  ;	USES	all
 25567                                  ;----------------------------------------------------------------------------
 25568                                  
 25569                                  DEV_OPEN_SFT:
 25570 00004613 06                      	push	es ; * (MSDOS 6.21)
 25571 00004614 E84FBE                  	call	save_world
 25572                                  	;mov	al,0Dh	
 25573 00004617 B00D                    	MOV	AL,DEVOPN
 25574 00004619 EB06                    	JMP	SHORT DO_OPCLS
 25575                                  
 25576                                  ;----------------------------------------------------------------------------
 25577                                  ; Procedure Name : DEV_CLOSE_SFT
 25578                                  ;
 25579                                  ; Inputs:
 25580                                  ;	ES:DI Points to SFT
 25581                                  ; Function:
 25582                                  ;	Issue a CLOSE call to the correct device
 25583                                  ; Outputs:
 25584                                  ;	None
 25585                                  ; ALL preserved
 25586                                  ;----------------------------------------------------------------------------
 25587                                  
 25588                                  DEV_CLOSE_SFT:
 25589 0000461B 06                      	push	es ; * (MSDOS 6.21)
 25590 0000461C E847BE                  	call	save_world
 25591                                  	;mov	al,0Eh	
 25592 0000461F B00E                    	MOV	AL,DEVCLS
 25593                                  
 25594                                  	; Main entry for device open and close. AL contains the function 
 25595                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 25596                                  	; open/close to block devices. This allows networks to function but 
 25597                                  	; does NOT hang up with bogus change-line code.
 25598                                  
 25599                                  	;entry	DO_OPCLS
 25600                                  DO_OPCLS:
 25601                                  	; Is the SFT for the net? If so, no action necessary.
 25602                                  
 25603                                  	; MSDOS 6.0
 25604                                  	;test	word [es:di+5],8000h
 25605                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 25606 00004621 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25607 00004626 7567                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 25608 00004628 30E4                    	XOR	AH,AH			; Unit
 25609                                  	;test	byte [es:di+5],80h
 25610 0000462A 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 25611                                  	;les	di,[es:di+7]
 25612 0000462F 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 25613 00004633 7513                    	JNZ	short GOT_DEV_ADDR
 25614                                  
 25615                                  	; We are about to call device open/close on a block driver. If no 
 25616                                  	; sharing then just short circuit to done.
 25617                                  	
 25618                                  	; MSDOS 6.0
 25619                                  					; SS override
 25620 00004635 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 25621 0000463B 7652                    	JBE	short OPCLS_DONE	;AN010; yes
 25622                                  
 25623                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25624                                  	;mov	ah,[es:di+1]
 25625 0000463D 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 25626 00004641 268A0D                  	mov	cl,[es:di]
 25627                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 25628                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 25629                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 25630 00004644 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 25631                                  GOT_DEV_ADDR:				; ES:DI -> device
 25632                                  	;test	word [es:di+4],800h
 25633                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 25634 00004648 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 25635 0000464D 7440                    	JZ	short OPCLS_DONE	; Device can't
 25636 0000464F 06                      	PUSH	ES
 25637 00004650 1F                      	POP	DS
 25638 00004651 89FE                    	MOV	SI,DI			; DS:SI -> device
 25639                                  
 25640                                  OPCLS_RETRY:
 25641                                  	;Context ES
 25642 00004653 16                      	push	ss
 25643 00004654 07                      	pop	es
 25644                                  					; DEVCALL is in DOSDATA
 25645 00004655 BF[5A03]                	MOV	DI,DEVCALL
 25646                                  
 25647 00004658 89FB                    	MOV	BX,DI
 25648 0000465A 50                      	PUSH	AX
 25649                                  	;mov	al,13
 25650 0000465B B00D                    	MOV	AL,DOPCLHL
 25651 0000465D AA                      	STOSB				; Length
 25652 0000465E 58                      	POP	AX
 25653 0000465F 86E0                    	XCHG	AH,AL
 25654 00004661 AA                      	STOSB				; Unit
 25655 00004662 86E0                    	XCHG	AH,AL
 25656 00004664 AA                      	STOSB				; Command
 25657 00004665 26C7050000              	MOV	WORD [ES:DI],0		; Status
 25658 0000466A 50                      	PUSH	AX			; Save Unit,Command
 25659                                  	;invoke	DEVIOCALL2
 25660 0000466B E82900                  	call	DEVIOCALL2
 25661                                  
 25662                                  	;mov	di,[es:bx+3]
 25663 0000466E 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 25664                                  	;test	di,8000h
 25665                                  	;jz	short OPCLS_DONEP	
 25666 00004672 21FF                    	and	di,di
 25667 00004674 7918                    	jns	short OPCLS_DONEP	; No error
 25668                                  	; 21/11/2022
 25669                                  	;test	word [si+4],8000h
 25670                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25671                                  	;test	word [si+5],80h
 25672 00004676 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25673 0000467A 7404                    	JZ	short BLKDEV
 25674 0000467C B486                    	MOV	AH,86H			; Read error in data, Char dev
 25675 0000467E EB04                    	JMP	SHORT HRDERR
 25676                                  BLKDEV:
 25677 00004680 88C8                    	MOV	AL,CL			; Drive # in AL
 25678 00004682 B406                    	MOV	AH,6			; Read error in data, Blk dev
 25679                                  HRDERR:
 25680                                  	;invoke	CHARHARD
 25681 00004684 E8720C                  	call	CHARHARD
 25682 00004687 3C01                    	cmp	al,1
 25683 00004689 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 25684                                  					;  Note that FAIL is essentually IGNORED
 25685 0000468B 58                      	POP	AX			; Get back Unit, Command
 25686 0000468C EBC5                    	JMP	short OPCLS_RETRY
 25687                                  OPCLS_DONEP:
 25688 0000468E 58                      	POP	AX			; Clean stack
 25689                                  OPCLS_DONE:
 25690 0000468F E8BDBD                  	call	restore_world
 25691 00004692 07                      	pop	es ; * (MSDOS 6.21)
 25692 00004693 C3                      	retn
 25693                                  
 25694                                  ; 30/04/2019 - Retro DOS v4.0
 25695                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 25696                                  
 25697                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25698                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 25699                                  
 25700                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 25701                                  ;----------------------------------------------------------------------------
 25702                                  ;**	DevIoCall  - Call Device
 25703                                  ;
 25704                                  ;	ENTRY	DS:SI Points to device SFT
 25705                                  ;		ES:BX Points to request data
 25706                                  ;	EXIT	DS:SI -> Device driver
 25707                                  ;	USES	DS:SI,AX
 25708                                  ;----------------------------------------------------------------------------
 25709                                  ;**	DevIoCall2 - Call Device
 25710                                  ;
 25711                                  ;	ENTRY	DS:SI Points to DPB
 25712                                  ;		ES:BX Points to request data
 25713                                  ;	EXIT	DS:SI -> Device driver
 25714                                  ;	USES	DS:SI,AX
 25715                                  ;----------------------------------------------------------------------------
 25716                                  
 25717                                  DEVIOCALL:
 25718                                  					; SS override for CALLSSEC, 
 25719                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 25720 00004694 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 25721                                  
 25722                                  	;entry	DEVIOCALL2
 25723                                  DEVIOCALL2:
 25724                                  	;EnterCrit critDevice
 25725 00004697 E8B1CC                  	call	ECritDevice
 25726                                  
 25727                                  	; MSDOS 6.0
 25728                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 25729                                  	;test	byte [si+5],80h
 25730 0000469A F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 25731 0000469E 7548                    	jnz	short chardev2		;AN000; >32mb no
 25732                                  
 25733                                  	; 16/12/2022
 25734                                  	; 22/11/2022
 25735 000046A0 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 25736 000046A4 3C04                    	cmp	al,DEVRD	; 4
 25737 000046A6 7408                    	je	short chkext	
 25738 000046A8 3C08                    	cmp	al,DEVWRT	; 8
 25739 000046AA 7404                    	je	short chkext
 25740 000046AC 3C09                    	cmp	al,DEVWRTV	; 9
 25741 000046AE 7538                    	jne	short chardev2
 25742                                  
 25743                                  	; 16/12/2022
 25744                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25745                                  	;;cmp	byte [es:bx+2],4
 25746                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 25747                                  	;JZ	short chkext		;AN000; >32mb   yes
 25748                                  	;;cmp	byte [es:bx+2],8
 25749                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 25750                                  	;JZ	short chkext		;AN000; >32mb   yes
 25751                                  	;;cmp	byte [es:bx+2],9
 25752                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 25753                                  	;				;AN000; >32mb write/verify ?
 25754                                  	;JNZ	short chardev2		;AN000; >32mb no
 25755                                  chkext:
 25756 000046B0 E89900                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 25757 000046B3 7255                    	JC	short dev_exit		;AN000;LB. done
 25758                                  
 25759                                  	;test	byte [si+4],2
 25760 000046B5 F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 25761 000046B9 741D                    	JZ	short chksector		;AN000;>32mb   no
 25762 000046BB 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 25763 000046BF 36A1[6E03]              	MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 25764 000046C3 36C706[6E03]FFFF        	MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 25765 000046CA 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 25766 000046CE 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 25767 000046D2 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 25768 000046D6 EB10                    	JMP	short chardev2		;AN000; >32mb
 25769                                  chksector:				;AN000; >32mb
 25770 000046D8 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 25771 000046DE 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 25772                                  	;mov	word [es:bx+3],8107h
 25773 000046E0 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 25774                                  					;AN000; >32mb
 25775 000046E6 EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 25776                                  
 25777                                  chardev2:				;AN000;
 25778                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 25779                                  	; preserved
 25780                                  
 25781                                  	;mov	ax,[si+6]
 25782 000046E8 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 25783 000046EB 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25784 000046EF 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 25785 000046F4 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25786                                  
 25787                                  	;mov	ax,[si+8]
 25788 000046F9 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 25789 000046FC 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25790 00004700 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25791                                  
 25792                                  	; MSDOS 6.0
 25793 00004705 E83A01                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 25794 00004708 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 25795                                  
 25796                                  dev_exit:
 25797                                  	;LeaveCrit critDevice
 25798                                  	;call	LCritDevice
 25799                                  	;retn
 25800                                  	; 18/12/2022
 25801 0000470A E959CC                  	jmp	LCritDevice
 25802                                  
 25803                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 25804                                  ; 22/11/2022
 25805                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 25806                                  
 25807                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 25808                                  ;---------------------------------------------------------------------------
 25809                                  ;
 25810                                  ; Procedure Name : SETREAD, SETWRITE
 25811                                  ;
 25812                                  ; Inputs:
 25813                                  ;	DS:BX = Transfer Address
 25814                                  ;	CX = Record Count
 25815                                  ;	DX = Starting Record
 25816                                  ;	AH = Media Byte
 25817                                  ;	AL = Unit Code
 25818                                  ; Function:
 25819                                  ;	Set up the device call header at DEVCALL
 25820                                  ; Output:
 25821                                  ;	ES:BX Points to DEVCALL
 25822                                  ; No other registers effected
 25823                                  ;
 25824                                  ;---------------------------------------------------------------------------
 25825                                  
 25826                                  SETREAD:
 25827 0000470D 57                      	PUSH	DI
 25828 0000470E 51                      	PUSH	CX
 25829 0000470F 50                      	PUSH	AX
 25830 00004710 B104                    	MOV	CL,DEVRD ; mov cl,4
 25831                                  SETCALLHEAD:
 25832 00004712 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 25833 00004714 16                      	PUSH	SS
 25834 00004715 07                      	POP	ES
 25835                                  					; DEVCALL is in DOSDATA
 25836 00004716 BF[5A03]                	MOV	DI,DEVCALL
 25837                                  
 25838 00004719 AA                      	STOSB				; length
 25839 0000471A 58                      	POP	AX			; 
 25840 0000471B AA                      	STOSB				; Unit
 25841 0000471C 50                      	PUSH	AX
 25842 0000471D 88C8                    	MOV	AL,CL
 25843 0000471F AA                      	STOSB				; Command code
 25844 00004720 31C0                    	XOR	AX,AX
 25845 00004722 AB                      	STOSW				; Status
 25846 00004723 83C708                  	ADD	DI,8			; Skip link fields
 25847 00004726 58                      	POP	AX
 25848 00004727 86E0                    	XCHG	AH,AL
 25849 00004729 AA                      	STOSB				; Media byte
 25850 0000472A 86C4                    	XCHG	AL,AH
 25851 0000472C 50                      	PUSH	AX
 25852 0000472D 89D8                    	MOV	AX,BX
 25853 0000472F AB                      	STOSW
 25854                                  
 25855 00004730 8CD8                    	MOV	AX,DS
 25856 00004732 AB                      	STOSW				; Transfer addr
 25857                                  
 25858 00004733 59                      	POP	CX			; Real AX
 25859 00004734 58                      	POP	AX			; Real CX
 25860 00004735 AB                      	STOSW				; Count
 25861                                  
 25862 00004736 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 25863 00004737 AB                      	STOSW				; Start
 25864 00004738 91                      	XCHG	AX,CX
 25865 00004739 87D1                    	XCHG	DX,CX
 25866 0000473B 5F                      	POP	DI
 25867                                  					; DEVCALL is in DOSDATA
 25868 0000473C BB[5A03]                	MOV	BX,DEVCALL
 25869 0000473F C3                      	retn
 25870                                  
 25871                                  	;entry	SETWRITE
 25872                                  SETWRITE:
 25873                                  
 25874                                  ; Inputs:
 25875                                  ;	DS:BX = Transfer Address
 25876                                  ;	CX = Record Count
 25877                                  ;	DX = Starting Record
 25878                                  ;	AH = Media Byte
 25879                                  ;	AL = Unit Code
 25880                                  ; Function:
 25881                                  ;	Set up the device call header at DEVCALL
 25882                                  ; Output:
 25883                                  ;	ES:BX Points to DEVCALL
 25884                                  ; No other registers effected
 25885                                  
 25886 00004740 57                      	PUSH	DI
 25887 00004741 51                      	PUSH	CX
 25888 00004742 50                      	PUSH	AX
 25889 00004743 B108                    	MOV	CL,DEVWRT ; mov cl,8
 25890 00004745 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 25891 0000474A EBC6                    	JMP	SHORT SETCALLHEAD
 25892                                  
 25893                                  ; 30/04/2019 - Retro DOS v4.0
 25894                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 25895                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25896                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 25897                                  
 25898                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 25899                                  ;---------------------------------------------------------------------------
 25900                                  ;
 25901                                  ; Procedure Name : RW_SC
 25902                                  ;
 25903                                  ; Inputs:
 25904                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 25905                                  ;	 [SC_STATUS]= SC validity status
 25906                                  ;	 [SEQ_SECTOR]= last sector read
 25907                                  ; Function:
 25908                                  ;	Read from or write through secondary cache
 25909                                  ; Output:
 25910                                  ;	ES:BX Points to DEVCALL
 25911                                  ;	carry clear, I/O is not done
 25912                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 25913                                  ;	carry set, I/O is done
 25914                                  ;
 25915                                  ;----------------------------------------------------------------------------
 25916                                  
 25917                                  RW_SC:
 25918                                  	; SS override for all variables used.
 25919                                  	
 25920 0000474C 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 25921 00004752 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 25922 00004754 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 25923 0000475A 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 25924 0000475C 51                      	PUSH	CX			    ;AN000;LB.
 25925 0000475D 52                      	PUSH	DX			    ;AN000;LB. yes
 25926 0000475E 1E                      	PUSH	DS			    ;AN000;LB. save registers
 25927 0000475F 56                      	PUSH	SI			    ;AN000;LB.
 25928 00004760 06                      	PUSH	ES			    ;AN000;LB.
 25929 00004761 57                      	PUSH	DI			    ;AN000;LB.
 25930                                  
 25931 00004762 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 25932 00004767 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 25933 0000476D 7408                    	JZ	short doread		    ;AN000;LB. yes
 25934 0000476F E8BE00                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 25935 00004772 E98B00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 25936                                  scexit4:				    ;AN000;
 25937 00004775 F8                      	CLC				    ;AN000;LB. I/O not done yet
 25938 00004776 C3                      	retn				    ;AN000;LB.
 25939                                  doread: 				    ;AN000;
 25940 00004777 E82001                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 25941 0000477A 720A                    	JC	short readSC		    ;AN000;LB.
 25942 0000477C 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 25943 00004783 F9                      	STC				    ;AN000;LB. set carry
 25944 00004784 EB68                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 25945                                  readSC: 				    ;AN000;
 25946 00004786 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 25947 0000478A 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 25948 0000478F 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 25949 00004794 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 25950                                  	; 24/09/2023
 25951                                  	;CMP	AX,0			    ;AN000;LB. greater than 64K
 25952 00004799 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 25953                                  chklow: 						
 25954 0000479B 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 25955 0000479E 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 25956 000047A0 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 25957 000047A7 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 25958 000047AB 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 25959                                  readsr:
 25960 000047AF 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 25961 000047B3 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 25962 000047B7 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 25963 000047BB 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 25964                                  
 25965 000047BF 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 25966 000047C3 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 25967 000047C7 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 25968 000047CB 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 25969 000047CF 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 25970 000047D5 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 25971 000047D9 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 25972 000047DD 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 25973 000047E1 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 25974 000047E5 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 25975 000047E9 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 25976                                  saveseq2:				    ;AN000;
 25977 000047ED F8                      	CLC				    ;AN000;LB. clear carry
 25978                                  saveseq:				    ;AN000;	
 25979 000047EE 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 25980 000047F2 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 25981 000047F6 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 25982 000047FA 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 25983 000047FE EB01                    	JMP	short scexit 		    ;AN000;LB.	
 25984                                  scexit2:				    ;AN000;LB.
 25985 00004800 F8                      	CLC				    ;AN000;LB.	clear carry
 25986                                  scexit: 				    ;AN000;		
 25987 00004801 5F                      	POP	DI			    ;AN000;LB.
 25988 00004802 07                      	POP	ES			    ;AN000;LB. restore registers
 25989 00004803 5E                      	POP	SI			    ;AN000;LB.
 25990 00004804 1F                      	POP	DS			    ;AN000;LB.
 25991 00004805 5A                      	POP	DX			    ;AN000;LB.
 25992 00004806 59                      	POP	CX			    ;AN000;LB.
 25993 00004807 C3                      	retn				    ;AN000;LB.
 25994                                  
 25995                                  ;Break	<IN_SC -- check if in secondary cache>
 25996                                  ;--------------------------------------------------------------------------
 25997                                  ;
 25998                                  ; Procedure Name : IN_SC
 25999                                  ;
 26000                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26001                                  ;	   [CURSC_DRIVE]= current SC drive
 26002                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26003                                  ;	   [SC_CACHE_COUNT]= SC count
 26004                                  ;	   [HIGH_SECTOR]:DX= sector number
 26005                                  ; Function:
 26006                                  ;	Check if the sector is in secondary cache
 26007                                  ; Output:
 26008                                  ;	carry clear, in SC
 26009                                  ;	   CX= the index in the secondary cache
 26010                                  ;	carry set, not in SC
 26011                                  ;
 26012                                  ;---------------------------------------------------------------------------
 26013                                  
 26014                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26015                                  IN_SC:
 26016                                  	; SS override for all variables used
 26017 00004808 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 26018 0000480C 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 26019 00004811 751B                    	JNZ	short outrange2		    ;AN000;;LB. no
 26020 00004813 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 26021 00004817 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 26022 00004819 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 26023 0000481E 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 26024                                  	; 24/09/2023
 26025                                  	;CMP	AX,0			    ;AN000;;LB. greater than 64K
 26026 00004823 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 26027 00004825 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 26028 0000482A 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 26029 0000482C F8                      	CLC				    ;AN000;;LB. clear carry
 26030                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 26031                                  	; 16/12/2022
 26032 0000482D C3                      	retn	; 30/04/2019
 26033                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26034                                  	;jmp	short inexit
 26035                                  
 26036                                  outrange2:				    ;AN000;;LB. set carry
 26037 0000482E F9                      	STC				    ;AN000;;LB.
 26038                                  inexit: 				    ;AN000;;LB.
 26039 0000482F C3                      	retn				    ;AN000;;LB.
 26040                                  
 26041                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 26042                                  ;---------------------------------------------------------------------------
 26043                                  ;
 26044                                  ; Procedure Name : Invalidate_Sc
 26045                                  ;
 26046                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26047                                  ;	   [CURSC_DRIVE]= current SC drive
 26048                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26049                                  ;	   [SC_CACHE_COUNT]= SC count
 26050                                  ;	   [SC_STATUS]= SC status word
 26051                                  ;	   [HIGH_SECTOR]:DX= sector number
 26052                                  ;
 26053                                  ; Function:
 26054                                  ;	invalidate secondary cache if in there
 26055                                  ; Output:
 26056                                  ;	[SC_STATUS] is updated
 26057                                  ;---------------------------------------------------------------------------
 26058                                  
 26059                                  INVALIDATE_SC:
 26060                                  	; SS override for all variables used
 26061                                  
 26062 00004830 E8D5FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 26063 00004833 720C                    	JC	short outrange		    ;AN000;;LB. no
 26064 00004835 B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 26065 00004838 D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 26066 0000483A F7D0                    	NOT	AX			    ;AN000;;LB.
 26067 0000483C 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 26068                                  outrange:				    ;AN000;;LB.
 26069 00004841 C3                      	retn				    ;AN000;;LB.
 26070                                  
 26071                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 26072                                  ; 22/11/2022
 26073                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 26074                                  
 26075                                  ;Break	<VIRREAD- virtually read data into buffer>
 26076                                  ;--------------------------------------------------------------------------
 26077                                  ;
 26078                                  ; Procedure Name : SC_FLAG
 26079                                  ;
 26080                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 26081                                  ;		     1, continuous sectors were read into SC
 26082                                  ; Function:
 26083                                  ;	   Move data from SC to buffer
 26084                                  ; Output:
 26085                                  ;	 carry clear, data is moved to buffer
 26086                                  ;	 carry set, bad sector or exceeds maximum sector
 26087                                  ;	   SC_FLAG =0
 26088                                  ;	   CALLSCNT=1
 26089                                  ;	   SC_STATUS= -1 if succeeded
 26090                                  ;     
 26091                                  ;		       0 if failed
 26092                                  ;--------------------------------------------------------------------------
 26093                                  
 26094                                  VIRREAD:
 26095                                  	; SS override for all variables used
 26096                                  
 26097 00004842 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 26098 00004848 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 26099 0000484A 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 26100 0000484E 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 26101 00004852 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 26102 00004856 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 26103 0000485A 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 26104 00004860 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 26105                                  
 26106                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 26107 00004867 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 26108 0000486D 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 26109 0000486F 1E                      	PUSH	DS			    ;AN000;;LB.
 26110 00004870 56                      	PUSH	SI			    ;AN000;;LB.
 26111 00004871 06                      	PUSH	ES			    ;AN000;;LB.
 26112 00004872 57                      	PUSH	DI			    ;AN000;;LB.
 26113 00004873 52                      	PUSH	DX			    ;AN000;;LB.
 26114 00004874 51                      	PUSH	CX			    ;AN000;;LB.
 26115 00004875 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 26116 00004877 E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buf
 26117 0000487A 59                      	POP	CX
 26118 0000487B 5A                      	POP	DX			    ;AN000;;LB.
 26119 0000487C 5F                      	POP	DI			    ;AN000;;LB.
 26120 0000487D 07                      	POP	ES			    ;AN000;;LB.
 26121 0000487E 5E                      	POP	SI			    ;AN000;;LB.
 26122 0000487F 1F                      	POP	DS			    ;AN000;;LB.
 26123 00004880 EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 26124                                  scerror:				    ;AN000;
 26125 00004882 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 26126 00004889 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 26127 00004890 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 26128 00004896 F9                      	STC				    ;AN000;;LB. carry set
 26129 00004897 C3                      	retn				    ;AN000;;LB.
 26130                                  sc2end: 				    ;AN000;
 26131 00004898 F8                      	CLC				    ;AN000;;LB. carry clear
 26132 00004899 C3                      	retn				    ;AN000;;LB.
 26133                                  
 26134                                  ; 30/04/2019 - Retro  DOS v4.0
 26135                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 26136                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26137                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 26138                                  
 26139                                  ;Break	<SC2BUF- move data from SC to buffer>
 26140                                  ;----------------------------------------------------------------------------
 26141                                  ;
 26142                                  ; Procedure Name : SC2BUF
 26143                                  ;
 26144                                  ; Inputs:  [SC_STATUS] = SC validity status
 26145                                  ;	   [SC_SECTOR_SIZE] = request sector size
 26146                                  ;	   [SC_CACHE_PTR] = pointer to SC
 26147                                  ; Function:
 26148                                  ;	   Move data from SC to buffer
 26149                                  ; Output:
 26150                                  ;	   carry clear, in SC  and data is moved
 26151                                  ;	   carry set, not in SC and data is not moved
 26152                                  ;---------------------------------------------------------------------------
 26153                                  
 26154                                  SC2BUF:
 26155                                  	; SS override for all variables used
 26156 0000489A E86BFF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 26157                                  	;JC	short noSC		    ;AN000;LB. no
 26158                                  	; 24/09/2023
 26159 0000489D 723D                    	jc	short sexit
 26160 0000489F B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 26161 000048A2 D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 26162 000048A4 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 26163 000048A9 7430                    	JZ	short noSC		    ;AN000;LB. invalid
 26164                                  ;entry SC2BUF2
 26165                                  SC2BUF2:				    ;AN000;
 26166                                  	;MOV	AX,CX			    ;AN000;LB. times index with
 26167                                  	;MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 26168                                  	; 24/09/2023
 26169 000048AB 36A1[AD0D]              	mov	ax,[ss:SC_SECTOR_SIZE]
 26170 000048AF 91                      	xchg	ax,cx ; cx = [ss:SC_SECTOR_SIZE]
 26171 000048B0 F7E1                    	mul	cx
 26172 000048B2 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 26173 000048B7 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26174 000048BC 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 26175 000048BE 89C6                    	MOV	SI,AX			    ;AN000;LB.
 26176 000048C0 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 26177 000048C5 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 26178                                  	; 24/09/2023
 26179                                  	;MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 26180 000048CA D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 26181                                  ;entry MOVWORDS
 26182                                  MOVWORDS:				    ;AN000;
 26183 000048CC 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 26184 000048D2 7403                    	JZ	short nodd		    ;AN000;LB. no
 26185 000048D4 D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 26186 000048D6 66                      	DB	66H			    ;AN000;LB. use double word move
 26187                                  nodd:
 26188 000048D7 F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 26189 000048D9 F8                      	CLC				    ;AN000;LB. clear carry
 26190 000048DA C3                      	retn				    ;AN000;LB. exit
 26191                                  noSC:					    ;AN000;
 26192 000048DB F9                      	STC				    ;AN000;LB. set carry
 26193                                  sexit:					    ;AN000;
 26194 000048DC C3                      	retn				    ;AN000;LB.
 26195                                  
 26196                                  ;============================================================================
 26197                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 26198                                  ;============================================================================
 26199                                  ; 29/07/2018 - Retro DOS v3.0
 26200                                  ; 19/05/2019 - Retro DOS v4.0
 26201                                  
 26202                                  ;	TITLE	MKNODE - Node maker
 26203                                  ;	NAME	MKNODE
 26204                                  
 26205                                  ;**	MKNODE.ASM
 26206                                  ;----------------------------------------------------------------------------
 26207                                  ;	Low level routines for making a new local file system node
 26208                                  ;	and filling in an SFT from a directory entry
 26209                                  ;
 26210                                  ;	BUILDDIR
 26211                                  ;	SETDOTENT
 26212                                  ;	MakeNode
 26213                                  ;	NEWENTRY
 26214                                  ;	FREEENT
 26215                                  ;	NEWDIR
 26216                                  ;	DOOPEN
 26217                                  ;	RENAME_MAKE
 26218                                  ;	CHECK_VIRT_OPEN
 26219                                  ;
 26220                                  ;	Revision history:
 26221                                  ;
 26222                                  ;	 AN000	version 4.0  Jan. 1988
 26223                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 26224                                  
 26225                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 26226                                  ;----------------------------------------------------------------------------
 26227                                  ;
 26228                                  ; Procedure Name : BUILDDIR,NEWDIR
 26229                                  ;
 26230                                  ; Inputs:
 26231                                  ;       ES:BP Points to DPB
 26232                                  ;       [THISSFT] Set if using NEWDIR entry point
 26233                                  ;               (used by ALLOCATE)
 26234                                  ;       [LASTENT] current last valid entry number in directory if no free
 26235                                  ;               entries
 26236                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26237                                  ; Function:
 26238                                  ;       Grow directory if no free entries and not root
 26239                                  ; Outputs:
 26240                                  ;       CARRY SET IF FAILURE
 26241                                  ;       ELSE
 26242                                  ;          AX entry number of new entry
 26243                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 26244                                  ;               AX = first entry of new dir
 26245                                  ;       GETENT should be called to set [LASTENT]
 26246                                  ;
 26247                                  ;----------------------------------------------------------------------------
 26248                                  
 26249                                  ; 19/05/2019 - Retro DOS v4.0
 26250                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 26251                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26252                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 26253                                  
 26254                                  BUILDDIR:
 26255                                  	; 29/07/2018 - Retro DOS v3.0
 26256                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 26257                                  
 26258 000048DD A1[D805]                        MOV     AX,[ENTFREE]
 26259 000048E0 83F8FF                          CMP     AX,-1 ; 0FFFFh
 26260                                  	;JZ	short CHECK_IF_ROOT
 26261                                          ;CLC
 26262                                          ;retn
 26263                                  	; 24/09/2023
 26264 000048E3 7507                    	jne	short builddir_cmc_retn  ; cf=1 (will be 0)
 26265                                  
 26266                                  CHECK_IF_ROOT:
 26267 000048E5 833E[C205]00                    CMP     word [DIRSTART],0
 26268 000048EA 7502                            JNZ	short NEWDIR
 26269                                          ;STC
 26270                                  	; 24/09/2023
 26271                                  	; [DIRSTART]=0, cf=0, zf=1 (cf will be 1 after cmc instruction)
 26272                                  builddir_cmc_retn:
 26273                                  	; 24/09/2023
 26274 000048EC F5                      	cmc	; cf=1 <-> cf=0
 26275                                  builddir_retn:
 26276 000048ED C3                              retn				; Can't grow root
 26277                                  
 26278                                  	;entry   NEWDIR
 26279                                  NEWDIR: 
 26280 000048EE 8B1E[C205]              	MOV     BX,[DIRSTART]
 26281 000048F2 09DB                            OR      BX,BX
 26282 000048F4 7405                            JZ	short NULLDIR
 26283 000048F6 E82806                  	call	GETEOF
 26284 000048F9 72F2                            jc	short builddir_retn	; Screw up
 26285                                  NULLDIR:
 26286 000048FB B90100                          MOV     CX,1
 26287 000048FE E83905                  	call	ALLOCATE
 26288 00004901 72EA                            jc	short  builddir_retn
 26289 00004903 8B16[C205]                      MOV     DX,[DIRSTART]
 26290 00004907 09D2                            OR      DX,DX
 26291 00004909 750D                            JNZ	short ADDINGDIR
 26292 0000490B E8DAF5                  	call	SETDIRSRCH
 26293 0000490E 72DD                            jc	short  builddir_retn
 26294 00004910 C706[4803]FFFF                  MOV     word [LASTENT],-1
 26295 00004916 EB29                            JMP     SHORT GOTDIRREC
 26296                                  ADDINGDIR:
 26297 00004918 53                              PUSH    BX
 26298 00004919 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 26299 0000491D E82D0C                          call	IsEOF
 26300 00004920 5B                              POP     BX
 26301 00004921 7217                            JB	short NOTFIRSTGROW
 26302                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26303 00004923 891E[BC05]                      MOV     [CLUSNUM],BX
 26304                                  	; 24/09/2023
 26305                                  	;PUSH	CX ; (not necessary)
 26306 00004927 50                      	PUSH	AX
 26307 00004928 55                      	PUSH	BP
 26308 00004929 B401                            MOV     AH,1			; CLUSNUM update
 26309                                  	; 15/12/2022
 26310 0000492B 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 26311                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26312                                  	;;mov	dl,[es:bp+0]
 26313                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 26314 0000492F 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 26315 00004933 89DD                            MOV     BP,BX 			; CLUSNUM
 26316 00004935 E8E7DD                  	call	FastOpen_Update
 26317 00004938 5D                              POP     BP
 26318 00004939 58                              POP     AX
 26319                                  	; 24/09/2023
 26320                                          ;POP	CX
 26321                                  
 26322                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26323                                  NOTFIRSTGROW:
 26324 0000493A 89DA                            MOV     DX,BX
 26325 0000493C 30DB                            XOR     BL,BL
 26326 0000493E E8CC04                  	call	FIGREC
 26327                                  GOTDIRREC:
 26328                                  	;mov	cl,[es:bp+4]
 26329 00004941 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 26330 00004945 FEC1                            INC     CL
 26331 00004947 30ED                            XOR     CH,CH
 26332                                  ZERODIR:
 26333 00004949 51                              PUSH    CX
 26334                                  	; 22/09/2023
 26335                                  	;;mov	byte [ALLOWED],18h
 26336                                          ;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 26337 0000494A B0FF                            MOV     AL,0FFH
 26338                                          ;call	GETBUFFR
 26339 0000494C E82210                          call	GETBUFFRD ; *
 26340 0000494F 7302                    	JNC	short GET_SSIZE
 26341 00004951 59                              POP     CX
 26342 00004952 C3                              retn
 26343                                  
 26344                                  GET_SSIZE:
 26345                                  	;mov	cx,[es:bp+2]
 26346 00004953 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 26347 00004957 06                              PUSH    ES
 26348 00004958 C43E[E205]                      LES     DI,[CURBUF]
 26349                                  	;or	byte [es:di+5],4
 26350 0000495C 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 26351 00004961 57                              PUSH    DI
 26352                                  	;;add	di,16	; MSDOS 3.3
 26353                                  	;add	di,20	; MSDOS 6.0	
 26354 00004962 83C714                          ADD     DI,BUFINSIZ
 26355 00004965 31C0                            XOR     AX,AX
 26356 00004967 D1E9                            SHR     CX,1
 26357 00004969 F3AB                            REP     STOSW
 26358 0000496B 7301                            JNC	short EVENZ
 26359 0000496D AA                              STOSB
 26360                                  EVENZ:
 26361 0000496E 5F                              POP     DI
 26362                                  
 26363                                  	; MSDOS 6.0
 26364 0000496F 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26365                                  					;LB. if already dirty		  ;AN000;
 26366 00004974 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 26367 00004976 E8FF11                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 26368                                          
 26369                                  	;or	byte [es:di+5],40h
 26370 00004979 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26371                                  yesdirty7:
 26372 0000497E 07                              POP	ES
 26373 0000497F 59                              POP	CX
 26374                                  
 26375                                  	; 19/05/2019 - Retro DOS v4.0
 26376                                  
 26377                                  	; MSDOS 3.3
 26378                                  	;INC	DX
 26379                                  
 26380                                  	; MSDOS 6.0
 26381                                  	; 24/09/2023
 26382                                  	;add	dx,1
 26383                                  	;;adc	word [HIGH_SECTOR],0
 26384                                  	;; 24/09/2023
 26385                                  	;; ax=0
 26386                                  	;adc	[HIGH_SECTOR],ax ; 0
 26387                                  	; 24/09/2023
 26388 00004980 42                      	inc	dx
 26389 00004981 7504                    	jnz	short loop_zerodir
 26390 00004983 FF06[0706]              	inc	word [HIGH_SECTOR]
 26391                                  loop_zerodir:
 26392 00004987 E2C0                            LOOP    ZERODIR
 26393                                  
 26394 00004989 A1[4803]                        MOV     AX,[LASTENT]
 26395 0000498C 40                              INC     AX
 26396                                  	; 24/09/2023
 26397                                  	; cf=0
 26398                                  	;CLC
 26399 0000498D C3                              retn
 26400                                  
 26401                                  ;--------------------------------------------------------------------------
 26402                                  ;
 26403                                  ; Procedure Name : SETDOTENT
 26404                                  ;
 26405                                  ; set up a . or .. directory entry for a directory.
 26406                                  ;
 26407                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 26408                                  ;               AX contains ". " or ".."
 26409                                  ;               DX contains first cluster of entry
 26410                                  ;
 26411                                  ;----------------------------------------------------------------------------
 26412                                  
 26413                                  SETDOTENT:
 26414                                  ;	Fill in name field
 26415 0000498E AB                              STOSW
 26416 0000498F B90400                          MOV     CX,4
 26417 00004992 B82020                          MOV     AX,"  " ; 2020h
 26418 00004995 F3AB                            REP     STOSW
 26419 00004997 AA                              STOSB
 26420                                  
 26421                                  ;	Set up attribute
 26422                                  	;mov	al, 10h
 26423 00004998 B010                            MOV     AL,attr_directory
 26424 0000499A AA                              STOSB
 26425                                  
 26426                                  ;	Initialize time and date of creation
 26427 0000499B 83C70A                          ADD     DI,10
 26428 0000499E 8B36[9E05]                      MOV     SI,[THISSFT]
 26429                                  	;mov	ax,[si+0Dh]
 26430 000049A2 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 26431 000049A5 AB                              STOSW
 26432                                  	;mov	ax,[si+0Fh]
 26433 000049A6 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 26434 000049A9 AB                      	STOSW
 26435                                  
 26436                                  ;	Set up first cluster field
 26437 000049AA 89D0                            MOV     AX,DX
 26438 000049AC AB                              STOSW
 26439                                  
 26440                                  ;	0 file size
 26441 000049AD 31C0                            XOR     AX,AX
 26442 000049AF AB                              STOSW
 26443 000049B0 AB                              STOSW
 26444 000049B1 C3                              retn
 26445                                  
 26446                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 26447                                  ;---------------------------------------------------------------------------
 26448                                  ;
 26449                                  ; Procedure Name : MakeNode
 26450                                  ;
 26451                                  ; Inputs:
 26452                                  ;       AL - attribute to create
 26453                                  ;       AH = 0 if it is ok to truncate a file already by this name
 26454                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 26455                                  ;               (AH ignored on dirs and devices)
 26456                                  ;
 26457                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 26458                                  ;               a name already existant is ALWAYS an error in these cases.
 26459                                  ;
 26460                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 26461                                  ;               terminated)
 26462                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 26463                                  ;               ( = -1 if current dir not involved, else
 26464                                  ;                Points to first char after last "/" of current dir part)
 26465                                  ;       [THISCDS] Points to CDS being used
 26466                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 26467                                  ; Function:
 26468                                  ;       Make a new node
 26469                                  ; Outputs:
 26470                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 26471                                  ;       CARRY SET IF ERROR
 26472                                  ;          AX = 1 A node by this name exists and is a directory
 26473                                  ;          AX = 2 A new node could not be created
 26474                                  ;          AX = 3 A node by this name exists and is a disk file
 26475                                  ;               (AH was NZ on input)
 26476                                  ;          AX = 4 Bad Path
 26477                                  ;               SI return from GetPath maintained
 26478                                  ;          AX = 5 Attribute mismatch
 26479                                  ;          AX = 6 Sharing Violation
 26480                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 26481                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 26482                                  ;       ELSE
 26483                                  ;          AX = 0 Disk Node
 26484                                  ;          AX = 3 Device Node (error in some cases)
 26485                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 26486                                  ;               containing new node.
 26487                                  ;          [CURBUF+2]:BX Points to entry
 26488                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 26489                                  ;          [THISSFT] is filled in
 26490                                  ;               sf_mode = unchanged.
 26491                                  ;          Attribute byte in entry is input AL
 26492                                  ; DS preserved, others destroyed
 26493                                  ;
 26494                                  ;-------------------------------------------------------------------------
 26495                                  
 26496                                  ; 19/05/2019 - Retro DOS v4.0
 26497                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 26498                                  
 26499                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26500                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 26501                                  
 26502                                  MakeNode:
 26503                                  	;mov	word [CREATING],0E5FFh
 26504 000049B2 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 26505 000049B8 50                              PUSH    AX              ; Save AH value
 26506 000049B9 C606[4C03]00            	MOV	byte [NoSetDir],0
 26507 000049BE A2[6D05]                	MOV	[SATTRIB],AL
 26508 000049C1 E887F5                  	call	GetPathNoSet
 26509 000049C4 88CA                            MOV     DL,CL           ; Save CL info
 26510 000049C6 89C1                            MOV     CX,AX           ; Device ID to CH
 26511 000049C8 58                              POP     AX              ; Get back AH
 26512 000049C9 732E                            JNC	short make_exists ; File existed
 26513 000049CB 7505                            JNZ	short make_err_4 ; Path bad
 26514 000049CD 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 26515 000049D0 7406                            JZ	short make_type	; Name simply not found, and no metas
 26516                                  make_err_4:
 26517 000049D2 B004                            MOV     AL,4            ; case 1 bad path
 26518                                  make_err_ret:
 26519 000049D4 30E4                            XOR     AH,AH
 26520 000049D6 F9                              STC
 26521                                  ;make_retn:	; 22/11/2022
 26522 000049D7 C3                              retn
 26523                                  
 26524                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 26525                                  RENAME_MAKE:
 26526                                  make_type:
 26527                                  ;Extended Open hooks
 26528                                  	; MSDOS 6.0
 26529                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 26530 000049D8 F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 26531 000049DD 7411                    	JZ	short make_type2	;FT. no				;AN000;
 26532 000049DF 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 26533                                  					;FT. set for extended open ;AN000;
 26534                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 26535 000049E4 F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 26536 000049E9 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 26537 000049EB F9                      	STC				;FT. set carry			;AN000;
 26538 000049EC B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 26539                                  	; 22/11/2022
 26540                                  make_retn:
 26541                                  	;return
 26542 000049EF C3                      	retn				;FT.				;AN000;
 26543                                  
 26544                                  ;	Extended Open hooks
 26545                                  
 26546                                  make_type2:
 26547 000049F0 C43E[9E05]                      LES     DI,[THISSFT]
 26548 000049F4 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 26549 000049F6 F9                              STC                     ; Not found
 26550 000049F7 EB5A                            JMP     short make_new
 26551                                  
 26552                                  ; The node exists. It may be either a device, directory or file:
 26553                                  ;   Zero set => directory
 26554                                  ;   High bit of CH on => device
 26555                                  ;   else => file
 26556                                  
 26557                                  make_exists:
 26558 000049F9 7448                            JZ	short make_exists_dir
 26559 000049FB B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 26560                                  	;test	byte [ATTRIB],18h
 26561 000049FD F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 26562 00004A02 753B                            JNZ	short make_err_ret_5
 26563                                  				; Cannot already exist as Disk or Device Node
 26564                                                                  ;       if making DIR or Volume ID
 26565 00004A04 08ED                            OR      CH,CH
 26566 00004A06 781A                            JS	short make_share ; No further checks on attributes if device
 26567 00004A08 08E4                            OR      AH,AH
 26568 00004A0A 75C8                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 26569 00004A0C 51                              PUSH    CX              ; Save device ID
 26570 00004A0D 8E06[E405]                      MOV     ES,[CURBUF+2]
 26571                                  	;mov	ch,[es:bx+0Bh]
 26572 00004A11 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 26573                                  	;test	ch,1
 26574 00004A15 F6C501                  	test	CH,attr_read_only
 26575 00004A18 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 26576 00004A1A E8D0F7                  	call	MatchAttributes
 26577 00004A1D 59                              POP     CX              ; Devid back in CH
 26578 00004A1E 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 26579 00004A20 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 26580                                  make_share:
 26581 00004A22 30E4                            XOR     AH,AH
 26582 00004A24 50                              PUSH    AX              ; Save Disk or Device node
 26583 00004A25 51                              PUSH    CX              ; Save Device ID
 26584 00004A26 88EC                            MOV     AH,CH           ; Device ID to AH
 26585 00004A28 E84501                          CALL    DOOPEN          ; Fill in SFT for share check
 26586 00004A2B C43E[9E05]                      LES     DI,[THISSFT]
 26587 00004A2F 56                      	push	si
 26588 00004A30 53                      	push	bx		; Save CURBUF pointers
 26589 00004A31 E86729                  	call	ShareEnter
 26590 00004A34 735A                            jnc	short MakeEndShare
 26591                                  
 26592                                  ; User failed request.
 26593 00004A36 5B                      	pop	bx
 26594 00004A37 5E                      	pop	si
 26595 00004A38 59                      	pop	cx
 26596 00004A39 58                      	pop	ax
 26597                                  
 26598                                  Make_Share_ret:
 26599 00004A3A B006                            MOV     AL,6
 26600 00004A3C EB96                            JMP	short make_err_ret
 26601                                  
 26602                                  make_err_ret_5P:
 26603 00004A3E 59                              POP     CX              ; Get back device ID
 26604                                  make_err_ret_5:
 26605 00004A3F B005                            MOV     AL,5            ; Attribute mismatch
 26606                                          ; 22/11/2022
 26607 00004A41 EB91                    	JMP     short make_err_ret
 26608                                  
 26609                                  make_exists_dir:
 26610 00004A43 B001                            MOV     AL,1            ; exists as directory, always an error
 26611                                  	; 22/11/2022
 26612 00004A45 EB8D                    	JMP     short make_err_ret
 26613                                  
 26614                                  make_save:
 26615 00004A47 50                              PUSH    AX              ; Save whether Disk or File
 26616 00004A48 89C8                            MOV     AX,CX           ; Device ID to AH
 26617 00004A4A E87400                          CALL    NEWENTRY
 26618 00004A4D 58                              POP     AX              ; 0 if Disk, 3 if File
 26619 00004A4E 739F                            jnc	short make_retn
 26620 00004A50 B002                            MOV     AL,2            ; create failed case 2
 26621                                  make_save_retn:
 26622 00004A52 C3                              retn
 26623                                  
 26624                                  make_new:
 26625 00004A53 E8F1FF                          call    make_save
 26626 00004A56 72FA                            jc	short make_save_retn	; case 2 fail
 26627                                  	;test	byte [ATTRIB],10h
 26628 00004A58 F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 26629 00004A5D 75F3                            jnz	short make_save_retn	; Don't "open" directories,
 26630                                  					; so don't tell the sharer about them
 26631 00004A5F 50                      	push	ax
 26632 00004A60 53                      	push	bx
 26633 00004A61 56                      	push	si		
 26634 00004A62 E83629                          call	ShareEnter
 26635 00004A65 5E                      	pop	si
 26636 00004A66 5B                      	pop	bx
 26637 00004A67 58                      	pop	ax
 26638 00004A68 73E8                    	jnc	short make_save_retn
 26639                                  
 26640                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 26641                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 26642                                  ; possible: delete the newly created directory entry and return share_error.
 26643                                  
 26644 00004A6A 50                              PUSH    AX
 26645 00004A6B C43E[E205]                      LES     DI,[CURBUF]
 26646                                  	;mov	byte [es:bx],0E5h
 26647 00004A6F 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 26648                                  	
 26649                                  	; MSDOS 6.0
 26650                                  	;test	byte [es:di+5],40h
 26651 00004A73 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 26652                                  					;LB. if already dirty		  ;AN000;
 26653 00004A78 7508                            JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 26654                                  	; 22/11/2022
 26655 00004A7A E8FB10                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 26656                                  	;or	byte [es:di+5],40h
 26657 00004A7D 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 26658                                  yesdirty8:
 26659 00004A82 C42E[8A05]                      LES     BP,[THISDPB]
 26660                                  	; 15/12/2022
 26661 00004A86 268A4600                        mov	al,[ES:BP]
 26662                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26663                                  	;;mov	al,[es:bp+0]
 26664                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 26665 00004A8A E8E60F                          call	FLUSHBUF		; write out buffer.
 26666 00004A8D 58                              POP     AX
 26667 00004A8E EBAA                            jmp	short Make_Share_ret
 26668                                  
 26669                                  ; We have found an existing file. We have also entered it into the share set.
 26670                                  ; At this point we need to call newentry to correctly address the problem of
 26671                                  ; getting rid of old data (create an existing file) or creating a new
 26672                                  ; directory entry (create a new file). Unfortunately, this operation may
 26673                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 26674                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 26675                                  ; the share set now, do the operation and then reassert the share access.
 26676                                  ;
 26677                                  ; We are allowed to do this! There is no window! After all, we are in
 26678                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 26679                                  
 26680                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26681                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 26682                                  
 26683                                  MakeEndShare:
 26684 00004A90 C43E[9E05]                      LES     DI,[THISSFT]		; grab SFT
 26685 00004A94 31C0                            XOR     AX,AX
 26686 00004A96 E87DC8                  	call	ECritSFT
 26687 00004A99 268705                  	xchg	AX,[ES:DI]
 26688                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 26689 00004A9C 50                      	push	ax
 26690 00004A9D 57                      	push	di
 26691 00004A9E 06                      	push	es
 26692 00004A9F 9C                              PUSHF
 26693 00004AA0 E8F328                          call	ShareEnd                ; remove sharing
 26694 00004AA3 9D                              POPF
 26695 00004AA4 07                      	pop	es
 26696 00004AA5 5F                      	pop	di
 26697 00004AA6 268F05                          pop	word [ES:DI]	
 26698                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 26699 00004AA9 E885C8                  	call	LCritSFT
 26700                                  	; 22/11/2022
 26701                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 26702 00004AAC 5B                      	pop	bx
 26703 00004AAD 5E                      	pop	si
 26704 00004AAE 59                      	pop	cx
 26705 00004AAF 58                      	pop	ax
 26706 00004AB0 E894FF                          CALL    make_save
 26707                                  
 26708                                  ; If the user failed, we do not reenter into the sharing set.
 26709                                  
 26710 00004AB3 729D                            jc	short make_save_retn	; bye if error
 26711 00004AB5 50                      	push	ax
 26712 00004AB6 53                      	push	bx
 26713 00004AB7 56                      	push	si
 26714 00004AB8 9C                              PUSHF
 26715 00004AB9 E8DF28                          call	ShareEnter
 26716 00004ABC 9D                              POPF
 26717 00004ABD 5E                      	pop	si
 26718 00004ABE 5B                      	pop	bx
 26719 00004ABF 58                      	pop	ax
 26720                                  
 26721                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 26722                                  
 26723                                  makeendshare_retn:
 26724 00004AC0 C3                              retn
 26725                                  
 26726                                  ;---------------------------------------------------------------------------
 26727                                  ;
 26728                                  ; Procedure Name : NEWENTRY
 26729                                  ;
 26730                                  ; Inputs:
 26731                                  ;       [THISSFT] set
 26732                                  ;       [THISDPB] set
 26733                                  ;       [LASTENT] current last valid entry number in directory if no free
 26734                                  ;               entries
 26735                                  ;       [VOLID] set if a volume ID was found during search
 26736                                  ;	Attrib Contains attributes for new file
 26737                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26738                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 26739                                  ;               NC means file existed (device)
 26740                                  ;               C  means file did not exist
 26741                                  ;       AH = Device ID byte
 26742                                  ;       If FILE
 26743                                  ;           [CURBUF+2]:BX points to start of directory entry
 26744                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26745                                  ;       If device
 26746                                  ;           DS:BX points to start of "fake" directory entry
 26747                                  ;           DS:SI points to dir_first of "fake" directory entry
 26748                                  ;               (has DWORD pointer to device header)
 26749                                  ; Function:
 26750                                  ;       Make a new directory entry
 26751                                  ;       If an old one existed it is truncated first
 26752                                  ; Outputs:
 26753                                  ;       Carry set if error
 26754                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 26755                                  ;               vol ID, user FAILed to I 24
 26756                                  ;       else
 26757                                  ;               outputs of DOOPEN
 26758                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 26759                                  ;
 26760                                  ;----------------------------------------------------------------------------
 26761                                  
 26762                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26763                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 26764                                  
 26765                                  NEWENTRY:
 26766 00004AC1 C42E[8A05]              	LES     BP,[THISDPB]
 26767 00004AC5 7315                            JNC	short EXISTENT	
 26768 00004AC7 803E[4A03]00                    CMP     byte [FAILERR],0
 26769                                  	;STC
 26770                                          ;jnz	short makeendshare_retn	; User FAILed, node might exist
 26771                                          ; 24/09/2023
 26772 00004ACC 750C                    	jnz	short ERRRET3
 26773 00004ACE E80CFE                  	CALL    BUILDDIR        ; Try to build dir
 26774 00004AD1 72ED                            jc	short makeendshare_retn	; Failed
 26775 00004AD3 E8E3F3                          call	GETENT          ; Point at that free entry
 26776 00004AD6 72E8                            jc	short makeendshare_retn	; Failed
 26777 00004AD8 EB0E                            JMP     SHORT FREESPOT
 26778                                  
 26779                                  ERRRET3:
 26780 00004ADA F9                              STC
 26781                                  newentry_retn:
 26782 00004ADB C3                              retn
 26783                                  
 26784                                  EXISTENT:
 26785 00004ADC 08E4                            OR      AH,AH           ; Check if file is I/O device
 26786 00004ADE 7903                            JNS	short NOT_DEV1
 26787 00004AE0 E98D00                          JMP     DOOPEN          ; If so, proceed with open
 26788                                  
 26789                                  NOT_DEV1:
 26790 00004AE3 E82901                          call	FREEENT		; Free cluster chain
 26791 00004AE6 72F3                            jc	short newentry_retn ; Failed
 26792                                  FREESPOT:
 26793                                  	;test	byte [ATTRIB],8
 26794 00004AE8 F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 26795 00004AED 7407                            JZ	short NOTVOLID
 26796 00004AEF 803E[7B05]00                    CMP     BYTE [VOLID],0
 26797 00004AF4 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 26798                                  NOTVOLID:
 26799 00004AF6 8E06[E405]                      MOV     ES,[CURBUF+2]
 26800 00004AFA 89DF                            MOV     DI,BX
 26801                                  
 26802 00004AFC BE[4B05]                        MOV     SI,NAME1
 26803                                  
 26804 00004AFF B90500                          MOV     CX,5
 26805 00004B02 F3A5                            REP     MOVSW
 26806 00004B04 A4                              MOVSB                   ; Move name into dir entry
 26807 00004B05 A0[6B05]                	MOV	AL,[ATTRIB]
 26808 00004B08 AA                      	STOSB                   ; Attributes
 26809                                  
 26810                                  ;; File Tagging for Create DOS 4.00
 26811 00004B09 B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 26812                                  ;; File Tagging for Create DOS 4.00
 26813                                  
 26814 00004B0B 31C0                            XOR     AX,AX
 26815 00004B0D F3AB                            REP     STOSW           ; Zero pad
 26816 00004B0F E8E3BF                          call	DATE16
 26817 00004B12 92                              XCHG    AX,DX
 26818 00004B13 AB                              STOSW                   ; dir_time
 26819 00004B14 92                              XCHG    AX,DX
 26820 00004B15 AB                              STOSW                   ; dir_date
 26821 00004B16 31C0                            XOR     AX,AX
 26822 00004B18 57                              PUSH    DI              ; Correct SI input value
 26823                                  				; 	(recomputed for new buffer)
 26824 00004B19 AB                              STOSW                   ; Zero dir_first and size
 26825 00004B1A AB                              STOSW
 26826 00004B1B AB                              STOSW
 26827                                  updnxt:
 26828 00004B1C 8B36[E205]              	MOV	SI,[CURBUF]
 26829                                  
 26830                                  	; 19/05/2019 - Retro DOS v4.0
 26831                                  
 26832                                  	; MSDOS 6.0
 26833 00004B20 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26834                                  				;LB. if already dirty		  ;AN000;
 26835 00004B25 7508                            JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 26836 00004B27 E84E10                          call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 26837                                          
 26838                                  	;or	byte [es:si+5],40h
 26839 00004B2A 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26840                                  yesdirty9:
 26841 00004B2F C42E[8A05]                      LES     BP,[THISDPB]
 26842                                  	; 15/12/2022
 26843 00004B33 268A4600                	MOV	AL,[ES:BP]
 26844                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26845                                  	;;mov	al,[es:bp+0]
 26846                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 26847 00004B37 50                              PUSH    AX
 26848 00004B38 53                              PUSH    BX
 26849                                  
 26850                                  ; If we have a file, we need to increment the open ref. count so that
 26851                                  ; we have some protection against invalid media changes if an Int 24
 26852                                  ; error occurs.
 26853                                  ; Do nothing for a device.
 26854                                  
 26855 00004B39 06                      	push	es
 26856 00004B3A 57                      	push	di
 26857 00004B3B C43E[9E05]                      LES     DI,[THISSFT]
 26858                                  	;test	word [es:di+5],80h
 26859                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 26860 00004B3F 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26861 00004B44 751A                            jnz	short GotADevice
 26862 00004B46 1E                      	push	ds
 26863 00004B47 53                      	push	bx
 26864 00004B48 C51E[8A05]                      LDS     BX,[THISDPB]
 26865                                  	;mov	[es:di+7],bx
 26866 00004B4C 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 26867 00004B50 8CDB                            MOV     BX,DS
 26868                                  	;mov	[es:di+9],bx
 26869 00004B52 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 26870 00004B56 5B                      	pop	bx
 26871 00004B57 1F                      	pop	ds ; need to use DS for segment later on
 26872 00004B58 E8B8FA                  	call	DEV_OPEN_SFT    ; increment ref. count
 26873 00004B5B C606[A20A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 26874                                  GotADevice:
 26875 00004B60 5F                      	pop	di
 26876 00004B61 07                      	pop	es
 26877                                  
 26878 00004B62 E80E0F                          call	FLUSHBUF
 26879 00004B65 E8EF00                          Call    CHECK_VIRT_OPEN ; decrement ref. count            ;AN000;
 26880 00004B68 5B                              POP     BX
 26881 00004B69 58                              POP     AX
 26882 00004B6A 5E                              POP     SI              ; Get SI input back
 26883 00004B6B 88C4                            MOV     AH,AL           ; Get I/O driver number back
 26884 00004B6D 7301                    	jnc	short DOOPEN    ; Failed
 26885 00004B6F C3                      	retn
 26886                                  	
 26887                                  ;NOTE FALL THROUGH
 26888                                  
 26889                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 26890                                  
 26891                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26892                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 26893                                  
 26894                                  ; DOOPEN
 26895                                  ;----------------------------------------------------------------------------
 26896                                  ;
 26897                                  ; Inputs:
 26898                                  ;       [THISDPB] points to DPB if file
 26899                                  ;       [THISSFT] points to SFT being used
 26900                                  ;       AH = Device ID byte
 26901                                  ;       If FILE
 26902                                  ;           [CURBUF+2]:BX points to start of directory entry
 26903                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26904                                  ;       If device
 26905                                  ;           DS:BX points to start of "fake" directory entry
 26906                                  ;           DS:SI points to dir_first of "fake" directory entry
 26907                                  ;               (has DWORD pointer to device header)
 26908                                  ; Function:
 26909                                  ;       Fill in SFT from dir entry
 26910                                  ; Outputs:
 26911                                  ;       CARRY CLEAR
 26912                                  ;       sf_ref_count and sf_mode fields not altered
 26913                                  ;       sf_flags high byte = 0
 26914                                  ;       sf_flags low byte = AH except
 26915                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 26916                                  ;       sf_attr sf_date sf_time sf_name set from entry
 26917                                  ;       sf_position = 0
 26918                                  ;       If device
 26919                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 26920                                  ;           sf_size = 0
 26921                                  ;       If file
 26922                                  ;           sf_firclus sf_size set from entry
 26923                                  ;           sf_devptr = [THISDPB]
 26924                                  ;           sf_cluspos = 0
 26925                                  ;           sf_lstclus = sf_firclus
 26926                                  ;           sf_dirsec sf_dirpos set
 26927                                  ; DS,SI,BX preserved, others destroyed
 26928                                  ;
 26929                                  ;----------------------------------------------------------------------------
 26930                                  
 26931                                  	;entry	DOOPEN
 26932                                  DOOPEN:
 26933                                  ;	Generate and store attribute
 26934                                  
 26935 00004B70 88E6                            MOV     DH,AH           ; AH to different place
 26936 00004B72 C43E[9E05]                      LES     DI,[THISSFT]
 26937                                  	;add	di,4
 26938 00004B76 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 26939                                  	; 24/09/2023
 26940 00004B79 31C0                    	xor	ax,ax
 26941                                  	;XOR	AL,AL		; Assume it's a device, devices have an
 26942                                  				;   attribute of 0 (for R/O testing etc).
 26943 00004B7B 08F6                            OR      DH,DH           ; See if our assumption good.
 26944 00004B7D 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 26945 00004B7F 8E1E[E405]                      MOV     DS,[CURBUF+2]
 26946                                  	;mov	al,[BX+0Bh]
 26947 00004B83 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 26948                                  				; If file, get attrib from dir entry
 26949                                  DEV_SFT1:
 26950 00004B86 AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 26951                                  
 26952                                  ;	Generate and store flags word
 26953                                  
 26954                                  	; 24/09/2023
 26955                                  	;XOR	AX,AX
 26956                                          ; ah=0
 26957 00004B87 88F0                    	MOV     AL,DH
 26958                                  	;or	al,40h
 26959 00004B89 0C40                            OR      AL,devid_file_clean
 26960 00004B8B AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 26961                                  
 26962                                  ;	Generate and store device pointer
 26963                                  
 26964 00004B8C 1E                              PUSH    DS
 26965                                  	;lds	ax,[bx+1Ah]
 26966 00004B8D C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 26967 00004B90 08F6                            OR      DH,DH
 26968 00004B92 7805                            JS	short DEV_SFT2
 26969                                  
 26970                                  ;hkn; SS override
 26971 00004B94 36C506[8A05]                    LDS     AX,[SS:THISDPB]	; Was file
 26972                                  DEV_SFT2:
 26973 00004B99 AB                              STOSW 			; store offset
 26974 00004B9A 8CD8                            MOV     AX,DS
 26975 00004B9C 1F                              POP     DS
 26976 00004B9D AB                      	STOSW			; store segment
 26977                                  				; ES:DI -> sf_firclus
 26978                                  
 26979                                  ;	Generate pointer to, generate and store first cluster 
 26980                                  ;	(irrelevant for devices)
 26981                                  
 26982 00004B9E 56                              PUSH    SI              ; Save pointer to dir_first
 26983 00004B9F A5                              MOVSW                   ; dir_first -> sf_firclus
 26984                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 26985                                  
 26986                                  ;	Copy time/date of last modification
 26987                                  
 26988                                  	;sub	si,6
 26989 00004BA0 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 26990                                  				; DS:SI->dir_time
 26991 00004BA3 A5                              MOVSW                   ; dir_time -> sf_time
 26992                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 26993 00004BA4 A5                              MOVSW                   ; dir_date -> sf_date
 26994                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 26995                                  
 26996                                  ;	Generate and store file size (0 for devices)
 26997                                  
 26998 00004BA5 AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 26999 00004BA6 AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 27000 00004BA7 89C1                            MOV     CX,AX           ; dir_size_l in CX
 27001 00004BA9 AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 27002 00004BAA 08F6                            OR      DH,DH
 27003 00004BAC 7904                            JNS	short FILE_SFT1
 27004 00004BAE 31C0                            XOR     AX,AX
 27005 00004BB0 89C1                            MOV     CX,AX           ; Devices are open ended
 27006                                  FILE_SFT1:
 27007 00004BB2 91                              XCHG    AX,CX
 27008 00004BB3 AB                              STOSW                   ; Low word of sf_size
 27009 00004BB4 91                              XCHG    AX,CX
 27010 00004BB5 AB                              STOSW                   ; High word of sf_size
 27011                                                                  ; ES:DI -> sf_position
 27012                                  ; Initialize position to 0
 27013                                  
 27014 00004BB6 31C0                            XOR     AX,AX
 27015 00004BB8 AB                              STOSW
 27016 00004BB9 AB                              STOSW                   ; sf_position
 27017                                                                  ; ES:DI -> sf_cluspos
 27018                                  
 27019                                  ; Generate cluster optimizations for files
 27020                                  
 27021 00004BBA 08F6                            OR      DH,DH
 27022 00004BBC 7843                            JS	short DEV_SFT3
 27023 00004BBE AB                              STOSW                   ; sf_cluspos ; 19h
 27024                                  	;mov	ax,[bx+1Ah]
 27025 00004BBF 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 27026                                  	; 19/05/2019
 27027                                  	; MSDOS 3.3
 27028                                  	;STOSW 			; sf_lstclus ; 1Bh
 27029                                  	; MSDOS 6.0
 27030 00004BC2 57                              PUSH	DI              ;AN004; save dirsec offset
 27031                                  	;sub	di,1Bh
 27032 00004BC3 83EF1B                          SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 27033                                  	;mov	[es:di+35h],ax
 27034 00004BC6 26894535                        MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 27035 00004BCA 5F                              POP	DI              ;AN004; restore dirsec offset
 27036                                  
 27037                                  ; DOS 3.3  FastOpen  6/13/86
 27038                                  
 27039 00004BCB 1E                      	PUSH	DS
 27040                                  
 27041                                  ;hkn; SS is DOSDATA
 27042 00004BCC 16                      	push	ss
 27043 00004BCD 1F                      	pop	ds
 27044                                  	;test	byte [FastOpenFlg],4
 27045 00004BCE F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 27046 00004BD3 7411                    	JZ	short Not_FastOpen
 27047                                  
 27048                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 27049 00004BD5 BE[3B0D]                        MOV     SI,FastOpen_Ext_Info
 27050                                  
 27051                                  	;mov	ax,[si+1]
 27052 00004BD8 8B4401                          MOV     AX,[SI+FEI.dirsec]
 27053 00004BDB AB                              STOSW                   ; sf_dirsec
 27054                                  	; MSDOS 6.0
 27055                                  	;mov	ax,[si+3]
 27056 00004BDC 8B4403                          MOV	AX,[SI+FEI.dirsec+2]
 27057                                  				;;; changed for >32mb
 27058 00004BDF AB                              STOSW                   ; sf_dirsec
 27059                                  	; 19/08//2018
 27060 00004BE0 8A04                    	mov	al,[SI]
 27061                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 27062 00004BE2 AA                              STOSB                   ; sf_dirpos
 27063 00004BE3 1F                              POP	DS
 27064                                          ;JMP	short Next_Name
 27065                                  	; 24/09/2023
 27066 00004BE4 EB1E                    	jmp	short FILE_SFT2  ; cf=0 (after 'test' instruction)
 27067                                  
 27068                                  ; DOS 3.3  FastOpen  6/13/86
 27069                                  
 27070                                  Not_FastOpen:
 27071                                          ;POP     DS		; normal path
 27072                                  
 27073                                  ;hkn; SS override
 27074                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 27075                                  	; 16/12/2022
 27076                                  	; 28/07/2019
 27077 00004BE6 8B36[E205]              	mov	si,[CURBUF]
 27078 00004BEA 1F                      	pop	ds
 27079                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27080                                  	;pop	ds
 27081                                  	;mov	si,[ss:CURBUF]
 27082                                  	
 27083                                  	;mov	ax,[si+6]
 27084 00004BEB 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 27085 00004BEE AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 27086                                  	; 19/05/2019        
 27087                                  	; MSDOS 6.0
 27088                                  	;mov	ax,[si+8]
 27089 00004BEF 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 27090 00004BF2 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 27091                                          
 27092 00004BF3 89D8                    	MOV     AX,BX
 27093                                  	;;add	si,16	; MSDOS 3.3	
 27094                                  	;add	si,20	; MSDOS 6.0
 27095 00004BF5 83C614                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 27096 00004BF8 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 27097                                          ;mov	cl,32
 27098 00004BFA B120                    	MOV     CL,dir_entry.size
 27099 00004BFC F6F1                            DIV     CL
 27100 00004BFE AA                              STOSB                   ; sf_dirpos
 27101                                  Next_Name:
 27102 00004BFF EB03                            JMP     SHORT FILE_SFT2
 27103                                  
 27104                                  	; 24/09/2023
 27105                                  	; cf=0 (after 'or' instruction)
 27106                                  DEV_SFT3:
 27107                                  	;add	di,7
 27108 00004C01 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 27109                                  FILE_SFT2:
 27110                                  
 27111                                  ; Copy in the object's name
 27112                                  
 27113 00004C04 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 27114 00004C06 B90B00                          MOV     CX,11
 27115 00004C09 F3A4                            REP     MOVSB           ; sf_name
 27116 00004C0B 5E                              POP     SI              ; recover DS:SI -> dir_first
 27117                                  
 27118                                  ;hkn; SS is DOSDATA
 27119 00004C0C 16                              push	ss
 27120 00004C0D 1F                      	pop	ds
 27121                                  	; 24/09/2023
 27122                                  	; cf=0
 27123                                          ;CLC
 27124 00004C0E C3                              retn
 27125                                  
 27126                                  ;---------------------------------------------------------------------------
 27127                                  ;
 27128                                  ; Procedure Name : FREEENT
 27129                                  ;
 27130                                  ; Inputs:
 27131                                  ;       ES:BP -> DPB
 27132                                  ;       [CURBUF] Set
 27133                                  ;       [CURBUF+2]:BX points to directory entry
 27134                                  ;       [CURBUF+2]:SI points to above dir_first
 27135                                  ; Function:
 27136                                  ;       Free the cluster chain for the entry if present
 27137                                  ; Outputs:
 27138                                  ;       Carry set if error (currently user FAILed to I 24)
 27139                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 27140                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 27141                                  ;---------------------------------------------------------------------------
 27142                                  
 27143                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27144                                  FREEENT:
 27145 00004C0F 1E                              PUSH    DS
 27146 00004C10 C53E[E205]                      LDS     DI,[CURBUF]
 27147 00004C14 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 27148                                  	; 19/05/2019 - Retro DOS v4.0
 27149                                  	; MSDOS 6.0
 27150 00004C16 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 27151                                  ;hkn; SS override
 27152 00004C19 368916[0706]                    MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 27153 00004C1E 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 27154 00004C21 1F                              POP     DS
 27155 00004C22 83F902                  	CMP	CX,2
 27156 00004C25 722E                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 27157                                  	;cmp	cx,[es:bp+0Dh]
 27158 00004C27 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 27159 00004C2B 7728                            JA	short RET1	; Treat like zero length file (firclus mucked)
 27160 00004C2D 29FB                            SUB     BX,DI
 27161 00004C2F 53                              PUSH    BX              ; Save offset
 27162 00004C30 FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27163 00004C34 52                              PUSH    DX              ; Save sector number
 27164 00004C35 89CB                            MOV     BX,CX
 27165 00004C37 E8AC02                          call	RELEASE         ; Free any data allocated
 27166 00004C3A 5A                              POP     DX
 27167 00004C3B 8F06[0706]                      POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27168 00004C3F 7302                            JNC	short GET_BUF_BACK
 27169 00004C41 5B                              POP     BX
 27170                                  freeent_retn:
 27171 00004C42 C3                              retn			; Screw up
 27172                                  
 27173                                  GET_BUF_BACK:
 27174                                  	; 22/09/2023
 27175                                  	;;mov	byte [ALLOWED],18h
 27176                                          ;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 27177                                          ;XOR	AL,AL ; *
 27178                                  	;call	GETBUFFR        ; Get sector back
 27179 00004C43 E8290D                  	call	GETBUFFER ; * ; pre read  
 27180                                  
 27181 00004C46 5B                              POP     BX              ; Get offset back
 27182 00004C47 72F9                            jc	short freeent_retn
 27183 00004C49 E8AFEA                  	call	SET_BUF_AS_DIR
 27184 00004C4C 031E[E205]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 27185 00004C50 89DE                            MOV     SI,BX
 27186                                  	;add	si,1Ah
 27187 00004C52 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 27188                                  RET1:
 27189 00004C55 F8                              CLC
 27190 00004C56 C3                              retn
 27191                                  
 27192                                  ;---------------------------------------------------------------------------
 27193                                  ;
 27194                                  ; Procedure Name : CHECK_VIRT_OPEN
 27195                                  ;
 27196                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 27197                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 27198                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 27199                                  ; flag [VIRTUAL_OPEN].
 27200                                  ; No registers affected (including flags).
 27201                                  ; On input, [THISSFT] points to current SFT.
 27202                                  ;
 27203                                  ;---------------------------------------------------------------------------
 27204                                  
 27205                                  CHECK_VIRT_OPEN:
 27206 00004C57 50                      	PUSH    AX
 27207 00004C58 9F                              lahf                    ; preserve flags
 27208 00004C59 803E[A20A]00                    CMP     byte [VIRTUAL_OPEN],0
 27209 00004C5E 7410                            JZ	short ALL_CLOSED
 27210 00004C60 C606[A20A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 27211 00004C65 06                      	push	es
 27212 00004C66 57                      	push	di
 27213 00004C67 C43E[9E05]                      LES     DI,[THISSFT]
 27214 00004C6B E8ADF9                          call	DEV_CLOSE_SFT
 27215 00004C6E 5F                      	pop	di
 27216 00004C6F 07                      	pop	es
 27217                                  
 27218                                  ALL_CLOSED:
 27219 00004C70 9E                              sahf                    ; restore flags
 27220 00004C71 58                              POP     AX
 27221 00004C72 C3                              retn
 27222                                  
 27223                                  ;============================================================================
 27224                                  ; ROM.ASM, MSDOS 6.0, 1991
 27225                                  ;============================================================================
 27226                                  ; 29/07/2018 - Retro DOS v3.0
 27227                                  ; 20/05/2019 - Retro DOS v4.0
 27228                                  
 27229                                  ;	TITLE	ROM - Miscellaneous routines
 27230                                  ;	NAME	ROM
 27231                                  
 27232                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 27233                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 27234                                  ;
 27235                                  ;	SKPCLP
 27236                                  ;	FNDCLUS
 27237                                  ;	BUFSEC
 27238                                  ;	BUFRD
 27239                                  ;	BUFWRT
 27240                                  ;	NEXTSEC
 27241                                  ;	OPTIMIZE
 27242                                  ;	FIGREC
 27243                                  ;	ALLOCATE
 27244                                  ;	RESTFATBYT
 27245                                  ;	RELEASE
 27246                                  ;	RELBLKS
 27247                                  ;	GETEOF
 27248                                  ;
 27249                                  ;	Modification history:
 27250                                  ;
 27251                                  ;		Created: ARR 30 March 1983
 27252                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 27253                                  
 27254                                  ;Break   <FNDCLUS -- Skip over allocation units>
 27255                                  ;--------------------------------------------------------------------------
 27256                                  ;
 27257                                  ; Procedure Name : FNDCLUS
 27258                                  ;
 27259                                  ; Inputs:
 27260                                  ;       CX = No. of clusters to skip
 27261                                  ;       ES:BP = Base of drive parameters
 27262                                  ;       [THISSFT] point to SFT
 27263                                  ; Outputs:
 27264                                  ;       BX = Last cluster skipped to
 27265                                  ;       CX = No. of clusters remaining (0 unless EOF)
 27266                                  ;       DX = Position of last cluster
 27267                                  ;       Carry set if error (currently user FAILed to I 24)
 27268                                  ; DI destroyed. No other registers affected.
 27269                                  ;--------------------------------------------------------------------------
 27270                                  
 27271                                  ; 20/05/2019 - Retro DOS v4.0
 27272                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 27273                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27274                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 27275                                  
 27276                                  FNDCLUS:
 27277 00004C73 06                      	PUSH	ES
 27278 00004C74 C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 27279                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 27280                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 27281 00004C78 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 27282                                  	;mov	dx,[es:di+19h]
 27283 00004C7C 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 27284 00004C80 09DB                    	OR	BX,BX
 27285 00004C82 7424                    	JZ	short NOCLUS
 27286                                  
 27287 00004C84 29D1                            SUB     CX,DX
 27288 00004C86 7308                            JNB	short FINDIT
 27289                                  
 27290 00004C88 01D1                            ADD     CX,DX
 27291 00004C8A 31D2                            XOR     DX,DX
 27292                                  	;mov	bx,[es:di+0Bh]
 27293 00004C8C 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 27294                                  FINDIT:
 27295 00004C90 07                              POP	ES
 27296 00004C91 E313                    	JCXZ	RET9
 27297                                  
 27298                                  	;entry	SKPCLP
 27299                                  SKPCLP:
 27300 00004C93 E8CE08                  	call	UNPACK
 27301 00004C96 7214                            jc	short fndclus_retn	; retc
 27302                                  
 27303                                  	; 09/09/2018
 27304                                  
 27305                                  	; MSDOS 3.3
 27306                                  	;push	bx
 27307                                  	;mov	bx,di
 27308                                  	;call	IsEOF
 27309                                  	;pop	bx	
 27310                                  	;jae	short RET9
 27311                                  
 27312                                  	; 20/05/2019 - Retro DOS v4.0
 27313                                  
 27314                                  	; MSDOS 6.0
 27315 00004C98 87DF                    	xchg	bx,di
 27316 00004C9A E8B008                  	call	IsEOF
 27317 00004C9D 87DF                    	xchg	bx,di
 27318 00004C9F 7305                    	jae	short RET9
 27319                                  
 27320 00004CA1 87DF                            XCHG    BX,DI
 27321 00004CA3 42                              INC     DX
 27322                                  
 27323 00004CA4 E2ED                    	LOOP	SKPCLP			; RMFS
 27324                                  RET9:	
 27325 00004CA6 F8                      	CLC
 27326 00004CA7 C3                              retn
 27327                                  NOCLUS:
 27328 00004CA8 07                              POP	ES
 27329 00004CA9 41                              INC	CX
 27330 00004CAA 4A                              DEC	DX
 27331 00004CAB F8                              CLC
 27332                                  
 27333                                  fndclus_retn:
 27334 00004CAC C3                              retn
 27335                                  
 27336                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 27337                                  ;--------------------------------------------------------------------------
 27338                                  ;
 27339                                  ; Procedure Name : BUFSEC
 27340                                  ;
 27341                                  ; Inputs:
 27342                                  ;       AH = priority of buffer
 27343                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 27344                                  ;       ES:BP = Base of drive parameters
 27345                                  ;       [CLUSNUM] = Physical cluster number
 27346                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 27347                                  ;       [BYTCNT1] = Size of transfer
 27348                                  ; Function:
 27349                                  ;       Insure specified sector is in buffer, flushing buffer before
 27350                                  ;       read if necessary.
 27351                                  ; Outputs:
 27352                                  ;       ES:DI = Pointer to buffer
 27353                                  ;       SI = Pointer to transfer address
 27354                                  ;       CX = Number of bytes
 27355                                  ;       [NEXTADD] updated
 27356                                  ;       [TRANS] set to indicate a transfer will occur
 27357                                  ;       Carry set if error (user FAILed to I 24)
 27358                                  ;--------------------------------------------------------------------------
 27359                                  
 27360                                  BUFSEC:
 27361 00004CAD 8B16[BC05]                      MOV     DX,[CLUSNUM]
 27362 00004CB1 8A1E[7305]                      MOV     BL,[SECCLUSPOS]
 27363                                  	;mov	byte [ALLOWED],38h
 27364 00004CB5 C606[4B03]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 27365 00004CBA E85001                          CALL    FIGREC
 27366 00004CBD E8B60C                  	call	GETBUFFR
 27367 00004CC0 72EA                            jc	short fndclus_retn
 27368                                  
 27369 00004CC2 C606[7405]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 27370 00004CC7 8B36[B805]                      MOV     SI,[NEXTADD]
 27371 00004CCB 89F7                            MOV     DI,SI
 27372 00004CCD 8B0E[D205]                      MOV     CX,[BYTCNT1]
 27373 00004CD1 01CF                            ADD     DI,CX
 27374 00004CD3 893E[B805]                      MOV     [NEXTADD],DI
 27375 00004CD7 C43E[E205]                      LES     DI,[CURBUF]
 27376                                  	;or	byte [es:di+5],8
 27377 00004CDB 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 27378                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 27379                                  	;lea	di,[di+20] ; MSDOS 6.0
 27380 00004CE0 8D7D14                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 27381 00004CE3 033E[CC05]                      ADD     DI,[BYTSECPOS]
 27382 00004CE7 F8                              CLC
 27383 00004CE8 C3                              retn
 27384                                  
 27385                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 27386                                  
 27387                                  ;---------------------------------------------------------------------------
 27388                                  ;
 27389                                  ; Procedure Name : BUFRD
 27390                                  ;
 27391                                  ; Do a partial sector read via one of the system buffers
 27392                                  ; ES:BP Points to DPB
 27393                                  ; Carry set if error (currently user FAILed to I 24)
 27394                                  ;
 27395                                  ; DS - set to DOSDATA
 27396                                  ;
 27397                                  ;----------------------------------------------------------------------------
 27398                                  
 27399                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27400                                  	; 20/05/2019 - Retro DOS v4.0
 27401                                  BUFRD:
 27402 00004CE9 06                              PUSH	ES
 27403 00004CEA 31C0                            xor	ax, ax			; pre-read sector
 27404 00004CEC E8BEFF                          CALL    BUFSEC
 27405 00004CEF 7303                            JNC	short BUF_OK
 27406                                  
 27407                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 27408 00004CF1 07                              POP	ES
 27409 00004CF2 EB2B                            JMP     SHORT RBUFPLACED
 27410                                  
 27411                                  BUF_OK:
 27412 00004CF4 8CC3                            MOV     BX,ES
 27413 00004CF6 8E06[2E03]                      MOV     ES,[DMAADD+2]
 27414 00004CFA 8EDB                            MOV     DS,BX
 27415 00004CFC 87FE                    	XCHG    DI,SI
 27416 00004CFE D1E9                            SHR     CX,1
 27417                                  ;M039
 27418                                  	; MSDOS 3.3
 27419                                  	;JNC	short EVENRD
 27420                                  	;MOVSB
 27421                                  ;EVENRD:
 27422                                  	;REP     MOVSW
 27423                                  
 27424                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 27425                                  ;       DS:SI-> Source within Buffer.
 27426                                  ;       ES:DI-> Destination within Transfer memory block.
 27427                                  
 27428                                  	; MSDOS 6.0
 27429 00004D00 F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 27430                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27431                                  	;rep	movsb                   ;Copy last byte.
 27432                                  	; 16/12/2022
 27433 00004D02 7301                    	jnc	short EVENRD ; **** 20/05/2019
 27434 00004D04 A4                      	movsb ; ****
 27435                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27436                                  	;adc	cx,0
 27437                                  	;rep	movsb
 27438                                  ;M039
 27439                                  EVENRD: ; ****
 27440 00004D05 07                              POP	ES
 27441                                  ;hkn; SS override
 27442 00004D06 36C53E[E205]                    LDS     DI,[SS:CURBUF]
 27443                                  	;;lea	bx,[di+16]
 27444                                  	;lea	bx,[di+20] ; MSDOS 6.0
 27445 00004D0B 8D5D14                  	LEA     BX,[DI+BUFINSIZ]
 27446 00004D0E 29DE                            SUB     SI,BX                   ; Position in buffer
 27447 00004D10 E8030C                          call	PLACEBUF
 27448                                  	;cmp	si,[es:bp+2]
 27449 00004D13 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 27450 00004D17 7205                            JB	short RBUFPLACEDC	; No, leave buf where it is
 27451                                  ;M039
 27452                                  	; MSDOS 3.3
 27453                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27454                                                                          ;  even though it is MRU.
 27455                                          ; MSDOS 6.0
 27456 00004D19 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 27457                                  ;M039					; chucking even though it is MRU.
 27458                                  
 27459                                  RBUFPLACEDC:
 27460 00004D1E F8                              CLC
 27461                                  RBUFPLACED:
 27462 00004D1F 16                      	push	ss
 27463 00004D20 1F                      	pop	ds
 27464 00004D21 C3                              retn
 27465                                  
 27466                                  ;----------------------------------------------------------------------------
 27467                                  ;
 27468                                  ; Procedure : BUFWRT
 27469                                  ;
 27470                                  ; Do a partial sector write via one of the system buffers
 27471                                  ; ES:BP Points to DPB
 27472                                  ; Carry set if error (currently user FAILed to I 24)
 27473                                  ;
 27474                                  ; DS - set to DOSDATA
 27475                                  ;
 27476                                  ;----------------------------------------------------------------------------
 27477                                  
 27478                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27479                                  	; 20/05/2019 - Retro DOS v4.0
 27480                                  BUFWRT:
 27481                                          ;MOV     AX,[SECPOS]
 27482                                          ; MSDOS 6.0
 27483                                  	;ADD	AX,1            	; Set for next sector
 27484                                          ;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 27485                                          ;ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 27486                                          ; 24/09/2023
 27487 00004D22 FF06[C405]              	inc	word [SECPOS]
 27488 00004D26 7504                    	jnz	short bufw_secpos
 27489 00004D28 FF06[C605]              	inc	word [SECPOS+2]
 27490                                  bufw_secpos:
 27491 00004D2C A1[C605]                	MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 27492 00004D2F 3B06[CA05]                      CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 27493 00004D33 B001                            MOV	AL,1			;F.C. >32mb	;AN000;
 27494 00004D35 770F                            JA	short NOREAD		;F.C. >32mb	;AN000;
 27495 00004D37 720B                            JB	short _doread		;F.C. >32mb	;AN000;
 27496 00004D39 A1[C405]                        MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 27497                                  
 27498                                  	; MSDOS 3.3
 27499                                  	;INC	AX
 27500                                  	;MOV	[SECPOS],AX ; 09/09/2018
 27501                                  
 27502                                  	; 20/05/2019
 27503                                  	; MSDOS 3.3 & MSDOS 6.0
 27504 00004D3C 3B06[C805]                      CMP     AX,[VALSEC]		; Has sector been written before?
 27505 00004D40 B001                            MOV     AL,1
 27506 00004D42 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 27507                                  _doread:
 27508 00004D44 30C0                            XOR     AL,AL
 27509                                  NOREAD:
 27510 00004D46 06                              PUSH	ES
 27511 00004D47 E863FF                          CALL    BUFSEC
 27512 00004D4A 72A5                    	JC	short BUF_IO_FAIL
 27513 00004D4C 8E1E[2E03]                      MOV     DS,[DMAADD+2]
 27514 00004D50 D1E9                            SHR     CX,1
 27515                                  ;M039
 27516                                  	; MSDOS 3.3
 27517                                  	;JNC	short EVENWRT ; 09/09/2018
 27518                                  	;MOVSB
 27519                                  ;EVENWRT:
 27520                                  	;REP	MOVSW
 27521                                  
 27522                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 27523                                  ;       DS:SI-> Source within Transfer memory block.
 27524                                  ;       ES:DI-> Destination within Buffer.
 27525                                  
 27526                                  	; MSDOS 6.0
 27527 00004D52 F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 27528                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27529                                  	;rep	movsb                   ;Copy last byte.
 27530                                  	; 16/12/2022
 27531 00004D54 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 27532 00004D56 A4                      	movsb ; ****
 27533                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27534                                  	;adc	cx,0
 27535                                  	;rep	movsb
 27536                                  ;M039
 27537                                  EVENWRT: ; ****
 27538 00004D57 07                              POP	ES
 27539                                  
 27540                                  ;hkn; SS override
 27541 00004D58 36C51E[E205]                    LDS     BX,[SS:CURBUF]
 27542                                  
 27543                                  	; MSDOS 6.0
 27544 00004D5D F6470540                        TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27545                                  					;LB. if already dirty		  ;AN000;
 27546 00004D61 7507                            JNZ	short yesdirty10	;LB.  don't increment dirty count ;AN000;
 27547 00004D63 E8120E                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27548                                  	
 27549                                  	;or	byte [bx+5],40h
 27550 00004D66 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27551                                  yesdirty10:
 27552                                  	;;lea	si,[bx+16]
 27553                                  	;lea	si,[bx+20] ; MSDOS 6.0
 27554 00004D6A 8D7714                          LEA     SI,[BX+BUFINSIZ]
 27555 00004D6D 29F7                            SUB     DI,SI                   ; Position in buffer
 27556                                  ;M039
 27557                                  	; MSDOS 3.3
 27558                                  	;MOV	SI,DI
 27559                                  	;MOV	DI,BX
 27560                                  	;call	PLACEBUF
 27561                                  	;;cmp	si,[es:bp+2]
 27562                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27563                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 27564                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27565                                                                          ;  even though it is MRU.
 27566                                  	; MSDOS 6.0
 27567                                  	;cmp	di,[es:bp+2]
 27568 00004D6F 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27569 00004D73 7205                            JB	short WBUFPLACED	; No, leave buf where it is
 27570 00004D75 36891E[6D00]                    MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 27571                                  					; chucking even though it is MRU.
 27572                                  ;M039
 27573                                  
 27574                                  WBUFPLACED:
 27575 00004D7A F8                              CLC
 27576 00004D7B 16                      	push	ss
 27577 00004D7C 1F                      	pop	ds
 27578 00004D7D C3                              retn
 27579                                  
 27580                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 27581                                  ;---------------------------------------------------------------------------
 27582                                  ;
 27583                                  ; Procedure Name : NEXTSEC
 27584                                  ;
 27585                                  ; Compute the next sector to read or write
 27586                                  ; ES:BP Points to DPB
 27587                                  ;
 27588                                  ;---------------------------------------------------------------------------
 27589                                  
 27590                                  NEXTSEC:
 27591 00004D7E F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 27592 00004D83 7426                            JZ	short CLRET
 27593                                  
 27594 00004D85 A0[7305]                        MOV     AL,[SECCLUSPOS]
 27595 00004D88 FEC0                            INC     AL
 27596                                  	;cmp	al,[es:bp+4]
 27597 00004D8A 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 27598 00004D8E 7618                            JBE	short SAVPOS
 27599                                  
 27600 00004D90 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 27601 00004D94 E8B607                          call	IsEOF
 27602 00004D97 7314                            JAE	short NONEXT
 27603                                  
 27604 00004D99 E8C807                          call	UNPACK
 27605 00004D9C 720F                            JC	short NONEXT
 27606                                  clusgot:
 27607 00004D9E 893E[BC05]                      MOV     [CLUSNUM],DI
 27608 00004DA2 FF06[BA05]                      INC     word [LASTPOS]
 27609 00004DA6 B000                            MOV     AL,0
 27610                                  SAVPOS:
 27611 00004DA8 A2[7305]                        MOV     [SECCLUSPOS],AL
 27612                                  CLRET:
 27613 00004DAB F8                              CLC
 27614 00004DAC C3                              retn
 27615                                  NONEXT:
 27616 00004DAD F9                              STC
 27617 00004DAE C3                              retn
 27618                                  
 27619                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 27620                                  ;----------------------------------------------------------------------------
 27621                                  ;
 27622                                  ; Procedure Name : OPTIMIZE
 27623                                  ;
 27624                                  ; Inputs:
 27625                                  ;       BX = Physical cluster
 27626                                  ;       CX = No. of records
 27627                                  ;       DL = sector within cluster
 27628                                  ;       ES:BP = Base of drive parameters
 27629                                  ;       [NEXTADD] = transfer address
 27630                                  ; Outputs:
 27631                                  ;       AX = No. of records remaining
 27632                                  ;       BX = Transfer address
 27633                                  ;       CX = No. or records to be transferred
 27634                                  ;       DX = Physical sector address            (LOW)
 27635                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 27636                                  ;       DI = Next cluster
 27637                                  ;       [CLUSNUM] = Last cluster accessed
 27638                                  ;       [NEXTADD] updated
 27639                                  ;       Carry set if error (currently user FAILed to I 24)
 27640                                  ; ES:BP unchanged. Note that segment of transfer not set.
 27641                                  ;
 27642                                  ;---------------------------------------------------------------------------
 27643                                  
 27644                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27645                                  OPTIMIZE:
 27646 00004DAF 52                      	PUSH    DX
 27647 00004DB0 53                              PUSH    BX
 27648                                  	;mov	al,[es:bp+4]
 27649 00004DB1 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 27650 00004DB5 FEC0                            INC     AL              ; Number of sectors per cluster
 27651 00004DB7 88C4                            MOV     AH,AL
 27652 00004DB9 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 27653 00004DBB 89CA                            MOV     DX,CX
 27654                                  	;MOV	CX,0
 27655                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27656                                  	; 16/12/2022
 27657 00004DBD 31C9                    	xor	cx,cx	; sub cx,cx
 27658                                  OPTCLUS:
 27659                                  ; AL has number of sectors available in current cluster
 27660                                  ; AH has number of sectors available in next cluster
 27661                                  ; BX has current physical cluster
 27662                                  ; CX has number of sequential sectors found so far
 27663                                  ; DX has number of sectors left to transfer
 27664                                  ; ES:BP Points to DPB
 27665                                  ; ES:SI has FAT pointer
 27666                                  
 27667                                  do_norm3:
 27668 00004DBF E8A207                          call	UNPACK
 27669 00004DC2 7236                            JC	short OP_ERR
 27670                                  clusgot2:
 27671 00004DC4 00C1                    	ADD	CL,AL
 27672 00004DC6 80D500                          ADC     CH,0
 27673 00004DC9 39D1                            CMP     CX,DX
 27674 00004DCB 7332                            JAE	short BLKDON
 27675 00004DCD 88E0                            MOV     AL,AH
 27676 00004DCF 43                              INC     BX
 27677 00004DD0 39DF                            CMP     DI,BX
 27678 00004DD2 74EB                            JZ	short OPTCLUS
 27679 00004DD4 4B                              DEC     BX
 27680                                  FINCLUS:
 27681 00004DD5 891E[BC05]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 27682 00004DD9 29CA                            SUB     DX,CX           ; Number of sectors still needed
 27683 00004DDB 52                              PUSH    DX
 27684 00004DDC 89C8                            MOV     AX,CX
 27685                                  	;mul	word[ES:BP+2]
 27686 00004DDE 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 27687                                  				; Number of sectors times sector size
 27688 00004DE2 8B36[B805]                      MOV     SI,[NEXTADD]
 27689 00004DE6 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 27690 00004DE8 A3[B805]                        MOV     [NEXTADD],AX
 27691 00004DEB 58                              POP     AX              ; Number of sectors still needed
 27692 00004DEC 5A                              POP     DX              ; Starting cluster
 27693 00004DED 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 27694 00004DEF 011E[BA05]                      ADD     [LASTPOS],BX
 27695 00004DF3 5B                              POP     BX              ; BL = sector position within cluster
 27696 00004DF4 E81600                  	call	FIGREC
 27697 00004DF7 89F3                            MOV     BX,SI
 27698                                  	; 24/09/2023
 27699                                  	; cf=0 (at the return of FIGREC)
 27700                                  	;CLC
 27701 00004DF9 C3                              retn
 27702                                  OP_ERR:
 27703 00004DFA 83C404                          ADD     SP,4
 27704 00004DFD F9                      	STC
 27705 00004DFE C3                              retn
 27706                                  BLKDON:
 27707 00004DFF 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 27708 00004E01 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 27709 00004E03 FECC                            DEC     AH              ; Adjust to mean position within cluster
 27710 00004E05 8826[7305]                      MOV     [SECCLUSPOS],AH
 27711 00004E09 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 27712 00004E0B EBC8                            JMP     SHORT FINCLUS
 27713                                  
 27714                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 27715                                  ;---------------------------------------------------------------------------
 27716                                  ;
 27717                                  ; Procedure Name : FIGREC
 27718                                  ;
 27719                                  ; Inputs:
 27720                                  ;       DX = Physical cluster number
 27721                                  ;       BL = Sector position within cluster
 27722                                  ;       ES:BP = Base of drive parameters
 27723                                  ; Outputs:
 27724                                  ;       DX = physical sector number           (LOW)
 27725                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 27726                                  ; No other registers affected.
 27727                                  ;
 27728                                  ;---------------------------------------------------------------------------
 27729                                  
 27730                                  	; 10/06/2019
 27731                                  	; 20/05/2019 - Retro DOS v4.0
 27732                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 27733                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27734                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)	
 27735                                  FIGREC:
 27736 00004E0D 51                              PUSH    CX
 27737                                  	;mov	cl,[es:bp+5]
 27738 00004E0E 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 27739 00004E12 4A                              DEC     DX
 27740 00004E13 4A                              DEC     DX
 27741                                  
 27742                                  	; MSDOS 3.3
 27743                                  	;SHL	DX,CL
 27744                                  
 27745                                  ;hkn; SS override HIGH_SECTOR
 27746                                  	; MSDOS 6.0
 27747 00004E14 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 27748                                  	; 24/09/2023
 27749 00004E1B 30ED                    	xor	ch,ch				;F.C. >32mb
 27750 00004E1D 08C9                    	OR	CL,CL				;F.C. >32mb
 27751 00004E1F 740C                    	JZ	short noshift			;F.C. >32mb
 27752 00004E21 30ED                    	XOR	CH,CH				;F.C. >32mb
 27753                                  rotleft:					;F.C. >32mb
 27754 00004E23 F8                      	CLC					;F.C. >32mb
 27755 00004E24 D1D2                    	RCL	DX,1				;F.C. >32mb
 27756                                  	; 10/06/2019
 27757 00004E26 36D116[0706]            	RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 27758 00004E2B E2F6                    	LOOP	rotleft				;F.C. >32mb
 27759                                  noshift:
 27760                                  	; MSDOS 3.3 & MSDOS 6.0
 27761 00004E2D 08DA                            OR      DL,BL
 27762                                  	;add	dx,[es:bp+0Bh]
 27763 00004E2F 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 27764                                  	; MSDOS 6.0
 27765                                  	; 10/06/2019
 27766                                  	;ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 27767                                  	; 24/09/2023
 27768                                  	; cx=0
 27769 00004E33 36110E[0706]            	ADC	word [ss:HIGH_SECTOR],cx ; 0
 27770                                  
 27771                                  	; MSDOS 3.3 & MSDOS 6.0
 27772 00004E38 59                      	POP     CX
 27773                                  figrec_retn:
 27774 00004E39 C3                              retn
 27775                                  
 27776                                  ; 20/05/2019 - Retro DOS v4.0
 27777                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 27778                                  
 27779                                  ; 30/07/2018 - Retro DOS v3.0
 27780                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 27781                                  
 27782                                  ;Break   <ALLOCATE -- Assign disk space>
 27783                                  ;---------------------------------------------------------------------------
 27784                                  ;
 27785                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 27786                                  ;
 27787                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 27788                                  ;   FAT-chained onto the end of the existing file.
 27789                                  ;
 27790                                  ;   The DPB contains the cluster # of the last free cluster allocated
 27791                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 27792                                  ;   numbered clusters, looking for the necessary free blocks.
 27793                                  ;
 27794                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 27795                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 27796                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 27797                                  ;
 27798                                  ;       If we get to the end of the disk without satisfaction:
 27799                                  ;
 27800                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 27801                                  ;               return (insufficient_disk_space)
 27802                                  ;           ELSE
 27803                                  ;               dpb_next_free = 2; start scan over from the beginning.
 27804                                  ;
 27805                                  ;   Note that there is no multitasking interlock. There is no race when
 27806                                  ;   examining the entrys in an in-core FAT block since there will be no
 27807                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 27808                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 27809                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 27810                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 27811                                  ;   satisfied. We can't allow another activation to think this cluster is
 27812                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 27813                                  ;   allocated.
 27814                                  ;
 27815                                  ;   Note that when we run out of space this algorithem will scan from
 27816                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 27817                                  ;   redundantly scanning the later part of the disk. This only happens when
 27818                                  ;   we run out of space, so sue me.
 27819                                  ;
 27820                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27821                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27822                                  ;                                                                          ;
 27823                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 27824                                  ;   explanation:
 27825                                  ;
 27826                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 27827                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 27828                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 27829                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 27830                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 27831                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 27832                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 27833                                  ;   the
 27834                                  ;           LOOP   findfre         ; alloc more if needed
 27835                                  ;   instruction when the first cluster is allocated to the nul file. The
 27836                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 27837                                  ;
 27838                                  ;   This method is obviously useless (because it is non-reentrant) for
 27839                                  ;   multitasking, and will have to be changed. Storing the required value on
 27840                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 27841                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 27842                                  ;   problems with INT 24 well.
 27843                                  ;
 27844                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27845                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27846                                  ;                                                                          ;
 27847                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 27848                                  ;               CX = No. of clusters to allocate
 27849                                  ;               ES:BP = Base of drive parameters
 27850                                  ;               [THISSFT] = Points to SFT
 27851                                  ;
 27852                                  ;       EXIT    'C' set if insufficient space
 27853                                  ;                 [FAILERR] can be tested to see the reason for failure
 27854                                  ;                 CX = max. no. of clusters that could be added to file
 27855                                  ;               'C' clear if space allocated
 27856                                  ;                 BX = First cluster allocated
 27857                                  ;                 FAT is fully updated
 27858                                  ;                 sf_FIRCLUS field of SFT set if file was null
 27859                                  ;
 27860                                  ;       USES    ALL but SI, BP
 27861                                  
 27862                                  ;callmagic  proc near
 27863                                  ;       push    ds                             ;push segment of routine 
 27864                                  ;       push    Offset MagicPatch              ;push offset for routine
 27865                                  ;       retf                                   ;simulate jmp far
 27866                                  ;                                              ;far return address is on
 27867                                  ;                                              ;stack, so far return from
 27868                                  ;                                              ;call will return this routine
 27869                                  ;callmagic  endp
 27870                                  
 27871                                  ALLOCATE:
 27872                                  	; 10/09/2018
 27873                                  ;BEGIN MAGICDRV MODIFICATIONS
 27874                                  ;
 27875                                  ;7/5/92 scottq
 27876                                  ;
 27877                                  ;This is the disk compression patch location which allows
 27878                                  ;the disk compression software to fail allocations if the
 27879                                  ;FAT would allows allocation, but the free space for compressed
 27880                                  ;data would not.
 27881                                  ;        
 27882                                  ;;;	call    far ptr MAGICPATCH
 27883                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 27884                                  ;;; but we do know the segment and offset of the routine
 27885                                  ;;; so simulate a far call to dosdata:magicpatch
 27886                                  ;;; note dosassume above, so DS -> dosdata
 27887                                  
 27888                                  	; MSDOS 6.0
 27889                                          ;clc				;clear carry so we fall through
 27890                                  	;				;if no patch is present
 27891                                  	;push	cs			;push segment for far return
 27892                                          ;call	callmagic		;this is a near call
 27893                                          ;jnc	short Regular_Allocate_Path
 27894                                  	;jmp	Disk_Full_Return
 27895                                  
 27896                                  ;Regular_Allocate_Path:
 27897                                  	; 20/05/2019 - Retro DOS v4.0
 27898                                  ;END MAGICDRV MODIFICATIONS
 27899                                  
 27900                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27901                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 27902                                  
 27903 00004E3A 53                              PUSH    BX                      ; save (bx)
 27904 00004E3B 31DB                            XOR     BX,BX
 27905 00004E3D E82407                  	call	UNPACK
 27906 00004E40 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 27907 00004E44 5B                              POP     BX
 27908 00004E45 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 27909                                  
 27910 00004E47 51                              PUSH    CX
 27911 00004E48 53                              PUSH    BX
 27912                                  
 27913 00004E49 89DA                            MOV     DX,BX
 27914                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 27915                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 27916 00004E4B 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 27917 00004E4F 83FB02                          cmp     bx,2
 27918 00004E52 7709                            ja	short FINDFRE
 27919                                  
 27920                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 27921                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 27922                                  
 27923                                  ads1:
 27924                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 27925                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 27926 00004E54 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 27927 00004E5A BB0100                          mov     bx,1                    ; Counter next instruction so first
 27928                                                                          ;       cluster examined is 2
 27929                                  
 27930                                  ;   Scanning both forwards and backwards for a free cluster
 27931                                  ;
 27932                                  ;       (BX) = forwards scan pointer
 27933                                  ;       (CX) = clusters remaining to be allocated
 27934                                  ;       (DX) = current last cluster in file
 27935                                  ;       (TOS) = last cluster of file
 27936                                  
 27937                                  FINDFRE:
 27938 00004E5D 43                              INC     BX
 27939                                  	;cmp	bx,[es:bp+0Dh]
 27940 00004E5E 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 27941 00004E62 7757                    	ja	short ads7	; at end of disk
 27942 00004E64 E8FD06                          call	UNPACK          ; check out this cluster
 27943 00004E67 722F                            jc	short ads4	; FAT error             [INTERR?]
 27944 00004E69 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 27945                                  
 27946                                  ;   Have found a free cluster. Chain it to the file
 27947                                  ;
 27948                                  ;       (BX) = found free cluster #
 27949                                  ;       (DX) = current last cluster in file
 27950                                  
 27951                                  	;;mov	[es:bp+1Ch],bx
 27952                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 27953 00004E6B 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 27954 00004E6F 92                              xchg    ax,dx           ; save (dx) in ax
 27955 00004E70 BA0100                          mov     dx,1            ; mark this free guy as "1"
 27956 00004E73 E84207                  	call	PACK            ; set special "temporary" mark
 27957 00004E76 7220                            jc	short ads4	; FAT error             [INTERR?]
 27958                                  	;;cmp	word [es:bp+1Eh],-1
 27959                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 27960 00004E78 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 27961 00004E7D 7404                            JZ	short NO_ALLOC	; No
 27962                                  	;;dec	word [es:bp+1Eh]
 27963                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 27964 00004E7F 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 27965                                  NO_ALLOC:
 27966 00004E83 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 27967 00004E84 87DA                            XCHG    BX,DX
 27968 00004E86 89D0                            MOV     AX,DX
 27969 00004E88 E82D07                  	call	PACK            ; link free cluster onto file
 27970                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 27971                                                                  ;    cluster 0 with FIRCLUS value.
 27972 00004E8B 720B                            jc	short ads4	; FAT error [INTERR?]
 27973 00004E8D 93                              xchg    BX,AX           ; (BX) = last one we looked at
 27974 00004E8E 89DA                            mov     dx,bx           ; (dx) = current end of file
 27975 00004E90 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 27976                                  
 27977                                  ;   We've successfully extended the file. Clean up and exit
 27978                                  ;
 27979                                  ;       (BX) = last cluster in file
 27980                                  
 27981 00004E92 BAFFFF                          MOV     DX,0FFFFH
 27982 00004E95 E82007                  	call	PACK            ; mark last cluster EOF
 27983                                  
 27984                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 27985                                  ;   2 whole bytes. Hope its worth it...
 27986                                  ;
 27987                                  ;       'C' set if error
 27988                                  ;       calling (BX) and (CX) pushed on stack
 27989                                  
 27990                                  ads4:   
 27991 00004E98 5B                      	POP     BX
 27992 00004E99 59                              POP     CX              ; Don't need this stuff since we're successful
 27993 00004E9A 729D                            jc	short figrec_retn
 27994 00004E9C E8C506                          call	UNPACK          ; Get first cluster allocated for return
 27995                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 27996 00004E9F 7298                            jc	short figrec_retn
 27997 00004EA1 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 27998 00004EA4 7293                            jc	short figrec_retn
 27999 00004EA6 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 28000 00004EA8 09FF                            OR      DI,DI           ; clear 'C'
 28001 00004EAA 758D                    	jnz	short figrec_retn ; we were extending an existing file
 28002                                  
 28003                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 28004                                  ;   info
 28005                                  dofastk:
 28006                                  	; 20/05/2019
 28007                                  	; MSDOS 6.0
 28008                                  	;push	dx ; * MSDOS 6.0
 28009                                  	;;mov	dl,[es:bp+0]
 28010                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 28011                                  	;mov	dl,[es:bp]
 28012                                  
 28013                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28014                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 28015                                  	
 28016                                  	; 16/12/2022
 28017                                  	;push	dx ; *
 28018                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 28019                                  	; 15/12/2022
 28020                                  	;mov	dl,[es:bp]
 28021                                  	
 28022                                  	; MSDOS 3.3 & MSDOS 6.0
 28023 00004EAC 06                      	PUSH	ES
 28024 00004EAD C43E[9E05]              	LES     DI,[THISSFT]
 28025                                  	;mov	[es:di+0Bh],bx
 28026 00004EB1 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 28027                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 28028                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 28029 00004EB5 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 28030 00004EB9 07                      	POP	ES
 28031                                  	;retn
 28032                                  
 28033                                  	;pop	dx ; * MSDOS 6.0
 28034                                  
 28035                                  	; 16/12/2022
 28036                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28037                                  	;pop	dx ; *
 28038                                  
 28039 00004EBA C3                      	retn	
 28040                                  
 28041                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 28042                                  ;   of the disk...
 28043                                  
 28044                                  ads7:   
 28045 00004EBB 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 28046 00004EC0 7592                    	jnz	short ads1	; start scan from front of disk
 28047                                  
 28048                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 28049                                  ;   the space back to the free list and tell the caller how much he could have
 28050                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 28051                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 28052                                  ;
 28053                                  ;       (CX) = clusters remaining to be allocated
 28054                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 28055                                  ;       (TOS+1) = # of clusters wanted to allocate
 28056                                  
 28057 00004EC2 5B                              POP     BX              ; (BX) = last cluster of file
 28058 00004EC3 BAFFFF                          MOV     DX,0FFFFH
 28059 00004EC6 E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 28060 00004EC9 58                              POP     AX              ; No. of clusters requested
 28061                                                                  ; Don't "retc". We are setting Carry anyway,
 28062                                                                  ;   Alloc failed, so proceed with return CX
 28063                                                                  ;   setup.
 28064 00004ECA 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 28065 00004ECC E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 28066                                                                  ;   Alloc failed.
 28067                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 28068                                          ; MSDOS 6.0
 28069 00004ECF C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 28070 00004ED4 F9                              STC
 28071 00004ED5 C3                              retn
 28072                                  
 28073                                  ;-----------------------------------------------------------------------
 28074                                  ;
 28075                                  ; Procedure Name : RESTFATBYT
 28076                                  ;
 28077                                  ; SEE ALLOCATE CAVEAT
 28078                                  ;       Carry set if error (currently user FAILed to I 24)
 28079                                  ;-----------------------------------------------------------------------
 28080                                  
 28081                                  RESTFATBYT:
 28082 00004ED6 53                              PUSH    BX
 28083 00004ED7 52                              PUSH    DX
 28084 00004ED8 57                              PUSH    DI
 28085 00004ED9 31DB                            XOR     BX,BX
 28086 00004EDB 8B16[9605]                      MOV     DX,[FATBYT]
 28087 00004EDF E8D606                  	call	PACK
 28088 00004EE2 5F                              POP     DI
 28089 00004EE3 5A                              POP     DX
 28090 00004EE4 5B                              POP     BX
 28091                                  ; 16/12/2022
 28092                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28093                                  ;RELEASE_flush:
 28094 00004EE5 C3                      	retn
 28095                                  
 28096                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 28097                                  ;---------------------------------------------------------------------------
 28098                                  ;
 28099                                  ; Procedure Name : RELEASE
 28100                                  ;
 28101                                  ; Inputs:
 28102                                  ;       BX = Cluster in file
 28103                                  ;       ES:BP = Base of drive parameters
 28104                                  ; Function:
 28105                                  ;       Frees cluster chain starting with [BX]
 28106                                  ;       Carry set if error (currently user FAILed to I 24)
 28107                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 28108                                  ;
 28109                                  ;-----------------------------------------------------------------------------
 28110                                  
 28111                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28112                                  	; 20/05/2019 - Retro DOS v4.0
 28113                                  RELEASE:
 28114 00004EE6 31D2                            XOR     DX,DX
 28115                                  
 28116                                  	;entry	RELBLKS
 28117                                  RELBLKS:
 28118                                  
 28119                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 28120                                  ;   and free the rest in the chain.
 28121                                  
 28122 00004EE8 E87906                  	call	UNPACK
 28123 00004EEB 7224                    	jc	short RELEASE_flush
 28124 00004EED 7422                    	jz	short RELEASE_flush
 28125 00004EEF 89F8                            MOV     AX,DI
 28126 00004EF1 52                              PUSH    DX
 28127 00004EF2 E8C306                  	call	PACK
 28128 00004EF5 5A                              POP     DX
 28129 00004EF6 7219                    	jc	short RELEASE_flush
 28130 00004EF8 09D2                            OR      DX,DX
 28131 00004EFA 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 28132                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 28133                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28134 00004EFC 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28135 00004F01 7404                            JZ	short NO_DEALLOC	; No
 28136 00004F03 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 28137                                  NO_DEALLOC:
 28138 00004F07 89C3                            MOV     BX,AX
 28139 00004F09 48                              dec     ax              ; check for "1"
 28140 00004F0A 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 28141 00004F0C E83E06                  	call	IsEOF
 28142 00004F0F 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 28143                                  
 28144                                  	; 16/12/2022
 28145                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28146                                  ;%if 0
 28147                                  RELEASE_flush:
 28148                                  	; MSDOS 6.0
 28149 00004F11 268A4600                	mov	al,[es:bp]
 28150                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 28151 00004F15 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 28152 00004F16 51                      	push	cx		;  them to be preserved.
 28153 00004F17 06                      	push	es
 28154 00004F18 55                      	push	bp
 28155 00004F19 E8570B                  	call	FLUSHBUF	; commit buffers for this drive
 28156 00004F1C 5D                      	pop	bp
 28157 00004F1D 07                      	pop	es
 28158 00004F1E 59                      	pop	cx
 28159 00004F1F 5E                      	pop	si
 28160                                  ;%endif
 28161                                  RET12:
 28162 00004F20 C3                      	retn
 28163                                  
 28164                                  ;Break	<GETEOF -- Find the end of a file>
 28165                                  ;------------------------------------------------------------------------
 28166                                  ;
 28167                                  ; Procedure Name : GETEOF
 28168                                  ;
 28169                                  ; Inputs:
 28170                                  ;       ES:BP Points to DPB
 28171                                  ;       BX = Cluster in a file
 28172                                  ;       DS = CS
 28173                                  ; Outputs:
 28174                                  ;       BX = Last cluster in the file
 28175                                  ;       Carry set if error (currently user FAILed to I 24)
 28176                                  ; DI destroyed. No other registers affected.
 28177                                  ;
 28178                                  ;--------------------------------------------------------------------------
 28179                                  
 28180                                  GETEOF:
 28181 00004F21 E84006                  	call	UNPACK
 28182 00004F24 72FA                            jc	short RET12
 28183 00004F26 53                              PUSH    BX
 28184 00004F27 89FB                            MOV     BX,DI
 28185 00004F29 E82106                  	call	IsEOF
 28186 00004F2C 5B                              POP     BX
 28187 00004F2D 73F1                            JAE     short RET12
 28188 00004F2F 89FB                            MOV     BX,DI
 28189 00004F31 EBEE                            JMP     short GETEOF
 28190                                  
 28191                                  ;============================================================================
 28192                                  ; FCB.ASM, MSDOS 6.0, 1991
 28193                                  ;============================================================================
 28194                                  ; 30/07/2018 - Retro DOS v3.0
 28195                                  ; 20/05/2019 - Retro DOS v4.0
 28196                                  
 28197                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 28198                                  ;	NAME	FCB
 28199                                  
 28200                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 28201                                  ;		  filename characters
 28202                                  ;
 28203                                  ;	MakeFcb
 28204                                  ;	NameTrans
 28205                                  ;	PATHCHRCMP
 28206                                  ;	GetLet
 28207                                  ;	UCase
 28208                                  ;	GetLet3
 28209                                  ;	GetCharType
 28210                                  ;	TESTKANJ
 28211                                  ;	NORMSCAN
 28212                                  ;	DELIM
 28213                                  ;
 28214                                  ;	Revision history:
 28215                                  ;
 28216                                  ;		A000  version 4.00  Jan. 1988
 28217                                  ;	
 28218                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 28219                                  
 28220                                  TableLook	EQU	-1
 28221                                  
 28222                                  SCANSEPARATOR	EQU	1
 28223                                  DRVBIT		EQU	2
 28224                                  NAMBIT		EQU	4
 28225                                  EXTBIT		EQU	8
 28226                                  
 28227                                  ;----------------------------------------------------------------------------
 28228                                  ;
 28229                                  ; Procedure : MakeFcb
 28230                                  ;
 28231                                  ;----------------------------------------------------------------------------
 28232                                  
 28233                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28234                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 28235                                  MAKEFCB:
 28236                                  ;hkn; SS override
 28237 00004F33 36C606[4E03]00          	MOV	BYTE [SS:SpaceFlag],0
 28238 00004F39 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 28239                                  	;test	al,2
 28240 00004F3B A802                    	test	AL,DRVBIT	; Use current drive field if default?
 28241 00004F3D 7504                    	JNZ	short DEFDRV
 28242 00004F3F 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 28243                                  DEFDRV:
 28244 00004F43 47                      	INC	DI
 28245 00004F44 B90800                  	MOV	CX,8
 28246                                  	;test	al,4
 28247 00004F47 A804                    	test	AL,NAMBIT	; Use current name fields as default?
 28248 00004F49 93                      	XCHG	AX,BX		; Save bits in BX
 28249 00004F4A B020                    	MOV	AL," "
 28250 00004F4C 7404                    	JZ	short FILLB	; If not, go fill with blanks
 28251 00004F4E 01CF                    	ADD	DI,CX
 28252 00004F50 31C9                    	XOR	CX,CX		; Don't fill any
 28253                                  FILLB:
 28254 00004F52 F3AA                    	REP	STOSB
 28255 00004F54 B103                    	MOV	CL,3
 28256 00004F56 F6C308                  	test	BL,EXTBIT	; Use current extension as default
 28257 00004F59 7404                    	JZ	short FILLB2
 28258 00004F5B 01CF                    	ADD	DI,CX
 28259 00004F5D 31C9                    	XOR	CX,CX
 28260                                  FILLB2:
 28261 00004F5F F3AA                    	REP	STOSB
 28262 00004F61 91                      	XCHG	AX,CX		; Put zero in AX
 28263 00004F62 AB                      	STOSW
 28264 00004F63 AB                      	STOSW			; Initialize two words after to zero
 28265 00004F64 83EF10                  	SUB	DI,16		; Point back at start
 28266                                  	;test	bl,1
 28267 00004F67 F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 28268 00004F6A 7409                    	JZ	short SKPSPC
 28269 00004F6C E88800                  	CALL	SCANB		; Peel off blanks and tabs
 28270 00004F6F E82201                  	CALL	DELIM		; Is it a one-time-only delimiter?
 28271 00004F72 7504                    	JNZ	short NOSCAN
 28272 00004F74 46                      	INC	SI		; Skip over the delimiter
 28273                                  SKPSPC:
 28274 00004F75 E87F00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 28275                                  NOSCAN:
 28276 00004F78 E8F000                  	CALL	GETLET
 28277 00004F7B 761E                    	JBE	short NODRV	; Quit if termination character
 28278 00004F7D 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 28279 00004F80 7519                    	JNZ	short NODRV
 28280 00004F82 46                      	INC	SI		; Skip over colon
 28281 00004F83 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 28282 00004F85 760F                    	JBE	short BADDRV	; Drive letter out of range
 28283                                  
 28284 00004F87 50                      	PUSH	AX
 28285 00004F88 E8161B                  	call	GetVisDrv
 28286 00004F8B 58                      	POP	AX
 28287 00004F8C 730A                    	JNC	short HAVDRV
 28288                                  
 28289                                  	; 20/05/2019 - Retro DOS v4.0
 28290                                  	; MSDOS 6.0
 28291                                  ;hkn; SS override
 28292 00004F8E 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 28293                                  					; if not FAT drive ;AN000;
 28294 00004F94 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 28295                                  BADDRV:
 28296 00004F96 B2FF                    	MOV	DL,-1
 28297                                  HAVDRV:
 28298 00004F98 AA                      	STOSB			; Put drive specifier in first byte
 28299 00004F99 46                      	INC	SI
 28300 00004F9A 4F                      	DEC	DI		; Counteract next two instructions
 28301                                  NODRV:
 28302 00004F9B 4E                      	DEC	SI		; Back up
 28303 00004F9C 47                      	INC	DI		; Skip drive byte
 28304                                  
 28305                                  	;entry	NORMSCAN
 28306                                  NORMSCAN:
 28307 00004F9D B90800                  	MOV	CX,8
 28308 00004FA0 E82200                  	CALL	GETWORD 	; Get 8-letter file name
 28309 00004FA3 803C2E                  	CMP	BYTE [SI],"."
 28310 00004FA6 7510                    	JNZ	short NODOT
 28311 00004FA8 46                      	INC	SI		; Skip over dot if present
 28312                                  
 28313                                  	; 24/09/2023
 28314                                  	;mov	cx,3
 28315 00004FA9 B103                    	mov	cl,3	; ch=0
 28316                                  
 28317                                  	; MSDOS 6.0
 28318                                  ;hkn; SS override
 28319                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 28320                                  	; 10/06/2019
 28321 00004FAB 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 28322 00004FB1 7402                    	JZ	short VOLOK				;AN000;
 28323 00004FB3 A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 28324                                  	; 24/09/2023
 28325                                  	;MOV	CX,2					;AN000;
 28326 00004FB4 49                      	dec	cx  ; cx=2
 28327                                  	;JMP	SHORT contvol				;AN000;
 28328                                  VOLOK:
 28329                                  	;MOV	CX,3		; Get 3-letter extension
 28330                                  contvol:
 28331 00004FB5 E81300                  	CALL	MUSTGETWORD
 28332                                  NODOT:
 28333 00004FB8 88D0                    	MOV	AL,DL
 28334                                  
 28335                                  	; MSDOS 6.0
 28336                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 28337                                  	; 18/12/2022
 28338 00004FBA 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 28339                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 28340                                  
 28341 00004FC0 C3                      	retn
 28342                                  
 28343                                  NONAM:
 28344 00004FC1 01CF                    	ADD	DI,CX
 28345 00004FC3 4E                      	DEC	SI
 28346 00004FC4 C3                      	retn
 28347                                  
 28348                                  GETWORD:
 28349 00004FC5 E8A300                  	CALL	GETLET		
 28350 00004FC8 76F7                    	JBE	short NONAM	; Exit if invalid character
 28351 00004FCA 4E                      	DEC	SI
 28352                                  
 28353                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 28354                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 28355                                  
 28356                                  MUSTGETWORD:
 28357 00004FCB E89D00                  	CALL	GETLET
 28358                                  
 28359                                  ;	If spaceFlag is set then we allow spaces in a pathname
 28360                                  
 28361                                  ;IF NOT TABLELOOK
 28362                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 28363                                  ;ENDIF
 28364 00004FCE 750C                    	JNZ	short MustCheckCX
 28365                                  
 28366                                  ;hkn; SS override
 28367 00004FD0 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 28368 00004FD6 7419                    	JZ	short FILLNAM
 28369 00004FD8 3C20                    	CMP	AL," "
 28370 00004FDA 7515                    	JNZ	short FILLNAM
 28371                                  
 28372                                  MustCheckCX:
 28373 00004FDC E3ED                    	JCXZ	MUSTGETWORD
 28374 00004FDE 49                      	DEC	CX
 28375 00004FDF 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 28376 00004FE1 7504                    	JNZ	short NOSTAR
 28377 00004FE3 B03F                    	MOV	AL,"?"
 28378 00004FE5 F3AA                    	REP	STOSB
 28379                                  NOSTAR:
 28380 00004FE7 AA                      	STOSB
 28381 00004FE8 3C3F                    	CMP	AL,"?"
 28382 00004FEA 75DF                    	JNZ	short MUSTGETWORD
 28383 00004FEC 80CA01                  	OR	DL,1		; Flag ambiguous file name
 28384 00004FEF EBDA                    	JMP	short MUSTGETWORD
 28385                                  FILLNAM:
 28386 00004FF1 B020                    	MOV	AL," "
 28387 00004FF3 F3AA                    	REP	STOSB
 28388 00004FF5 4E                      	DEC	SI
 28389 00004FF6 C3                      	retn
 28390                                  
 28391                                  SCANB:
 28392 00004FF7 AC                      	LODSB
 28393 00004FF8 E8A100                  	CALL	SPCHK
 28394 00004FFB 74FA                    	JZ	short SCANB
 28395 00004FFD 4E                      	DEC	SI
 28396                                  scanb_retn:
 28397 00004FFE C3                      	retn
 28398                                  
 28399                                  ;----------------------------------------------------------------------------
 28400                                  ;
 28401                                  ; Procedure Name : NameTrans
 28402                                  ;
 28403                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 28404                                  ; allow spaces in pathnames
 28405                                  ;
 28406                                  ;   Inputs:	DS:SI points to start of path element
 28407                                  ;   Outputs:	Name1 has unpacked name, uppercased
 28408                                  ;		ES = DOSGroup
 28409                                  ;		DS:SI advanced after name
 28410                                  ;   Registers modified: DI,AX,DX,CX
 28411                                  ;
 28412                                  ;----------------------------------------------------------------------------
 28413                                  
 28414                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28415                                  	; 20/05/2019 - Retro DOS v4.0
 28416                                  NameTrans:
 28417                                  ;hkn; SS override
 28418 00004FFF 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 28419 00005005 16                      	push	ss
 28420 00005006 07                      	pop	es
 28421                                  
 28422                                  ;hkn; NAME1 is in DOSDATA
 28423 00005007 BF[4B05]                	MOV	DI,NAME1
 28424 0000500A 57                      	PUSH	DI
 28425 0000500B B82020                  	MOV	AX,'  '
 28426 0000500E B90500                  	MOV	CX,5
 28427 00005011 AA                      	STOSB
 28428 00005012 F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 28429 00005014 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 28430 00005016 88C2                    	MOV	DL,AL
 28431 00005018 AA                      	STOSB
 28432 00005019 5F                      	POP	DI
 28433                                  
 28434 0000501A E880FF                  	CALL	NORMSCAN
 28435                                  
 28436                                  ;hkn; SS override for NAME1
 28437 0000501D 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 28438 00005023 75D9                    	jnz	short scanb_retn
 28439 00005025 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 28440 0000502B C3                      	retn
 28441                                  
 28442                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 28443                                  ;============================================================================
 28444                                  
 28445                                  ; 20/05/2019 - Retro DOS v4.0
 28446                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28447                                  
 28448                                  ;If TableLook
 28449                                  
 28450                                  ;hkn; Table	SEGMENT
 28451                                  ;	PUBLIC	CharType
 28452                                  ;----------------------------------------------------------------------------
 28453                                  
 28454                                  ; Character type table for file name scanning
 28455                                  ; Table provides a mapping of characters to validity bits.
 28456                                  ; Four bits are provided for each character. Values 7Dh and above
 28457                                  ; have all bits set, so that part of the table is chopped off, and
 28458                                  ; the translation routine is responsible for screening these values.
 28459                                  ; The bit values are defined in DOSSYM.INC
 28460                                  
 28461                                  ;	      ; ^A and NUL
 28462                                  ;CharType:
 28463                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28464                                  ;	      ; ^C and ^B
 28465                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28466                                  ;	      ; ^E and ^D
 28467                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28468                                  ;	      ; ^G and ^F
 28469                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28470                                  ;	      ; TAB and BS
 28471                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28472                                  ;	      ; ^K and ^J
 28473                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28474                                  ;	      ; ^M and ^L
 28475                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28476                                  ;	      ; ^O and ^N
 28477                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28478                                  ;	      ; ^Q and ^P
 28479                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28480                                  ;	      ; ^S and ^R
 28481                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28482                                  ;	      ; ^U and ^T
 28483                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28484                                  ;	      ; ^W and ^V
 28485                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28486                                  ;	      ; ^Y and ^X
 28487                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28488                                  ;	      ; ESC and ^Z
 28489                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28490                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28492                                  ;	      ; ^_ and ^^
 28493                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28494                                  ;	      ; ! and SPACE
 28495                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 28496                                  ;	      ; # and "
 28497                                  ;	 db   LOW (NOT FFCB+FCHK)
 28498                                  ;	      ; $ - )
 28499                                  ;	 db   3 dup (0FFh)
 28500                                  ;	      ; + and *
 28501                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 28502                                  ;	      ; - and '
 28503                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 28504                                  ;	      ; / and .
 28505                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 28506                                  ;	      ; 0 - 9
 28507                                  ;	 db   5 dup (0FFh)
 28508                                  ;	      ; ; and :
 28509                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28510                                  ;	      ; = and <
 28511                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28512                                  ;	      ; ? and >
 28513                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28514                                  ;	      ; A - Z
 28515                                  ;	 db   13 dup (0FFh)
 28516                                  ;	      ; \ and [
 28517                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 28518                                  ;	      ; ^ and ]
 28519                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28520                                  ;	      ; _ - {
 28521                                  ;	 db   15 dup (0FFh)
 28522                                  ;	      ; } and |
 28523                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28524                                  
 28525                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 28526                                  ;					; character in the table
 28527                                  
 28528                                  ;FCHK	equ 1		; normal name char, no chks needed
 28529                                  ;FDELIM	equ 2		; is a delimiter
 28530                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 28531                                  ;FFCB	equ 8		; is valid in an FCB
 28532                                  
 28533                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28534                                  ;----------------------------------------------------------------------------
 28535                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 28536                                  
 28537                                  CharType: ; 63 bytes
 28538 0000502C 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 28539 00005034 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 28540 0000503C F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 28541 00005044 FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 28542 0000504C FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 28543 00005054 FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 28544 0000505C FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 28545 00005064 FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 28546                                  
 28547                                  CharType_last equ ($ - CharType) * 2
 28548                                  
 28549                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 28550                                  ;----------------------------------------------------------------------------
 28551                                  ;CharType:
 28552                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28553                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28554                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28555                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28556                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 28557                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 28558                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28559                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 28560                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28561                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28562                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28563                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 28564                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28565                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28566                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28567                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 28568                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28569                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28570                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28571                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28572                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28573                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28574                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28575                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28576                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28577                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28578                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28579                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28580                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28581                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28582                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28583                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28584                                  
 28585                                  ;hkn; Table	ENDS
 28586                                  
 28587                                  ;ENDIF
 28588                                  
 28589                                  ; 20/05/2019 - Retro DOS v4.0
 28590                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 28591                                  
 28592                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28593                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 28594                                  
 28595                                  ;----------------------------------------------------------------------------
 28596                                  ;
 28597                                  ; Procedure Names : GetLet, UCase, GetLet3
 28598                                  ;
 28599                                  ; These routines take a character, convert it to upper case, and check
 28600                                  ; for delimiters.  Three different entry points:
 28601                                  ;	GetLet -  DS:[SI] = character to convert
 28602                                  ;	UCase  -  AL = character to convert
 28603                                  ;	GetLet3 - AL = character
 28604                                  ;		  [BX] = translation table to use
 28605                                  ;
 28606                                  ;	Exit (in all cases) : AL = upper case character
 28607                                  ;			      CY set if char is control char other than TAB
 28608                                  ;			      ZF set if char is a delimiter
 28609                                  ;	Uses : AX, flags
 28610                                  ;
 28611                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 28612                                  ; inline version.  Return with carry set is only possible in the inline
 28613                                  ; version. The table lookup version is the one in use.
 28614                                  ;
 28615                                  ;----------------------------------------------------------------------------
 28616                                  
 28617                                  ; This entry point has character at [SI]
 28618                                  
 28619                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 28620                                  GETLET:	
 28621 0000506B AC                      	LODSB
 28622                                  
 28623                                  ; This entry point has character in AL
 28624                                  
 28625                                  	;entry	UCase
 28626                                  UCase:	
 28627                                  	; 09/08/2018
 28628                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 28629                                  _UCase:
 28630 0000506C 53                      	PUSH	BX
 28631 0000506D BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 28632                                  
 28633                                  ; Convert the character in AL to upper case
 28634                                  
 28635                                  gl_0:
 28636 00005070 3C61                    	CMP	AL,"a"
 28637 00005072 7214                    	JB	short gl_2	; Already upper case, go check type
 28638 00005074 3C7A                    	CMP	AL,"z"
 28639 00005076 7702                    	JA	short gl_1
 28640 00005078 2C20                    	SUB	AL,20H		; Convert to upper case
 28641                                  
 28642                                  ; Map European character to upper case
 28643                                  
 28644                                  gl_1:
 28645 0000507A 3C80                    	CMP	AL,80H
 28646 0000507C 720A                    	JB	short gl_2	; Not EuroChar, go check type
 28647 0000507E 2C80                    	SUB	AL,80H		; translate to upper case with this index
 28648                                  
 28649                                  	; M048 - Start 
 28650                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 28651                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 28652                                  	; preserve it.
 28653                                  
 28654                                  	; 09/08/2018 - Retro DOS v3.0
 28655                                  	; MSDOS 3.3
 28656                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 28657                                  	;CS	XLAT
 28658                                  
 28659                                  	; 20/05/2019 - Retro DOS v4.0
 28660                                  
 28661                                  	; MSDOS 6.0
 28662 00005080 1E                      	push	ds
 28663                                  	;getdseg <ds>
 28664 00005081 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 28665 00005086 D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 28666 00005087 1F                      	pop	ds
 28667                                  
 28668                                  	; M048 - End
 28669                                  
 28670                                  ; Now check the type
 28671                                  
 28672                                  ;If TableLook
 28673                                  gl_2:
 28674                                  	; 20/05/2019 - Retro DOS v4.0
 28675 00005088 50                      	PUSH	AX
 28676                                  
 28677                                  	; MSDOS 3.3
 28678                                  	;mov	bx,CharType
 28679                                  	;; 09/08/2018
 28680                                  	;;xlat	byte [cs:bx]
 28681                                  	;cs	xlat	
 28682                                  	
 28683                                  	; MSDOS 6.0
 28684 00005089 E81800                  	CALL	GetCharType	; returns type flags in AL
 28685                                  	
 28686                                  	;test	al,1	
 28687 0000508C A801                    	TEST	AL,FCHK 	; test for normal character
 28688 0000508E 58                      	POP	AX
 28689 0000508F 5B                      	POP	BX
 28690 00005090 C3                      	RETN
 28691                                  
 28692                                  ; This entry has character in AL and lookup table in BX
 28693                                  
 28694                                  	; MSDOS 6.0
 28695                                  ;	;entry GetLet3
 28696                                  GETLET3: ; 10/08/2018
 28697 00005091 53                      	PUSH	BX
 28698 00005092 EBDC                    	JMP	short gl_0
 28699                                  ;ELSE
 28700                                  ;
 28701                                  ;gl_2:
 28702                                  ;	POP	BX
 28703                                  ;	CMP	AL,"."
 28704                                  ;	retz
 28705                                  ;	CMP	AL,'"'
 28706                                  ;	retz
 28707                                  ;	CALL	PATHCHRCMP
 28708                                  ;	retz
 28709                                  ;	CMP	AL,"["
 28710                                  ;	retz
 28711                                  ;	CMP	AL,"]"
 28712                                  ;	retz
 28713                                  ;ENDIF
 28714                                  
 28715                                  ;---------------------------------------------------------------------
 28716                                  ;
 28717                                  ; DELIM - check if character is a delimiter
 28718                                  ;	Entry : AX = character to check
 28719                                  ;	Exit  : ZF set if character is not a delimiter
 28720                                  ;	Uses  : Flags
 28721                                  ;
 28722                                  ;--------------------------------------------------------------------
 28723                                  
 28724                                  	;entry	DELIM
 28725                                  DELIM:
 28726                                  ;IF TableLook
 28727                                  	; 20/05/2019 - Retro DOS v4.0
 28728 00005094 50                      	PUSH	AX
 28729                                  
 28730                                  	; MSDOS 3.3
 28731                                  	;push	bx
 28732                                  	;mov	bx,CharType
 28733                                  	;;09/08/2018
 28734                                  	;;xlat	byte [cs:bx]
 28735                                  	;cs	xlat
 28736                                  	;pop	bx
 28737                                  
 28738                                  	; MSDOS 6.0
 28739 00005095 E80C00                  	CALL	GetCharType
 28740                                  	
 28741                                  	;test	al,2
 28742 00005098 A802                    	TEST	AL,FDELIM
 28743 0000509A 58                      	POP	AX
 28744 0000509B C3                      	RETN
 28745                                  ;ELSE
 28746                                  ;	CMP	AL,":"
 28747                                  ;	retz
 28748                                  ;
 28749                                  ;	CMP	AL,"<"
 28750                                  ;	retz
 28751                                  ;	CMP	AL,"|"
 28752                                  ;	retz
 28753                                  ;	CMP	AL,">"
 28754                                  ;	retz
 28755                                  ;
 28756                                  ;	CMP	AL,"+"
 28757                                  ;	retz
 28758                                  ;	CMP	AL,"="
 28759                                  ;	retz
 28760                                  ;	CMP	AL,";"
 28761                                  ;	retz
 28762                                  ;	CMP	AL,","
 28763                                  ;	retz
 28764                                  ;ENDIF
 28765                                  
 28766                                  ;-------------------------------------------------------------------------
 28767                                  ;
 28768                                  ;  SPCHK - checks to see if a character is a space or equivalent
 28769                                  ;	Entry : AL = character to check
 28770                                  ;	Exit  : ZF set if character is a space
 28771                                  ;	Uses  : flags
 28772                                  ;
 28773                                  ;-------------------------------------------------------------------------
 28774                                  
 28775                                  	;entry SPCHK
 28776                                  SPCHK:
 28777                                  ;IF TableLook
 28778                                  	; 20/05/2019 - Retro DOS v4.0
 28779 0000509C 50                      	PUSH	AX
 28780                                  
 28781                                  	; MSDOS 3.3
 28782                                  	;push	bx
 28783                                  	;mov	bx,CharType
 28784                                  	;; 09/08/2018
 28785                                  	;;xlat	byte [cs:bx]
 28786                                  	;cs	xlat
 28787                                  	;pop	bx
 28788                                  
 28789                                  	; MSDOS 6.0
 28790 0000509D E80400                  	CALL	GetCharType
 28791                                  	
 28792                                  	;test	al,4
 28793 000050A0 A804                    	TEST	AL,FSPCHK
 28794 000050A2 58                      	POP	AX
 28795 000050A3 C3                      	RETN
 28796                                  ;ELSE
 28797                                  ;	CMP	AL,9		; Filter out tabs too
 28798                                  ;	retz
 28799                                  ;; WARNING! " " MUST be the last compare
 28800                                  ;	CMP	AL," "
 28801                                  ;	return
 28802                                  ;ENDIF
 28803                                  
 28804                                  ;-------------------------------------------------------------------------
 28805                                  ;
 28806                                  ;  GetCharType - return flag bits indicating character type
 28807                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 28808                                  ;	defined above at label CharType.
 28809                                  ;
 28810                                  ;	Entry : AL = character to return type flags for
 28811                                  ;	Exit  : AL = type flags
 28812                                  ;	Uses  : AL, flags
 28813                                  ;
 28814                                  ;-------------------------------------------------------------------------
 28815                                  
 28816                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28817                                  
 28818                                  	; 20/05/2019 - Retro DOS v4.0
 28819                                  	; MSDOS 6.0
 28820                                  GetCharType:
 28821                                  	;cmp	al,7Eh
 28822 000050A4 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 28823 000050A6 7316                    	jae	short gct_90		; return standard value
 28824                                  
 28825 000050A8 53                      	push	bx
 28826 000050A9 BB[2C50]                	mov	bx,CharType		; load lookup table
 28827 000050AC D0E8                    	shr	al,1			; adjust for half-byte table entry size
 28828                                  	;xlat	cs:[bx] 		; get flags
 28829 000050AE 2ED7                    	cs	xlat	
 28830 000050B0 5B                      	pop	bx
 28831                                  
 28832                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 28833                                  ; we have to shift the flags down to the low nibble
 28834                                  
 28835 000050B1 7308                    	jnc	short gct_80		; carry clear, no shift needed
 28836                                  
 28837 000050B3 D0E8                    	shr	al,1			; we want high nibble, shift it down
 28838 000050B5 D0E8                    	shr	al,1
 28839 000050B7 D0E8                    	shr	al,1
 28840 000050B9 D0E8                    	shr	al,1
 28841                                  gct_80:
 28842 000050BB 240F                    	and	al,0Fh			; clear the unused nibble
 28843 000050BD C3                      	retn
 28844                                  gct_90:
 28845 000050BE B00F                    	mov	al,0Fh			; set all flags
 28846 000050C0 C3                      	retn
 28847                                  
 28848                                  ;----------------------------------------------------------------------------
 28849                                  ;
 28850                                  ; Procedure : PATHCHRCMP
 28851                                  ;
 28852                                  ;----------------------------------------------------------------------------
 28853                                  
 28854                                  PATHCHRCMP:
 28855 000050C1 3C2F                    	CMP	AL,'/'
 28856 000050C3 7606                    	JBE	short PathRet
 28857 000050C5 3C5C                    	CMP	AL,'\'
 28858 000050C7 C3                      	retn
 28859                                  GotFor:
 28860 000050C8 B05C                    	MOV	AL,'\'
 28861 000050CA C3                      	retn
 28862                                  PathRet:
 28863 000050CB 74FB                    	JZ	short GotFor
 28864 000050CD C3                      	retn
 28865                                  
 28866                                  ;============================================================================
 28867                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 28868                                  ;============================================================================
 28869                                  ; 30/07/2018 - Retro DOS v3.0
 28870                                  ; 29/04/2019 - Retro DOS v4.0
 28871                                  
 28872                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 28873                                  
 28874                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 28875                                  
 28876                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 28877                                  ;	NAME	IBMCTRLC
 28878                                  
 28879                                  ;**	Low level routines for detecting special characters on CON input,
 28880                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 28881                                  ;	process termination code, and the INT 0 divide overflow handler.
 28882                                  ;
 28883                                  ;	FATAL
 28884                                  ;	FATAL1
 28885                                  ;	reset_environment
 28886                                  ;	DSKSTATCHK
 28887                                  ;	SPOOLINT
 28888                                  ;	STATCHK
 28889                                  ;	CNTCHAND
 28890                                  ;	DIVOV
 28891                                  ;	CHARHARD
 28892                                  ;	HardErr
 28893                                  ;
 28894                                  ;	Revision history:
 28895                                  ;
 28896                                  ;	    AN000	version 4.0   Jan 1988
 28897                                  ;	    A002	PTM    -- dir >lpt3 hangs
 28898                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 28899                                  ;
 28900                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 28901                                  ;	      flags register. In order to return to user normally DOS used to
 28902                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 28903                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 28904                                  ;
 28905                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 28906                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 28907                                  ;	      charhard.
 28908                                  
 28909                                  ; 29/04/2019 - Retro DOS v4.0
 28910                                  	; MSDOS 6.0
 28911                                  ;		public	LowInt23Addr		
 28912                                  LowInt23Addr: ;	LABEL	DWORD
 28913 000050CE [CD10]0000              	DW	LowInt23, 0
 28914                                  
 28915                                  ;		public	LowInt24Addr
 28916                                  LowInt24Addr: ;	LABEL	DWORD
 28917 000050D2 [E110]0000              	DW	LowInt24, 0
 28918                                  
 28919                                  ;		public	LowInt28Addr
 28920                                  LowInt28Addr: ;	LABEL	DWORD
 28921 000050D6 [F510]0000              	DW	LowInt28, 0
 28922                                  
 28923                                  ;Break	<Checks for ^C in CON I/O>
 28924                                  
 28925                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28926                                  ; 05/05/2019 - Retro DOS v4.0
 28927                                  
 28928                                  ;---------------------------------------------------------------------------
 28929                                  ;
 28930                                  ; Procedure Name : DSKSTATCHK
 28931                                  ;
 28932                                  ; Check for ^C if only one level in
 28933                                  ;
 28934                                  ;---------------------------------------------------------------------------
 28935                                  
 28936                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 28937                                  
 28938                                  DSKSTATCHK:        
 28939                                  	;CMP	BYTE [INDOS],1
 28940 000050DA 36803E[2103]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 28941                                  	;retnz			; Do NOTHING
 28942                                  	; 16/12/2022
 28943 000050E0 7534                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 28944                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28945                                  	;jz	short _RET37 ; dskstatchk1
 28946                                  	;retn
 28947                                  ;_RET37:
 28948                                  ;dskstatchk1:
 28949 000050E2 51                      	PUSH    CX
 28950 000050E3 06                              PUSH    ES
 28951 000050E4 53                              PUSH    BX
 28952 000050E5 1E                              PUSH    DS
 28953 000050E6 56                              PUSH    SI
 28954                                          
 28955                                  	;PUSH	CS
 28956                                          ;POP	ES
 28957                                          ;PUSH	CS
 28958                                          ;POP	DS
 28959                                  
 28960 000050E7 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 28961 000050E9 8EC3                    	MOV	ES,BX		; for deviocall2
 28962 000050EB 8EDB                    	MOV	DS,BX
 28963                                  
 28964                                  	; 16/12/2022
 28965                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28966                                  
 28967                                  	; 05/05/2019
 28968                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 28969                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 28970                                  	;mov	word [ss:DSKSTST],0
 28971                                  
 28972                                  	; 16/12/2022
 28973                                  	; 25/06/2019
 28974 000050ED C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 28975 000050F2 C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 28976 000050F7 C706[9503]0000          	mov	word [DSKSTST],0
 28977                                  
 28978 000050FD BB[9203]                        MOV     BX,DSKSTCALL
 28979                                  
 28980                                  	;LDS	SI,[ss:BCON]
 28981                                          ; 25/062019
 28982 00005100 C536[3200]              	lds	si,[BCON]
 28983                                  
 28984                                  ; 16/12/2022
 28985                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28986                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 28987                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 28988                                  ;	mov	word [ss:DSKSTST],0
 28989                                  ;	mov	bx,DSKSTCALL
 28990                                  ;	lds	si,[ss:BCON]
 28991                                  
 28992 00005104 E890F5                  	CALL	DEVIOCALL2
 28993                                   	; 15/03/2018
 28994                                  	;;test	word [ss:DSKSTST],200h
 28995                                          ;TEST	WORD [SS:DSKSTST],STBUI
 28996                                  	; 05/05/2019
 28997 00005107 36F606[9603]02          	test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 28998 0000510D 7408                    	jz	short _GotCh		; No characters available
 28999                                  
 29000 0000510F 30C0                            XOR     AL,AL                   ; Set zero
 29001                                  RET36:
 29002 00005111 5E                              POP     SI
 29003 00005112 1F                              POP     DS
 29004 00005113 5B                              POP     BX
 29005 00005114 07                              POP     ES
 29006 00005115 59                              POP     CX
 29007                                  	; 16/12/2022
 29008                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29009                                  _RET37:
 29010 00005116 C3                              RETN
 29011                                  
 29012                                  _GotCh:
 29013 00005117 36A0[9F03]                      MOV     AL,[SS:DSKCHRET]	; SS override
 29014                                  
 29015 0000511B 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 29016 0000511D 75F2                            JNZ     SHORT RET36
 29017 0000511F 36C606[9403]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 29018 00005125 36C606[9203]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 29019 0000512B 36880E[9F03]                    MOV     [SS:DSKCHRET],CL
 29020                                  	; 09/09/2018
 29021 00005130 36C706[9503]0000        	MOV	word [SS:DSKSTST],0
 29022 00005137 36C706[A403]0100        	MOV	word [SS:DSKSTCNT],1
 29023 0000513E E856F5                  	CALL	DEVIOCALL2              ; Eat the ^C
 29024 00005141 5E                              POP     SI
 29025 00005142 1F                              POP     DS
 29026 00005143 5B                              POP     BX                      ; Clean stack
 29027 00005144 07                              POP     ES
 29028 00005145 59                              POP     CX
 29029 00005146 E9CF00                          JMP	CNTCHAND ; 10/08/2018
 29030                                  
 29031                                  	; 05/05/2019
 29032                                  NOSTOP:
 29033                                  	; MSDOS 6.0
 29034 00005149 3C10                    	CMP	AL,"P"-"@"
 29035 0000514B 7509                    	JNZ	short check_next
 29036                                  				    	; SS override
 29037 0000514D 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 29038 00005153 7405                    	JZ	short INCHKJ		; no
 29039                                  check_end:	; 24/09/2023
 29040 00005155 C3                      	retn
 29041                                  check_next:
 29042                                  	;IF	NOT TOGLPRN
 29043                                  	;CMP	AL,"N"-"@"
 29044                                  	;JZ	short INCHKJ
 29045                                  	;ENDIF
 29046                                  
 29047 00005156 3C03                    	CMP	AL,"C"-"@"
 29048                                  	; 24/09/2023
 29049                                  	;JZ	short INCHKJ
 29050                                  ;check_end:
 29051                                  	;retn
 29052 00005158 75FB                    	jnz	short check_end
 29053                                  
 29054                                  	; 24/09/2023
 29055                                  	; 08/09/2018
 29056                                  INCHKJ:	; 10/08/2018
 29057 0000515A E9A500                  	jmp	INCHK
 29058                                  
 29059                                  	; MSDOS 3.3
 29060                                          ;CMP     AL,"P"-"@"  ; cmp al,16
 29061                                          ;JZ	short INCHKJ
 29062                                  
 29063                                  	; 15/04/2018
 29064                                          ;;IF	NOT TOGLPRN
 29065                                          ;CMP	AL,"N"-"@"
 29066                                          ;JZ	SHORT INCHKJ
 29067                                          ;;ENDIF
 29068                                  	
 29069                                  	;CMP     AL,"C"-"@"  ; cmp al,3
 29070                                          ;JZ	short INCHKJ
 29071                                  	;RETN
 29072                                  
 29073                                  ;	; 08/09/2018
 29074                                  ;INCHKJ:; 10/08/2018
 29075                                  ;	JMP	INCHK
 29076                                  
 29077                                  ;----------------------------------------------------------------------------
 29078                                  ;
 29079                                  ; Procedure Name : SpoolInt
 29080                                  ;
 29081                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 29082                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 29083                                  ; the middle of an INT 24.
 29084                                  ;
 29085                                  ;----------------------------------------------------------------------------
 29086                                  
 29087                                  SPOOLINT:
 29088 0000515D 9C                              PUSHF
 29089                                  	; 15/03/2018
 29090 0000515E 36803E[5803]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 29091 00005164 7423                            JZ      SHORT POPFRET
 29092 00005166 36803E[2003]00                  CMP     BYTE [SS:ERRORMODE],0
 29093 0000516C 751B                            JNZ     SHORT POPFRET		;No spool ints in error mode
 29094                                  
 29095                                  	; 30/07/2018
 29096                                  
 29097                                  	; Note that we are going to allow an external program to issue system 
 29098                                  	; calls at this time. We MUST preserve IdleInt across this.
 29099                                  
 29100 0000516E 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 29101                                  
 29102                                  	; 05/05/2019 - Retro DOS v4.0
 29103                                   
 29104                                  	; MSDOS 6.0
 29105 00005173 36803E[F711]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 29106 00005179 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 29107 0000517B CD28                    	INT	int_spooler  ; int 28h 	; N: Execute user int 28 handler
 29108 0000517D EB05                    	jmp	short spool_ret_addr
 29109                                  
 29110                                  do_low_int28:
 29111                                  	;call	far [ss:LowInt28Addr]
 29112 0000517F 2EFF1E[D650]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 29113                                  
 29114                                  spool_ret_addr:
 29115                                  	;INT	int_spooler		; INT 28h
 29116                                  
 29117 00005184 368F06[5803]            	POP	WORD [SS:IDLEINT]
 29118                                  POPFRET:
 29119 00005189 9D                              POPF
 29120                                  _RET18:  
 29121 0000518A C3                      	RETN
 29122                                  
 29123                                  ; 05/05/2019 - Retro DOS v4.0
 29124                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 29125                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29126                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 29127                                  
 29128                                  ;----------------------------------------------------------------------------
 29129                                  ;
 29130                                  ; Procedure Name : STATCHK
 29131                                  ;
 29132                                  ;----------------------------------------------------------------------------
 29133                                  
 29134                                  STATCHK:
 29135 0000518B E84CFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 29136                                                                          ; input redirection
 29137 0000518E 53                              PUSH    BX
 29138 0000518F 31DB                            XOR     BX,BX
 29139 00005191 E8E8E4                          CALL	GET_IO_SFT
 29140 00005194 5B                              POP     BX
 29141 00005195 72F3                            JC      SHORT _RET18
 29142                                  
 29143 00005197 B401                            MOV     AH,1
 29144 00005199 E826F3                          CALL	IOFUNC
 29145 0000519C 74BF                            JZ      SHORT SPOOLINT
 29146 0000519E 3C13                            CMP     AL,'S'-'@'
 29147 000051A0 75A7                            JNZ     SHORT NOSTOP
 29148                                  
 29149                                  	; 05/05/2019
 29150                                  	; MSDOS 6.0			; SS override
 29151 000051A2 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 29152 000051A8 75AB                    	JNZ	short check_end		; AN000; yes
 29153                                  
 29154 000051AA 30E4                            XOR     AH,AH
 29155 000051AC E813F3                          CALL	IOFUNC                  ; Eat Cntrl-S
 29156 000051AF EB4A                            JMP     SHORT PAUSOSTRT
 29157                                  PRINTOFF:
 29158                                  PRINTON:
 29159 000051B1 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 29160                                  
 29161                                  	; 30/07/2018 - Retro DOS v3.0
 29162 000051B6 53                      	PUSH	BX
 29163 000051B7 BB0400                  	MOV	BX,4
 29164 000051BA E8BFE4                  	call	GET_IO_SFT
 29165 000051BD 5B                      	POP	BX
 29166 000051BE 72CA                    	jc	short _RET18
 29167 000051C0 06                      	PUSH	ES
 29168 000051C1 57                      	PUSH	DI
 29169 000051C2 1E                      	PUSH	DS
 29170 000051C3 07                      	POP	ES
 29171 000051C4 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 29172                                  	;test	word [es:di+5],800h
 29173                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 29174                                  	; 05/05/2019
 29175 000051C6 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 29176 000051CB 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 29177                                  
 29178                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 29179                                  					; See if allowed
 29180 000051CD 50                      	push	ax
 29181 000051CE B82611                  	mov	ax,1126h
 29182 000051D1 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29183                                  			; Return: CF set on error, AX = error code
 29184                                  			; STACK unchanged
 29185 000051D3 58                      	pop	ax
 29186                                  
 29187 000051D4 730F                    	JNC	short NORM_PR 		; Echo is OK
 29188                                  
 29189                                  					; SS override
 29190 000051D6 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 29191                                  
 29192                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 29193                                  
 29194 000051DC 50                      	push    ax
 29195 000051DD B82411                  	mov     ax,1124h
 29196 000051E0 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29197                                  			; ES:DI -> SFT, SS = DOS CS
 29198 000051E2 58                      	pop     ax
 29199                                  
 29200 000051E3 EB10                    	JMP	SHORT RETP6
 29201                                  NORM_PR:
 29202 000051E5 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 29203 000051EB 7505                    	JNZ	short PRNOPN
 29204 000051ED E82BF4                  	call	DEV_CLOSE_SFT
 29205 000051F0 EB03                    	JMP	SHORT RETP6
 29206                                  PRNOPN:
 29207 000051F2 E81EF4                  	call	DEV_OPEN_SFT
 29208                                  RETP6:
 29209 000051F5 5F                      	POP	DI
 29210 000051F6 07                      	POP	ES
 29211                                  STATCHK_RETN:
 29212 000051F7 C3                              RETN
 29213                                  PAUSOLP:
 29214 000051F8 E862FF                          CALL    SPOOLINT
 29215                                  PAUSOSTRT:
 29216 000051FB B401                            MOV     AH,1
 29217 000051FD E8C2F2                          CALL	IOFUNC
 29218 00005200 74F6                            JZ      SHORT PAUSOLP
 29219                                  INCHK:
 29220 00005202 53                              PUSH    BX
 29221 00005203 31DB                            XOR     BX,BX
 29222 00005205 E874E4                          CALL	GET_IO_SFT
 29223 00005208 5B                              POP     BX
 29224 00005209 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 29225 0000520B 30E4                            XOR     AH,AH
 29226 0000520D E8B2F2                          CALL	IOFUNC
 29227                                  	; 30/07/2018
 29228                                  	; MSDOS 3.3
 29229                                          ;CMP	AL,'P'-'@' ;cmp al,16
 29230                                          ;JNZ	SHORT NOPRINT
 29231                                  
 29232                                  	;cmp	byte [SS:SCAN_FLAG],0
 29233                                  	;JZ	SHORT PRINTON	
 29234                                  	;mov	byte [ss:SCAN_FLAG],0
 29235                                  
 29236                                  	; 05/05/2019
 29237                                  	; MSDOS 6.0
 29238 00005210 3C10                    	CMP	AL,"P"-"@"
 29239                                  	;;;;  7/14/86	ALT_Q key fix
 29240 00005212 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 29241                                  ;NOPRINT:	
 29242                                  	;IF	NOT TOGLPRN
 29243                                  	;CMP	AL,"N"-"@"
 29244                                  	;JZ	short PRINTOFF
 29245                                  	;ENDIF
 29246 00005214 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 29247                                  	;retnz
 29248 00005216 75DF                    	jnz	short STATCHK_RETN
 29249                                  
 29250                                  	; !! NOTE: FALL THROUGH !!
 29251                                  
 29252                                  ;---------------------------------------------------------------------------
 29253                                  ;
 29254                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 29255                                  ;
 29256                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 29257                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 29258                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 29259                                  ; processing to continue; 2) the original interrupt return address to the code
 29260                                  ; that performed the function call in the first place. If the user CTRL-C
 29261                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 29262                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 29263                                  ; is simulated.
 29264                                  ;
 29265                                  ;---------------------------------------------------------------------------
 29266                                  
 29267                                  CNTCHAND:
 29268                                  	; MSDOS 6.0			; SS override
 29269                                  					; AN002; from RAWOUT
 29270                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 29271                                  	;JNZ	short around_deadlock 	; AN002;
 29272                                  
 29273                                  	; 05/05/2019 - Retro DOS v4.0
 29274                                  	; (MSDOS 6.21 MSDOS.SYS DOSCODE:91C4h, 29/12/2022)
 29275 00005218 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 29276 0000521E 7508                    	JNZ	short around_deadlock 	; AN002;
 29277                                  
 29278 00005220 B003                            MOV     AL,3			; Display "^C"
 29279 00005222 E8E1C4                          CALL	BUFOUT
 29280 00005225 E87DC3                          CALL	CRLF
 29281                                  around_deadlock:
 29282 00005228 16                              PUSH    SS
 29283 00005229 1F                              POP     DS
 29284 0000522A 803E[5703]00                    CMP     BYTE [CONSWAP],0
 29285 0000522F 7403                            JZ      SHORT NOSWAP
 29286 00005231 E8B2E0                          CALL	SWAPBACK
 29287                                  NOSWAP:
 29288 00005234 FA                      	CLI				; Prepare to play with stack
 29289 00005235 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 29290 00005239 8B26[8405]              	MOV	SP,[USER_SP]
 29291 0000523D E80FB2                          CALL	restore_world       ; User registers now restored
 29292                                  
 29293                                  	; 30/07/2018 - Retro DOS v3.0 
 29294                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 29295                                          ; 14/03/2018 - Retro DOS v2.0
 29296                                  	;MOV	BYTE [CS:INDOS],0	
 29297                                          ;MOV	BYTE [CS:ERRORMODE],0
 29298                                          ;MOV	[CS:ConC_Spsave],SP
 29299                                  	;clc	;30/07/2018
 29300                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 29301                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 29302                                  			; Return: return via RETF 2 with CF set
 29303                                  			; DOS will abort program with errorlevel 0
 29304                                  			; else
 29305                                  			; interrupted DOS call continues
 29306                                  
 29307                                  	; 05/05/2019 - Retro DOS v4.0
 29308                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 29309                                  
 29310                                  	; CS was used to address these variables. We have to use DOSDATA
 29311                                  	
 29312 00005240 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 29313                                  			; (pop es, after 'call restore_world')	
 29314 00005241 1E                      	push	ds
 29315                                  	;getdseg <ds>			; ds -> dosdata
 29316 00005242 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29317 00005247 C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 29318 0000524C C606[2003]00            	mov	byte [ERRORMODE],0
 29319 00005251 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 29320                                  	; User SP has changed because of push. Adjust for it
 29321 00005255 8306[3203]02            	add	word [ConC_Spsave],2
 29322                                  
 29323 0000525A 803E[F711]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 29324 0000525F 1F                       	pop	ds	; restore ds
 29325 00005260 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 29326 00005262 F8                      	CLC				
 29327 00005263 CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 29328 00005265 EB06                    	jmp	short ctrlc_ret_addr
 29329                                  
 29330                                  	; 05/05/2019
 29331                                  do_low_int23:
 29332 00005267 F8                      	clc
 29333 00005268 2EFF1E[CE50]            	call	far [cs:LowInt23Addr]	
 29334                                  
 29335                                  	; 30/07/2018 
 29336                                  
 29337                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 29338                                  
 29339                                  ; The user has returned to us. The circumstances we allow are:
 29340                                  ;
 29341                                  ;   IRET	We retry the operation by redispatching the system call
 29342                                  ;   CLC/RETF	POP the stack and retry
 29343                                  ;   ... 	Exit the current process with ^C exit
 29344                                  ;
 29345                                  ; User's may RETURN to us and leave interrupts on. 
 29346                                  ; Turn 'em off just to be sure
 29347                                  
 29348                                  ctrlc_ret_addr: ; 05/05/2019
 29349                                  
 29350 0000526D FA                      	CLI
 29351                                  
 29352                                  	; MSDOS 3.3 
 29353                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 29354                                  	;PUSHF				; and the flags (maybe new call)
 29355                                  	;POP	AX
 29356                                  
 29357                                  	; 05/05/2019
 29358                                  	; MSDOS 6.0
 29359                                  
 29360                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 29361                                  
 29362 0000526E 50                      	push	ax
 29363 0000526F 8CD8                    	mov	ax,ds
 29364                                  	;getdseg <ds>			; ds -> dosdata
 29365 00005271 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29366 00005276 A3[0A0D]                	mov	[TEMPSEG],ax
 29367 00005279 58                      	pop	ax
 29368 0000527A A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 29369 0000527D 9C                      	pushf				; and the flags (maybe new call)
 29370 0000527E 58                      	pop	ax
 29371                                  
 29372                                  ; See if the input stack is identical to the output stack
 29373                                  
 29374                                  	; MSDOS 3.3
 29375                                  	;CMP	SP,[CS:ConC_Spsave]
 29376                                  	;JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29377                                  
 29378                                  	; MSDOS 6.0
 29379 0000527F 3B26[3203]              	CMP	SP,[ConC_Spsave]
 29380 00005283 750A                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29381                                  
 29382                                  ; Repeat the operation by redispatching the system call.
 29383                                  
 29384                                  ctrlc_repeat:
 29385                                  	; MSDOS 3.3
 29386                                  	;MOV	AX,[CS:USER_IN_AX]
 29387                                  	; 05/05/2019
 29388                                  	; MSDOS 6.0
 29389 00005285 A1[3A03]                	mov	ax,[USER_IN_AX]
 29390 00005288 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 29391                                  	; MSDOS 3.3 & MSDOS 6.0 
 29392                                  	;transfer COMMAND
 29393                                  COMMANDJ:
 29394 0000528C E978B0                  	JMP	COMMAND
 29395                                  
 29396                                  ; The current SP is NOT the same as the input SP. Presume that he 
 29397                                  ; RETF'd leaving some flags on the stack and examine the input
 29398                                  
 29399                                  ctrlc_try_new:
 29400 0000528F 83C402                  	ADD	SP,2			; pop those flags
 29401                                  	;;test	ax,1
 29402                                  	;TEST	AX,f_Carry		; did he return with carry?
 29403 00005292 A801                    	test	al,f_Carry ; test al,1
 29404 00005294 74EF                    	JZ	short ctrlc_repeat	; no carry set, just retry
 29405                                  
 29406                                  	; MSDOS 6.0
 29407 00005296 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 29408                                  
 29409                                  	; Well...  time to abort the user.  
 29410                                  	; Signal a ^C exit and use the EXIT system call..
 29411                                  
 29412                                  ctrlc_abort:
 29413                                  	; MSDOS 3.3
 29414                                          ;;MOV	AX,(EXIT SHL 8) + 0
 29415                                          ;MOV	AX, (EXIT*256) + 0  ; 4C00h
 29416                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 29417                                          ;transfer COMMAND	    ; give up by faking $EXIT
 29418                                  	;;JMP	SHORT COMMANDJ
 29419                                  	;JMP	COMMAND
 29420                                  
 29421                                  	; 05/05/2019 - Retro DOS v4.0
 29422                                  	; MSDOS 6.0
 29423 0000529A B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 29424 0000529D 1E                      	push	ds
 29425                                  	;getdseg <ds>			; ds -> dosdata
 29426 0000529E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 29427 000052A3 C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 29428 000052A8 1F                      	pop	ds
 29429                                  	;transfer COMMAND		; give up by faking $EXIT
 29430 000052A9 EBE1                    	JMP	SHORT COMMANDJ
 29431                                  	;JMP	COMMAND
 29432                                  
 29433                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 29434                                  ;----------------------------------------------------------------------------
 29435                                  ;
 29436                                  ; Procedure Name : DIVOV
 29437                                  ;
 29438                                  ; Default handler for division overflow trap
 29439                                  ;
 29440                                  ;----------------------------------------------------------------------------
 29441                                  
 29442                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29443                                  DIVOV: 
 29444                                  	; 05/05/2019 - Retro DOS v4.0
 29445                                  	; 30/07/2018
 29446                                  	; 07/07/2018 - Retro DOS v3.0
 29447 000052AB BE[A209]                	mov	si,DIVMES
 29448 000052AE 2E8B1E[B509]            	mov	bx,[cs:DivMesLen]
 29449                                  	;mov	ax,cs
 29450                                  	;mov	ss,ax
 29451                                  	; 05/05/2019
 29452                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 29453 000052B3 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 29454 000052B8 BC[A007]                	mov     sp,AUXSTACK
 29455                                  	;call	RealDivOv ; MSDOS 3.3
 29456 000052BB E80200                  	call	_OUTMES ; MSDOS 6.0
 29457 000052BE EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 29458                                  
 29459                                  ; 30/07/2018
 29460                                  
 29461                                  ; MSDOS 6.0
 29462                                  ;---------------------------------------------------------------------------
 29463                                  ;
 29464                                  ; Procedure Name : OutMes
 29465                                  ;
 29466                                  ;
 29467                                  ; OutMes: perform message output
 29468                                  ; Inputs:   SS:SI points to message
 29469                                  ;	    BX has message length
 29470                                  ; Outputs:  message to BCON
 29471                                  ;
 29472                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29473                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29474                                  ;NB. This procedure is called only from DIVOV. -SR
 29475                                  ;
 29476                                  ;---------------------------------------------------------------------------
 29477                                  
 29478                                  ;MSDOS 3.3
 29479                                  ;---------------------------------------------------------------------------
 29480                                  ; RealDivOv: perform actual divide overflow stuff.
 29481                                  ; Inputs:   none
 29482                                  ; Outputs:  message to BCON
 29483                                  ;---------------------------------------------------------------------------
 29484                                  
 29485                                  	; 05/05/2019 - Retro DOS v4.0
 29486                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 29487                                  
 29488                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29489                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 29490                                  
 29491                                  ;---------------------------------------------------------------------------
 29492                                  ;
 29493                                  ; Procedure Name : OutMes
 29494                                  ;
 29495                                  ; OutMes: perform message output
 29496                                  ; Inputs:   SS:SI points to message
 29497                                  ;	    BX has message length
 29498                                  ; Outputs:  message to BCON
 29499                                  ;
 29500                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29501                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29502                                  ;NB. This procedure is called only from DIVOV. -SR
 29503                                  ;
 29504                                  ;---------------------------------------------------------------------------
 29505                                  
 29506                                  	; 30/07/2018
 29507                                  	; MSDOS 6.0
 29508                                  _OUTMES:
 29509                                  	; MSDOS 3.3
 29510                                  ;RealDivOv:
 29511                                  	; 07/07/2018 - Retro DOS v3.0
 29512                                          ;Context ES
 29513 000052C0 16                      	push	ss ; 05/05/2019
 29514                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 29515 000052C1 07                      	POP	ES
 29516                                          ;Context DS
 29517 000052C2 16                      	push	ss ; 05/05/2019	
 29518                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 29519 000052C3 1F                      	POP	DS
 29520 000052C4 C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 29521 000052C9 C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 29522 000052CE C706[9503]0000                  MOV     WORD [DSKSTST],0
 29523                                  	; BX = [DivMesLen] = 19
 29524 000052D4 891E[A403]                      MOV     [DSKSTCNT],BX
 29525 000052D8 BB[9203]                        MOV     BX,DSKSTCALL
 29526 000052DB 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 29527                                  	; 08/09/2018
 29528                                  	;mov	[DEVIOBUF_PTR],si
 29529                                  	; MSDOS 6.0
 29530                                  					; CS is used for string, fill in 
 29531                                  					; segment address 
 29532 000052DF 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 29533                                  
 29534 000052E3 C536[3200]                      LDS     SI,[BCON]
 29535 000052E7 E8ADF3                          CALL	DEVIOCALL2
 29536                                  
 29537                                  	;; 14/03/2018
 29538                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 29539                                  	;; 08/09/2018
 29540                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 29541                                          ;MOV	WORD [CS:DSKSTCNT],1
 29542                                          
 29543                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29544                                  
 29545                                  	; ES still points to DOSDATA. ES is
 29546                                  					; not destroyed by deviocall2. So use
 29547                                  					; ES override.
 29548                                  
 29549 000052EA 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 29550 000052F1 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 29551                                  
 29552 000052F8 C3                      	RETN
 29553                                  
 29554                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 29555                                  ;---------------------------------------------------------------------------
 29556                                  ;
 29557                                  ; Procedure Name : CHARHARD
 29558                                  ;
 29559                                  ;
 29560                                  ; Character device error handler
 29561                                  ; Same function as HARDERR
 29562                                  ;
 29563                                  ;---------------------------------------------------------------------------
 29564                                  
 29565                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29566                                  CHARHARD:
 29567                                  	; 05/05/2019 - Retro DOS v4.0
 29568                                  	; 30/07/2018
 29569                                  	; 08/07/2018 - Retro DOS v3.0
 29570                                  
 29571                                  	; MSDOS 6.0
 29572                                  		   			; M024 - start
 29573 000052F9 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 29574                                  	;jne	short @f		; Y: allow fail
 29575 000052FF 750B                    	jne	short chard1
 29576                                  
 29577 00005301 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 29578                                  
 29579 00005304 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 29580 0000530A 7503                    	jnz	short ctrlp		; Y: 
 29581                                  ;@@:
 29582                                  chard1:					; M024 - end
 29583                                  	; MSDOS 6.0 & MSDOS 3.3
 29584                                  
 29585                                  ; Character device error handler
 29586                                  ; Same function as HARDERR
 29587                                  
 29588                                  	;or	ah,38h
 29589 0000530C 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 29590                                  ctrlp:			; SS override for Allowed and EXITHOLD
 29591 0000530F 368826[4B03]            	mov	[SS:ALLOWED],ah
 29592                                  
 29593                                  	; 15/03/2018
 29594 00005314 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 29595 00005319 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 29596 0000531E 56                              PUSH    SI
 29597                                  	;and	di,0FFh
 29598 0000531F 81E7FF00                        AND     DI,STECODE
 29599 00005323 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 29600 00005325 E86400                          CALL    FATALC
 29601 00005328 5E                              POP     SI
 29602                                  	;return
 29603 00005329 C3                              RETN
 29604                                  
 29605                                  ;---------------------------------------------------------------------------
 29606                                  ;
 29607                                  ; Procedure Name : HardErr
 29608                                  ;
 29609                                  ; Hard disk error handler. Entry conditions:
 29610                                  ;	DS:BX = Original disk transfer address
 29611                                  ;	DX = Original logical sector number
 29612                                  ;	CX = Number of sectors to go (first one gave the error)
 29613                                  ;	AX = Hardware error code
 29614                                  ;	DI = Original sector transfer count	
 29615                                  ;	ES:BP = Base of drive parameters
 29616                                  ;	[READOP] = 0 for read, 1 for write
 29617                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 29618                                  ; Output:
 29619                                  ;	[FAILERR] will be set if user responded FAIL
 29620                                  ;
 29621                                  ;--------------------------------------------------------------------------
 29622                                  
 29623                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29624                                  HARDERR:
 29625                                  	; 05/05/2019 - Retro DOS v4.0
 29626                                  	; 30/07/2018
 29627                                  	; 08/07/2018 - Retro DOS v3.0
 29628 0000532A 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 29629                                          ;and	di,0FFh
 29630 0000532B 81E7FF00                	AND     DI,STECODE              ; And off status bits
 29631                                          ;CMP	DI,WRECODE		; Write Protect Error?
 29632                                  	;cmp	di,0
 29633 0000532F 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 29634 00005332 750A                            JNZ     short NOSETWRPERR
 29635 00005334 50                              PUSH    AX
 29636                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29637                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29638                                          ;;MOV	AL,[ES:BP+0]
 29639                                  	; 15/12/2022
 29640 00005335 268A4600                	mov	al,[ES:BP]
 29641                                          	; 15/03/2018
 29642 00005339 36A2[2203]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 29643 0000533D 58                              POP     AX
 29644                                  NOSETWRPERR:
 29645 0000533E 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 29646 00005340 01C2                            ADD     DX,AX                   ; First sector number to retry
 29647 00005342 52                              PUSH    DX
 29648                                  	; 08/07/2018
 29649                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 29650 00005343 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 29651 00005347 5A                              POP     DX
 29652 00005348 01C3                            ADD     BX,AX                   ; First address for retry
 29653 0000534A 30E4                            XOR     AH,AH                   ; Flag disk section in error
 29654                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 29655 0000534C 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 29656 00005350 721A                            JB      SHORT ERRINT
 29657 00005352 FEC4                            INC     AH                      ; Flag for FAT
 29658                                          ;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 29659                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019 	
 29660 00005354 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 29661 00005358 7308                    	JAE	short TESTDIR 		; No
 29662                                  		 ; Err in FAT must force recomp of freespace
 29663                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 29664                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 29665 0000535A 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 29666 00005360 EB0A                    	JMP	SHORT ERRINT
 29667                                  TESTDIR:
 29668 00005362 FEC4                            INC     AH
 29669                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 29670 00005364 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 29671 00005368 7202                            JB      SHORT ERRINT
 29672 0000536A FEC4                            INC     AH                      ; Must be in data area
 29673                                  ERRINT:
 29674 0000536C D0E4                            SHL     AH,1                    ; Make room for read/write bit
 29675 0000536E 360A26[7505]                    OR      AH,[SS:READOP] ; 15/03/2018
 29676                                  
 29677                                  	; 15/08/2018
 29678                                  					; SS override for allowed and EXITHOLD
 29679 00005373 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 29680                                  
 29681                                          ;entry   FATAL
 29682                                  FATAL:
 29683                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29684                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29685                                          ;;MOV	AL,[ES:BP+0]		; Get drive number
 29686                                  	; 15/12/2022
 29687 00005378 268A4600                	MOV	AL,[ES:BP]        
 29688                                  
 29689                                  	;entry   FATAL1
 29690                                  FATAL1:  
 29691                                  	; 15/03/2018      
 29692 0000537C 368C06[8205]            	MOV     [SS:EXITHOLD+2],ES
 29693 00005381 36892E[8005]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 29694                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 29695                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 29696 00005386 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 29697 0000538A 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 29698                                  
 29699                                  	; DI has the INT-24-style extended error. We now map the error code 
 29700                                  	; for this into the normalized get extended error set by using the 
 29701                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 29702                                  	; the device returned codes and leave all others beyond the look up 
 29703                                  	; table alone.
 29704                                  
 29705                                  	; 08/07/2018 - Retro DOS v3.0
 29706                                  FATALC:
 29707 0000538C E89701                  	call	SET_I24_EXTENDED_ERROR
 29708                                  	;cmp	di,0Ch
 29709 0000538F 83FF0C                  	CMP	DI,error_I24_gen_failure
 29710 00005392 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 29711 00005394 BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 29712                                  					;  Only come via GetExtendedError
 29713                                  ;** ----------------------------------------------------------------
 29714                                  ;
 29715                                  ; Entry point used by REDIRector on Network I 24 errors.
 29716                                  ;
 29717                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 29718                                  ;
 29719                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 29720                                  ;     EXITHOLD set for restore of ES:BP.
 29721                                  ; ------------------------------------------------------------------
 29722                                  	;entry	NET_I24_ENTRY
 29723                                  NET_I24_ENTRY:
 29724                                  GOT_RIGHT_CODE:
 29725 00005397 36803E[2003]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 29726 0000539D 7404                            JZ	SHORT NoSetFail
 29727 0000539F B003                    	MOV	AL,3
 29728 000053A1 EB6C                    	JMP	short FailRet
 29729                                  NoSetFail:
 29730 000053A3 368926[8805]                    MOV     [SS:CONTSTK],SP		; SS override
 29731 000053A8 16                              PUSH	SS
 29732 000053A9 07                              POP	ES
 29733                                      
 29734                                  	; Wango!!! We may need to free some user state info... In 
 29735                                  	; particular, we may have locked down a JFN for a user and he may 
 29736                                  	; NEVER return to us. Thus,we need to free it here and then 
 29737                                  	; reallocate it when we come back.
 29738                                  
 29739 000053AA 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 29740 000053B0 740C                    	JZ	short _NoFree
 29741 000053B2 1E                      	push	ds
 29742 000053B3 56                      	push	si
 29743 000053B4 36C536[AE05]            	LDS	SI,[SS:PJFN]
 29744 000053B9 C604FF                  	MOV	BYTE [SI],0FFH
 29745 000053BC 5E                      	pop	si
 29746 000053BD 1F                      	pop	ds
 29747                                  
 29748                                  _NoFree:
 29749 000053BE FA                      	CLI
 29750                                  					; Prepare to play with stack
 29751 000053BF 36FE06[2003]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 29752 000053C4 36FE0E[2103]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 29753                                  
 29754                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29755                                  
 29756                                  	;; Extended Open hooks
 29757                                  					; AN000;IFS.I24 error disabled
 29758                                  	;test	byte [ss:EXTOPEN_ON],2
 29759 000053C9 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 29760 000053CF 7404                    	JZ	short i24yes		; AN000;IFS.no
 29761                                  faili24:				; AN000;
 29762 000053D1 B003                    	MOV	AL,3			; AN000;IFS.fake fail
 29763 000053D3 EB29                    	JMP	short passi24 		; AN000;IFS.exit
 29764                                  i24yes: 				; AN000;
 29765                                  	;; Extended Open hooks
 29766                                  
 29767 000053D5 368E16[8605]                    MOV     SS,[SS:USER_SS]
 29768 000053DA 268B26[8405]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 29769                                  
 29770                                  	;;int	24h	
 29771                                          ;IN	int_fatal_abort		; Fatal error interrupt vector,
 29772                                  					; must preserve ES
 29773                                  	; 05/05/2019
 29774 000053DF 26803E[F711]00          	cmp	byte [es:DosHasHMA], 0	; Q: is dos running in HMA (M021)
 29775 000053E5 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 29776 000053E7 CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 29777                                  					; must preserve ES
 29778 000053E9 EB05                    	jmp	short criterr_ret_addr
 29779                                  
 29780                                  do_low_int24:
 29781                                  	; 05/05/2019
 29782                                  	; MSDOS 6.0
 29783 000053EB 2EFF1E[D250]            	call    far [cs:LowInt24Addr]
 29784                                  criterr_ret_addr:
 29785 000053F0 268926[8405]                    MOV     [ES:USER_SP],SP         ; restore our stack
 29786 000053F5 268C16[8605]                    MOV     [ES:USER_SS],SS
 29787 000053FA 8CC5                            MOV     BP,ES
 29788 000053FC 8ED5                            MOV     SS,BP
 29789                                  passi24:
 29790 000053FE 368B26[8805]                    MOV     SP,[SS:CONTSTK]
 29791 00005403 36FE06[2103]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 29792 00005408 36C606[2003]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 29793 0000540E FB                              STI
 29794                                  FailRet:
 29795 0000540F 36C42E[8005]                    LES     BP,[SS:EXITHOLD]
 29796                                  	
 29797                                  	; 08/07/2018
 29798                                  
 29799                                  	; Triage the user's reply.
 29800                                  
 29801 00005414 3C01                    	CMP	AL,1
 29802 00005416 723D                    	JB	short CheckIgnore	; 0 => ignore
 29803 00005418 7445                    	JZ	short CheckRetry	; 1 => retry
 29804 0000541A 3C03                    	CMP	AL,3			; 3 => fail
 29805 0000541C 754B                    	JNZ	short DoAbort 		; 2, invalid => abort
 29806                                  
 29807                                  	; The reply was fail. See if we are allowed to fail.
 29808                                  
 29809                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 29810                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 29811                                  	;test	byte [ss:ALLOWED],8
 29812 0000541E 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 29813 00005424 7443                    	jz	short DoAbort	; No, do abort
 29814                                  DoFail:
 29815 00005426 B003                    	MOV	AL,3		; just in case...
 29816                                  				; AN000;EO. I24 error disabled
 29817                                  	; 05/05/2019
 29818                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 29819 00005428 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 29820 0000542E 7505                    	jnz	short CleanUp 		; AN000;EO. no
 29821                                  	
 29822 00005430 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 29823                                  CleanUp:
 29824 00005435 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 29825 0000543B 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 29826                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29827                                  	;jnz	short CleanUp2
 29828                                  	;retn
 29829                                  	; 17/12/2022
 29830 00005441 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 29831                                  CleanUp2:
 29832 00005443 1E                      	push	ds
 29833 00005444 56                      	push	si
 29834 00005445 50                      	push	ax
 29835 00005446 36A1[AA05]              	MOV	AX,[ss:SFN]
 29836 0000544A 36C536[AE05]            	LDS	SI,[ss:PJFN]
 29837 0000544F 8804                    	MOV	[SI],AL
 29838 00005451 58                      	pop	ax
 29839 00005452 5E                      	pop	si
 29840 00005453 1F                      	pop	ds
 29841                                  Cleanup_retn:
 29842 00005454 C3                      	retn
 29843                                  
 29844                                  	; The reply was IGNORE. See if we are allowed to ignore.
 29845                                  
 29846                                  CheckIgnore:
 29847                                  	;test	byte [ss:ALLOWED],20h
 29848 00005455 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 29849 0000545B 74C9                    	jz	short DoFail			 ; No, do fail
 29850 0000545D EBD6                    	jmp	short CleanUp
 29851                                  
 29852                                  	; The reply was RETRY. See if we are allowed to retry.
 29853                                  
 29854                                  CheckRetry:
 29855                                  	;test	byte [ss:ALLOWED],10h
 29856 0000545F 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 29857 00005465 74BF                    	jz	short DoFail			; No, do fail
 29858 00005467 EBCC                    	JMP	short CleanUp
 29859                                  
 29860                                  	; The reply was ABORT.
 29861                                  DoAbort:
 29862 00005469 16                      	push	ss
 29863 0000546A 1F                      	pop	ds
 29864                                  
 29865 0000546B 803E[5703]00            	CMP	byte [CONSWAP],0
 29866 00005470 7403                    	JZ	short NOSWAP2
 29867 00005472 E871DE                  	call	SWAPBACK
 29868                                  NOSWAP2:
 29869                                  	; See if we are to truly abort. If we are in the process of aborting, 
 29870                                  	; turn this abort into a fail.
 29871                                  
 29872                                  	;test	[fAborting],0FFh
 29873                                  	;jnz	short DoFail
 29874                                  
 29875 00005475 803E[5903]00            	cmp	byte [fAborting],0
 29876 0000547A 75AA                    	JNZ	short DoFail
 29877                                  
 29878                                  	; Set return code
 29879                                  
 29880 0000547C C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 29881 00005481 30C0                    	XOR	AL,AL
 29882                                  
 29883                                  	; we are truly aborting the process. Go restore information from 
 29884                                  	; the PDB as necessary.
 29885                                  
 29886 00005483 E9850D                  	jmp	exit_inner
 29887                                  
 29888                                  ;** --------------------------------------------------------------------------
 29889                                  ;
 29890                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 29891                                  ; different, then an old-style return is performed. If they are the same,
 29892                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 29893                                  ; the source of the terminate addresses.
 29894                                  ;
 29895                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 29896                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 29897                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 29898                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 29899                                  ; flag that will indicate that if any abort code is seen, we just continue the
 29900                                  ; operation. In essence, we dis-allow the abort response.
 29901                                  ;
 29902                                  ; output:   none.
 29903                                  ; ----------------------------------------------------------------------------
 29904                                  
 29905                                  	;entry	reset_environment
 29906                                  	
 29907                                  reset_environment:
 29908                                  	; 30/07/2018 - Retro DOS v3.0
 29909                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 29910                                  
 29911                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 29912                                  
 29913 00005486 1E                      	PUSH	DS			; save PDB of process
 29914                                  
 29915                                  	; There are no critical sections in force. Although we may enter 
 29916                                  	; here with critical sections locked down, they are no longer 
 29917                                  	; relevant. We may safely free all allocated resources.
 29918                                  
 29919 00005487 B482                    	MOV	AH,82h
 29920                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 29921                                  	;int	2Ah 	
 29922 00005489 CD2A                    	INT	int_IBM
 29923                                  
 29924                                  					; SS override
 29925 0000548B 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 29926                                  
 29927                                  					; DOS 4.00 doesn't need it
 29928                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 29929                                  					; Allow REDIR to clear some stuff
 29930                                  					; On process exit.
 29931 00005491 B82211                  	mov     ax, 1122h
 29932 00005494 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 29933                                  			; SS = DOS CS
 29934                                  	;mov	al,22h	
 29935 00005496 B022                    	MOV	AL,int_terminate
 29936 00005498 E8FEB9                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 29937                                  
 29938 0000549B 59                      	POP	CX			; get ThisPDB
 29939 0000549C 06                      	push	es
 29940 0000549D 53                      	push	bx			; save return address
 29941                                  
 29942 0000549E 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 29943 000054A3 8EDB                    	MOV	DS,BX
 29944 000054A5 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 29945                                  
 29946                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 29947                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 29948                                  	; is not Exit_keep_process
 29949                                  	
 29950 000054A8 39D8                    	CMP	AX,BX
 29951 000054AA 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 29952 000054AC 39CB                    	CMP	BX,CX
 29953 000054AE 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 29954 000054B0 50                      	PUSH	AX			; save parent
 29955                                  
 29956                                  					; SS override
 29957                                  	;cmp	byte [SS:EXIT_TYPE],3
 29958 000054B1 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 29959 000054B7 7406                    	JZ	short reset_to_parent 	; keeping this process
 29960                                  
 29961                                  	; We are truly removing a process. Free all allocation blocks 
 29962                                  	; belonging to this PDB
 29963                                  
 29964                                  	;invoke	arena_free_process
 29965 000054B9 E8870D                  	call	arena_free_process
 29966                                  
 29967                                  	; Kill off remainder of this process. Close file handles and signal 
 29968                                  	; to relevant network folks that this process is dead. Remember that 
 29969                                  	; CurrentPDB is STILL the current process!
 29970                                  
 29971                                  	;invoke	DOS_ABORT
 29972 000054BC E82EDA                  	call	DOS_ABORT
 29973                                  
 29974                                  reset_to_parent:
 29975                                  					; SS override
 29976 000054BF 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 29977                                  
 29978                                  reset_return:				; come here for normal return
 29979                                  	;Context DS			; DS is used to refer to DOSDATA  
 29980 000054C4 16                      	push	ss
 29981 000054C5 1F                      	pop	ds	
 29982                                  
 29983 000054C6 B0FF                    	MOV	AL,-1
 29984                                  
 29985                                  	; make sure that everything is clean In this case ignore any errors, 
 29986                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 29987                                  
 29988                                  	;EnterCrit critDisk
 29989 000054C8 E84BBE                  	call	ECritDisk
 29990                                  	;invoke	FLUSHBUF
 29991 000054CB E8A505                  	call	FLUSHBUF
 29992                                  	;LeaveCrit critDisk
 29993 000054CE E860BE                  	call	LCritDisk
 29994                                  
 29995                                  	; Decrement open ref. count if we had done a virtual open earlier.
 29996                                  
 29997 000054D1 E883F7                  	call	CHECK_VIRT_OPEN
 29998 000054D4 FA                      	CLI
 29999 000054D5 C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 30000 000054DA C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 30001 000054DF C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 30002 000054E4 8F06[8005]              	POP	WORD [EXITHOLD]
 30003 000054E8 8F06[8205]              	POP	WORD [EXITHOLD+2]
 30004                                  
 30005                                  	; Snake into multitasking... Get stack from CurrentPDB person
 30006                                  
 30007 000054EC 8E1E[3003]              	MOV	DS,[CurrentPDB]
 30008 000054F0 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 30009 000054F4 8B262E00                	MOV	SP,[PDB.USER_STACK]
 30010                                  
 30011 000054F8 E854AF                  	call	restore_world
 30012                                  
 30013                                  	; 05/05/2019
 30014 000054FB 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 30015                                  
 30016                                  	; MSDOS 6.0
 30017 000054FC 50                      	push	ax			; set up ds, but save ds in TEMPSEG 
 30018 000054FD 8CD8                    	mov	ax,ds			; and not on stack.
 30019                                  	;getdseg <ds>			; ds -> dosdata
 30020 000054FF 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 30021 00005504 A3[0A0D]                	mov	[TEMPSEG],ax
 30022 00005507 58                      	pop	ax
 30023                                  					; set up ds to DOSDATA
 30024                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 30025 00005508 A3[8405]                	mov	[USER_SP],ax
 30026                                  
 30027 0000550B 58                      	POP	AX			; suck off CS:IP of interrupt...
 30028 0000550C 58                      	POP	AX
 30029 0000550D 58                      	POP	AX
 30030                                  
 30031                                  ; M011 : BEGIN
 30032                                  
 30033                                  	; MSDOS 3.3
 30034                                  ;	MOV	AX,0F202h	; STI
 30035                                  
 30036                                  	; MSDOS 6.0
 30037 0000550E 9F                      	LAHF
 30038 0000550F 86E0                    	XCHG	AH,AL
 30039 00005511 2402                    	AND	AL,2
 30040 00005513 B4F2                    	MOV	AH,0F2h
 30041                                  
 30042                                  ; M011 : END
 30043                                  
 30044                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30045 00005515 50                      	PUSH	AX
 30046                                   
 30047                                  	;PUSH	word [CS:EXITHOLD+2]
 30048                                  	;PUSH	word [CS:EXITHOLD]
 30049                                  	
 30050                                  	; MSDOS 6.0
 30051 00005516 FF36[8205]              	PUSH	word [EXITHOLD+2]
 30052 0000551A FF36[8005]              	PUSH	word [EXITHOLD]
 30053                                  
 30054                                  	;MOV	AX,[CS:USER_SP]
 30055                                  
 30056                                  	; MSDOS 6.0
 30057 0000551E A1[8405]                	MOV	AX,[USER_SP]
 30058 00005521 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 30059                                  
 30060 00005525 CF                      	IRET			; Long return back to user terminate address
 30061                                  
 30062                                  ;---------------------------------------------------------------------------
 30063                                  ;
 30064                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 30065                                  ;
 30066                                  ; This routine handles extended error codes.
 30067                                  ; Input : DI = error code from device
 30068                                  ; Output: All EXTERR fields are set
 30069                                  ;
 30070                                  ;--------------------------------------------------------------------------
 30071                                  
 30072                                  SET_I24_EXTENDED_ERROR:
 30073 00005526 50                      	PUSH	AX
 30074                                  					; ErrMap24End is in DOSDATA
 30075 00005527 B8[BB0E]                	MOV	AX,ErrMap24End
 30076 0000552A 2D[AB0E]                	SUB	AX,ErrMap24
 30077                                  					; Change to dosdata to access 
 30078                                  					; ErrMap24 and EXTERR -SR
 30079                                  	; 05/05/2019 - Retro DOS v4.0
 30080                                  	
 30081                                  	; MSDOS 6.0
 30082 0000552D 1E                      	push	ds
 30083                                  	;getdseg <ds>			; ds ->dosdata
 30084 0000552E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30085                                  
 30086                                  	; AX is the index of the first unavailable error. Do not translate 
 30087                                  	; if greater or equal to AX.
 30088                                  
 30089 00005533 39C7                    	CMP	DI,AX
 30090 00005535 89F8                    	MOV	AX,DI
 30091 00005537 7306                    	JAE	short NoTrans
 30092                                  
 30093                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 30094 00005539 8A85[AB0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 30095 0000553D 30E4                    	XOR	AH,AH
 30096                                  NoTrans:
 30097                                  	;MOV	[CS:EXTERR],AX
 30098 0000553F A3[2403]                	mov	[EXTERR],AX
 30099 00005542 1F                      	pop	ds
 30100                                  	;assume	ds:nothing
 30101 00005543 58                      	POP	AX
 30102                                  
 30103                                  	; Now Extended error is set correctly. Translate it to get correct 
 30104                                  	; error locus class and recommended action.
 30105                                  
 30106 00005544 56                      	PUSH	SI
 30107                                  					; ERR_TABLE_24 is in DOSCODE 
 30108 00005545 BE[5B0E]                	MOV	SI,ERR_TABLE_24
 30109 00005548 E833B1                  	call	CAL_LK			; Set other extended error fields
 30110 0000554B 5E                      	POP	SI
 30111 0000554C C3                      	retn
 30112                                  
 30113                                  ;============================================================================
 30114                                  ; FAT.ASM, MSDOS 6.0, 1991
 30115                                  ;============================================================================
 30116                                  ; 30/07/2018 - Retro DOS v3.0
 30117                                  ; 20/05/2019 - Retro DOS v4.0
 30118                                  
 30119                                  ;	TITLE	FAT - FAT maintenance routines
 30120                                  ;	NAME	FAT
 30121                                  
 30122                                  ;**	FAT.ASM
 30123                                  ;----------------------------------------------------------------------------
 30124                                  ;	Low level local device routines for performing disk change sequence,
 30125                                  ;	setting cluster validity, and manipulating the FAT
 30126                                  ;
 30127                                  ;	IsEof
 30128                                  ;	UNPACK
 30129                                  ;	PACK
 30130                                  ;	MAPCLUSTER
 30131                                  ;	FATREAD_SFT
 30132                                  ;	FATREAD_CDS
 30133                                  ;	FAT_operation
 30134                                  ;
 30135                                  ;	Revision history:
 30136                                  ;
 30137                                  ;	  AN000  version Jan. 1988
 30138                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 30139                                  ;
 30140                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 30141                                  ;	       from CL0FATENTRY rather than disk.
 30142                                  
 30143                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 30144                                  
 30145                                  ;Break <IsEOF - check the quantity in BX for EOF>
 30146                                  ;----------------------------------------------------------------------------
 30147                                  ;
 30148                                  ; Procedure Name : IsEOF
 30149                                  ;
 30150                                  ; IsEOF - check the fat value in BX for eof.
 30151                                  ;
 30152                                  ;   Inputs:	ES:BP point to DPB
 30153                                  ;		BX has fat value
 30154                                  ;   Outputs:	JAE eof
 30155                                  ;   Registers modified: none
 30156                                  ;
 30157                                  ;---------------------------------------------------------------------------
 30158                                  
 30159                                  IsEOF:
 30160                                  	;cmp	word [es:bp+0Dh],0FF6h
 30161 0000554D 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 30162 00005553 730B                    	JAE	short EOF16			; yes, check for eof there
 30163                                  
 30164                                  ;J.K. 8/27/86
 30165                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 30166                                  ;of any media that has "F0"(Other) as a MediaByte.
 30167                                  ;Hopely, this does not create any side effect for those who may use any value
 30168                                  ;other than "FF8-FFF" as an EOF for their own file.
 30169                                  
 30170 00005555 81FBF00F                	cmp	bx,0FF0h
 30171 00005559 7404                    	je	short IsEOF_other
 30172                                  
 30173 0000555B 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 30174                                  IsEOF_other:
 30175 0000555F C3                      	retn
 30176                                  EOF16:
 30177 00005560 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 30178 00005563 C3                      	retn
 30179                                  
 30180                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 30181                                  
 30182                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 30183                                  ;---------------------------------------------------------------------------
 30184                                  ;
 30185                                  ; Procedur Name : UNPACK
 30186                                  ;
 30187                                  ; Inputs:
 30188                                  ;	BX = Cluster number (may be full 16-bit quantity)
 30189                                  ;	ES:BP = Base of drive parameters
 30190                                  ; Outputs:
 30191                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 30192                                  ;	Zero set means DI=0 (free cluster)
 30193                                  ;	Carry set means error (currently user FAILed to I 24)
 30194                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 30195                                  ;
 30196                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 30197                                  ;
 30198                                  ;----------------------------------------------------------------------------
 30199                                  	
 30200                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30201                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 30202                                  
 30203                                  	; 20/05/2019 - Retro DOS v4.0
 30204                                  UNPACK:
 30205                                  	; MSDOS 6.0			; M014 - Start
 30206 00005564 09DB                    	or	bx, bx			; Q: are we unpacking cluster 0
 30207 00005566 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 30208 00005568 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 30209 0000556C 09FF                    	or	di,di 			; return z if di=0
 30210 0000556E C3                      	retn				; done
 30211                                  up_cont:				; M014 - End
 30212                                  	; MSDOS 3.3 & MSDOS 6.0
 30213                                  	;cmp	bx,[es:bp+0Dh]
 30214 0000556F 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 30215 00005573 7726                    	JA	short HURTFAT
 30216 00005575 E8D600                  	CALL	MAPCLUSTER
 30217 00005578 721E                    	jc	short _DoContext
 30218 0000557A 8B3D                    	MOV	DI,[DI]
 30219 0000557C 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 30220 0000557E 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 30221 00005582 81FEF60F                	CMP	SI,4096-10
 30222 00005586 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 30223 00005588 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 30224 0000558A EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 30225                                  High12:
 30226 0000558C D1EF                    	SHR	DI,1
 30227 0000558E D1EF                    	SHR	DI,1
 30228 00005590 D1EF                    	SHR	DI,1
 30229 00005592 D1EF                    	SHR	DI,1
 30230                                  Unpack12:
 30231 00005594 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 30232                                  _DoContext:
 30233 00005598 16                      	PUSH	SS
 30234 00005599 1F                      	POP	DS
 30235 0000559A C3                      	retn
 30236                                  HURTFAT:
 30237                                  	;;mov	word [es:bp+1Eh],0FFFFh
 30238                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30239 0000559B 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 30240 000055A1 50                      	PUSH	AX
 30241 000055A2 B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 30242                                  
 30243                                  ;hkn; SS override
 30244 000055A4 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 30245                                  ;
 30246                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 30247                                  ;
 30248 000055AA BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 30249 000055AD E8C8FD                  	call	FATAL
 30250 000055B0 3C03                    	CMP	AL,3
 30251 000055B2 F8                      	CLC
 30252 000055B3 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 30253 000055B5 F9                      	STC				; User said FAIL
 30254                                  OKU_RET:
 30255 000055B6 58                      	POP	AX
 30256                                  hurtfat_retn:
 30257 000055B7 C3                      	retn
 30258                                  
 30259                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 30260                                  
 30261                                  ;Break	<PACK -- PACK FAT ENTRIES>
 30262                                  ;----------------------------------------------------------------------------
 30263                                  ;
 30264                                  ; Procedure Name : PACK
 30265                                  ;
 30266                                  ; Inputs:
 30267                                  ;	BX = Cluster number
 30268                                  ;	DX = Data
 30269                                  ;	ES:BP = Pointer to drive DPB
 30270                                  ; Outputs:
 30271                                  ;	The data is stored in the FAT at the given cluster.
 30272                                  ;	SI,DX,DI all destroyed
 30273                                  ;	Carry set means error (currently user FAILed to I 24)
 30274                                  ;	No other registers affected
 30275                                  ;
 30276                                  ; NOTE: if BX = 0 then data in DX is atored in CL0FATENTRY.
 30277                                  ;
 30278                                  ;---------------------------------------------------------------------------
 30279                                  
 30280                                  	; 02/01/2024
 30281                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30282                                  	; 20/05/2019 - Retro DOS v4.0
 30283                                  PACK:
 30284                                  	; MSDOS 6.0			; M014 - start
 30285 000055B8 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 30286 000055BA 7505                    	jnz	short p_cont		; N: proceed with normal pack
 30287 000055BC 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 30288 000055C0 C3                      	retn				; done
 30289                                  p_cont:					; M014 - end
 30290                                  	; MSDOS 3.3 & MSDOS 6.0
 30291 000055C1 E88A00                  	CALL	MAPCLUSTER
 30292 000055C4 72D2                    	JC	short _DoContext
 30293 000055C6 8B35                    	MOV	SI,[DI]
 30294 000055C8 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 30295 000055CA 51                      	PUSH	CX			; move data to upper 12 bits
 30296 000055CB B104                    	MOV	CL,4
 30297 000055CD D3E2                    	SHL	DX,CL
 30298 000055CF 59                      	POP	CX
 30299 000055D0 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 30300 000055D3 EB14                    	JMP	SHORT PACKIN
 30301                                  ALIGNED:
 30302                                  	;cmp	word [es:bp+0Dh],0FF6h
 30303 000055D5 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 30304 000055DB 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 30305 000055DD 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 30306 000055E1 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 30307 000055E5 EB02                    	JMP	SHORT PACKIN		; MZ go store
 30308                                  Pack16:
 30309 000055E7 31F6                    	XOR	SI,SI			; MZ no original data
 30310                                  PACKIN:
 30311 000055E9 09D6                    	OR	SI,DX
 30312 000055EB 8935                    	MOV	[DI],SI
 30313                                  
 30314                                  ;hkn; SS override
 30315 000055ED 36C536[E205]            	LDS	SI,[SS:CURBUF]
 30316                                  	; MSDOS 6.0
 30317 000055F2 F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30318                                  					;LB. if already dirty		  ;AN000;
 30319 000055F6 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 30320                                  	; 10/06/2019
 30321 000055F8 E87D05                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 30322                                  	
 30323                                  	;or	byte [si+5],40h
 30324 000055FB 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30325                                  yesdirty11:				;LB.				;AN000;
 30326                                  ;hkn; SS override
 30327 000055FF 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 30328                                  ;hkn; SS is DOSDATA
 30329 00005605 16                      	push	ss
 30330 00005606 1F                      	pop	ds
 30331 00005607 74AE                    	jz	short hurtfat_retn	; Carry clear
 30332 00005609 50                      	PUSH	AX
 30333 0000560A 53                      	PUSH	BX
 30334 0000560B 51                      	PUSH	CX
 30335 0000560C A1[8E05]                	MOV	AX,[CLUSSAVE]
 30336 0000560F 8E1E[E405]              	MOV	DS,[CURBUF+2]
 30337                                  	;;add	si,16 ; MSDOS 3.3
 30338                                  	;add	si,20 ; MSDOS 6.0
 30339 00005613 83C614                  	ADD	SI,BUFINSIZ
 30340 00005616 8824                    	MOV	[SI],AH
 30341                                  ;hkn; SS is DOSDATA
 30342                                  	;Context DS
 30343 00005618 16                      	push	ss
 30344 00005619 1F                      	pop	ds
 30345                                  	
 30346 0000561A 50                      	PUSH	AX
 30347                                  	
 30348                                  	; MSDOS 6.0
 30349 0000561B 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 30350 0000561F 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 30351                                  
 30352                                  	; MSDOS 3.3 & MSDOS 6.0
 30353 00005623 8B16[9005]              	MOV	DX,[CLUSSEC]
 30354                                  
 30355                                  	;MOV	SI,1	  ; *
 30356                                  	;XOR	AL,AL     ; *
 30357                                  	;call	GETBUFFRB ; *
 30358                                  	; 22/09/2023
 30359 00005627 E83E03                  	call	GETBUFFRA ; *
 30360                                  
 30361 0000562A 58                      	POP	AX
 30362 0000562B 721B                    	JC	short POPP_RET
 30363 0000562D C53E[E205]              	LDS	DI,[CURBUF]
 30364                                  	
 30365                                  	; MSDOS 6.0
 30366 00005631 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 30367                                  					;LB. if already dirty		  ;AN000;
 30368 00005635 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 30369 00005637 E83E05                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 30370                                  	
 30371                                  	;or	byte [di+5],40h
 30372 0000563A 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 30373                                  yesdirty12:
 30374                                  	;;add	di,16
 30375                                  	;add	di,20 ; MSDOS 6.0
 30376                                  	; 02/01/2024
 30377                                  	;ADD	DI,BUFINSIZ
 30378                                  	;DEC	DI
 30379 0000563E 83C713                  	add	di,BUFINSIZ-1 ; 19
 30380                                  
 30381                                  	;add	di,[es:bp+2]
 30382 00005641 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 30383 00005645 8805                    	MOV	[DI],AL
 30384 00005647 F8                      	CLC
 30385                                  POPP_RET:
 30386 00005648 16                      	PUSH	SS
 30387 00005649 1F                      	POP	DS
 30388 0000564A 59                      	POP	CX
 30389 0000564B 5B                      	POP	BX
 30390 0000564C 58                      	POP	AX
 30391 0000564D C3                      	retn
 30392                                  
 30393                                  ; 31/07/2018 - Retro DOS v3.0
 30394                                  
 30395                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 30396                                  ;---------------------------------------------------------------------------
 30397                                  ;
 30398                                  ; Procedure Name : MAPCLUSTER
 30399                                  ;
 30400                                  ; Inputs:
 30401                                  ;	ES:BP Points to DPB
 30402                                  ;	BX Is cluster number
 30403                                  ; Function:
 30404                                  ;	Get a pointer to the cluster
 30405                                  ; Outputs:
 30406                                  ;	DS:DI Points to contents of FAT for given cluster
 30407                                  ;	DS:SI Points to start of buffer
 30408                                  ;	Zero Not set if cluster data is in high 12 bits of word
 30409                                  ;	Zero set if cluster data is in low 12 or 16 bits
 30410                                  ;	Carry set if failed.
 30411                                  ; SI is destroyed.
 30412                                  ;
 30413                                  ;---------------------------------------------------------------------------
 30414                                  
 30415                                  	; 20/05/2019 - Retro DOS v4.0
 30416                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 30417                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30418                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 30419                                  
 30420                                  MAPCLUSTER:
 30421                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 30422 0000564E C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 30423                                  	;SAVE	<AX,BX,CX,DX>
 30424 00005653 50                      	push	ax
 30425 00005654 53                      	push	bx
 30426 00005655 51                      	push	cx
 30427 00005656 52                      	push	dx
 30428 00005657 89D8                    	MOV	AX,BX			; AX = BX
 30429 00005659 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 30430 0000565F 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 30431 00005661 D1E8                    	SHR	AX,1			; AX = BX/2
 30432                                  Map16:	
 30433                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 30434 00005663 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 30435                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30436 00005665 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 30437 00005667 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 30438 00005669 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 30439                                  
 30440                                  ;IF FastDiv
 30441                                  ;
 30442                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 30443                                  ; case and apply a really fast algorithm to get the desired results
 30444                                  ;
 30445                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 30446                                  ; Fast method takes 39+20*4=119
 30447                                  ;
 30448                                  ; This saves a bunch.
 30449                                  
 30450 0000566D 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 30451 00005671 7510                    	jne	short _DoDiv		; 4  for no jump
 30452 00005673 89C2                    	MOV	DX,AX			; 2  get set for remainder
 30453 00005675 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 30454 00005679 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 30455                                  	; MDOS 3.3
 30456                                  	;shr	al,1	
 30457                                  	; MDOS 6.0
 30458 0000567B D1EF                    	shr	di,1			; 2
 30459 0000567D D0D8                    	rcr	al,1			; 2
 30460                                  	; MDOS 3.3 (& MSDOS 6.0)
 30461 0000567F 30E4                    	xor	ah,ah			; 3
 30462 00005681 EB04                    	jmp	short DivDone		; 16
 30463                                  _DoDiv:
 30464                                  ;ENDIF
 30465                                  	; MSDOS 3.3
 30466                                  	;xor	dx,dx
 30467                                  	; MSDOS 6.0
 30468 00005683 89FA                    	mov	dx,di			; 2
 30469                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 30470 00005685 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 30471                                  ;IF FastDiv
 30472                                  DivDone:
 30473                                  ;ENDIF
 30474                                  	;add	ax,[es:bp+6]
 30475 00005687 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 30476 0000568B 49                      	DEC	CX			; CX is sector size - 1
 30477                                  	;SAVE	<AX,DX,CX>
 30478 0000568C 50                      	push	ax
 30479 0000568D 52                      	push	dx
 30480 0000568E 51                      	push	cx
 30481 0000568F 89C2                    	MOV	DX,AX
 30482                                  
 30483                                  	; MSDOS 6.0
 30484                                  	; 22/09/2023
 30485                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb  low sector #
 30486                                  	;
 30487                                  	; MDOS 3.3 (& MSDOS 6.0)
 30488                                  	;XOR	AL,AL	   ; *
 30489                                  	;MOV	SI,1	   ; *
 30490                                  	;;invoke GETBUFFRB ; *
 30491                                  	;call	GETBUFFRB  ; *
 30492                                  	; 22/09/2023
 30493 00005691 E8CE02                  	call	GETBUFFRC  ; *!
 30494                                  
 30495                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 30496 00005694 59                      	pop	cx
 30497 00005695 58                      	pop	ax
 30498 00005696 5A                      	pop	dx
 30499 00005697 724C                    	JC	short MAP_POP
 30500                                  
 30501 00005699 C536[E205]              	LDS	SI,[CURBUF]
 30502                                  	;;lea	di,[si+16]
 30503                                  	;lea	di,[si+20] ; MSDOS 6.0
 30504 0000569D 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30505 000056A0 01C7                    	ADD	DI,AX
 30506 000056A2 39C8                    	CMP	AX,CX
 30507 000056A4 752C                    	JNZ	short MAPRET
 30508 000056A6 8A05                    	MOV	AL,[DI]
 30509                                  	;Context DS		 	;hkn; SS is DOSDATA
 30510 000056A8 16                      	push	ss
 30511 000056A9 1F                      	pop	ds	
 30512 000056AA FE06[7805]              	INC	BYTE [CLUSSPLIT]
 30513 000056AE A2[8E05]                	MOV	[CLUSSAVE],AL
 30514 000056B1 8916[9005]              	MOV	[CLUSSEC],DX
 30515                                  	; MSDOS 6.0
 30516 000056B5 C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb	;AN000;
 30517 000056BB 42                      	INC	DX
 30518                                  
 30519                                  	; 22/09/2023
 30520                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb FAT sector <32mb ;AN000;
 30521                                  	;
 30522                                  	; MDOS 3.3 (& MSDOS 6.0)
 30523                                  	;XOR	AL,AL	   ; *
 30524                                  	;MOV	SI,1	   ; *
 30525                                  	;;invoke GETBUFFRB ; *
 30526                                  	;call	GETBUFFRB  ; *
 30527                                  	; 22/09/2023
 30528 000056BC E8A302                  	call	GETBUFFRC  ; *!
 30529 000056BF 7224                    	JC	short MAP_POP
 30530                                  
 30531 000056C1 C536[E205]              	LDS	SI,[CURBUF]
 30532 000056C5 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30533 000056C8 8A05                    	MOV	AL,[DI]
 30534                                  	;Context DS			;hkn; SS is DOSDATA
 30535 000056CA 16                      	push	ss
 30536 000056CB 1F                      	pop	ds
 30537 000056CC A2[8F05]                	MOV	[CLUSSAVE+1],AL
 30538                                  
 30539                                  ;hkn; CLUSSAVE is in DOSDATA
 30540 000056CF BF[8E05]                	MOV	DI,CLUSSAVE
 30541                                  MAPRET:
 30542                                  	;RESTORE <DX,CX,BX>
 30543 000056D2 5A                      	pop	dx
 30544 000056D3 59                      	pop	cx
 30545 000056D4 5B                      	pop	bx
 30546 000056D5 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 30547 000056D7 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 30548 000056DD 7302                    	JAE	short MapSet		; MZ no, set flags
 30549 000056DF 89D8                    	MOV	AX,BX
 30550                                  MapSet:
 30551 000056E1 A801                    	TEST	AL,1			; set zero flag if not on boundary
 30552                                  	;RESTORE <AX>
 30553 000056E3 58                      	pop	ax
 30554 000056E4 C3                      	retn
 30555                                  
 30556                                  MAP_POP:
 30557                                  	;RESTORE <DX,CX,BX,AX>
 30558 000056E5 5A                      	pop	dx
 30559 000056E6 59                      	pop	cx
 30560 000056E7 5B                      	pop	bx
 30561 000056E8 58                      	pop	ax
 30562                                  fatread_sft_retn: ; 17/12/2022
 30563 000056E9 C3                      	retn
 30564                                  
 30565                                  ; 20/05/2019 - Retro DOS v4.0
 30566                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 30567                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30568                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 30569                                  
 30570                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 30571                                  ;----------------------------------------------------------------------------
 30572                                  ;
 30573                                  ; Procedure Name : FATREAD_SFT
 30574                                  ;
 30575                                  ; Inputs:
 30576                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 30577                                  ;		giving a NET SFT will produce system crashing results).
 30578                                  ;	DS DOSDATA
 30579                                  ; Function:
 30580                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 30581                                  ;	if disk changed.
 30582                                  ;	In other respects, same as FATREAD_CDS.
 30583                                  ;	(note ES:DI destroyed!)
 30584                                  ; Outputs:
 30585                                  ;	Carry set if error (currently user FAILed to I 24)
 30586                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 30587                                  ;	as far as invalidating curdir_ID is concerned.
 30588                                  ;	Since getting a true disk changed on this call is a screw up
 30589                                  ;	anyway, that's the way it goes.
 30590                                  ;
 30591                                  ;---------------------------------------------------------------------------
 30592                                  
 30593                                  FATREAD_SFT:
 30594 000056EA 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 30595                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30596                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30597                                  	; 15/12/2022
 30598 000056EE 268A4600                	mov	AL,[ES:BP]
 30599 000056F2 A2[7605]                	MOV	[THISDRV],AL
 30600 000056F5 E83AAF                  	call	GOTDPB			;Set THISDPB
 30601                                  	;CALL	FAT_GOT_DPB
 30602                                  	; 17/12/2022
 30603 000056F8 EB78                    	jmp	FAT_GOT_DPB
 30604                                  ;fatread_sft_retn:
 30605                                  	;retn
 30606                                  
 30607                                  ;----------------------------------------------------------------------------
 30608                                  ;
 30609                                  ; Procedure Name : FATREAD_CDS
 30610                                  ;
 30611                                  ; Inputs:
 30612                                  ;	DS:DOSDATA
 30613                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 30614                                  ;		giving a NET or NUL CDS will produce system crashing results).
 30615                                  ; Function:
 30616                                  ;	If disk may have been changed, media is determined and buffers are
 30617                                  ;	flagged invalid. If not, no action is taken.
 30618                                  ; Outputs:
 30619                                  ;	ES:BP = Drive parameter block
 30620                                  ;	THISDPB = ES:BP
 30621                                  ;	THISDRV set
 30622                                  ;	Carry set if error (currently user FAILed to I 24)
 30623                                  ; DS preserved , all other registers destroyed
 30624                                  ;
 30625                                  ;---------------------------------------------------------------------------
 30626                                  
 30627                                  	; 20/05/2019 - Retro DOS v4.0
 30628                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 30629                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30630                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 30631                                  
 30632                                  FATREAD_CDS:
 30633 000056FA 06                      	PUSH	ES
 30634 000056FB 57                      	PUSH	DI
 30635                                  	;les	bp,[es:di+45h]
 30636 000056FC 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 30637                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30638                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30639                                  	; 15/12/2022
 30640 00005700 268A4600                	mov	AL,[ES:BP]
 30641 00005704 A2[7605]                	MOV	[THISDRV],AL
 30642 00005707 E828AF                  	call	GOTDPB			;Set THISDPB
 30643 0000570A E86500                  	CALL	FAT_GOT_DPB
 30644 0000570D 5F                      	POP	DI			;Get back CDS pointer
 30645 0000570E 07                      	POP	ES
 30646 0000570F 72D8                    	jc	short fatread_sft_retn
 30647 00005711 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 30648                                  
 30649                                  ;	Media changed. We now need to find all CDS structures which use this
 30650                                  ;	DPB and invalidate their ID pointers.
 30651                                  
 30652                                  MED_CHANGE:
 30653 00005713 31C0                    	XOR	AX,AX
 30654 00005715 48                      	DEC	AX			; AX = -1
 30655 00005716 1E                      	PUSH	DS
 30656 00005717 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 30657 0000571B 30ED                    	XOR	CH,CH			; CX is number of structures
 30658                                  	;lds	si,[es:di+45h]
 30659 0000571D 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 30660                                  
 30661                                  ;hkn; SS override
 30662                                  
 30663                                  ;	Find all CDSs with this DevPtr
 30664                                  ;
 30665                                  ;	(ax) = -1
 30666                                  ;	(ds:si) = DevPtr
 30667                                  
 30668 00005721 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 30669                                  frcd20: 
 30670                                  	;;test	word [es:di+43h],8000h
 30671                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 30672 00005726 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 30673 0000572B 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 30674                                  
 30675                                  	; MSDOS 3.3
 30676                                  	;push	es
 30677                                  	;push	di
 30678                                  	;les	di,[es:di+45h]
 30679                                  	;;les	di,[ES:DI+curdir.devptr]
 30680                                  	;call	POINTCOMP
 30681                                  	;pop	di
 30682                                  	;pop	es
 30683                                  	;jnz	short frcd25
 30684                                  
 30685                                  	; MSDOS 6.0
 30686 0000572D 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 30687 00005731 7512                    	jne	short frcd25		; no match
 30688 00005733 8CDB                    	mov	bx,ds
 30689 00005735 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 30690 00005739 750A                    	jne	short frcd25		; CDS not for this drive
 30691                                  
 30692                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30693                                  	;test	[es:di+49h],ax
 30694 0000573B 26854549                	test	[ES:DI+curdir.ID],AX
 30695 0000573F 7404                    	JZ	short frcd25		; If root (0), leave root
 30696                                  	;mov	[es:di+49h],ax
 30697 00005741 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 30698                                  frcd25:	
 30699                                  	;;add	di,81  ; MSDOS 3.3
 30700                                  	;add	di,88  ; MSDOS 6.0	 
 30701 00005745 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 30702 00005748 E2DC                    	LOOP	frcd20
 30703 0000574A 1F                      	POP	DS
 30704                                  NO_CHANGE:
 30705 0000574B C42E[8A05]              	LES	BP,[THISDPB]
 30706 0000574F F8                      	CLC
 30707 00005750 C3                      	retn
 30708                                  
 30709                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 30710                                  ;----------------------------------------------------------------------------
 30711                                  ;
 30712                                  ; Procedure Name : FAT_operation
 30713                                  ;
 30714                                  ;----------------------------------------------------------------------------
 30715                                  
 30716                                  	; 03/01/2024
 30717                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30718                                  
 30719                                  FAT_operation:
 30720                                  	; 31/07/2018 - Retro DOS v3.0
 30721                                  FATERR:
 30722                                  	;mov	word [es:bp+1Eh],-1
 30723                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 30724 00005751 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 30725                                  					; Err in FAT must force recomp of freespace
 30726                                  	;and	di,0FFh
 30727 00005757 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 30728                                  	;mov	byte [ALLOWED],18h
 30729 0000575B C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30730                                  	;mov	ah,1Ah
 30731 00005760 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 30732 00005762 A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 30733 00005765 E814FC                  	call	FATAL1
 30734 00005768 C42E[8A05]              	LES	BP,[THISDPB]
 30735 0000576C 3C03                    	CMP	AL,3
 30736 0000576E 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 30737 00005770 F9                      	STC				; User said FAIL
 30738 00005771 C3                      	retn
 30739                                  
 30740                                  FAT_GOT_DPB:
 30741                                  	;Context DS			;hkn; SS is DOSDATA
 30742 00005772 16                      	push	ss			
 30743 00005773 1F                      	pop	ds
 30744                                  	;mov	al,0Fh
 30745 00005774 B00F                    	MOV	AL,DMEDHL
 30746                                  	;mov	ah,[es:bp+1]
 30747 00005776 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 30748 0000577A A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 30749 0000577D C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 30750 00005782 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30751                                  	;;mov	al,[es:bp+16h]
 30752                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 30753 00005788 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30754 0000578C A2[6703]                	MOV	[CALLMED],AL
 30755 0000578F 06                      	PUSH	ES
 30756 00005790 1E                      	PUSH	DS
 30757                                  
 30758                                  ;hkn; DEVCALL is in DOSDATA
 30759 00005791 BB[5A03]                	MOV	BX,DEVCALL
 30760                                  	;;lds	si,[es:bp+12h]
 30761                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 30762 00005794 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 30763 00005798 07                      	POP	ES			; ES:BX Points to call header
 30764 00005799 E8FBEE                  	call	DEVIOCALL2
 30765                                  	;Context DS		 	;hkn; SS is DOSDATA
 30766 0000579C 16                      	push	ss
 30767 0000579D 1F                      	pop	ds
 30768 0000579E 07                      	POP	ES			; Restore ES:BP
 30769 0000579F 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30770                                  	;test	di,8000h
 30771                                  	;jnz	short FATERR
 30772 000057A3 09FF                    	or	di,di
 30773 000057A5 78AA                    	js	short FATERR		; have error
 30774 000057A7 30E4                    	XOR	AH,AH
 30775                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 30776                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 30777 000057A9 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 30778 000057AD A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 30779                                  ; See if we had changed volume id by creating one on the diskette
 30780 000057B0 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 30781 000057B4 7508                    	jnz	short CHECK_BYT
 30782 000057B6 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 30783 000057BB E9A500                  	jmp	GOGETBPB		; Need to get device driver to read in
 30784                                  					; new volume label.
 30785                                  CHECK_BYT:
 30786 000057BE 0A26[6803]              	OR	AH,[CALLRBYT]
 30787                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30788                                  	;JMP	short NEWDSK
 30789                                  	; 17/12/2022
 30790 000057C2 7863                    	js	short NEWDSK
 30791                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30792                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30793                                  	;JMP	short NEWDSK
 30794                                  
 30795                                  CHECK_ZR:
 30796 000057C4 743B                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 30797                                  	; 24/09/2023
 30798                                  	; cf=0 (after 'or' instruction)
 30799                                  	;CLC
 30800 000057C6 C3                      	retn				; If Media not changed (NZ)
 30801                                  
 30802                                  DISK_CHNG_ERR:
 30803 000057C7 06                      	PUSH	ES
 30804 000057C8 55                      	PUSH	BP
 30805                                  	;;les	bp,[es:bp+12h]
 30806                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 30807 000057C9 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 30808                                  	;;test	word [es:bp+4],800h
 30809                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 30810 000057CD 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 30811 000057D2 5D                      	POP	BP
 30812 000057D3 07                      	POP	ES
 30813 000057D4 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 30814 000057D6 1E                      	PUSH	DS			; Save buffer pointer for ignore
 30815 000057D7 57                      	PUSH	DI
 30816 000057D8 16                      	push	ss			;hkn; SS is DOSDATA
 30817 000057D9 1F                      	pop	ds
 30818                                  	;mov	byte [ALLOWED],18h
 30819 000057DA C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30820 000057DF 06                      	PUSH	ES
 30821 000057E0 C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 30822 000057E4 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 30823 000057E8 07                      	POP	ES
 30824 000057E9 893E[2803]              	MOV	[EXTERRPT],DI
 30825                                  	;mov	ax,0Fh
 30826 000057ED B80F00                  	MOV	AX,error_I24_wrong_disk
 30827 000057F0 C606[7505]01            	MOV	byte [READOP],1		; Write
 30828                                  	;invoke	HARDERR
 30829 000057F5 E832FB                  	call	HARDERR
 30830 000057F8 5F                      	POP	DI			; Get back buffer for ignore
 30831 000057F9 1F                      	POP	DS
 30832 000057FA 3C03                    	CMP	AL,3
 30833                                  FAIL_OPJ2:
 30834 000057FC 741C                    	JZ	short FAIL_OP
 30835 000057FE E971FF                  	JMP	FAT_GOT_DPB		; Retry
 30836                                  
 30837                                  CHKBUFFDIRT:
 30838                                  	; 20/05/2019 - Retro DOS v4.0
 30839                                  
 30840                                  	; MSDOS 3.3
 30841                                  	;lds	di,[BUFFHEAD]
 30842                                  
 30843                                  	; MSDOS 6.0
 30844 00005801 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 30845 00005807 741E                    	je	short NEWDSK			; no, skip the check
 30846 00005809 E8F100                  	call	GETCURHEAD			; get pointer to first buffer
 30847                                  nbuffer:
 30848                                  	;cmp	al,[di+4]
 30849 0000580C 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 30850 0000580F 750D                    	jne	short lfnxt			; no, go for next buffer
 30851                                  	;test   byte [di+5],40h
 30852 00005811 F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 30853 00005815 7407                    	jz	short lfnxt			; no, go for next buffer
 30854                                  	;Context DS
 30855 00005817 16                      	push	ss
 30856 00005818 1F                      	pop	ds
 30857                                  	; 24/09/2023
 30858                                  	; cf=0 (after 'test' instruction)
 30859                                  	;clc
 30860 00005819 C3                      	retn
 30861                                  
 30862                                  FAIL_OP:					; This label & code is here
 30863                                  	;Context DS				;  for reachability
 30864 0000581A 16                      	push	ss
 30865 0000581B 1F                      	pop	ds
 30866 0000581C F9                      	STC
 30867 0000581D C3                      	retn
 30868                                  
 30869                                  lfnxt:
 30870                                  	; 15/08/2018 - Retro DOS v3.0
 30871                                  	; MSDOS 3.3
 30872                                  	;lds	di,[di]
 30873                                  
 30874                                  	; 20/05/2019 - Retro DOS v4.0
 30875 0000581E 8B3D                    	mov	di,[di]
 30876                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 30877                                  	
 30878                                  	; MSDOS 3.3
 30879                                  	;cmp	di,-1
 30880                                  	;jne	short nbuffer
 30881                                  	
 30882                                  	; MSDOS 6.0
 30883 00005820 36393E[BB0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 30884 00005825 75E5                    	jne	short nbuffer			; no, check this guy also
 30885                                  
 30886                                  ; If no dirty buffers, assume Media changed
 30887                                  NEWDSK:
 30888                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 30889                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30890 00005827 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 30891                                  						;  recompute
 30892                                  	; MSDOS 3.3
 30893                                  	;call	SETVISIT
 30894                                  	; MSDOS 6.0
 30895 0000582D E8CD00                  	call	 GETCURHEAD
 30896                                  nxbuffer:
 30897                                  	; MSDOS 3.3
 30898                                  	;or 	byte [di+5],20h
 30899                                  	; MSDOS 3.3 & MSDOS 6.0
 30900                                  	;cmp	[di+4],al
 30901 00005830 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 30902 00005833 7510                    	jne	short lfnxt2
 30903                                  	;test	byte [di+5],40h
 30904 00005835 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 30905 00005839 758C                    	jnz	short DISK_CHNG_ERR
 30906                                  	;mov	word [di+4],20FFh
 30907 0000583B C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 30908 00005840 E8CC00                  	call	SCANPLACE
 30909                                  	; MSDOS 6.0
 30910 00005843 EB02                    	jmp	short skpbuff
 30911                                  lfnxt2:
 30912 00005845 8B3D                    	mov	di,[di]
 30913                                  	;mov	di,[di+BUFFINFO.buf_next]
 30914                                  skpbuff:
 30915                                  	; MSDOS 6.0
 30916 00005847 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 30917 0000584C 75E2                    	jne	short nxbuffer
 30918                                  
 30919 0000584E 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 30920 00005854 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 30921 00005856 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 30922 0000585B 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 30923 0000585D 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 30924                                  ;lfnxt2:
 30925                                  	; MSDOS 3.3
 30926                                  	;call	SKIPVISIT
 30927                                  	;jnz	short nxbuffer
 30928                                  GOGETBPB:
 30929                                  	; MSDOS 3.3 & MSDOS 6.0
 30930                                  	;;lds	di,[es:bp+12h]
 30931                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 30932 00005863 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 30933                                  	; 20/05/2019
 30934                                  	;test	word [di+4],2000h
 30935                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 30936 00005867 F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 30937 0000586B 7510                    	JNZ	short GETFREEBUF
 30938                                  	;context DS	    		;hkn; SS is DOSDATA
 30939 0000586D 16                      	push	ss
 30940 0000586E 1F                      	pop	ds
 30941 0000586F BB0200                  	MOV	BX,2
 30942 00005872 E8EFFC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 30943                                  FAIL_OPJ:
 30944 00005875 72A3                    	JC	short FAIL_OP
 30945 00005877 C53E[E205]              	LDS	DI,[CURBUF]
 30946 0000587B EB13                    	JMP	SHORT GOTGETBUF
 30947                                  
 30948                                  GETFREEBUF:
 30949 0000587D 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 30950 0000587E 55                      	PUSH	BP
 30951                                  	; MSDOS 3.3
 30952                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 30953                                  	; MSDOS 6.0
 30954 0000587F 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 30955                                  ;hkn; SS override
 30956 00005881 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 30957 00005886 E87400                  	call	GETCURHEAD		;LB.			  ;AN000;
 30958                                  	; MSDOS 3.3 & MSDOS 6.0
 30959 00005889 E84F02                  	call	BUFWRITE
 30960 0000588C 5D                      	POP	BP
 30961 0000588D 07                      	POP	ES
 30962                                  	;JC	short FAIL_OPJ
 30963 0000588E 728A                    	jc	short FAIL_OP
 30964                                  GOTGETBUF:
 30965                                  	;;add	di,16
 30966                                  	;add	di,20 ; MSDOS 6.0
 30967 00005890 83C714                  	ADD	DI,BUFINSIZ
 30968                                  
 30969                                  ;hkn; SS override
 30970 00005893 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 30971                                  	;Context DS			;hkn; SS is DOSDATA
 30972 00005898 16                      	push	ss
 30973 00005899 1F                      	pop	ds
 30974 0000589A 893E[6803]              	MOV	[CALLXAD],DI
 30975                                  	;mov	al,16h
 30976 0000589E B016                    	MOV	AL,DBPBHL
 30977                                  	;mov	ah,[es:bp+1]
 30978 000058A0 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 30979 000058A4 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 30980 000058A7 C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 30981 000058AC C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30982                                  	;;mov	al,[es:bp+16h]
 30983                                  	;mov	al,[es:bp+17h]
 30984 000058B2 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30985 000058B6 A2[6703]                	MOV	[CALLMED],AL
 30986 000058B9 06                      	PUSH	ES ; **
 30987 000058BA 1E                      	PUSH	DS ; *
 30988                                  	;;
 30989                                  ; 03/01/2023
 30990                                  %if 0
 30991                                  	;;push	word [es:bp+14h]
 30992                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 30993                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 30994                                  	;;push	word [es:bp+12h]
 30995                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 30996                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 30997                                  
 30998                                  ;hkn; DEVCALL is in DOSDATA
 30999                                  	MOV	BX,DEVCALL
 31000                                  	POP	SI
 31001                                  	POP	DS			; DS:SI Points to device header
 31002                                  %endif
 31003                                  	; 03/01/2024
 31004 000058BB BB[5A03]                	mov	bx,DEVCALL
 31005                                  	;lds	si,[es:bp+13h]
 31006 000058BE 26C57613                	lds	si,[es:bp+DPB.DRIVER_ADDR]
 31007                                  					; DS:SI Points to device header
 31008                                  	;;
 31009 000058C2 07                      	POP	ES ; *			; ES:BX Points to call header
 31010                                  	;invoke	DEVIOCALL2
 31011 000058C3 E8D1ED                  	call	DEVIOCALL2
 31012 000058C6 07                      	POP	ES ; **			; Restore ES:BP
 31013                                  	;Context DS
 31014 000058C7 16                      	push	ss		 	;hkn; SS is DOSDATA
 31015 000058C8 1F                      	pop	ds
 31016 000058C9 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31017                                  	; MSDOS 3.3
 31018                                  	;test	di,8000h
 31019                                  	;jnz	short FATERRJ
 31020                                  	; MSDOS 6.0
 31021 000058CD 09FF                    	or	di,di
 31022 000058CF 7829                    	js	short FATERRJ 		; have error
 31023                                  	;;mov	al,[es:bp+16h]
 31024                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 31025 000058D1 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31026 000058D5 C536[6C03]              	LDS	SI,[CALLBPB]
 31027                                  	;;mov	word [es:bp+1Ch],0
 31028                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 31029 000058D9 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 31030                                  	;invoke	$SETDPB
 31031 000058DF E8F6B6                  	call	_$SETDPB
 31032                                  
 31033                                  ;hkn; SS override
 31034 000058E2 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 31035                                  	;mov	al,[es:bp+8]
 31036 000058E7 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 31037                                  
 31038                                  	; MSDOS 3.3
 31039                                  	;;mov	ah,[es:bp+0Fh]
 31040                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31041                                  	;;mov	[DI-8],ax
 31042                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 31043                                  
 31044                                  	; MSDOS 6.0
 31045                                  	;mov	[di-0Ah],al
 31046 000058EB 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 31047                                  						;>32mb		  ;AN000;
 31048                                  	;mov	ax,[es:bp+0Fh]
 31049 000058EE 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 31050                                  	;mov	[di-9h],ax			  ;AC000;
 31051 000058F2 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 31052                                  					;>32mb Correct buffer info ;AC000;
 31053                                  	;Context DS			;hkn; SS is DOSDATA
 31054 000058F5 16                      	push	ss
 31055 000058F6 1F                      	pop	ds
 31056 000058F7 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 31057 000058F9 C3                      	retn
 31058                                  
 31059                                  FATERRJ: 
 31060 000058FA E954FE                  	JMP	FATERR
 31061                                  
 31062                                  ;============================================================================
 31063                                  ; STDBUF.ASM
 31064                                  ;============================================================================
 31065                                  ; Retro DOS v2.0 - 12/03/2018
 31066                                  
 31067                                  ;
 31068                                  ; Standard buffer management for MSDOS
 31069                                  ;
 31070                                  
 31071                                  ;.xlist
 31072                                  ;.xcref
 31073                                  ;INCLUDE STDSW.ASM
 31074                                  ;.cref
 31075                                  ;.list
 31076                                  
 31077                                  ;TITLE	STDBUF - MSDOS buffer management
 31078                                  ;NAME	STDBUF
 31079                                  
 31080                                  ;INCLUDE BUF.ASM
 31081                                  
 31082                                  ;============================================================================
 31083                                  ; BUF.ASM
 31084                                  ;============================================================================
 31085                                  ; 31/07/2018 - Retro DOS v3.0
 31086                                  ; Retro DOS v2.0 - 12/03/2018
 31087                                  ;
 31088                                  ; buffer management for MSDOS
 31089                                  ;
 31090                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 31091                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 31092                                  ;
 31093                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 31094                                  ;
 31095                                  ;SETVISIT:
 31096                                  ;	; 31/07/2018 - Retro DOS v3.0
 31097                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 31098                                  ;; Inputs:
 31099                                  ;;      None
 31100                                  ;; Function:
 31101                                  ;;      Set up a scan of I/O buffers
 31102                                  ;; Outputs:
 31103                                  ;;      All visit flags = 0
 31104                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 31105                                  ;;                    may cause a scan to stop in the middle leaving some
 31106                                  ;;                    visit flags set, and some not set.
 31107                                  ;;      DS:DI Points to [BUFFHEAD]
 31108                                  ;; No other registers altered
 31109                                  ;
 31110                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 31111                                  ;	PUSH    AX
 31112                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 31113                                  ;	;mov	al,0DFh
 31114                                  ;	mov	al,~buf_visit
 31115                                  ;SETLOOP:
 31116                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 31117                                  ;	;and	[DI+5],al
 31118                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 31119                                  ;       LDS     DI,[DI]
 31120                                  ;       CMP     DI,-1
 31121                                  ;       JNZ     SHORT SETLOOP
 31122                                  ;       POP     AX ; 09/09/2018
 31123                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 31124                                  ;SVISIT_RETN:
 31125                                  ;       RETN
 31126                                  ;
 31127                                  ;SKIPVISIT:
 31128                                  ;	; 31/07/2018 - Retro DOS v3.0
 31129                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 31130                                  ;
 31131                                  ;; Inputs:
 31132                                  ;;      DS:DI Points to a buffer
 31133                                  ;; Function:
 31134                                  ;;      Skip visited buffers
 31135                                  ;; Outputs:
 31136                                  ;;      DS:DI Points to next unvisited buffer
 31137                                  ;;      Zero is set if skip to LAST buffer
 31138                                  ;; No other registers altered
 31139                                  ;
 31140                                  ;       CMP     DI,-1
 31141                                  ;       ;retz
 31142                                  ;       JZ	SHORT SVISIT_RETN
 31143                                  ;
 31144                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 31145                                  ;       ;;;retnz
 31146                                  ;       ;;JNZ	SHORT SVISIT_RETN
 31147                                  ;
 31148                                  ;	;test	byte [di+5],20h
 31149                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 31150                                  ;	JNZ	short SKIPLOOP
 31151                                  ;	
 31152                                  ;	push	ax
 31153                                  ;	or	al,1
 31154                                  ;	pop	ax
 31155                                  ;	retn	
 31156                                  ;
 31157                                  ;SKIPLOOP:
 31158                                  ;	LDS     DI,[DI]
 31159                                  ;       JMP     SHORT SKIPVISIT
 31160                                  
 31161                                  ;============================================================================
 31162                                  ; BUF.ASM, MSDOS 6.0, 1991
 31163                                  ;============================================================================
 31164                                  ; 31/07/2018 - Retro DOS v3.0
 31165                                  ; 04/05/2019 - Retro DOS v4.0
 31166                                  
 31167                                  ;	TITLE	BUF - MSDOS buffer management
 31168                                  ;	NAME	BUF
 31169                                  
 31170                                  ;**	BUF.ASM - Low level routines for buffer cache management
 31171                                  ;
 31172                                  ;	GETCURHEAD
 31173                                  ;	ScanPlace
 31174                                  ;	PLACEBUF
 31175                                  ;	PLACEHEAD
 31176                                  ;	PointComp
 31177                                  ;	GETBUFFR
 31178                                  ;	GETBUFFRB
 31179                                  ;	FlushBuf
 31180                                  ;	BufWrite
 31181                                  ;	SET_RQ_SC_PARMS
 31182                                  ;
 31183                                  ;	Revision history:
 31184                                  ;
 31185                                  ;		AN000  version 4.00  Jan. 1988
 31186                                  ;		A004   PTM 3765 -- Disk reset failed
 31187                                  ;		M039 DB 10/17/90 - Disk write optimization
 31188                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 31189                                  
 31190                                  ;Break	<GETCURHEAD -- Get current buffer header>
 31191                                  ;----------------------------------------------------------------------------
 31192                                  ; Procedure Name : GetCurHead
 31193                                  ; Inputs:
 31194                                  ;	 No Inputs
 31195                                  ; Function:
 31196                                  ;	Returns the pointer to the first buffer in Queue
 31197                                  ;	and updates FIRST_BUFF_ADDR
 31198                                  ;       and invalidates LASTBUFFER (recency pointer)
 31199                                  ; Outputs:
 31200                                  ;	DS:DI = pointer to the first buffer in Queue
 31201                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 31202                                  ;       LASTBUFFER = -1
 31203                                  ; No other registers altered
 31204                                  ;----------------------------------------------------------------------------
 31205                                  
 31206                                  ; 04/05/2019 - Retro DOS v4.0
 31207                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 31208                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31209                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 31210                                  
 31211                                  GETCURHEAD:
 31212 000058FD 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 31213 00005902 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 31214 00005909 36893E[BB0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 31215 0000590E C3                      	retn
 31216                                  
 31217                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 31218                                  ;----------------------------------------------------------------------------
 31219                                  ; Procedure Name : ScanPlace
 31220                                  ; Inputs:
 31221                                  ;	Same as PLACEBUF
 31222                                  ; Function:
 31223                                  ;	Save scan location and call PLACEBUF
 31224                                  ; Outputs:
 31225                                  ;	DS:DI Points to saved scan location
 31226                                  ; All registers, except DS:DI, preserved.
 31227                                  ;----------------------------------------------------------------------------
 31228                                  ;M039: Rewritten to preserve registers.
 31229                                  
 31230                                  ;SCANPLACE:
 31231                                  ;	; 31/07/2018 - Retro DOS v3.0
 31232                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31233                                  ;	push	es
 31234                                  ;	les	si,[di]
 31235                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 31236                                  ;	call	PLACEBUF
 31237                                  ;	push	es
 31238                                  ;	pop	ds
 31239                                  ;	mov	di,si
 31240                                  ;	pop	es
 31241                                  ;scanplace_retn:
 31242                                  ;	retn	
 31243                                  	
 31244                                  	; MSDOS 6.0
 31245                                  SCANPLACE:
 31246 0000590F FF35                    	push	word [di]
 31247                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 31248 00005911 E80200                  	call	PLACEBUF
 31249 00005914 5F                      	pop	di
 31250 00005915 C3                      	retn
 31251                                  
 31252                                  ;----------------------------------------------------------------------------
 31253                                  ; Procedure Name : PlaceBuf
 31254                                  ; Input:
 31255                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 31256                                  ; Function:
 31257                                  ;	Remove buffer from queue and re-insert it in proper place.
 31258                                  ; NO registers altered
 31259                                  ;----------------------------------------------------------------------------
 31260                                  
 31261                                  ;procedure PLACEBUF,NEAR
 31262                                  
 31263                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31264                                  	; 20/05/2019 - Retro DOS v4.0
 31265                                  PLACEBUF:
 31266                                  	; 31/07/2018 - Retro DOS v3.0
 31267                                  
 31268                                  	; MSDOS 6.0
 31269 00005916 50                      	push	AX			;Save only regs we modify	;AN000;
 31270 00005917 53                      	push	BX							;AN000;
 31271                                  	; 23/09/2023
 31272                                  	;push	SI							;AN000;
 31273                                  	
 31274 00005918 8B05                    	mov	ax,[di]
 31275                                  	;mov	ax,[di+BUFFINFO.buf_next]
 31276 0000591A 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 31277                                  	
 31278 0000591F 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 31279 00005921 7422                    	je	short nret			;Yes, special case	;AN000;
 31280 00005923 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 31281 00005925 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 31282 00005927 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 31283 0000592B EB18                    	jmp	short nret 			;Continue with repositioning;AN000;
 31284                                  not_first:
 31285                                  	; 23/09/2023
 31286 0000592D 56                      	push	si
 31287                                  	;mov	si,[di+2]
 31288 0000592E 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 31289 00005931 8904                    	mov	[si],ax
 31290                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 31291 00005933 96                      	xchg	si,ax
 31292                                  	;mov	[si+2],ax
 31293 00005934 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 31294                                  	
 31295 00005937 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 31296 0000593A 893C                    	mov	[si],di
 31297                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 31298 0000593C 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 31299 0000593F 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 31300 00005942 891D                    	mov	[di],bx
 31301                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 31302                                  	; 23/09/2023
 31303 00005944 5E                      	pop	si
 31304                                  nret:	
 31305                                  	; 23/09/2023							;AN000;
 31306                                  	;pop	SI							;AN000;
 31307 00005945 5B                      	pop	BX							;AN000;
 31308 00005946 58                      	pop	AX							;AN000;
 31309                                  									;AN000;
 31310                                  	;cmp	byte [di+4],0FFh
 31311 00005947 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 31312 0000594B 7505                            jne	short pbx			; M039: -no, jump.
 31313 0000594D 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 31314                                  pbx:	
 31315 00005952 C3                      	retn								;AN000;
 31316                                  
 31317                                  	; 31/07/2018 - Retro DOS v3.0
 31318                                  
 31319                                  	; MSDOS 3.3
 31320                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31321                                  
 31322                                  ;PLACEBUF:
 31323                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31324                                  ;	
 31325                                  ;       CALL	save_world
 31326                                  ;       LES     CX,[DI]
 31327                                  ;       CMP     CX,-1           	; Buf is LAST?
 31328                                  ;       JZ      SHORT NRET		; Buffer already last
 31329                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 31330                                  ;       PUSH    DS
 31331                                  ;       POP     ES              	; Buf is ES:DI
 31332                                  ;	; 15/03/2018
 31333                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 31334                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 31335                                  ;       JNZ     SHORT BUFLOOP
 31336                                  ;       MOV     [SS:BUFFHEAD],CX
 31337                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 31338                                  ;       JMP     SHORT LOOKEND
 31339                                  ;BUFLOOP:
 31340                                  ;	; 31/07/2018
 31341                                  ;	mov	ax,ds
 31342                                  ;	mov	bx,si
 31343                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31344                                  ;       LDS     SI,[SI]
 31345                                  ;       CALL    POINTCOMP
 31346                                  ;       jnz	short BUFLOOP
 31347                                  ;	;
 31348                                  ;	mov	ds,ax
 31349                                  ;	mov	si,bx
 31350                                  ;	mov	[SI],cx
 31351                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 31352                                  ;	mov	[SI+2],bp
 31353                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 31354                                  ;LOOKEND:
 31355                                  ;	mov	ax,ds
 31356                                  ;	mov	bx,si
 31357                                  ;       LDS     SI,[SI]
 31358                                  ;       CMP     SI,-1
 31359                                  ;       jnz     short LOOKEND
 31360                                  ;GOTHEEND:
 31361                                  ;       mov	ds,ax
 31362                                  ;	mov	[BX],di
 31363                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 31364                                  ;       MOV     WORD [ES:DI],-1
 31365                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 31366                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 31367                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 31368                                  ;NRET:
 31369                                  ;       CALL	restore_world
 31370                                  ;	
 31371                                  ;	;cmp	byte [di+4],-1
 31372                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 31373                                  ;	jnz     short scanplace_retn
 31374                                  ;	call    PLACEHEAD
 31375                                  ;	retn
 31376                                  
 31377                                  ;EndProc PLACEBUF
 31378                                  
 31379                                  ;M039 - Removed PLACEHEAD.
 31380                                  ;----------------------------------------------------------------------------
 31381                                  ; places buffer at head
 31382                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 31383                                  ;	ONE IN THE LIST!!!!!!!
 31384                                  ; BUGBUG ---- this routine can be removed because it has only
 31385                                  ; BUGBUG ---- one instruction. This routine is called from
 31386                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 31387                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 31388                                  ; BUGBUG ---- But kept as it is for modularity
 31389                                  ;----------------------------------------------------------------------------
 31390                                  ;procedure   PLACEHEAD,NEAR
 31391                                  ;	mov	word ptr [BufferQueue], di
 31392                                  ;	ret
 31393                                  ;EndProc PLACEHEAD
 31394                                  ;M039
 31395                                  
 31396                                  ;----------------------------------------------------------------------------
 31397                                  ; Procedure Name : PLACEHEAD
 31398                                  ;
 31399                                  ; SAME AS PLACEBUF except places buffer at head
 31400                                  ;----------------------------------------------------------------------------
 31401                                  
 31402                                  	; MSDOS 3.3 (Retro DOS v3.0)
 31403                                  	; 05/09/2018
 31404                                  	; MSDOS 2.11 (Retro DOS v2.0)
 31405                                  ;PLACEHEAD:
 31406                                  ;	; 31/07/2018 - Retro DOS v3.0
 31407                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 31408                                  ;
 31409                                  ;       CALL	save_world
 31410                                  ;       PUSH	DS
 31411                                  ;       POP	ES
 31412                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31413                                  ;       LDS     SI,[SS:BUFFHEAD]
 31414                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 31415                                  ;	CALL    POINTCOMP
 31416                                  ;       JZ      SHORT GOTHEEND2
 31417                                  ;	MOV	[ES:DI],SI
 31418                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 31419                                  ;       MOV	[ES:DI+2],DS
 31420                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 31421                                  ;       MOV	[SS:BUFFHEAD],DI
 31422                                  ;       MOV	[SS:BUFFHEAD+2],ES
 31423                                  ;LOOKEND2:
 31424                                  ;       mov	ax,ds
 31425                                  ;	mov	bx,si
 31426                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31427                                  ;       LDS     SI,[SI]
 31428                                  ;       CALL    POINTCOMP
 31429                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 31430                                  ;       mov	ds,ax
 31431                                  ;	mov	word [bx],-1
 31432                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 31433                                  ;	mov	word [bx+2],-1
 31434                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 31435                                  ;GOTHEEND2:
 31436                                  ;      	call	restore_world
 31437                                  ;placehead_retn:
 31438                                  ;	retn
 31439                                  
 31440                                  ; 20/05/2019 - Retro DOS v4.0
 31441                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 31442                                  
 31443                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 31444                                  ;----------------------------------------------------------------------------
 31445                                  ;
 31446                                  ; Procedure Name : PointComp
 31447                                  ; Inputs:
 31448                                  ;         DS:SI & ES:DI
 31449                                  ; Function:
 31450                                  ;          Checks for ((SI==DI) && (ES==DS))
 31451                                  ;	   Assumes that pointers are normalized for the
 31452                                  ;	   same segment
 31453                                  ;
 31454                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 31455                                  ; DO NOT USE FOR < or >
 31456                                  ; No Registers altered
 31457                                  ;
 31458                                  ;----------------------------------------------------------------------------
 31459                                  
 31460                                  POINTCOMP:
 31461                                  	; 31/07/2018 - Retro DOS v3.0
 31462                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 31463 00005953 39FE                    	CMP	SI,DI
 31464 00005955 750A                    	jnz	short _ret_label	; return if nz
 31465                                  	;jnz	short placehead_retn 
 31466 00005957 51                      	PUSH	CX
 31467 00005958 52                      	PUSH	DX
 31468 00005959 8CD9                    	MOV	CX,DS
 31469 0000595B 8CC2                    	MOV	DX,ES
 31470 0000595D 39D1                    	CMP	CX,DX
 31471 0000595F 5A                      	POP	DX
 31472 00005960 59                      	POP	CX
 31473                                  _ret_label:
 31474 00005961 C3                      	retn
 31475                                  
 31476                                  ; 01/08/2018 - Retro DOS v3.0
 31477                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 31478                                  
 31479                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 31480                                  
 31481                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 31482                                  ;----------------------------------------------------------------------------
 31483                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 31484                                  ;	It gets the specified local sector into one of the I/O buffers
 31485                                  ;	and shuffles the queue
 31486                                  ; 
 31487                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31488                                  ;		       ELSE no pre-read
 31489                                  ;		(DX) = Desired physical sector number	      (LOW)
 31490                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31491                                  ;		(ES:BP) = Pointer to drive parameters
 31492                                  ;		ALLOWED set in case of INT 24
 31493                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31494                                  ;		'C' clear if OK
 31495                                  ;		CURBUF Points to the Buffer for the sector
 31496                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31497                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31498                                  ;----------------------------------------------------------------------------
 31499                                  
 31500                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 31501                                  ;----------------------------------------------------------------------------
 31502                                  ;	GetBuffrb reads a sector from the FAT file system's FAT table.
 31503                                  ;	It gets the specified sector into one of the I/O buffers
 31504                                  ;	and shuffles the queue. We need a special entry point so that
 31505                                  ;	we can read the alternate FAT sector if the first read fails, also
 31506                                  ;	so we can mark the buffer as a FAT sector.
 31507                                  ; 
 31508                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31509                                  ;		       ELSE no pre-read
 31510                                  ;		(DX) = Desired physical sector number	     (LOW)
 31511                                  ;		(SI) != 0
 31512                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31513                                  ;		(ES:BP) = Pointer to drive parameters
 31514                                  ;		ALLOWED set in case of INT 24
 31515                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31516                                  ;		'C' clear if OK
 31517                                  ;		CUR ddBUF Points to the Buffer for the sector
 31518                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31519                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31520                                  ;----------------------------------------------------------------------------
 31521                                  
 31522                                  	; 22/09/2023 - RetroDOS v4.1 MSDOS.SYS (optimization)
 31523                                  GETBUFFRC:
 31524 00005962 C706[0706]0000          	mov	word [HIGH_SECTOR],0
 31525                                  GETBUFFRA:
 31526 00005968 30C0                    	xor	al,al
 31527 0000596A BE0100                  	mov	si,1
 31528 0000596D EB09                    	jmp	short GETBUFFRB
 31529                                  
 31530                                  	; 22/09/2023
 31531                                  GETBUFFER:
 31532 0000596F 30C0                    	xor	al,al
 31533                                  GETBUFFRD:
 31534                                  	;mov	byte [ALLOWED],18h
 31535 00005971 C606[4B03]18            	mov	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31536                                  
 31537                                  	; 20/05/2019 - Retro DOS v4.0
 31538                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 31539                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31540                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 31541                                  GETBUFFR:
 31542 00005976 31F6                    	XOR	SI,SI
 31543                                  
 31544                                  ;	This entry point is called for FAT buffering with SI != 0
 31545                                  
 31546                                  GETBUFFRB:
 31547 00005978 A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 31548                                  	; 15/12/2022
 31549 0000597B 268A4600                	mov	al,[ES:BP]
 31550                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31551                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 31552 0000597F C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 31553                                  	; MSDOS 6.0
 31554                                  ;hkn; SS override
 31555 00005983 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb	;AN000;
 31556                                  
 31557                                  ;	See if this is the buffer that was most recently returned.
 31558                                  ;	A big performance win if it is.
 31559                                  
 31560 00005988 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 31561 0000598B 7412                    	je	short getb5			; No
 31562                                  	;cmp	dx,[di+6]
 31563 0000598D 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31564 00005990 750D                    	JNZ	short getb5			; Wrong sector
 31565                                  	
 31566                                  	; MSDOS 6.0
 31567                                  	;cmp	cx,[di+8]
 31568 00005992 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb	;AN000;
 31569 00005995 7508                    	JNZ	short getb5			; F.C. >32mb	;AN000;
 31570                                  	
 31571                                  	;cmp	al,[di+4]
 31572 00005997 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31573                                  	;JZ	getb35				; Just asked for same buffer
 31574 0000599A 7503                    	jnz	short getb5
 31575                                  	;jmp	getb35
 31576                                  	; 17/12/2022
 31577                                  	; 28/07/2019
 31578 0000599C E9C700                  	jmp	getb35x
 31579                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31580                                  	;jmp	getb35
 31581                                  
 31582                                  ;	It's not the buffer most recently returned. See if it's in the
 31583                                  ;	cache.
 31584                                  ;
 31585                                  ;	(cx:dx) = sector #
 31586                                  ;	(al) = drive #
 31587                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31588                                  ;	??? list may be incomplete ???
 31589                                  
 31590                                  getb5:	
 31591                                  	; MSDOS 3.3
 31592                                  	;lds	di,[SS:BUFFHEAD]
 31593                                  	; MSDOS 6.0
 31594 0000599F E85BFF                  	CALL	GETCURHEAD			; get Q Head
 31595                                  getb10:	
 31596                                  	;cmp	dx,[di+6]
 31597 000059A2 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31598 000059A5 750D                    	jne	short getb12			; wrong sector lo
 31599                                  	
 31600                                  	; MSDOS 6.0
 31601                                  	;cmp	cx,[di+8]
 31602 000059A7 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 31603 000059AA 7508                    	jne	short getb12			; wrong sector hi
 31604                                  	
 31605                                  	;cmp	al,[di+4]
 31606 000059AC 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31607                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 31608 000059AF 7503                    	jne	short getb12
 31609 000059B1 E98C00                  	jmp	getb25
 31610                                  getb12:	
 31611                                  	; MSDOS 3.3
 31612                                  	;;mov	di,[DI]
 31613                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 31614                                  	;
 31615                                  	; 15/08/2018
 31616                                  	;lds	di,[di]
 31617                                  
 31618                                  	;cmp	di,-1 ; 0FFFFh
 31619                                  	;jne	short getb10
 31620                                  	;lds	di,[SS:BUFFHEAD]
 31621                                  
 31622                                  	; MSDOS 6.0
 31623 000059B4 8B3D                    	mov	di,[di]
 31624                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 31625 000059B6 363B3E[BB0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 31626 000059BB 75E5                    	jne	short getb10			; no, continue looking
 31627                                  
 31628                                  ;	The requested sector is not available in the buffers. DS:DI now points
 31629                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 31630                                  ;	new sector into it.
 31631                                  ;
 31632                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 31633                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 31634                                  ;	him, we should take LRU. And the above lookup shouldn't be
 31635                                  ;	down a chain, but should be hashed.
 31636                                  ;
 31637                                  ;	(DS:DI) = first buffer in the queue
 31638                                  ;	(CX:DX) = sector # we want
 31639                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31640                                  
 31641                                  	; MSDOS 3.3 & MSDOS 6.0
 31642                                  ;hkn; SS override
 31643 000059BD 51                      	PUSH	CX  ; MSDOS 6.0
 31644 000059BE 56                      	push	si
 31645 000059BF 52                      	push	dx
 31646 000059C0 55                      	push	bp
 31647 000059C1 06                      	push	es
 31648 000059C2 E81601                  	CALL	BUFWRITE			; Write out the dirty buffer
 31649 000059C5 07                      	pop	es
 31650 000059C6 5D                      	pop	bp
 31651 000059C7 5A                      	pop	dx
 31652 000059C8 5E                      	pop	si
 31653 000059C9 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 31654                                  	;jc	short getbx			; if got hard error
 31655 000059CE 7303                    	jnc	short getb13
 31656 000059D0 E99D00                  	jmp	getbx
 31657                                  
 31658                                  getb13:
 31659                                  	; MSDOS 6.0
 31660 000059D3 E88F01                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 31661                                  
 31662                                  ;	We're ready to read in the buffer, if need be. If the caller
 31663                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 31664                                  
 31665 000059D6 30E4                    	XOR	AH,AH				; initial flags
 31666                                  ;hkn; SS override
 31667                                  	;test	byte [ss:PREREAD],0FFh
 31668                                  	;jnz	short getb20
 31669 000059D8 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 31670 000059DD 7549                    	JNZ	short getb20			; no, we're done
 31671                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 31672                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31673 000059DF 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 31674                                  	;MOV	CX,1
 31675                                  	; 22/09/2023
 31676 000059E2 29C9                    	sub	cx,cx ; 0
 31677 000059E4 56                      	push	si
 31678 000059E5 57                      	push	di
 31679 000059E6 52                      	push	dx
 31680                                  	; MSDOS 6.0
 31681 000059E7 06                      	push	es ; ***
 31682                                  
 31683                                  ; Note: As far as I can tell, all disk reads into buffers go through
 31684                                  ;	this point. -mrw 10/88
 31685                                  	
 31686                                  	;cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 31687                                  	; 22/09/2023
 31688 000059E8 36380E[7900]            	cmp	[ss:BuffInHMA],cl ; 0
 31689 000059ED 7407                    	jz	short getb14
 31690 000059EF 1E                      	push	ds ; **
 31691 000059F0 53                      	push	bx ; *
 31692 000059F1 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 31693                                  getb14:
 31694                                  ;M039: Eliminated redundant HMA code.
 31695                                  
 31696                                  	; 22/09/2023
 31697 000059F6 41                      	inc	cx ; cx = 1
 31698                                  
 31699                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31700 000059F7 09F6                    	OR	SI,SI			; FAT sector ?
 31701 000059F9 7407                    	JZ	short getb15		
 31702                                  
 31703 000059FB E80ADD                  	call	FATSECRD
 31704                                  	;mov	ah,2
 31705 000059FE B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 31706                                  
 31707 00005A00 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 31708                                  
 31709                                  getb15:
 31710 00005A02 E82FDD                  	call	DREAD			; Buffer is marked free if read barfs
 31711 00005A05 B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 31712                                  getb17:
 31713                                  	; 17/12/2022	
 31714                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31715                                  ;%if 0
 31716                                  	; MSDOS 6.0							  ;I001
 31717 00005A07 9C                      	pushf								  ;I001
 31718 00005A08 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 31719 00005A0E 7411                    	jz	short not_in_hma	; no				  ;I001
 31720                                  	;mov	cx,[es:bp+2]
 31721 00005A10 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 31722 00005A14 D1E9                    	shr	cx,1							  ;I001
 31723 00005A16 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 31724 00005A17 89DE                    	mov	si,bx							  ;I001
 31725 00005A19 5F                      	pop	di ; *							  ;I001
 31726 00005A1A 07                      	pop	es ; **							  ;I001
 31727 00005A1B FC                      	cld								  ;I001
 31728 00005A1C 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 31729 00005A1D F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 31730 00005A1F 06                      	push	es							  ;I001
 31731 00005A20 1F                      	pop	ds							  ;I001
 31732                                  ;%endif
 31733                                  
 31734                                  ; 17/12/2022
 31735                                  %if 0
 31736                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31737                                  	; MSDOS 5.0
 31738                                  	pushf
 31739                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 31740                                  	jz	short not_in_hma	; no
 31741                                  	popf
 31742                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 31743                                  	shr	cx,1
 31744                                  	mov	si,bx
 31745                                  	pop	di ; *
 31746                                  	pop	es ; **
 31747                                  	cld
 31748                                  	rep	movsw
 31749                                  	push	es
 31750                                  	pop	ds
 31751                                  	jmp	short getb19 ; 27/11/2022
 31752                                  %endif
 31753                                  
 31754                                  not_in_hma:								  ;I001
 31755 00005A21 9D                      	popf							 	  ;I001
 31756                                  getb19:
 31757 00005A22 07                      	pop	es ; ***
 31758 00005A23 5A                      	pop	dx
 31759 00005A24 5F                      	pop	di
 31760 00005A25 5E                      	pop	si
 31761 00005A26 7248                    	JC	short getbx
 31762                                  
 31763                                  ;	The buffer has the data setup in it (if we were to read)
 31764                                  ;	Setup the various buffer fields
 31765                                  ;
 31766                                  ;	(ds:di) = buffer address
 31767                                  ;	(es:bp) = DPB address
 31768                                  ;	(HIGH_SECTOR:DX) = sector #
 31769                                  ;	(ah) = BUF_FLAGS value
 31770                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 31771                                  
 31772                                  ;hkn; SS override
 31773                                  getb20:	; MSDOS 6.0
 31774 00005A28 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 31775                                  	;mov	[di+8],cx
 31776 00005A2D 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 31777                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31778                                   	;mov	[di+6],dx
 31779 00005A30 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 31780                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 31781                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 31782 00005A33 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 31783                                  	;;mov	[di+0Ch],es
 31784                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 31785 00005A36 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 31786                                  	; 15/12/2022
 31787 00005A39 268A4600                	mov	al,[es:bp]
 31788                                  	;mov	al,[es:bp+0]
 31789                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31790                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 31791                                  	;mov	[di+4],ax
 31792 00005A3D 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 31793                                  getb25:	
 31794                                  	; MSDOS 3.3
 31795                                  	;mov     ax,1
 31796                                  
 31797                                  	; MSDOS 6.0
 31798                                  	;mov	byte [di+0Ah],1
 31799 00005A40 C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 31800 00005A44 31C0                    	XOR	AX,AX
 31801                                  
 31802                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31803 00005A46 09F6                    	OR	SI,SI				; FAT sector ?
 31804 00005A48 740B                    	JZ	short getb30
 31805                                  
 31806                                  	;mov	al,[es:bp+8]
 31807 00005A4A 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 31808                                  	
 31809                                  	; MSDOS 6.0
 31810 00005A4E 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 31811                                  	;mov	ax,[es:bp+0Fh]
 31812 00005A51 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 31813                                  						;  sectors
 31814                                  	; MSDOS 3.3
 31815                                  	;;mov	ah,[es:bp+0Fh]
 31816                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31817                                  
 31818                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 31819                                  ;		is set
 31820                                  
 31821                                  getb30:	
 31822                                  	; MSDOS 6.0
 31823                                  	;mov	[di+0Bh],ax
 31824 00005A55 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 31825                                  
 31826                                  	; MSDOS 3.3
 31827                                  	;;mov	[di+8],ax ; 15/08/2018	
 31828                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 31829                                  
 31830 00005A58 E8BBFE                  	CALL	PLACEBUF
 31831                                  
 31832                                  ;hkn; SS override for next 4
 31833                                  getb35: 
 31834                                  	; 17/12/2022
 31835                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31836                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 31837                                  	;MOV	[SS:CURBUF+2],DS
 31838                                  	;MOV	[SS:LastBuffer+2],DS
 31839                                  	;MOV	[SS:CURBUF],DI
 31840                                  	;MOV	[SS:LastBuffer],DI
 31841                                  	;CLC
 31842                                  
 31843                                  	; 17/12/2022
 31844                                  	; 07/12/2022
 31845                                  	; Retro DOS v4.0
 31846 00005A5B 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 31847 00005A60 36893E[1E00]            	mov	[ss:LastBuffer],di
 31848 00005A65 F8                      	clc
 31849                                  getb35x: ; 28/07/2019
 31850 00005A66 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 31851 00005A6B 36893E[E205]            	MOV	[ss:CURBUF],di
 31852                                  
 31853                                  ;	Return with 'C' set appropriately
 31854                                  ;	(dx) = caller's original value
 31855                                  
 31856                                  getbx:	
 31857 00005A70 16                      	push	ss
 31858 00005A71 1F                      	pop	ds
 31859                                  	;retn
 31860                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31861                                  getbuffrb_retn:
 31862                                  ;flushbuf_retn:	; 17/12/2022
 31863 00005A72 C3                      	retn
 31864                                  
 31865                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 31866                                  ;----------------------------------------------------------------------------
 31867                                  ; Input:
 31868                                  ;	DS = DOSGROUP
 31869                                  ;	AL = Physical unit number local buffers only
 31870                                  ;	   = -1 for all units and all remote buffers
 31871                                  ; Function:
 31872                                  ;	Write out all dirty buffers for unit, and flag them as clean
 31873                                  ;	Carry set if error (user FAILed to I 24)
 31874                                  ;	    Flush operation completed.
 31875                                  ; DS Preserved, all others destroyed (ES too)
 31876                                  ;----------------------------------------------------------------------------
 31877                                  
 31878                                  	; 20/05/2019 - Retro DOS v4.0
 31879                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 31880                                  
 31881                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31882                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 31883                                  FLUSHBUF:
 31884                                  	; MSDOS 3.3
 31885                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 31886                                  	;lds	di,[BUFFHEAD]
 31887                                  
 31888                                  	; MSDOS 6.0
 31889 00005A73 E887FE                  	call	GETCURHEAD
 31890                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31891 00005A76 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31892 00005A7C 7508                    	jnz	short scan_buf_queue
 31893 00005A7E 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 31894 00005A84 7423                    	je	short end_scan
 31895                                  	
 31896                                  scan_buf_queue:
 31897 00005A86 E82900                  	call	CHECKFLUSH
 31898                                  	;push	ax  ; MSDOS 3.3
 31899                                  	; MSDOS 6.0
 31900                                  	;mov	ah,[di+4]
 31901 00005A89 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 31902 00005A8C 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 31903 00005A91 7408                    	je	short free_the_buf
 31904                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31905 00005A93 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31906 00005A99 7405                    	jz	short dont_free_the_buf
 31907                                  	; MSDOS 3.3
 31908                                  	;;mov	al,[di+4]
 31909                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 31910                                  	;cmp	[SS:WPERR],al					;hkn;
 31911                                  	; 15/08/2018
 31912                                  	;jne	short dont_free_the_buf	
 31913                                  free_the_buf:
 31914                                  	; MSDOS 6.0 (& MSDOS 3.3)
 31915 00005A9B C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 31916                                  dont_free_the_buf:
 31917                                  	;pop	ax  ; MSDOS 3.3 	   	
 31918                                  
 31919                                  	; MSDOS 3.3
 31920                                  	;mov	di,[DI]
 31921                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 31922                                  	;
 31923                                  	; 15/08/2018
 31924                                  	;lds	di,[di]
 31925                                  	;
 31926                                  	;cmp	di,-1 ; 0FFFFh
 31927                                  	;jnz	short scan_buf_queue 
 31928                                  	
 31929                                  	; MSDOS 6.0
 31930 00005AA0 8B3D                    	mov	di,[di]
 31931                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 31932 00005AA2 363B3E[BB0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 31933 00005AA7 75DD                    	jne	short scan_buf_queue
 31934                                  
 31935                                  end_scan:
 31936 00005AA9 16                      	push	ss
 31937 00005AAA 1F                      	pop	ds
 31938                                  	; 01/08/2018 - Retro DOS v3.0
 31939                                  	;cmp	byte [FAILERR],0
 31940                                  	;jne	short bad_flush
 31941                                  	;retn
 31942                                  ;bad_flush:
 31943                                  	;stc
 31944                                  	;retn
 31945                                  
 31946                                  	; 17/12/2022
 31947                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31948                                  	; 01/08/2018 - Retro DOS v3.0
 31949 00005AAB 803E[4A03]01            	cmp	byte [FAILERR],1
 31950 00005AB0 F5                      	cmc
 31951                                  flushbuf_retn:
 31952 00005AB1 C3                      	retn
 31953                                  	
 31954                                  	; 17/12/2022
 31955                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31956                                  	;cmp	byte [FAILERR],0
 31957                                  	;jne	short bad_flush
 31958                                  	;retn
 31959                                  ;bad_flush:
 31960                                  	;stc
 31961                                  	;retn
 31962                                  
 31963                                  ;----------------------------------------------------------------------------
 31964                                  ;
 31965                                  ; Procedure Name : CHECKFLUSH
 31966                                  ;
 31967                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 31968                                  ;	   DS:DI - pointer to buffer
 31969                                  ;
 31970                                  ; Function : Write out a buffer if it is dirty
 31971                                  ;
 31972                                  ; Carry set if problem (currently user FAILed to I 24)
 31973                                  ;
 31974                                  ;----------------------------------------------------------------------------
 31975                                  
 31976                                  CHECKFLUSH:
 31977                                  	; MSDOS 6.0
 31978 00005AB2 B4FF                    	mov	ah,-1 ; 01/08/2018 Retro DOS v3.0
 31979                                  	;cmp	[di+4],ah
 31980 00005AB4 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 31981 00005AB7 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 31982 00005AB9 38C4                    	CMP	AH,AL			; 
 31983 00005ABB 7406                    	JZ	short DOBUFFER		; do this buffer
 31984                                  	;cmp	al,[di+4]
 31985 00005ABD 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31986 00005AC0 F8                      	CLC
 31987 00005AC1 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 31988                                  DOBUFFER:
 31989                                  	;test	byte [di+5],40h
 31990 00005AC3 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31991 00005AC7 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 31992 00005AC9 50                      	PUSH	AX
 31993                                  	;push	word [di+4]
 31994 00005ACA FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 31995 00005ACD E80B00                  	CALL	BUFWRITE
 31996 00005AD0 58                      	POP	AX
 31997 00005AD1 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 31998                                  	;and	ah,0BFh
 31999 00005AD3 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 32000                                  	;mov	[di+4],ax
 32001 00005AD6 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 32002                                  LEAVE_BUF:
 32003 00005AD9 58                      	POP	AX			; Search info
 32004                                  checkflush_retn:
 32005 00005ADA C3                      	retn
 32006                                  
 32007                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 32008                                  ;----------------------------------------------------------------------------
 32009                                  ;
 32010                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 32011                                  ;
 32012                                  ;	ENTRY	DS:DI Points to the buffer
 32013                                  ;
 32014                                  ;	EXIT	Buffer marked free
 32015                                  ;		Carry set if error (currently user FAILed to I 24)
 32016                                  ;
 32017                                  ;	USES	All buf DS:DI
 32018                                  ;		HIGH_SECTOR
 32019                                  ;----------------------------------------------------------------------------
 32020                                  
 32021                                  	; 20/05/2019 - Retro DOS v4.0
 32022                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 32023                                  
 32024                                  
 32025                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32026                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 32027                                  
 32028                                  BUFWRITE:
 32029                                  	; 10/09/2018
 32030                                  	; 01/08/2018 - Retro DOS v3.0
 32031                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 32032 00005ADB B8FF00                  	MOV	AX,00FFH
 32033                                  	;xchg	ax,[di+4]
 32034 00005ADE 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 32035 00005AE1 3CFF                    	CMP	AL,0FFH
 32036 00005AE3 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 32037                                  	;test	ah,40h
 32038 00005AE5 F6C440                  	test	AH,buf_dirty
 32039 00005AE8 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 32040                                  	; MSDOS 6.0
 32041 00005AEA E89100                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 32042                                  
 32043                                  ;hkn; SS override
 32044 00005AED 363A06[2203]            	CMP	AL,[SS:WPERR]
 32045 00005AF2 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 32046                                  
 32047                                  ;hkn; SS override
 32048                                  	; MSDOS 6.0
 32049 00005AF4 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 32050                                  	
 32051                                  	;;les	bp,[di+10] ; MSDOS 3.3
 32052                                  	;les	bp,[di+13] ; MSDOS 6.0
 32053 00005AF8 C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 32054                                  	;;lea	bx,[di+16]
 32055                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32056 00005AFB 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 32057                                  	;mov	dx,[di+6]
 32058 00005AFE 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 32059                                  	
 32060                                  	; MSDOS 6.0
 32061                                  	;mov	cx,[di+8]
 32062 00005B01 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 32063                                  
 32064                                  ;hkn; SS override
 32065 00005B04 36890E[0706]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 32066 00005B09 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 32067                                  	; MSDOS 3.3
 32068                                  	;; mov	cx,[DI+8]
 32069                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 32070                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 32071 00005B0C 30ED                    	XOR	CH,CH
 32072                                  	;;mov	ah,ch ; MSDOS 3.3
 32073                                  
 32074                                  ;hkn; SS override for ALLOWED
 32075                                  	;mov	byte [SS:ALLOWED],18h
 32076 00005B0E 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 32077                                  	;test	byte [di+5],8
 32078                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 32079                                  	;test	ah,8
 32080 00005B14 F6C408                  	test	AH,buf_isDATA
 32081 00005B17 7406                    	JZ	short NO_IGNORE
 32082                                  	;or	byte [SS:ALLOWED],20h
 32083 00005B19 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 32084                                  NO_IGNORE:
 32085                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 32086                                  	; MSDOS 6.0
 32087                                  	;mov	ax,[di+11]
 32088 00005B1F 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 32089                                  
 32090 00005B22 57                      	PUSH	DI		; Save buffer pointer
 32091 00005B23 31FF                    	XOR	DI,DI		; Indicate failure
 32092                                  
 32093 00005B25 1E                      	push	ds ; *
 32094 00005B26 53                      	push	bx ; **
 32095                                  WRTAGAIN:
 32096 00005B27 57                      	push	di ; ***
 32097 00005B28 51                      	push	cx ; ****
 32098 00005B29 50                      	push	ax ; *****
 32099                                  	;MOV	CX,1
 32100                                  	; 17/12/2022
 32101                                  	; ch = 0
 32102 00005B2A B101                    	mov	cl,1 ; 24/07/2019
 32103                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32104                                  	;mov	cx,1
 32105 00005B2C 53                      	push	bx ; ******
 32106 00005B2D 52                      	push	dx ; *******
 32107 00005B2E 1E                      	push	ds ; ********
 32108                                  
 32109                                  ; Note: As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 32110                                  
 32111                                  	; MSDOS 6.0
 32112                                  	;cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 32113                                  	; 22/09/2023
 32114 00005B2F 36382E[7900]            	cmp	[ss:BuffInHMA],ch ; 0
 32115 00005B34 7418                    	jz	short NBUFFINHMA
 32116 00005B36 51                      	push	cx
 32117 00005B37 06                      	push	es
 32118 00005B38 89DE                    	mov	si,bx
 32119 00005B3A 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 32120 00005B3E D1E9                    	shr	cx,1
 32121 00005B40 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 32122 00005B45 89FB                    	mov	bx,di
 32123 00005B47 FC                      	cld
 32124 00005B48 F3A5                    	rep	movsw
 32125 00005B4A 06                      	push	es
 32126 00005B4B 1F                      	pop	ds
 32127 00005B4C 07                      	pop	es
 32128 00005B4D 59                      	pop	cx
 32129                                  NBUFFINHMA:
 32130 00005B4E E843DC                  	call	DWRITE		; Write out the dirty buffer
 32131 00005B51 1F                      	pop	ds ; ********
 32132 00005B52 5A                      	pop	dx ; *******
 32133 00005B53 5B                      	pop	bx ; ******
 32134 00005B54 58                      	pop	ax ; *****
 32135 00005B55 59                      	pop	cx ; ****
 32136 00005B56 5F                      	pop	di ; ***
 32137 00005B57 7201                    	JC	short NOSET
 32138 00005B59 47                      	INC	DI		; If at least ONE write succeedes, the operation
 32139                                  NOSET:				;	succeedes.
 32140 00005B5A 01C2                    	ADD	DX,AX
 32141 00005B5C E2C9                    	LOOP	WRTAGAIN
 32142 00005B5E 5B                      	pop	bx ; **
 32143 00005B5F 1F                      	pop	ds ; *
 32144                                  	;OR	DI,DI		; Clears carry
 32145                                  	;JNZ	short BWROK	; At least one write worked
 32146                                  	;STC			; DI never got INCed, all writes failed.
 32147                                  	; 22/09/2023
 32148 00005B60 83FF01                  	cmp	di,1
 32149                                  BWROK:	
 32150 00005B63 5F                      	POP	DI
 32151 00005B64 C3                      	retn
 32152                                  
 32153                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 32154                                  ;----------------------------------------------------------------------------
 32155                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 32156                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 32157                                  ;	SC_DRIVE even if SC is disabled to save the testing
 32158                                  ;	code and time
 32159                                  ;
 32160                                  ;	ENTRY	ES:BP = drive parameter block
 32161                                  ;
 32162                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 32163                                  ;		[SC_DRIVE]= drive #
 32164                                  ;
 32165                                  ;	USES	Flags
 32166                                  ;----------------------------------------------------------------------------
 32167                                  
 32168                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32169                                  ; 04/05/2019 - Retro DOS v4.0
 32170                                  
 32171                                  SET_RQ_SC_PARMS:
 32172                                  ;hkn; SS override for all variables used in this procedure.
 32173 00005B65 50                      	push	ax
 32174                                  	;mov	ax,[es:bp+2]
 32175 00005B66 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 32176 00005B6A 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 32177                                  	;;mov	al,[es:bp+0]
 32178                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32179                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 32180                                  	; 15/12/2022
 32181 00005B6E 268A4600                	mov	al,[ES:BP]
 32182 00005B72 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 32183 00005B76 58                      	pop	ax
 32184                                  srspx:	
 32185 00005B77 C3                      	retn					;LB. return
 32186                                  
 32187                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 32188                                  ;----------------------------------------------------------------------------
 32189                                  ; Input:
 32190                                  ;	none
 32191                                  ; Function:
 32192                                  ;	increment dirty buffers count
 32193                                  ; Output:
 32194                                  ;	dirty buffers count is incremented
 32195                                  ;
 32196                                  ; All registers preserved
 32197                                  ;----------------------------------------------------------------------------
 32198                                  
 32199                                  INC_DIRTY_COUNT:
 32200                                  ;; BUGBUG  ---- remove this routine
 32201                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 32202 00005B78 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 32203 00005B7D C3                      	retn
 32204                                  
 32205                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 32206                                  ;----------------------------------------------------------------------------
 32207                                  ; Input:
 32208                                  ;	none
 32209                                  ; Function:
 32210                                  ;	decrement dirty buffers count
 32211                                  ; Output:
 32212                                  ;	dirty buffers count is decremented
 32213                                  ;
 32214                                  ; All registers preserved
 32215                                  ;----------------------------------------------------------------------------
 32216                                  
 32217                                  DEC_DIRTY_COUNT:
 32218 00005B7E 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 32219 00005B84 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 32220 00005B86 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 32221                                  					; error condition to underflow here? ;hkn;
 32222                                  ddcx:	
 32223 00005B8B C3                      	retn
 32224                                  
 32225                                  ;============================================================================
 32226                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 32227                                  ;============================================================================
 32228                                  ; 02/08/2018 - Retro DOS v3.0
 32229                                  ; 29/04/2019 - Retro DOS v4.0
 32230                                  
 32231                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 32232                                  
 32233                                  ; Pseudo EXEC system call for DOS
 32234                                  
 32235                                  ;	TITLE	MSPROC - process maintenance
 32236                                  ;	NAME	MSPROC
 32237                                  
 32238                                  ; =========================================================================
 32239                                  ;**	Process related system calls and low level routines for DOS 2.X.
 32240                                  ;	I/O specs are defined in DISPATCH.
 32241                                  ;
 32242                                  ;	$WAIT
 32243                                  ;	$EXEC
 32244                                  ;	$Keep_process
 32245                                  ;	Stay_resident
 32246                                  ;	$EXIT
 32247                                  ;	$ABORT
 32248                                  ;	abort_inner
 32249                                  ;
 32250                                  ;	Modification history:
 32251                                  ;
 32252                                  ;		Created: ARR 30 March 1983
 32253                                  ;		AN000	version 4.0 jan. 1988
 32254                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 32255                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 32256                                  ;
 32257                                  ;		M000	added support for loading programs into UMBs 7/9/90
 32258                                  ;
 32259                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 32260                                  ;		       dossym.inc. 7/30/90
 32261                                  ;		M005 - Support for EXE programs with out STACK segment and 
 32262                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 32263                                  ;		       stack is provided at the end of the program. Note that
 32264                                  ;		       only SP is changed.
 32265                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 32266                                  ;
 32267                                  ;		M028 - 4b04 implementation
 32268                                  ;
 32269                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 32270                                  ;			in memory block >= 64K, sp = 0. If memory block
 32271                                  ;			obtained is <64K, point sp at the end of the memory
 32272                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 32273                                  ;			added for a stack segment which may be needed if it
 32274                                  ;			is loaded in low memory situations.
 32275                                  ;
 32276                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 32277                                  ;
 32278                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 32279                                  ;			a bad environment if it reached 32767 bytes. Changed
 32280                                  ;			to allow 32768 bytes of environment.
 32281                                  ;
 32282                                  ;		M047 - Release the allocated UMB when we failed to load a 
 32283                                  ;		       COM file high. Also ensure that if the biggest block
 32284                                  ;		       into which we load the com file is less than 64K then
 32285                                  ;		       we provide atleast 256 bytes of stack to the user.
 32286                                  ;
 32287                                  ;		M050 - Made Lie table search CASE insensitive
 32288                                  ;
 32289                                  ;		M060 - Removed special version table from the kernal and
 32290                                  ;                      put it in a device drive which puts the address
 32291                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 32292                                  ;		       as a DWORD.
 32293                                  ;
 32294                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 32295                                  ;		       entry do not try to load low if there is no space in
 32296                                  ;		       UMBs.
 32297                                  ;
 32298                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 32299                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 32300                                  ;		       change return address to LeaveDos if AL=5.
 32301                                  ;
 32302                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 32303                                  ;                      controls building a version of MSDOS.SYS that only
 32304                                  ;                      runs programs from a fixed list (defined in the
 32305                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 32306                                  ;                      for details.  This feature is used to build a
 32307                                  ;                      "special" version of DOS that can be handed out to
 32308                                  ;                      OEM/ISV customers as part of a "service" disk.
 32309                                  ;
 32310                                  ; =========================================================================
 32311                                  
 32312                                  ;SAVEXIT  EQU  10
 32313                                  
 32314                                  ;BREAK	<$WAIT - return previous process error code>
 32315                                  ; =========================================================================
 32316                                  ;	$WAIT - Return previous process error code.
 32317                                  ;
 32318                                  ;	Assembler usage:
 32319                                  ;
 32320                                  ;	    MOV     AH, WaitProcess
 32321                                  ;	    INT     int_command
 32322                                  ;
 32323                                  ;	ENTRY	none
 32324                                  ;	EXIT	(ax) = exit code
 32325                                  ;	USES	all
 32326                                  ; =========================================================================
 32327                                  
 32328                                  	; 20/05/2019 - Retro DOS v4.0
 32329                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 32330                                  
 32331                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32332                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 32333                                  _$WAIT:
 32334                                  	; 02/08/2018 - Retro DOS v3.0
 32335                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 32336                                  
 32337 00005B8C 31C0                    	xor	AX,AX
 32338 00005B8E 368706[3403]            	xchg	AX,[ss:exit_code]
 32339 00005B93 E9A5AA                  	jmp	SYS_RET_OK
 32340                                  
 32341                                  ; =========================================================================
 32342                                  ;BREAK <$exec - load/go a program>
 32343                                  ;	EXEC.ASM - EXEC System Call
 32344                                  ;
 32345                                  ;
 32346                                  ; Assembler usage:
 32347                                  ;	    lds     DX, Name
 32348                                  ;	    les     BX, Blk
 32349                                  ;	    mov     AH, Exec
 32350                                  ;	    mov     AL, FUNC
 32351                                  ;	    int     INT_COMMAND
 32352                                  ;
 32353                                  ;	AL  Function
 32354                                  ;	--  --------
 32355                                  ;	 0  Load and execute the program.
 32356                                  ;	 1  Load, create the program header but do not
 32357                                  ;	    begin execution.
 32358                                  ;	 3  Load overlay. No header created.
 32359                                  ;
 32360                                  ;	    AL = 0 -> load/execute program
 32361                                  ;
 32362                                  ;	    +---------------------------+
 32363                                  ;	    | WORD segment address of	|
 32364                                  ;	    | environment.		|
 32365                                  ;	    +---------------------------+
 32366                                  ;	    | DWORD pointer to ASCIZ	|
 32367                                  ;	    | command line at 80h	|
 32368                                  ;	    +---------------------------+
 32369                                  ;	    | DWORD pointer to default	|
 32370                                  ;	    | FCB to be passed at 5Ch	|
 32371                                  ;	    +---------------------------+
 32372                                  ;	    | DWORD pointer to default	|
 32373                                  ;	    | FCB to be passed at 6Ch	|
 32374                                  ;	    +---------------------------+
 32375                                  ;
 32376                                  ;	    AL = 1 -> load program
 32377                                  ;
 32378                                  ;	    +---------------------------+
 32379                                  ;	    | WORD segment address of	|
 32380                                  ;	    | environment.		|
 32381                                  ;	    +---------------------------+
 32382                                  ;	    | DWORD pointer to ASCIZ	|
 32383                                  ;	    | command line at 80h	|
 32384                                  ;	    +---------------------------+
 32385                                  ;	    | DWORD pointer to default	|
 32386                                  ;	    | FCB to be passed at 5Ch	|
 32387                                  ;	    +---------------------------+
 32388                                  ;	    | DWORD pointer to default	|
 32389                                  ;	    | FCB to be passed at 6Ch	|
 32390                                  ;	    +---------------------------+
 32391                                  ;	    | DWORD returned value of	|
 32392                                  ;	    | CS:IP			|
 32393                                  ;	    +---------------------------+
 32394                                  ;	    | DWORD returned value of	|
 32395                                  ;	    | SS:IP			|
 32396                                  ;	    +---------------------------+
 32397                                  ;
 32398                                  ;	    AL = 3 -> load overlay
 32399                                  ;
 32400                                  ;	    +---------------------------+
 32401                                  ;	    | WORD segment address where|
 32402                                  ;	    | file will be loaded.	|
 32403                                  ;	    +---------------------------+
 32404                                  ;	    | WORD relocation factor to |
 32405                                  ;	    | be applied to the image.	|
 32406                                  ;	    +---------------------------+
 32407                                  ;
 32408                                  ; Returns:
 32409                                  ;	    AX = error_invalid_function
 32410                                  ;	       = error_bad_format
 32411                                  ;	       = error_bad_environment
 32412                                  ;	       = error_not_enough_memory
 32413                                  ;	       = error_file_not_found
 32414                                  ; =========================================================================
 32415                                  ;
 32416                                  ;   Revision history:
 32417                                  ;
 32418                                  ;	 A000	version 4.00  Jan. 1988
 32419                                  ;
 32420                                  ; =========================================================================
 32421                                  
 32422                                  Exec_Internal_Buffer		EQU	OPENBUF
 32423                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 32424                                  
 32425                                  ; =========================================================================
 32426                                  
 32427                                  ;IF1		; warning message on buffers
 32428                                  ;%out	Please make sure that the following are contiguous and of the
 32429                                  ;%out	following sizes:
 32430                                  ;%out
 32431                                  ;%out	OpenBuf     128
 32432                                  ;%out	RenBuf	    128
 32433                                  ;%out	SearchBuf    53
 32434                                  ;%out	DummyCDS    curdirLen
 32435                                  ;ENDIF
 32436                                  
 32437                                  ; =========================================================================
 32438                                  
 32439                                  ; =========================================================================
 32440                                  ;
 32441                                  ; =========================================================================
 32442                                  
 32443                                  	; 20/05/2019 - Retro DOS v4.0
 32444                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 32445                                  
 32446                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32447                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 32448                                  	
 32449                                  _$EXEC:
 32450                                  	; 02/08/2018 - Retro DOS v3.0
 32451                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 32452                                  
 32453                                  EXEC001S:
 32454                                  	;LocalVar    Exec_Blk		,DWORD
 32455                                  	;LocalVar    Exec_Func		,BYTE
 32456                                  	;LocalVar    Exec_Load_High	,BYTE
 32457                                  	;LocalVar    Exec_FH		,WORD
 32458                                  	;LocalVar    Exec_Rel_Fac	,WORD
 32459                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 32460                                  	;LocalVar    Exec_Environ	,WORD
 32461                                  	;LocalVar    Exec_Size		,WORD
 32462                                  	;LocalVar    Exec_Load_Block	,WORD
 32463                                  	;LocalVar    Exec_DMA		,WORD
 32464                                  	;LocalVar    ExecNameLen 	,WORD
 32465                                  	;LocalVar    ExecName		,DWORD
 32466                                  	;
 32467                                  	;LocalVar    Exec_DMA_Save	,WORD
 32468                                  	;LocalVar    Exec_NoStack	,BYTE
 32469                                  
 32470                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32471                                  	;%define	Exec_Blk	dword [bp-4]
 32472                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 32473                                  	%define		Exec_BlkL	word [bp-4]	
 32474                                  	%define		Exec_BlkH	word [bp-2]
 32475                                  	%define		Exec_Func	byte [bp-5]
 32476                                  	%define		Exec_Load_High	byte [bp-6]
 32477                                  	%define		Exec_FH		word [bp-8]
 32478                                  	%define		Exec_Rel_Fac	word [bp-10]
 32479                                  	%define		Exec_Res_Len_Para word [bp-12]
 32480                                  	%define		Exec_Environ	word [bp-14]
 32481                                  	%define		Exec_Size	word [bp-16]
 32482                                  	%define		Exec_Load_Block	word [bp-18]
 32483                                  	%define		Exec_DMA	word [bp-20]
 32484                                  	%define		ExecNameLen	word [bp-22]
 32485                                  	;%define	ExecName	dword [bp-26]
 32486                                  	%define		ExecName	[bp-26] ; 09/08/2018
 32487                                  	%define		ExecNameL	word [bp-26]	
 32488                                  	%define		ExecNameH	word [bp-24]
 32489                                  	; MSDOS 6.0
 32490                                  	%define		Exec_DMA_Save	word [bp-28]
 32491                                  	%define		Exec_NoStack	byte [bp-29]
 32492                                  	
 32493                                  	; ==================================================================
 32494                                  	; validate function
 32495                                  	; ==================================================================
 32496                                  		      	
 32497                                  	; M068 - Start
 32498                                  	;
 32499                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 32500                                  	; possibility that the count may not be decremented all the way to
 32501                                  	; 0. A typical case is if the program for which we intended to keep 
 32502                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 32503                                  	; calls), exits pre-maturely due to error conditions.
 32504                                  
 32505                                  	; MSDOS 6.0
 32506 00005B96 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 32507                                  
 32508                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 32509                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 32510                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 32511                                  
 32512 00005B9C 3C05                    	cmp	al,5			; Q: is this ExecReady call
 32513                                  	;jne	short @f
 32514 00005B9E 7505                    	jne	short Exec_@f		; N: continue
 32515                                  					; Y: change ret addr. to LeaveDos.
 32516 00005BA0 59                      	pop	cx			; Note CX is not input to ExecReady
 32517 00005BA1 B9[0804]                	mov	cx,LeaveDOS
 32518 00005BA4 51                      	push	cx
 32519                                  ;@@:
 32520                                  Exec_@f:
 32521                                  	; M068 - End
 32522                                  	
 32523                                  	;Enter
 32524                                  
 32525 00005BA5 55                      	push	bp
 32526 00005BA6 89E5                    	mov	bp,sp
 32527                                  	;;sub	sp,26	; MSDOS 3.3
 32528                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 32529                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 32530                                  	; 17/12/2022
 32531                                  	; 20/05/2019
 32532 00005BA8 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 32533                                  
 32534                                  	; MSDOS 6.0
 32535 00005BAB 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 32536                                  					; M030
 32537 00005BAD 7614                    	jna	short Exec_Check_2
 32538                                  
 32539                                  	; MSDOS 3.3
 32540                                  	;cmp	AL,3
 32541                                  	;jna	short Exec_Check_2
 32542                                  
 32543                                  Exec_Bad_Fun:
 32544 00005BAF 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 32545                                  					; Extended Error Locus	;smr;SS Override
 32546                                  	;mov	al,1
 32547 00005BB5 B001                    	mov	al,error_invalid_function
 32548                                  
 32549                                  Exec_Ret_Err:
 32550                                  	;Leave
 32551 00005BB7 89EC                    	mov	sp,bp
 32552 00005BB9 5D                      	pop	bp
 32553                                  	;transfer SYS_RET_ERR
 32554 00005BBA E987AA                  	jmp	SYS_RET_ERR
 32555                                  
 32556                                  	; MSDOS 6.0
 32557                                  ExecReadyJ:
 32558 00005BBD E8FD17                  	call	ExecReady		; M028
 32559 00005BC0 E90504                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 32560                                  
 32561                                  Exec_Check_2:
 32562 00005BC3 3C02                    	cmp	AL,2			
 32563 00005BC5 74E8                    	je	short Exec_Bad_Fun
 32564                                  
 32565                                  	; MSDOS 6.0
 32566 00005BC7 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 32567 00005BC9 74E4                    	je	short Exec_Bad_Fun
 32568                                  	
 32569 00005BCB 3C05                    	cmp	al,5			; M028 ; M030
 32570 00005BCD 74EE                    	je	short ExecReadyJ	; M028
 32571                                  
 32572                                  	;mov	[bp-4],bx
 32573 00005BCF 895EFC                  	mov	Exec_BlkL,BX		; stash args
 32574                                  	;mov	[bp-2],es
 32575 00005BD2 8C46FE                  	mov	Exec_BlkH,ES
 32576                                  	;mov	[bp-5],al
 32577 00005BD5 8846FB                  	mov	Exec_Func,AL
 32578                                  	;mov	byte [bp-6],0
 32579 00005BD8 C646FA00                	mov	Exec_Load_High,0
 32580                                  
 32581                                  	;mov	[bp-26],dx
 32582 00005BDC 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 32583                                  	;mov	[bp-24],ds
 32584 00005BDF 8C5EE8                  	mov	ExecNameH,DS
 32585 00005BE2 89D6                    	mov	SI,DX			; move pointer to convenient place
 32586                                  	;invoke	DStrLen
 32587 00005BE4 E819B6                  	call	DStrLen
 32588                                  	;mov	[bp-22],cx
 32589 00005BE7 894EEA                  	mov	ExecNameLen,CX		; save length
 32590                                  
 32591                                  	; MSDOS 6.0
 32592 00005BEA 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 32593 00005BEE 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 32594                                  
 32595 00005BF2 30C0                    	xor	AL,AL			; open for reading
 32596 00005BF4 55                      	push	BP
 32597                                  
 32598                                  	; MSDOS 6.0
 32599                                  	;or	byte [ss:DOS_FLAG],1
 32600 00005BF5 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 32601                                  					; the redir that this open call is
 32602                                  					; due to an exec.
 32603                                  
 32604                                  	;invoke	$OPEN			; is the file there?
 32605 00005BFB E80513                  	call	_$OPEN
 32606                                  
 32607                                  	; MSDOS 6.0
 32608 00005BFE 9C                      	pushf
 32609                                  	; 02/06/2019
 32610                                  	;and	byte [ss:DOS_FLAG],0FEh
 32611 00005BFF 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 32612 00005C05 9D                      	popf
 32613                                  
 32614 00005C06 5D                      	pop	BP
 32615                                  
 32616                                  	; MSDOS 3.3 & MSDOS 6.0
 32617 00005C07 72AE                    	jc	short Exec_Ret_Err
 32618                                  
 32619                                  	;mov	[bp-8],ax
 32620 00005C09 8946F8                  	mov	Exec_FH,AX
 32621 00005C0C 89C3                    	mov	BX,AX
 32622 00005C0E 30C0                    	xor	AL,AL
 32623                                  	;invoke	$Ioctl
 32624 00005C10 E889C6                  	call	_$IOCTL
 32625 00005C13 7207                    	jc	short Exec_BombJ
 32626                                  
 32627                                  	;test	dl,80h
 32628 00005C15 F6C280                  	test	DL,devid_ISDEV
 32629 00005C18 740A                    	jz	short Exec_Check_Environ
 32630                                  
 32631                                  	;mov	al,2
 32632 00005C1A B002                    	mov	AL,error_file_not_found
 32633                                  Exec_BombJ:
 32634 00005C1C E9CA00                  	jmp	Exec_Bomb
 32635                                  
 32636                                  BadEnv:
 32637                                  	;mov	al,0Ah
 32638 00005C1F B00A                    	mov	AL,error_bad_environment
 32639 00005C21 E9C500                  	jmp	Exec_Bomb
 32640                                  
 32641                                  Exec_Check_Environ:
 32642                                  	;mov	word [bp-18],0
 32643 00005C24 C746EE0000              	mov	Exec_Load_Block,0
 32644                                  	;mov	word [bp-14],0
 32645 00005C29 C746F20000              	mov	Exec_Environ,0
 32646                                  					; overlays... no environment
 32647                                  	;test	byte [bp-5],2
 32648 00005C2E F646FB02                	test	Exec_Func,exec_func_overlay
 32649 00005C32 7552                    	jnz	short Exec_Read_Header
 32650                                  
 32651                                  	;lds	si,[bp-4]
 32652 00005C34 C576FC                  	lds	SI,Exec_Blk		; get block
 32653 00005C37 8B04                    	mov	ax,[SI]
 32654                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 32655 00005C39 09C0                    	or	AX,AX
 32656 00005C3B 750C                    	jnz	short Exec_Scan_Env
 32657                                  
 32658 00005C3D 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 32659                                  	;mov	ax,[44]
 32660 00005C42 A12C00                  	mov	AX,[PDB.ENVIRON]
 32661                                  
 32662                                  ; MSDOS 6.0
 32663                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 32664                                  ;
 32665                                  ; Exec_environ is being correctly initialized after the environment has been
 32666                                  ; allocated and copied form the parent's env. It must not be initialized here.
 32667                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 32668                                  ; parent's environment.
 32669                                  ;	mov	Exec_Environ,AX
 32670                                  ;
 32671                                  ;----------------------------------------------------------------------------
 32672                                  
 32673                                  	;mov	[bp-14],ax
 32674                                  	;mov	Exec_Environ,ax
 32675                                  
 32676 00005C45 09C0                    	or	AX,AX
 32677 00005C47 743D                    	jz	short Exec_Read_Header
 32678                                  
 32679                                  Exec_Scan_Env:
 32680 00005C49 8EC0                    	mov	ES,AX
 32681 00005C4B 31FF                    	xor	DI,DI
 32682                                  	;mov	cx,7FFFh ; MSDOS 3.3
 32683 00005C4D B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 32684 00005C50 30C0                    	xor	AL,AL
 32685                                  
 32686                                  Exec_Get_Environ_Len:
 32687 00005C52 F2AE                    	repnz	scasb			; find that nul byte
 32688 00005C54 75C9                    	jnz	short BadEnv
 32689                                  
 32690 00005C56 49                      	dec	CX			; Dec CX for the next nul byte test
 32691 00005C57 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 32692                                  
 32693 00005C59 AE                      	scasb				; is there another nul byte?
 32694 00005C5A 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 32695                                  
 32696 00005C5C 57                      	push	DI
 32697                                  	;lea	bx,[DI+11h]
 32698 00005C5D 8D5D11                  	lea	BX,[DI+0Fh+2]
 32699                                  	;add	bx,[bp-22]
 32700 00005C60 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 32701                                  					; remember argv[0] length
 32702                                  					; round up and remember argc
 32703 00005C63 B104                    	mov	CL,4
 32704 00005C65 D3EB                    	shr	BX,CL			; number of paragraphs needed
 32705 00005C67 06                      	push	ES
 32706                                  	;invoke	$Alloc			; can we get the space?
 32707 00005C68 E84406                  	call	_$ALLOC
 32708 00005C6B 1F                      	pop	DS
 32709 00005C6C 59                      	pop	CX
 32710                                  
 32711                                  	;jnc	short Exec_Save_Environ
 32712                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 32713                                  	; 17/12/2022
 32714 00005C6D 7274                    	jc	short Exec_No_Mem ; 02/06/2019
 32715                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32716                                  	;jnc	short Exec_Save_Environ
 32717                                  	;jmp	SHORT Exec_No_Mem
 32718                                  
 32719                                  Exec_Save_Environ:
 32720 00005C6F 8EC0                    	mov	ES,AX
 32721                                  	;mov	[bp-14],ax
 32722 00005C71 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 32723 00005C74 31F6                    	xor	SI,SI
 32724 00005C76 89F7                    	mov	DI,SI
 32725 00005C78 F3A4                    	rep	movsb			; copy the environment
 32726 00005C7A B80100                  	mov	AX,1
 32727 00005C7D AB                      	stosw
 32728                                  	;lds	si,[bp-26]
 32729 00005C7E C576E6                  	lds	SI,ExecName
 32730                                  	;mov	cx,[bp-22]
 32731 00005C81 8B4EEA                  	mov	CX,ExecNameLen
 32732 00005C84 F3A4                    	rep	movsb
 32733                                  
 32734                                  Exec_Read_Header:
 32735                                  	; We read in the program header into the above data area and
 32736                                  	; determine where in this memory the image will be located.
 32737                                  
 32738                                  	;Context DS
 32739 00005C86 16                      	push	ss
 32740 00005C87 1F                      	pop	ds
 32741                                  	;mov	cx,26
 32742 00005C88 B91A00                  	mov	CX,exec_header_len	; header size
 32743 00005C8B BA[C80F]                	mov	DX,exec_signature
 32744 00005C8E 06                      	push	ES
 32745 00005C8F 1E                      	push	DS
 32746 00005C90 E88304                  	call	ExecRead
 32747 00005C93 1F                      	pop	DS
 32748 00005C94 07                      	pop	ES
 32749 00005C95 7250                    	jc	short Exec_Bad_File
 32750                                  
 32751 00005C97 09C0                    	or	AX,AX
 32752 00005C99 744C                    	jz	short Exec_Bad_File
 32753                                  	;cmp	ax,26
 32754 00005C9B 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 32755 00005C9E 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 32756                                  
 32757 00005CA0 F706[D40F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 32758 00005CA6 7504                    	jnz	short Exec_Check_Sig
 32759                                  
 32760                                  	;mov	byte [bp-6],0FFh
 32761 00005CA8 C646FAFF                	mov	Exec_Load_High,-1
 32762                                  
 32763                                  Exec_Check_Sig:
 32764 00005CAC A1[C80F]                	mov	AX,[exec_signature]	; rms;NSS
 32765                                  	;cmp	ax,5A4Dh ; 'MZ'
 32766 00005CAF 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 32767 00005CB2 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32768                                  
 32769                                  	;cmp	ax,4D5Ah ; 'ZM'
 32770 00005CB4 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 32771 00005CB7 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32772                                  
 32773                                  Exec_Com_Filej:
 32774 00005CB9 E9E901                  	jmp	Exec_Com_File
 32775                                  
 32776                                  	; We have the program header... determine memory requirements
 32777                                  
 32778                                  Exec_Save_Start:
 32779 00005CBC A1[CC0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 32780 00005CBF B105                    	mov	CL,5			; convert to paragraphs
 32781 00005CC1 D3E0                    	shl	AX,CL
 32782 00005CC3 2B06[D00F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 32783                                  	;mov	[bp-12],ax
 32784 00005CC7 8946F4                  	mov	Exec_Res_Len_Para,AX
 32785                                  
 32786                                  		; Do we need to allocate memory?
 32787                                  		; Yes if function is not load-overlay
 32788                                  
 32789                                  	;test	byte [bp-5],2
 32790 00005CCA F646FB02                	test	Exec_Func,exec_func_overlay
 32791 00005CCE 7445                    	jz	short Exec_Allocate	; allocation of space
 32792                                  
 32793                                  		; get load address from block
 32794                                  
 32795                                  	;les	di,[bp-4]
 32796 00005CD0 C47EFC                  	les	DI,Exec_Blk
 32797 00005CD3 268B05                  	mov	ax,[es:di]
 32798                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 32799                                  	;mov	[bp-20],ax
 32800 00005CD6 8946EC                  	mov	Exec_DMA,AX
 32801                                  
 32802                                  	; 17/12/2022
 32803                                  	;;mov	ax,[es:di+2]
 32804                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 32805                                  	;;mov	[bp-10],ax
 32806                                  	;mov	Exec_Rel_Fac,AX
 32807                                  
 32808                                  	; 17/12/2022
 32809                                  	; 30/11/2022 (!most proper code!)
 32810                                  	;mov	dx,[es:di+2]
 32811 00005CD9 268B5502                	mov	dx,[ES:DI+EXEC3.reloc_fac]
 32812                                  	;mov	[bp-10],dx
 32813 00005CDD 8956F6                  	mov	Exec_Rel_Fac,dx
 32814                                  	; ax = Exec_DMA
 32815 00005CE0 E9DE00                  	jmp	Exec_Find_Res
 32816                                  
 32817                                  ; 17/12/2022
 32818                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32819                                  ; 27/09/2023
 32820                                  %if 0
 32821                                  	; 02/06/2019 - Retro DOS v4.0
 32822                                  	;mov	ax,[bp-20]  ; *+*
 32823                                  	mov	AX,Exec_DMA ; *+*
 32824                                  	; 10/08/2018
 32825                                  	jmp	Exec_Find_Res		; M000
 32826                                  %endif
 32827                                  
 32828                                  Exec_No_Mem:
 32829                                  	;mov	al,8
 32830 00005CE3 B008                    	mov	AL,error_not_enough_memory
 32831 00005CE5 EB02                    	jmp	short Exec_Bomb
 32832                                  
 32833                                  Exec_Bad_File:
 32834                                  	;mov	al,0Bh
 32835 00005CE7 B00B                    	mov	AL,error_bad_format
 32836                                  
 32837                                  Exec_Bomb:
 32838                                  	;mov	bx,[bp-8]
 32839 00005CE9 8B5EF8                  	mov	BX,Exec_FH
 32840 00005CEC E84004                  	call	Exec_Dealloc
 32841                                  	;LeaveCrit CritMem
 32842 00005CEF E83FB6                  	call	LCritMEM
 32843                                  	;save	<AX,BP>
 32844 00005CF2 50                      	push	ax
 32845 00005CF3 55                      	push	bp
 32846                                  	;invoke	$CLOSE
 32847 00005CF4 E83D0A                  	call	_$CLOSE
 32848                                  	;restore <BP,AX>
 32849 00005CF7 5D                      	pop	bp
 32850 00005CF8 58                      	pop	ax
 32851 00005CF9 E9BBFE                  	jmp	Exec_Ret_Err
 32852                                  
 32853                                  Exec_Chk_Mem: 
 32854                                  	
 32855                                  	; 24/09/2023
 32856                                  	; ds = DOSDATA
 32857                                  ; 17/12/2022
 32858                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32859                                  ;%if 0
 32860                                  	; MSDOS 6.0    			; M063 - Start
 32861                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32862                                  	; 10/06/2019
 32863 00005CFC A0[0203]                	mov	al,[AllocMethod]
 32864                                  	;mov	bl,[ss:ALLOCMSAVE]
 32865 00005CFF 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 32866                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 32867 00005D03 881E[0203]              	mov	[AllocMethod],bl
 32868                                  	
 32869 00005D07 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32870 00005D0A 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32871                                  	;				; N: continue
 32872                                  	;
 32873 00005D0C A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32874 00005D0E 74D3                    	jz	short Exec_No_Mem	; N: no memory 
 32875                                  	; 02/06/2019
 32876                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32877 00005D10 A1[8A00]                	mov	ax,[SAVE_AX]
 32878                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 32879                                  					; M063 - End
 32880 00005D13 EB2B                    	jmp	short Exec_Norm_Alloc1
 32881                                  ;%endif
 32882                                  
 32883                                  ; 17/12/2022
 32884                                  %if 0
 32885                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32886                                  	; MSDOS 6.0    			; M063 - Start
 32887                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32888                                  	mov	bl,[ss:ALLOCMSAVE]
 32889                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 32890                                  
 32891                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32892                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32893                                  	;				; N: continue
 32894                                  	;
 32895                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32896                                  	jz	short Exec_No_Mem	; N: no memory 
 32897                                  
 32898                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32899                                  	jmp	short Exec_Norm_Alloc	;    Try again
 32900                                  					; M063 - End
 32901                                  %endif
 32902                                  
 32903                                  Exec_Allocate:
 32904                                  	; 09/09/2018
 32905                                  
 32906                                  	; M005 - START
 32907                                  	; If there is no STACK segment for this exe file and if this
 32908                                  	; not an overlay and the resident size is less than 64K - 
 32909                                  	; 256 bytes we shall add 256 bytes to the programs 
 32910                                  	; resident memory requirement and set Exec_SP to this value.
 32911                                  	
 32912                                  	; 17/12/2022
 32913 00005D15 29DB                    	sub	bx,bx ; 0	
 32914                                  
 32915                                  	; MSDOS 6.0
 32916                                  	;;mov	byte [bp-29],0
 32917                                  	;mov	Exec_NoStack,0
 32918                                  	; 17/12/2022
 32919 00005D17 885EE3                  	mov	Exec_NoStack,bl ; 0
 32920 00005D1A 391E[D60F]              	cmp	[exec_SS],bx ; 0
 32921                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 32922 00005D1E 7511                    	jne	short ea1		; Y: continue normal processing
 32923 00005D20 391E[D80F]              	cmp	[exec_SP],bx ; 0
 32924                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 32925 00005D24 750B                    	jne	short ea1		; Y: continue normal processing
 32926                                  
 32927                                  	;inc	byte [bp-29]
 32928 00005D26 FE46E3                  	inc	Exec_NoStack
 32929 00005D29 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 32930 00005D2C 7303                    	jae	short ea1		; Y: don't set Exec_SP
 32931                                  
 32932 00005D2E 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 32933                                  ea1:
 32934                                  	; M005 - END
 32935                                  
 32936                                  	; MSDOS 6.0			; M000 - start
 32937                                  	; 20/05/2019
 32938                                  	; (ds = ss = DOSDATA)
 32939 00005D31 F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 32940                                  					; Q: is the alloc strat high_first
 32941 00005D36 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 32942                                  					; Y: set high_only bit
 32943 00005D38 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 32944                                  					; M000 - end
 32945                                  Exec_Norm_Alloc:
 32946 00005D3D A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd  
 32947                                  Exec_Norm_Alloc1:	; 02/06/2019
 32948                                  					; M000: attempt at allocating memory
 32949                                  	; MSDOS 3.3
 32950                                  	;push	ax			; M000
 32951                                  
 32952 00005D40 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 32953 00005D43 1E                      	push	DS
 32954                                  	;invoke	$Alloc			; should have carry set and BX has max
 32955 00005D44 E86805                  	call	_$ALLOC
 32956 00005D47 1F                      	pop	DS
 32957                                  
 32958                                  	; MSDOS 6.0
 32959 00005D48 A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 32960                                  	; MSDOS 3.3
 32961                                  	;pop	ax			; M000
 32962                                  
 32963 00005D4B 83C010                  	add	AX,10h			; room for header
 32964 00005D4E 83FB11                  	cmp	BX,11h			; enough room for a header
 32965                                  	; MSDOS 6.0
 32966 00005D51 72A9                    	jb	short Exec_Chk_Mem	; M000
 32967                                  	; MSDOS 3.3	
 32968                                  	;jb	short Exec_No_Mem
 32969                                  
 32970 00005D53 39D8                    	cmp	AX,BX			; is there enough for bare image?
 32971                                  	; MSDOS 6.0
 32972 00005D55 77A5                    	ja	short Exec_Chk_Mem	; M000
 32973                                  	; MSDOS 3.3
 32974                                  	;ja	short Exec_No_Mem
 32975                                  
 32976                                  	;test	byte [bp-6],0FFh
 32977 00005D57 F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 32978 00005D5B 7518                    	jnz	short Exec_BX_Max	; use max
 32979                                  
 32980                                  	; 09/09/2018
 32981                                  
 32982 00005D5D 0306[D20F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 32983                                  	; MSDOS 6.0
 32984 00005D61 7299                    	jc	short Exec_Chk_Mem		; M000
 32985                                  	; MSDOS 3.3
 32986                                  	;jc	short Exec_No_Mem
 32987                                  
 32988 00005D63 39D8                    	cmp	AX,BX			; enough space?
 32989                                  	; MSDOS 6.0
 32990 00005D65 7795                    	ja	short Exec_Chk_Mem	; M000: nope...	
 32991                                  	; MSDOS 3.3
 32992                                  	;ja	short Exec_No_Mem
 32993                                  
 32994 00005D67 2B06[D20F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 32995 00005D6B 0306[D40F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 32996 00005D6F 7204                    	jc	short Exec_BX_Max
 32997                                  
 32998 00005D71 39D8                    	cmp	AX,BX
 32999 00005D73 7602                    	jbe	short Exec_Got_Block
 33000                                  
 33001                                  Exec_BX_Max:
 33002 00005D75 89D8                    	mov	AX,BX
 33003                                  
 33004                                  Exec_Got_Block:
 33005                                  	; 03/08/2018 - Retro DOS v3.0
 33006                                  
 33007 00005D77 1E                      	push	DS
 33008 00005D78 89C3                    	mov	BX,AX
 33009                                  	;mov	[bp-16],bx
 33010 00005D7A 895EF0                  	mov	Exec_Size,BX
 33011                                  	;invoke	$Alloc			; get the space
 33012 00005D7D E82F05                  	call	_$ALLOC
 33013 00005D80 1F                      	pop	DS
 33014                                  	; MSDOS 6.0
 33015                                  	;jc	short Exec_Chk_Mem	; M000
 33016                                  	; MSDOS 3.3
 33017                                  	;;jc	short Exec_No_Mem
 33018                                  	; 20/05/2019
 33019 00005D81 7303                    	jnc	short ea0
 33020 00005D83 E976FF                  	jmp	Exec_Chk_Mem
 33021                                  ea0:
 33022                                  	; MSDOS 6.0
 33023 00005D86 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 33024 00005D8A 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 33025                                  
 33026                                  ;M029; Begin changes
 33027                                  ; This code does special handling for programs with no stack segment. If so,
 33028                                  ;check if the current block is larger than 64K. If so, we do not modify
 33029                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 33030                                  ;case Exec_SS is not changed.
 33031                                  
 33032                                  	; MSDOS 6.0
 33033                                  	;cmp	byte [bp-29],0
 33034 00005D8E 807EE300                	cmp	Exec_NoStack,0
 33035                                  	;je	@f
 33036 00005D92 7412                    	je	short ea2
 33037                                  
 33038 00005D94 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 33039                                  	;jae	@f			; Y: Exec_SP = 0
 33040 00005D98 730C                    	jae	short ea2
 33041                                  
 33042                                  ;Make Exec_SP point at the top of the memory block
 33043                                  
 33044 00005D9A B104                    	mov	cl,4
 33045 00005D9C D3E3                    	shl	bx,cl			; get byte offset
 33046 00005D9E 81EB0001                	sub	bx,100h			; take care of PSP
 33047 00005DA2 891E[D80F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 33048                                  ea2:
 33049                                  ;@@:
 33050                                  ;M029; end changes
 33051                                  
 33052                                  	;mov	[bp-18],ax
 33053 00005DA6 8946EE                  	mov	Exec_Load_Block,AX
 33054 00005DA9 83C010                  	add	AX,10h
 33055                                  	;test	byte [bp-6],0FFh
 33056 00005DAC F646FAFF                	test	Exec_Load_High,-1
 33057 00005DB0 7409                    	jz	short Exec_Use_AX	; use ax for load info
 33058                                  
 33059                                  	;add	ax,[bp-16]
 33060 00005DB2 0346F0                  	add	AX,Exec_Size		; go to end
 33061                                  	;sub	ax,[bp-12]
 33062 00005DB5 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 33063 00005DB8 83E810                  	sub	AX,10h			; drop off pdb
 33064                                  
 33065                                  Exec_Use_AX:
 33066                                  	;mov	[bp-10],ax
 33067 00005DBB 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 33068                                  	;mov	[bp-20],ax
 33069 00005DBE 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 33070                                  
 33071                                  	; Determine the location in the file of the beginning of
 33072                                  	; the resident
 33073                                  
 33074                                  ; 17/12/2022
 33075                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33076                                  ;%if 0
 33077                                  
 33078                                  Exec_Find_Res:
 33079                                  	; MSDOS 6.0
 33080                                  	;;mov	dx,[bp-20]
 33081                                  	;mov	DX,Exec_DMA ; *+*
 33082                                  	;;mov	[bp-28],dx
 33083                                  	;mov	Exec_DMA_Save,DX
 33084                                  
 33085                                  	; 17/12/2022
 33086                                  	; AX = Exec_DMA
 33087                                  
 33088                                  	; 02/06/2019 - Retro DOS v4.0
 33089                                  	;mov	[bp-28],ax ; *+*
 33090 00005DC1 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 33091                                  
 33092                                  ;%endif
 33093                                  
 33094                                  ; 17/12/2022
 33095                                  %if 0
 33096                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33097                                  Exec_Find_Res:
 33098                                  	;mov	dx,[bp-20]
 33099                                  	mov	DX,Exec_DMA ; *+*
 33100                                  	;mov	[bp-28],dx
 33101                                  	mov	Exec_DMA_Save,DX
 33102                                  %endif
 33103                                  
 33104                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33105 00005DC4 8B16[D00F]              	mov	DX,[exec_par_dir]
 33106 00005DC8 52                      	push	DX
 33107 00005DC9 B104                    	mov	CL,4
 33108 00005DCB D3E2                    	shl	DX,CL			; low word of location
 33109 00005DCD 58                      	pop	AX
 33110 00005DCE B10C                    	mov	CL,12
 33111 00005DD0 D3E8                    	shr	AX,CL			; high word of location
 33112 00005DD2 89C1                    	mov	CX,AX			; CX <- high
 33113                                  
 33114                                  		; Read in the resident image (first, seek to it)
 33115                                  	;mov	bx,[bp-8]
 33116 00005DD4 8B5EF8                  	mov	BX,Exec_FH
 33117 00005DD7 1E                      	push	DS
 33118 00005DD8 30C0                    	xor	AL,AL
 33119                                  	;invoke	$Lseek			; Seek to resident
 33120 00005DDA E8D30A                  	call	_$LSEEK
 33121 00005DDD 1F                      	pop	DS
 33122 00005DDE 7303                    	jnc	short Exec_Big_Read
 33123                                  
 33124 00005DE0 E906FF                  	jmp	Exec_Bomb
 33125                                  
 33126                                  Exec_Big_Read:				; Read resident into memory
 33127                                  	;mov	bx,[bp-12]
 33128 00005DE3 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 33129 00005DE6 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 33130 00005DEA 7203                    	jb	short Exec_Read_OK
 33131                                  
 33132 00005DEC BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 33133                                  
 33134                                  Exec_Read_OK:
 33135                                  	;sub	[bp-12],bx
 33136 00005DEF 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 33137 00005DF2 53                      	push	BX
 33138 00005DF3 B104                    	mov	CL,4
 33139 00005DF5 D3E3                    	shl	BX,CL			; Get count in bytes from paras
 33140 00005DF7 89D9                    	mov	CX,BX			; Count in correct register
 33141 00005DF9 1E                      	push	DS
 33142                                  	;mov	ds,[bp-20]
 33143 00005DFA 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 33144                                  
 33145 00005DFD 31D2                    	xor	DX,DX
 33146 00005DFF 51                      	push	CX			; Save our count
 33147 00005E00 E81303                  	call	ExecRead
 33148 00005E03 59                      	pop	CX			; Get old count to verify
 33149 00005E04 1F                      	pop	DS
 33150 00005E05 7248                    	jc	short Exec_Bad_FileJ
 33151                                  
 33152 00005E07 39C1                    	cmp	CX,AX			; Did we read enough?
 33153 00005E09 5B                      	pop	BX			; Get paragraph count back
 33154 00005E0A 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 33155                                  
 33156                                  	; The read did not match the request. If we are off by 512
 33157                                  	; bytes or more then the header lied and we have an error.
 33158                                  
 33159 00005E0C 29C1                    	sub	CX,AX
 33160 00005E0E 81F90002                	cmp	CX,512
 33161 00005E12 733B                    	jae	short Exec_Bad_FileJ
 33162                                  
 33163                                  	; We've read in CX bytes... bump DTA location
 33164                                  
 33165                                  ExecCheckEnd:
 33166                                  	;add	[bp-20],bx
 33167 00005E14 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 33168                                  	;test	word [bp-12],0FFFFh
 33169 00005E17 F746F4FFFF              	test	Exec_Res_Len_Para,-1
 33170 00005E1C 75C5                    	jnz	short Exec_Big_Read
 33171                                  
 33172                                  	; The image has now been read in. We must perform relocation
 33173                                  	; to the current location.
 33174                                  
 33175                                  exec_do_reloc:
 33176                                  	;mov	cx,[bp-10]
 33177 00005E1E 8B4EF6                  	mov	CX,Exec_Rel_Fac
 33178 00005E21 A1[D60F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 33179 00005E24 01C8                    	add	AX,CX			; and relocate him
 33180 00005E26 A3[C20F]                	mov	[exec_init_SS],AX 	; rms;NSS
 33181                                  
 33182 00005E29 A1[D80F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 33183 00005E2C A3[C00F]                	mov	[exec_init_SP],AX 	; rms;NSS
 33184                                  
 33185 00005E2F C406[DC0F]              	les	AX,[exec_IP]		; rms;NSS
 33186 00005E33 A3[C40F]                	mov	[exec_init_IP],AX 	; rms;NSS
 33187 00005E36 8CC0                    	mov	AX,ES			; rms;NSS
 33188 00005E38 01C8                    	add	AX,CX			; relocated...
 33189 00005E3A A3[C60F]                	mov	[exec_init_CS],AX 	; rms;NSS
 33190                                  
 33191 00005E3D 31C9                    	xor	CX,CX
 33192 00005E3F 8B16[E00F]              	mov	DX,[exec_rle_table]	; rms;NSS
 33193                                  	;mov	bx,[bp-8]
 33194 00005E43 8B5EF8                  	mov	BX,Exec_FH
 33195 00005E46 1E                      	push	DS
 33196 00005E47 31C0                    	xor	AX,AX
 33197                                  	;invoke	$Lseek
 33198 00005E49 E8640A                  	call	_$LSEEK
 33199 00005E4C 1F                      	pop	DS
 33200 00005E4D 7303                    	jnc	short exec_get_entries
 33201                                  
 33202                                  Exec_Bad_FileJ:
 33203 00005E4F E995FE                  	jmp	Exec_Bad_File
 33204                                  
 33205                                  exec_get_entries:
 33206 00005E52 8B16[CE0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 33207                                  
 33208                                  exec_read_reloc:
 33209 00005E56 52                      	push	DX
 33210                                  	;mov	dx,OPENBUF
 33211 00005E57 BA[BE03]                	mov	DX,Exec_Internal_Buffer
 33212                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 33213                                  	;mov	cx,396 ; MSDOS 6.0
 33214 00005E5A B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 33215 00005E5D 1E                      	push	DS
 33216 00005E5E E8B502                  	call	ExecRead
 33217 00005E61 07                      	pop	ES
 33218 00005E62 5A                      	pop	DX
 33219 00005E63 72EA                    	jc	short Exec_Bad_FileJ
 33220                                  
 33221                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 33222                                  	;mov	cx,99 ;  MSDOS 6.0
 33223 00005E65 B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 33224                                  					; Pointer to byte location in header
 33225                                  	;mov	di,OPENBUF
 33226 00005E68 BF[BE03]                	mov	DI,Exec_Internal_Buffer
 33227                                  	;mov	si,[bp-10]
 33228 00005E6B 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 33229                                  
 33230                                  exec_reloc_one:
 33231 00005E6E 09D2                    	or	DX,DX			; Any more entries?
 33232 00005E70 7416                    	jz	short Exec_Set_PDBJ
 33233                                  
 33234                                  exec_get_addr:
 33235 00005E72 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 33236 00005E75 8CD8                    	mov	AX,DS			; Relocate address of item
 33237                                  
 33238                                  	; MSDOS 6.0
 33239                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 33240                                  	;add	ax,[bp-28]
 33241 00005E77 0346E4                  	add	AX,Exec_DMA_Save
 33242                                  
 33243 00005E7A 8ED8                    	mov	DS,AX
 33244 00005E7C 0137                    	add	[BX],SI
 33245 00005E7E 83C704                  	add	DI,4
 33246 00005E81 4A                      	dec	DX
 33247 00005E82 E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 33248                                  
 33249                                  	; We've exhausted a single buffer's worth. Read in the next
 33250                                  	; piece of the relocation table.
 33251                                  
 33252 00005E84 06                      	push	ES
 33253 00005E85 1F                      	pop	DS
 33254 00005E86 EBCE                    	jmp	short exec_read_reloc
 33255                                  
 33256                                  Exec_Set_PDBJ:
 33257                                  	; MSDOS 6.0
 33258                                  	
 33259                                  	; We now determine if this is a buggy exe packed file and if 
 33260                                  	; so we patch in the right code. Note that fixexepatch will
 33261                                  	; point to a ret if dos loads low. The load segment as 
 33262                                  	; determined above will be in exec_dma_save
 33263                                  	
 33264 00005E88 06                      	push	es
 33265 00005E89 50                      	push	ax			; M030
 33266 00005E8A 51                      	push	cx			; M030
 33267                                  	;mov	es,[bp-28]
 33268 00005E8B 8E46E4                  	mov	es,Exec_DMA_Save
 33269 00005E8E 36A1[C60F]              	mov	ax,[ss:exec_init_CS]	; M030
 33270 00005E92 368B0E[C40F]            	mov	cx,[ss:exec_init_IP]	; M030
 33271 00005E97 36FF16[F811]            	call	word [ss:FixExePatch]
 33272                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33273                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 33274                                  	;call	word [ss:Rational386PatchPtr]
 33275 00005E9C 59                      	pop	cx			; M030
 33276 00005E9D 58                      	pop	ax			; M030
 33277 00005E9E 07                      	pop	es
 33278                                  
 33279 00005E9F E9DE00                  	jmp	Exec_Set_PDB
 33280                                  
 33281                                  Exec_No_Memj:
 33282 00005EA2 E93EFE                  	jmp	Exec_No_Mem
 33283                                  
 33284                                  	; we have a .COM file. First, determine if we are merely
 33285                                  	; loading an overlay.
 33286                                  
 33287                                  Exec_Com_File:
 33288                                  	;test	byte [bp-5],2
 33289 00005EA5 F646FB02                	test	Exec_Func,exec_func_overlay
 33290 00005EA9 742D                    	jz	short Exec_Alloc_Com_File
 33291                                  	;lds	si,[bp-4]
 33292 00005EAB C576FC                  	lds	SI,Exec_Blk		; get arg block
 33293 00005EAE AD                      	lodsw				; get load address
 33294                                  	;mov	[bp-20],ax
 33295 00005EAF 8946EC                  	mov	Exec_DMA,AX
 33296 00005EB2 B8FFFF                  	mov	AX,0FFFFh
 33297 00005EB5 EB63                    	jmp	short Exec_Read_Block	; read it all!
 33298                                  
 33299                                  Exec_Chk_Com_Mem:			
 33300                                  	; MSDOS 6.0	     		; M063 - Start
 33301 00005EB7 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33302 00005EBB 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 33303 00005EC0 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33304 00005EC5 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33305 00005EC8 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 33306                                  					; N: continue
 33307                                  	
 33308 00005ECA A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33309 00005ECC 74D4                    	jz	short Exec_No_Memj	; N: no memory 
 33310                                  	
 33311                                  	;mov	ax,[bp-18]
 33312 00005ECE 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 33313 00005ED1 31DB                    	xor	bx,bx			; M047: bx => free arena
 33314 00005ED3 E87502                  	call	ChangeOwner		; M047: free this block
 33315                                  	
 33316 00005ED6 EB0E                    	jmp	short Exec_Norm_Com_Alloc
 33317                                  					; M063 - End
 33318                                  	
 33319                                  	; We must allocate the max possible size block (ick!)
 33320                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 33321                                  	; size of block.
 33322                                  
 33323                                  Exec_Alloc_Com_File:
 33324                                  	; MSDOS 6.0			; M000 -start
 33325 00005ED8 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 33326                                  					; Q: is the alloc strat high_first
 33327 00005EDE 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 33328                                  					; Y: set high_only bit
 33329 00005EE0 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 33330                                  					; M000 - end
 33331                                  Exec_Norm_Com_Alloc:			; M000
 33332                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33333 00005EE6 BBFFFF                  	mov	BX,0FFFFh
 33334                                  	;invoke	$Alloc			; largest piece available as error
 33335 00005EE9 E8C303                  	call	_$ALLOC
 33336 00005EEC 09DB                    	or	BX,BX
 33337                                  	; MSDOS 6.0
 33338 00005EEE 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 33339                                  	; MSDOS 3.3
 33340                                  	;jz	short Exec_No_Memj
 33341                                  
 33342                                  	;mov	[bp-16],bx
 33343 00005EF0 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 33344 00005EF3 53                      	push	BX
 33345                                  	;invoke	$ALLOC			; largest piece available
 33346 00005EF4 E8B803                  	call	_$ALLOC
 33347 00005EF7 5B                      	pop	BX			; get size of block...
 33348                                  	;mov	[bp-18],ax
 33349 00005EF8 8946EE                  	mov	Exec_Load_Block,AX
 33350                                  
 33351 00005EFB 83C010                  	add	AX,10h			; increment for header
 33352                                  	;mov	[bp-20],ax
 33353 00005EFE 8946EC                  	mov	Exec_DMA,AX
 33354                                  
 33355 00005F01 31C0                    	xor	AX,AX			; presume 64K read...
 33356 00005F03 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 33357 00005F07 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 33358                                  
 33359 00005F09 89D8                    	mov	AX,BX			; convert size to bytes
 33360 00005F0B B104                    	mov	CL,4
 33361 00005F0D D3E0                    	shl	AX,CL
 33362                                  	; 17/12/2022
 33363                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33364                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 33365                                  	; MSDOS 5.0
 33366                                  	;cmp	AX,100h   
 33367                                  	; 02/06/2019 - Retro DOS v4.0
 33368                                  	; MSDOS 6.0
 33369                                          ; 17/12/2022
 33370 00005F0F 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 33371 00005F12 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33372                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 33373                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 33374                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33375                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 33376                                  
 33377                                  					; M047: size of the block is < 64K
 33378 00005F14 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 33379                                  
 33380                                  Exec_Read_Com:
 33381                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33382 00005F17 2D0001                  	sub	AX,100h 		; remember size of psp
 33383                                  Exec_Read_Block:
 33384 00005F1A 50                      	push	AX			; save number to read
 33385                                  	;mov	bx,[bp-8]
 33386 00005F1B 8B5EF8                  	mov	BX,Exec_FH		; of com file
 33387 00005F1E 31C9                    	xor	CX,CX			; but seek to 0:0
 33388 00005F20 89CA                    	mov	DX,CX
 33389 00005F22 31C0                    	xor	AX,AX			; seek relative to beginning
 33390                                  	;invoke	$Lseek			; back to beginning of file
 33391 00005F24 E88909                  	call	_$LSEEK
 33392 00005F27 59                      	pop	CX			; number to read
 33393                                  	;mov	ds,[bp-20]
 33394 00005F28 8E5EEC                  	mov	DS,Exec_DMA
 33395 00005F2B 31D2                    	xor	DX,DX
 33396 00005F2D 51                      	push	CX
 33397 00005F2E E8E501                  	call	ExecRead
 33398 00005F31 5E                      	pop	SI			; get number of bytes to read
 33399 00005F32 7303                    	jnc	short OkRead
 33400 00005F34 E9B0FD                  	jmp	Exec_Bad_File
 33401                                  
 33402                                  	; 10/09/2018
 33403                                  OkRead:
 33404 00005F37 39F0                    	cmp	AX,SI			; did we read them all?
 33405                                  	; MSDOS 6.0
 33406                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 33407                                  	; MSDOS 3.3
 33408                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 33409 00005F39 7503                    	jne	short OkRead2
 33410 00005F3B E979FF                  	jmp	Exec_Chk_Com_Mem
 33411                                  OkRead2:
 33412                                  	; MSDOS 6.0
 33413 00005F3E 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 33414 00005F43 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 33415                                  
 33416                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33417                                  	;test	byte [bp-5],2
 33418 00005F48 F646FB02                	test	Exec_Func,exec_func_overlay
 33419 00005F4C 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 33420                                  
 33421                                  	;mov	ax,[bp-20]
 33422 00005F4E 8B46EC                  	mov	AX,Exec_DMA
 33423 00005F51 83E810                  	sub	AX,10h
 33424 00005F54 36A3[C60F]              	mov	[SS:exec_init_CS],AX
 33425 00005F58 36C706[C40F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 33426                                  
 33427                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 33428                                  	; of 0 on stack.
 33429                                  
 33430 00005F5F 81C6FE00                	add	SI,0FEh 		; make room for stack
 33431                                  
 33432                                  	; MSDOS 6.0
 33433 00005F63 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 33434 00005F66 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 33435 00005F68 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 33436                                  
 33437                                  Exec_St_Ok:
 33438                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33439 00005F6C 368936[C00F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 33440 00005F71 36A3[C20F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 33441 00005F75 8ED8                    	mov	DS,AX
 33442 00005F77 C7040000                	mov	WORD [SI],0		; 0 for return
 33443                                  
 33444                                  	; MSDOS 6.0
 33445                                  
 33446                                  	; M068
 33447                                  	;
 33448                                  	; We now determine if this is a Copy Protected App. If so the 
 33449                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 33450                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 33451                                  
 33452 00005F7B 36FF16[6100]            	call	word [ss:ChkCopyProt]	
 33453                                  
 33454                                  Exec_Set_PDB:
 33455                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33456                                  	;mov	bx,[bp-8]
 33457 00005F80 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 33458 00005F83 E8A901                  	call	Exec_Dealloc
 33459 00005F86 55                      	push	BP
 33460                                  	;invoke	$Close			; release the jfn
 33461 00005F87 E8AA07                  	call	_$CLOSE
 33462 00005F8A 5D                      	pop	BP
 33463 00005F8B E89301                  	call	Exec_Alloc
 33464                                  	;test	byte [bp-5],2
 33465 00005F8E F646FB02                	test	Exec_Func,exec_func_overlay
 33466 00005F92 743A                    	jz	short Exec_Build_Header
 33467                                  
 33468                                  	; MSDOS 6.0
 33469 00005F94 E8C201                  	call	Scan_Execname
 33470 00005F97 E8D601                  	call	Scan_Special_Entries
 33471                                  ;SR;
 33472                                  ;The current lie strategy uses the PSP to store the lie version. However,
 33473                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 33474                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 33475                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 33476                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 33477                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 33478                                  ;issues the version check, it gets the lie version until the next overlay
 33479                                  ;call is issued.
 33480                                  
 33481 00005F9A 36803E[3F10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 33482 00005FA0 7426                    	je	short norm_ovl		;yes, no special handling
 33483 00005FA2 56                      	push	si
 33484 00005FA3 06                      	push	es
 33485 00005FA4 36C436[4010]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 33486                                  	 
 33487                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s) 
 33488 00005FA9 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 33489 00005FAD 7411                    	je	short sysinit_done	;no, Sysinit is finished
 33490                                  	
 33491 00005FAF 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 33492 00005FB4 36FF36[BD0E]            	push	word [ss:SPECIAL_VERSION]
 33493 00005FB9 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 33494                                  		;;; PDB.VERSION
 33495 00005FBE EB06                    	jmp	short setver_done
 33496                                  sysinit_done:
 33497 00005FC0 36C606[3F10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 33498                                  setver_done:
 33499 00005FC6 07                      	pop	es
 33500 00005FC7 5E                      	pop	si
 33501                                  norm_ovl:
 33502                                  	;leave
 33503 00005FC8 89EC                    	mov	sp,bp		
 33504 00005FCA 5D                      	pop	bp
 33505                                  
 33506                                  	;transfer SYS_RET_OK		; overlay load -> done
 33507 00005FCB E96DA6                  	jmp	SYS_RET_OK
 33508                                  
 33509                                  Exec_Build_Header:
 33510                                  	;mov	dx,[bp-18]
 33511 00005FCE 8B56EE                  	mov	DX,Exec_Load_Block
 33512                                  					; assign the space to the process
 33513                                  	;mov	si,1
 33514 00005FD1 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 33515                                  	;mov	ax,[bp-14]
 33516 00005FD4 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 33517 00005FD7 09C0                    	or	AX,AX
 33518 00005FD9 7405                    	jz	short No_Owner		; no environment
 33519                                  
 33520 00005FDB 48                      	dec	AX			; point to header
 33521 00005FDC 8ED8                    	mov	DS,AX
 33522 00005FDE 8914                    	mov	[SI],DX 		; assign ownership
 33523                                  No_Owner:
 33524                                  	;mov	ax,[bp-18]
 33525                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 33526                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 33527                                  	; 17/12/2022
 33528 00005FE0 89D0                    	mov	ax,dx ; 06/06/2019
 33529                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 33530                                  	
 33531 00005FE2 48                      	dec	AX
 33532 00005FE3 8ED8                    	mov	DS,AX			; point to header
 33533 00005FE5 8914                    	mov	[SI],DX 		; assign ownership
 33534                                  
 33535                                  	; MSDOS 6.0
 33536 00005FE7 1E                      	push	DS			;AN000;MS. make ES=DS
 33537 00005FE8 07                      	pop	ES			;AN000;MS.
 33538                                  	;mov	di,8
 33539 00005FE9 BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 33540 00005FEC E86A01                  	call	Scan_Execname		;AN007;MS. parse execname
 33541                                  					;	   ds:si->name, cx=name length
 33542 00005FEF 51                      	push	CX			;AN007;;MS. save for fake version
 33543 00005FF0 56                      	push	SI			;AN007;;MS. save for fake version
 33544                                  
 33545                                  MoveName:				;AN000;
 33546 00005FF1 AC                      	lodsb				;AN000;;MS. get char
 33547 00005FF2 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 33548 00005FF4 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 33549                                  					;AN000;
 33550 00005FF6 AA                      	stosb				;AN000;;MS. move char
 33551                                  					; MSKK bug fix - limit length copied
 33552 00005FF7 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 33553 00005FFA 7302                    	jae	short Mem_Done		; jump if so
 33554                                  	;
 33555 00005FFC E2F3                    	loop	MoveName		;AN000;;MS. continue
 33556                                  Mem_Done:				;AN000;
 33557 00005FFE 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 33558                                  	;cmp	di,16
 33559 00006000 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 33560 00006003 7301                    	jae	short Fill8		;AN000;MS.
 33561                                  	
 33562 00006005 AA                      	stosb				;AN000;MS.
 33563                                  	
 33564                                  Fill8:					;AN000;
 33565 00006006 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 33566 00006007 59                      	pop	CX			;AN007;MS.
 33567                                  	
 33568 00006008 E86501                  	call	Scan_Special_Entries	;AN007;MS.
 33569                                  
 33570                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33571 0000600B 52                      	push	DX
 33572                                  	;mov	si,[bp-16]
 33573 0000600C 8B76F0                  	mov	SI,Exec_Size
 33574 0000600F 01D6                    	add	SI,DX
 33575                                  	;Invoke	$Dup_PDB		; ES is now PDB
 33576 00006011 E88AB0                  	call	_$DUP_PDB
 33577 00006014 5A                      	pop	DX
 33578                                  
 33579                                  	;push	word [bp-14]
 33580 00006015 FF76F2                  	push	Exec_Environ
 33581                                  	;pop	WORD [ES:2Ch]
 33582 00006018 268F062C00              	pop	word [ES:PDB.ENVIRON]
 33583                                  
 33584                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 33585                                  					; version number in PSP
 33586 0000601D 36FF36[BD0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 33587 00006022 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 33588                                  		; PDB.VERSION
 33589                                  
 33590                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 33591                                  	;lds	si,[bp-4]
 33592 00006027 C576FC                  	lds	SI,Exec_Blk		; get the block
 33593 0000602A 1E                      	push	DS			; save its location
 33594 0000602B 56                      	push	SI
 33595                                  	;lds	si,[si+6]
 33596 0000602C C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 33597                                  
 33598                                  	; DS points to user space 5C FCB
 33599                                  
 33600 0000602F B90C00                  	mov	CX,12			; copy drive, name and ext
 33601 00006032 51                      	push	CX
 33602 00006033 BF5C00                  	mov	DI,5Ch
 33603 00006036 8A1C                    	mov	BL,[SI]
 33604 00006038 F3A4                    	rep	movsb
 33605                                  
 33606                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 33607                                  
 33608 0000603A 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 33609 0000603C AB                      	stosw
 33610 0000603D AB                      	stosw
 33611                                  
 33612                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 33613                                  
 33614 0000603E 59                      	pop	CX
 33615 0000603F 5E                      	pop	SI			; get block
 33616 00006040 1F                      	pop	DS
 33617 00006041 1E                      	push	DS			; save (again)
 33618 00006042 56                      	push	SI
 33619                                  	;lds	si,[si+0Ah]
 33620 00006043 C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 33621                                  
 33622                                  	; DS points to user space 6C FCB
 33623                                  
 33624 00006046 8A3C                    	mov	BH,[SI] 		; do same as above
 33625 00006048 F3A4                    	rep	movsb
 33626 0000604A AB                      	stosw
 33627 0000604B AB                      	stosw
 33628 0000604C 5E                      	pop	SI			; get block (last time)
 33629 0000604D 1F                      	pop	DS
 33630                                  	;ld	si,[si+2]
 33631 0000604E C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 33632                                  
 33633                                  	; DS points to user space 80 command line
 33634                                  
 33635 00006051 80C980                  	or	CL,80h
 33636 00006054 89CF                    	mov	DI,CX
 33637 00006056 F3A4                    	rep	movsb			; Wham!
 33638                                  
 33639                                  	; Process BX into default AX (validity of drive specs on args).
 33640                                  	; We no longer care about DS:SI.
 33641                                  
 33642 00006058 FEC9                    	dec	CL			; get 0FFh in CL
 33643 0000605A 88F8                    	mov	AL,BH
 33644 0000605C 30FF                    	xor	BH,BH
 33645                                  	;invoke	GetVisDrv
 33646 0000605E E8400A                  	call	GetVisDrv
 33647 00006061 7302                    	jnc	short Exec_BL
 33648                                  
 33649 00006063 88CF                    	mov	BH,CL
 33650                                  
 33651                                  Exec_BL:
 33652 00006065 88D8                    	mov	AL,BL
 33653 00006067 30DB                    	xor	BL,BL
 33654                                  	;invoke	GetVisDrv
 33655 00006069 E8350A                  	call	GetVisDrv
 33656 0000606C 7302                    	jnc	short Exec_Set_Return
 33657                                  
 33658 0000606E 88CB                    	mov	BL,CL
 33659                                  
 33660                                  Exec_Set_Return:
 33661                                  	;invoke	Get_User_Stack			; get his return address
 33662 00006070 E812A4                  	call	Get_User_Stack
 33663                                  
 33664                                  	;push	word [si+14h]
 33665 00006073 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33666                                  	;push	word [si+12h]
 33667 00006076 FF7412                  	push	word [SI+user_env.user_IP]
 33668                                  	;push	word [si+14h]
 33669 00006079 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33670                                  	;push	word [si+12h]
 33671 0000607C FF7412                  	push	word [SI+user_env.user_IP]
 33672                                  	;pop	word [ES:0Ah]
 33673 0000607F 268F060A00              	pop	WORD [ES:PDB.EXIT]
 33674                                  	;pop	word [ES:0Ch]
 33675 00006084 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 33676                                  
 33677 00006089 31C0                    	xor	AX,AX
 33678 0000608B 8ED8                    	mov	DS,AX
 33679                                  					; save them where we can get them
 33680                                  					; later when the child exits.
 33681                                  	;pop	word [88h]
 33682 0000608D 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 33683                                  	;pop	word [90h]
 33684 00006091 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 33685                                  
 33686 00006095 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 33687 0000609C 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 33688 000060A1 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 33689                                  
 33690                                  	;test	byte [bp-5],1
 33691 000060A6 F646FB01                	test	Exec_Func,exec_func_no_execute
 33692 000060AA 7427                    	jz	short exec_go
 33693                                  
 33694 000060AC 36C536[C00F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 33695                                  	;les	di,[bp-4]
 33696 000060B1 C47EFC                  	les	DI,Exec_Blk		; and block for return
 33697                                  	;mov	[es:di+10h],ds
 33698 000060B4 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 33699                                  
 33700 000060B8 4E                      	dec	SI			; 'push' default AX
 33701 000060B9 4E                      	dec	SI
 33702 000060BA 891C                    	mov	[SI],BX 		; save default AX reg
 33703                                  	;mov	[es:di+0Eh], si
 33704 000060BC 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 33705                                  
 33706 000060C0 36C506[C40F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 33707                                  	;mov	[es:di+14h],ds
 33708 000060C5 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 33709                                  	;mov	[es:di+12h],ax
 33710 000060C9 26894512                	mov	[ES:DI+EXEC1.IP],AX
 33711                                  	
 33712                                  	;leave
 33713 000060CD 89EC                    	mov	sp,bp
 33714 000060CF 5D                      	pop	bp	
 33715                                  
 33716                                  	;transfer SYS_RET_OK
 33717 000060D0 E968A5                  	jmp	SYS_RET_OK
 33718                                  
 33719                                  exec_go:
 33720 000060D3 36C536[C40F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 33721 000060D8 36C43E[C00F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 33722 000060DD 8CC0                    	mov	AX,ES
 33723                                  
 33724                                  	; MSDOS 6.0
 33725 000060DF 36803E[F711]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 33726 000060E5 741A                    	je	short Xfer_To_User	; N: transfer control to user
 33727                                  
 33728 000060E7 1E                      	push	ds			; Y: control must go to low mem stub
 33729                                  		
 33730 000060E8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 33731                                  					;    control to user 
 33732 000060ED 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 33733                                  					; M004: Set bit to signal int 21
 33734                                  					; ah = 25 & ah= 49. See dossym.inc 
 33735                                  					; under TAG M003 & M009 for 
 33736                                  					; explanation
 33737 000060F2 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 33738                                  					; M068: going to be turned OFF.
 33739                                  	
 33740 000060F6 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 33741 000060F8 1F                      	pop	ds
 33742                                  	
 33743 000060F9 50                      	push	ax			; ret far into the low mem stub
 33744 000060FA B8[FB10]                	mov	ax,disa20_xfer
 33745 000060FD 50                      	push	ax
 33746 000060FE 8CC0                    	mov	AX,ES			; restore ax
 33747 00006100 CB                      	retf
 33748                                  
 33749                                  Xfer_To_User:
 33750                                  	; DS:SI points to entry point
 33751                                  	; AX:DI points to initial stack
 33752                                  	; DX has PDB pointer
 33753                                  	; BX has initial AX value
 33754                                  
 33755 00006101 FA                      	cli
 33756                                  	; 15/08/2018
 33757 00006102 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 33758                                  
 33759 00006108 8ED0                    	mov	SS,AX			; set up user's stack
 33760 0000610A 89FC                    	mov	SP,DI			; and SP
 33761 0000610C FB                      	sti
 33762                                  
 33763 0000610D 1E                      	push	DS			; fake long call to entry
 33764 0000610E 56                      	push	SI
 33765 0000610F 8EC2                    	mov	ES,DX			; set up proper seg registers
 33766 00006111 8EDA                    	mov	DS,DX
 33767 00006113 89D8                    	mov	AX,BX			; set up proper AX
 33768                                  
 33769 00006115 CB                      	retf
 33770                                  
 33771                                  ; 04/08/2018 - Retro DOS v3.0
 33772                                  
 33773                                  ;----------------------------------------------------------------------------
 33774                                  ;
 33775                                  ;----------------------------------------------------------------------------
 33776                                  
 33777                                  ExecRead:
 33778 00006116 E81600                  	CALL	Exec_Dealloc
 33779                                  	;mov	bx,[bp-8]
 33780 00006119 8B5EF8                  	MOV	bx,Exec_FH
 33781                                  
 33782 0000611C 55                      	PUSH	BP
 33783 0000611D E82507                  	call	_$READ
 33784 00006120 5D                      	POP	BP
 33785                                  
 33786                                  	;CALL	Exec_Alloc
 33787                                  	;retn
 33788                                  	; 18/12/2022
 33789                                  	;jmp	short Exec_Alloc
 33790                                  
 33791                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 33792                                  
 33793                                  ;----------------------------------------------------------------------------
 33794                                  ;
 33795                                  ;----------------------------------------------------------------------------
 33796                                  
 33797                                  Exec_Alloc:
 33798 00006121 53                      	push	BX
 33799                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33800                                  	; 20/05/2019 - Retro DOS v4.0
 33801                                  	; MSDOS 6.0
 33802 00006122 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 33803 00006127 E81000                  	call	ChangeOwners
 33804 0000612A E804B2                  	call	LCritMEM
 33805 0000612D 5B                      	pop	BX
 33806 0000612E C3                      	retn
 33807                                  
 33808                                  ;----------------------------------------------------------------------------
 33809                                  ;
 33810                                  ;----------------------------------------------------------------------------
 33811                                  
 33812                                  Exec_Dealloc:
 33813 0000612F 53                      	push	BX
 33814                                  	;mov	bx,0
 33815 00006130 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 33816 00006132 E8E1B1                  	call	ECritMEM
 33817 00006135 E80200                  	call	ChangeOwners
 33818 00006138 5B                      	pop	BX
 33819 00006139 C3                      	retn
 33820                                  
 33821                                  ; 18/12/2022
 33822                                  %if 0
 33823                                  ;----------------------------------------------------------------------------
 33824                                  ;
 33825                                  ;----------------------------------------------------------------------------
 33826                                  
 33827                                  Exec_Alloc:
 33828                                  	push	BX
 33829                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33830                                  	; 20/05/2019 - Retro DOS v4.0
 33831                                  	; MSDOS 6.0
 33832                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 33833                                  	call	ChangeOwners
 33834                                  	call	LCritMEM
 33835                                  	pop	BX
 33836                                  	retn
 33837                                  
 33838                                  %endif
 33839                                  
 33840                                  ;----------------------------------------------------------------------------
 33841                                  ;
 33842                                  ;----------------------------------------------------------------------------
 33843                                  
 33844                                  ChangeOwners:
 33845 0000613A 9C                      	pushf
 33846 0000613B 50                      	push	AX
 33847                                  	;mov	ax,[bp-14]
 33848 0000613C 8B46F2                  	mov	AX,Exec_Environ
 33849 0000613F E80900                  	call	ChangeOwner
 33850                                  	;mov	ax,[bp-18]
 33851 00006142 8B46EE                  	mov	AX,Exec_Load_Block
 33852 00006145 E80300                  	call	ChangeOwner
 33853 00006148 58                      	pop	AX
 33854 00006149 9D                      	popf
 33855                                  chgown_retn:
 33856 0000614A C3                      	retn
 33857                                  
 33858                                  ;----------------------------------------------------------------------------
 33859                                  ;
 33860                                  ;----------------------------------------------------------------------------
 33861                                  
 33862                                  ChangeOwner:
 33863 0000614B 09C0                    	or	AX,AX			; is area allocated?
 33864 0000614D 74FB                    	jz	short chgown_retn	; no, do nothing
 33865 0000614F 48                      	dec	AX
 33866 00006150 1E                      	push	DS
 33867 00006151 8ED8                    	mov	DS,AX
 33868 00006153 891E0100                	mov	[ARENA.OWNER],BX
 33869 00006157 1F                      	pop	DS
 33870 00006158 C3                      	retn
 33871                                  
 33872                                  ;----------------------------------------------------------------------------
 33873                                  ;
 33874                                  ;----------------------------------------------------------------------------
 33875                                  
 33876                                  ; 20/05/2019 - Retro DOS v4.0
 33877                                  
 33878                                  	; MSDOS 6.0
 33879                                  Scan_Execname:
 33880 00006159 C576E6                  	lds	SI,ExecName		; DS:SI points to name
 33881                                  Scan_Execname1:				; M028
 33882                                  Save_Begin:				;
 33883 0000615C 89F1                    	mov	CX,SI			; CX= starting addr
 33884                                  Scan0:					;
 33885 0000615E AC                      	lodsb				; get char
 33886                                  
 33887 0000615F 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 33888 00006161 74F9                    	jz	short Save_Begin	; yes, save si
 33889 00006163 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 33890 00006165 74F5                    	jz	short Save_Begin	; yes, save si
 33891 00006167 3C00                    	cmp	AL,0			; is end of name
 33892 00006169 75F3                    	jnz	short Scan0		; no, continue scanning
 33893 0000616B 29CE                    	sub	SI,CX			; get name's length
 33894 0000616D 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 33895                                  
 33896 0000616F C3                      	retn
 33897                                  
 33898                                  ;----------------------------------------------------------------------------
 33899                                  ;
 33900                                  ;----------------------------------------------------------------------------
 33901                                  
 33902                                  ; 20/05/2019 - Retro DOS v4.0
 33903                                  
 33904                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33905                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 33906                                  
 33907                                  	; MSDOS 6.0
 33908                                  
 33909                                  Scan_Special_Entries:
 33910                                  
 33911 00006170 49                      	dec	CX			; cx= name length
 33912                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 33913                                  					;reset to current version
 33914                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 33915                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 33916                                  	;mov	word [ss:SPECIAL_VERSION],5
 33917                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 33918                                  
 33919                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 33920 00006171 36C706[BD0E]0500        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 33921                                  				; 0005h for Retro DOS v4.1 (MSDOS 5.0)
 33922                                  				; 24/09/2023
 33923                                  				; 1606h for Retro DOS v4.2 (MSDOS 6.22)
 33924                                  ;***	call	Reset_Version
 33925                                  
 33926                                  ;M060	push	SS
 33927                                  ;M060	pop	ES
 33928                                  
 33929 00006178 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 33930 0000617D 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 33931 0000617F 09F8                    	or	AX,DI			;M060; be sure the table exists
 33932 00006181 7427                    	jz	short End_List		;M060; If ZR then no table
 33933                                  
 33934                                  GetEntries:
 33935 00006183 268A05                  	mov	AL,[ES:DI]		; end of list
 33936 00006186 08C0                    	or	AL,AL
 33937 00006188 7420                    	jz	short End_List		; yes
 33938                                  
 33939 0000618A 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 33940 0000618F 38C8                    	cmp	AL,CL			; same length ?
 33941 00006191 751B                    	jnz	short SkipOne 		; no
 33942                                  
 33943 00006193 47                      	inc	DI			; es:di -> special name
 33944 00006194 51                      	push	CX			; save length and name addr
 33945 00006195 56                      	push	SI
 33946                                  
 33947                                  ; M050 - BEGIN
 33948                                  
 33949 00006196 50                      	push	ax			; save len
 33950                                  sse_next_char:
 33951 00006197 AC                      	lodsb
 33952 00006198 E8D1EE                  	call	UCase
 33953 0000619B AE                      	scasb
 33954 0000619C 750D                    	jne	short Not_Matched
 33955 0000619E E2F7                    	loop	sse_next_char
 33956                                  	
 33957                                  ;	repz	cmpsb			; same name ?
 33958                                  ;	jnz	short Not_Matched	; no
 33959                                  
 33960 000061A0 58                      	pop	ax			; take len off the stack
 33961                                  
 33962                                  ; M050 - END
 33963                                  
 33964 000061A1 268B05                  	mov	AX,[ES:DI]		; get special version
 33965 000061A4 36A3[BD0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 33966                                  
 33967                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 33968                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 33969                                  
 33970 000061A8 5E                      	pop	SI
 33971 000061A9 59                      	pop	CX
 33972                                  	; 18/12/2022
 33973                                  	;jmp	SHORT End_List
 33974                                  
 33975                                  	; 18/12/2022
 33976                                  End_List:
 33977 000061AA C3                      	retn
 33978                                  
 33979                                  Not_Matched:
 33980 000061AB 58                      	pop	ax			; get len from stack ; M050
 33981 000061AC 5E                      	pop	SI			; restore si,cx
 33982 000061AD 59                      	pop	CX
 33983                                  
 33984                                  SkipOne:
 33985 000061AE 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 33986 000061B3 30E4                    	xor	AH,AH			; position to next entry
 33987 000061B5 01C7                    	add	DI,AX
 33988                                  
 33989 000061B7 83C703                  	add	DI,3			; DI -> next entry length
 33990                                  ;***	add	DI,4			; DI -> next entry length
 33991                                  
 33992 000061BA EBC7                    	jmp	short GetEntries
 33993                                  
 33994                                  	; 18/12/2022
 33995                                  ;End_List:
 33996                                  	;retn
 33997                                  
 33998                                  ; 04/08/2018 - Retro DOS v3.0
 33999                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 34000                                  
 34001                                  ;----------------------------------------------------------------------------
 34002                                  ;SUBTTL Terminate and stay resident handler
 34003                                  ;
 34004                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 34005                                  ;	    truncate the current block.
 34006                                  ;
 34007                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 34008                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 34009                                  ;	    and restoring the vectors.
 34010                                  ;
 34011                                  ;----------------------------------------------------------------------------
 34012                                  
 34013                                  	; 20/05/2019 - Retro DOS v4.0
 34014                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 34015                                  
 34016                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34017                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 34018                                  
 34019                                  _$KEEP_PROCESS:
 34020 000061BC 50                      	push	AX			; keep exit code around
 34021                                  	;mov	byte [SS:EXIT_TYPE],3
 34022 000061BD 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 34023 000061C3 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 34024 000061C8 83FA06                  	cmp	DX,6h			; keep enough space around for system
 34025 000061CB 7303                    	jae	short Keep_Shrink	; info
 34026                                  
 34027 000061CD BA0600                  	mov	DX,6h
 34028                                  
 34029                                  Keep_Shrink:
 34030 000061D0 89D3                    	mov	BX,DX
 34031 000061D2 53                      	push	BX
 34032 000061D3 06                      	push	ES
 34033 000061D4 E82E02                  	call	_$SETBLOCK		; ignore return codes.
 34034 000061D7 1F                      	pop	DS
 34035 000061D8 5B                      	pop	BX
 34036 000061D9 7207                    	jc	short Keep_Done		; failed on modification
 34037                                  
 34038 000061DB 8CD8                    	mov	AX,DS
 34039 000061DD 01D8                    	add	AX,BX
 34040                                  	;mov	[2],ax
 34041 000061DF A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 34042                                  
 34043                                  Keep_Done:
 34044 000061E2 58                      	pop	AX
 34045 000061E3 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 34046                                  
 34047                                  ;----------------------------------------------------------------------------
 34048                                  ;
 34049                                  ;----------------------------------------------------------------------------
 34050                                  
 34051                                  STAY_RESIDENT:
 34052                                  	;mov	ax,3100h
 34053 000061E5 B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 34054 000061E8 83C20F                  	add	DX,15
 34055 000061EB D1DA                    	rcr	DX,1
 34056 000061ED B103                    	mov	CL,3
 34057 000061EF D3EA                    	shr	DX,CL
 34058                                  
 34059 000061F1 E913A1                  	jmp	COMMAND
 34060                                  
 34061                                  ;----------------------------------------------------------------------------
 34062                                  ;SUBTTL $EXIT - return to parent process
 34063                                  ;   Assembler usage:
 34064                                  ;	    MOV     AL, code
 34065                                  ;	    MOV     AH, Exit
 34066                                  ;	    INT     int_command
 34067                                  ;   Error return:
 34068                                  ;	    None.
 34069                                  ;
 34070                                  ;----------------------------------------------------------------------------
 34071                                  
 34072                                  	; 20/05/2019 - Retro DOS v4.0
 34073                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 34074                                  
 34075                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34076                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 34077                                  _$EXIT:
 34078                                  	; 04/08/2018 - Retro DOS v3.0
 34079                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 34080 000061F4 30E4                    	xor	AH,AH
 34081 000061F6 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 34082 000061FB 08E4                    	or	AH,AH
 34083                                  	;mov	BYTE [SS:EXIT_TYPE],0
 34084 000061FD 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 34085 00006203 7406                    	jz	short exit_inner
 34086                                  	;mov	BYTE [SS:EXIT_TYPE],1
 34087 00006205 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 34088                                  
 34089                                  	;entry	Exit_inner
 34090                                  exit_inner:
 34091 0000620B E877A2                  	call	Get_User_Stack		;PBUGBUG
 34092                                  
 34093 0000620E 36FF36[3003]            	push	word [ss:CurrentPDB]
 34094                                  	;pop	word [si+14h]
 34095 00006213 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 34096 00006216 EB08                    	jmp	short abort_inner
 34097                                  
 34098                                  ;BREAK <$ABORT -- Terminate a process>
 34099                                  ;----------------------------------------------------------------------------
 34100                                  ; Inputs:
 34101                                  ;	user_CS:00 must point to valid program header block
 34102                                  ; Function:
 34103                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 34104                                  ;	to the terminate address
 34105                                  ; Returns:
 34106                                  ;	TO THE TERMINATE ADDRESS
 34107                                  ;----------------------------------------------------------------------------
 34108                                  
 34109                                  _$ABORT:
 34110 00006218 30C0                    	xor	AL,AL
 34111                                  	;mov	byte [SS:EXIT_TYPE],0
 34112                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 34113 0000621A 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 34114                                  
 34115                                  	; abort_inner must have AL set as the exit code! The exit type
 34116                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 34117                                  	; to be correct as the one that is terminating.
 34118                                  
 34119                                  abort_inner:
 34120 00006220 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 34121 00006225 36A3[3403]              	mov	[SS:exit_code],AX
 34122 00006229 E859A2                  	call	Get_User_Stack
 34123                                  
 34124                                  	;mov	ds,[si+14h]
 34125 0000622C 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 34126 0000622F 31C0                    	xor	AX,AX
 34127 00006231 8EC0                    	mov	ES,AX
 34128                                  	;mov	si,10
 34129 00006233 BE0A00                  	mov	SI,SAVEXIT
 34130                                  	;mov	di,88h
 34131 00006236 BF8800                  	mov	DI,addr_int_terminate
 34132 00006239 A5                      	movsw
 34133 0000623A A5                      	movsw
 34134 0000623B A5                      	movsw
 34135 0000623C A5                      	movsw
 34136 0000623D A5                      	movsw
 34137 0000623E A5                      	movsw
 34138 0000623F E944F2                  	jmp	reset_environment
 34139                                  
 34140                                  ;----------------------------------------------------------------------------
 34141                                  ;
 34142                                  ; fixexepatch will point to this is DOS loads low. 
 34143                                  ;
 34144                                  ;----------------------------------------------------------------------------
 34145                                  ; MSDOS 6.0
 34146                                  
 34147                                  ; 29/04/2019 - Retro DOS v4.0
 34148                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 34149                                  
 34150                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34151                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 34152                                  
 34153                                  RetExePatch: ; proc near
 34154                                  	
 34155 00006242 C3                      	retn
 34156                                  
 34157                                  ;============================================================================
 34158                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 34159                                  ;============================================================================
 34160                                  ; 04/08/2018 - Retro DOS v3.0
 34161                                  ; 14/05/2019 - Retro DOS v4.0
 34162                                  
 34163                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 34164                                  
 34165                                  ;**
 34166                                  ;	Microsoft Confidential
 34167                                  ;	Copyright (C) Microsoft Corporation 1991
 34168                                  ;	All Rights Reserved.
 34169                                  ;
 34170                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 34171                                  ;	I/O specs are defined in DISPATCH.
 34172                                  ;
 34173                                  ;	$ALLOC
 34174                                  ;	$SETBLOCK
 34175                                  ;	$DEALLOC
 34176                                  ;	$AllocOper
 34177                                  ;	arena_free_process
 34178                                  ;	arena_next
 34179                                  ;	check_signature
 34180                                  ;	Coalesce
 34181                                  ;
 34182                                  ;	Modification history:
 34183                                  ;
 34184                                  ;	    Created: ARR 30 March 1983
 34185                                  ;
 34186                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 34187                                  ;		      M003 - added support for link/unlink UMBs from
 34188                                  ;			     DOS arena chain. 7/18/90
 34189                                  ;		      M009 - Added error returns invalid function and 
 34190                                  ;			     arena trashed in set link state call.
 34191                                  ;		      M010 - Release UMB arenas allocated to current PDB
 34192                                  ;			     if UMB_HEAD is initialized.
 34193                                  ;
 34194                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 34195                                  ;			     support. Please see under M009 in 
 34196                                  ;			     ..\inc\dossym.inc. 8/31/90.
 34197                                  ;
 34198                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 34199                                  ;			     sure that umb_head arena is valid and also make
 34200                                  ;			     sure that the previous arena is pointing to 
 34201                                  ;			     umb_head.
 34202                                  ;
 34203                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 34204                                  ;			     set allloc strategy.
 34205                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 34206                                  ;			     bx in AllocSetStrat.
 34207                                  ;
 34208                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 34209                                  ;			     a bit to indicate to dos dispatcher to turn
 34210                                  ;			     a20 off before iret. See M016.
 34211                                  ;
 34212                                  
 34213                                  ;	BREAK	<memory allocation utility routines>
 34214                                  
 34215                                  
 34216                                  ; 15/04/2018 - Retro DOS v2.0
 34217                                  ;----------------------------------------------------------------------------
 34218                                  ; xenix memory calls for MSDOS
 34219                                  ;
 34220                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 34221                                  ; arena_owner_system are all equal to zero and are contained in DI.
 34222                                  ;
 34223                                  ;INCLUDE DOSSEG.ASM
 34224                                  
 34225                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 34226                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 34227                                  
 34228                                  ;.xlist
 34229                                  ;.xcref
 34230                                  ;INCLUDE DOSSYM.ASM
 34231                                  ;INCLUDE DEVSYM.ASM
 34232                                  ;.cref
 34233                                  ;.list
 34234                                  
 34235                                  ;TITLE ALLOC.ASM - memory arena manager
 34236                                  ;NAME Alloc
 34237                                  
 34238                                  ;SUBTTL memory allocation utility routines
 34239                                  ;PAGE
 34240                                  ;
 34241                                  ; arena data
 34242                                  ;
 34243                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 34244                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 34245                                  ;       i_need  FirstArena,WORD         ; first free block found
 34246                                  ;       i_need  BestArena,WORD          ; best free block found
 34247                                  ;       i_need  LastArena,WORD          ; last free block found
 34248                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 34249                                  
 34250                                  ;**	Arena_Free_Process
 34251                                  ;----------------------------------------------------------------------------
 34252                                  ;	Free all arena blocks allocated to a prOcess
 34253                                  ;
 34254                                  ;	ENTRY	(bx) = PID of process
 34255                                  ;	EXIT	none
 34256                                  ;	USES	????? BUGBUG
 34257                                  ;----------------------------------------------------------------------------
 34258                                  
 34259                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34260                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 34261                                  
 34262                                  arena_free_process:
 34263                                  	; 14/05/2019 - Retro DOS v4.0
 34264                                  	; 04/08/2018 - Retro DOS v3.0
 34265 00006243 36A1[2400]                      MOV	AX,[SS:arena_head]
 34266                                  arena_free_process_start:
 34267 00006247 BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 34268                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 34269 0000624A E83000                          CALL	check_signature         ; ES <- AX, check for valid block
 34270                                  
 34271                                  arena_free_process_loop:
 34272                                          ;retc
 34273 0000624D 723D                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 34274 0000624F 06                      	PUSH    ES
 34275 00006250 1F                              POP     DS
 34276                                  	;cmp	[1],bx 
 34277 00006251 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 34278 00006255 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 34279                                  	;mov	[1],di
 34280 00006257 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 34281                                  
 34282                                  arena_free_next:
 34283                                  	;cmp	byte [di],5Ah ;'Z'
 34284 0000625B 803D5A                          CMP     BYTE [DI],arena_signature_end
 34285                                                                          ; end of road, Jack?
 34286                                          ;retz				; never come back no more
 34287                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 34288                                  	; 14/05/2019
 34289                                  	; MSDOS 6.0
 34290 0000625E 7405                    	jz	short arena_chk_umbs
 34291                                          
 34292 00006260 E81300                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 34293 00006263 EBE8                            JMP     SHORT arena_free_process_loop
 34294                                  
 34295                                  	; MSDOS 6.0
 34296                                  arena_chk_umbs:				; M010 - Start
 34297                                  	; 20/05/2019
 34298 00006265 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 34299 00006269 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 34300 0000626C 741E                    	je	short ret_label		; N: we're done
 34301                                  	
 34302 0000626E 8CDF                    	mov	di,ds			; di = last arena
 34303 00006270 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 34304 00006272 7318                    	jae	short ret_label		; Y: we've scanned umbs also. done.
 34305 00006274 EBD1                    	jmp	short arena_free_process_start
 34306                                  					; M010 - End
 34307                                  ;AFP_RETN:
 34308                                  ;	RETN
 34309                                  
 34310                                  ;	BREAK	<Arena Helper Routines>
 34311                                  
 34312                                  ;**	Arena_Next - Find Next item in Arena
 34313                                  ;----------------------------------------------------------------------------
 34314                                  ;	ENTRY	DS - pointer to block head
 34315                                  ;		(di) = 0
 34316                                  ;	EXIT	AX,ES - pointers to next head
 34317                                  ;		'C' set iff arena damaged
 34318                                  ;----------------------------------------------------------------------------
 34319                                  
 34320                                  arena_next:
 34321 00006276 8CD8                            MOV     AX,DS                   ; AX <- current block
 34322 00006278 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 34323 0000627C 40                              INC     AX                      ; remember that header!
 34324                                  
 34325                                  ;       fall into check_signature and return
 34326                                  ;
 34327                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 34328                                  ;       RETN
 34329                                  
 34330                                  ;**	Check_Signature - Check Memory Block Signature
 34331                                  ;----------------------------------------------------------------------------
 34332                                  ;	ENTRY	(AX) = address of block header
 34333                                  ;		(di) = 0
 34334                                  ;	EXIT	 ES = AX
 34335                                  ;		'C' clear if signature good
 34336                                  ;		'C' set if signature bad
 34337                                  ;	USES	ES, Flags
 34338                                  ;----------------------------------------------------------------------------
 34339                                  
 34340                                  check_signature:        
 34341                                  
 34342 0000627D 8EC0                    	MOV     ES,AX                   ; ES <- AX
 34343                                  	;cmp	byte [es:di],4Dh ; 'M'
 34344 0000627F 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 34345                                                                          ; IF next signature = not_end THEN
 34346 00006283 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 34347                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 34348 00006285 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 34349                                                                          ; IF next signature = end then
 34350 00006289 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 34351 0000628B F9                              STC                             ; set error
 34352                                  ret_label: ; MSDOS 6.0
 34353                                  AFP_RETN:
 34354                                   	; Retro DOS v2.0 - 05/03/2018
 34355                                  check_signature_ok:
 34356                                  COALESCE_RETN:
 34357 0000628C C3                      	RETN
 34358                                  
 34359                                  ;**	Coalesce - Combine free blocks ahead with current block
 34360                                  ;----------------------------------------------------------------------------
 34361                                  ;	Coalesce adds the block following the argument to the argument block,
 34362                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 34363                                  ;	some callers (such as $setblock) use it to join a free block to it's
 34364                                  ;	preceeding allocated block.
 34365                                  ;
 34366                                  ;	ENTRY	(ds) = pointer to the head of a free block
 34367                                  ;		(di) = 0
 34368                                  ;	EXIT	'C' clear if OK
 34369                                  ;		  (ds) unchanged, this block updated
 34370                                  ;		  (ax) = address of next block, IFF not at end
 34371                                  ;		'C' set if arena trashed
 34372                                  ;	USES	(cx)
 34373                                  ;----------------------------------------------------------------------------
 34374                                          
 34375                                  Coalesce:
 34376                                  	;cmp	byte [di],5Ah ; 'Z'
 34377 0000628D 803D5A                  	CMP     BYTE [DI],arena_signature_end
 34378                                                                          ; IF current signature = END THEN
 34379                                          ;retz				;   GOTO ok
 34380 00006290 74FA                            jz	short COALESCE_RETN
 34381 00006292 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 34382                                          ;retc				; IF no error THEN GOTO check
 34383 00006295 72F5                    	jc	short COALESCE_RETN
 34384                                  
 34385                                  coalesce_check:
 34386                                  	;cmp	[es:1],di
 34387 00006297 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 34388                                          ;retnz				; IF next block isnt free THEN return
 34389 0000629C 75EE                            JNZ	SHORT COALESCE_RETN
 34390                                  	;mov	cx,[ES:3]
 34391 0000629E 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 34392 000062A3 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 34393                                          ;ADD	[3],CX
 34394 000062A4 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 34395 000062A8 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 34396 000062AB 880D                            MOV     [DI],CL
 34397 000062AD EBDE                            JMP     SHORT Coalesce		; try again
 34398                                  
 34399                                  ; 04/08/2018 - Retro DOS v3.0
 34400                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 34401                                  
 34402                                  ;	BREAK  <$Alloc - allocate space in memory>
 34403                                  
 34404                                  ; MSDOS 6.0
 34405                                  ;----------------------------------------------------------------------------
 34406                                  ;**	$Alloc - Allocate Memory Space
 34407                                  ;
 34408                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 34409                                  ;	Alloc returns a pointer to a free block of memory that
 34410                                  ;	has the requested size in paragraphs.
 34411                                  ;
 34412                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 34413                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 34414                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 34415                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 34416                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 34417                                  ;
 34418                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 34419                                  ;	starts from arena_head.
 34420                                  ;
 34421                                  ;	Assembler usage:
 34422                                  ;           MOV     BX,size
 34423                                  ;           MOV     AH,Alloc
 34424                                  ;           INT     21h
 34425                                  ;
 34426                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 34427                                  ;	so that we start searching the arena at it's first non-trivial free
 34428                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 34429                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 34430                                  ;	doesn't have too many memory objects in it beyond the first free one.
 34431                                  ;	verify that this is true; if so, this can stay as is
 34432                                  ;
 34433                                  ;	ENTRY	(bx) = requested size, in bytes
 34434                                  ;		(DS) = (ES) = DOSGROUP
 34435                                  ;	EXIT	'C' clear if memory allocated
 34436                                  ;		  (ax:0) = address of requested memory
 34437                                  ;		'C' set if request failed
 34438                                  ;		  (AX) = error_not_enough_memory
 34439                                  ;		    (bx) = max size we could have allocated
 34440                                  ;		  (ax) = error_arena_trashed
 34441                                  ;	USES	All
 34442                                  ;----------------------------------------------------------------------------
 34443                                  
 34444                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34445                                  ;----------------------------------------------------------------------------
 34446                                  ;SUBTTL $Alloc - allocate space in memory
 34447                                  ;
 34448                                  ;   Assembler usage:
 34449                                  ;           MOV     BX,size
 34450                                  ;           MOV     AH,Alloc
 34451                                  ;           INT     21h
 34452                                  ;         AX:0 is pointer to allocated memory
 34453                                  ;         BX is max size if not enough memory
 34454                                  ;
 34455                                  ;   Description:
 34456                                  ;           Alloc returns  a  pointer  to  a  free  block of
 34457                                  ;       memory that has the requested  size  in  paragraphs.
 34458                                  ;
 34459                                  ;   Error return:
 34460                                  ;           AX = error_not_enough_memory
 34461                                  ;              = error_arena_trashed
 34462                                  ;----------------------------------------------------------------------------
 34463                                  
 34464                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 34465                                  
 34466                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34467                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 34468                                  
 34469                                  _$ALLOC:
 34470                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 34471                                  	; 14/05/2019 - Retro DOS v4.0
 34472                                  	; 04/08/2018 - Retro DOS v3.0
 34473                                  	;EnterCrit critMem
 34474 000062AF E864B0                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34475                                  
 34476                                  ; 17/12/2022
 34477                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34478                                  ;%if 0
 34479                                  	; 14/05/2019
 34480 000062B2 16                      	push	ss
 34481 000062B3 1F                      	pop	ds
 34482                                  
 34483                                  	; MSDOS 6.0
 34484                                  	;mov	ax,[ss:arena_head]
 34485                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34486                                  
 34487 000062B4 A1[2400]                	mov	ax,[arena_head]
 34488 000062B7 A3[8E00]                	mov	[START_ARENA],ax			
 34489                                  	
 34490                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34491 000062BA F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 34492                                  					; Q: should we start scanning from 
 34493                                  					;    UMB's
 34494 000062BF 740D                    	jz	short norm_alloc	; N: scan from arena_head
 34495                                  		
 34496                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34497                                  	;cmp	word [UMB_HEAD],-1
 34498                                  	;je	short norm_alloc	; N: scan from arena_head
 34499                                  
 34500                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34501 000062C1 F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 34502 000062C6 7406                    	jz	short norm_alloc	; N: scan from arena_head
 34503                                  	
 34504                                  	;mov	ax,[ss:UMB_HEAD]
 34505                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34506 000062C8 A1[8C00]                	mov	ax,[UMB_HEAD]
 34507 000062CB A3[8E00]                	mov	[START_ARENA],ax
 34508                                  					; M000 - end
 34509                                  norm_alloc:
 34510 000062CE 31C0                            XOR     AX,AX
 34511 000062D0 89C7                            MOV     DI,AX
 34512                                  	; 15/03/2018
 34513                                          ;MOV	[SS:FirstArena],AX	; init the options
 34514                                          ;MOV	[SS:BestArena],AX
 34515                                          ;MOV	[SS:LastArena],AX
 34516                                  	; 14/05/2019
 34517 000062D2 A3[4003]                	MOV	[FirstArena],AX		; init the options
 34518 000062D5 A3[4203]                        MOV	[BestArena],AX
 34519 000062D8 A3[4403]                        MOV	[LastArena],AX
 34520 000062DB 50                              PUSH    AX                      ; alloc_max <- 0
 34521                                  	; 04/08/2018
 34522                                  start_scan:
 34523                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34524                                  	;MOV	AX,[arena_head]
 34525                                  
 34526                                  	; 14/05/2019	
 34527                                  	; MSDOS 6.0
 34528                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34529 000062DC A1[8E00]                	mov	ax,[START_ARENA]
 34530                                  
 34531                                  	; 27/09/2023 (BugFix) (*) 
 34532                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 34533                                  start_scan_x:
 34534                                  
 34535 000062DF E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 34536 000062E2 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 34537                                  
 34538                                  ;%endif
 34539                                  
 34540                                  ; 17/12/2022
 34541                                  %if 0
 34542                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34543                                  
 34544                                  	; MSDOS 6.0
 34545                                  	mov	ax,[ss:arena_head]
 34546                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34547                                  
 34548                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34549                                  					; Q: should we start scanning from 
 34550                                  					;    UMB's
 34551                                  	jz	short norm_alloc	; N: scan from arena_head
 34552                                  		
 34553                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34554                                  	;je	short norm_alloc	; N: scan from arena_head
 34555                                  
 34556                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34557                                  	jz	short norm_alloc	; N: scan from arena_head
 34558                                  	
 34559                                  	mov	ax,[ss:UMB_HEAD]
 34560                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34561                                  					; M000 - end
 34562                                  norm_alloc:
 34563                                          XOR     AX,AX
 34564                                          MOV     DI,AX
 34565                                  	; 15/03/2018
 34566                                  	MOV	[SS:FirstArena],AX	; init the options
 34567                                  	MOV	[SS:BestArena],AX
 34568                                  	MOV	[SS:LastArena],AX
 34569                                          PUSH    AX                      ; alloc_max <- 0
 34570                                  	; 04/08/2018
 34571                                  start_scan:
 34572                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34573                                  	; 14/05/2019	
 34574                                  	; MSDOS 6.0
 34575                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34576                                  	CALL    check_signature         ; ES <- AX, carry set if error
 34577                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 34578                                  %endif
 34579                                  
 34580                                  alloc_scan:
 34581 000062E4 06                              PUSH    ES
 34582 000062E5 1F                              POP     DS                      ; DS <- ES
 34583 000062E6 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 34584 000062EA 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 34585                                  
 34586                                  alloc_next:
 34587                                  	; MSDOS 6.0			; M000 - start 
 34588 000062EC 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34589 000062F2 741C                    	jz	short norm_strat	; N: see if we reached last arena
 34590                                  	
 34591 000062F4 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 34592                                  					; Q: is alloc strategy high_first
 34593 000062FA 7414                    	jz	short norm_strat	; N: see if we reached last arena
 34594 000062FC 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 34595 00006300 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 34596                                  					;    arena_head
 34597 00006305 7509                    	jne	short norm_strat	; N: see if we reached last arena
 34598 00006307 8CD8                    	mov	ax,ds			; ax = current block
 34599 00006309 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 34600 0000630E EB03                    	jmp	short alloc_chk_end
 34601                                  
 34602                                  norm_strat:
 34603                                  	;cmp	byte [di],5Ah ; 'Z'
 34604 00006310 803D5A                          CMP     BYTE [DI],arena_signature_end
 34605                                                                          ; IF current block is last THEN
 34606                                  alloc_chk_end:
 34607 00006313 740E                            JZ      SHORT alloc_end		;   GOTO end
 34608 00006315 E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 34609 00006318 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 34610                                  
 34611                                  alloc_err:
 34612 0000631A 58                              POP     AX
 34613                                  
 34614                                  alloc_trashed:
 34615                                  	;LeaveCrit critMem
 34616 0000631B E813B0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0	
 34617                                          ;error	error_arena_trashed
 34618                                  	;mov	al,7
 34619 0000631E B007                    	MOV	AL,error_arena_trashed
 34620                                  alloc_errj:
 34621 00006320 E921A3                  	JMP	SYS_RET_ERR
 34622                                  
 34623                                  alloc_end:
 34624                                  	; 18/05/2019
 34625 00006323 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 34626 00006329 7403                    	jz	short alloc_chk 
 34627 0000632B E98400                  	jmp	alloc_do_split
 34628                                  
 34629                                  alloc_chk:
 34630                                  	; MSDOS 6.0
 34631 0000632E 36A1[2400]              	mov	ax,[ss:arena_head]
 34632 00006332 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 34633 00006337 740E                    	je	short alloc_fail	; Y: not enough memory
 34634                                  					; N:
 34635                                  					; Q: is the alloc strat HIGH_ONLY
 34636 00006339 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 34637 0000633F 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 34638                                  	
 34639 00006341 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 34640                                  	; 27/09/2023 (*)
 34641 00006345 EB98                    	jmp	short start_scan_x ; (*) ; (BugFix)
 34642                                  	;jmp	short start_scan
 34643                                  					; M000 - end
 34644                                  
 34645                                  alloc_fail:
 34646                                          ;invoke Get_User_Stack
 34647 00006347 E83BA1                          CALL	Get_User_Stack
 34648 0000634A 5B                      	POP     BX
 34649                                          ;MOV	[SI].user_BX,BX
 34650                                  	;MOV	[SI+2],BX
 34651 0000634B 895C02                  	mov	[SI+user_env.user_BX],bx
 34652                                  	;LeaveCrit critMem
 34653 0000634E E8E0AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34654                                  	;error	error_not_enough_memory
 34655                                  	;mov	al,8
 34656 00006351 B008                    	MOV	AL,error_not_enough_memory
 34657                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34658 00006353 EBCB                    	jmp	short alloc_errj
 34659                                  	;JMP	SYS_RET_ERR
 34660                                  
 34661                                  alloc_free:
 34662 00006355 E835FF                          CALL    Coalesce		; add following free block to current
 34663 00006358 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 34664 0000635A 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34665 0000635E 5A                              POP     DX                      ; check for max found size
 34666 0000635F 39D1                            CMP     CX,DX
 34667 00006361 7602                            JNA     SHORT alloc_test
 34668 00006363 89CA                            MOV     DX,CX
 34669                                  
 34670                                  alloc_test:
 34671 00006365 52                              PUSH    DX
 34672 00006366 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 34673 00006368 7782                    	JA      SHORT alloc_next	;   GOTO next
 34674                                  
 34675                                  	; 15/03/2018
 34676 0000636A 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 34677 00006370 7505                    	JNZ	SHORT alloc_best
 34678 00006372 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found	
 34679                                  alloc_best:
 34680 00006377 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 34681 0000637D 740E                            JZ      SHORT alloc_make_best	; initial best
 34682 0000637F 06                              PUSH	ES
 34683 00006380 368E06[4203]                    MOV     ES,[SS:BestArena]
 34684 00006385 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 34685 0000638A 07                              POP	ES
 34686 0000638B 7605                            JBE     SHORT alloc_last
 34687                                  alloc_make_best:
 34688 0000638D 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 34689                                  alloc_last:
 34690 00006392 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 34691 00006397 E952FF                          JMP     alloc_next
 34692                                  ;
 34693                                  ; split the block high
 34694                                  ;
 34695                                  alloc_do_split_high:
 34696 0000639A 368E1E[4403]                    MOV     DS,[SS:LastArena]
 34697 0000639F 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34698 000063A3 29D9                            SUB     CX,BX
 34699 000063A5 8CDA                            MOV     DX,DS
 34700 000063A7 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 34701 000063A9 01CA                            ADD     DX,CX                   ; point to next block
 34702 000063AB 8EC2                            MOV     ES,DX                   ; no decrement!
 34703 000063AD 49                              DEC     CX
 34704 000063AE 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 34705 000063B0 EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 34706                                  ;
 34707                                  ; we have scanned memory and have found all appropriate blocks
 34708                                  ; check for the type of allocation desired; first and best are identical
 34709                                  ; last must be split high
 34710                                  ;
 34711                                  alloc_do_split:
 34712                                  
 34713                                  ; 17/12/2022
 34714                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34715                                  ;%if 0
 34716                                  	; 14/05/2019
 34717                                  	; MSDOS 6.0			; M000 - start
 34718                                  	;xor	cx,cx
 34719 000063B2 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 34720                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34721 000063B7 80E13F                  	and	cl,3Fh
 34722                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34723 000063BA 80F901                  	cmp	cl,BEST_FIT
 34724 000063BD 77DB                    	ja	short alloc_do_split_high
 34725                                  ;%endif
 34726                                  
 34727                                  	; 17/12/2022
 34728                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34729                                  	; MSDOS 6.0 & MSDOS 5.0
 34730                                  	;xor	cx,cx
 34731                                  	;mov	cl,[ss:AllocMethod]
 34732                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34733                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34734                                  	;ja	short alloc_do_split_high
 34735                                  
 34736                                  	; 15/03/2018
 34737                                          ;;CMP	BYTE [SS:AllocMethod], 1
 34738                                  	; 04/08/2018
 34739                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 34740                                          ;JA	SHORT alloc_do_split_high
 34741                                          
 34742 000063BF 368E1E[4003]            	MOV     DS,[SS:FirstArena]        
 34743 000063C4 7205                    	JB      SHORT alloc_get_size
 34744 000063C6 368E1E[4203]            	MOV     DS,[SS:BestArena]
 34745                                  
 34746                                  alloc_get_size:
 34747 000063CB 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34748 000063CF 29D9                            SUB     CX,BX                   ; get room left over
 34749 000063D1 8CD8                            MOV     AX,DS
 34750 000063D3 89C2                            MOV     DX,AX                   ; save for owner setting
 34751 000063D5 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 34752 000063D7 01D8                            ADD     AX,BX
 34753 000063D9 40                              INC     AX                      ; remember the header
 34754 000063DA 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 34755 000063DC 49                              DEC     CX                      ; CX <- size of split block
 34756                                  alloc_set_sizes:
 34757 000063DD 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 34758 000063E1 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 34759                                  	;mov	bl,4Dh ; 'M'
 34760 000063E6 B34D                            MOV     BL,arena_signature_normal
 34761 000063E8 861D                            XCHG    BL,[DI]			; current signature <- 4D
 34762 000063EA 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 34763 000063ED 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34764                                  
 34765                                  alloc_set_owner:
 34766 000063F2 8EDA                            MOV     DS,DX
 34767 000063F4 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 34768 000063F8 A30100                          MOV     [ARENA.OWNER],AX
 34769 000063FB 8CD8                            MOV     AX,DS
 34770 000063FD 40                              INC     AX
 34771 000063FE 5B                              POP     BX
 34772                                  	;LeaveCrit critMem
 34773 000063FF E82FAF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34774                                  	
 34775                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34776                                  alloc_ok:
 34777                                          ;transfer SYS_RET_OK
 34778 00006402 E936A2                  	JMP	SYS_RET_OK
 34779                                  
 34780                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 34781                                  
 34782                                  ; MSDOS 6.0
 34783                                  ;----------------------------------------------------------------------------
 34784                                  ;**	$SETBLOCK - Change size of an Allocated Block
 34785                                  ;
 34786                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 34787                                  ;	any following free space onto this block; then we try to trim the
 34788                                  ;	block down to the size requested.
 34789                                  ;
 34790                                  ;	Note that if the guy wants to grow the block but that growth fails,
 34791                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 34792                                  ;	Thus the maximum-size-possible value that we return has already
 34793                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 34794                                  ;
 34795                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 34796                                  ;		finish it's work. For this reason we build the allocsf
 34797                                  ;		structure on the frame, to make us compatible with $ALLOCs
 34798                                  ;		code.
 34799                                  ;
 34800                                  ;	ENTRY	(es) = segment of old block
 34801                                  ;		(bx) = newsize
 34802                                  ;		(ah) = SETBLOCK
 34803                                  ;
 34804                                  ;	EXIT	'C' clear if OK
 34805                                  ;		'C' set if error
 34806                                  ;		  (ax) = error_invalid_block
 34807                                  ;		       = error_arena_trashed
 34808                                  ;		       = error_not_enough_memory
 34809                                  ;		       = error_invalid_function
 34810                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 34811                                  ;	USES	???? BUGBUG
 34812                                  ;----------------------------------------------------------------------------
 34813                                  
 34814                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34815                                  ;----------------------------------------------------------------------------
 34816                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 34817                                  ;
 34818                                  ;   Assembler usage:
 34819                                  ;           MOV     ES,block
 34820                                  ;           MOV     BX,newsize
 34821                                  ;           MOV     AH,setblock
 34822                                  ;           INT     21h
 34823                                  ;         if setblock fails for growing, BX will have the maximum
 34824                                  ;         size possible
 34825                                  ;   Error return:
 34826                                  ;           AX = error_invalid_block
 34827                                  ;              = error_arena_trashed
 34828                                  ;              = error_not_enough_memory
 34829                                  ;              = error_invalid_function
 34830                                  ;----------------------------------------------------------------------------
 34831                                  
 34832                                  _$SETBLOCK:        
 34833                                  	; 04/08/2018 - Retro DOS v3.0
 34834                                  	;EnterCrit   critMem
 34835 00006405 E80EAF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34836                                  
 34837 00006408 BF0000                  	MOV     DI,ARENA.SIGNATURE
 34838 0000640B 8CC0                            MOV     AX,ES
 34839 0000640D 48                              DEC     AX
 34840 0000640E E86CFE                          CALL    check_signature
 34841 00006411 7303                            JNC     SHORT setblock_grab
 34842                                  
 34843                                  setblock_bad:
 34844 00006413 E905FF                          JMP     alloc_trashed
 34845                                  
 34846                                  setblock_grab:
 34847 00006416 8ED8                            MOV     DS,AX
 34848 00006418 E872FE                          CALL    Coalesce
 34849 0000641B 72F6                            JC      SHORT setblock_bad
 34850 0000641D 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34851 00006421 51                              PUSH    CX
 34852 00006422 39CB                            CMP     BX,CX
 34853 00006424 76A5                            JBE     SHORT alloc_get_size
 34854 00006426 E91EFF                          JMP     alloc_fail
 34855                                  
 34856                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 34857                                  
 34858                                  ; MSDOS 6.0
 34859                                  ;----------------------------------------------------------------------------
 34860                                  ;**	$DEALLOC - Free Heap Memory
 34861                                  ;
 34862                                  ;	ENTRY	(es) = address of item
 34863                                  ;
 34864                                  ;	EXIT	'C' clear of OK
 34865                                  ;		'C' set if error
 34866                                  ;		  (AX) = error_invalid_block
 34867                                  ;	USES	???? BUGBUG
 34868                                  
 34869                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34870                                  ;----------------------------------------------------------------------------
 34871                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 34872                                  ;
 34873                                  ;   Assembler usage:
 34874                                  ;           MOV     ES,block
 34875                                  ;           MOV     AH,dealloc
 34876                                  ;           INT     21h
 34877                                  ;
 34878                                  ;   Error return:
 34879                                  ;           AX = error_invalid_block
 34880                                  ;              = error_arena_trashed
 34881                                  ;---------------------------------------------------------------------------- 
 34882                                  
 34883                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34884                                  _$DEALLOC:
 34885                                  	; 14/05/2019 - Retro DOS v4.0    
 34886                                  	; 04/08/2018 - Retro DOS v3.0
 34887                                  	;EnterCrit   critMem
 34888 00006429 E8EAAE                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34889                                  
 34890                                  	; MSDOS 6.0			; M016, M068 - Start
 34891 0000642C 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 34892                                  					; Q: was the previous call an int 21
 34893                                  					;    exec call
 34894 00006432 740D                    	jz	short deallocate	; N: continue
 34895 00006434 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 34896 0000643A 7505                    	jne	short deallocate	; N: continue
 34897                                  	;mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 34898                                  	; 25/09/2023
 34899 0000643C 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
 34900                                  deallocate:				; M016, M068 - End
 34901 00006441 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 34902 00006444 8CC0                            MOV     AX,ES
 34903 00006446 48                              DEC     AX
 34904 00006447 E833FE                          CALL    check_signature
 34905 0000644A 720A                            JC      SHORT dealloc_err
 34906 0000644C 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34907                                  	;LeaveCrit critMem
 34908 00006451 E8DDAE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34909                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34910                                          ;transfer SYS_RET_OK
 34911                                  dealloc_ok:
 34912 00006454 EBAC                    	jmp	short alloc_ok
 34913                                  	;JMP	SYS_RET_OK
 34914                                  
 34915                                  dealloc_err:
 34916                                  	;LeaveCrit critMem
 34917 00006456 E8D8AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34918                                          ;error	error_invalid_block
 34919                                  	;mov	al,9
 34920 00006459 B009                    	MOV	AL,error_invalid_block
 34921                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34922                                  dealloc_errj:
 34923                                  AllocOperErrj:	; 17/12/2022
 34924 0000645B E9E6A1                  	JMP	SYS_RET_ERR
 34925                                  
 34926                                  ;	BREAK $AllocOper - get/set allocation mechanism
 34927                                  
 34928                                  ; MSDOS 6.0
 34929                                  ;----------------------------------------------------------------------------
 34930                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 34931                                  ;
 34932                                  ;	Assembler usage:
 34933                                  ;           MOV     AH,AllocOper
 34934                                  ;           MOV     BX,method
 34935                                  ;           MOV     AL,func
 34936                                  ;           INT     21h
 34937                                  ;
 34938                                  ;	ENTRY	
 34939                                  ;		(al) = 0
 34940                                  ;		  Get allocation Strategy in (ax)
 34941                                  ;
 34942                                  ;		(al) = 1, (bx) = method = zw0000xy
 34943                                  ;		  Set allocation strategy.
 34944                                  ;		   w  = 1  => HIGH_ONLY
 34945                                  ;		   z  = 1  => HIGH_FIRST
 34946                                  ;		   xy = 00 => FIRST_FIT
 34947                                  ;		      = 01 => BEST_FIT
 34948                                  ;		      = 10 => LAST_FIT
 34949                                  ;
 34950                                  ;		(al) = 2
 34951                                  ;		  Get UMB link state in (al)
 34952                                  ;
 34953                                  ;		(al) = 3
 34954                                  ;		  Set UMB link state
 34955                                  ;		   (bx) = 0 => Unlink UMBs
 34956                                  ;		   (bx) = 1 => Link UMBs
 34957                                  ;
 34958                                  ;
 34959                                  ;	EXIT	'C' clear if OK
 34960                                  ;
 34961                                  ;		 if (al) = 0
 34962                                  ;		  (ax) = existing method
 34963                                  ;		 if (al) = 1
 34964                                  ;		  Sets allocation strategy
 34965                                  ;		 if (al) = 2
 34966                                  ;		  (al) = 0 => UMBs not linked
 34967                                  ;		  (al) = 1 => UMBs linked in
 34968                                  ;		 if (al) = 3
 34969                                  ;		  Links/Unlinks the UMBs into DOS chain
 34970                                  ;
 34971                                  ;		'C' set if error
 34972                                  ;		  AX = error_invalid_function
 34973                                  ;
 34974                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 34975                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 34976                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 34977                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 34978                                  ;		    arena' if an arena sig is damaged.
 34979                                  ;----------------------------------------------------------------------------
 34980                                  
 34981                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34982                                  ;----------------------------------------------------------------------------
 34983                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 34984                                  ;
 34985                                  ;   Assembler usage:
 34986                                  ;           MOV     AH,AllocOper
 34987                                  ;           MOV     BX,method
 34988                                  ;           MOV     AL,func
 34989                                  ;           INT     21h
 34990                                  ;
 34991                                  ;   Error return:
 34992                                  ;           AX = error_invalid_function
 34993                                  ;----------------------------------------------------------------------------
 34994                                  
 34995                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34996                                  _$ALLOCOPER:
 34997                                  	; 14/05/2019 - Retro DOS v4.0
 34998                                  	; MSDOS 6.0
 34999 0000645E 08C0                    	or	al,al ; 0
 35000 00006460 741E                    	jz	short AllocGetStrat
 35001                                  	; 17/12/2022
 35002                                  	;cmp	al,1
 35003                                  	;jz	short AllocSetStrat
 35004                                  
 35005                                  	; 01/12/2022
 35006                                  	;cmp	al, 2
 35007                                  	;jb	short AllocSetStrat
 35008                                  	;ja	short AllocSetLink
 35009                                  	;;jmp	short AllocGetLink
 35010                                  ;AllocGetLink:
 35011                                  	; MSDOS 6.0
 35012                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 35013                                  	;and 	al,LINKSTATE		
 35014                                  	;;transfer SYS_RET_OK
 35015                                  	;jmp	SYS_RET_OK
 35016                                  
 35017 00006462 3C02                    	cmp	al,2
 35018                                  	; 17/12/2022
 35019 00006464 7223                    	jb	short AllocSetStrat ; al = 1
 35020 00006466 7432                    	je	short AllocGetLink
 35021                                  
 35022                                  	;cmp	al,2
 35023                                  	;jz	short AllocGetLink
 35024 00006468 3C03                    	cmp	al,3
 35025 0000646A 7436                    	jz	short AllocSetLink
 35026                                  
 35027                                  	; 15/04/2018
 35028                                  	;CMP	AL,1
 35029                                          ;JB	SHORT AllocOperGet
 35030                                          ;JZ	SHORT AllocOperSet
 35031                                  
 35032                                  AllocOperError:
 35033                                  	; 04/08/2018 - Retro DOS v3.0
 35034                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 35035                                  	;mov	byte [ss:EXTERR_LOCUS],5
 35036 0000646C 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35037                                  	;error	error_invalid_function
 35038                                  	;mov	al,1
 35039 00006472 B001                    	MOV	AL,error_invalid_function
 35040                                  	; 17/12/2022
 35041                                  ;AllocOperErrj:
 35042                                  	;JMP	SYS_RET_ERR
 35043                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35044                                  	;jmp	short dealloc_errj
 35045                                  	; 17/12/2022
 35046 00006474 EBE5                    	jmp	short AllocOperErrj
 35047                                  
 35048                                  AllocArenaError:
 35049                                  	; MSDOS 6.0
 35050 00006476 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35051                                  					; M009: Extended Error Locus
 35052                                  	;error	error_arena_trashed	; M009:
 35053                                  	;mov	al,7
 35054 0000647C B007                    	MOV	AL,error_arena_trashed
 35055                                  	;JMP	SYS_RET_ERR
 35056 0000647E EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 35057                                  
 35058                                  AllocGetStrat: 
 35059                                  	; MSDOS 6.0
 35060                                  AllocOperGet:
 35061 00006480 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 35062 00006484 30E4                            XOR     AH,AH
 35063                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35064                                  	;transfer SYS_RET_OK
 35065                                  AllocOperOk:
 35066                                  	; 17/12/2022
 35067                                  	;jmp	short dealloc_ok
 35068 00006486 E9B2A1                  	JMP	SYS_RET_OK
 35069                                  
 35070                                  AllocSetStrat: 
 35071                                  	; 14/05/2019
 35072                                  	; MSDOS 6.0
 35073 00006489 53                      	push	bx			; M000 - start
 35074                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35075                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 35076                                  	; 17/12/2022
 35077 0000648A 80E33F                  	and	bl,3Fh
 35078 0000648D 83FB02                  	cmp	bx,2			; BX must be 0-2
 35079                                  	;cmp	bl,2
 35080 00006490 5B                      	pop	bx			; M000 - end
 35081 00006491 77D9                    	ja	short AllocOperError
 35082                                  
 35083                                  AllocOperSet:
 35084 00006493 36881E[0203]                    MOV     [SS:AllocMethod],BL
 35085                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35086                                  	;transfer SYS_RET_OK
 35087                                  AllocOperOkj:
 35088 00006498 EBEC                    	jmp	short AllocOperOk
 35089                                  	;JMP	SYS_RET_OK
 35090                                  
 35091                                  AllocGetLink:
 35092                                  	; MSDOS 6.0
 35093 0000649A 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 35094                                  	;and	al,1
 35095 0000649E 2401                    	and 	al,LINKSTATE		
 35096                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35097                                  	;transfer SYS_RET_OK
 35098                                  AllocOperOkj2:
 35099                                  	; 17/12/2022
 35100 000064A0 EBE4                    	jmp	short AllocOperOk
 35101                                  	;jmp	short AllocOperOkj
 35102                                  	;;JMP	SYS_RET_OK
 35103                                  
 35104                                  AllocSetLink:
 35105                                  	; MSDOS 6.0			; M009 - start
 35106 000064A2 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 35107 000064A7 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 35108 000064AA 74C0                    	je	short AllocOperError	; N: error
 35109                                  					; Y: continue
 35110                                  					; M009 - end
 35111 000064AC 83FB01                  	cmp	bx,1			
 35112 000064AF 7204                    	jb	short UnlinkUmbs
 35113 000064B1 741C                    	jz	short LinkUmbs
 35114                                  	
 35115 000064B3 EBB7                    	jmp	short AllocOperError
 35116                                  	
 35117                                  UnlinkUmbs:
 35118                                  	;test	byte [ss:UMBFLAG],1
 35119 000064B5 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 35120 000064BB 7410                    	jz	short unlinked		; Y: return 
 35121                                  	
 35122 000064BD E82900                  	call	GetLastArena		; get arena before umb_head in DS
 35123 000064C0 72B4                    	jc	short AllocArenaError	; M009: arena trashed
 35124                                  	
 35125                                  					; make it last
 35126 000064C2 C60600005A              	mov	byte [0],arena_signature_end
 35127                                  	
 35128                                  	;and	byte [ss:UMBFLAG],0FEh
 35129 000064C7 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 35130                                  	
 35131                                  unlinked:
 35132                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35133                                  	;transfer SYS_RET_OK
 35134                                  	; 17/12/2022
 35135 000064CD EBB7                    	jmp	short AllocOperOk
 35136                                  	;jmp	short AllocOperOkj2
 35137                                  	;;JMP	SYS_RET_OK
 35138                                  
 35139                                  LinkUmbs:
 35140 000064CF 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 35141 000064D5 7510                    	jnz	short linked		; Y: return
 35142                                  	
 35143 000064D7 E80F00                  	call	GetLastArena		; get arena before umb_head
 35144 000064DA 729A                    	jc	short AllocArenaError	; M009: arena trashed
 35145                                  	
 35146                                  					; make it normal. M061: ds points to
 35147                                  					; arena before umb_head
 35148 000064DC C60600004D              	mov	byte [0],arena_signature_normal
 35149                                  	
 35150 000064E1 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 35151                                  linked:
 35152                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35153                                  	;transfer SYS_RET_OK
 35154                                  	; 17/12/2022
 35155 000064E7 EB9D                    	jmp	short AllocOperOk
 35156                                  	;jmp	short unlinked
 35157                                  	;;JMP	SYS_RET_OK
 35158                                  
 35159                                  ; MSDOS 6.0
 35160                                  ;--------------------------------------------------------------------------
 35161                                  ; Procedure Name : GetLastArena		-  M003
 35162                                  ;
 35163                                  ; Inputs	 : cx = umb_head
 35164                                  ;
 35165                                  ;
 35166                                  ; Outputs	 : If UMBs are linked
 35167                                  ;			ES = umb_head
 35168                                  ;			DS = arena before umb_head
 35169                                  ;		   else
 35170                                  ;			DS = last arena
 35171                                  ;			ES = next arena. will be umb_head if NC.
 35172                                  ;
 35173                                  ;		   CY if error
 35174                                  ;
 35175                                  ; Uses		 : DS, ES, DI, BX
 35176                                  ;--------------------------------------------------------------------------
 35177                                  
 35178                                  ; 14/05/2019 - Retro DOS v4.0
 35179                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 35180                                  
 35181                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35182                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 35183                                  	
 35184                                  GetLastArena:
 35185 000064E9 50                      	push	ax			; save ax
 35186                                  
 35187 000064EA 36A1[2400]              	mov	ax,[ss:arena_head]
 35188 000064EE 8EC0                    	mov	es,ax			; es = arena_head
 35189 000064F0 31FF                    	xor	di,di
 35190                                  
 35191 000064F2 26803D5A                	cmp     byte [es:di],arena_signature_end
 35192                                  					; Q: is this the last arena
 35193 000064F6 7419                    	je	short GLA_done		; Y: return last arena in ES		
 35194                                  					
 35195                                  GLA_next:
 35196 000064F8 8ED8                    	mov	ds,ax
 35197 000064FA E879FD                  	call	arena_next		; ax, es -> next arena
 35198                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35199                                  	;jc	short GLA_err
 35200                                  	; 17/12/2022
 35201 000064FD 7228                    	jc	short GLA_err2
 35202                                  
 35203 000064FF 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 35204 00006505 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is 
 35205                                  					;    umb_head
 35206                                  					; N: terminating condition is 05Ah
 35207                                  
 35208 00006507 26803D5A                	cmp     byte [es:di],arena_signature_end
 35209                                  					; Q: is this the last arena
 35210 0000650B EB02                    	jmp	short GLA_@f
 35211                                  GLA_chkumb:
 35212 0000650D 39C8                    	cmp	ax,cx			; Q: is this umb_head
 35213                                  GLA_@f:
 35214 0000650F 75E7                    	jne	short GLA_next		; N: get next arena
 35215                                  
 35216                                  GLA_done:
 35217                                  					; M061 - Start
 35218 00006511 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 35219 00006517 750B                    	jnz	short GLA_ret		; Y: we're done
 35220                                  					; N: let us confirm that the next 
 35221                                  					;    arena is umb_head
 35222 00006519 8ED8                    	mov	ds,ax
 35223 0000651B E858FD                  	call	arena_next		; ax, es -> next arena
 35224                                  	;jc	short GLA_err
 35225 0000651E 7207                    	jc	short GLA_err2
 35226 00006520 39C8                    	cmp	ax,cx			; Q: is this umb_head
 35227 00006522 7502                    	jne	short GLA_err		; N: error
 35228                                  					; M061 - End
 35229                                  GLA_ret:
 35230                                  	; 17/12/2022				
 35231                                  	;clc
 35232                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35233                                  	;clc
 35234 00006524 58                      	pop	ax			; M061
 35235 00006525 C3                      	retn				; M061
 35236                                  
 35237                                  GLA_err:
 35238 00006526 F9                      	stc				; M061
 35239                                  GLA_err2:
 35240 00006527 58                      	pop	ax
 35241 00006528 C3                      	retn
 35242                                  
 35243                                  ;============================================================================
 35244                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 35245                                  ;============================================================================
 35246                                  ; 04/08/2018 - Retro DOS v3.0
 35247                                  
 35248                                  ;	TITLE SRVCALL - Server DOS call
 35249                                  ;	NAME  SRVCALL
 35250                                  
 35251                                  ;**	SRVCALL.ASM - Server DOS call functions
 35252                                  ;
 35253                                  ;
 35254                                  ;	$ServerCall
 35255                                  ;
 35256                                  ;	Modification history:
 35257                                  ;
 35258                                  ;	    Created: ARR 08 August 1983
 35259                                  
 35260                                  ;AsmVars <Installed>
 35261                                  
 35262                                  ;include dpl.asm
 35263                                  
 35264                                  ;Installed = TRUE
 35265                                  
 35266                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 35267                                  ; ---------------------------------------------------------------------------
 35268                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35269                                  
 35270                                  ;BREAK <ServerCall -- Server DOS call>
 35271                                  
 35272                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 35273                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 35274                                  
 35275                                  ;hkn; TABLE	SEGMENT
 35276                                  ;Public SRVC001S,SRVC001E
 35277                                  ;SRVC001S label byte
 35278                                  
 35279                                  SRVC001S:
 35280                                  
 35281 00006529 [2D65]                  SERVERTAB:	dw	SERVER_DISP
 35282 0000652B [7F65]                  SERVERLEAVE:	dw	SERVERRETURN
 35283 0000652D 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 35284 0000652E [E765]                  		dw	SRV_CALL	; 0
 35285 00006530 [8065]                  		dw	COMMIT_ALL	; 1
 35286 00006532 [B665]                  		dw	CLOSE_NAME	; 2
 35287 00006534 [C165]                  		dw	CLOSE_UID	; 3
 35288 00006536 [C865]                  		dw	CLOSE_UID_PID	; 4
 35289 00006538 [CF65]                  		dw	GET_LIST	; 5
 35290 0000653A [2866]                  		dw	GET_DOS_DATA	; 6
 35291 0000653C [4C66]                  		dw	SPOOL_OPER	; 7
 35292 0000653E [4C66]                  		dw	SPOOL_OPER	; 8
 35293 00006540 [4C66]                  		dw	SPOOL_OPER	; 9
 35294 00006542 [5866]                  		dw	_$SetExtendedError  ; 10
 35295                                  
 35296                                  SERVER_DISP_END:  ;  LABEL BYTE
 35297                                  
 35298                                  ;SRVC001E label byte
 35299                                  
 35300                                  SRVC001E:
 35301                                  
 35302                                  ;hkn; TABLE	ENDS
 35303                                  
 35304                                  ;----------------------------------------------------------------------------
 35305                                  ;
 35306                                  ; Procedure Name : $ServerCall
 35307                                  ;
 35308                                  ; Inputs:
 35309                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 35310                                  ; Function:
 35311                                  ;	AL=0	Server DOS call
 35312                                  ;	AL=1	Commit All files
 35313                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 35314                                  ;	AL=3	Close all files for DPL_UID
 35315                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 35316                                  ;	AL=5	Get open file list entry
 35317                                  ;		    IN: BX File Index
 35318                                  ;			CX User Index
 35319                                  ;		    OUT:ES:DI -> Name
 35320                                  ;			BX = UID
 35321                                  ;		    CX = # locked blocks held by this UID
 35322                                  ;	AL=6	Get DOS data area
 35323                                  ;		    OUT: DS:SI -> Start
 35324                                  ;			CX size in bytes of swap if indos
 35325                                  ;			DX size in bytes of swap always
 35326                                  ;	AL=7	Get truncate flag
 35327                                  ;	AL=8	Set truncate flag
 35328                                  ;	AL=9	Close all spool files
 35329                                  ;	AL=10	SetExtendedError
 35330                                  ;
 35331                                  ;----------------------------------------------------------------------------
 35332                                  
 35333                                  _$ServerCall:
 35334                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35335                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 35336                                  	; 10/06/2019
 35337                                  	; 29/04/2019 - Retro DOS v4.0
 35338                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 35339                                  
 35340                                  	; 05/08/2018 - Retro DOS v3.0
 35341                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 35342 00006544 3C07                    	CMP	AL,7
 35343 00006546 7204                    	JB	short SET_STUFF
 35344 00006548 3C09                    	CMP	AL,9
 35345 0000654A 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 35346                                  SET_STUFF:
 35347 0000654C 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 35348                                  	;mov	bx,[si+12h]
 35349 0000654E 8B5C12                  	MOV	BX,[SI+DPL.UID]
 35350                                  
 35351                                  	; MSDOS 6.0
 35352                                  ;SR;
 35353                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 35354                                  ; of USER_ID
 35355                                  
 35356 00006551 36F606[3010]01          	test	byte [SS:IsWin386],1
 35357 00006557 7505                    	jnz	short skip_win386
 35358                                  
 35359                                  ;hkn; SS override for user_id and proc_id
 35360                                  	; 15/08/2018
 35361 00006559 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 35362                                  
 35363                                  skip_win386:
 35364 0000655E 8B5C14                  	MOV	BX,[SI+DPL.PID]
 35365 00006561 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 35366                                  NO_SET_ID:
 35367                                  	; 10/06/2019 - Retro DOS v4.0
 35368 00006566 2EFF36[2B65]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 35369 0000656B 2EFF36[2965]            	PUSH	word [cS:SERVERTAB]	; push table address
 35370 00006570 50                      	PUSH	AX
 35371 00006571 E8B3AC                  	call	TableDispatch
 35372                                  
 35373                                  ;hkn; SS override
 35374                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 35375 00006574 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 35376                                  	;error	error_invalid_function
 35377                                  	;mov	al,1
 35378 0000657A B001                    	MOV	AL,error_invalid_function
 35379                                  servercall_error:
 35380 0000657C E9C5A0                  	JMP	SYS_RET_ERR
 35381                                  
 35382                                  SERVERRETURN:
 35383 0000657F C3                      	retn
 35384                                  
 35385                                  ; Commit - iterate through the open file list and make sure that the
 35386                                  ; directory entries are correctly updated.
 35387                                  
 35388                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35389                                  COMMIT_ALL:
 35390 00006580 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 35391 00006582 16                      	push	ss
 35392 00006583 1F                      	pop	ds
 35393 00006584 E88FAD                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 35394                                  CommitLoop:
 35395 00006587 53                      	push	bx
 35396 00006588 E82401                  	call	SFFromSFN
 35397 0000658B 7222                    	JC	short CommitDone
 35398 0000658D 26833D00                	cmp	word [es:di],0
 35399                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 35400                                  					; if (ThisSFT->refcount != 0)
 35401 00006591 7418                    	JZ	short CommitNext
 35402                                  	;cmp	word [es:di],0FFFFh ; -1
 35403 00006593 26833DFF                	cmp	word [ES:DI],sf_busy
 35404                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 35405                                  					; BUSY SFTs have god knows what
 35406 00006597 7412                    	JZ	short CommitNext	;   in them.
 35407                                  	; 17/12/2022
 35408 00006599 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 35409                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 35410 0000659E 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 35411                                  					;	doesn't deadlock
 35412 000065A0 893E[9E05]              	MOV	[THISSFT],DI
 35413 000065A4 8C06[A005]              	MOV	[THISSFT+2],ES
 35414 000065A8 E8FCCA                  	call	DOS_COMMIT		;	DOSCommit ();
 35415                                  CommitNext:
 35416 000065AB 5B                      	pop	bx
 35417 000065AC 43                      	INC	BX
 35418 000065AD EBD8                    	JMP	short CommitLoop
 35419                                  CommitDone:
 35420 000065AF E87FAD                  	call	LCritSFT
 35421 000065B2 5B                      	pop	bx
 35422                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35423                                  Commit_Ok:
 35424 000065B3 E985A0                  	jmp	SYS_RET_OK
 35425                                  	
 35426                                  
 35427                                  CLOSE_NAME:
 35428                                  
 35429                                  ;if installed
 35430                                  
 35431                                  ;hkn; SS override
 35432                                  	;call	far [ss:MFTcloN]
 35433 000065B6 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 35434                                  ;else
 35435                                  ;	Call	MFTcloN
 35436                                  ;endif
 35437                                  
 35438                                  CheckReturns:
 35439 000065BB 7202                    	JC	short func_err
 35440                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35441                                  	;transfer SYS_RET_OK
 35442                                  Commit_Okj:
 35443 000065BD EBF4                    	jmp	short Commit_Ok
 35444                                  	;jmp	SYS_RET_OK
 35445                                  
 35446                                  func_err:
 35447                                  	;transfer SYS_RET_ERR
 35448                                  	;jmp	SYS_RET_ERR
 35449 000065BF EBBB                    	jmp	short servercall_error
 35450                                  
 35451                                  CLOSE_UID:
 35452                                  
 35453                                  ;if installed
 35454                                  ;hkn; SS override
 35455                                  	;call	far [ss:MFTclU]
 35456 000065C1 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 35457                                  ;else
 35458                                  ;	Call	MFTclU
 35459                                  ;endif
 35460 000065C6 EBF3                    	JMP	short CheckReturns
 35461                                  
 35462                                  CLOSE_UID_PID:
 35463                                  
 35464                                  ;if installed
 35465                                  ;hkn; SS override
 35466                                  	;call	far [ss:MFTCloseP]
 35467 000065C8 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 35468                                  ;else
 35469                                  ;	Call	MFTCloseP
 35470                                  ;endif
 35471 000065CD EBEC                    	JMP	short CheckReturns
 35472                                  
 35473                                  GET_LIST:
 35474                                  
 35475                                  ;if installed
 35476                                  ;hkn; SS override
 35477                                  	;call	far [ss:MFT_get]
 35478 000065CF 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 35479                                  ;else
 35480                                  ;	Call	MFT_get
 35481                                  ;endif
 35482 000065D4 72E9                    	JC	short func_err
 35483 000065D6 E8AC9E                  	call	Get_User_Stack
 35484                                  	;mov	[si+2],bx
 35485 000065D9 895C02                  	MOV	[SI+user_env.user_BX],BX
 35486                                  	;mov	[si+10],di
 35487 000065DC 897C0A                  	MOV	[SI+user_env.user_DI],DI
 35488                                  	;mov	[si+16],es
 35489 000065DF 8C4410                  	MOV	[SI+user_env.user_ES],ES
 35490                                  SetCXOK:
 35491                                  	;mov	[si+4],cx
 35492 000065E2 894C04                  	MOV	[SI+user_env.user_CX],CX
 35493                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35494                                  	;transfer SYS_RET_OK
 35495                                  Commit_Okj2:
 35496                                  	; 17/12/2022
 35497 000065E5 EBCC                    	jmp	short Commit_Ok
 35498                                  	;jmp	short Commit_Okj
 35499                                  	;;jmp	SYS_RET_OK
 35500                                  
 35501                                  SRV_CALL:
 35502 000065E7 58                      	POP	AX			; get rid of call to $srvcall
 35503 000065E8 1E                      	push	ds
 35504 000065E9 56                      	push	si
 35505 000065EA E8989E                  	call	Get_User_Stack
 35506 000065ED 5F                      	pop	di
 35507 000065EE 07                      	pop	es
 35508                                  
 35509                                  ; DS:SI point to stack
 35510                                  ; ES:DI point to DPL
 35511                                  
 35512 000065EF E814AC                  	call	XCHGP
 35513                                  
 35514                                  ; DS:SI point to DPL
 35515                                  ; ES:DI point to stack
 35516                                  ;
 35517                                  ; We now copy the registers from DPL to save stack
 35518                                  
 35519 000065F2 56                      	push	si
 35520 000065F3 B90600                  	MOV	CX,6
 35521 000065F6 F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 35522 000065F8 47                      	INC	DI
 35523 000065F9 47                      	INC	DI			; Skip user_BP
 35524 000065FA A5                      	MOVSW				; DS
 35525 000065FB A5                      	MOVSW				; ES
 35526 000065FC 5E                      	pop	si			; DS:SI -> DPL
 35527 000065FD 8B04                    	mov	ax,[SI]
 35528                                  	;MOV	AX,[SI+DPL.AX]
 35529                                  	;mov	bx,[si+2]
 35530 000065FF 8B5C02                  	MOV	BX,[SI+DPL.BX]
 35531                                  	;mov	cx,[si+4]
 35532 00006602 8B4C04                  	MOV	CX,[SI+DPL.CX]
 35533                                  	;mov	dx,[si+6]
 35534 00006605 8B5406                  	MOV	DX,[SI+DPL.DX]
 35535                                  	;mov	di,[si+10]
 35536 00006608 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 35537                                  	;mov	es,[si+14]
 35538 0000660B 8E440E                  	MOV	ES,[SI+DPL.ES]
 35539                                  	;push	word [si+8]
 35540 0000660E FF7408                  	PUSH	word [SI+DPL.SI]
 35541                                  	;mov	ds,[si+12]
 35542 00006611 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 35543 00006614 5E                      	POP	SI
 35544                                  
 35545                                  ;hkn; SS override for next 3
 35546 00006615 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 35547 0000661A 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 35548 0000661F 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 35549 00006625 E95F9D                  	jmp	REDISP
 35550                                  
 35551                                  GET_DOS_DATA:
 35552 00006628 16                      	push	ss
 35553 00006629 07                      	pop	es
 35554 0000662A BF[2003]                	MOV     DI,SWAP_START
 35555 0000662D B9[AC0A]                	MOV     CX,SWAP_END
 35556 00006630 BA[3A03]                	MOV     DX,SWAP_ALWAYS
 35557 00006633 29F9                    	SUB     CX,DI
 35558 00006635 29FA                    	SUB     DX,DI
 35559 00006637 D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 35560 00006639 83D100                  	ADC     CX,0                    ; div by 2 + round up
 35561 0000663C D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 35562 0000663E E8449E                  	call	Get_User_Stack
 35563                                  	;mov	[si+14],es
 35564 00006641 8C440E                  	MOV     [SI+user_env.user_DS],ES
 35565                                  	;mov	[si+8],di
 35566 00006644 897C08                  	MOV     [SI+user_env.user_SI],DI
 35567                                  	;mov	[si+6],dx
 35568 00006647 895406                  	MOV     [SI+user_env.user_DX],DX
 35569 0000664A EB96                    	JMP	short SetCXOK
 35570                                  
 35571                                  SPOOL_OPER:
 35572                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 35573                                  
 35574 0000664C 50                      	push    ax
 35575 0000664D B82511                  	mov     ax,1125h
 35576 00006650 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 35577                                  			; STACK: WORD subfunction
 35578                                  			; Return: CF set on error, AX = error code
 35579                                  			; STACK unchanged
 35580 00006652 5B                      	pop	bx
 35581                                  	; 17/12/2022
 35582                                  	;JC	short func_err2
 35583 00006653 7390                    	jnc	short Commit_Okj2
 35584                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35585                                  	;;jmp	SYS_RET_OK
 35586                                  	;jmp	short Commit_Okj2
 35587                                  	
 35588                                  func_err2:
 35589 00006655 E9EC9F                  	jmp	SYS_RET_ERR
 35590                                  
 35591                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 35592                                  ;--------------------------------------------------------------------------
 35593                                  ;
 35594                                  ; Procedure Name : $SetExtendedError
 35595                                  ;
 35596                                  ; $SetExtendedError takes extended error information and loads it up for the
 35597                                  ; next extended error call. This is used by interrupt-level proccessors to
 35598                                  ; mask their actions.
 35599                                  ;
 35600                                  ;   Inputs: DS:SI points to DPL which contains all registers
 35601                                  ;   Outputs: none
 35602                                  ;
 35603                                  ;---------------------------------------------------------------------------
 35604                                  
 35605                                  _$SetExtendedError:
 35606                                  
 35607                                  ;hkn; SS override for all variables used
 35608                                  
 35609 00006658 8B04                    	mov	ax,[si]
 35610                                  	;MOV	AX,[SI+DPL.AX]
 35611 0000665A 36A3[2403]              	MOV	[SS:EXTERR],AX
 35612                                  	;mov	ax,[si+10]
 35613 0000665E 8B440A                  	MOV	AX,[SI+DPL.DI]
 35614 00006661 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 35615                                  	;mov	ax,[si+14]
 35616 00006665 8B440E                  	MOV	AX,[SI+DPL.ES]
 35617 00006668 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 35618                                  	;mov	ax,[si+2]
 35619 0000666C 8B4402                  	MOV	AX,[SI+DPL.BX]
 35620 0000666F 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 35621                                  	;mov	ax,[si+4]
 35622 00006673 8B4404                  	MOV	AX,[SI+DPL.CX]
 35623 00006676 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 35624 0000667B C3                      	retn
 35625                                  
 35626                                  ;============================================================================
 35627                                  ; UTIL.ASM, MSDOS 6.0, 1991
 35628                                  ;============================================================================
 35629                                  ; 05/08/2018 - Retro DOS v3.0
 35630                                  ; 05/05/2019 - Retro DOS v4.0
 35631                                  
 35632                                  ;**	Handle related utilities for MSDOS 2.X.
 35633                                  ;----------------------------------------------------------------------------
 35634                                  ;	pJFNFromHandle	written
 35635                                  ;	SFFromHandle	written
 35636                                  ;	SFFromSFN	written
 35637                                  ;	JFNFree 	written
 35638                                  ;	SFNFree 	written
 35639                                  ;
 35640                                  ;	Modification history:
 35641                                  ;
 35642                                  ;	    Created: MZ 1 April 1983
 35643                                  ;----------------------------------------------------------------------------
 35644                                  
 35645                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 35646                                  
 35647                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 35648                                  ;----------------------------------------------------------------------------
 35649                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 35650                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 35651                                  ;
 35652                                  ;	NOTE:
 35653                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35654                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 35655                                  ;
 35656                                  ;	ENTRY	(bx) = handle
 35657                                  ;	EXIT	'C' clear if ok
 35658                                  ;		  (es:di) = address of JFN value
 35659                                  ;		'C' set if error
 35660                                  ;		  (ax) = error code
 35661                                  ;	USES	AX, DI, ES, Flags
 35662                                  ;----------------------------------------------------------------------------
 35663                                  
 35664                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35665                                  
 35666                                  pJFNFromHandle:
 35667                                  	; 05/05/2019 - Retro DOS v4.0
 35668                                  	;getdseg <es>			; es -> dosdata
 35669 0000667C 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35670                                  	
 35671                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 35672 00006681 268E06[3003]            	mov	es,[es:CurrentPDB]
 35673                                  
 35674                                  	;cmp	bx,[ES:32h]
 35675 00006686 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 35676 0000668B 7204                    	JB	short pjfn10		; no, get offset
 35677                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 35678                                  	;mov	al,6
 35679 0000668D B006                    	MOV     AL,error_invalid_handle ; appropriate error
 35680                                  ReturnCarry:
 35681 0000668F F9                      	STC                             ; signal error
 35682 00006690 C3                      	retn				; go back
 35683                                  pjfn10: 
 35684                                  	;les	di,[es:34h]
 35685 00006691 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 35686 00006696 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 35687                                  	;clc
 35688                                  pJFNFromHandle_error:
 35689 00006698 C3                      	retn
 35690                                  
 35691                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 35692                                  ;----------------------------------------------------------------------------
 35693                                  ;
 35694                                  ; Procedure Name : SFFromHandle
 35695                                  ;
 35696                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 35697                                  ;
 35698                                  ;   Input:      BX has handle
 35699                                  ;   Output:     Carry Set
 35700                                  ;                   AX has error code
 35701                                  ;               Carry Reset
 35702                                  ;                   ES:DI has pointer to SF entry
 35703                                  ;   Registers modified: If error, AX,ES, else ES:DI
 35704                                  ; NOTE:
 35705                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35706                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35707                                  ;
 35708                                  ;----------------------------------------------------------------------------
 35709                                  
 35710                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35711                                  
 35712                                  SFFromHandle:
 35713 00006699 E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 35714                                  	;retc				; return if error
 35715 0000669C 72FA                    	jc	short pJFNFromHandle_error
 35716 0000669E 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 35717                                  	;JNZ	short GetSF		; nope, suck out SF
 35718                                  	;;mov	al,6
 35719                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35720                                  	;jmp	short ReturnCarry	; signal it
 35721                                  	; 17/12/2022
 35722                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35723 000066A2 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 35724                                  	;JNZ	short GetSF		; nope, suck out SF
 35725                                  	;;mov	al,6
 35726                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35727                                  	;jmp	short ReturnCarry	; signal it
 35728                                  GetSF:
 35729 000066A4 53                      	push	bx			; save handle
 35730 000066A5 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 35731 000066A8 30FF                    	XOR     BH,BH                   ; ignore upper half
 35732 000066AA E80200                  	CALL    SFFromSFN               ; get real sf spot
 35733 000066AD 5B                      	pop	bx			; restore
 35734 000066AE C3                      	retn                        	; say goodbye
 35735                                  
 35736                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 35737                                  
 35738                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 35739                                  ;----------------------------------------------------------------------------
 35740                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 35741                                  ;	is more than just a simple index instruction because the SF table
 35742                                  ;	can be made up of multiple pieces chained together. We follow the
 35743                                  ;	chain to the right piece and then do the index operation.
 35744                                  ;
 35745                                  ;   NOTE:
 35746                                  ;	This routine is called from SFFromHandle which is called
 35747                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35748                                  ;
 35749                                  ;	ENTRY	BX has SF index
 35750                                  ;	EXIT	'C' clear if OK
 35751                                  ;		  ES:DI points to SF entry
 35752                                  ;		'C' set if index too large
 35753                                  ;	USES	BX, DI, ES
 35754                                  ;----------------------------------------------------------------------------
 35755                                  
 35756                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35757                                  
 35758                                  SFFromSFN:
 35759                                  	; 05/05/2019 - Retro DOS v4.0
 35760                                  	;getdseg <es>			; es -> dosdata
 35761 000066AF 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35762                                  
 35763                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 35764 000066B4 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 35765                                  sfsfn5:	
 35766                                  	;cmp	bx,[es:di+4]
 35767 000066B9 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 35768 000066BD 720E                    	JB	short sfsfn7		; yes, go grab it
 35769                                  	;sub	bx,[es:di+4]
 35770 000066BF 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 35771 000066C3 26C43D                  	les	di,[es:di] ; 14/08/2018
 35772                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 35773 000066C6 83FFFF                  	CMP     DI,-1                   ; end of tables?
 35774 000066C9 75EE                    	JNZ	short sfsfn5		; no, try again
 35775 000066CB F9                      	STC
 35776 000066CC C3                      	retn				; return with error, not found
 35777                                  sfsfn7:
 35778 000066CD 50                      	push	ax
 35779                                  	;mov	ax,53 ; MSDOS 3.3
 35780                                  	;mov	ax,59 ; MSDOS 6.0
 35781                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 35782                                  	
 35783                                  	; 17/12/2022
 35784 000066CE B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 35785                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35786                                  	;mov	ax,SF_ENTRY.size ; 59
 35787                                  	
 35788 000066D0 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 35789 000066D2 01C7                    	ADD	DI,AX			; add base of SF block
 35790 000066D4 58                      	pop	ax
 35791                                  	;add	di,6
 35792 000066D5 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 35793 000066D8 C3                      	retn				; return with 'C' clear
 35794                                  
 35795                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 35796                                  
 35797                                  ;**	JFNFree - Find a Free JFN Slot
 35798                                  ;----------------------------------------------------------------------------
 35799                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 35800                                  ;
 35801                                  ;	ENTRY	(ss) = DOSDATA
 35802                                  ;	EXIT	'C' clear if OK
 35803                                  ;		  (bx) = new handle
 35804                                  ;		  (es:di) = pointer to JFN slot
 35805                                  ;		'C' set if error
 35806                                  ;		  (al) = error code
 35807                                  ;	USES	bx, di, es, flags
 35808                                  ;----------------------------------------------------------------------------
 35809                                  
 35810                                  JFNFree:
 35811 000066D9 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 35812                                  jfnf1:	
 35813 000066DB E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 35814 000066DE 7209                    	JC	short jfnf5		; no more handles
 35815 000066E0 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 35816 000066E4 7405                    	je	short jfnfx		; yes, carry is clear
 35817 000066E6 43                      	INC     BX                      ; no, next handle
 35818 000066E7 EBF2                    	JMP	short jfnf1		; and try again
 35819                                  
 35820                                  	; Error. 'C' set
 35821                                  jfnf5:	
 35822                                  	;mov	al,4
 35823 000066E9 B004                    	MOV	AL,error_too_many_open_files
 35824                                  jfnfx:	
 35825 000066EB C3                      	retn				; bye
 35826                                  
 35827                                  ;	BREAK <SFNFree - Allocate a free SFN>
 35828                                  
 35829                                  ;**	SFNFree - Allocate a Free SFN/SFT
 35830                                  ;----------------------------------------------------------------------------
 35831                                  ;	SFNFree scans through the sf table looking for a free entry
 35832                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 35833                                  ;
 35834                                  ;	The problem is that we want to mark the SFT busy so that other threads
 35835                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 35836                                  ;	we can't just mark it busy because we may get blown out of our open
 35837                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 35838                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 35839                                  ;	an SFT with this value we look to see if it belongs to this user
 35840                                  ;	and process.  If it does belong to us then it must be an orphan
 35841                                  ;	and we reclaim it.
 35842                                  ;
 35843                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 35844                                  ;		over and over, but we could at least set a high water mark...
 35845                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 35846                                  ;		even though this is not a frequently called routine - jgl
 35847                                  ;
 35848                                  ;	ENTRY	(ss) = DOSDATA
 35849                                  ;	EXIT	'C' clear if no error
 35850                                  ;		  (bx) = SFN
 35851                                  ;		  (es:di) = pointer to SFT
 35852                                  ;		  es:[di].SFT_REF_COUNT = -1
 35853                                  ;		'C' set if error
 35854                                  ;		  (al) = error code
 35855                                  ;	USES	bx, di, es, Flags
 35856                                  ;----------------------------------------------------------------------------
 35857                                  
 35858                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35859                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 35860                                  
 35861                                  SFNFree:
 35862                                  	; 12/08/2018
 35863                                  	; 05/08/2018 - Retro DOS v3.0
 35864                                  	;
 35865                                  	; MSDOS 6.0
 35866 000066EC 50                      	push	ax
 35867 000066ED 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 35868                                  sfnf5:	
 35869 000066EF 53                      	push	bx
 35870 000066F0 E8BCFF                  	call	SFFromSFN		; get the potential handle
 35871 000066F3 5B                      	pop	bx
 35872 000066F4 723A                    	jc	short sfnf95		; no more free SFNs
 35873 000066F6 26833D00                	cmp	word [ES:DI],0
 35874                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 35875 000066FA 741D                    	je	short sfnf20			; yep, got one
 35876                                  	
 35877                                  	;cmp	word [es:di],0FFFFh ; -1
 35878 000066FC 26833DFF                	cmp	word [ES:DI],sf_busy
 35879                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 35880 00006700 7403                    	je	short sfnf10		; special busy mark
 35881                                  sfnf7:	
 35882 00006702 43                      	inc	bx			; try the next one
 35883 00006703 EBEA                    	jmp	short sfnf5
 35884                                  
 35885                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 35886                                  ;	it was abandoned during a earlier call and we can use it.
 35887                                  ;
 35888                                  ;	(bx)	= SFN
 35889                                  ;	(es:di) = pointer to SFT
 35890                                  ;	(TOS)	= caller's (ax)
 35891                                  
 35892                                  sfnf10:	
 35893 00006705 36A1[3E03]              	mov	ax,[SS:USER_ID]
 35894                                  	;cmp	[es:di+2Fh],ax
 35895 00006709 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 35896 0000670D 75F3                    	jnz	short sfnf7		; not ours
 35897 0000670F 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 35898                                  	;cmp	[es:di+31h],ax
 35899 00006713 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 35900 00006717 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 35901                                  
 35902                                  ;	We have an SFT to allocate
 35903                                  ;
 35904                                  ;	(bx)	= SFN
 35905                                  ;	(es:di) = pointer to SFT
 35906                                  ;	(TOS)	= caller's (ax)
 35907                                  
 35908                                  sfnf20:
 35909                                  	; cf = 0 ;; Retro DOS v3.0
 35910                                  
 35911                                  	;mov	word [es:di],0FFFFh
 35912 00006719 26C705FFFF              	mov	word [ES:DI],sf_busy
 35913                                  					; make sure that this is allocated
 35914                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 35915                                  
 35916 0000671E 36A1[3E03]              	mov	ax,[SS:USER_ID]
 35917                                  	;mov	[es:di+2Fh],ax
 35918 00006722 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 35919 00006726 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 35920                                  	;mov	[es:di+31h],ax
 35921 0000672A 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 35922                                  sfnf21: ;; Retro DOS v3.0
 35923                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35924                                  	;pop	ax
 35925                                  	;;clc
 35926                                  	;retn				; return with no error
 35927                                  	; 17/12/2022
 35928 0000672E 58                      	pop	ax
 35929                                  	;clc
 35930 0000672F C3                      	retn
 35931                                  
 35932                                  ;**	Error - no more free SFNs
 35933                                  ;
 35934                                  ;	'C' set
 35935                                  ;	(TOS) = saved ax
 35936                                  
 35937                                  sfnf95: 
 35938 00006730 58                      	pop	ax
 35939                                  	;mov	al,4
 35940 00006731 B004                    	mov	al,error_too_many_open_files
 35941 00006733 C3                      	retn				; return with 'C' and error
 35942                                  
 35943                                  ;============================================================================
 35944                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 35945                                  ;============================================================================
 35946                                  ; 13/07/2018 - Retro DOS v3.0
 35947                                  ; 20/05/2019 - Retro DOS v4.0
 35948                                  
 35949                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 35950                                  
 35951                                  ;	BREAK <$Close - return a handle to the system>
 35952                                  ;----------------------------------------------------------------------------
 35953                                  ;
 35954                                  ;**	$Close - Close a file Handle
 35955                                  ;
 35956                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 35957                                  ;		path
 35958                                  ;
 35959                                  ;	Assembler usage:
 35960                                  ;	    MOV     BX, handle
 35961                                  ;	    MOV     AH, Close
 35962                                  ;	    INT     int_command
 35963                                  ;
 35964                                  ;	ENTRY	(bx) = handle
 35965                                  ;	EXIT	<normal INT21 return convention>
 35966                                  ;	USES	all
 35967                                  ;
 35968                                  ;----------------------------------------------------------------------------
 35969                                  
 35970                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35971                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 35972                                  
 35973                                  _$CLOSE:
 35974                                  ;	Grab the SFT pointer from the JFN.
 35975                                  
 35976 00006734 E85A02                  	call	CheckOwner		; get system file entry
 35977 00006737 722B                    	jc	short CloseError	; error return
 35978 00006739 16                      	push	ss
 35979 0000673A 1F                      	pop	ds			; For DOS_CLOSE
 35980 0000673B 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 35981 0000673F 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 35982                                  
 35983                                  ; DS:SI point to JFN table entry.
 35984                                  ; ES:DI point to SFT
 35985                                  ;
 35986                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 35987                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 35988                                  ; If the file was not a net FCB, we free the JFN too.
 35989                                  
 35990                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 35991 00006743 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 35992 00006747 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 35993                                  	;mov	al,[ES:DI+2]
 35994 00006749 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 35995                                  	;and	al,0F0h
 35996 0000674D 24F0                    	AND	AL,SHARING_MASK
 35997                                  	;cmp	al,70h
 35998 0000674F 3C70                    	CMP	AL,SHARING_NET_FCB
 35999 00006751 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 36000                                  
 36001                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 36002                                  ; -1.
 36003                                  
 36004                                  FreeJFN:
 36005 00006753 E826FF                  	call	pJFNFromHandle		;   d = pJFN (handle);
 36006 00006756 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 36007                                  PostFree:
 36008                                  
 36009                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 36010                                  
 36011 0000675A E8FCC7                  	call	DOS_CLOSE
 36012                                  
 36013                                  ; DOS_Close may return an error. If we see such an error, we report it but
 36014                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 36015                                  
 36016 0000675D 7205                    	JC	short CloseError
 36017                                  	;mov	ah,3Eh
 36018 0000675F B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 36019                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36020                                  CloseOk:
 36021 00006761 E9D79E                  	jmp	SYS_RET_OK
 36022                                  CloseError:
 36023 00006764 E9DD9E                  	jmp	SYS_RET_ERR
 36024                                  
 36025                                  ;	BREAK <$Commit - commit the file>
 36026                                  ;----------------------------------------------------------------------------
 36027                                  ;
 36028                                  ;**	$Commit - Commit a File
 36029                                  ;
 36030                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 36031                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 36032                                  ;	the directory entry, etc., so this commit is pretty useless. check
 36033                                  ;	and fix this!! jgl
 36034                                  ;
 36035                                  ;	Assembler usage:
 36036                                  ;	    MOV     BX, handle
 36037                                  ;	    MOV     AH, Commit
 36038                                  ;	    INT     int_command
 36039                                  ;
 36040                                  ;	ENTRY	(bx) = handle
 36041                                  ;	EXIT	none
 36042                                  ;	USES	all
 36043                                  ;;----------------------------------------------------------------------------
 36044                                  
 36045                                  _$COMMIT:
 36046                                  ;	Grab the SFT pointer from the JFN.
 36047                                  
 36048 00006767 E82702                  	call	CheckOwner		; get system file entry
 36049 0000676A 7213                    	JC	short CommitError	; error return
 36050 0000676C 16                      	push	ss
 36051 0000676D 1F                      	pop	ds			; For DOS_COMMIT
 36052 0000676E 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 36053 00006772 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 36054                                  
 36055                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 36056                                  ;
 36057                                  ;	ES:DI point to SFT
 36058                                  
 36059 00006776 E82EC9                  	call	DOS_COMMIT
 36060 00006779 7204                    	JC	short CommitError
 36061                                  	; 07/12/2022
 36062                                  	;jc	short CloseError
 36063                                  	;mov	ah,68h
 36064 0000677B B468                    	MOV	AH,COMMIT
 36065                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36066                                  	;jmp	SYS_RET_OK
 36067                                  CommitOk:
 36068 0000677D EBE2                    	jmp	short CloseOk	
 36069                                  
 36070                                  CommitError:
 36071                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36072                                  	;jmp	SYS_RET_ERR
 36073 0000677F EBE3                    	jmp	short CloseError
 36074                                  
 36075                                  ;	BREAK <$ExtHandle - extend handle count>
 36076                                  
 36077                                  ;**	$ExtHandle - Extend Handle Count
 36078                                  ;----------------------------------------------------------------------------
 36079                                  ;	Assembler usage:
 36080                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 36081                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 36082                                  ;	    INT     int_command 		 busy )
 36083                                  ;
 36084                                  ;	ENTRY	(bx) = new number of handles
 36085                                  ;	EXIT	'C' clear if OK
 36086                                  ;		'C' set iff err
 36087                                  ;		  (ax) = error code
 36088                                  ;			 AX = error_not_enough_memory
 36089                                  ;			      error_too_many_open_files
 36090                                  ;	USES	all
 36091                                  ;----------------------------------------------------------------------------
 36092                                  
 36093                                  _$ExtHandle:
 36094 00006781 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 36095                                  	;cmp	bx,20
 36096 00006783 83FB14                  	CMP	BX,FILPERPROC
 36097 00006786 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 36098 00006788 BB1400                  	MOV	BX,FILPERPROC
 36099                                  exth2:	
 36100 0000678B 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 36101                                  	;mov	cx,[ES:32h]
 36102 00006790 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 36103 00006795 39CB                    	CMP	BX,CX			; the requested == current
 36104 00006797 7455                    	JE	short ok_done 		; yes and exit
 36105 00006799 7722                    	JA	short larger		; go allocate new table
 36106                                  
 36107                                  ;	We're going to shrink the # of handles available
 36108                                  
 36109 0000679B BD0100                  	MOV	BP,1			; shrink
 36110                                  	;mov	ds,[ES:36h]
 36111 0000679E 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 36112 000067A3 89DE                    	MOV	SI,BX			;
 36113 000067A5 29D9                    	SUB	CX,BX			; get difference
 36114                                  
 36115                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 36116                                  chck_handles:
 36117 000067A7 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 36118 000067AA 753D                    	JNZ	short too_many_files	; status
 36119 000067AC 46                      	INC	SI
 36120 000067AD E2F8                    	LOOP	chck_handles
 36121 000067AF 83FB14                  	CMP	BX,FILPERPROC		; = 20
 36122 000067B2 7709                    	JA	short larger		; no
 36123                                  
 36124 000067B4 BD0200                  	MOV	BP,2			; psp
 36125                                  	;mov	di,24
 36126 000067B7 BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 36127 000067BA 53                      	PUSH	BX
 36128 000067BB EB1D                    	JMP	short movhandl
 36129                                  
 36130                                  larger:
 36131 000067BD 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 36132 000067C0 747F                    	JZ	short invalid_func	; 10/08/2018
 36133 000067C2 F8                      	CLC
 36134 000067C3 53                      	PUSH	BX			; save requested number
 36135 000067C4 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 36136 000067C7 B104                    	MOV	CL,4
 36137                                  	;ror	bx,cl			; MSDOS 3.3
 36138 000067C9 D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 36139 000067CB 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 36140                                  
 36141 000067CF 55                      	PUSH	BP
 36142 000067D0 E8DCFA                  	call	_$ALLOC			; allocate memory
 36143 000067D3 5D                      	POP	BP
 36144 000067D4 7266                    	JC	short no_memory		; not enough meory
 36145                                  
 36146 000067D6 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 36147 000067D8 31FF                    	XOR	DI,DI
 36148                                  movhandl:
 36149 000067DA 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 36150                                  
 36151 000067DF F7C50300                	test	BP,3			; enlarge ?
 36152 000067E3 740C                    	JZ	short enlarge 		; yes
 36153 000067E5 59                      	POP	CX			; cx = the amount you shrink
 36154 000067E6 51                      	PUSH	CX
 36155 000067E7 EB0C                    	JMP	short copy_hand
 36156                                  
 36157                                  ;	Done.  'C' clear
 36158                                  
 36159                                  ; 17/12/2022
 36160                                  ;ok_done:
 36161                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36162                                  ;	;jmp	short CommitOk
 36163                                  ;	; 17/12/2022
 36164                                  ;	jmp	SYS_RET_OK
 36165                                  
 36166                                  too_many_files:
 36167                                  	;mov	al,4
 36168 000067E9 B004                    	MOV	AL,error_too_many_open_files
 36169                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36170                                  	;jmp	SYS_RET_ERR
 36171                                  CommitErrorj:
 36172                                  	;jmp	short CommitError
 36173                                  	; 17/12/2022
 36174 000067EB E9569E                  	jmp	SYS_RET_ERR
 36175                                  
 36176                                  ; 17/12/2022 
 36177                                  ok_done:
 36178                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36179                                  	;jmp	short CommitOk
 36180                                  	; 17/12/2022
 36181 000067EE E94A9E                  	jmp	SYS_RET_OK
 36182                                  
 36183                                  enlarge:
 36184                                  	;mov	cx,[32h]
 36185 000067F1 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 36186                                  copy_hand:
 36187 000067F5 89CA                    	MOV	DX,CX
 36188                                  	;lds	si,[34h]
 36189 000067F7 C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 36190 000067FB F3A4                    	REP	MOVSB			; copy infomation to new table
 36191 000067FD 59                      	POP	CX			; get new number of handles
 36192 000067FE 51                      	PUSH	CX			; save it again
 36193 000067FF 29D1                    	SUB	CX,DX			; get the difference
 36194 00006801 B0FF                    	MOV	AL,-1			; set availability to handles
 36195 00006803 F3AA                    	REP	STOSB
 36196 00006805 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 36197                                  	;cmp	word [34h],0
 36198 0000680A 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 36199 0000680F 750D                    	JNZ	short update_info	; yes, go update PDB entries
 36200 00006811 55                      	PUSH	BP
 36201 00006812 1E                      	PUSH	DS			; save old table segment
 36202 00006813 06                      	PUSH	ES			; save new table segment
 36203 00006814 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 36204 00006818 E80EFC                  	call	_$DEALLOC		; deallocate old table meomory
 36205 0000681B 07                      	POP	ES			; restore new table segment
 36206 0000681C 1F                      	POP	DS			; restore old table segment
 36207 0000681D 5D                      	POP	BP
 36208                                  
 36209                                  update_info:
 36210 0000681E F7C50200                	test	BP,2			; psp?
 36211 00006822 7408                    	JZ	short non_psp 		; no
 36212                                  	;mov	word [34h],18h ; 24
 36213 00006824 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 36214 0000682A EB06                    	JMP	short final
 36215                                  non_psp:
 36216                                  	;mov	word [34h],0
 36217 0000682C C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 36218                                  final:
 36219                                  	;mov	[36h],es	
 36220 00006832 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 36221                                  	;pop	word [32h]
 36222 00006836 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 36223                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36224                                  	;jmp	SYS_RET_OK
 36225                                  ok_done_j:
 36226 0000683A EBB2                    	jmp	short ok_done
 36227                                  
 36228                                  no_memory:
 36229 0000683C 5B                      	POP	BX			; clean stack
 36230                                  	;mov	al,8
 36231 0000683D B008                    	MOV	AL,error_not_enough_memory
 36232                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36233                                  	;jmp	SYS_RET_ERR
 36234                                  CommitErrorj2:
 36235 0000683F EBAA                    	jmp	short CommitErrorj
 36236                                  
 36237                                  invalid_func:
 36238                                  	;mov	al,1
 36239 00006841 B001                    	MOV	AL,error_invalid_function
 36240                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36241                                  	;jmp	SYS_RET_ERR
 36242                                  CommitErrorj3:
 36243                                  	;jmp	short CommitErrorj2
 36244                                  	; 17/12/2022
 36245 00006843 EBA6                    	jmp	short CommitErrorj
 36246                                  
 36247                                  ; 20/05/2019 - Retro DOS v4.0
 36248                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 36249                                  
 36250                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36251                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 36252                                  
 36253                                  ;	BREAK <$READ - Read from a file handle>
 36254                                  ;----------------------------------------------------------------------------
 36255                                  ;
 36256                                  ;**	$Read - Read from a File Handle
 36257                                  ;
 36258                                  ;   Assembler usage:
 36259                                  ;
 36260                                  ;	LDS	DX, buf
 36261                                  ;	MOV	CX, count
 36262                                  ;	MOV	BX, handle
 36263                                  ;	MOV	AH, Read
 36264                                  ;	INT	int_command
 36265                                  ;	  AX has number of bytes read
 36266                                  ;
 36267                                  ;	ENTRY	(bx) = file handle
 36268                                  ;		(cx) = byte count
 36269                                  ;		(ds:dx) = buffer address
 36270                                  ;	EXIT	Through system call return so that to user:
 36271                                  ;		  'C' clear if OK
 36272                                  ;		    (ax) = bytes read
 36273                                  ;		  'C' set if error
 36274                                  ;		    (ax) = error code
 36275                                  ;
 36276                                  ;----------------------------------------------------------------------------
 36277                                  
 36278                                  _$READ:
 36279 00006845 BE[0033]                	MOV	SI,DOS_READ
 36280                                  ReadDo:
 36281 00006848 E831FE                  	call	pJFNFromHandle
 36282 0000684B 7208                    	JC	short ReadError
 36283                                  
 36284 0000684D 268A05                  	MOV	AL,[ES:DI]
 36285 00006850 E83E01                  	call	CheckOwner		; get the handle
 36286 00006853 7303                    	JNC	short ReadSetup		; no errors do the operation
 36287                                  
 36288                                  ;	Have an error. 'C' set
 36289                                  
 36290                                  ReadError:
 36291                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36292                                  	;;jmp	SYS_RET_ERR		; go to error traps
 36293                                  	;jmp	short CommitErrorj3
 36294                                  	; 17/12/2022
 36295 00006855 E9EC9D                  	jmp	SYS_RET_ERR
 36296                                  
 36297                                  ReadSetup:
 36298 00006858 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 36299 0000685D 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 36300                                  	; 20/05/2019 - Retro DOS v4.0
 36301                                  	; MSDOS 6.0 
 36302                                  ;; Extended Open
 36303                                  	;test	byte [es:di+3],20h
 36304 00006862 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 36305                                  						 ;AN000;;EO. need i24
 36306 00006867 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 36307 00006869 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 36308                                  					;AN000;;EO. set it off;smr;SS Override
 36309                                  needi24:				;AN000;
 36310                                  ;; Extended Open
 36311 0000686F 36FF36[2C03]            	push	word [SS:DMAADD]
 36312 00006874 36FF36[2E03]            	push	word [SS:DMAADD+2]	;smr;SS Override
 36313                                  
 36314                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36315                                  
 36316                                  	; 26/07/2019
 36317                                  
 36318                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36319                                  	;
 36320                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 36321                                  	; there is not another caller; it is better to put the code in this proc
 36322                                   	; here instead of calling it as a subroutine; but I have modified code
 36323                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 36324                                  
 36325                                  	; MSDOS 6.0
 36326 00006879 E81300                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 36327                                  	
 36328                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36329                                  	; MSDOS 3.3
 36330                                  	;MOV	BX,DX			; copy offset
 36331                                  	;push	cx			; don't stomp on count
 36332                                  	;MOV	CL,4			; bits to shift bytes->para
 36333                                  	;SHR	BX,CL			; get number of paragraphs
 36334                                  	;pop	cx			; get count back
 36335                                  	;MOV	AX,DS			; get original segment
 36336                                  	;ADD	AX,BX			; get new segment
 36337                                  	;MOV	DS,AX			; in seg register
 36338                                  	;AND	DX,0Fh			; normalize offset
 36339                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36340                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36341                                  						;smr;SS Override
 36342                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36343                                  	
 36344 0000687C 16                      	push	ss			; go for DOS addressability
 36345 0000687D 1F                      	pop	ds
 36346                                  
 36347 0000687E FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 36348                                  
 36349 00006880 8F06[2E03]              	pop	word [DMAADD+2]
 36350 00006884 8F06[2C03]              	pop	word [DMAADD]
 36351                                  	;JNC	short READ_OK		;AN002;
 36352                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 36353                                  	; 17/12/2022
 36354 00006888 72CB                    	jc	short ReadError
 36355                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36356                                  	;jnc	short READ_OK		;AN002;
 36357                                  	;jmp	short ReadError
 36358                                  
 36359                                  READ_OK:
 36360 0000688A 89C8                    	MOV	AX,CX			; get correct return in correct reg
 36361                                  Read_Okj:
 36362                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36363                                  	;;jmp	SYS_RET_OK		; successful return
 36364                                  	;jmp	short ok_done_j
 36365                                  	; 17/12/2022
 36366 0000688C E9AC9D                  	jmp	SYS_RET_OK
 36367                                  
 36368                                  ; 13/07/2018 - Retro DOS v3.0
 36369                                  
 36370                                  ;----------------------------------------------------------------------------
 36371                                  
 36372                                  ;   Input: DS:DX points to user's buffer addr
 36373                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 36374                                  ;   Output: [DMAADD] set
 36375                                  
 36376                                  ; 20/05/2019 - Retro DOS v4.0
 36377                                  ; 26/07/2019
 36378                                  ;	; MSDOS 6.0
 36379                                  ;Align_Buffer:
 36380                                  ;	MOV	BX,DX			; copy offset
 36381                                  ;	push	cx			; don't stomp on count
 36382                                  ;	MOV	CL,4			; bits to shift bytes->para
 36383                                  ;	SHR	BX,CL			; get number of paragraphs
 36384                                  ;	pop	cx			; get count back
 36385                                  ;	MOV	AX,DS			; get original segment
 36386                                  ;	ADD	AX,BX			; get new segment
 36387                                  ;	MOV	DS,AX			; in seg register
 36388                                  ;	AND	DX,0Fh			; normalize offset
 36389                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36390                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36391                                  ;						;smr;SS Override
 36392                                  ;	retn
 36393                                  
 36394                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36395                                  Align_Buffer:
 36396 0000688F 89D3                    	MOV	BX,DX			; copy offset
 36397 00006891 51                      	push	cx			; don't stomp on count
 36398 00006892 B104                    	MOV	CL,4			; bits to shift bytes->para
 36399 00006894 D3EB                    	SHR	BX,CL			; get number of paragraphs
 36400 00006896 59                      	pop	cx			; get count back
 36401 00006897 8CD8                    	MOV	AX,DS			; get original segment
 36402 00006899 01D8                    	ADD	AX,BX			; get new segment
 36403 0000689B 8ED8                    	MOV	DS,AX			; in seg register
 36404 0000689D 83E20F                  	AND	DX,0Fh			; normalize offset
 36405 000068A0 368916[2C03]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36406 000068A5 368C1E[2E03]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36407                                  						;smr;SS Override
 36408 000068AA C3                      	retn
 36409                                  
 36410                                  ; 20/05/2019 - Retro DOS v4.0
 36411                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 36412                                  
 36413                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36414                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 36415                                  
 36416                                  ;BREAK <$WRITE - write to a file handle>
 36417                                  ;----------------------------------------------------------------------------
 36418                                  ;
 36419                                  ;   Assembler usage:
 36420                                  ;	    LDS     DX, buf
 36421                                  ;	    MOV     CX, count
 36422                                  ;	    MOV     BX, handle
 36423                                  ;	    MOV     AH, Write
 36424                                  ;	    INT     int_command
 36425                                  ;	  AX has number of bytes written
 36426                                  ;   Errors:
 36427                                  ;	    AX = write_invalid_handle
 36428                                  ;	       = write_access_denied
 36429                                  ;
 36430                                  ;   Returns in register AX
 36431                                  ;
 36432                                  ;----------------------------------------------------------------------------
 36433                                  
 36434                                  _$WRITE:
 36435 000068AB BE[2935]                	MOV	SI,DOS_WRITE
 36436 000068AE EB98                    	JMP	short ReadDo
 36437                                  
 36438                                  ;BREAK <$LSEEK - move r/w pointer>
 36439                                  ;----------------------------------------------------------------------------
 36440                                  ;
 36441                                  ;   Assembler usage:
 36442                                  ;	    MOV     DX, offsetlow
 36443                                  ;	    MOV     CX, offsethigh
 36444                                  ;	    MOV     BX, handle
 36445                                  ;	    MOV     AL, method
 36446                                  ;	    MOV     AH, LSeek
 36447                                  ;	    INT     int_command
 36448                                  ;	  DX:AX has the new location of the pointer
 36449                                  ;   Error returns:
 36450                                  ;	    AX = error_invalid_handle
 36451                                  ;	       = error_invalid_function
 36452                                  ;   Returns in registers DX:AX
 36453                                  ;
 36454                                  ;----------------------------------------------------------------------------
 36455                                  
 36456                                  ; 21/05/2019 - Retro DOS v4.0
 36457                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 36458                                  
 36459                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36460                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 36461                                  
 36462                                  _$LSEEK:
 36463 000068B0 E8DE00                  	call	CheckOwner		; get system file entry
 36464                                  
 36465                                  	; 17/12/2022
 36466                                  ;LSeekError:
 36467                                  	;JNC	short CHKOWN_OK		;AN002;
 36468                                  	;JMP	short ReadError		;AN002; error return
 36469                                  	; 17/12/2022
 36470                                  	; 02/06/2019
 36471 000068B3 72A0                    	jc	short ReadError
 36472                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36473                                  	;JNC	short CHKOWN_OK		;AN002;
 36474                                  	;JMP	short ReadError		;AN002; error return
 36475                                  
 36476                                  CHKOWN_OK:
 36477                                  					;AN002;
 36478 000068B5 3C02                    	CMP	AL,2			; is the seek value correct?
 36479 000068B7 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 36480                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 36481 000068B9 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36482                                  					;smr;SS Override
 36483                                  	;mov	al,1
 36484 000068BF B001                    	mov	al,error_invalid_function ; invalid method
 36485                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36486                                  LSeekError2:
 36487 000068C1 EB92                    	jmp	short ReadError
 36488                                  
 36489                                  LSeekDisp:
 36490 000068C3 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 36491 000068C5 720A                    	JB	short LSeekStore	; just store CX:DX
 36492 000068C7 771B                    	JA	short LSeekEOF		; seek from end of file
 36493                                  	;add	dx,[es:di+21]
 36494 000068C9 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 36495                                  	;adc	cx,[es:di+23]
 36496 000068CD 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 36497                                  LSeekStore:
 36498 000068D1 89C8                    	MOV	AX,CX			; AX:DX
 36499 000068D3 92                      	XCHG	AX,DX			; DX:AX is the correct value
 36500                                  LSeekSetpos:
 36501                                  	;mov	[es:di+21],ax
 36502 000068D4 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 36503                                  	;mov	[es:di+23],dx
 36504 000068D8 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 36505 000068DC E8A69B                  	call	Get_User_Stack
 36506                                  	;mov	[si+6],dx
 36507 000068DF 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 36508                                  	;jmp	SYS_RET_OK		; successful return
 36509                                  	; 25/06/2019
 36510                                  	;jmp	SYS_RET_OK_clc
 36511                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36512                                  	;jmp	SYS_RET_OK_clc
 36513                                  LSeekOk:
 36514 000068E2 EBA8                    	jmp     short Read_Okj
 36515                                  
 36516                                  LSeekEOF:
 36517                                  	;;test	word [es:di+5],8000h
 36518                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36519                                  	; 21/05/2019 - Retro DOS v4.0
 36520 000068E4 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 36521 000068E9 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 36522                                  LOCAL_LSeek:
 36523                                  	;add	dx,[es:di+17]
 36524 000068EB 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 36525                                  	;adc	cx,[es:di+19]
 36526 000068EF 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 36527 000068F3 EBDC                    	JMP	short LSeekStore	; go and set the position
 36528                                  
 36529                                  Check_LSeek_Mode:
 36530                                  	;;test	word [es:di+2],8000h
 36531                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 36532                                  	; 21/05/2019
 36533 000068F5 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 36534 000068FA 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 36535                                  	;mov	ax,[es:di+2]
 36536 000068FC 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 36537                                  	;and	ax, 0F0h
 36538 00006900 25F000                  	AND	AX,SHARING_MASK
 36539                                  	;cmp	ax,40h
 36540 00006903 83F840                  	CMP	AX,SHARING_DENY_NONE
 36541 00006906 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 36542                                  	;cmp	ax,30h
 36543 00006908 83F830                  	CMP	AX,SHARING_DENY_READ
 36544 0000690B 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 36545                                  NET_LSEEK:
 36546                                  ;	JMP	short LOCAL_LSeek
 36547                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 36548                                  	;CallInstall Net_Lseek,MultNET,33
 36549                                  	;JNC	short LSeekSetPos
 36550                                  
 36551 0000690D B82111                  	mov     ax,1121h
 36552 00006910 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 36553                                  			; CX:DX = offset (in bytes) from end
 36554                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 36555                                  			; SS = DOS CS
 36556                                  			; Return: CF set on error
 36557                                  			; CF clear if successful, DX:AX = new file position
 36558 00006912 73C0                    	jnb     short LSeekSetpos
 36559                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36560                                  	;jmp	SYS_RET_ERR
 36561                                  ;LSeekError3:
 36562                                  	; 17/12/2022
 36563                                  LSeekError:
 36564                                  	;jmp	short LSeekError2
 36565                                  DupErr:	; 17/12/2022
 36566 00006914 E92D9D                  	jmp	SYS_RET_ERR
 36567                                  
 36568                                  ;BREAK <FileTimes - modify write times on a handle>
 36569                                  ;----------------------------------------------------------------------------
 36570                                  ;
 36571                                  ;   Assembler usage:
 36572                                  ;	    MOV AH, FileTimes (57H)
 36573                                  ;	    MOV AL, func
 36574                                  ;	    MOV BX, handle
 36575                                  ;	; if AL = 1 then then next two are mandatory
 36576                                  ;	    MOV CX, time
 36577                                  ;	    MOV DX, date
 36578                                  ;	    INT 21h
 36579                                  ;	; if AL = 0 then CX/DX has the last write time/date
 36580                                  ;	; for the handle.
 36581                                  ;
 36582                                  ;	AL=02		 get extended attributes
 36583                                  ;	   BX=handle
 36584                                  ;	   CX=size of buffer (0, return max size )
 36585                                  ;	   DS:SI query list (si=-1, selects all EA)
 36586                                  ;	   ES:DI buffer to hold EA list
 36587                                  ;
 36588                                  ;	AL=03		 get EA name list
 36589                                  ;	   BX=handle
 36590                                  ;	   CX=size of buffer (0, return max size )
 36591                                  ;	   ES:DI buffer to hold name list
 36592                                  ;
 36593                                  ;	AL=04		 set extended attributes
 36594                                  ;	   BX=handle
 36595                                  ;	   ES:DI buffer of EA list
 36596                                  ;
 36597                                  ;
 36598                                  ;   Error returns:
 36599                                  ;	    AX = error_invalid_function
 36600                                  ;	       = error_invalid_handle
 36601                                  ;
 36602                                  ;----------------------------------------------------------------------------
 36603                                  
 36604                                  ; 21/05/2019 - Retro DOS v4.0
 36605                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 36606                                  
 36607                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36608                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 36609                                  
 36610                                  _$FILE_TIMES:
 36611                                  	; 13/07/2018 - Retro DOS v3.0
 36612                                  
 36613                                  	; MSDOS 3.3
 36614                                  	;cmp	al,2			; correct subfunction ?
 36615                                  	;jb	short ft1
 36616                                  
 36617                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 36618                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36619                                  						;SS Overr
 36620                                  	;;mov	al,1
 36621                                  	;mov	al,error_invalid_function ; give bad return
 36622                                  	;jmp	SYS_RET_ERR
 36623                                  
 36624                                  	; MSDOS 6.0
 36625 00006917 3C02                    	cmp	al,2			; correct subfunction ?
 36626 00006919 7340                    	jae	short inval_func
 36627                                  ;ft1:
 36628 0000691B E87300                  	call	CheckOwner		; get sft
 36629                                  	; 17/12/2022
 36630 0000691E 72F4                    	jc	short LSeekError	; bad handle
 36631                                  
 36632 00006920 08C0                    	or	al,al			; get time/date ?
 36633 00006922 7515                    	jnz	short ft_set_time
 36634                                  
 36635                                  ;------ here we get the time & date from the sft for the user
 36636                                  
 36637 00006924 FA                      	cli				; is this cli/sti reqd ? BUGBUG
 36638                                  	;mov	cx,[es:di+13]
 36639 00006925 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 36640                                  	;mov	dx,[es:di+15]
 36641 00006929 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 36642 0000692D FB                      	sti
 36643 0000692E E8549B                  	call	Get_User_Stack
 36644                                  	;mov	[si+4],cx
 36645 00006931 894C04                  	mov	[si+user_env.user_CX],cx
 36646                                  	;mov	[si+6],dx
 36647 00006934 895406                  	mov	[si+user_env.user_DX],dx
 36648 00006937 EB1F                    	jmp	short ok_ret
 36649                                  
 36650                                  ;------ here we set the time in sft
 36651                                  
 36652                                  ft_set_time:
 36653 00006939 E8DAA9                  	call    ECritSFT
 36654                                  	;mov	[es:di+13],cx
 36655 0000693C 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 36656                                  	;mov	[es:di+15],dx
 36657 00006940 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 36658                                  
 36659 00006944 31C0                    	xor	ax, ax
 36660 00006946 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 36661                                  
 36662                                  ;------ set the flags in SFT entry
 36663                                  	;and	word [es:di+5],0FFBFh
 36664                                  	; 18/12/2022
 36665                                  	;and	byte [es:di+5],0BFh
 36666 0000694B 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 36667                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 36668                                  							; mark file as dirty
 36669                                  	;or	word [es:di+5],4000h
 36670                                  	; 17/12/2022
 36671                                  	;or	byte [es:di+6],40h
 36672 00006950 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 36673                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 36674                                  							; ask close not to
 36675                                  							;   bother about date
 36676                                  							;   and time
 36677 00006955 E8D9A9                  	call	LCritSFT
 36678                                  ok_ret:
 36679                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36680                                  	; 17/12/2022
 36681 00006958 E9E09C                  	jmp	SYS_RET_OK
 36682                                  	;jmp	short LSeekOk
 36683                                  
 36684                                  inval_func:
 36685                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36686 0000695B 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36687                                  						;SS Overr
 36688                                  	;mov	al,1
 36689 00006961 B001                    	mov	al,error_invalid_function ; give bad return
 36690                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36691                                  ft_error:
 36692                                  	;;jmp	SYS_RET_ERR
 36693                                  	;jmp	short LSeekError3
 36694                                  	; 17/12/2022
 36695 00006963 EBAF                    	jmp	short LSeekError
 36696                                  
 36697                                  ; 21/05/2019 - Retro DOS v4.0
 36698                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 36699                                  
 36700                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36701                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 36702                                  
 36703                                  ;BREAK <$DUP - duplicate a jfn>
 36704                                  ;----------------------------------------------------------------------------
 36705                                  ;
 36706                                  ;   Assembler usage:
 36707                                  ;	    MOV     BX, fh
 36708                                  ;	    MOV     AH, Dup
 36709                                  ;	    INT     int_command
 36710                                  ;	  AX has the returned handle
 36711                                  ;   Errors:
 36712                                  ;	    AX = dup_invalid_handle
 36713                                  ;	       = dup_too_many_open_files
 36714                                  ;
 36715                                  ;----------------------------------------------------------------------------
 36716                                  
 36717                                  _$DUP:
 36718 00006965 89D8                    	MOV	AX,BX			; save away old handle in AX
 36719 00006967 E86FFD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 36720                                  DupErrorCheck:
 36721 0000696A 72A8                    	JC	short DupErr		; nope, bye
 36722 0000696C 06                      	push	es
 36723 0000696D 57                      	push	di			; save away SFT
 36724 0000696E 5E                      	pop	si			; into convenient place DS:SI
 36725 0000696F 1F                      	pop	ds
 36726 00006970 93                      	XCHG	AX,BX			; get back old handle
 36727 00006971 E81D00                  	call	CheckOwner		; get sft in ES:DI
 36728 00006974 729E                    	JC	short DupErr		; errors go home
 36729 00006976 E8F1C0                  	call	DOS_Dup_Direct
 36730 00006979 E800FD                  	call	pJFNFromHandle		; get pointer
 36731 0000697C 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 36732 0000697F 881C                    	MOV	[SI],BL			; stuff in new SFT
 36733                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36734                                  	;jmp	SYS_RET_OK		; and go home
 36735 00006981 EBD5                    	jmp	short ok_ret
 36736                                  
 36737                                  	; 17/12/2022
 36738                                  ;DupErr:
 36739                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36740                                  	;;jmp	SYS_RET_ERR
 36741                                  	;jmp	short ft_error
 36742                                  
 36743                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 36744                                  ;----------------------------------------------------------------------------
 36745                                  ;
 36746                                  ;   Assembler usage:
 36747                                  ;	    MOV     BX, fh
 36748                                  ;	    MOV     CX, newfh
 36749                                  ;	    MOV     AH, Dup2
 36750                                  ;	    INT     int_command
 36751                                  ;   Error returns:
 36752                                  ;	    AX = error_invalid_handle
 36753                                  ;
 36754                                  ;----------------------------------------------------------------------------
 36755                                  
 36756                                  _$DUP2:
 36757 00006983 53                      	push	bx
 36758 00006984 51                      	push	cx			; save source
 36759 00006985 89CB                    	MOV	BX,CX			; get one to close
 36760 00006987 E8AAFD                  	call	_$CLOSE			; close destination handle
 36761 0000698A 5B                      	pop	bx
 36762 0000698B 58                      	pop	ax			; old in AX, new in BX
 36763 0000698C E8EDFC                  	call	pJFNFromHandle		; get pointer
 36764 0000698F EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 36765                                  
 36766                                  ;Break	<CheckOwner - verify ownership of handles from server>
 36767                                  ;----------------------------------------------------------------------------
 36768                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 36769                                  ;   process without the process knowing it (delete/rename of open files, for
 36770                                  ;   example), it is possible for the redirector to issue a call to a handle
 36771                                  ;   that it soes not rightfully own. We check here to make sure that the
 36772                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 36773                                  ;   SFFromHandle to really make sure that the SFT is good.
 36774                                  ;
 36775                                  ;	ENTRY	BX has the handle
 36776                                  ;		User_ID is the current user
 36777                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 36778                                  ;		Carry Set => AX has error code
 36779                                  ;	USES	none
 36780                                  ;----------------------------------------------------------------------------
 36781                                  
 36782                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36783                                  	; 21/05/2019 - Retro DOS v4.0
 36784                                  CheckOwner:
 36785                                  	; 13/07/2018 - Retro DOS v3.0
 36786                                  
 36787 00006991 E805FD                  	call	SFFromHandle
 36788 00006994 721B                    	jc	short co_ret_label	; retc
 36789                                  
 36790 00006996 50                      	push	ax
 36791                                  
 36792                                  	; MSDOS 6.0
 36793                                  
 36794                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 36795                                  ;SR; are shared across multiple VMs in win386.
 36796                                  
 36797 00006997 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 36798 0000699D 7404                    	jz	short no_win386		;win386 is not present
 36799 0000699F 31C0                    	xor	ax,ax			;set the zero flag
 36800 000069A1 EB08                    	jmp	short _skip_win386	
 36801                                  
 36802                                  no_win386:
 36803 000069A3 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 36804                                  	;cmp	ax,[es:di+47]
 36805 000069A7 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 36806                                  
 36807                                  _skip_win386:
 36808 000069AB 58                      	pop	ax
 36809                                  	
 36810                                  	; 17/12/2022
 36811 000069AC 7403                    	jz	short co_ret_label
 36812                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36813                                  	;jnz	short CheckOwner_err
 36814                                  	;retn
 36815                                  	
 36816                                  CheckOwner_err:
 36817                                  	;mov	al,6
 36818 000069AE B006                    	mov	al,error_invalid_handle
 36819 000069B0 F9                      	stc
 36820                                  
 36821                                  co_ret_label:
 36822 000069B1 C3                      	retn
 36823                                  
 36824                                  ;============================================================================
 36825                                  ; MACRO.ASM, MSDOS 6.0, 1991
 36826                                  ;============================================================================
 36827                                  ; Retro	DOS v3.0 - 11/07/2018
 36828                                  ; 21/05/2019 - Retro DOS v4.0
 36829                                  
 36830                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 36831                                  ;	NAME	MACRO
 36832                                  
 36833                                  ;	Microsoft Confidential
 36834                                  ;	Copyright (C) Microsoft Corporation 1991
 36835                                  ;	All Rights Reserved.
 36836                                  
 36837                                  ;**	MACRO.ASM
 36838                                  ;
 36839                                  ;	$AssignOper
 36840                                  ;	FIND_DPB
 36841                                  ;	InitCDS
 36842                                  ;	$UserOper
 36843                                  ;	GetVisDrv
 36844                                  ;	GetThisDrv
 36845                                  ;	GetCDSFromDrv
 36846                                  ;
 36847                                  ;   Revision history:
 36848                                  ;
 36849                                  ;	Created: MZ 4 April 1983
 36850                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 36851                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 36852                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 36853                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 36854                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 36855                                  ;				    aliasing.
 36856                                  ;
 36857                                  ;   MSDOS performs several types of name translation. First, we maintain for
 36858                                  ;   each valid drive letter the text of the current directory on that drive.
 36859                                  ;   For invalid drive letters, there is no current directory so we pretend to
 36860                                  ;   be at the root. A current directory is either the raw local directory
 36861                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 36862                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 36863                                  ;
 36864                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 36865                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 36866                                  ;   this and all * are expanded into ?'s.
 36867                                  ;
 36868                                  ;   The second part of name translation involves subtree aliasing. A list of
 36869                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 36870                                  ;   the previous 'canonicalization' are then examined to see if any of the
 36871                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 36872                                  ;   replaced with the other subtree in the pair.
 36873                                  ;
 36874                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 36875                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 36876                                  ;   The output of the previous translation is examined to see if any of the
 36877                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 36878                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 36879                                  ;   'mount' one device under another.
 36880                                  ;
 36881                                  ;   The final form of name translation involves the mapping of a user's
 36882                                  ;   logical drive number into the internal physical drive. This is
 36883                                  ;   accomplished by converting the drive number into letter:CON, performing
 36884                                  ;   the above translation and then converting the character back into a drive
 36885                                  ;   number.
 36886                                  ;
 36887                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 36888                                  ;   take a path and form the real text of the pathname with all . and ..
 36889                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 36890                                  ;   TransPath.
 36891                                  ;
 36892                                  ;	A000	version 4.00  Jan. 1988
 36893                                  
 36894                                  ;Installed = TRUE
 36895                                  
 36896                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 36897                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 36898                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 36899                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 36900                                  ;					; current drive)
 36901                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 36902                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 36903                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 36904                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 36905                                  ;	I_need	MYNAME,16		; machine name
 36906                                  ;	I_need	MYNUM,WORD		; machine number
 36907                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 36908                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 36909                                  ;	I_need	DrvErr,BYTE		; drive error
 36910                                  
 36911                                  ;BREAK <$AssignOper -- Set up a Macro>
 36912                                  ;----------------------------------------------------------------------------
 36913                                  ; Inputs:
 36914                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 36915                                  ;	AL = 01 set assign mode 		    (SetMode)
 36916                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 36917                                  ;	AL = 03 Define Macro (attch start)
 36918                                  ;	    BL = Macro type
 36919                                  ;	       = 0 alias
 36920                                  ;	       = 1 file/device
 36921                                  ;	       = 2 drive
 36922                                  ;	       = 3 Char device -> network
 36923                                  ;	       = 4 File device -> network
 36924                                  ;	    DS:SI -> ASCIZ source name
 36925                                  ;	    ES:DI -> ASCIZ destination name
 36926                                  ;	AL = 04 Cancel Macro
 36927                                  ;	    DS:SI -> ASCIZ source name
 36928                                  ;	AL = 05 Modified get attach list entry
 36929                                  ;	AL = 06 Get ifsfunc item
 36930                                  ;	AL = 07 set in_use of a drive's CDS
 36931                                  ;	     DL = drive number, 0=default  0=A,,
 36932                                  ;	AL = 08 reset in_use of a drive's CDS
 36933                                  ;	     DL = drive number, 0=A, 1=B,,,
 36934                                  ; Function:
 36935                                  ;	Do macro stuff
 36936                                  ; Returns:
 36937                                  ;	Std Xenix style error return
 36938                                  ;----------------------------------------------------------------------------
 36939                                  
 36940                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36941                                  	; 21/05/2019 - Retro DOS v4.0
 36942                                  _$AssignOper:
 36943                                  	; MSDOS 6.0
 36944 000069B2 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 36945 000069B4 7525                    	JNZ	short chk08		      ; no			;AN000;
 36946                                  srinuse:								;AN000;
 36947 000069B6 50                      	PUSH	AX			      ; save al 		;AN000;
 36948 000069B7 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 36949 000069B9 E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 36950 000069BC 58                      	POP	AX			      ; 			;AN000;
 36951 000069BD 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 36952                                  	;cmp	word [si+45h],0
 36953 000069BF 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 36954 000069C3 7410                    	JZ	short baddrv		      ;     no			;AN000;
 36955 000069C5 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 36956 000069C7 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 36957                                  	;or	word [si+43h],4000h
 36958                                  	; 17/12/2022
 36959                                  	;or	byte [si+44h],40h
 36960 000069C9 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 36961                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 36962 000069CD EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 36963                                  resetdrv:
 36964                                  	;and	word [si+43h],0BFFFh									;AN000;
 36965                                  	; 18/12/2022
 36966 000069CF 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 36967                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 36968 000069D3 EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 36969                                  
 36970                                  	; 17/12/2022
 36971                                  baddrv: 								;AN000;
 36972 000069D5 B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 36973                                  
 36974                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36975                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 36976                                  	; 17/12/2022
 36977                                  	; 21/05/2019
 36978                                  ASS_ERR:
 36979 000069D8 E9699C                  	jmp	SYS_RET_ERR
 36980                                  
 36981                                  chk08:									;AN000;
 36982 000069DB 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 36983 000069DD 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 36984                                  
 36985                                    ;IF	NOT INSTALLED
 36986                                  	;transfer NET_ASSOPER
 36987                                    ;ELSE
 36988                                  	; MSDOS 3.3 (& MSDOS 6.0)
 36989 000069DF 50                      	PUSH	AX
 36990                                  	;mov	ax,111Eh
 36991                                  	;MOV	AX,(MultNET SHL 8) OR 30
 36992 000069E0 B81E11                  	mov	ax,(MultNET*256)+30
 36993 000069E3 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 36994                                  			; SS = DOS CS
 36995                                  			; STACK: WORD function to execute
 36996                                  			; Return: CF set on error, AX = error code
 36997                                  			; STACK unchanged
 36998 000069E5 5B                      	POP	BX			; Don't zap error code in AX
 36999 000069E6 72F0                    	JC	short ASS_ERR
 37000                                  okdone:
 37001 000069E8 E9509C                  	jmp	SYS_RET_OK
 37002                                  
 37003                                  	; 17/12/2022
 37004                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37005                                  ;ASS_ERR:
 37006                                  	;jmp	SYS_RET_ERR
 37007                                  
 37008                                    ;ENDIF
 37009                                  
 37010                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 37011                                  ;----------------------------------------------------------------------------
 37012                                  ;**	FIND_DPB - Find a DPB from a Drive #
 37013                                  ;
 37014                                  ;	ENTRY	AL has drive number A = 0
 37015                                  ;	EXIT	'C' set
 37016                                  ;		    No DPB for this drive number
 37017                                  ;		'C' clear
 37018                                  ;		    DS:SI points to DPB for drive
 37019                                  ;	USES	SI, DS, Flags
 37020                                  ;----------------------------------------------------------------------------
 37021                                  
 37022                                  	; 21/05/2019 - Retro DOS v4.0
 37023                                  FIND_DPB:
 37024 000069EB 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 37025                                  fdpb5:	
 37026 000069F0 83FEFF                  	CMP	SI,-1
 37027 000069F3 7409                    	JZ	short fdpb10
 37028 000069F5 3A04                    	cmp	al,[si]
 37029                                  	;CMP	AL,[SI+DPB.DRIVE]
 37030 000069F7 7406                    	jz	short ret_label15	; Carry clear (retz)
 37031                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 37032                                  	;lds	si,[si+19h] ; MSDOS 6.0
 37033 000069F9 C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 37034 000069FC EBF2                    	JMP	short fdpb5
 37035                                  fdpb10:	
 37036 000069FE F9                      	STC
 37037                                  ret_label15:
 37038 000069FF C3                      	retn
 37039                                  
 37040                                  ;	Break <InitCDS - set up an empty CDS>
 37041                                  ;----------------------------------------------------------------------------
 37042                                  ;**	InitCDS - Setup an Empty CDS
 37043                                  ;
 37044                                  ;	ENTRY	ThisCDS points to CDS
 37045                                  ;		AL has uppercase drive letter
 37046                                  ;	EXIT	ThisCDS is now empty
 37047                                  ;		(ES:DI) = CDS
 37048                                  ;		'C' set if no DPB associated with drive
 37049                                  ;	USES	AH,ES,DI, Flags
 37050                                  ;----------------------------------------------------------------------------
 37051                                  
 37052                                  ; 21/05/2019 - Retro DOS v4.0
 37053                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 37054                                  
 37055                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37056                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 37057                                  
 37058                                  InitCDS:
 37059                                  	; 19/08/2018
 37060                                  	; 05/08/2018 - Retro DOS v3.0
 37061                                  	; MSDOS 6.0
 37062 00006A00 50                      	push	ax			; save (AL) for caller
 37063 00006A01 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 37064                                  	;mov	word [es:di+67],0
 37065 00006A06 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 37066 00006A0C 2C40                    	SUB	AL,"A"-1                ; A = 1
 37067 00006A0E 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 37068 00006A13 7236                    	JC	short icdsx		; Drive does not map a physical drive
 37069 00006A15 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 37070 00006A16 50                      	PUSH	AX			; save drive number for later
 37071 00006A17 0441                    	add	al,"A"
 37072 00006A19 B43A                    	MOV	AH,':'
 37073 00006A1B 268905                  	mov	[ES:DI],ax
 37074                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 37075                                  	;mov	ax,"\"
 37076                                  	;mov	[es:di+2],ax
 37077                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 37078 00006A1E 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 37079                                  	;or	word [es:di+67],4000h
 37080                                  	;or	byte [es:di+68],40h
 37081 00006A24 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 37082 00006A29 29C0                    	sub	ax,ax
 37083                                  	;MOV	[es:di+73],ax ; 0
 37084 00006A2B 26894549                	MOV	[ES:DI+curdir.ID],ax
 37085                                  	;mov	[es:di+75],ax ; 0
 37086 00006A2F 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 37087 00006A33 B002                    	mov	al,2
 37088                                  	;mov	[es:di+79],aX ; 2
 37089 00006A35 2689454F                	MOV	[ES:DI+curdir.end],ax
 37090 00006A39 58                      	POP	AX			; (al) = drive number
 37091 00006A3A 1E                      	push	ds
 37092 00006A3B 56                      	push	si
 37093 00006A3C E8ACFF                  	call	FIND_DPB
 37094 00006A3F 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 37095                                  	;mov	[es:di+69],si
 37096 00006A41 26897545                	MOV	[ES:DI+curdir.devptr],SI
 37097                                  	;mov	[es:di+71],ds
 37098 00006A45 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 37099                                  icds5:	
 37100 00006A49 5E                      	pop	si
 37101 00006A4A 1F                      	pop	ds
 37102                                  icdsx:	
 37103 00006A4B 58                      	pop	ax
 37104                                  RET45:
 37105 00006A4C C3                      	retn
 37106                                  
 37107                                  ;Break <$UserOper - get/set current user ID (for net)>
 37108                                  ;----------------------------------------------------------------------------
 37109                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 37110                                  ;	maintain this string and do no verifications.
 37111                                  ;
 37112                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 37113                                  ;				      4-printer-set-flags,5-printer-get-flags)
 37114                                  ;		DS:DX is user string pointer (calls 1,2)
 37115                                  ;		ES:DI is user buffer (call 3)
 37116                                  ;		BX is assign index (calls 2,3,4,5)
 37117                                  ;		CX is user number (call 1)
 37118                                  ;		DX is flag word (call 4)
 37119                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 37120                                  ;			and user CX is set to the user number
 37121                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 37122                                  ;		If AL = 5 then DX is flag word
 37123                                  ;----------------------------------------------------------------------------
 37124                                  
 37125                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37126                                  	; 21/05/2019 - Retro DOS v4.0
 37127                                  _$UserOper:
 37128                                  	; 05/08/2018 - Retro DOS v3.0
 37129                                  	; MSDOS 6.0 (& MSDOS 3.3)
 37130 00006A4D 50                      	PUSH	AX
 37131 00006A4E 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 37132 00006A50 58                      	POP	AX
 37133 00006A51 7211                    	JB	short UserGet 		; return to user the string
 37134 00006A53 742E                    	JZ	short UserSet 		; set the current user
 37135 00006A55 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 37136 00006A57 763D                    	JBE	short UserPrint		; yep
 37137                                  	;mov	byte [ss:EXTERR_LOCUS],1
 37138 00006A59 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 37139                                  					; Extended Error Locus
 37140                                  	;error	error_invalid_function	; not 0,1,2,3
 37141                                  	;mov	al,1
 37142 00006A5F B001                    	MOV	AL,error_invalid_function
 37143                                  useroper_error:
 37144                                  	; 17/12/2022
 37145                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37146 00006A61 E9E09B                  	JMP	SYS_RET_ERR
 37147                                  	;jmp	short ASS_ERR
 37148                                  
 37149                                  UserGet:
 37150                                  ; Transfer MYNAME to DS:DX
 37151                                  ; Set Return CX to MYNUM
 37152 00006A64 1E                      	PUSH	DS			; switch registers
 37153 00006A65 07                      	POP	ES
 37154 00006A66 89D7                    	MOV	DI,DX			; destination
 37155 00006A68 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 37156 00006A6D E8159A                  	call	Get_User_Stack
 37157                                  	;mov	[si+4],cx
 37158 00006A70 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 37159 00006A73 16                      	push	ss			; point to DOSDATA
 37160 00006A74 1F                      	pop	ds
 37161 00006A75 BE[0503]                	MOV	SI,MYNAME		; point source to user string
 37162                                  UserMove:
 37163 00006A78 B90F00                  	MOV	CX,15
 37164 00006A7B F3A4                    	REP	MOVSB			; blam.
 37165 00006A7D 31C0                    	XOR	AX,AX			; 16th byte is 0
 37166 00006A7F AA                      	STOSB
 37167                                  UserBye:
 37168 00006A80 E9B89B                  	jmp	SYS_RET_OK		; no errors here
 37169                                  
 37170                                  UserSet:
 37171                                  ; Transfer DS:DX to MYNAME
 37172                                  ; CX to MYNUM
 37173 00006A83 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 37174 00006A88 89D6                    	MOV	SI,DX			; user space has source
 37175 00006A8A 16                      	push	ss
 37176 00006A8B 07                      	pop	es
 37177 00006A8C BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 37178 00006A8F 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 37179 00006A94 EBE2                    	JMP	short UserMove
 37180                                  
 37181                                  UserPrint:
 37182                                  
 37183                                    ;IF NOT Installed
 37184                                    ;	transfer PRINTER_GETSET_STRING
 37185                                    ;ELSE
 37186 00006A96 50                      	PUSH	AX
 37187                                  	;mov	ax,111Fh
 37188                                  	;MOV	AX,(MultNET SHL 8) OR 31
 37189 00006A97 B81F11                  	mov	ax,(MultNET<<8)|31
 37190 00006A9A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 37191                                  			; STACK: WORD function
 37192                                  			; Return: CF set on error, AX = error code
 37193                                  			; STACK unchanged
 37194 00006A9C 5A                      	POP	DX			; Clean stack
 37195                                  	;JNC	short OKPA
 37196 00006A9D 73E1                    	jnc	short UserBye ; 21/05/2019
 37197                                  	; 17/12/2022
 37198 00006A9F EBC0                    	jmp	short useroper_error
 37199                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37200                                  	;jnb     short OKPA
 37201                                  	;jmp     short useroper_error
 37202                                  
 37203                                  	; 17/12/2022
 37204                                  ;OKPA:
 37205                                  ;	jmp	short UserBye
 37206                                  
 37207                                    ;ENDIF
 37208                                  
 37209                                  
 37210                                  ;Break	<GetVisDrv - return visible drive>
 37211                                  ;----------------------------------------------------------------------------
 37212                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 37213                                  ;
 37214                                  ;   Inputs:	AL has drive identifier (0=default)
 37215                                  ;   Outputs:	Carry Set - invalid drive/macro
 37216                                  ;		Carry Clear - AL has physical drive (0=A)
 37217                                  ;		    ThisCDS points to CDS
 37218                                  ;   Registers modified: AL
 37219                                  ;----------------------------------------------------------------------------
 37220                                  
 37221                                  	; 21/05/2019 - Retro DOS v4.0
 37222                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 37223                                  
 37224                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37225                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 37226                                  GetVisDrv:
 37227                                  	; 05/08/2018 - Retro DOS v3.0
 37228                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 37229 00006AA1 E81900                  	CALL	GETTHISDRV		; get inuse drive
 37230 00006AA4 72A6                    	jc	short RET45
 37231 00006AA6 1E                      	push	ds
 37232 00006AA7 56                      	push	si
 37233 00006AA8 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 37234                                  	;test	word [si+67],2000h
 37235                                  	; 17/12/2022
 37236                                  	;test	byte [si+68],20h
 37237 00006AAD F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 37238                                  	;TEST	word [SI+curdir.flags],curdir_splice
 37239 00006AB1 5E                      	pop	si
 37240 00006AB2 1F                      	pop	ds
 37241 00006AB3 7497                    	jz	short RET45		; if not spliced, return OK
 37242                                  	; MSDOS 6.0
 37243                                  	;mov	byte [ss:DrvErr],0Fh
 37244 00006AB5 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 37245 00006ABB F9                      	STC				; signal error
 37246 00006ABC C3                      	retn
 37247                                  
 37248                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 37249                                  ;----------------------------------------------------------------------------
 37250                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 37251                                  ;	macro pointer
 37252                                  ;
 37253                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 37254                                  ;   Outputs:
 37255                                  ;		Carry Set - invalid drive/macro
 37256                                  ;		Carry Clear - AL has physical drive (0=A)
 37257                                  ;		   ThisCDS points to macro
 37258                                  ;   Registers modified: AL
 37259                                  ;----------------------------------------------------------------------------
 37260                                  
 37261                                  	; 21/05/2019 - Retro DOS v4.0
 37262                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 37263                                  
 37264                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37265                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 37266                                  GETTHISDRV:
 37267                                  	; 05/08/2018
 37268                                  	; 12/07/2018 - Retro DOS v3.0
 37269                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 37270                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37271 00006ABD 08C0                    	OR	AL,AL			; are we using default drive?
 37272 00006ABF 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 37273 00006AC1 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 37274                                  	;INC	ax			; Counteract next instruction
 37275                                  	; 04/09/2018
 37276                                  	;inc	al
 37277                                  	; 07/12/2022
 37278 00006AC5 40                      	inc	ax
 37279                                  GTD10:	
 37280                                  	;DEC	AX
 37281                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37282 00006AC6 48                      	dec	ax			; 0 = A
 37283                                  	;dec	al
 37284 00006AC7 1E                      	PUSH	DS			; save world
 37285 00006AC8 56                      	PUSH	SI
 37286                                  	;mov	byte [ss:EXTERR_LOCUS],2
 37287 00006AC9 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 37288 00006ACF 36F606[7205]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 37289 00006AD5 7420                    	JZ	SHORT GTD20		; Logical
 37290 00006AD7 50                      	PUSH	AX
 37291 00006AD8 06                      	PUSH	ES
 37292 00006AD9 57                      	PUSH	DI
 37293 00006ADA 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 37294                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 37295 00006AE1 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 37296 00006AE6 0441                    	ADD	AL,'A'
 37297 00006AE8 E815FF                  	CALL	InitCDS			; InitCDS(c);
 37298                                  	;test	word [es:di+67],4000h
 37299                                  	; 17/12/2022
 37300                                  	;test	byte [es:di+68],40h
 37301 00006AEB 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 37302                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 37303 00006AF0 5F                      	POP	DI
 37304 00006AF1 07                      	POP	ES
 37305 00006AF2 58                      	POP	AX
 37306 00006AF3 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 37307 00006AF5 EB18                    	JMP	SHORT GTDX		; carry clear
 37308                                  GTD20:
 37309 00006AF7 E81800                  	CALL	GetCDSFromDrv
 37310 00006AFA 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 37311                                  	;test	word [si+43h],4000h
 37312                                  	; 17/12/2022
 37313                                  	;test	byte [si+44h],40h
 37314 00006AFC F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37315                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 37316 00006B00 750D                    	JNZ	SHORT GTDX		; carry clear
 37317                                  GTD30:	
 37318                                  	; 21/05/2019
 37319                                  	; MSDOS 6.0
 37320 00006B02 B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 37321 00006B04 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 37322                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 37323 00006B08 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 37324 00006B0E F9                      	STC
 37325                                  GTDX:	
 37326 00006B0F 5E                      	POP	SI			; restore world
 37327 00006B10 1F                      	POP	DS
 37328 00006B11 C3                      	RETN
 37329                                   
 37330                                  
 37331                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 37332                                  ;----------------------------------------------------------------------------
 37333                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 37334                                  ;	pointer, returning an error if the drive number is greater than the
 37335                                  ;	number of CDS's
 37336                                  ;
 37337                                  ;   Inputs:	AL is physical unit # A=0...
 37338                                  ;   Outputs:	Carry Set if Bad Drive
 37339                                  ;		Carry Clear
 37340                                  ;		    DS:SI -> CDS
 37341                                  ;		    [THISCDS] = DS:SI
 37342                                  ;   Registers modified: DS,SI
 37343                                  ;----------------------------------------------------------------------------
 37344                                  
 37345                                  	; 21/05/2019 - Retro DOS v4.0
 37346                                  GetCDSFromDrv:
 37347 00006B12 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 37348                                  	;JB	SHORT GetCDS	; cf=1	; yes, go get the macro
 37349                                  	;STC				; signal error
 37350                                  	;RETN				; bye
 37351                                  	; 23/09/2023
 37352 00006B17 F5                      	cmc	; cf=1 <-> cf=0
 37353 00006B18 7217                    	jc	short GetCDS_retn
 37354                                  GetCDS:
 37355                                  	; 23/09/2023
 37356                                  	;PUSH	BX
 37357 00006B1A 50                      	PUSH	AX
 37358 00006B1B 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 37359                                  	;mov	bl,81 ; MSDOS 3.3
 37360                                  	;mov	bl,88 ; MSDOS 6.0 
 37361                                  	; 23/09/2023
 37362                                  	;MOV	BL,curdir.size		; size in convenient spot
 37363                                  	;MUL	BL			; get net offset
 37364 00006B20 B458                    	mov	ah,curdir.size
 37365 00006B22 F6E4                    	mul	ah
 37366 00006B24 01C6                    	ADD	SI,AX ; *		; convert to true pointer
 37367 00006B26 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 37368 00006B2B 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 37369 00006B30 58                      	POP	AX
 37370                                  	; 23/09/2023
 37371                                  	;POP	BX
 37372                                  	; (cf must be 0 here) ; *
 37373                                  	;CLC				; no error
 37374                                  GetCDS_retn:
 37375 00006B31 C3                      	RETN				; bye!
 37376                                  
 37377                                  ;============================================================================
 37378                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 37379                                  ;============================================================================
 37380                                  ; Retro	DOS v3.0 - 12/07/2018
 37381                                  ; 22/05/2019 - Retro DOS v4.0
 37382                                  
 37383                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 37384                                  ;----------------------------------------------------------------------------
 37385                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 37386                                  ;       gritty substitution.
 37387                                  ;
 37388                                  ;   Inputs:     DS:DX - pointer to FCB
 37389                                  ;               ES:DI - point to destination
 37390                                  ;   Outputs:    Carry Set - invalid path in final map
 37391                                  ;               Carry Clear - FCB has been mapped into ES:DI
 37392                                  ;                   Sattrib is set from possibly extended FCB
 37393                                  ;                   ExtFCB set if extended FCB found
 37394                                  ;   Registers modified: most
 37395                                  ;----------------------------------------------------------------------------
 37396                                  
 37397                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37398                                  TransFCB:
 37399                                  	; 22/05/2019 - Retro DOS v4.0
 37400                                  	; 12/07/2018 - Retro DOS v3.0
 37401                                  	;LocalVar FCBTmp,16
 37402                                  	;ENTER
 37403 00006B32 55                      	push	bp
 37404 00006B33 89E5                    	mov	bp,sp
 37405                                  	;sub	sp,15	; MSDOS 3.3
 37406 00006B35 83EC10                  	sub	sp,16	; MSDOS 6.0
 37407 00006B38 16                      	push	ss
 37408 00006B39 07                      	pop	es
 37409 00006B3A 06                      	push	es
 37410 00006B3B 57                      	push	di
 37411                                  	;lea	di,[bp-15] ; MSDOS 3.3
 37412                                  	;LEA	DI,FCBTmp 
 37413 00006B3C 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 37414 00006B3F 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 37415 00006B45 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 37416 00006B4B E835B1                  	call	GetExtended             ; get FCB, extended or not
 37417                                  	; 06/12/2022
 37418 00006B4E 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 37419 00006B50 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 37420 00006B53 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 37421 00006B57 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 37422                                  GetDrive:
 37423 00006B5D AC                      	lodsb				; get drive byte
 37424 00006B5E E85CFF                  	call	GETTHISDRV
 37425 00006B61 722A                    	jc	short BadPack
 37426 00006B63 E87303                  	call	TextFromDrive           ; convert 0-based drive to text
 37427                                  
 37428                                  ; Scan the source to see if there are any illegal chars
 37429                                  
 37430                                  	;mov	bx,CharType		; load lookup table
 37431 00006B66 B90B00                  	mov	cx,11
 37432 00006B69 56                      	push	si			; back over name, ext
 37433                                  FCBScan:
 37434 00006B6A AC                      	lodsb				; get a byte
 37435                                  	
 37436                                  	; 09/08/2018
 37437                                  	;;xlat	byte [es:bx]
 37438                                  	;es	xlat
 37439                                  
 37440                                  	; 22/05/2019 - Retro DOS v4.0	
 37441 00006B6B E836E5                  	call	GetCharType		; get flags
 37442                                  
 37443                                  	;test	al,8	
 37444 00006B6E A808                    	test	al,FFCB
 37445 00006B70 741B                    	jz	short BadPack
 37446                                  NextCh: 
 37447 00006B72 E2F6                    	loop	FCBScan
 37448 00006B74 5E                      	pop	si
 37449 00006B75 89FB                    	mov	bx,di
 37450 00006B77 E862B5                  	call	PackName                ; crunch the path
 37451 00006B7A 5F                      	pop	di			; get original destination
 37452 00006B7B 07                      	pop	es
 37453 00006B7C 16                      	push	ss			; get DS addressability
 37454 00006B7D 1F                      	pop	ds
 37455                                  	;lea	si,[bp-15] ; MSDOS 3.3
 37456                                  	;LEA	SI,FCBTmp		; point at new pathname
 37457 00006B7E 8D76F0                  	lea	si,[bp-16]
 37458 00006B81 803F00                  	cmp	byte [bx],0
 37459 00006B84 7407                    	jz	short BadPack
 37460 00006B86 55                      	push	bp
 37461 00006B87 E80E00                  	call	TransPathSet            ; convert the path
 37462 00006B8A 5D                      	pop	bp
 37463 00006B8B 7303                    	jnc	short FCBRet		; bye with transPath error code
 37464                                  BadPack:
 37465 00006B8D F9                      	STC
 37466                                  	;mov	al,3
 37467 00006B8E B003                    	MOV     AL,error_path_not_found
 37468                                  FCBRet: 
 37469                                  	;LEAVE
 37470 00006B90 89EC                    	mov	sp,bp
 37471 00006B92 5D                      	pop	bp
 37472                                  TransPath_retn:
 37473 00006B93 C3                      	retn
 37474                                  
 37475                                  ; 12/07/2018 - Retro DOS v3.0
 37476                                  
 37477                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 37478                                  ;----------------------------------------------------------------------------
 37479                                  ;
 37480                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 37481                                  ;       substitution, insertion of current directory and fixing . and ..
 37482                                  ;       entries. Perform splicing. Allow input string to match splice
 37483                                  ;       exactly.
 37484                                  ;
 37485                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 37486                                  ;       matches splice.
 37487                                  ;
 37488                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 37489                                  ;
 37490                                  ;   The following anomalous behaviour is required:
 37491                                  ;
 37492                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 37493                                  ;       Paths on devices are ignored. (truncate to 0-length)
 37494                                  ;       Raw net I/O sets ThisCDS => NULL.
 37495                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 37496                                  ;
 37497                                  ;   Other behaviour:
 37498                                  ;
 37499                                  ;       ThisCDS set up.
 37500                                  ;       FatRead done on local CDS.
 37501                                  ;       ValidateCDS done on local CDS.
 37502                                  ;
 37503                                  ;   Brief flowchart:
 37504                                  ;
 37505                                  ;       if fSharing then
 37506                                  ;           set up DummyCDS (ThisCDS)
 37507                                  ;           canonicalize (sets cMeta)
 37508                                  ;           splice
 37509                                  ;           fatRead
 37510                                  ;           return
 37511                                  ;       if \\ or d:\\ lead then
 37512                                  ;           set up null CDS (ThisCDS)
 37513                                  ;           canonicalize (sets cMeta)
 37514                                  ;           return
 37515                                  ;       if device then
 37516                                  ;           set up dummyCDS (ThisCDS)
 37517                                  ;           canonicalize (sets cMeta)
 37518                                  ;           return
 37519                                  ;       if file then
 37520                                  ;           getCDS (sets (ThisCDS) from name)
 37521                                  ;           validateCDS (may reset current dir)
 37522                                  ;           Copy current dir
 37523                                  ;           canonicalize (set cMeta)
 37524                                  ;           splice
 37525                                  ;           generate correct CDS (ThisCDS)
 37526                                  ;           if local then
 37527                                  ;               fatread
 37528                                  ;           return
 37529                                  ;
 37530                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37531                                  ;               DI - point to buffer in DOSDATA
 37532                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37533                                  ;                   syntax, etc. or user FAILed to I 24.
 37534                                  ;               WFP_Start - points to beginning of buffer
 37535                                  ;               Curr_Dir_End - points to end of current dir in path
 37536                                  ;               DS - DOSDATA
 37537                                  ;   Registers modified: most
 37538                                  ;
 37539                                  ;----------------------------------------------------------------------------
 37540                                  
 37541                                  ; 22/05/2019
 37542                                  ; 13/05/2019 - Retro DOS v4.0
 37543                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 37544                                  
 37545                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37546                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 37547                                  
 37548                                  TransPath:
 37549 00006B94 30C0                    	XOR     AL,AL
 37550 00006B96 EB02                    	JMP     SHORT SetSplice
 37551                                  TransPathSet:
 37552 00006B98 B0FF                    	MOV     AL,-1
 37553                                  SetSplice:
 37554 00006B9A 36A2[4C03]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 37555 00006B9E B0FF                    	MOV     AL,-1
 37556                                  TransPathNoSet:
 37557 00006BA0 36A2[7105]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 37558 00006BA4 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 37559 00006BAA 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 37560 00006BAF 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 37561 00006BB6 16                      	push	ss
 37562 00006BB7 07                      	pop	es
 37563                                  	;lea	bp,[di+134]
 37564 00006BB8 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 37565                                  ;
 37566                                  ; if this is through the server dos call, fsharing is set. We set up a
 37567                                  ; dummy cds and let the operation go.
 37568                                  ;
 37569 00006BBC 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 37570 00006BC2 7435                    	JZ	short CheckUNC		; skip to UNC check
 37571                                  ;
 37572                                  ; ES:DI point to buffer
 37573                                  ;
 37574 00006BC4 E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 37575 00006BC7 E8F3FE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 37576 00006BCA 722A                    	jc	short NoPath
 37577 00006BCC E80A03                  	CALL	TextFromDrive		; drop in new
 37578 00006BCF 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 37579 00006BD2 E83401                  	CALL	Canonicalize            ; copy and canonicalize
 37580 00006BD5 72BC                    	jc	short TransPath_retn	; errors
 37581                                  ;
 37582                                  ; Perform splices for net guys.
 37583                                  ;
 37584 00006BD7 16                      	push	ss
 37585 00006BD8 1F                      	pop	ds
 37586 00006BD9 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 37587 00006BDD F606[7105]FF            	TEST	byte [FSPLICE],-1
 37588 00006BE2 7403                    	JZ	short NoServerSplice
 37589 00006BE4 E83102                  	CALL    Splice
 37590                                  NoServerSplice:
 37591 00006BE7 16                      	push	ss
 37592 00006BE8 1F                      	pop	ds                      ; for FATREAD
 37593 00006BE9 C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 37594 00006BED E826A7                  	call	ECritDisk
 37595 00006BF0 E807EB                  	call	FATREAD_CDS
 37596 00006BF3 E83BA7                  	call	LCritDisk
 37597                                  NoPath:
 37598                                  	;mov	al,3
 37599 00006BF6 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37600 00006BF8 C3                      	retn				; any errors are in Carry flag
 37601                                  
 37602                                  ; Let the network decide if the name is for a spooled device. It will map
 37603                                  ; the name if so.
 37604                                  
 37605                                  CheckUNC:
 37606 00006BF9 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 37607                                  	;CallInstall NetSpoolCheck,MultNET,35
 37608 00006C00 B82311                  	mov	ax,1123h
 37609 00006C03 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 37610                                  			; DS:SI -> ASCIZ filename to canonicalize
 37611                                  			; ES:DI -> 128-byte buffer for qualified name
 37612                                  			; Return: CF set if not resolved
 37613 00006C05 7329                    	JNC	short UNCDone
 37614                                  
 37615                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 37616                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 37617                                  ; input, then the name has been changed to the remote spooler by the above net
 37618                                  ; call. Also, there may be a drive in front of the \\.
 37619                                  
 37620                                  NO_CHECK:
 37621 00006C07 E8B902                  	CALL    DriveFromText		; eat drive letter
 37622 00006C0A 50                      	PUSH    AX                      ; save it
 37623 00006C0B 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 37624 00006C0D E8B1E4                  	call    PATHCHRCMP              ; convert to normal form
 37625 00006C10 86E0                    	XCHG    AH,AL                   ; swap for second byte
 37626 00006C12 E8ACE4                  	call    PATHCHRCMP              ; convert to normal form
 37627 00006C15 751F                    	JNZ	short CheckDevice	; not a path char
 37628 00006C17 38C4                    	CMP     AH,AL                   ; are they same?
 37629 00006C19 751B                    	JNZ	short CheckDevice	; nope
 37630                                  
 37631                                  ; We have a UNC request. We must copy the string up to the beginning of the
 37632                                  ; local machine root path
 37633                                  
 37634 00006C1B 58                      	POP     AX
 37635 00006C1C A5                      	MOVSW                           ; get the lead \\.
 37636                                  UNCCpy:
 37637 00006C1D AC                      	LODSB                           ; get a byte
 37638 00006C1E E84BE4                   	call	UCase                   ;AN000;; convert the char
 37639 00006C21 08C0                    	OR      AL,AL
 37640 00006C23 740E                    	JZ	short UNCTerm		; end of string. All done.
 37641 00006C25 E899E4                  	call    PATHCHRCMP              ; is it a path char?
 37642 00006C28 89FB                    	MOV     BX,DI                   ; backup position
 37643 00006C2A AA                      	STOSB
 37644 00006C2B 75F0                    	JNZ	short UNCCpy		; no, go copy
 37645 00006C2D E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 37646                                  UNCDone:
 37647 00006C30 16                      	push	ss
 37648 00006C31 1F                      	pop	ds
 37649 00006C32 C3                       	retn				; return error code
 37650                                  UNCTerm:
 37651 00006C33 AA                      	STOSB                           ;AN000;
 37652 00006C34 EBFA                    	JMP	short UNCDone		;AN000;
 37653                                  
 37654                                  CheckDevice:
 37655                                  
 37656                                  ; Check DS:SI for device. First eat any path stuff
 37657                                  
 37658 00006C36 58                      	POP     AX                      ; retrieve drive info
 37659 00006C37 803C00                  	CMP     BYTE [SI],0		; check for null file
 37660 00006C3A 7504                    	JNZ	short CheckPath
 37661                                  	;mov	al,2 
 37662 00006C3C B002                    	MOV     AL,error_file_not_found ; bad file error
 37663 00006C3E F9                      	STC                             ; signal error on null input
 37664 00006C3F C3                      	RETN				; bye!
 37665                                  CheckPath:
 37666 00006C40 50                      	push	ax
 37667 00006C41 55                      	push	bp			; save drive number
 37668                                  
 37669                                  
 37670                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37671                                  %if 0
 37672                                  	; MSDOS 6.0
 37673                                  ;;;BUGBUG BUG 10-26-1992 scottq
 37674                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 37675                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 37676                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 37677                                  ;;;end up having a 5D in the opcode's displacement field. The
 37678                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 37679                                  ;;;
 37680                                  ;;;What we do here is do a call to a function that is less than 5Dh
 37681                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 37682                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 37683                                  ;;;
 37684                                  ;;;More info:
 37685                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 37686                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 37687                                  ;;;
 37688                                  	call	no5Dshere
 37689                                  start5Dhack:
 37690                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice         
 37691                                  backfrom5Dhack:
 37692                                  
 37693                                  %endif
 37694                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37695                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 37696 00006C42 E8FED6                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 37697                                  
 37698 00006C45 5D                      	pop	bp
 37699 00006C46 58                      	pop	ax			; get drive letter back
 37700 00006C47 731C                    	JNC	short DoFile		; yes we have a file.
 37701                                  
 37702                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 37703                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 37704                                  ; call.
 37705                                  
 37706 00006C49 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 37707 00006C4F E86BFE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 37708 00006C52 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 37709                                  
 37710                                  ; Now that we have noted that we have a device, we put it into a form that
 37711                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 37712                                  ; string. We relax this to state that if the d:\ is present then the path
 37713                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 37714                                  ; a device.
 37715                                  
 37716 00006C58 E87E02                  	CALL    TextFromDrive
 37717 00006C5B B02F                    	MOV     AL,'/'                  ; path sep.
 37718 00006C5D AA                      	STOSB
 37719 00006C5E E879A5                  	call	StrCpy			; move remainder of string
 37720                                  
 37721 00006C61 F8                      	CLC                             ; everything OK.
 37722 00006C62 16                      	push	ss
 37723 00006C63 1F                      	pop	ds                      ; remainder of OK stuff
 37724                                  DoFile_retn:
 37725 00006C64 C3                      	retn
 37726                                  
 37727                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37728                                  %if 0
 37729                                  
 37730                                  no5Dshere:
 37731                                  	; 10/08/2018
 37732                                  	jmp	CheckThisDevice		; snoop for device
 37733                                  %endif
 37734                                  
 37735                                  ;.erre (no5Dshere - start5Dhack - 5D)
 37736                                  
 37737                                  ; We have a file. Get the raw CDS.
 37738                                  
 37739                                  DoFile:
 37740                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37741                                  
 37742 00006C65 E839FE                  	call	GetVisDrv               ; get proper CDS
 37743                                  	;mov	al,3 
 37744 00006C68 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 37745 00006C6A 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 37746                                  
 37747                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 37748                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 37749                                  ; Use the one that we are going to use (ES:DI).
 37750                                  
 37751                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 37752 00006C6C 1E                      	push	ds
 37753 00006C6D 56                      	push	si
 37754 00006C6E 06                      	push	es
 37755 00006C6F 57                      	push	di
 37756 00006C70 E814D6                  	call	ValidateCDS             ; poke CDS and make everything OK
 37757                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 37758 00006C73 5F                      	pop	di
 37759 00006C74 07                      	pop	es
 37760 00006C75 5E                      	pop	si
 37761 00006C76 1F                      	pop	ds
 37762                                  	;mov	al,3
 37763 00006C77 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37764                                  	;retc				; someone failed an operation
 37765 00006C79 72E9                    	jc	short DoFile_retn
 37766                                  
 37767                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 37768                                  ; current directory. Copy it in.
 37769                                  
 37770 00006C7B 1E                      	push	ds
 37771 00006C7C 56                      	push	si
 37772 00006C7D 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 37773 00006C82 89FB                    	MOV     BX,DI                   ; point to destination
 37774                                  	;add	bx,[si+79] ; MSDOS 6.0
 37775 00006C84 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 37776                                  	;lea	bp,[di+134]
 37777 00006C87 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 37778                                  					;AN000;
 37779 00006C8B E85BA5                  	call	FStrCpy                 ; copy string. ES:DI point to end
 37780 00006C8E 4F                      	DEC     DI                      ; point to NUL byte
 37781                                  
 37782                                  ; Make sure that there is a path char at end.
 37783                                  
 37784 00006C8F B05C                    	MOV     AL,'\'
 37785 00006C91 263845FF                	CMP     [ES:DI-1],AL
 37786 00006C95 7401                    	JZ	short GetOrig
 37787 00006C97 AA                      	STOSB
 37788                                  
 37789                                  ; Now get original string.
 37790                                  
 37791                                  GetOrig:
 37792 00006C98 4F                      	DEC     DI                      ; point to path char
 37793 00006C99 5E                      	pop	si
 37794 00006C9A 1F                      	pop	ds
 37795                                  
 37796                                  ; BX points to the end of the root part of the CDS (at where a path char
 37797                                  ; should be). Now, we decide whether we use this root or extend it with the
 37798                                  ; current directory. See if the input string begins with a leading 
 37800 00006C9B E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 37801 00006C9E 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 37802 00006CA0 08C0                    	OR      AL,AL                   ; end of string?
 37803 00006CA2 7410                    	JZ	short DoCanon		; yes, skip.
 37804                                  ;
 37805                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 37806                                  ; to this root. Make sure that there is a path char there and advance the
 37807                                  ; source string over all leading \'s.
 37808                                  ;
 37809 00006CA4 89DF                    	MOV     DI,BX                   ; back up to root point.
 37810                                  SkipPath:
 37811 00006CA6 AC                      	LODSB
 37812 00006CA7 E817E4                  	call    PATHCHRCMP
 37813 00006CAA 74FA                    	JZ	short SkipPath
 37814 00006CAC 4E                      	DEC     SI
 37815 00006CAD 08C0                    	OR      AL,AL
 37816 00006CAF 7403                    	JZ	short DoCanon
 37817                                  
 37818                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 37819                                  ; for yucks.
 37820                                  
 37821                                  PathAssure:
 37822 00006CB1 B05C                    	MOV     AL,'\'	; 5Ch
 37823 00006CB3 AA                      	STOSB
 37824                                  
 37825                                  ; ES:DI point to the correct spot for canonicalization to begin.
 37826                                  ; BP is the max extent to advance DI
 37827                                  ; BX is the backup limit for ..
 37828                                  
 37829                                  DoCanon:
 37830 00006CB4 E85200                  	CALL    Canonicalize            ; wham.
 37831                                  	;retc				; badly formatted path.
 37832 00006CB7 72AB                    	jc	short DoFile_retn
 37833                                  
 37834                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 37835                                  ; to wfp_start and do string substitution. BP is still the max position in
 37836                                  ; buffer.
 37837                                  
 37838 00006CB9 16                      	push	ss
 37839 00006CBA 1F                      	pop	ds
 37840 00006CBB 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 37841 00006CBF C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 37842 00006CC3 E81B02                  	CALL    PathPref                ; is there a prefix?
 37843 00006CC6 7514                    	JNZ	short DoSplice		; no, do splice
 37844                                  
 37845                                  ; We have a match. Check to see if we ended in a path char.
 37846                                  
 37847 00006CC8 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 37848 00006CCB E8F3E3                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 37849 00006CCE 740C                    	JZ	short DoSplice		; yes, no current dir here.
 37850                                  Pathline:                               ; 2/13/KK
 37851 00006CD0 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 37852 00006CD4 7406                    	JZ	short DoSplice
 37853 00006CD6 47                      	INC     DI                      ; point to after current path char
 37854 00006CD7 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 37855                                  
 37856                                  ; Splice the result.
 37857                                  
 37858                                  DoSplice:
 37859 00006CDC 16                      	push	ss
 37860 00006CDD 1F                      	pop	ds			; back to DOSDATA
 37861 00006CDE 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 37862 00006CE2 31C9                    	XOR     CX,CX
 37863 00006CE4 F606[7105]FF            	TEST	byte [FSPLICE],-1
 37864 00006CE9 7403                    	JZ	short SkipSplice
 37865 00006CEB E82A01                  	CALL    Splice                  ; replaces in place.
 37866                                  SkipSplice:
 37867                                  
 37868                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 37869                                  ; device.
 37870                                  
 37871 00006CEE 16                      	push	ss
 37872 00006CEF 1F                      	pop	ds
 37873 00006CF0 C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 37874                                  	;test	word [es:di+67],8000h
 37875                                  	; 17/12/2022
 37876                                  	;test	byte [es:di+68],80h
 37877 00006CF4 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 37878                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 37879 00006CF9 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 37880 00006CFB E30B                    	JCXZ    Done
 37881 00006CFD E816A6                  	call	ECritDisk
 37882 00006D00 E8F7E9                  	call	FATREAD_CDS
 37883 00006D03 E82BA6                  	call	LCritDisk
 37884                                  	;mov	al, 3
 37885 00006D06 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37886                                  Done:   
 37887 00006D08 C3                      	retn                         ; any errors in carry flag.
 37888                                  
 37889                                  ; 13/07/2018
 37890                                  
 37891                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 37892                                  ;----------------------------------------------------------------------------
 37893                                  ;   Canonicalize - copy path removing . and .. entries.
 37894                                  ;
 37895                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37896                                  ;               ES:DI - point to buffer
 37897                                  ;               BX - backup limit (offset from ES) points to slash
 37898                                  ;               BP - end of buffer
 37899                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37900                                  ;                   syntax, etc.
 37901                                  ;               Carry Clear -
 37902                                  ;                   DS:DI - advanced to end of string
 37903                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 37904                                  ;   Registers modified: AX CX DX (in addition to those above)
 37905                                  ;----------------------------------------------------------------------------
 37906                                  
 37907                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37908                                  
 37909                                  Canonicalize:
 37910                                  
 37911                                  ; We copy all leading path separators.
 37912                                  
 37913 00006D09 AC                      	LODSB                           ;   while (PathChr (*s))
 37914 00006D0A E8B4E3                  	call    PATHCHRCMP
 37915 00006D0D 7507                    	JNZ	short CanonDec
 37916 00006D0F 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 37917 00006D11 7319                    	JAE	short CanonBad		;           goto error;
 37918 00006D13 AA                      	STOSB
 37919 00006D14 EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 37920                                  CanonDec:
 37921 00006D16 4E                      	DEC     SI
 37922                                  
 37923                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 37924                                  ; component (no leading path separators) and ES:DI being the destination
 37925                                  ; buffer.
 37926                                  
 37927                                  CanonLoop:
 37928                                  
 37929                                  ; If we are at the end of the source string, then we need to check to see that
 37930                                  ; a potential drive specifier is correctly terminated with a path sep char.
 37931                                  ; Otherwise, do nothing
 37932                                  
 37933 00006D17 31C0                    	XOR     AX,AX
 37934 00006D19 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 37935 00006D1B 751A                    	JNZ	short DoComponent
 37936 00006D1D 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 37937 00006D22 7505                    	JNZ	short DoTerminate
 37938 00006D24 B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 37939 00006D26 AA                      	STOSB
 37940 00006D27 88E0                    	MOV     AL,AH
 37941                                  DoTerminate:
 37942 00006D29 AA                      	STOSB                           ;           *d++ = 0;
 37943 00006D2A F8                      	CLC                             ;           return (0);
 37944 00006D2B C3                      	retn
 37945                                  
 37946                                  CanonBad:
 37947 00006D2C E8CB01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 37948                                  	;mov	al,3
 37949 00006D2F B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 37950 00006D31 7402                    	JZ	short PathEnc		; path character encountered in string
 37951                                  	;mov	al,2
 37952 00006D33 B002                    	MOV     AL,error_file_not_found ; Set bad file error
 37953                                  PathEnc:
 37954 00006D35 F9                      	STC
 37955                                  CanonBad_retn:
 37956 00006D36 C3                      	retn
 37957                                  
 37958                                  ; We have a textual component that we must copy. We uppercase it and truncate
 37959                                  ; it to 8.3
 37960                                  
 37961                                  DoComponent:                            ;           }
 37962 00006D37 E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 37963 00006D3A 72FA                    	jc	short CanonBad_retn	;           return (-1);
 37964                                  
 37965                                  ; We special case the . and .. cases.  These will be backed up.
 37966                                  
 37967                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 37968 00006D3C 26833D2E                	CMP	WORD [ES:DI],002Eh
 37969 00006D40 7408                    	JZ	short Skip1
 37970                                  	;CMP	WORD PTR ES:[DI],'..'
 37971 00006D42 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 37972 00006D47 750A                    	JNZ	short CanonNormal
 37973 00006D49 4F                      	DEC     DI                      ;           d--;
 37974                                  Skip1:  
 37975 00006D4A E82A00                  	CALL    SkipBack                ;           SkipBack ();
 37976                                  	;mov	al,3
 37977 00006D4D B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37978 00006D4F 72E5                    	jc	short CanonBad_retn
 37979 00006D51 EB02                    	JMP     short CanonPath         ;           }
 37980                                  
 37981                                  ; We have a normal path. Advance destination pointer over it.
 37982                                  
 37983                                  CanonNormal:                            ;       else
 37984 00006D53 01CF                    	ADD     DI,CX                   ;           d += ct;
 37985                                  
 37986                                  ; We have successfully copied a component. We are now pointing at a path
 37987                                  ; sep char or are pointing at a nul or are pointing at something else.
 37988                                  ; If we point at something else, then we have an error.
 37989                                  
 37990                                  CanonPath:
 37991 00006D55 E81600                  	CALL    PathSep
 37992 00006D58 75D2                    	JNZ	short CanonBad		; something else...
 37993                                  
 37994                                  ; Copy the first path char we see.
 37995                                  
 37996 00006D5A AC                      	LODSB                           ; get the char
 37997 00006D5B E863E3                  	call    PATHCHRCMP              ; is it path char?
 37998 00006D5E 75B6                    	JNZ	short CanonDec		; no, go test for nul
 37999 00006D60 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 38000 00006D62 73C8                    	JAE	short CanonBad		; yep, error.
 38001 00006D64 AA                      	STOSB                           ; copy the one byte
 38002                                  
 38003                                  ; Skip all remaining path chars
 38004                                  
 38005                                  CanonPathLoop:
 38006 00006D65 AC                      	LODSB                           ; get next byte
 38007 00006D66 E858E3                  	call    PATHCHRCMP              ; path char again?
 38008 00006D69 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 38009 00006D6B 4E                      	DEC     SI                      ; back up
 38010 00006D6C EBA9                    	JMP	short  CanonLoop	; go copy component
 38011                                  
 38012                                  ;BREAK <PathSep - determine if char is a path separator>
 38013                                  ;----------------------------------------------------------------------------
 38014                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 38015                                  ;   Inputs:     DS:SI - point to a char
 38016                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 38017                                  ;               Zero set if AL is / \ or NUL
 38018                                  ;               Zero reset otherwise
 38019                                  ;   Registers modified: AL
 38020                                  ;----------------------------------------------------------------------------
 38021                                  
 38022                                  PathSep:
 38023 00006D6E 8A04                    	MOV     AL,[SI]                 ; get the character
 38024                                  PathSepGotCh:				; already have character
 38025 00006D70 08C0                    	OR      AL,AL                   ; test for zero
 38026 00006D72 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 38027                                  	;call	PATHCHRCMP              ; check for path character
 38028                                  	;retn				; and return HIS determination
 38029                                  	; 18/12/2022
 38030 00006D74 E94AE3                  	jmp	PATHCHRCMP
 38031                                  
 38032                                  
 38033                                  ;BREAK <SkipBack - move backwards to a path separator>
 38034                                  ;----------------------------------------------------------------------------
 38035                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 38037                                  ;               BX has current directory back up limit (point to a / \)
 38038                                  ;   Outputs:    ES:DI backed up to point to a path char
 38039                                  ;               AL has char from output ES:DI (path sep if carry clear)
 38040                                  ;               Carry set if illegal backup
 38041                                  ;               Carry Clear if ok
 38042                                  ;   Registers modified: DI,AL
 38043                                  ;----------------------------------------------------------------------------
 38044                                  
 38045                                  SkipBack:
 38046 00006D77 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 38047 00006D79 720B                    	JB	short SkipBad		;       if (d < dlim)
 38048 00006D7B 4F                      	DEC     DI                      ;           goto err;
 38049 00006D7C 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 38050 00006D7F E83FE3                  	call    PATHCHRCMP              ;           break;
 38051 00006D82 75F3                    	JNZ	short SkipBack		;       }
 38052 00006D84 F8                      	CLC                             ;   return (0);
 38053 00006D85 C3                      	retn				;
 38054                                  SkipBad:                                ;err:
 38055                                  	;mov	al,3
 38056 00006D86 B003                    	MOV     AL,error_path_not_found ; bad path error
 38057 00006D88 F9                      	STC                             ;   return (-1);
 38058 00006D89 C3                      	retn				;
 38059                                  
 38060                                  ;Break <CopyComponent - copy out a file path component>
 38061                                  ;----------------------------------------------------------------------------
 38062                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 38063                                  ;
 38064                                  ;   Inputs:     DS:SI - source path
 38065                                  ;               ES:DI - destination
 38066                                  ;               ES:BP - end of buffer
 38067                                  ;   Outputs:    Carry Set - too long
 38068                                  ;               Carry Clear - DS:SI moved past component
 38069                                  ;                   CX has length of destination
 38070                                  ;   Registers modified: AX,CX,DX
 38071                                  ;----------------------------------------------------------------------------
 38072                                  
 38073                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38074                                  
 38075                                  CopyComponent:
 38076                                  
 38077                                  %define CopyBP	 [BP]		; word
 38078                                  %define CopyD	 [BP+2]		; dword
 38079                                  %define CopyDoff [BP+2]		; word
 38080                                  %define CopyS	 [BP+6]		; dword
 38081                                  %define CopySoff [BP+6]		; word
 38082                                  %define CopyTemp [BP+10]	; byte
 38083                                  
 38084 00006D8A 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 38085 00006D8D 1E                      	push	ds
 38086 00006D8E 56                      	push	si
 38087 00006D8F 06                      	push	es
 38088 00006D90 57                      	push	di
 38089 00006D91 55                      	push	bp
 38090 00006D92 89E5                    	MOV     BP,SP
 38091 00006D94 B42E                    	MOV     AH,'.'
 38092 00006D96 AC                      	LODSB
 38093 00006D97 AA                      	STOSB
 38094 00006D98 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 38095 00006D9A 7518                    	JNZ	short NormalComp
 38096 00006D9C E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 38097 00006D9F 740B                    	JZ	short NulTerm
 38098                                  TryTwoDot:
 38099 00006DA1 AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 38100 00006DA2 AA                      	STOSB
 38101 00006DA3 38E0                    	CMP     AL,AH
 38102 00006DA5 7557                    	JNZ	short CopyBad
 38103 00006DA7 E8C4FF                  	CALL    PathSep
 38104 00006DAA 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 38105                                  NulTerm:                                ;               return -1;
 38106 00006DAC 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 38107 00006DAE AA                      	STOSB
 38108 00006DAF 897606                  	MOV     CopySoff,SI
 38109 00006DB2 EB47                    	JMP     SHORT _GoodRet		;       }
 38110                                  NormalComp:                             ;   else {
 38111 00006DB4 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 38112 00006DB7 E845E2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 38113 00006DBA 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 38114 00006DBD 743F                    	JZ	short CopyBad		;           return (-1);
 38115 00006DBF 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 38116 00006DC5 7510                    	JNZ	short DoPack
 38117 00006DC7 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 38118 00006DCA 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 38119 00006DCF 7F2D                    	JG	short CopyBad		;               return (-1);
 38120 00006DD1 7504                    	JNZ	short DoPack		;           else
 38121 00006DD3 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 38122 00006DD5 742F                    	JZ	short CopyBadPath	;               return (-1);
 38123                                  DoPack:                                 ;           }
 38124 00006DD7 897606                  	MOV     CopySoff,SI ; [bp+6]
 38125 00006DDA 16                      	push	ss
 38126 00006DDB 1F                      	pop	ds
 38127 00006DDC BE[4B05]                	MOV     SI,NAME1
 38128 00006DDF 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 38129 00006DE2 57                      	push	di
 38130 00006DE3 E8F6B2                  	call	PackName                ;       PackName (Name1, temp);
 38131 00006DE6 5F                      	pop	di
 38132 00006DE7 E808A4                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 38133 00006DEA 49                      	DEC     CX
 38134 00006DEB 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 38135                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38136                                  	;cmp	cx,[bp+0]
 38137                                  	; 15/12/2022
 38138                                  	;cmp	cx,[bp]
 38139 00006DEE 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 38140 00006DF1 730B                    	JAE	short CopyBad		;           return (-1);
 38141 00006DF3 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 38142 00006DF5 C47E02                  	LES     DI,CopyD    ; [bp+2]	
 38143 00006DF8 E8EEA3                  	call	FStrCpy
 38144                                  _GoodRet:				;       }
 38145 00006DFB F8                      	CLC
 38146 00006DFC EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 38147                                  CopyBad:
 38148 00006DFE F9                      	STC
 38149 00006DFF E8F800                  	CALL    ScanPathChar            ; check for path chars in rest of string
 38150                                  	;mov	al,2
 38151 00006E02 B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 38152 00006E04 7503                    	JNZ	short CopyEnd
 38153                                  CopyBadPath:
 38154 00006E06 F9                      	STC
 38155                                  	;mov	al,3
 38156 00006E07 B003                    	MOV     AL,error_path_not_found ; Set bad path error
 38157                                  CopyEnd:
 38158 00006E09 5D                      	pop	bp
 38159 00006E0A 5F                      	pop	di
 38160 00006E0B 07                      	pop	es
 38161 00006E0C 5E                      	pop	si
 38162 00006E0D 1F                      	pop	ds
 38163 00006E0E 9F                      	LAHF
 38164 00006E0F 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 38165 00006E12 E8DDA3                  	call	StrLen
 38166 00006E15 49                      	DEC     CX
 38167 00006E16 9E                      	SAHF
 38168 00006E17 C3                      	retn
 38169                                  
 38170                                  ; 14/05/2019 - Retro DOS v4.0
 38171                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 38172                                  
 38173                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38174                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 38175                                  
 38176                                  ;Break <Splice - pseudo mount by string substitution>
 38177                                  ;----------------------------------------------------------------------------
 38178                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 38179                                  ;       ThisCDS to point to physical drive CDS.
 38180                                  ;   Inputs:     DS:SI point to string
 38181                                  ;               NoSetDir = TRUE => exact matches with splice fail
 38182                                  ;   Outputs:    DS:SI points to thisCDS
 38183                                  ;               ES:DI points to DPB
 38184                                  ;               String at DS:SI may be reduced in length by removing prefix
 38185                                  ;               and substituting drive letter.
 38186                                  ;               CX = 0 If no splice done
 38187                                  ;               CX <> 0 otherwise
 38188                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 38189                                  ;                   left alone
 38190                                  ;               ThisDPB points to proper DPB
 38191                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 38192                                  ;----------------------------------------------------------------------------
 38193                                  
 38194                                  Splice:
 38195 00006E18 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 38196 00006E1E 7469                    	JZ	short AllDone
 38197 00006E20 36FF36[A205]            	push	word [SS:THISCDS]
 38198 00006E25 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 38199 00006E2A 1E                      	push	ds
 38200 00006E2B 56                      	push	si
 38201 00006E2C 5F                      	pop	di
 38202 00006E2D 07                      	pop	es
 38203 00006E2E 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 38204                                  SpliceScan:
 38205 00006E30 E8DFFC                  	call	GetCDSFromDrv
 38206 00006E33 724A                    	JC	short SpliceDone
 38207 00006E35 FEC0                    	INC     AL
 38208                                  	; 17/12/2022
 38209                                  	;test	byte [si+68],20h
 38210 00006E37 F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 38211                                  	;;test	word [si+67],2000h
 38212                                  	;TEST	word [SI+curdir.flags],curdir_splice
 38213 00006E3B 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 38214 00006E3D 57                      	push	di
 38215 00006E3E E8A000                  	CALL    PathPref                ;           if (!PathPref (s, d))
 38216 00006E41 7403                    	JZ	short SpliceFound	;
 38217                                  SpliceSkip:
 38218 00006E43 5F                      	pop	di
 38219 00006E44 EBEA                    	JMP	short SpliceScan	;               continue;
 38220                                  SpliceFound:
 38221 00006E46 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 38222 00006E4A 7508                    	JNZ	short SpliceDo
 38223 00006E4C 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 38224 00006E52 75EF                    	JNZ	short SpliceSkip
 38225                                  SpliceDo:
 38226 00006E54 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 38227 00006E56 06                      	push	es
 38228 00006E57 1F                      	pop	ds
 38229 00006E58 5F                      	pop	di
 38230 00006E59 E87F00                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 38231 00006E5C 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 38232 00006E60 09C0                    	OR      AX,AX
 38233 00006E62 7808                    	JS	short NoPoke
 38234 00006E64 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 38235 00006E66 29F0                    	SUB     AX,SI
 38236 00006E68 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 38237                                  NoPoke:
 38238 00006E6C 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 38239 00006E6F 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 38240 00006E71 B05C                    	MOV     AL,"\"
 38241 00006E73 AA                      	STOSB
 38242                                  SpliceCopy:                             ;               strcpy (src, p);
 38243 00006E74 E872A3                  	call	FStrCpy
 38244 00006E77 83C404                  	ADD     SP,4                    ; throw away saved stuff
 38245 00006E7A 80C901                  	OR      CL,1                    ; signal splice done.
 38246 00006E7D EB0C                    	JMP     SHORT DoSet             ;               return;
 38247                                  SpliceDone:                             ;               }
 38248 00006E7F 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 38249 00006E84 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 38250                                  AllDone:
 38251 00006E89 31C9                    	XOR     CX,CX
 38252                                  DoSet:
 38253 00006E8B 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 38254                                  	;les	di,[si+69]
 38255 00006E90 C47C45                  	LES     DI,[SI+curdir.devptr]	
 38256 00006E93 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 38257 00006E98 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 38258                                  Splice_retn:
 38259 00006E9D C3                      	retn
 38260                                  
 38261                                  ; 15/05/2019 - Retro DOS v4.0
 38262                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 38263                                  
 38264                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38265                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 38266                                  
 38267                                  ;Break <$NameTrans - partially process a name>
 38268                                  ;----------------------------------------------------------------------------
 38269                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 38270                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 38271                                  ;   to Transpath playing games with devices, we need to insure that the output
 38272                                  ;   has drive letter and : in it.
 38273                                  ;
 38274                                  ;   Inputs:     DS:SI - source string for translation
 38275                                  ;               ES:DI - pointer to buffer
 38276                                  ;   Outputs:
 38277                                  ;       Carry Clear
 38278                                  ;               Buffer at ES:DI is filled in with data
 38279                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 38280                                  ;       Carry Set
 38281                                  ;               AX = error_path_not_found
 38282                                  ;   Registers modified: all
 38283                                  ;----------------------------------------------------------------------------
 38284                                  
 38285                                  _$NameTrans:
 38286 00006E9E 1E                      	push	ds
 38287 00006E9F 56                      	push	si
 38288 00006EA0 06                      	push	es
 38289 00006EA1 57                      	push	di
 38290 00006EA2 51                      	push	cx ; MSDOS 6.0
 38291                                  	
 38292                                  	; MSDOS 6.0	
 38293                                  ; M027 - Start
 38294                                  ;
 38295                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 38296                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 38297                                  ; device if the old call set the volume attribute bit. Note that devname in
 38298                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 38299                                  ; and restore CX.
 38300                                  
 38301                                  	;mov	ch,16h
 38302 00006EA3 B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 38303 00006EA5 E8B902                  	call	SetAttrib
 38304                                  
 38305                                  ; M027 - End
 38306                                  
 38307                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38308 00006EA8 BF[BE03]                	MOV     DI,OPENBUF
 38309 00006EAB E8E6FC                  	CALL    TransPath               ; to translation (everything)
 38310 00006EAE 59                      	pop	cx ; MSDOS 6.0
 38311 00006EAF 5F                      	pop     di
 38312 00006EB0 07                      	pop	es
 38313 00006EB1 5E                      	pop     si
 38314 00006EB2 1F                      	pop     ds
 38315 00006EB3 7303                    	JNC	short TransOK
 38316 00006EB5 E98C97                  	jmp	SYS_RET_ERR
 38317                                  TransOK:
 38318 00006EB8 BE[BE03]                	MOV     SI,OPENBUF
 38319 00006EBB 16                      	push	ss
 38320 00006EBC 1F                      	pop	ds
 38321                                  ;GotText:
 38322 00006EBD E829A3                  	call	FStrCpy
 38323 00006EC0 E97897                  	jmp	SYS_RET_OK
 38324                                  
 38325                                  ;Break   <DriveFromText - return drive number from a text string>
 38326                                  ;----------------------------------------------------------------------------
 38327                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 38328                                  ;   pointer.
 38329                                  ;
 38330                                  ;   Inputs:     DS:SI point to a text string
 38331                                  ;   Outputs:    AL has drive number
 38332                                  ;               DS:SI advanced
 38333                                  ;   Registers modified: AX,SI.
 38334                                  ;----------------------------------------------------------------------------
 38335                                  
 38336                                  DriveFromText:
 38337 00006EC3 30C0                    	XOR     AL,AL                   ;       drive = 0;
 38338                                  	;CMP	BYTE [SI],0		;       if (*s &&
 38339                                  	; 23/09/2023
 38340 00006EC5 3804                    	cmp	[si],al ; 0
 38341 00006EC7 74D4                    	jz	short Splice_retn
 38342 00006EC9 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 38343 00006ECD 75CE                    	jnz	short Splice_retn
 38344 00006ECF AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 38345 00006ED0 0C20                    	OR      AL,20h
 38346                                  	;sub	al,60h
 38347 00006ED2 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 38348 00006ED4 75C7                    	jnz	short Splice_retn
 38349 00006ED6 B0FF                    	MOV	AL,-1                   ; nuke AL...
 38350                                  	; 23/09/2023
 38351                                  	;dec	al ; -1
 38352 00006ED8 C3                      	retn				;           }
 38353                                  
 38354                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 38355                                  ;----------------------------------------------------------------------------
 38356                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 38357                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 38358                                  ;
 38359                                  ;   Inputs:     AL has 0-based drive number
 38360                                  ;   Outputs:    ES:DI advanced
 38361                                  ;   Registers modified: AX
 38362                                  ;----------------------------------------------------------------------------
 38363                                  
 38364                                  TextFromDrive:
 38365 00006ED9 FEC0                    	INC     AL
 38366                                  TextFromDrive1:
 38367                                  	;add	al,40h
 38368 00006EDB 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 38369 00006EDD B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 38370 00006EDF AB                      	STOSW
 38371                                  PathPref_retn:
 38372 00006EE0 C3                      	retn
 38373                                  
 38374                                  ;Break   <PathPref - see if one path is a prefix of another>
 38375                                  ;----------------------------------------------------------------------------
 38376                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 38377                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 38378                                  ;   prefix: A:\ and A:\FOO
 38379                                  ;
 38380                                  ;   Inputs:     DS:SI potential prefix
 38381                                  ;               ES:DI string
 38382                                  ;   Outputs:    Zero set => prefix found
 38383                                  ;                   DI/SI advanced past matching part
 38384                                  ;               Zero reset => no prefix, DS/SI garbage
 38385                                  ;   Registers modified: CX
 38386                                  ;----------------------------------------------------------------------------
 38387                                  
 38388                                  PathPref:
 38389 00006EE1 E81CA3                  	call	DStrLen                 ; get length
 38390 00006EE4 49                      	DEC     CX                      ; do not include nul byte
 38391 00006EE5 F3A6                    	REPZ    CMPSB                   ; compare
 38392 00006EE7 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 38393 00006EE9 50                      	push	ax			; save char register
 38394 00006EEA 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 38395 00006EED E8D1E1                  	call    PATHCHRCMP              ; is it a path char (Root!)
 38396 00006EF0 7406                    	JZ	short Prefix		; yes, match root (I hope)
 38397                                  NotSep:                                 ; 2/13/KK
 38398 00006EF2 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 38399 00006EF5 E878FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 38400                                  Prefix:
 38401 00006EF8 58                      	pop	ax			; get back original
 38402 00006EF9 C3                      	retn
 38403                                  
 38404                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 38405                                  ;----------------------------------------------------------------------------
 38406                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 38407                                  ;     a path separator.
 38408                                  ;
 38409                                  ;     Input:    DS:SI target string (null terminated)
 38410                                  ;     Output:   Zero set => path separator encountered in string
 38411                                  ;               Zero clear => null encountered
 38412                                  ;     Registers modified: SI
 38413                                  ;----------------------------------------------------------------------------
 38414                                  
 38415                                  ScanPathChar:
 38416 00006EFA AC                      	LODSB                           ; fetch a character
 38417 00006EFB E872FE                  	call    PathSepGotCh
 38418 00006EFE 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 38419                                  	;call	PATHCHRCMP              ; path separator?
 38420                                  	;retn
 38421                                  	; 18/12/2022
 38422 00006F00 E9BEE1                  	jmp	PATHCHRCMP
 38423                                  
 38424                                  ;============================================================================
 38425                                  ; FILE.ASM, MSDOS 6.0, 1991
 38426                                  ;============================================================================
 38427                                  ; 14/07/2018 - Retro DOS v3.0
 38428                                  
 38429                                  ; 13/05/2019 - Retro DOS v4.0
 38430                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 38431                                  
 38432                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38433                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 38434                                  
 38435                                  ; MSDOS 2.11
 38436                                  ;BREAK <$Open - open a file handle>
 38437                                  ;----------------------------------------------------------------------------
 38438                                  ;   Assembler usage:
 38439                                  ;           LDS     DX, Name
 38440                                  ;           MOV     AH, Open
 38441                                  ;           MOV     AL, access
 38442                                  ;           INT     int_command
 38443                                  ;
 38444                                  ;       ACCESS          Function
 38445                                  ;       ------          --------
 38446                                  ;       open_for_read   file is opened for reading
 38447                                  ;       open_for_write  file is opened for writing
 38448                                  ;       open_for_both   file is opened for both reading and writing.
 38449                                  ;
 38450                                  ;   Error returns:
 38451                                  ;           AX = error_invalid_access
 38452                                  ;              = error_file_not_found
 38453                                  ;              = error_access_denied
 38454                                  ;              = error_too_many_open_files
 38455                                  ;----------------------------------------------------------------------------
 38456                                  
 38457                                  ; MSDOS 6.0
 38458                                  ;	BREAK <$Open - open a file from a path string>
 38459                                  ;----------------------------------------------------------------------------
 38460                                  ;
 38461                                  ;**	$OPen - Open a File
 38462                                  ;
 38463                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 38464                                  ;	file and and returns a handle
 38465                                  ;
 38466                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 38467                                  ;		(AL) = open mode
 38468                                  ;	EXIT	'C' clear if OK
 38469                                  ;		  (ax) = file handle
 38470                                  ;		'C' set if error
 38471                                  ;		  (ax) = error code
 38472                                  ;	USES	all
 38473                                  ;
 38474                                  ;----------------------------------------------------------------------------
 38475                                  
 38476                                  ; 13/05/2019 - Retro DOS v4.0
 38477                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38478                                  
 38479                                  _$OPEN:       
 38480 00006F03 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 38481                                  _$Open2:
 38482                                  	;mov	ch,16h
 38483 00006F05 B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 38484 00006F07 E85702                  	call	SetAttrib
 38485 00006F0A B9[A02B]                	mov	cx,DOS_OPEN
 38486                                  
 38487                                  	;xor	ah,ah  ; MSDOS 3.3
 38488                                  
 38489 00006F0D 50                      	push	ax
 38490                                  
 38491                                  ;*	General file open/create code. The $CREATE call and the various
 38492                                  ;	$OPEN calls all come here.
 38493                                  ;
 38494                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 38495                                  ;	path names, etc., and then dispatch to our individual handlers.
 38496                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 38497                                  ;
 38498                                  ;	(TOS) = create mode
 38499                                  ;	(CX) = address of routine to call to do actual function
 38500                                  ;	(DS:DX) = ASCIZ name
 38501                                  ;	SAttrib = Attribute mask
 38502                                  
 38503                                  ;	Get a free SFT and mark it "being allocated"
 38504                                  
 38505                                  AccessFile:
 38506 00006F0E E805A4                  	call	ECritSFT
 38507 00006F11 E8D8F7                  	call	SFNFree			; get a free sfn
 38508 00006F14 E81AA4                  	call	LCritSFT
 38509 00006F17 7214                    	jc	short OpenFailJ		; oops, no free sft's
 38510 00006F19 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 38511 00006F1E 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 38512 00006F23 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 38513                                  
 38514                                  ;	Find a free area in the user's JFN table.
 38515                                  
 38516 00006F28 E8AEF7                  	call	JFNFree			; get a free jfn
 38517 00006F2B 7303                    	jnc	short SaveJFN
 38518                                  OpenFailJ:
 38519 00006F2D E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 38520                                  
 38521                                  SaveJFN:
 38522 00006F30 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 38523 00006F35 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 38524 00006F3A 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 38525                                  
 38526                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 38527                                  ;	reusing the same JFN.
 38528                                  
 38529 00006F3F 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 38530 00006F44 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 38531 00006F47 89D6                    	MOV	SI,DX			; get name in appropriate place
 38532 00006F49 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38533 00006F4C 51                      	push	cx			; save routine to call
 38534 00006F4D E844FC                  	call	TransPath		; convert the path
 38535 00006F50 5B                      	pop	bx			; (bx) = routine to call
 38536                                  
 38537 00006F51 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 38538 00006F56 720A                    	JC	short OpenCleanJ	; no error, go and open file
 38539 00006F58 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 38540 00006F5E 7404                    	JZ	short SetSearch
 38541                                  	;mov	al,2
 38542 00006F60 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 38543                                  OpenCleanJ:
 38544 00006F62 EB50                    	JMP	short OpenClean
 38545                                  
 38546                                  SetSearch:
 38547 00006F64 58                      	pop	ax			; Mode (Open), Attributes (Create)
 38548                                  
 38549                                  ;	We need to get the new inheritance bits.
 38550                                  
 38551 00006F65 31C9                    	xor	cx,cx
 38552                                  	; MSDOS 6.0
 38553                                  	;mov	[si+2],cx ; 0
 38554 00006F67 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 38555                                  	;mov    [si+51],cx ; 0
 38556 00006F6A 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 38557                                  	;
 38558 00006F6D 81FB[A02B]              	CMP	BX,DOS_OPEN
 38559 00006F71 7509                    	JNZ	short _DoOper
 38560                                  	;test   al,80h
 38561 00006F73 A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 38562 00006F75 7405                    	JZ	short _DoOper ; 10/08/2018
 38563 00006F77 247F                    	AND	AL,7Fh			; mask off inherit bit
 38564                                  	;mov	cx,1000h
 38565 00006F79 B90010                  	MOV	CX,sf_no_inherit
 38566                                  _DoOper:
 38567                                  	;; MSDOS 3.3
 38568                                  	;;mov	word [si+2], 0
 38569                                  	;;mov	word [si+33h], 0
 38570                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 38571                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 38572                                  
 38573                                  	; MSDOS 6.0
 38574                                  ;**	Check if this is an extended open. If so you must set the
 38575                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 38576                                  ;	Set_EXT_mode in creat.asm
 38577                                  
 38578                                  	; MSDOS 6.0
 38579                                  	;SAVE	<di, es>                ;M022 conditional removed here
 38580 00006F7C 57                      	push	di
 38581 00006F7D 06                      	push	es
 38582 00006F7E 1E                      	push	ds
 38583 00006F7F 07                      	pop	es
 38584 00006F80 56                      	push	si
 38585 00006F81 5F                      	pop	di			; (es:di) = SFT address
 38586 00006F82 E807BC                  	call	Set_EXT_mode
 38587                                  	;RESTORE <es, di>
 38588 00006F85 07                      	pop	es
 38589 00006F86 5F                      	pop	di
 38590                                  
 38591                                  	;Context DS
 38592 00006F87 16                      	push	ss
 38593 00006F88 1F                      	pop	ds	
 38594                                  
 38595 00006F89 51                      	push	cx
 38596 00006F8A FFD3                    	CALL	BX			; blam!
 38597 00006F8C 59                      	pop	cx
 38598 00006F8D C536[9E05]              	LDS	SI,[THISSFT]
 38599 00006F91 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 38600                                  	;jc	short OpenE ; MSDOS 3.3
 38601                                  
 38602                                  ;	The SFT was successfully opened. Remove busy mark.
 38603                                  
 38604                                  OpenOK:
 38605                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 38606 00006F93 C7040100                	mov	word [SI],1
 38607                                  	;or	[SI+5],cx
 38608 00006F97 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 38609                                  
 38610                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 38611                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 38612                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 38613                                  ;
 38614                                  ; Since this is only relevant on sharer systems, we stick this code into the
 38615                                  ; sharer.
 38616                                  
 38617 00006F9A 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 38618 00006F9E 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 38619                                  
 38620 00006FA3 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 38621                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38622                                  OpenOkj:
 38623 00006FAA E98E96                  	jmp	SYS_RET_OK		; bye with no errors
 38624                                  
 38625                                  	; MSDOS 6.0
 38626                                  ;Extended Open hooks check
 38627                                  OpenE2:					;AN000;;EO.
 38628 00006FAD 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 38629 00006FB0 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 38630 00006FB2 EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 38631                                  
 38632                                  ;	Extended Open hooks check
 38633                                  ;
 38634                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 38635                                  
 38636                                  OpenClean:
 38637 00006FB4 5B                      	pop	bx			; clean off stack
 38638                                  OpenE:
 38639                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 38640 00006FB5 C7040000                	mov	word [SI],0
 38641 00006FB9 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 38642 00006FBE C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 38643 00006FC1 EB02                    	JMP	SHORT OpenCritLeave
 38644                                  
 38645                                  OpenFail:
 38646 00006FC3 FB                      	STI
 38647 00006FC4 59                      	pop	cx			; Clean stack
 38648                                  OpenCritLeave:
 38649 00006FC5 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 38650                                  
 38651                                  	; MSDOS 6.0
 38652                                  ; File Tagging DOS 4.00
 38653 00006FCC 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 38654                                  					;AN000;;FT. code page mismatch
 38655 00006FD2 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 38656 00006FD4 E97596                  	jmp	From_GetSet		;AN000;;FT. yes
 38657                                  NORERR: 				;AN000;
 38658                                  ; File Tagging DOS 4.00
 38659                                  
 38660 00006FD7 E96A96                  	jmp	SYS_RET_ERR		; no free, return error
 38661                                  
 38662                                  ; MSDOS 2.11
 38663                                  ;BREAK <$CREAT - creat a new file and open him for input>
 38664                                  ;----------------------------------------------------------------------------
 38665                                  ;   Assembler usage:
 38666                                  ;           LDS     DX, name
 38667                                  ;           MOV     AH, Creat
 38668                                  ;           MOV     CX, access
 38669                                  ;           INT     21h
 38670                                  ;       ; AX now has the handle
 38671                                  ;
 38672                                  ;   Error returns:
 38673                                  ;           AX = error_access_denied
 38674                                  ;              = error_path_not_found
 38675                                  ;              = error_too_many_open_files
 38676                                  ;----------------------------------------------------------------------------
 38677                                  
 38678                                  ; MSDOS 6.0
 38679                                  ;	BREAK <$Creat - create a brand-new file>
 38680                                  ;----------------------------------------------------------------------------
 38681                                  ;
 38682                                  ;**	$Creat - Create a File
 38683                                  ;
 38684                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 38685                                  ;	initial attributes contained in CX
 38686                                  ;
 38687                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 38688                                  ;		(CX) = initial attributes
 38689                                  ;	EXIT	'C' set if error
 38690                                  ;		  (ax) = error code
 38691                                  ;		'C' clear if OK
 38692                                  ;		  (ax) = file handle
 38693                                  ;	USES	all
 38694                                  ;
 38695                                  ;----------------------------------------------------------------------------
 38696                                  
 38697                                  _$CREAT:
 38698 00006FDA 51                      	push	cx			; Save attributes on stack
 38699 00006FDB B9[762A]                	mov	CX,DOS_CREATE		; routine to call
 38700                                  AccessSet:
 38701                                  	;mov	byte [ss:SATTRIB],6
 38702 00006FDE 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 38703                                  	; 10/08/2018
 38704 00006FE4 E927FF                  	JMP	AccessFile		; use good ol' open
 38705                                  
 38706                                  ; MSDOS 6.0 (MSDOS 3.3)
 38707                                  ;	BREAK <$CHMOD - change file attributes>
 38708                                  ;----------------------------------------------------------------------------
 38709                                  ;
 38710                                  ;**	$CHMOD - Change File Attributes
 38711                                  ;
 38712                                  ;   Assembler usage:
 38713                                  ;	    LDS     DX, name
 38714                                  ;	    MOV     CX, attributes
 38715                                  ;	    MOV     AL,func (0=get, 1=set)
 38716                                  ;	    INT     21h
 38717                                  ;   Error returns:
 38718                                  ;	    AX = error_path_not_found
 38719                                  ;	    AX = error_access_denied
 38720                                  ;
 38721                                  ;----------------------------------------------------------------------------
 38722                                  
 38723                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38724                                  _$CHMOD:
 38725                                  	; 05/08/2018 - Retro DOS v3.0
 38726                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 38727 00006FE7 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38728 00006FEA 50                      	push	ax
 38729 00006FEB 51                      	push	cx			; save function and attributes
 38730 00006FEC 89D6                    	MOV	SI,DX			; get things in appropriate places
 38731 00006FEE E8A7FB                  	call	TransPathSet		; get correct path
 38732 00006FF1 59                      	pop	cx
 38733 00006FF2 58                      	pop	ax			; and get function and attrs back
 38734 00006FF3 7257                    	JC	short ChModErr		; errors get mapped to path not found
 38735 00006FF5 16                      	push	ss			; set up for later possible calls
 38736 00006FF6 1F                      	pop	ds
 38737 00006FF7 803E[7A05]FF            	CMP	byte [CMETA],-1
 38738 00006FFC 754E                    	JNZ	short ChModErr
 38739                                  	;mov	byte [SATTRIB],16h
 38740 00006FFE C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 38741 00007003 2C01                    	SUB	AL,1			; fast way to discriminate
 38742 00007005 720B                    	JB	short ChModGet		; 0 -> go get value
 38743 00007007 7417                    	JZ	short ChModSet		; 1 -> go set value
 38744                                  	;mov	byte [EXTERR_LOCUS],1
 38745 00007009 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 38746                                  	;mov	al,1
 38747 0000700E B001                    	mov	al,error_invalid_function ; bad value
 38748                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38749                                  chmod_errj:	
 38750                                  	;;jmp	SYS_RET_ERR
 38751                                  	;jmp	short ChModE	
 38752 00007010 EBC5                    	jmp	short NORERR	; 06/12/2022
 38753                                  ChModGet:
 38754 00007012 E84BB9                  	call	GET_FILE_INFO		; suck out the ol' info
 38755 00007015 7237                    	JC	short ChModE		; error codes are already set for ret
 38756 00007017 E86B94                  	call	Get_User_Stack		; point to user saved vaiables
 38757                                  	;mov	[SI+4],ax
 38758 0000701A 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 38759                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38760                                  OpenOkj2:
 38761                                  	; 17/12/2022
 38762                                  	;;jmp	SYS_RET_OK		; say sayonara
 38763                                  	;jmp	short OpenOkj
 38764                                  	; 25/06/2019
 38765 0000701D E91E96                  	jmp	SYS_RET_OK_clc
 38766                                  
 38767                                  ChModSet:
 38768 00007020 89C8                    	MOV	AX,CX			; get attrs in position
 38769 00007022 E899B9                  	call	SET_FILE_ATTRIBUTE	; go set
 38770 00007025 7227                    	JC	short ChModE		; errors are set
 38771                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38772                                  	;jmp	SYS_RET_OK
 38773                                  OpenOkj3:
 38774                                  	;jmp	short OpenOkj2
 38775                                  	; 17/12/2022
 38776 00007027 E91196                  	jmp	SYS_RET_OK
 38777                                  
 38778                                  ; 17/12/2022
 38779                                  %if 0
 38780                                  ChModErr:
 38781                                  NotFound:	; 17/12/2022
 38782                                  	;mov	al,3
 38783                                  	mov	al,error_path_not_found
 38784                                  ChModE:
 38785                                  UnlinkE:	; 17/12/2022
 38786                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38787                                  	;;jmp	SYS_RET_ERR
 38788                                  	;jmp	short chmod_errj
 38789                                  	; 17/12/2022
 38790                                  	jmp	short NORERR
 38791                                  %endif
 38792                                  
 38793                                  ; 22/05/2019 - Retro DOS v4.0
 38794                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 38795                                  
 38796                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38797                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 38798                                  
 38799                                  ;	BREAK <$UNLINK - delete a file entry>
 38800                                  ;----------------------------------------------------------------------------
 38801                                  ;
 38802                                  ;**	$UNLINK - Delete a File
 38803                                  ;
 38804                                  ;
 38805                                  ;	Assembler usage:
 38806                                  ;	    LDS     DX, name
 38807                                  ;	    IF VIA SERVER DOS CALL
 38808                                  ;	     MOV     CX,SEARCH_ATTRIB
 38809                                  ;	    MOV     AH, Unlink
 38810                                  ;	    INT     21h
 38811                                  ;
 38812                                  ;	ENTRY	(ds:dx) = path name
 38813                                  ;		(cx) = search_attribute, if via server_dos
 38814                                  ;	EXIT	'C' clear if no error
 38815                                  ;		'C' set if error
 38816                                  ;		  (ax) = error code
 38817                                  ;			= error_file_not_found
 38818                                  ;			= error_access_denied
 38819                                  ;
 38820                                  ;----------------------------------------------------------------------------
 38821                                  
 38822                                  _$UNLINK:
 38823 0000702A 51                      	push	cx			; Save possible CX input parm
 38824 0000702B 89D6                    	MOV	SI,DX			; Point at input string
 38825 0000702D BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 38826 00007030 E865FB                  	call	TransPathSet		; go get normalized path
 38827 00007033 59                      	pop	cx
 38828 00007034 7216                    	JC	short ChModErr		; badly formed path
 38829 00007036 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 38830 0000703C 750E                    	JNZ	short NotFound
 38831 0000703E 16                      	push	ss
 38832 0000703F 1F                      	pop	ds
 38833                                  	;mov	ch,6
 38834 00007040 B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 38835 00007042 E81C01                  	call	SetAttrib
 38836 00007045 E808B5                  	call	DOS_DELETE		; remove that file
 38837                                  	;JC	short UnlinkE 		; error is there
 38838                                  	; 17/12/2022
 38839 00007048 728D                    	jc	short NORERR
 38840                                  
 38841                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38842                                  UnlinkOk:
 38843                                  	;jmp	SYS_RET_OK		; okey doksy
 38844 0000704A EBDB                    	jmp	short OpenOkj3
 38845                                  
 38846                                  	; 17/12/2022
 38847                                  ChModErr:	; 17/12/2022
 38848                                  NotFound:
 38849                                  	;mov	al,3
 38850 0000704C B003                    	MOV	AL,error_path_not_found
 38851                                  ChModE:		; 17/12/2022
 38852                                  UnlinkE:
 38853                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38854                                  	;;jmp	SYS_RET_ERR		; bye
 38855                                  	;jmp	short ChModE
 38856                                  	; 17/12/2022
 38857 0000704E EB87                    	jmp	short NORERR
 38858                                  
 38859                                  ;BREAK <$RENAME - move directory entries around>
 38860                                  ;----------------------------------------------------------------------------
 38861                                  ;
 38862                                  ;   Assembler usage:
 38863                                  ;	    LDS     DX, source
 38864                                  ;	    LES     DI, dest
 38865                                  ;	    IF VIA SERVER DOS CALL
 38866                                  ;	      MOV   CX,SEARCH_ATTRIB
 38867                                  ;	    MOV     AH, Rename
 38868                                  ;	    INT     21h
 38869                                  ;
 38870                                  ;   Error returns:
 38871                                  ;	    AX = error_file_not_found
 38872                                  ;	       = error_not_same_device
 38873                                  ;	       = error_access_denied
 38874                                  ;
 38875                                  ;----------------------------------------------------------------------------
 38876                                  
 38877                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38878                                  _$RENAME:
 38879                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38880 00007050 51                      	push	cx
 38881 00007051 1E                      	push	ds
 38882 00007052 52                      	push	dx			; save source and possible CX arg
 38883 00007053 06                      	PUSH	ES
 38884 00007054 1F                      	POP	DS			; move dest to source
 38885 00007055 89FE                    	MOV	SI,DI			; save for offsets
 38886 00007057 BF[3E04]                	MOV	DI,RENBUF
 38887 0000705A E83BFB                  	call	TransPathSet		; munge the paths
 38888 0000705D 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 38889 00007062 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 38890 00007067 5E                      	pop	si
 38891 00007068 1F                      	pop	ds
 38892 00007069 59                      	pop	cx			; get back source and possible CX arg
 38893                                  epjc2:	
 38894 0000706A 72E0                    	JC	short ChModErr		; get old error
 38895 0000706C 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 38896 00007072 75D8                    	JNZ	short NotFound
 38897 00007074 51                      	push	cx			; Save possible CX arg
 38898 00007075 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38899 00007078 E81DFB                  	call	TransPathSet		; wham
 38900 0000707B 59                      	pop	cx
 38901 0000707C 72EC                    	JC	short epjc2
 38902 0000707E 16                      	push	ss
 38903 0000707F 1F                      	pop	ds
 38904 00007080 803E[7A05]FF            	CMP	byte [CMETA],-1
 38905 00007085 72C5                    	JB	short NotFound
 38906                                  
 38907                                  	; MSDOS 6.0
 38908 00007087 FF36[A205]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 38909 0000708B FF36[A405]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 38910 0000708F BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 38911 00007092 16                      	PUSH	SS			   ;AN000;;MS.
 38912 00007093 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 38913 00007094 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 38914                                  rnloop: 				   ;AN000;
 38915 00007096 E879FA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 38916 00007099 7210                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 38917 0000709B E81AA1                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 38918 0000709E 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 38919 000070A0 FEC0                    	INC	AL			   ;AN000;;MS.	next
 38920 000070A2 EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 38921                                  rnerr:					   ;AN000;
 38922 000070A4 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 38923                                  	;error	error_current_directory    ;AN000;;MS.
 38924 000070A7 B010                    	mov	al,error_current_directory 
 38925                                  	;jmp	SYS_RET_ERR
 38926                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38927 000070A9 EBA3                    	jmp	short UnlinkE
 38928                                  dorn:					   ;AN000;
 38929 000070AB 368F06[A405]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 38930 000070B0 368F06[A205]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 38931                                  
 38932 000070B5 16                      	push	ss
 38933 000070B6 1F                      	pop	ds
 38934                                  
 38935                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38936                                  	;mov	ch,16h
 38937 000070B7 B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 38938                                  					; rename appropriate files
 38939 000070B9 E8A500                  	call	SetAttrib
 38940 000070BC E86FB6                  	call	DOS_RENAME		; do the deed
 38941 000070BF 728D                    	JC	short UnlinkE 		; errors
 38942                                  
 38943                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38944                                  	;jmp	SYS_RET_OK
 38945 000070C1 EB87                    	jmp	short UnlinkOk
 38946                                  
 38947                                  
 38948                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38949                                  
 38950                                  ; 14/07/2018 - Retro DOS v3.0
 38951                                  ; MSDOS 3.3 (& MSDOS 6.0)
 38952                                  
 38953                                  ;Break <$CreateNewFile - Create a new directory entry>
 38954                                  ;----------------------------------------------------------------------------
 38955                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 38956                                  ;	was no previous directory entry, and fail if a directory entry with
 38957                                  ;	the same name existed previously.
 38958                                  ;
 38959                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 38960                                  ;		CX contains default file attributes
 38961                                  ;   Outputs:	Carry Clear:
 38962                                  ;		    AX has file handle opened for read/write
 38963                                  ;		Carry Set:
 38964                                  ;		    AX has error code
 38965                                  ;   Registers modified: All
 38966                                  ;----------------------------------------------------------------------------
 38967                                  
 38968                                  _$CreateNewFile:
 38969 000070C3 51                      	push	cx			; Save attributes on stack
 38970 000070C4 B9[432B]                	MOV	CX,DOS_Create_New	; routine to call
 38971 000070C7 E914FF                  	JMP	AccessSet		; use good ol' open
 38972                                  
 38973                                  ;**	BinToAscii - convert a number to a string.
 38974                                  ;----------------------------------------------------------------------------
 38975                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 38976                                  ;	This routine is used to generate temp file names so we don't spend
 38977                                  ;	the time and code needed for a true hex number, we just use
 38978                                  ;	A thorugh O.
 38979                                  ;
 38980                                  ;	ENTRY	(ax) = value
 38981                                  ;		(es:di) = destination
 38982                                  ;	EXIT	(es:di) updated by 4
 38983                                  ;	USES	cx, di, flags
 38984                                  ;----------------------------------------------------------------------------
 38985                                  
 38986                                  ; MSDOS 3.3
 38987                                  ;BinToAscii:
 38988                                  ;	mov     cx,4
 38989                                  ;bta5:
 38990                                  ;	push    cx
 38991                                  ;	mov     cl,4
 38992                                  ;	rol     ax,cl
 38993                                  ;	push    ax
 38994                                  ;	and     al,0Fh
 38995                                  ;	add     al,'0'
 38996                                  ;	cmp     al,'9'
 38997                                  ;	jbe     short bta6
 38998                                  ;	add     al,7
 38999                                  ;bta6: 
 39000                                  ;	stosb
 39001                                  ;	pop     ax
 39002                                  ;	pop     cx
 39003                                  ;	loop    bta5
 39004                                  ;	retn
 39005                                  
 39006                                  ; MSDOS 6.0
 39007                                  BinToAscii:
 39008 000070CA B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 39009                                  bta5:	
 39010 000070CD D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 39011 000070CF 50                      	push	ax			; preserve remainder of digits
 39012 000070D0 240F                    	AND	AL,0Fh			; grab low nibble
 39013 000070D2 0441                    	ADD	AL,'A'			; turn into ascii
 39014 000070D4 AA                      	STOSB				; drop in the character
 39015 000070D5 58                      	pop	ax			; (ax) = shifted number
 39016 000070D6 FECD                    	dec	ch
 39017 000070D8 75F3                    	jnz	short bta5		; process 4 digits
 39018 000070DA C3                      	retn
 39019                                  
 39020                                  ;Break	<$CreateTempFile - create a unique name>
 39021                                  ;----------------------------------------------------------------------------
 39022                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 39023                                  ;	Method used is to get the current time, convert to a name and attempt
 39024                                  ;	a create new. Repeat until create new succeeds.
 39025                                  ;
 39026                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 39027                                  ;		CX  contains default attributes
 39028                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 39029                                  ;		AX has handle
 39030                                  ;   Registers modified: all
 39031                                  ;----------------------------------------------------------------------------
 39032                                  
 39033                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39034                                  
 39035                                  _$CreateTempFile:
 39036                                  	;Enter
 39037 000070DB 55                      	push	bp
 39038 000070DC 89E5                    	mov	bp,sp
 39039                                  
 39040                                  	;LocalVar  EndPtr,DWORD
 39041                                  	;LocalVar  FilPtr,DWORD
 39042                                  	;LocalVar  Attr,WORD
 39043                                  
 39044 000070DE 83EC0A                  	sub	sp,10
 39045                                  
 39046                                  	;test	cx,0FFD8h
 39047 000070E1 F7C1D8FF                	test	CX,~attr_changeable
 39048 000070E5 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 39049                                  
 39050                                  ; We need this "hook" here to detect these cases (like user sets one both of
 39051                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 39052                                  ; below. The code loops on error_access_denied, but if one of the non
 39053                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 39054                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 39055                                  ; need to detect these cases before getting to the loop.
 39056                                  
 39057                                  	;mov	ax, 5
 39058 000070E7 B80500                  	MOV	AX,error_access_denied
 39059 000070EA EB69                    	JMP	SHORT SETTMPERR
 39060                                  
 39061                                  OKatts:
 39062                                  	;MOV	attr,CX 		; save attribute
 39063 000070EC 894EF6                  	mov     [bp-10],cx
 39064                                  	;MOV	FilPtrL,DX		; pointer to file
 39065 000070EF 8956F8                  	mov	[bp-8],dx
 39066                                  	;MOV	FilPtrH,DS
 39067 000070F2 8C5EFA                  	mov	[bp-6],ds
 39068                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 39069 000070F5 8C5EFE                  	mov	[bp-2],ds
 39070 000070F8 1E                      	PUSH	DS
 39071 000070F9 07                      	POP	ES			; destination for nul search
 39072 000070FA 89D7                    	MOV	DI,DX
 39073 000070FC 89F9                    	MOV	CX,DI
 39074 000070FE F7D9                    	NEG	CX			; number of bytes remaining in segment
 39075                                  	; MSDOS 6.0
 39076 00007100 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 39077 00007102 7501                    	JNZ	short okok		;AN000;MS. no
 39078                                  	;MOV	CX,-1			;AN000;MS.
 39079                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39080                                  	; 17/12/2022
 39081 00007104 49                      	dec	cx  ; mov cx,-1
 39082                                  	;mov	cx,-1 ; 0FFFh
 39083                                  okok:					;AN000;
 39084 00007105 31C0                    	XOR	AX,AX			;AN000;
 39085 00007107 F2AE                    	REPNZ	SCASB			;AN000;
 39086                                  					;AN000;
 39087 00007109 4F                      	DEC	DI			; point back to the null
 39088 0000710A 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 39089 0000710E E8B0DF                  	call	PATHCHRCMP		; Is it a path separator?
 39090 00007111 7403                    	JZ	short SETENDPTR		; Yes
 39091                                  STOREPTH:
 39092 00007113 B05C                    	MOV	AL,'\'
 39093 00007115 AA                      	STOSB				; Add a path separator (and INC DI)
 39094                                  SETENDPTR:
 39095                                  	;MOV	EndPtrL,DI		; pointer to the tail
 39096 00007116 8856FC                  	mov	[bp-4],dl
 39097                                  CreateLoop:
 39098 00007119 16                      	push	ss			; let ReadTime see variables
 39099 0000711A 1F                      	pop	ds
 39100 0000711B 55                      	push	bp
 39101 0000711C E8009A                  	call	READTIME		; go get time
 39102 0000711F 5D                      	pop	bp
 39103                                  ;
 39104                                  ; Time is in CX:DX. Go drop it into the string.
 39105                                  ;
 39106                                  	;les	di,EndPtr		; point to the string
 39107 00007120 C47EFC                  	les	di,[BP-4]
 39108 00007123 89C8                    	mov	ax,cx
 39109 00007125 E8A2FF                  	call	BinToAscii		; store upper word
 39110 00007128 89D0                    	mov	ax,dx
 39111 0000712A E89DFF                  	call	BinToAscii		; store lower word
 39112 0000712D 30C0                    	xor	al,al
 39113 0000712F AA                      	STOSB				; nul terminate
 39114                                  	;LDS	DX,FilPtr		; get name
 39115 00007130 C556F8                  	lds	dx,[bp-8]
 39116                                  	;MOV	CX,Attr 		; get attr
 39117 00007133 8B4EF6                  	mov	cx,[bp-10]
 39118 00007136 55                      	push	bp
 39119 00007137 E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 39120 0000713A 5D                      	pop	bp
 39121 0000713B 7319                    	JNC	short CreateDone	; failed, go try again
 39122                                  
 39123                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 39124                                  ; error and figure out what to do.
 39125                                  
 39126                                  	;; MSDOS 3.3			; M049 - start
 39127                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 39128                                  ;;	cmp	al,error_file_exists
 39129                                  ;;	jz	short CreateLoop	; file existed => try with new name
 39130                                  ;;	cmp	al,error_access_denied
 39131                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 39132                                  
 39133                                  	; MSDOS 6.0
 39134                                  	;cmp	al,50h
 39135 0000713D 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 39136 0000713F 74D8                    	JZ	short CreateLoop	; Y: try again
 39137                                  	;cmp	al,5
 39138 00007141 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 39139 00007143 7510                    	JNZ	short SETTMPERR		; N: Error out
 39140                                  					; Y: Check to see if we got this due
 39141                                  					;    to the network drive. Note that
 39142                                  					;    the redir will set the exterr
 39143                                  					;    to error_cannot_make if this is 
 39144                                  					;    so. 
 39145 00007145 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 39146                                  					; See if it's REALLY an att mismatch
 39147 0000714B 7408                    	je	short SETTMPERR		; no, network error, stop
 39148                                  ;M070
 39149                                  ; If the user failed on an I24, we do not want to try again
 39150                                  ;
 39151 0000714D 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 39152                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 39153                                  
 39154                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 39155                                  	; 17/12/2022
 39156 00007153 75C4                    	jne	short CreateLoop ; 10/06/2019 
 39157                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39158                                  	;jz	short SETTMPERR
 39159                                  	;jmp	short CreateLoop
 39160                                  
 39161                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 39162                                  					; M049 - end
 39163                                  SETTMPERR:
 39164 00007155 F9                      	STC
 39165                                  CreateDone:
 39166                                  	;Leave
 39167 00007156 89EC                    	mov	sp,bp
 39168 00007158 5D                      	pop	bp
 39169 00007159 7203                    	JC	short CreateFail
 39170 0000715B E9DD94                  	jmp	SYS_RET_OK		; success!
 39171                                  CreateFail:
 39172 0000715E E9E394                  	jmp	SYS_RET_ERR
 39173                                  
 39174                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 39175                                  ;   (CH) or to the value in CL if the current system call is through
 39176                                  ;   serverdoscall.
 39177                                  ;
 39178                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 39179                                  ;		fSharing == TRUE => set sattrib to CL
 39180                                  ;   Outputs:	none
 39181                                  ;   Registers changed:	CX
 39182                                  
 39183                                  SetAttrib:
 39184 00007161 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 39185 00007167 7502                    	jnz	short Set
 39186 00007169 88E9                    	mov	cl,ch
 39187                                  Set:
 39188 0000716B 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 39189 00007170 C3                      	retn
 39190                                  
 39191                                  ; 14/07/2018 - Retro DOS v3.0
 39192                                  ; MSDOS 6.0
 39193                                  
 39194                                  ; 29/04/2019 - Retro DOS v4.0
 39195                                  
 39196                                  ;Break	<Extended_Open- Extended open the file>
 39197                                  ;----------------------------------------------------------------------------
 39198                                  ; Input: AL= 0 reserved  AH=6CH
 39199                                  ;	 BX= mode
 39200                                  ;	 CL= create attribute  CH=search attribute (from server)
 39201                                  ;	 DX= flag
 39202                                  ;	 DS:SI = file name
 39203                                  ;	 ES:DI = parm list
 39204                                  ;			   DD  SET EA list (-1) null
 39205                                  ;			   DW  n  parameters
 39206                                  ;			   DB  type (TTTTTTLL)
 39207                                  ;			   DW  IOMODE
 39208                                  ; Function: Extended Open
 39209                                  ; Output: carry clear
 39210                                  ;		     AX= handle
 39211                                  ;		     CX=1 file opened
 39212                                  ;			2 file created/opened
 39213                                  ;			3 file replaced/opened
 39214                                  ;	  carry set: AX has error code
 39215                                  ;----------------------------------------------------------------------------
 39216                                  
 39217                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39218                                  _$Extended_Open:			  ;AN000;
 39219                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 39220 00007171 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 39221 00007176 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 39222                                  	; 17/12/2022
 39223 0000717D F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 39224                                  	;;test	dx,0FE00h
 39225                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0  ?
 39226 00007180 7545                    	JNZ	short ext_inval2	  ;AN000;EO. no
 39227 00007182 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 39228 00007184 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 39229 00007187 743E                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 39230                                  	;and	dl,0Fh
 39231 00007189 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 39232 0000718C 80FA02                  	CMP	DL,2			  ;AN000;EO, > 02
 39233 0000718F 7736                    	JA	short ext_inval2	  ;AN000;EO. yes ,error
 39234                                  	;and	ah,0F0h
 39235 00007191 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 39236 00007194 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 39237 00007197 772E                    	JA	short ext_inval2	  ;AN000;EO. yes error
 39238                                  
 39239 00007199 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 39240 0000719E 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 39241 000071A3 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 39242 000071A8 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 39243 000071AD 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 39244 000071B2 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 39245 000071B7 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 39246 000071BC 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 39247 000071C1 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 39248 000071C3 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 39249 000071C5 EB0A                    	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 39250                                  ext_inval2:				  ;AN000;;EO.
 39251                                  	;mov	al,1
 39252 000071C7 B001                    	mov	al,error_invalid_function ;AN000;EO.. invalid function
 39253                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39254                                  eo_err:
 39255                                  	;jmp	SYS_RET_ERR
 39256 000071C9 EB93                    	jmp	short CreateFail
 39257                                  
 39258                                  ext_inval_parm:				  ;AN000;EO..
 39259 000071CB 59                      	POP	CX			  ;AN000;EO..  pop up satck
 39260 000071CC 5E                      	POP	SI			  ;AN000;EO..
 39261                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 39262                                  	;mov	al,13
 39263 000071CD B00D                    	mov	al,error_invalid_data
 39264                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39265                                  	;;jmp	SYS_RET_ERR
 39266                                  	;jmp	short eo_err
 39267                                  	; 17/12/2022
 39268 000071CF EB8D                    	jmp	short CreateFail
 39269                                  
 39270                                  	; 17/12/2022	
 39271                                  ;error_return:				  ;AN000;EO.
 39272                                  ;	retn				  ;AN000;EO.. return with error
 39273                                  
 39274                                  goopen2:				  ;AN000;
 39275                                  	; 17/12/2022
 39276                                  	;test	bh,20h				 
 39277 000071D1 F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 39278                                  	;;test	bx,2000h
 39279                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 39280 000071D4 7406                    	JZ	short goopen		  ;AN000;EO.. no
 39281                                  	;or	byte [SS:EXTOPEN_ON],2
 39282 000071D6 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 39283                                  goopen:					  ;AN000;
 39284                                  	;or	byte [SS:EXTOPEN_ON],1 
 39285 000071DC 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 39286                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 39287                                  	; 18/12/2022
 39288 000071E2 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 39289                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 39290 000071E8 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 39291 000071EE 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 39292 000071F0 E8D0FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 39293 000071F3 723F                    	JC	short error_return	  ;AN000;;EO. error
 39294                                  
 39295 000071F5 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 39296 000071FB 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 39297                                  	;mov	word [SS:EXTOPEN_FLAG],2
 39298 000071FD 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. creted/opened;smr;SS Override
 39299 00007204 EB7F                    	JMP	setXAttr		  ;AN000;;EO. set XAs
 39300                                  
 39301                                  	; 17/12/2022
 39302                                  ;ok_return2:
 39303                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 39304                                  
 39305                                  chknext:
 39306                                  	; 17/12/2022
 39307 00007206 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 39308                                  	;;test	word [SS:EXTOPEN_FLAG],1
 39309                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 39310 0000720C 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 39311 0000720E E8C9FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 39312 00007211 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 39313 00007213 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 39314 00007219 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 39315 0000721B 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. prsume create/open;smr;SS Override
 39316 00007222 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 39317 00007228 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 39318 0000722A 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 39319 00007231 EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 39320                                  error_return2:
 39321 00007233 F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 39322                                  error_return:	 ;17/12/2022
 39323 00007234 C3                      	retn				  ;AN000;;EO. return with error
 39324                                  
 39325                                  	; 17/12/2022
 39326                                  ok_return:
 39327                                  ok_return2:
 39328 00007235 E90394                  	jmp	SYS_RET_OK
 39329                                  
 39330                                  exist_open:				  ;AN000;
 39331 00007238 36F606[7205]FF          	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 39332 0000723E 7402                    	jz	short noserver		  ;AN000;;EO. no
 39333 00007240 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 39334                                  noserver:
 39335 00007242 E8C0FC                  	call	_$Open2			  ;AN000;;EO. do open
 39336 00007245 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 39337 00007247 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 39338 0000724D 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 39339                                  local_extopen:
 39340                                  	;cmp	ax,2
 39341 0000724F 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 39342 00007252 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 39343                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 39344                                  	; 17/12/2022
 39345 00007254 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 39346                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 39347                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 39348                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 39349                                  	; 17/12/2022
 39350 0000725A 745D                    	jz	short extexit ; 10/06/2019
 39351                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39352                                  	;jnz	short do_creat
 39353                                  	;jmp	short extexit
 39354                                  do_creat:
 39355 0000725C 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 39356 00007261 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 39357 00007266 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 39358 00007268 E86FFD                  	call	_$CREAT			  ;AN000;;EO. do create
 39359 0000726B 724C                    	JC	short extexit 		  ;AN000;;EO. error
 39360                                  	;mov	word [SS:EXTOPEN_FLAG],2
 39361 0000726D 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39362                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 39363 00007274 EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 39364                                  
 39365                                  ext_ok:
 39366 00007276 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 39367 0000727C 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 39368                                  	;mov	word [SS:EXTOPEN_FLAG],1
 39369 0000727E 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 39370                                  setXAttr:
 39371                                  	; 29/04/2019
 39372 00007285 50                      	push	ax
 39373 00007286 E8FC91                  	call	Get_User_Stack		  ;AN000;;EO.
 39374 00007289 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 39375                                  	;mov	[si+4],ax
 39376 0000728D 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 39377 00007290 58                      	pop	ax			  ;AN000;;EO.
 39378 00007291 8904                    	mov	[si],ax
 39379                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 39380                                  	; 17/12/2022
 39381 00007293 EBA0                    	jmp	short ok_return
 39382                                  ;ok_return:				  ;AN000;
 39383                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 39384                                  
 39385                                  extexit2:				  ;AN000; ERROR RECOVERY
 39386 00007295 5B                      	POP	BX			  ;AN000;EO. close the handle
 39387 00007296 50                      	PUSH	AX			  ;AN000;EO. save error code from set XA
 39388                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 39389 00007297 36833E[F405]02          	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39390                                  					  ;AN000;EO. from create;smr;SS Override
 39391 0000729D 750C                    	JNZ	short justopen		  ;AN000;EO.
 39392 0000729F 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 39393 000072A4 C514                    	LDS	DX,[SI]			  ;AN000;EO.
 39394 000072A6 E881FD                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 39395 000072A9 EB03                    	JMP	SHORT reserror		  ;AN000;EO.
 39396                                  
 39397                                  justopen:				  ;AN000;
 39398 000072AB E886F4                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 39399                                  reserror:				  ;AN000;
 39400 000072AE 58                      	POP	AX			  ;AN000;EO. restore error code from set XA
 39401 000072AF EB08                    	JMP	SHORT extexit		  ;AN000;EO.
 39402                                  
 39403                                  ext_file_unfound:			  ;AN000;
 39404                                  	;mov	ax,2
 39405 000072B1 B80200                  	MOV	AX,error_file_not_found   ;AN000;EO.
 39406 000072B4 EB03                    	JMP	SHORT extexit		  ;AN000;EO.
 39407                                  ext_inval:				  ;AN000;
 39408                                  	;mov	ax,1
 39409 000072B6 B80100                  	MOV	AX,error_invalid_function ;AN000;EO.
 39410                                  lockoperr:	; 17/12/2022
 39411                                  extexit:
 39412 000072B9 E98893                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 39413                                  
 39414                                  ;============================================================================
 39415                                  ; LOCK.ASM, MSDOS 6.0, 1991
 39416                                  ;============================================================================
 39417                                  ; 14/07/2018 - Retro DOS v3.0
 39418                                  ; 22/05/2019 - Retro DOS v4.0
 39419                                  
 39420                                  ;BREAK <$LockOper - Lock Calls>
 39421                                  ;----------------------------------------------------------------------------
 39422                                  ;
 39423                                  ;   Assembler usage:
 39424                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 39425                                  ;	    MOV     CX, OffsetHigh
 39426                                  ;	    MOV     DX, OffsetLow
 39427                                  ;	    MOV     SI, LengthHigh
 39428                                  ;	    MOV     DI, LengthLow
 39429                                  ;	    MOV     AH, LockOper
 39430                                  ;	    MOV     AL, Request
 39431                                  ;	    INT     21h
 39432                                  ;
 39433                                  ;   Error returns:
 39434                                  ;	    AX = error_invalid_handle
 39435                                  ;	       = error_invalid_function
 39436                                  ;	       = error_lock_violation
 39437                                  ;
 39438                                  ;   Assembler usage:
 39439                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 39440                                  ;
 39441                                  ;				    0? lock all
 39442                                  ;				    8? lock write
 39443                                  ;				    ?2 lock multiple
 39444                                  ;				    ?3 unlock multiple
 39445                                  ;				    ?4 lock/read
 39446                                  ;				    ?5 write/unlock
 39447                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 39448                                  ;	    MOV     BX, Handle
 39449                                  ;	    MOV     CX, count or size
 39450                                  ;	    LDS     DX, buffer
 39451                                  ;	    INT     21h
 39452                                  ;
 39453                                  ;   Error returns:
 39454                                  ;	    AX = error_invalid_handle
 39455                                  ;	       = error_invalid_function
 39456                                  ;	       = error_lock_violation
 39457                                  ;
 39458                                  ;----------------------------------------------------------------------------
 39459                                  
 39460                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39461                                  _$LockOper:
 39462 000072BC 3C01                    	CMP	AL,1
 39463 000072BE 770B                    	JA	short lock_bad_func
 39464                                  
 39465 000072C0 57                      	PUSH	DI			       ; Save LengthLow
 39466 000072C1 E8D5F3                  	call	SFFromHandle		       ; ES:DI -> SFT
 39467 000072C4 731D                    	JNC	short lock_do 		       ; have valid handle
 39468 000072C6 5F                      	POP	DI			       ; Clean stack
 39469                                  	;mov	al,6
 39470 000072C7 B006                    	mov	al,error_invalid_handle
 39471                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39472                                  ;lockoperr:
 39473                                  	;jmp	SYS_RET_ERR
 39474                                  	; 17/12/2022
 39475 000072C9 EBEE                    	jmp	short lockoperr ; jmp SYS_RET_ERR
 39476                                  
 39477                                  lock_bad_func:
 39478                                  	;mov	byte [ss:EXTERR_LOCUS],1
 39479 000072CB 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 39480                                  	;mov	al,1
 39481 000072D1 B001                    	mov	al,error_invalid_function
 39482                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39483                                  lockoperrj:
 39484                                  	;jmp	SYS_RET_ERR
 39485 000072D3 EBE4                    	jmp	short lockoperr
 39486                                  
 39487                                  	; 22/05/2019 - Retro DOS v4.0
 39488                                  
 39489                                  	; MSDOS 6.0 
 39490                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 39491                                  ; Dead code deleted, MD, 23 Mar 90
 39492                                  
 39493                                  ;lock_do:
 39494                                  ;	; MSDOS 3.3
 39495                                  ;	or	al,al
 39496                                  ;	pop	ax
 39497                                  ;	jz	short DOS_Lock
 39498                                  ;DOS_Unlock:
 39499                                  ;	;test	word [es:di+5],8000h
 39500                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39501                                  ;	JZ	short LOCAL_UNLOCK
 39502                                  ;	push    ax
 39503                                  ;	mov     ax,110Bh
 39504                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39505                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39506                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 39507                                  ;			; SFT DPB field -> DPB of drive containing file
 39508                                  ;			; Return: CF set error
 39509                                  ;	pop     bx
 39510                                  ;	jmp     short ValChk
 39511                                  ;
 39512                                  ;LOCAL_UNLOCK:
 39513                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39514                                  ;ValChk:
 39515                                  ;	JNC	short Lock_OK
 39516                                  ;lockerror:
 39517                                  ;	jmp	SYS_RET_ERR
 39518                                  ;Lock_OK:
 39519                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39520                                  ;	jmp	SYS_RET_OK
 39521                                  ;DOS_Lock:
 39522                                  ;	;test	word [es:di+5],8000h
 39523                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39524                                  ;	JZ	short LOCAL_LOCK
 39525                                  ;	;CallInstall NET_XLock,MultNET,10
 39526                                  ;	mov     ax, 110Ah
 39527                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39528                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39529                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 39530                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39531                                  ;			; Return: CF set error
 39532                                  ;	JMP	short ValChk
 39533                                  ;
 39534                                  ;LOCAL_LOCK:
 39535                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39536                                  ;	JMP	short ValChk
 39537                                  
 39538                                  ; 17/12/2022
 39539                                  LOCAL_UNLOCK:
 39540                                  	; MSDOS 3.3
 39541                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39542                                  	; MSDOS 6.0
 39543 000072D5 FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39544                                  ValChk:
 39545 000072D9 7302                    	JNC	short Lock_OK
 39546                                  lockerror:
 39547                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39548                                  	;;jmp	SYS_RET_ERR
 39549                                  	;jmp	short lockoperrj
 39550                                  	; 17/12/2022
 39551 000072DB EBDC                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 39552                                  Lock_OK:
 39553                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39554                                  	; 10/06/2019
 39555 000072DD A1[0C06]                	mov	ax,[TEMP_VAR]
 39556 000072E0 E95893                  	jmp	SYS_RET_OK
 39557                                  
 39558                                  	; 22/05/2019
 39559                                  lock_do:
 39560                                  	; MSDOS 6.0
 39561 000072E3 89C3                    	MOV	BX,AX				; save AX
 39562 000072E5 BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 39563                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39564                                  	;;mov	[bp+0],dx
 39565                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 39566                                  	; 15/12/2022
 39567 000072E8 895600                  	mov	[bp],dx
 39568                                  	;mov	[bp+2],cx
 39569 000072EB 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 39570 000072EE 59                      	POP	CX				; get low length
 39571                                  	;mov	[bp+4],cx
 39572 000072EF 894E04                  	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 39573                                  	;mov	[bp+6],si
 39574 000072F2 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 39575 000072F5 B90100                  	MOV	CX,1				; one range
 39576                                  
 39577                                  ;	PUSH	CS				;
 39578                                  ;	POP	DS				; DS:DX points to
 39579                                  
 39580 000072F8 16                      	push	ss
 39581 000072F9 1F                      	pop	ds
 39582                                  
 39583 000072FA 89EA                    	MOV	DX,BP				; Lock_Buffer
 39584                                  	;test	al,1
 39585 000072FC A801                    	TEST	AL,UNLOCK_ALL			; function 1
 39586                                  	;JNZ	short DOS_Unlock		; yes
 39587                                  	;JMP	short DOS_Lock			; function 0
 39588                                  	; 17/12/2022
 39589                                  	; 10/06/2019
 39590 000072FE 740E                    	jz	short DOS_Lock
 39591                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39592                                  	;JNZ	short DOS_Unlock
 39593                                  	;JMP	short DOS_Lock
 39594                                  
 39595                                  DOS_Unlock:
 39596                                  	;;test	word [es:di+5],8000h
 39597                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39598 00007300 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39599 00007305 74CE                    	JZ	short LOCAL_UNLOCK
 39600                                  
 39601                                  lock_unlock: ; 22/05/2019
 39602                                  	
 39603                                  	;CallInstall Net_Xlock,MultNET,10
 39604                                  	
 39605                                  	; MSDOS 3.3
 39606                                  	;mov     ax,110Bh
 39607                                  	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39608                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39609                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 39610                                  			; SFT DPB field -> DPB of drive containing file
 39611                                  			; Return: CF set error
 39612                                  	; MSDOS 6.0
 39613 00007307 B80A11                  	mov     ax,110Ah
 39614 0000730A CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39615                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39616                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39617                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39618                                  			; Return: CF set error
 39619                                  
 39620 0000730C EBCB                    	JMP	SHORT ValChk
 39621                                  
 39622                                  ; 17/12/2022
 39623                                  %if 0
 39624                                  LOCAL_UNLOCK:
 39625                                  	; MSDOS 3.3
 39626                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39627                                  	; MSDOS 6.0
 39628                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39629                                  ValChk:
 39630                                  	JNC	short Lock_OK
 39631                                  lockerror:
 39632                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39633                                  	;jmp	SYS_RET_ERR
 39634                                  	jmp	short lockoperrj
 39635                                  Lock_OK:
 39636                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39637                                  	; 10/06/2019
 39638                                  	mov	ax,[TEMP_VAR]
 39639                                  	jmp	SYS_RET_OK
 39640                                  %endif
 39641                                  
 39642                                  DOS_Lock:
 39643                                  	;;test	word [es:di+5],8000h
 39644                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39645 0000730E 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39646 00007313 7407                    	JZ	short LOCAL_LOCK
 39647                                  
 39648                                  	;CallInstall NET_XLock,MultNET,10
 39649                                  
 39650 00007315 B80A11                  	mov     ax,110Ah
 39651 00007318 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39652                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39653                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39654                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39655                                  			; Return: CF set error
 39656                                  
 39657 0000731A EBBD                    	JMP	short ValChk
 39658                                  
 39659                                  LOCAL_LOCK:
 39660                                  	; MSDOS 3.3
 39661                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39662                                  	; MSDOS 6.0
 39663 0000731C FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39664                                  
 39665 00007320 EBB7                    	JMP	short ValChk
 39666                                  
 39667                                  ; 14/07/2018 - Retro DOS v3.0
 39668                                  ; LOCK_CHECK
 39669                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39670                                  
 39671                                  ;----------------------------------------------------------------------------
 39672                                  ; Inputs:
 39673                                  ;	Outputs of SETUP
 39674                                  ;	[USER_ID] Set
 39675                                  ;	[PROC_ID] Set
 39676                                  ; Function:
 39677                                  ;	Check for lock violations on local I/O
 39678                                  ;	Retries are attempted with sleeps in between
 39679                                  ; Outputs:
 39680                                  ;    Carry clear
 39681                                  ;	Operation is OK
 39682                                  ;    Carry set
 39683                                  ;	A lock violation detected
 39684                                  ; Outputs of SETUP preserved
 39685                                  ;----------------------------------------------------------------------------
 39686                                  
 39687                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39688                                  	; 22/05/2019 - Retro DOS v4.0
 39689                                  LOCK_CHECK:
 39690 00007322 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 39691                                  LockRetry:
 39692 00007326 53                      	push	bx		; save regs
 39693 00007327 50                      	push	ax ; MSDOS 6.0
 39694                                  
 39695                                  	;MSDOS 3.3
 39696                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 39697                                  	;MSDOS 6.0
 39698 00007328 FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 39699                                  
 39700 0000732C 58                      	pop	ax ; MSDOS 6.0
 39701 0000732D 5B                      	pop	bx		; restrore regs
 39702 0000732E 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 39703                                  LockN:
 39704 00007330 E8DA9E                  	call	Idle		; wait a while
 39705 00007333 4B                      	DEC	BX		; remember a retry
 39706 00007334 75F0                    	JNZ	short LockRetry	; more retries left...
 39707 00007336 F9                      	STC
 39708                                  lc_ret_label:
 39709 00007337 C3                      	retn
 39710                                  
 39711                                  ; 14/07/2018 - Retro DOS v3.0
 39712                                  ; LOCK_VIOLATION
 39713                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39714                                  
 39715                                  ;----------------------------------------------------------------------------
 39716                                  ; Inputs:
 39717                                  ;	[THISDPB] set
 39718                                  ;	[READOP] indicates whether error on read or write
 39719                                  ; Function:
 39720                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 39721                                  ; Outputs:
 39722                                  ;	Carry set if user says FAIL, causes error_lock_violation
 39723                                  ;	Carry clear if user wants a retry
 39724                                  ;
 39725                                  ; DS, ES, DI, CX preserved, others destroyed
 39726                                  ;----------------------------------------------------------------------------
 39727                                  
 39728                                  LOCK_VIOLATION:
 39729 00007338 1E                      	PUSH	DS
 39730 00007339 06                      	PUSH	ES
 39731 0000733A 57                      	PUSH	DI
 39732 0000733B 51                      	PUSH	CX
 39733                                  	;mov	ax,21h
 39734 0000733C B82100                  	MOV	AX,error_lock_violation
 39735                                  	;mov	byte [ALLOWED],18h
 39736 0000733F C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39737 00007344 C42E[8A05]              	LES	BP,[THISDPB]
 39738 00007348 BF0100                  	MOV	DI,1		; Fake some registers
 39739 0000734B 89F9                    	MOV	CX,DI
 39740                                  	;mov	dx,[es:bp+11]
 39741 0000734D 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 39742 00007351 E8D6DF                  	call	HARDERR
 39743 00007354 59                      	POP	CX
 39744 00007355 5F                      	POP	DI
 39745 00007356 07                      	POP	ES
 39746 00007357 1F                      	POP	DS
 39747 00007358 3C01                    	CMP	AL,1
 39748 0000735A 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 39749 0000735C F9                      	STC
 39750 0000735D C3                      	retn
 39751                                  
 39752                                  ; 14/07/2018 - Retro DOS v3.0
 39753                                  
 39754                                  ;----------------------------------------------------------------------------
 39755                                  
 39756                                  ;	do a retz to return error
 39757                                  
 39758                                  	; 22/05/2019 - Retro DOS v4.0
 39759                                  CheckShare:
 39760                                  	; MSDOS 3.3
 39761                                  	;cmp	byte [cs:fShare],0
 39762                                  	;retn
 39763                                  
 39764                                  	; MSDOS 6.0
 39765 0000735E 1E                      	push	ds			;smr;
 39766                                  	;getdseg <ds>			; ds -> dosdata
 39767 0000735F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 39768 00007364 803E[0303]00            	cmp	byte [fShare],0
 39769 00007369 1F                      	pop	ds			;smr;
 39770 0000736A C3                      	retn
 39771                                  	
 39772                                  ;============================================================================
 39773                                  ; SHARE.ASM, MSDOS 6.0, 1991
 39774                                  ;============================================================================
 39775                                  ; 14/07/2018 - Retro DOS v3.0
 39776                                  ; 22/05/2019 - Retro DOS v4.0
 39777                                  
 39778                                  ; SHARE_CHECK
 39779                                  ;----------------------------------------------------------------------------
 39780                                  ; Inputs:
 39781                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 39782                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 39783                                  ;       [WFP_START] has full path of name
 39784                                  ;       [USER_ID] Set
 39785                                  ;       [PROC_ID] Set
 39786                                  ; Function:
 39787                                  ;       Check for sharing violations on local file/device access
 39788                                  ; Outputs:
 39789                                  ;    Carry clear
 39790                                  ;       Sharing approved
 39791                                  ;    Carry set
 39792                                  ;       A sharing violation detected
 39793                                  ;           AX is error code
 39794                                  ; USES    ALL but DS
 39795                                  ;----------------------------------------------------------------------------
 39796                                  
 39797                                  	; 22/05/2019 - Retro DOS v4.0
 39798                                  SHARE_CHECK:
 39799                                  	; 26/07/2019
 39800 0000736B FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 39801                                  shchk_retn:
 39802 0000736F C3                      	retn
 39803                                  
 39804                                  ; SHARE_VIOLATION
 39805                                  ;----------------------------------------------------------------------------
 39806                                  ; Inputs:
 39807                                  ;       [THISDPB] Set
 39808                                  ;       AX has error code
 39809                                  ; Function:
 39810                                  ;       Handle Sharing errors
 39811                                  ; Outputs:
 39812                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 39813                                  ;       Carry clear if user wants a retry
 39814                                  ;
 39815                                  ; DS, ES, DI preserved, others destroyed
 39816                                  ;----------------------------------------------------------------------------
 39817                                  
 39818                                  SHARE_VIOLATION:
 39819 00007370 1E                      	PUSH    DS
 39820 00007371 06                      	PUSH	ES
 39821 00007372 57                      	PUSH    DI
 39822 00007373 C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 39823                                  	;mov	byte [ALLOWED],18h
 39824 00007378 C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39825 0000737D C42E[8A05]              	LES     BP,[THISDPB]
 39826 00007381 BF0100                  	MOV     DI,1			; Fake some registers
 39827 00007384 89F9                    	MOV     CX,DI
 39828                                  	;mov	dx,[es:bp+17]
 39829 00007386 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 39830 0000738A E89DDF                  	call	HARDERR
 39831 0000738D 5F                      	POP     DI
 39832 0000738E 07                      	POP	ES
 39833 0000738F 1F                      	POP     DS
 39834 00007390 3C01                    	CMP     AL,1
 39835 00007392 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 39836 00007394 F9                      	STC
 39837 00007395 C3                      	retn
 39838                                  
 39839                                  ;----------------------------------------------------------------------------
 39840                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 39841                                  ;       NOT perform a close, it merely asserts that the sharing information
 39842                                  ;       for the SFT/UID/PID may be safely released.
 39843                                  ;
 39844                                  ;   Inputs:     ES:DI points to an SFT
 39845                                  ;   Outputs:    None
 39846                                  ;   Registers modified: all except DS,ES,DI
 39847                                  ;----------------------------------------------------------------------------
 39848                                  
 39849                                  ShareEnd:
 39850                                  	; 26/07/2019
 39851 00007396 FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 39852 0000739A C3                      	retn
 39853                                  
 39854                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 39855                                  ;----------------------------------------------------------------------------
 39856                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 39857                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 39858                                  ;
 39859                                  ;   Inputs:     ThisSFT points to the SFT
 39860                                  ;               WFP_Start points to the WFP
 39861                                  ;   Outputs:    Carry clear => successful entry
 39862                                  ;               Carry set => failed system call
 39863                                  ;   Registers modified: all
 39864                                  ;----------------------------------------------------------------------------
 39865                                  
 39866                                  ShareEnter:
 39867 0000739B 51                      	push	cx
 39868                                  retry:
 39869 0000739C 8B0E[1A00]              	mov     cx,[RetryCount]
 39870                                  attempt:
 39871 000073A0 C43E[9E05]              	les     di,[THISSFT]		; grab sft
 39872 000073A4 31C0                    	XOR     AX,AX
 39873                                   	;mov	[es:di+51],axfff
 39874 000073A6 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 39875 000073AA 51                      	push	cx
 39876 000073AB E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 39877 000073AE 59                      	pop	cx
 39878 000073AF 730A                    	jnc	short done		; success, let the user see this
 39879 000073B1 E8599E                  	call	Idle                    ; wait a while
 39880 000073B4 E2EA                    	loop    attempt                 ; go back for another attempt
 39881 000073B6 E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 39882 000073B9 73E1                    	jnc	short retry		; user said to retry, go do it
 39883                                  done:
 39884 000073BB 59                      	pop	cx
 39885 000073BC C3                      	retn
 39886                                  
 39887                                  ;============================================================================
 39888                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 39889                                  ;============================================================================
 39890                                  ; 29/04/2019 - Retro DOS 4.0
 39891                                  
 39892                                  ;** EXEPATCH.ASM 
 39893                                  ;----------------------------------------------------------------------------
 39894                                  ;	Contains the foll:
 39895                                  ;
 39896                                  ;		- code to find and overlay buggy unpack code
 39897                                  ;		- new code to be overlayed on buggy unpack code 
 39898                                  ;		- old code sequence to identify buggy unpack code
 39899                                  ;
 39900                                  ;	Revision history:
 39901                                  ;
 39902                                  ;		Created: 5/14/90
 39903                                  ;----------------------------------------------------------------------------
 39904                                  
 39905                                  ;----------------------------------------------------------------------------
 39906                                  ;
 39907                                  ; M020 : Fix for rational bug - for details see routine header
 39908                                  ; M028 : 4b04 implementation
 39909                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 39910                                  ; M032 : set turnoff bit only if DOS in HMA.
 39911                                  ; M033 : if IP < 2 then not exepacked.
 39912                                  ; M046 : support for a 4th version of exepacked files.
 39913                                  ; M068 : support for copy protected apps.
 39914                                  ; M071 : use A20OFF_COUNT of 10.
 39915                                  ;
 39916                                  ;----------------------------------------------------------------------------
 39917                                  
 39918                                  PATCH1_COM_OFFSET	EQU	06CH
 39919                                  PATCH1_OFFSET		EQU	028H
 39920                                  PATCH1_CHKSUM		EQU	0EF4EH
 39921                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 39922                                  
 39923                                  PATCH2_COM_OFFSET	EQU	076H
 39924                                  PATCH2_OFFSET		EQU	032H
 39925                                  
 39926                                  	; The strings that start at offset 076h have two possible 
 39927                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 39928                                  
 39929                                  PATCH2_CHKSUM		EQU	78B2H
 39930                                  CHKSUM2_LEN		EQU	119H/2
 39931                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 39932                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 39933                                  
 39934                                  PATCH3_COM_OFFSET	EQU	074H
 39935                                  PATCH3_OFFSET		EQU	032H
 39936                                  PATCH3_CHKSUM		EQU	4EDEH
 39937                                  CHKSUM3_LEN		EQU	117H/2
 39938                                  
 39939                                  ;**	Data structure passed for ExecReady call
 39940                                  ;
 39941                                  ;struc ERStruc
 39942                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 39943                                  ; .ER_Flags:	resw	1
 39944                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 39945                                  ; .ER_PSP:	resw	1	; PSP of the program
 39946                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 39947                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 39948                                  ; .size:
 39949                                  ;endstruc
 39950                                  
 39951                                  ;DOSCODE SEGMENT
 39952                                  
 39953                                  	; 22/05/2019 - Retro DOS v4.0
 39954                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 39955                                  
 39956                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39957                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 39958                                  
 39959                                  ; M028 - BEGIN
 39960                                  
 39961                                  ;--------------------------------------------------------------------------
 39962                                  ;
 39963                                  ;	Procedure Name		: ExecReady
 39964                                  ;
 39965                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 39966                                  ;
 39967                                  ;--------------------------------------------------------------------------
 39968                                  
 39969                                  ExecReady:
 39970 000073BD 89D6                    	mov	si,dx			; move the pointer into a friendly one
 39971                                  	;;test	word [si+2],1
 39972                                  	; 17/12/2022
 39973 000073BF F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 39974                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 39975 000073C3 7413                    	jz	short er_setver		; only setver for .COM files
 39976                                  
 39977                                  	;mov	ax,[si+8]
 39978 000073C5 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 39979 000073C8 83C010                  	add	ax,10h
 39980 000073CB 8EC0                    	mov	es,ax
 39981                                  
 39982                                  	;mov	cx,[si+10]
 39983 000073CD 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 39984                                  	;mov	cx,[si+12]
 39985 000073D0 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 39986                                  
 39987                                  	;call	[ss:FixExePatch]
 39988 000073D3 36FF16[F811]            	call	word [ss:FixExePatch] ; 28/12/2022
 39989                                  	
 39990                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39991                                  	;call	[ss:Rational386PatchPtr]
 39992                                  
 39993                                  er_setver:
 39994                                  	;;test	word [si+2],2		; Q: is this an overlay
 39995                                  	; 17/12/2022
 39996 000073D8 F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 39997                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 39998 000073DC 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 39999                                  					; N: set up lie version first
 40000 000073DE 1E                      	push	ds
 40001 000073DF 56                      	push	si
 40002                                  	;lds	si,[si+4]
 40003 000073E0 C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 40004 000073E3 E876ED                  	call	Scan_Execname1
 40005 000073E6 E887ED                  	call	Scan_Special_Entries
 40006 000073E9 5E                      	pop	si
 40007 000073EA 1F                      	pop	ds
 40008                                  	;mov	es,[si+8]
 40009 000073EB 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 40010 000073EE 36A1[BD0E]              	mov	ax,[ss:SPECIAL_VERSION]
 40011 000073F2 26A34000                	mov	[es:PDB.Version],ax
 40012                                  
 40013                                  er_chkdoshi:
 40014 000073F6 36803E[F711]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 40015 000073FC 741F                    	je	short er_done		; M032: N: done
 40016                                  
 40017                                  					; M068 - Start
 40018                                  	;mov	ax,[si+8]
 40019 000073FE 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 40020                                  
 40021                                  	;or	byte [ss:DOS_FLAG],4
 40022 00007401 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 40023                                  					; ah = 25 & ah= 49. See dossym.inc 
 40024                                  					; under TAG M003 & M009 for 
 40025                                  					; explanation
 40026                                  	;;test	word [si+2],1
 40027                                  	; 17/12/2022
 40028 00007407 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 40029                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 40030 0000740B 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 40031                                  					;    a20off_psp and ret
 40032 0000740D 1E                         	push	ds
 40033 0000740E 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 40034 00007410 E88E02                  	call	IsCopyProt		; check if copy protected
 40035 00007413 1F                      	pop	ds
 40036                                  
 40037                                  er_setA20:
 40038                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 40039                                  	; is non-zero at this point it indicates that the A20 is to be 
 40040                                  	; turned off for that many int 21 calls made by the app. In 
 40041                                  	; addition the A20 has to be turned off when we exit from this 
 40042                                  	; call. Hence the inc.
 40043                                  
 40044 00007414 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 40045 00007419 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 40046                                  					; turned OFF.
 40047                                  er_done:				; M068 - End
 40048 0000741D 31C0                    	xor	ax,ax
 40049 0000741F C3                      	retn
 40050                                  
 40051                                  ; M028 - END
 40052                                  
 40053                                  
 40054                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40055                                  %if 0
 40056                                  
 40057                                  ;----------------------------------------------------------------------------
 40058                                  ;
 40059                                  ; procedure : Rational386Patch
 40060                                  ;
 40061                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 40062                                  ; 386 registers (usually just the high word of 32 bit registers) during
 40063                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 40064                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 40065                                  ;
 40066                                  ; This routine applies patches to the Rational DOS Extender to work around
 40067                                  ; most of the register trashing bugs.
 40068                                  ;
 40069                                  ; Note that there are additional register trashing bugs not fixed by these
 40070                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 40071                                  ; may be modified on interrupts.
 40072                                  ;
 40073                                  ; There are two different Rational DOS Extender patchs in this module.
 40074                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 40075                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 40076                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 40077                                  ; or not.
 40078                                  ;
 40079                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 40080                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 40081                                  ; running in the HMA.
 40082                                  ;
 40083                                  ; This patch detection and replacement is based on an example supplied by
 40084                                  ; Ben Williams at Rational.
 40085                                  ;
 40086                                  ;----------------------------------------------------------------------------
 40087                                  
 40088                                  ; 22/05/2019 - Retro DOS v4.0
 40089                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 40090                                  
 40091                                  ;----------------------------------------------------------------------------
 40092                                  ;
 40093                                  ; INPUT : ES = segment where program got loaded
 40094                                  ;
 40095                                  ;----------------------------------------------------------------------------
 40096                                  
 40097                                  rpFind1:
 40098                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 40099                                  
 40100                                  rpFind1Len equ	$ - rpFind1
 40101                                  
 40102                                  ;	cli
 40103                                  ;	in	al, 21h
 40104                                  ;	pusha
 40105                                  ;	xor	ax, ax
 40106                                  ;	out	43h, al
 40107                                  ;	mov	dx, ...
 40108                                  
 40109                                  rpFind1a:
 40110                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 40111                                  
 40112                                  rpFind1aLen equ	$ - rpFind1a
 40113                                  
 40114                                  ;	mov	al, 0Eh
 40115                                  ;	out	37h, al
 40116                                  ;	xor	ax, ax
 40117                                  ;	out	0F2h, al
 40118                                  
 40119                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40120                                  
 40121                                  rpFind2:
 40122                                  	db	0Fh, 20h, 0C0h
 40123                                  
 40124                                  rpFind2Len equ	$ - rpFind2
 40125                                  
 40126                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 40127                                  
 40128                                  rpFind3:
 40129                                  	db	0Fh, 22h, 0C0h, 0EAh
 40130                                  
 40131                                  rpFind3Len equ	$ - rpFind3
 40132                                  
 40133                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 40134                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 40135                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 40136                                  
 40137                                  ; note, there is no rpRepl1 string
 40138                                  
 40139                                  rpRepl2:
 40140                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 40141                                  
 40142                                  rpRepl2Len equ	$ - rpRepl2
 40143                                  
 40144                                  ;	push	eax
 40145                                  ;	push	cx
 40146                                  ;	mov	eax, cr0
 40147                                  
 40148                                  rpRepl3:
 40149                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 40150                                  
 40151                                  rpRepl3Len equ	$ - rpRepl3
 40152                                  
 40153                                  ;	mov	ss, bx
 40154                                  ;	pop	cx
 40155                                  ;	pop	eax
 40156                                  
 40157                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 40158                                  
 40159                                  rpFind4:
 40160                                  	db	93h, 58h, 8Bh, 0CCh
 40161                                  
 40162                                  rpFind4Len equ	$ - rpFind4
 40163                                  
 40164                                  ;	xchg	bx, ax
 40165                                  ;	pop	ax
 40166                                  ;	mov	cx, sp
 40167                                  
 40168                                  rpFind5:
 40169                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 40170                                  
 40171                                  rpFind5Len equ	$ - rpFind5
 40172                                  
 40173                                  ;	mov	ax, DE0Ch
 40174                                  ;	int	67h
 40175                                  ;	mov	sp, cx
 40176                                  ;	jmp	bx
 40177                                  
 40178                                  rpRepl4:
 40179                                  	db	93h, 58h, 8Bh, 0CCh
 40180                                  	db	02Eh, 066h, 0A3h
 40181                                  
 40182                                  rpRepl4o1Len equ $ - rpRepl4
 40183                                  
 40184                                  	db	00h, 00h
 40185                                  	db	02Eh, 066h, 89h, 36h
 40186                                  
 40187                                  rpRepl4o2Len equ $ - rpRepl4
 40188                                  
 40189                                  	db	00h, 00h
 40190                                  
 40191                                  rpRepl4Len equ	$ - rpRepl4
 40192                                  
 40193                                  ;	xchg	bx, ax
 40194                                  ;	pop	ax
 40195                                  ;	mov	cx, sp
 40196                                  ;	mov	dword ptr cs:[xxxx], eax
 40197                                  ;	mov	dword ptr cs:[xxxx], esi
 40198                                  
 40199                                  rpRepl5:
 40200                                  	db	8Bh, 0E1h
 40201                                  	db	2Eh, 66h, 0A1h
 40202                                  
 40203                                  rpRepl5o1Len equ $ - rpRepl5
 40204                                  
 40205                                  	db	00h, 00h
 40206                                  	db	2Eh, 66h, 8Bh, 36h
 40207                                  
 40208                                  rpRepl5o2Len equ $ - rpRepl5
 40209                                  
 40210                                  	db	00h, 00h
 40211                                  	db	0FFh, 0E3h
 40212                                  
 40213                                  rpRepl5Len equ	$ - rpRepl5
 40214                                  
 40215                                  ;	mov	sp, cx
 40216                                  ;	mov	eax, dword ptr cs:[xxxx]
 40217                                  ;	mov	esi, dword ptr cs:[xxxx]
 40218                                  ;	jmp	bx
 40219                                  
 40220                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 40221                                  
 40222                                  rpFind6:
 40223                                  	db	0FAh, 52h, 51h
 40224                                  
 40225                                  rpFind6Len equ	$ - rpFind6
 40226                                  
 40227                                  ;	cli
 40228                                  ;	push	dx
 40229                                  ;	push	cx
 40230                                  
 40231                                  rpFind7a:
 40232                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 40233                                  
 40234                                  rpFind7aLen equ	$ - rpFind7a
 40235                                  
 40236                                  ;	mov	ax, 0DE0Ch
 40237                                  ;	call	fword ptr es:[xxxx]
 40238                                  
 40239                                  rpFind7b:
 40240                                  	db	59h, 5Ah, 5Bh
 40241                                  
 40242                                  rpFind7bLen equ	$ - rpFind7b
 40243                                  
 40244                                  ;	pop	cx
 40245                                  ;	pop	dx
 40246                                  ;	pop	bx
 40247                                  
 40248                                  rpRepl6 :
 40249                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 40250                                  
 40251                                  rpRepl6Len equ	$ - rpRepl6
 40252                                  
 40253                                  ;	cli
 40254                                  ;	push	eax
 40255                                  ;	push	ebx
 40256                                  ;	push	ecx
 40257                                  ;	push	edx
 40258                                  
 40259                                  rpRepl7:
 40260                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 40261                                  
 40262                                  rpRepl7Len equ	$ - rpRepl7
 40263                                  
 40264                                  ;	pop	edx
 40265                                  ;	pop	ecx
 40266                                  ;	pop	ebx
 40267                                  ;	pop	eax
 40268                                  ;	pop	bx
 40269                                  
 40270                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 40271                                  
 40272                                  rpFind8:
 40273                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 40274                                  
 40275                                  rpFind8Len equ	$ - rpFind8
 40276                                  
 40277                                  ;	pusha
 40278                                  ;	push	es
 40279                                  ;	push	ds
 40280                                  ;	mov	ax, dgroup	;jump back to here from replace8
 40281                                  ;	mov	ds, ax
 40282                                  
 40283                                  rpFind9 :
 40284                                  	db	1Fh, 07h, 61h
 40285                                  
 40286                                  rpFind9Len equ	$ - rpFind9
 40287                                  
 40288                                  ;	pop	ds
 40289                                  ;	pop	es
 40290                                  ;	popa
 40291                                  
 40292                                  rpRepl8:
 40293                                   	db	66h, 60h, 06h, 1Eh
 40294                                  
 40295                                  rpRepl8Len equ	$ - rpRepl8
 40296                                  
 40297                                  ;	pushad
 40298                                  ;	push	es
 40299                                  ;	push	ds
 40300                                  
 40301                                  rpRepl9:
 40302                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 40303                                  
 40304                                  rpRepl9Len equ	$ - rpRepl9
 40305                                  
 40306                                  ;	pop	ds
 40307                                  ;	pop	es
 40308                                  ;	popad
 40309                                  ;	retn			;no need to jmp back to main-line
 40310                                  
 40311                                  ;----------------------------------------------------------------------------
 40312                                  
 40313                                  struc SearchPair
 40314                                   .sp_off1: resw 1	; offset of 1st search string
 40315                                   .sp_len1: resw 1	; length of 1st search string
 40316                                   .sp_off2: resw 1	; 2nd string
 40317                                   .sp_len2: resw 1	; 2nd string
 40318                                   .sp_diff: resw 1	; max difference between offsets
 40319                                   .size:
 40320                                  endstruc
 40321                                  
 40322                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 40323                                  
 40324                                  rpBug1Strs:
 40325                                  	dw	rpFind2
 40326                                  	dw	rpFind2Len ; 3
 40327                                  	dw	rpFind3
 40328                                  	dw	rpFind3Len ; 4
 40329                                  	dw	20h
 40330                                  
 40331                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 40332                                  
 40333                                  rpBug2Strs:
 40334                                  	dw	rpFind4
 40335                                  	dw	rpFind4Len ; 4
 40336                                  	dw	rpFind5
 40337                                  	dw	rpFind5Len ; 9
 40338                                  	dw	80h
 40339                                  
 40340                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 40341                                  
 40342                                  rpBug3Strs:
 40343                                  	dw	rpFind6
 40344                                  	dw	rpFind6Len ; 3
 40345                                  	dw	rpFind7a
 40346                                  	dw	rpFind7aLen ; 7
 40347                                  	dw	80h
 40348                                  
 40349                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 40350                                  
 40351                                  rpBug4Strs:
 40352                                  	dw	rpFind8
 40353                                  	dw	4
 40354                                  	dw	rpFind9
 40355                                  	dw	rpFind9Len ; 3
 40356                                  	dw	80h
 40357                                  
 40358                                  ;----------------------------------------------------------------------------
 40359                                  
 40360                                  struc StackVars
 40361                                   .sv_wVersion:	resw 1		; Rational extender version #
 40362                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 40363                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 40364                                   .size:
 40365                                  endstruc
 40366                                  
 40367                                  ;----------------------------------------------------------------------------
 40368                                  
 40369                                  ; 22/05/2019 - Retro DOS v4.0
 40370                                  
 40371                                  Rational386Patch:
 40372                                  	; Do a few quick checks to see if this looks like a Rational
 40373                                  	; Extended application. Hopefully this will quickly weed out
 40374                                  	; most non Rational apps.
 40375                                  
 40376                                  	cmp	word [es:0],395		; version number goes here - versions
 40377                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 40378                                  
 40379                                  	cmp	word [es:0Ch],20h	; always has this value here
 40380                                  	jne	short rp3QuickOut
 40381                                  
 40382                                  	push	ax
 40383                                  
 40384                                  	mov	ax,18h 			; extender has 18h at
 40385                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 40386                                  	jne	short rp3QO_ax
 40387                                  	cmp	[es:28],ax
 40388                                  	jne	short rp3QO_ax
 40389                                  	cmp	[es:36],ax
 40390                                  	je	short rp3Maybe
 40391                                  rp3QO_ax:
 40392                                  	pop	ax
 40393                                  rp3QuickOut:
 40394                                  	retn
 40395                                  
 40396                                  ; It might be the rational extender, do more extensive checking
 40397                                  
 40398                                  rp3Maybe:
 40399                                  	cld
 40400                                  	push	bx			; note ax pushed above
 40401                                  	push	cx
 40402                                  	push	dx
 40403                                  	push	si
 40404                                  	push	di
 40405                                  	push	es
 40406                                  	push	ds			; we use all of them
 40407                                  	push	bp
 40408                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 40409                                  	mov	bp,sp
 40410                                  
 40411                                  	push	cs
 40412                                  	pop	ds
 40413                                  
 40414                                  	mov	ax,[es:0]		; save version #
 40415                                  	;mov	[bp+StackVars.sv_wVersion],ax
 40416                                  	mov	[bp],ax	
 40417                                  					; check that binary version # matches
 40418                                  	call	VerifyVersion		;   ascii string
 40419                                  	jne	short rp3Exit_j
 40420                                  
 40421                                  ; Looks like this is it, find where to put the patch code.  The
 40422                                  ; patch will be located on top of Rational code specific to 80286
 40423                                  ; processors, so these patchs MUST NOT be applied if running on
 40424                                  ; an 80286 system.
 40425                                  
 40426                                  	; Rational says the code to patch will never be beyond offset 46xxh
 40427                                  
 40428                                  	mov	cx,4500h		; force search len to 4700h (searches
 40429                                  	;mov	[bp+2],cx
 40430                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 40431                                  
 40432                                  	mov	es,[es:20h]		; es=code segment
 40433                                  
 40434                                  	mov	si,rpFind1		; string to find
 40435                                  	mov	dx,rpFind1Len ; 10	; length to match
 40436                                  	call	ScanCodeSeq		; look for code seq
 40437                                  	jz	short rpGotPatch
 40438                                  
 40439                                  ; According to Rational, some very old versions of the extender may not
 40440                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 40441                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 40442                                  
 40443                                  	mov	si,rpFind1a
 40444                                  	mov	dx,rpFind1aLen  ;8
 40445                                  	call	ScanCodeSeq
 40446                                  	jz	short rpGotPatch
 40447                                  
 40448                                  rp3Exit_j:
 40449                                  	jmp	rp3Exit
 40450                                  
 40451                                  ; Found the location to write patch code! DI = offset in code seg.
 40452                                  
 40453                                  rpGotPatch:
 40454                                  	;mov	[bp+4],di
 40455                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 40456                                  
 40457                                  ;----------------------------------------------------------------------------
 40458                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40459                                  
 40460                                  	;cmp	word [bp+0],381
 40461                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 40462                                  	cmp	word [bp],381
 40463                                  	jae	short rpBug2			;   < 3.81
 40464                                  
 40465                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 40466                                  	call	FindBadCode
 40467                                  	jc	short rpBug2
 40468                                  
 40469                                  ; si = rpFind2 offset, di = rpFind3 offset
 40470                                  
 40471                                  	push	di
 40472                                  	mov	di,si				; rpFind2 offset
 40473                                  	mov	dx,rpFind2Len ; 3
 40474                                  
 40475                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 40476                                  	jne	short rp_no_cx
 40477                                  
 40478                                  	dec	di				;   yes, gobble up push cx too
 40479                                  	inc	dx
 40480                                  rp_no_cx:
 40481                                  	mov	si,rpRepl2			; patch out find2 sequence
 40482                                  	mov	cx,rpRepl2Len  ; 6
 40483                                  	call	GenPatch
 40484                                  
 40485                                  	pop	di				; rpFind3 offset
 40486                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 40487                                  	jne	short rp_no_cx2
 40488                                  
 40489                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 40490                                  rp_no_cx2:
 40491                                  	;mov	ax,[bp+4]
 40492                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 40493                                  	;mov	[es:di+4],ax
 40494                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 40495                                  
 40496                                  	push	di				; save find3 offset
 40497                                  	mov	si,rpRepl3			; copy repl3 to patch area
 40498                                  	mov	cx,rpRepl3Len ; 5
 40499                                  	call	CopyPatch
 40500                                  
 40501                                  	pop	bx				; find3 offset
 40502                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 40503                                  	call	GenJump 			; jmp back from patch area
 40504                                  	;mov	[bp+4],di
 40505                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 40506                                  						;   area pointer
 40507                                  
 40508                                  ;----------------------------------------------------------------------------
 40509                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 40510                                  
 40511                                  rpBug2:
 40512                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 40513                                  	call	FindBadCode
 40514                                  	jc	short rpBug3
 40515                                  
 40516                                  ; si = rpFind4 offset, di = rpFind5 offset
 40517                                  
 40518                                  	;push	word [bp+4]
 40519                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 40520                                  						;   (where repl4 goes)
 40521                                  	push	di				; save find5 offset
 40522                                  
 40523                                  	mov	di,si
 40524                                  	mov	dx,rpFind4Len ; 4
 40525                                  	mov	si,rpRepl4
 40526                                  	mov	cx,rpRepl4Len ; 15
 40527                                  	call	GenPatch			; patch out find4 code
 40528                                  
 40529                                  	pop	di				; find5 offset
 40530                                  	add	di,5				; keep 5 bytes of find5 code
 40531                                  	;mov	bx,[bp+4]
 40532                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 40533                                  	push	bx				; save repl5 location
 40534                                  	call	GenJump
 40535                                  
 40536                                  	mov	si,rpRepl5			; copy repl5 code to patch
 40537                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 40538                                  	call	CopyPatch			;   so no need to jmp back to
 40539                                  						;   main-line code
 40540                                  
 40541                                  ; patches have been made, now update the patch code to store/load dwords just
 40542                                  ; after the code in the patch area
 40543                                  
 40544                                  	pop	di				; repl5 location
 40545                                  	pop	si				; repl4 location
 40546                                  
 40547                                  	;mov	ax,[bp+4]
 40548                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 40549                                  
 40550                                  	;mov	[es:si+7],ax
 40551                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 40552                                  	;mov	[es:di+5],ax
 40553                                  	mov	[es:di+rpRepl5o1Len],ax
 40554                                  	add	ax,4
 40555                                  	;mov	[es:si+0Dh],ax
 40556                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 40557                                  	;mov	[es:di+0Bh],ax
 40558                                  	mov	[es:di+rpRepl5o2Len],ax
 40559                                  
 40560                                  	;add	word [bp+4],8
 40561                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 40562                                  						; patch area
 40563                                  
 40564                                  ;----------------------------------------------------------------------------
 40565                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 40566                                  
 40567                                  rpBug3:
 40568                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 40569                                  	call	FindBadCode
 40570                                  	jc	short rpBug4
 40571                                  
 40572                                  	;add	di,9
 40573                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 40574                                  	push	si				;   code and locate find7b
 40575                                  	mov	si,rpFind7b			;   sequence
 40576                                  	mov	dx,rpFind7bLen ; 3
 40577                                  	call	ScanCodeSeq_di
 40578                                  	pop	si
 40579                                  	jnz	short rpBug4
 40580                                  
 40581                                  	push	di				; save find7b code offset
 40582                                  
 40583                                  	mov	di,si
 40584                                  	mov	dx,rpFind6Len ; 3
 40585                                  	mov	si,rpRepl6
 40586                                  	mov	cx,rpRepl6Len ; 9
 40587                                  	call	GenPatch			; patch out find6 code
 40588                                  
 40589                                  	pop	di
 40590                                  	mov	dx,rpFind7bLen ; 3
 40591                                  	mov	si,rpRepl7
 40592                                  	mov	cx,rpRepl7Len ; 9
 40593                                  	call	GenPatch			; patch out find7b code
 40594                                  
 40595                                  ;----------------------------------------------------------------------------
 40596                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 40597                                  
 40598                                  rpBug4:
 40599                                  	;cmp	word [bp+0],360
 40600                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 40601                                  	cmp	word [bp],360
 40602                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 40603                                  
 40604                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 40605                                  	call	FindBadCode
 40606                                  	jc	short rp3Exit
 40607                                  
 40608                                  	push	di				; save find9 code offset
 40609                                  
 40610                                  	mov	di,si
 40611                                  	mov	dx,3
 40612                                  	mov	si,rpRepl8
 40613                                  	mov	cx,rpRepl8Len ; 4
 40614                                  	call	GenPatch			; patch out find8 code
 40615                                  
 40616                                  	pop	di				; find9 offset
 40617                                  	;mov	bx,[bp+4]
 40618                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 40619                                  	call	GenJump 			;   patch area
 40620                                  
 40621                                  	mov	si,rpRepl9			; copy replacement code to
 40622                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 40623                                  	call	CopyPatch			;   so no jmp back to main-line
 40624                                  
 40625                                  rp3Exit:
 40626                                  	add	sp,StackVars.size
 40627                                  	pop	bp
 40628                                  	pop	ds
 40629                                  	pop	es
 40630                                  	pop	di
 40631                                  	pop	si
 40632                                  	pop	dx
 40633                                  	pop	cx
 40634                                  	pop	bx
 40635                                  	pop	ax
 40636                                  	retn
 40637                                  
 40638                                  ;----------------------------------------------------------------------------
 40639                                  ;
 40640                                  ; FindBadCode
 40641                                  ;
 40642                                  ; Searches Rational code segment looking for a pair of find strings (all
 40643                                  ; patches have at least two find strings).
 40644                                  ;
 40645                                  ; Entry:
 40646                                  ;	ES    = code segment to search
 40647                                  ;	DS:BX = search pair structure for this search
 40648                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 40649                                  ;
 40650                                  ; Exit:
 40651                                  ;	CY flag clear if both strings found, and
 40652                                  ;	SI    = offset in ES of 1st string
 40653                                  ;	DI    = offset in ES of 2nd string
 40654                                  ;	CY set if either string not found, or strings too far apart
 40655                                  ;
 40656                                  ; Used:
 40657                                  ;	CX
 40658                                  ;
 40659                                  ;----------------------------------------------------------------------------
 40660                                  
 40661                                  ;struc SearchPair
 40662                                  ; .sp_off1: resw 1	; offset of 1st search string
 40663                                  ; .sp_len1: resw 1	; length of 1st search string
 40664                                  ; .sp_off2: resw 1	; 2nd string
 40665                                  ; .sp_len2: resw 1	; 2nd string
 40666                                  ; .sp_diff: resw 1	; max difference between offsets
 40667                                  ; .size:
 40668                                  ;endstruc
 40669                                  
 40670                                  FindBadCode:
 40671                                  	;mov	cx,[bp+2]
 40672                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 40673                                  
 40674                                  	mov	si,[bx]	; mov si,[bx+0]
 40675                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 40676                                  	
 40677                                  	;mov	dx,[bx+2]
 40678                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 40679                                  	call	ScanCodeSeq
 40680                                  	jnz	short fbc_error		; done if 1st not found
 40681                                  
 40682                                  	push	di			; save 1st string offset
 40683                                  
 40684                                  	;mov	si,[bx+4]
 40685                                  	mov	si,[bx+SearchPair.sp_off2]
 40686                                  	;mov	dx,[bx+6]
 40687                                  	mov	dx,[bx+SearchPair.sp_len2]
 40688                                  	call	ScanCodeSeq_di		; don't change flags after this!
 40689                                  
 40690                                  	pop	si			; restore 1st string offset
 40691                                  	jnz	short fbc_error
 40692                                  
 40693                                  	mov	ax,di			; sanity check that
 40694                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 40695                                  	jc	short fbc_error
 40696                                  	;cmp	ax,[bx+8]
 40697                                  	cmp	ax,[bx+SearchPair.sp_diff]
 40698                                  	ja	short fbc_error
 40699                                  
 40700                                  	clc
 40701                                  	retn
 40702                                  
 40703                                  fbc_error:
 40704                                  	stc
 40705                                  	retn
 40706                                  
 40707                                  ;----------------------------------------------------------------------------
 40708                                  ;
 40709                                  ; GenPatch
 40710                                  ;
 40711                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 40712                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 40713                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 40714                                  ; code.
 40715                                  ;
 40716                                  ; Entry:
 40717                                  ;	ES:DI = start of buggy code to be patched
 40718                                  ;	DX    = length of buggy code to be patched
 40719                                  ;	DS:SI = replacement patch code
 40720                                  ;	CX    = length of replacement patch code
 40721                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40722                                  ;
 40723                                  ; Exit:
 40724                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 40725                                  ;
 40726                                  ; Used:
 40727                                  ;	AX, BX, SI, Flags
 40728                                  ;
 40729                                  ;----------------------------------------------------------------------------
 40730                                  
 40731                                  GenPatch:
 40732                                  	push	di			;save offset of buggy code
 40733                                  
 40734                                  	;mov	bx,[bp+4]
 40735                                  	mov	bx,[bp+StackVars.sv_pPatch]
 40736                                  					;jump from buggy code to patch area
 40737                                  	call	GenJump
 40738                                  
 40739                                  	call	CopyPatch		;copy replacement code to patch area
 40740                                  
 40741                                  	pop	bx			;offset of buggy code + buggy code
 40742                                  	add	bx,dx			;  length = return from patch offset
 40743                                  
 40744                                  	call	GenJump 		;jump from patch area back to main-
 40745                                  	;mov	[bp+4],di
 40746                                  	mov	[bp+StackVars.sv_pPatch],di
 40747                                  					;  line code, update patch pointer
 40748                                  	retn
 40749                                  
 40750                                  ;----------------------------------------------------------------------------
 40751                                  ;
 40752                                  ; CopyPatch
 40753                                  ;
 40754                                  ; Copies patch code to patch location.
 40755                                  ;
 40756                                  ; Entry:
 40757                                  ;	DS:SI = patch code to be copied
 40758                                  ;	ES    = segment of code to patch
 40759                                  ;	CX    = length of code to copy
 40760                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40761                                  ;
 40762                                  ; Exit:
 40763                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 40764                                  ;
 40765                                  ; Used:
 40766                                  ;	SI, Flags
 40767                                  ;
 40768                                  ;----------------------------------------------------------------------------
 40769                                  
 40770                                  CopyPatch:
 40771                                  	push	cx
 40772                                  	;mov	di,[bp+4]
 40773                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 40774                                  	cld
 40775                                  	rep movsb
 40776                                  	pop	cx
 40777                                  	;mov	[bp+4],di
 40778                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 40779                                  	retn
 40780                                  
 40781                                  ;----------------------------------------------------------------------------
 40782                                  ;
 40783                                  ; GenJump
 40784                                  ;
 40785                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 40786                                  ;
 40787                                  ; Entry:
 40788                                  ;	ES:DI = from location (where to put jmp instruction)
 40789                                  ;	BX    = to location (where to jump to)
 40790                                  ;
 40791                                  ; Exit:
 40792                                  ;	DI = byte after generated jump
 40793                                  ;
 40794                                  ; Used:
 40795                                  ;	AX
 40796                                  ;
 40797                                  ;----------------------------------------------------------------------------
 40798                                  
 40799                                  GenJump:
 40800                                  	mov	al,0E9h		; jmp rel16 opcode
 40801                                  	stosb
 40802                                  
 40803                                  	mov	ax,bx		; calc offset to 'to' location
 40804                                  	sub	ax,di
 40805                                  	sub	ax,2
 40806                                  
 40807                                  	stosw			; output offset
 40808                                  
 40809                                  	retn
 40810                                  
 40811                                  ;----------------------------------------------------------------------------
 40812                                  ;
 40813                                  ; ScanCodeSeq
 40814                                  ;
 40815                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 40816                                  ;
 40817                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 40818                                  ;
 40819                                  ;----------------------------------------------------------------------------
 40820                                  
 40821                                  ScanCodeSeq:
 40822                                  	mov	di,200h
 40823                                  ScanCodeSeq_di:
 40824                                  	push	cx
 40825                                  	sub	cx,dx
 40826                                  	inc	cx
 40827                                  scsagain:
 40828                                  	push	si
 40829                                  	push	di
 40830                                  	push	cx
 40831                                  	mov	cx,dx
 40832                                  	rep	cmpsb
 40833                                  	pop	cx
 40834                                  	pop	di
 40835                                  	pop	si
 40836                                  	je	short scsfound
 40837                                  	inc	di
 40838                                  	loop	scsagain
 40839                                  scsfound:
 40840                                  	pop	cx
 40841                                  vvexit:		; 18/12/2022
 40842                                  	retn
 40843                                  	
 40844                                  ;----------------------------------------------------------------------------
 40845                                  ;
 40846                                  ; VerifyVersion
 40847                                  ;
 40848                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 40849                                  ; from ES:2A.
 40850                                  ;
 40851                                  ;       Entry: AX = binary version number 
 40852                                  ;       Exit : Z flag set if version numbers match
 40853                                  ;
 40854                                  ;----------------------------------------------------------------------------
 40855                                  
 40856                                  VerifyVersion:
 40857                                  	mov	si,[es:2Ah]		; offset of version number
 40858                                  					;  in ascii
 40859                                  	mov	bl,10
 40860                                  	add	si,3			; point to last digit
 40861                                  
 40862                                  	call	VVDigit
 40863                                  	jne	short vvexit
 40864                                  	call	VVDigit
 40865                                  	jne	short vvexit
 40866                                  	cmp	byte [es:si],'.'
 40867                                  	jne	short vvexit
 40868                                  	dec	si
 40869                                  	;call	VVDigit
 40870                                  	; 18/12/2022
 40871                                  	;jmp	short VVDigit
 40872                                  ;vvexit:
 40873                                  	;retn
 40874                                  VVDigit:
 40875                                  	div	bl
 40876                                  	add	ah,'0'
 40877                                  	dec	si
 40878                                  	cmp	[es:si+1],ah
 40879                                  	mov	ah,0			; do not xor or sub we need Z
 40880                                  	retn
 40881                                  
 40882                                  %endif
 40883                                  
 40884                                  ;-----------------------------------------------------------------------
 40885                                  
 40886                                  ; 23/05/2019 - Retro DOS v4.0
 40887                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 40888                                  
 40889                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40890                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 40891                                  
 40892                                  exepatch_start:	 ; label byte
 40893                                  
 40894                                  	; The following is the code that'll be layed over the buggy unpack
 40895                                  	; code.
 40896                                  str1:
 40897 00007420 06                      	db  06h	  		;push	es		 
 40898 00007421 8CD8                    	db  8Ch,0D8h		;mov	ax,ds 
 40899                                  
 40900                                  first_stop equ	$-str1
 40901                                  			
 40902 00007423 2BC2                    	db  2Bh, 0C2h		;sub	ax, dx			
 40903                                  
 40904                                  first:  ; label	byte
 40905                                  
 40906 00007425 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40907 00007427 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40908 00007429 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40909 0000742C 57                      	db  57h	    		;push	di
 40910 0000742D B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40911 00007430 B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH 		
 40912 00007432 F3AE                    	db  0F3h,0AEh 		;repz	scasb			
 40913 00007434 47                      	db  47h	    		;inc	di			
 40914 00007435 8BF7                    	db  8Bh,0F7h  		;mov	si,di			
 40915 00007437 5F                      	db  5Fh	    		;pop	di
 40916 00007438 58                      	db  58h	    		;pop	ax
 40917                                  
 40918                                  second_stop equ	$-first
 40919                                  
 40920 00007439 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx			
 40921                                  
 40922                                  second: ; label	byte
 40923                                  
 40924 0000743B 8EC0                    	db  8Eh,0C0h  		;mov	es,ax			
 40925                                  		    		;NextRec:				
 40926 0000743D B90402                  	db  0B9h,04h,02h	;mov	cx, 0204h
 40927                                  		    		;norm_agn:				
 40928 00007440 8BC6                    	db  8Bh,0C6h		;mov	ax,si			
 40929 00007442 F7D0                    	db  0F7h,0D0h		;not	ax		
 40930 00007444 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40931 00007446 7413                    	db  74h,13h		;jz	short SI_ok			
 40932 00007448 8CDA                    	db  8Ch,0DAh		;mov	dx,ds			
 40933 0000744A 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 40934 0000744D 2BD0                    	db  2Bh,0D0h		;sub	dx,ax			
 40935 0000744F 7308                    	db  73h,08h		;jnc	short SItoDS			
 40936 00007451 F7DA                    	db  0F7h,0DAh		;neg	dx			
 40937 00007453 D3E2                    	db  0D3h,0E2h		;shl	dx,cl			
 40938 00007455 2BF2                    	db  2Bh,0F2h		;sub	si,dx			
 40939 00007457 33D2                    	db  33h,0D2h		;xor	dx,dx			
 40940                                  				;SItoDS: 				
 40941 00007459 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40942                                  				;SI_ok:					
 40943 0000745B 87F7                    	db  87h,0F7h		;xchg	si,di			
 40944 0000745D 1E                      	db  1Eh			;push	ds			
 40945 0000745E 06                      	db  06h			;push	es			
 40946 0000745F 1F                      	db  1Fh			;pop	ds			
 40947 00007460 07                      	db  07h			;pop	es			
 40948 00007461 FECD                    	db  0FEh,0CDh		;dec	ch			
 40949 00007463 75DB                    	db  75h,0DBh		;jnz	short norm_agn		
 40950 00007465 AC                      	db  0ACh		;lodsb			
 40951 00007466 92                      	db  92h			;xchg	dx,ax
 40952 00007467 4E                      	db  4Eh			;dec	si
 40953 00007468 AD                      	db  0ADh		;lodsw			
 40954 00007469 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 40955 0000746B 46                      	db  46h			;inc	si		
 40956 0000746C 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 40957 0000746E 24FE                    	db  24h,0FEh		;and	al,0FEH		
 40958 00007470 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 40959 00007472 7505                    	db  75h,05h		;jne	short TryEnum
 40960 00007474 AC                      	db  0ACh		;lodsb				
 40961 00007475 F3AA                    	db  0F3h,0AAh		;rep stosb			
 40962                                  
 40963                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 40964 00007477 EB06                    	db  0EBh,06h		;jmp	short TryNext
 40965                                  
 40966                                  				;TryEnum:
 40967 00007479 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 40968 0000747B 756C                    	db  75h,6Ch		;jne	short CorruptExe		
 40969 0000747D F3A4                    	db  0F3h,0A4h		;rep movsb			
 40970                                  				;TryNext:
 40971                                  
 40972 0000747F 92                      	db  92h			;xchg	dx,ax
 40973                                  ;	db  8Ah,0C2h		;mov	al,dl			
 40974                                  
 40975 00007480 A801                    	db  0A8h,01h		;test	al,1			
 40976 00007482 74B9                    	db  74h,0B9h		;jz	short NextRec			
 40977 00007484 9090                    	db  90h,90h		;nop,nop
 40978                                  	
 40979                                  last_stop equ $-second
 40980                                  size_str1 equ $-str1
 40981                                  
 40982                                  	; The following is the code that we need to look for in the exe
 40983                                  	; file.
 40984                                  
 40985                                  scan_patch1: ; label byte
 40986                                  
 40987 00007486 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40988 00007488 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40989 0000748A 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 40990 0000748C 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40991 0000748E 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40992 00007490 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40993 00007493 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40994 00007496 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40995 00007498 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40996 0000749A 47                      	db  47h			;inc	di			
 40997 0000749B 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40998 0000749D 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40999 0000749F 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 41000 000074A1 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41001 000074A3 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41002                                  				;NextRec:
 41003 000074A6 B104                    	db  0B1h,04h		;mov	cl,4
 41004 000074A8 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41005 000074AA F7D0                    	db  0F7h,0D0h		;not	ax		
 41006 000074AC D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41007 000074AE 7409                    	db  74h,09h		;jz	short SI_ok
 41008 000074B0 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41009 000074B2 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41010 000074B4 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41011 000074B6 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	       
 41012                                  	       			;SI_ok:
 41013 000074B9 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41014 000074BB F7D0                    	db  0F7h,0D0h		;not	ax
 41015 000074BD D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41016 000074BF 7409                    	db  74h,09h		;jz	short DI_ok
 41017 000074C1 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41018 000074C3 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41019 000074C5 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41020 000074C7 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 41021                                  				;DI_ok:
 41022                                  
 41023                                  size_scan_patch1 equ $-scan_patch1
 41024                                  
 41025                                  scan_patch2: ; label byte
 41026                                  			
 41027 000074CA 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41028 000074CC 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41029 000074CE 48                      	db  48h			;dec	ax
 41030 000074CF 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41031 000074D1 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41032 000074D3 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41033 000074D6 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41034 000074D9 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41035 000074DB F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41036 000074DD 47                      	db  47h			;inc	di			
 41037 000074DE 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41038 000074E0 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41039 000074E2 48                      	db  48h			;dec	ax
 41040 000074E3 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41041 000074E5 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 41042                                  				;NextRec:
 41043 000074E8 B104                    	db  0B1h,04h		;mov	cl,4
 41044 000074EA 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41045 000074EC F7D0                    	db  0F7h,0D0h		;not	ax		
 41046 000074EE D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41047 000074F0 740A                    	db  74h,0Ah		;jz	short SI_ok
 41048 000074F2 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41049 000074F4 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41050 000074F6 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41051 000074F8 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 41052                                  				;or	si,0FFF0H
 41053                                  				;SI_ok:
 41054 000074FC 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41055 000074FE F7D0                    	db  0F7h,0D0h		;not	ax
 41056 00007500 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41057 00007502 740A                    	db  74h,0Ah		;jz	short DI_ok
 41058 00007504 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41059 00007506 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41060 00007508 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41061 0000750A 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 41062                                  				;or	di,0FFF0H
 41063                                  				;DI_ok:
 41064                                  
 41065                                  size_scan_patch2 equ $-scan_patch2
 41066                                  
 41067                                  scan_patch3: ; label byte
 41068                                  
 41069 0000750E 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41070 00007510 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41071 00007512 48                      	db  48h			;dec	ax
 41072 00007513 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41073 00007515 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41074 00007517 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41075 0000751A B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41076 0000751D B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41077 0000751F F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41078 00007521 47                      	db  47h			;inc	di			
 41079 00007522 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41080 00007524 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41081 00007526 48                      	db  48h			;dec	ax
 41082 00007527 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41083 00007529 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 41084                                  				;NextRec:
 41085 0000752C B104                    	db  0B1h,04h		;mov	cl,4
 41086 0000752E 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41087 00007530 F7D0                    	db  0F7h,0D0h		;not	ax		
 41088 00007532 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41089 00007534 7409                    	db  74h,09h		;jz	short SI_ok
 41090 00007536 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41091 00007538 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41092 0000753A 8EDA                    	db  8Eh,0DAh		;mov	ds,dx	
 41093 0000753C 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	
 41094                                  				;SI_ok:
 41095 0000753F 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41096 00007541 F7D0                    	db  0F7h,0D0h		;not	ax
 41097 00007543 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41098 00007545 7409                    	db  74h,09h		;jz	short DI_ok
 41099 00007547 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41100 00007549 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41101 0000754B 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41102 0000754D 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 41103                                  				;DI_ok:
 41104                                  
 41105                                  size_scan_patch3 equ $-scan_patch3
 41106                                  
 41107                                  scan_com: ; label byte
 41108                                  
 41109 00007550 AC                      	db  0ACh		;lodsb			
 41110 00007551 8AD0                    	db  8Ah,0D0h		;mov	dl,al		
 41111 00007553 4E                      	db  4Eh			;dec	si
 41112 00007554 AD                      	db  0ADh		;lodsw			
 41113 00007555 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 41114 00007557 46                      	db  46h			;inc	si		
 41115 00007558 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 41116 0000755A 24FE                    	db  24h,0FEh		;and	al,0FEH		
 41117 0000755C 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 41118 0000755E 7506                    	db  75h,06h		;jne	short TryEnum
 41119 00007560 AC                      	db  0ACh		;lodsb				
 41120 00007561 F3AA                    	db  0F3h,0AAh		;rep stosb			
 41121 00007563 EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 41122                                  				;TryEnum:
 41123 00007566 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 41124 00007568 756B                    	db  75h,6Bh		;jne	short CorruptExe		
 41125 0000756A F3A4                    	db  0F3h,0A4h		;rep movsb			
 41126                                  				;TryNext:
 41127 0000756C 8AC2                    	db  8Ah,0C2h		;mov	al,dl			
 41128 0000756E A801                    	db  0A8h,01h		;test	al,1			
 41129                                  ;	db  74h,0BAh		;jz	short NextRec			
 41130                                  
 41131                                  size_scan_com	equ	$-scan_com
 41132                                  
 41133                                  ;-----------------------------------------------------------------------
 41134                                  
 41135                                  ; 23/05/2019 - Retro DOS v4.0
 41136                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 41137                                  
 41138                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41139                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 41140                                  
 41141                                  ExePatch:
 41142                                  	; 28/12/2022 - Retro DOS v4.1
 41143                                  	;call	ExePackPatch
 41144                                  	;;call	word [ss:RationalPatchPtr]
 41145                                  	;retn
 41146                                  	; 28/12/2022
 41147                                  	;jmp	short ExePackPatch
 41148                                  
 41149                                  ;-----------------------------------------------------------------------
 41150                                  ;
 41151                                  ; Procedure Name 	: ExePackPatch
 41152                                  ;
 41153                                  ; Inputs	 	: DS 			-> DOSDATA
 41154                                  ;			  ES:0 			-> read in image
 41155                                  ;			  ax:cx = start cs:ip of program
 41156                                  ; Output		:		
 41157                                  ;
 41158                                  ;	1. If ES <= 0fffh
 41159                                  ;	   2. if exepack signature ('RB') found
 41160                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 41161                                  ;	       	 4. if rest of the code & checksum compares
 41162                                  ;	  	    5. overlay buggy code with code in 
 41163                                  ;		       doscode:str1.
 41164                                  ;		 6. endif
 41165                                  ;	      7. endif
 41166                                  ;	   8. endif
 41167                                  ;	9. endif
 41168                                  ;
 41169                                  ;
 41170                                  ; Uses			: NONE
 41171                                  ;
 41172                                  ;-----------------------------------------------------------------------
 41173                                  		
 41174                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41175                                  	; 23/05/2019 - Retro DOS v4.0	
 41176                                  ExePackPatch:
 41177 00007570 53                      	push	bx
 41178 00007571 8CC3                    	mov	bx,es			; bx has load segment
 41179 00007573 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 41180 00007577 7602                    	jbe	short ep_cont		; N: 
 41181 00007579 5B                      	pop	bx			; Y: no need to patch
 41182 0000757A C3                      	retn
 41183                                  ep_cont:
 41184 0000757B 1E                      	push	ds
 41185 0000757C 06                      	push	es
 41186 0000757D 50                      	push	ax
 41187 0000757E 51                      	push	cx
 41188 0000757F 56                      	push	si
 41189 00007580 57                      	push	di
 41190                                  	
 41191                                  		; M033 - start
 41192                                  		; exepacked programs have an IP of 12h (>=2)
 41193                                  
 41194 00007581 83E902                  	sub	cx,2			; Q: is IP >=2 
 41195 00007584 7303                    	jnb	short epp_1		; N: exit
 41196 00007586 E9C500                  	jmp	ep_notpacked
 41197                                  					; ax:cx now points to location of
 41198                                  					; 'RB' if this is an exepacked file.
 41199                                  		; M033 - end
 41200                                  epp_1:
 41201 00007589 89CF                    	mov	di,cx
 41202 0000758B 8EC0                    	mov	es,ax
 41203 0000758D 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in 
 41204                                  					; unpack_offset
 41205                                  
 41206 00007592 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 41207                                  	;ljne	ep_notpacked
 41208 00007597 7403                    	je	short epp_2
 41209 00007599 E9B200                  	jmp	ep_notpacked
 41210                                  epp_2:
 41211 0000759C 0E                      	push	cs
 41212 0000759D 1F                      	pop	ds			; set ds to cs
 41213                                  
 41214                                  	;add	di,6Ch
 41215 0000759E 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed 
 41216                                  					;          file where we hope to find
 41217                                  					;	   scan string. 
 41218                                  
 41219 000075A1 E8B200                  	call	chk_common_str		; check for match
 41220                                  
 41221 000075A4 7524                    	jnz	short ep_chkpatch2	; Q: does the patch match
 41222                                  					; N: check at patch2_offset
 41223                                  					; Y: check for rest of patch string
 41224 000075A6 BE[8674]                	mov	si,scan_patch1
 41225                                  					; ds:si -> scan string 
 41226 000075A9 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 41227                                  
 41228                                  	;add	di,28h
 41229                                  	; 07/12/2022
 41230 000075AE 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed 
 41231                                  					;          file where we hope to find
 41232                                  					;	   scan string. 
 41233                                  	;mov	cx,68
 41234 000075B1 B94400                  	mov	cx,size_scan_patch1
 41235                                  	;mov	bx,142
 41236 000075B4 BB8E00                  	mov	bx,CHKSUM1_LEN
 41237                                  	;mov	ax,0EF4Eh
 41238 000075B7 B84EEF                  	mov	ax,PATCH1_CHKSUM
 41239 000075BA E8AD00                  	call	chk_patchsum		; check if patch and chk sum compare
 41240 000075BD 7208                    	jc	short ep_done1		; Q: did we pass the test
 41241                                  					; N: exit
 41242                                  					; Y: overlay code with new 
 41243 000075BF BE[2074]                	mov	si,str1
 41244                                  	;mov	cx,102
 41245 000075C2 B96600                  	mov	cx,size_str1
 41246                                  	
 41247 000075C5 F3A4                    	rep	movsb
 41248                                  ep_done1:
 41249 000075C7 E98400                  	jmp	ep_done
 41250                                  
 41251                                  ep_chkpatch2:
 41252                                  	;mov	di,76h
 41253 000075CA BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 41254                                  					; in another version of unpack
 41255 000075CD E88600                  	call	chk_common_str		; check for match
 41256                                  
 41257 000075D0 7544                    	jnz	short ep_chkpatch3	; Q: does the patch match
 41258                                  					; N: check for patch3_offset
 41259                                  					; Y: check for rest of patch string
 41260                                  
 41261 000075D2 BE[CA74]                	mov	si,scan_patch2
 41262                                  					; ds:si -> scan string 
 41263                                  	;mov	di,32h
 41264 000075D5 BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed 
 41265                                  					;          file where we hope to find
 41266                                  	;mov	cx,68			;	   scan string. 
 41267 000075D8 B94400                  	mov	cx,size_scan_patch2
 41268                                  	;mov	bx,140
 41269 000075DB BB8C00                  	mov	bx,CHKSUM2_LEN
 41270                                  	;mov	ax,78B2h
 41271 000075DE B8B278                  	mov	ax,PATCH2_CHKSUM
 41272 000075E1 E88600                  	call	chk_patchsum		; check if patch and chk sum compare
 41273                                  
 41274                                  					; M046 - Start
 41275                                  					; Q: did we pass the test
 41276 000075E4 7311                    	jnc	short ep_patchcode2		; Y: overlay code with new 
 41277                                  					; N: try with a different chksum
 41278                                  
 41279                                  
 41280 000075E6 BE[CA74]                	mov	si,scan_patch2
 41281                                  					; ds:si -> scan string 
 41282                                  	;mov	cx,68
 41283 000075E9 B94400                  	mov	cx,size_scan_patch2
 41284                                  	;mov	bx,129
 41285 000075EC BB8100                  	mov	bx,CHKSUM2A_LEN
 41286                                  	;mov	ax,1C47h
 41287 000075EF B8471C                  	mov	ax,PATCH2A_CHKSUM
 41288 000075F2 E87500                  	call	chk_patchsum		; check if patch and chk sum compare
 41289                                  					; Q: did we pass the test
 41290 000075F5 7257                    	jc	short ep_notpacked		; N: try with a different chksum
 41291                                  					; Y: overlay code with new 
 41292                                  						
 41293                                  ep_patchcode2:			       	; M046 - End
 41294 000075F7 BE[2074]                	mov	si,str1
 41295                                  	;mov	cx,3
 41296 000075FA B90300                  	mov	cx,first_stop
 41297 000075FD F3A4                    	rep	movsb
 41298 000075FF B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 41299 00007602 AB                      	stosw
 41300 00007603 83C602                  	add	si,2
 41301                                  	;mov	cx,20
 41302 00007606 B91400                  	mov	cx,second_stop
 41303 00007609 F3A4                    	rep	movsb
 41304 0000760B AB                      	stosw				; put in dec ax and nop
 41305 0000760C 83C602                  	add	si,2
 41306                                  	;mov	cx,75
 41307 0000760F B94B00                  	mov	cx,last_stop
 41308 00007612 F3A4                    	rep	movsb
 41309 00007614 EB38                    	jmp	short ep_done
 41310                                  
 41311                                  ep_chkpatch3:
 41312                                  	;mov	di,74h
 41313 00007616 BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 41314                                  					; in another version of unpack
 41315 00007619 E83A00                  	call	chk_common_str		; check for match
 41316                                  
 41317 0000761C 7530                    	jnz	short ep_notpacked	; Q: does the patch match
 41318                                  					; N: exit
 41319                                  					; Y: check for rest of patch string
 41320 0000761E BE[0E75]                	mov	si,scan_patch3
 41321                                  					; ds:si -> scan string 
 41322                                  	;mov	di,32h
 41323 00007621 BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed 
 41324                                  					;          file where we hope to find
 41325                                  					;	   scan string. 
 41326                                  	;mov	cx,66
 41327 00007624 B94200                  	mov	cx,size_scan_patch3
 41328                                  	;mov	bx,139
 41329 00007627 BB8B00                  	mov	bx,CHKSUM3_LEN
 41330                                  	;mov	ax,4EDEh
 41331 0000762A B8DE4E                  	mov	ax,PATCH3_CHKSUM
 41332 0000762D E83A00                  	call	chk_patchsum		; check if patch and chk sum compare
 41333 00007630 721C                    	jc	short ep_notpacked	; Q: did we pass the test
 41334                                  					; N: exit
 41335                                  					; Y: overlay code with new 
 41336 00007632 BE[2074]                	mov	si,str1
 41337                                  	;mv	cx,3
 41338 00007635 B90300                  	mov	cx,first_stop
 41339 00007638 F3A4                    	rep	movsb
 41340 0000763A B048                    	mov	al,48h			; al = opcode for dec ax
 41341 0000763C AA                      	stosb
 41342 0000763D 83C602                  	add	si,2
 41343                                  	;mov	cx,20
 41344 00007640 B91400                  	mov	cx,second_stop
 41345 00007643 F3A4                    	rep	movsb
 41346 00007645 AA                      	stosb				; put in dec ax
 41347 00007646 83C602                  	add	si,2
 41348                                  	;mov	cx,75
 41349 00007649 B94B00                  	mov	cx,last_stop
 41350 0000764C F3A4                    	rep	movsb
 41351                                  
 41352                                  ep_notpacked:
 41353                                  	;stc
 41354                                  ep_done:
 41355 0000764E 5F                      	pop	di
 41356 0000764F 5E                      	pop	si
 41357 00007650 59                      	pop	cx
 41358 00007651 58                      	pop	ax
 41359 00007652 07                      	pop	es
 41360 00007653 1F                      	pop	ds
 41361 00007654 5B                      	pop	bx
 41362 00007655 C3                      	retn
 41363                                  
 41364                                  ;-------------------------------------------------------------------------
 41365                                  ;
 41366                                  ; 	Procedure Name	: chk_common_str
 41367                                  ;
 41368                                  ;	Input		: DS = DOSCODE
 41369                                  ;			; ES:DI points to string in packed file
 41370                                  ;
 41371                                  ;	Output		; Z if match else NZ
 41372                                  ;
 41373                                  ;-------------------------------------------------------------------------
 41374                                  
 41375                                  	; 23/05/2019 - Retro DOS v4.0
 41376                                  chk_common_str:
 41377 00007656 BE[5075]                	mov	si,scan_com
 41378                                  					; ds:si -> scan string 
 41379                                  	;mov	cx,32
 41380 00007659 B92000                  	mov	cx,size_scan_com
 41381                                  
 41382 0000765C F3A6                    	repe	cmpsb	       
 41383                                  
 41384                                  					; M046 - start
 41385                                  	; a fourth possible version of these exepacked programs have a 
 41386                                  	; 056h instead of 06Bh. See scan_com above
 41387                                  	;
 41388                                  	; 	db  75h, 6Bh		;jne CorruptExe		
 41389                                  	;
 41390                                  	; If the mismatch at this point is due to a 56h instead of 6Bh 
 41391                                  	; we shall try to match the rest of the string
 41392                                  	;
 41393                                  
 41394 0000765E 7409                    	jz	short ccs_done
 41395 00007660 26807DFF56              	cmp	byte [es:di-1],56h
 41396 00007665 7502                    	jnz	short ccs_done
 41397                                  
 41398 00007667 F3A6                    	repe	cmpsb	    
 41399                                  ccs_done:				; M046 - end
 41400 00007669 C3                      	retn
 41401                                  
 41402                                  ;-------------------------------------------------------------------------
 41403                                  ;
 41404                                  ;	Procedure Name	: chk_patchsum
 41405                                  ;
 41406                                  ;	Input		: DS:SI -> string we're looking for
 41407                                  ;			: ES:DI -> offset in packed file
 41408                                  ;			: CX 	= scan length
 41409                                  ;			: BX	= length of check sum
 41410                                  ;			: AX 	= value of check sum
 41411                                  ;
 41412                                  ;	Output		: if patch & check sum compare
 41413                                  ;				NC
 41414                                  ;			  else
 41415                                  ;				CY
 41416                                  ;
 41417                                  ;	Uses		: AX, BX, CX, SI
 41418                                  ;
 41419                                  ;-------------------------------------------------------------------------
 41420                                  
 41421                                  	; 23/05/2019 - Retro DOS v4.0
 41422                                  chk_patchsum:
 41423 0000766A 57                      	push	di
 41424                                  
 41425 0000766B F3A6                    	repe	cmpsb			   
 41426                                  
 41427 0000766D 7518                    	jnz	short cp_fail		; Q: does the patch match
 41428                                  					; N: exit
 41429                                  					; Y:	
 41430                                  
 41431                                  		; we do a check sum starting from the location of the 
 41432                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 41433                                  		; unpacking code.
 41434                                  
 41435 0000766F 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 41436 00007674 89D9                    	mov	cx,bx			; cx = length of check sum
 41437                                  
 41438 00007676 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 41439 00007678 31C0                    	xor	ax,ax
 41440                                  ep_chksum:
 41441 0000767A 260305                  	add	ax,[es:di]
 41442 0000767D 83C702                  	add	di,2
 41443 00007680 E2F8                    	loop	ep_chksum
 41444                                  
 41445 00007682 5F                      	pop	di			; restore di
 41446                                  
 41447 00007683 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 41448                                  	;jne	short cp_fail		; N: exit
 41449                                  					; Y: 
 41450                                  	; 25/09/2023
 41451                                  	;clc	
 41452                                  	;retn
 41453 00007685 74E2                    	je	short ccs_done ; cf=0
 41454                                  	
 41455                                  cp_fail:
 41456 00007687 F9                      	stc
 41457 00007688 C3                      	retn
 41458                                  
 41459                                  ; 28/12/2022 - Retro DOS v4.1
 41460                                  %if 0
 41461                                  ;--------------------------------------------------------------------------- 
 41462                                  
 41463                                  
 41464                                  ; M020 : BEGIN
 41465                                  ;
 41466                                  ;---------------------------------------------------------------------------
 41467                                  ;
 41468                                  ; procedure : RationalPatch
 41469                                  ;
 41470                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 41471                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 41472                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 41473                                  ;
 41474                                  ; THE BUG is in the following code sequence:
 41475                                  ;
 41476                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 41477                                  ;90		even				; word align
 41478                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 41479                                  ;e8 xx xx	call	set_A20			; enable A20
 41480                                  ;
 41481                                  ; This patch routine replaces the mov & the loop with a far call into a
 41482                                  ; routine in DOS data segment which is in low memory (because A20 line
 41483                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 41484                                  ; a mov & loop.
 41485                                  ;
 41486                                  ; Identification of Buggy Rational EXE
 41487                                  ; ====================================
 41488                                  ;
 41489                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 41490                                  ;
 41491                                  ; OFFSET				Contains
 41492                                  ; ------				--------
 41493                                  ; 0000h			100 times Version number in binary
 41494                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 41495                                  ;
 41496                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 41497                                  ;
 41498                                  ; 002ah			offset where version number is stored in ASCII
 41499                                  ;				e.g. '3.48A'
 41500                                  ;
 41501                                  ; 0030h			offset of copyright string. Copyright strings either
 41502                                  ;			start with "DOS/16M Copyright...." or
 41503                                  ;			"Copyright.....". The string contains
 41504                                  ;			"Rational Systems, Inc."
 41505                                  ;
 41506                                  ; 0020h			word : Paragraph offset of the buggy code segment
 41507                                  ;				from the program image
 41508                                  ; 0016h			word : size of buggy code segment
 41509                                  ;
 41510                                  ;	Buggy code is definite to start after offset 200h in its segment
 41511                                  ;
 41512                                  ;----------------------------------------------------------------------------
 41513                                  
 41514                                  ; 23/05/2019 - Retro DOS v4.0
 41515                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 41516                                  
 41517                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41518                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 41519                                  
 41520                                  RScanPattern1:
 41521                                  	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 41522                                  
 41523                                  RLen1 equ $ - RScanPattern1
 41524                                  
 41525                                  RScanPattern2:
 41526                                  	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 41527                                  
 41528                                  RLen2 equ $ - RScanPattern2
 41529                                  
 41530                                  RScanPattern3:
 41531                                  	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 41532                                  
 41533                                  RLen3 equ $ - RScanPattern2
 41534                                  
 41535                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 41536                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 41537                                  
 41538                                  ;----------------------------------------------------------------------------
 41539                                  ;
 41540                                  ; INPUT : ES = segment where program got loaded
 41541                                  ;
 41542                                  ;----------------------------------------------------------------------------
 41543                                  
 41544                                  RationalPatch:
 41545                                  	cld
 41546                                  	push	ax
 41547                                  	push	bx
 41548                                  	push	cx
 41549                                  	push	dx
 41550                                  	push	si
 41551                                  	push	di
 41552                                  	push	es
 41553                                  	push	ds			; we use all of them
 41554                                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 41555                                  	push	cs
 41556                                  	pop	ds
 41557                                  	
 41558                                  	mov	si,RScanPattern1
 41559                                  	;mov	cx,10
 41560                                  	mov	cx,RLen1
 41561                                  	rep	cmpsb			; do we have the pattern ?
 41562                                  	jne	short rpexit
 41563                                  	mov	ax,[es:0]
 41564                                  	cmp	ax,348			; is it a buggy version ?
 41565                                  	jb	short rpexit
 41566                                  	cmp	ax,383			; is it a buggy version
 41567                                  	ja	short rpexit
 41568                                  
 41569                                  	call	VerifyVersion
 41570                                  	jne	short rpexit
 41571                                  
 41572                                  	mov	cx,[es:16h]		; Length of buggy code seg
 41573                                  	sub	cx,200h			; Length we search (we start
 41574                                  					;  at offset 200h)
 41575                                  	mov	es,[es:20h]		; es=buggy code segment
 41576                                  	mov	si,RScanPattern2
 41577                                  	;mov	dx,8	
 41578                                  	mov	dx,RLen2
 41579                                  	call	ScanCodeSeq		; look for code seq with nop
 41580                                  	jz	short rpfound
 41581                                  
 41582                                  	mov	si,RScanPattern3
 41583                                  	;mov	dx,15
 41584                                  	mov	dx,RLen3
 41585                                  	call	ScanCodeSeq		; look for code seq w/o nop
 41586                                  	jnz	short rpexit
 41587                                  
 41588                                  rpfound:
 41589                                  	
 41590                                  ;	we set up a far call into DOS data
 41591                                  ;	dx has the length of the code seq we were searching for
 41592                                  
 41593                                  	mov	al,9Ah			; far call opcode
 41594                                  	stosb
 41595                                  	mov	ax,RatBugCode
 41596                                  	stosw
 41597                                  	mov	ax,ss
 41598                                  	stosw
 41599                                  	mov	cx,dx
 41600                                  	sub	cx,6			; filler (with NOPs)
 41601                                  	mov	al,90h
 41602                                  	rep	stosb
 41603                                  rpexit:
 41604                                  	pop	ds
 41605                                  	pop	es
 41606                                  	pop	di
 41607                                  	pop	si
 41608                                  	pop	dx
 41609                                  	pop	cx
 41610                                  	pop	bx
 41611                                  	pop	ax
 41612                                  	retn
 41613                                  
 41614                                  ; M020 END
 41615                                  
 41616                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41617                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41618                                  
 41619                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 41620                                  
 41621                                  ;----------------------------------------------------------------------------
 41622                                  ;
 41623                                  ; ScanCodeSeq
 41624                                  ;
 41625                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41626                                  ;
 41627                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41628                                  ;
 41629                                  ;----------------------------------------------------------------------------
 41630                                  
 41631                                  ScanCodeSeq:
 41632                                  	; 17/12/2022
 41633                                  	mov	di,200h
 41634                                  ;ScanCodeSeq_di:
 41635                                  	push	cx
 41636                                  	sub	cx,dx
 41637                                  	inc	cx
 41638                                  	; 17/12/2022
 41639                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41640                                  	;mov	di,200h
 41641                                  scsagain:
 41642                                  	push	si
 41643                                  	push	di
 41644                                  	push	cx
 41645                                  	mov	cx,dx
 41646                                  	rep	cmpsb
 41647                                  	pop	cx
 41648                                  	pop	di
 41649                                  	pop	si
 41650                                  	je	short scsfound
 41651                                  	inc	di
 41652                                  	loop	scsagain
 41653                                  scsfound:
 41654                                  	pop	cx
 41655                                  vvexit:		; 18/12/2022
 41656                                  	retn
 41657                                  
 41658                                  
 41659                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41660                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41661                                  
 41662                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 41663                                  
 41664                                  ;----------------------------------------------------------------------------
 41665                                  ;
 41666                                  ; VerifyVersion
 41667                                  ;
 41668                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41669                                  ; from ES:2A.
 41670                                  ;
 41671                                  ;       Entry: AX = binary version number 
 41672                                  ;       Exit : Z flag set if version numbers match
 41673                                  ;
 41674                                  ;----------------------------------------------------------------------------
 41675                                  
 41676                                  VerifyVersion:
 41677                                  	mov	si,[es:2Ah]		; offset of version number
 41678                                  					;  in ascii
 41679                                  	mov	bl,10
 41680                                  	add	si,3			; point to last digit
 41681                                  
 41682                                  	call	VVDigit
 41683                                  	jne	short vvexit
 41684                                  	call	VVDigit
 41685                                  	jne	short vvexit
 41686                                  	cmp	byte [es:si],'.' ; 2Eh
 41687                                  	jne	short vvexit
 41688                                  	dec	si
 41689                                  	;call	VVDigit
 41690                                  	; 18/12/2022
 41691                                  	;jmp	short VVDigit
 41692                                  ;vvexit:
 41693                                  	;retn
 41694                                  VVDigit:
 41695                                  	div	bl
 41696                                  	add	ah,'0' ; 30h
 41697                                  	dec	si
 41698                                  	cmp	[es:si+1],ah
 41699                                  	mov	ah,0			; do not xor or sub we need Z
 41700                                  	retn
 41701                                  
 41702                                  ;--------------------------------------------------------------------------- 
 41703                                  %endif	; 28/12/2022
 41704                                  
 41705                                  ;---------------------------------------------------------------------------
 41706                                  ;
 41707                                  ;	M068
 41708                                  ;
 41709                                  ; 	Procedure Name	: IsCopyProt
 41710                                  ;
 41711                                  ;	Inputs		: DS:100 -> start of com file just read in
 41712                                  ;
 41713                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 41714                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 41715                                  ;			  copy protect scheme that relies on the A20 line
 41716                                  ;			  being turned off for it's scheme to work.
 41717                                  ;
 41718                                  ;			  Note: The int 21 function dispatcher will turn 
 41719                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 41720                                  ;				and dec the A20OFF_COUNT before	iretting 
 41721                                  ;				to the user. 
 41722                                  ;
 41723                                  ;	Uses		: ES, DI, SI, CX
 41724                                  ;
 41725                                  ;---------------------------------------------------------------------------
 41726                                  
 41727                                  ; 23/05/2019 - Retro DOS v4.0
 41728                                  
 41729                                  CPStartOffset	EQU	0175h
 41730                                  CPID1Offset	EQU	011Bh
 41731                                  CPID2Offset	EQU	0173h
 41732                                  CPID3Offset	EQU	0146h
 41733                                  CPID4Offset	EQU	0124h
 41734                                  ID1		EQU	05343h
 41735                                  ID2		EQU	05044h
 41736                                  ID3		EQU	0F413h
 41737                                  ID4		EQU	08000h
 41738                                  
 41739                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 41740                                  
 41741                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41742                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 41743                                  
 41744                                  CPScanPattern:
 41745 00007689 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 41746 0000768D 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 41747 00007691 C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 41748 00007697 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 41749 0000769B B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 41750 0000769E BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 41751                                  
 41752                                  CPSPlen	EQU $ - CPScanPattern
 41753                                  
 41754                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 41755                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 41756                                  
 41757                                  IsCopyProt:
 41758 000076A1 813E1B014353            	cmp	word [CPID1Offset],ID1
 41759 000076A7 752D                    	jne	short CP_done
 41760                                  
 41761 000076A9 813E73014450            	cmp	word [CPID2Offset],ID2
 41762 000076AF 7525                    	jne	short CP_done
 41763                                  
 41764 000076B1 813E460113F4            	cmp	word [CPID3Offset],ID3
 41765 000076B7 751D                    	jne	short CP_done
 41766                                  
 41767 000076B9 813E24010080            	cmp	word [CPID4Offset],ID4
 41768 000076BF 7515                    	jne	short CP_done
 41769                                  
 41770 000076C1 0E                      	push	cs
 41771 000076C2 07                      	pop	es
 41772 000076C3 BF[8976]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 41773                                  
 41774 000076C6 BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 41775                                  					; of pattern
 41776                                  
 41777 000076C9 B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 41778 000076CC F3A6                    	repe	cmpsb
 41779 000076CE 7506                    	jnz	short CP_done
 41780                                  
 41781 000076D0 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 41782                                  CP_done:
 41783 000076D6 C3                      	retn
 41784                                  	
 41785                                  ;DOSCODE ENDS
 41786                                  
 41787                                  	;END
 41788                                  
 41789                                  ;----------------------------------------------------------------------------
 41790                                  
 41791                                  ;align 2 ; 05/09/2018 (Error!)
 41792                                  
 41793                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41794                                  ;align 16 ; 08/09/2018 (OK.)
 41795 000076D7 90                      align 2
 41796                                  
 41797                                  ; 06/08/2018 - Retro DOS v3.0
 41798                                  ;============================================================================
 41799                                  ; MSINIT.ASM
 41800                                  ;============================================================================
 41801                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 41802                                  ;
 41803                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41804                                  ;
 41805                                  	; 15/07/2018 - Retro DOS v3.0
 41806                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 41807                                  
 41808                                  ; temp iret instruction
 41809                                  
 41810                                  
 41811                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41812                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 41813                                  
 41814                                  initiret: ; MSDOS 6.0
 41815                                  SYSBUF:
 41816                                  ;IRETT: ; 06/05/2019
 41817 000076D8 CF                      	iret
 41818                                  
 41819                                  ; 22/04/2019 - Retro DOS v4.0
 41820                                  
 41821                                  ; pointer to the BIOS data segment that will be available just to the
 41822                                  ; initialization code
 41823                                  
 41824 000076D9 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 41825                                  
 41826                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41827                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 41828                                  
 41829                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 41830                                  
 41831                                  ParaRound:
 41832 000076DB 83C00F                  	add	ax, 15
 41833 000076DE D1D8                    	rcr	ax, 1
 41834 000076E0 D1E8                    	shr	ax, 1
 41835 000076E2 D1E8                    	shr	ax, 1
 41836 000076E4 D1E8                    	shr	ax, 1
 41837 000076E6 C3                      	retn
 41838                                  
 41839                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41840                                  
 41841                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41842                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 41843                                  	
 41844                                  	; 30/05/2019
 41845                                  	; 22/04/2019 - Retro DOS v4.0
 41846                                  	; 07/07/2018 - Retro DOS v3.0
 41847                                  	; Retro DOS v2.0 - 03/03/2018
 41848                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41849                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 41850                                  DOSINIT:
 41851                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 41852                                  	;
 41853                                  	; Far call from SYSINIT
 41854                                  	; DX = Memory size in paragraphs
 41855                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 41856                                  	;	  (Retro DOS v2.0, 16/03/2018)
 41857                                  	;
 41858                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 41859                                  	;	  (Retro DOS v4.0, 20/04/2019)
 41860                                  
 41861 000076E7 FA                              CLI
 41862 000076E8 FC                              CLD
 41863                                  
 41864                                  	; 03/11/2022
 41865                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 41866                                  	
 41867                                  	; 17/12/2022
 41868                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41869                                  	;push	dx ; =*=		; save parameters from BIOS
 41870                                  	
 41871 000076E9 56                      	push	si
 41872 000076EA 1E                      	push	ds
 41873 000076EB 57                      	push	di			;save di (ptr to BiosComBlock)
 41874                                  
 41875 000076EC 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 41876                                  
 41877                                  ; First, move the DOS data segment to its final location in low memory
 41878                                  
 41879                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 41880                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h	
 41881 000076EE B8[687B]                	mov	ax,MEMSTRT		; get offset of end of init code
 41882                                  
 41883                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 41884                                  	;and	ax,~15	; 0FFF0h	; boundary
 41885                                  
 41886                                  	;mov	si,ax			; si = offset of DOSDATA in current 
 41887                                  					; code segment
 41888                                  
 41889                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41890 000076F1 83C00F                  	add	ax,15			; round to nearest paragraph
 41891 000076F4 83E0F0                  	and	ax,~15			; boundary
 41892                                  
 41893 000076F7 89C6                    	mov	si,ax			; si = offset of DOSDATA in current 
 41894                                  					; code segment
 41895                                  	; 05/12/2022
 41896                                  	; 30/04/2019 - Retro DOS v4.0
 41897                                  	;xor	si,si
 41898                                  	
 41899 000076F9 8CC8                    	mov	ax,cs
 41900 000076FB 8ED8                    	mov	ds,ax			; ds = current code segment
 41901                                  					; DS:SI now points to dosdata
 41902                                  
 41903                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 41904                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 41905                                  					;  BData segment. Cannot use
 41906                                  					;  getdseg macro here!!!
 41907                                  	; 17/12/2022
 41908 000076FD 8E06[D976]              	mov	es,[InitBioDataSeg]
 41909                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41910                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 41911                                  
 41912                                  	;mov	es,[es:3]
 41913 00007701 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 41914                                  
 41915 00007706 31FF                    	xor	di,di			; ES:DI now points to RAM data
 41916                                  
 41917                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 41918                                  	;mov	cx,4976  ; 25/05/2019
 41919                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41920                                  	;mov	cx,4962
 41921                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 41922 00007708 B9AA12                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 41923 0000770B F3A4                    	rep	movsb			; move data to final location
 41924                                  	
 41925 0000770D 5F                      	pop	di			; restore ptr to BiosComBlock
 41926 0000770E 1F                      	pop	ds			; restore parms from BIOS
 41927 0000770F 5E                      	pop	si
 41928                                  	; 17/12/2022
 41929                                  	;pop	dx ; 30/05/2019	
 41930                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41931                                  	;pop	dx ; =*=		
 41932                                  
 41933 00007710 06                      	push	es
 41934 00007711 1E                      	push	ds
 41935 00007712 07                      	pop	es			; es:si -> device chain
 41936 00007713 1F                      	pop	ds			; ds points to dosdata
 41937                                  
 41938                                  ;SR;
 41939                                  ;We get a ptr to the BIOS exchange data block. This has been setup right 
 41940                                  ;now so that the EXEC call knows when SysInit is present to do the special
 41941                                  ;lie table handling for device drivers. This can be expanded later on to
 41942                                  ;establish a communication block from the BIOS to the DOS.
 41943                                  
 41944                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 41945                                  	;mov	[1042h],bx
 41946 00007714 893E[4010]              	mov	[BiosDataPtr],di
 41947 00007718 891E[4210]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 41948                                  
 41949 0000771C 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 41950                                  
 41951                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 41952                                  
 41953 00007721 2E8C1E[D050]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 41954 00007726 2E8C1E[D450]            	mov	[cs:LowInt24Addr+2],ds
 41955 0000772B 2E8C1E[D850]            	mov	[cs:LowInt28Addr+2],ds
 41956                                  
 41957                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 41958                                  	;mov	[584h],sp
 41959                                  	;mov	[586h],ss
 41960 00007730 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 41961 00007734 8926[8405]              	mov	[USER_SP],sp
 41962 00007738 8C16[8605]              	mov	[USER_SS],ss
 41963                                  
 41964 0000773C 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 41965 0000773E 8ED0                    	mov	ss,ax
 41966                                  
 41967                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 41968                                  	;mov	sp,offset dosdata:dskstack
 41969 00007740 BC[2009]                	mov	sp,DSKSTACK
 41970                                  
 41971                                  ;M023
 41972                                  ; Init patch ptrs to default values
 41973                                  
 41974                                  	;mov	word [1212h],RetExePatch
 41975                                  	;mov	word [1214h],RetExePatch
 41976                                  	;mov	word [61h],RetExePatch
 41977 00007743 C706[F811][4262]        	mov	word [FixExePatch],RetExePatch	; M023
 41978                                  	; 28/12/2022 - Retro DOS v4.1
 41979                                  	;mov	word [RationalPatchPtr],RetExePatch ; M023
 41980 00007749 C706[6100][4262]        	mov	word [ChkCopyProt],RetExePatch	; M068
 41981                                  
 41982                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41983                                  %if 0	
 41984                                  
 41985                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 41986                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 41987                                  ; running in the HMA.
 41988                                  
 41989                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 41990                                  	cmp	al,2		;   386 or later?
 41991                                  	mov	ax,Rational386Patch
 41992                                  	jae	short di_set_patch
 41993                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 41994                                  di_set_patch:
 41995                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 41996                                  
 41997                                  %endif
 41998                                  	; Set up the variable temp_dosloc to point to the dos code segment
 41999                                  
 42000 0000774F 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 42001                                  
 42002                                  	; ax now holds segment of DOS code
 42003 00007751 A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 42004                                  
 42005 00007754 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 42006 00007758 8936[4800]              	mov	word [NULDEV],si
 42007                                  ;SR;
 42008                                  ; There are some locations in the Win386 instance data structures
 42009                                  ; which need to be set up with the DOS data segment. First, initialize
 42010                                  ; the segment part of the instance table pointer in the SIS.
 42011                                  
 42012                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]	
 42013 0000775C 8C1E[F20F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 42014                                  
 42015                                  ; Now initialize the segment part of the pointer to the data in each
 42016                                  ; instance table entry.
 42017                                  
 42018 00007760 56                      	push	si		; preserve pointer to device chain
 42019                                  	; 18/12/2022
 42020                                  	; cx = 0
 42021 00007761 B107                    	mov	cl,7
 42022                                  	;mov	cx,7		; There are 7 entries in the instance table
 42023                                  				; M019
 42024                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 42025 00007763 BE[F60F]                	mov	si,Instance_Table+2 ; point si to segment field
 42026                                  Instance_init_loop:
 42027 00007766 8C1C                    	mov	[si],ds		; set offset in instance entry
 42028                                  	;add	si,6
 42029 00007768 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 42030 0000776B E2F9                    	loop	Instance_init_loop
 42031                                  
 42032                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 42033                                  
 42034                                  	; 18/12/2022
 42035 0000776D B105                    	mov	cl,5
 42036                                  	;mov	cx,5		; There are five entries in the instance table
 42037                                  
 42038                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 42039                                  	;mov	si,11EDh	; point si to segment field
 42040 0000776F BE[D311]                	mov	si,OldInstanceJunk+6
 42041                                  OldInstance_init_loop:
 42042 00007772 8C1C                    	mov	[si],ds		; set offset in instance entry
 42043 00007774 83C606                  	add	si,6		; move on to next entry
 42044 00007777 E2F9                    	loop	OldInstance_init_loop
 42045 00007779 5E                      	pop	si		; restore pointer to device chain
 42046                                  
 42047                                  ; End of WIN386 2.xx compatibility bullshit
 42048                                  
 42049                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42050                                  %if 0	
 42051                                     	; 30/04/2019
 42052                                  	;push	es
 42053                                  	;pop	ds
 42054                                  			; ds:si points to console device
 42055                                  
 42056                                  	; 24/04/2019 - Retro DOS v4.0
 42057                                  
 42058                                  	; 15/07/2018
 42059                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 42060                                  	; (Set INT 2Ah handler address to an 'IRET')
 42061                                  
 42062                                  	; need crit vector inited to use deviocall
 42063                                  	;push	ds			; preserve segment of device chain
 42064                                  	push	es ; 30/04/2019
 42065                                  
 42066                                  %endif
 42067                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42068 0000777A 06                      	push	es
 42069                                  	; 17/12/2022
 42070                                  	;pop	ds
 42071                                  	;push	ds
 42072                                  
 42073 0000777B 31C0                    	xor	ax,ax
 42074 0000777D 8ED8                    	mov	ds,ax			; point DS to int vector table
 42075 0000777F B8[D876]                	mov	ax,initiret
 42076                                  	;mov	[0A8h],ax  ; [2Ah*4]
 42077 00007782 A3A800                  	mov	[addr_int_ibm],ax
 42078 00007785 8CC8                    	mov	ax,cs
 42079                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2] 		
 42080 00007787 A3AA00                  	mov	[addr_int_ibm+2],ax
 42081 0000778A 1F                      	pop	ds			; restore segment of device chain
 42082                                  
 42083 0000778B E81C02                  	call	CHARINIT  		; initialize console driver
 42084 0000778E 56                      	push	si			; save pointer to header
 42085                                  
 42086 0000778F 16                      	push	ss			; move pointer to dos data...
 42087 00007790 07                      	pop	es			; ...into ES
 42088                                  
 42089                                  	;initialize sft for file 0 (CON)
 42090                                  
 42091                                          ; 07/07/2018 - Retro DOS v3.0
 42092                                  	; 24/04/2019 - Retro DOS v4.0
 42093                                  	;mov	di,SFTABL+6 
 42094 00007791 BF[D200]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 42095 00007794 B80300                          MOV     AX,3
 42096 00007797 AB                              STOSW           	; Refcount
 42097 00007798 FEC8                            DEC     AL
 42098 0000779A AB                              STOSW           	; Access rd/wr, compatibility
 42099 0000779B 30C0                            XOR     AL,AL
 42100 0000779D AA                              STOSB           	; attribute
 42101                                  	;mov	al,0C3h
 42102 0000779E B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 42103 000077A0 AB                      	STOSW			; flags
 42104 000077A1 89F0                            mov	ax,si
 42105 000077A3 AB                              stosw			; device pointer in devptr	
 42106 000077A4 8CD8                            mov	ax,ds
 42107 000077A6 AB                      	stosw
 42108 000077A7 31C0                    	xor	ax,ax	; 0
 42109 000077A9 AB                      	stosw			; firclus
 42110 000077AA AB                      	stosw			; time
 42111 000077AB AB                      	stosw			; date
 42112 000077AC 48                      	dec	ax	; -1
 42113 000077AD AB                      	stosw			; size
 42114 000077AE AB                      	stosw
 42115 000077AF 40                      	inc	ax	; 0
 42116 000077B0 AB                      	stosw			; position
 42117 000077B1 AB                      	stosw
 42118                                  	;add	di,7
 42119 000077B2 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 42120                                  				; point at name
 42121                                  	;add	si,10
 42122 000077B5 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 42123                                  				; point to name
 42124 000077B8 B90400                  	mov	cx,4
 42125 000077BB F3A5                    	rep	movsw		; name
 42126 000077BD B103                    	mov	cl,3
 42127 000077BF B020                    	mov	al," "
 42128 000077C1 F3AA                    	rep	stosb		; extension
 42129                                  
 42130 000077C3 5E                      	pop	si		; get back pointer to header
 42131                                  
 42132                                  				; mark device as CON I/O
 42133                                  	; 15/07/2018
 42134                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 42135 000077C4 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 42136                                  	; 12/03/2018
 42137                                  	;mov	[ss:32h],si
 42138 000077C8 368936[3200]            	MOV     [SS:BCON],SI
 42139                                  	;mov	[ss:34h],ds
 42140 000077CD 368C1E[3400]                    MOV     [SS:BCON+2],DS
 42141                                  
 42142                                  	; initialize each device until the clock device is found
 42143                                  
 42144                                  CHAR_INIT_LOOP:
 42145 000077D2 C534                            LDS     SI,[SI]			; AUX device
 42146 000077D4 E8D301                  	call	CHARINIT 
 42147                                         	;15/07/2018
 42148                                  	;test	byte [SI+4],8
 42149 000077D7 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 42150 000077DB 74F5                            JZ      SHORT CHAR_INIT_LOOP
 42151                                  	; 12/03/2018
 42152                                  	;mov	[ss:2Eh],si
 42153 000077DD 368936[2E00]                    MOV     [SS:BCLOCK],SI
 42154                                  	;mov	[ss:30h],ds
 42155 000077E2 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 42156                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 42157                                  
 42158                                  	;mov	bp,4970			; bp = pointer to free mem
 42159                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 42160                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 42161                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 42162 000077E7 BDAA12                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 42163                                  
 42164 000077EA 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 42165 000077EF 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 42166                                  PERDRV:
 42167                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 42168 000077F4 C534                            LDS	SI,[SI]			; Next device
 42169 000077F6 83FEFF                          CMP	SI,-1	; 0FFFFh
 42170 000077F9 7479                    	JZ	SHORT CONTINIT
 42171                                  
 42172 000077FB E8AC01                          call	CHARINIT
 42173                                  
 42174                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 42175                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 42176                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 42177                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 42178                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 42179                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 42180                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 42181                                  
 42182                                          ; 15/07/2018
 42183                                  	;test	word [SI+4],8000h		; DEVTYP
 42184                                          ; 17/12/2022
 42185                                  	;test	byte [SI+5],80h
 42186 000077FE F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 42187                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 42188 00007802 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 42189                                  
 42190 00007804 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 42191 00007809 30ED                    	XOR     CH,CH
 42192                                          ; 07/07/2018
 42193                                  	;MOV	[SI+10],CL		; Number of units in name field
 42194 0000780B 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 42195 0000780E 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 42196 00007813 30F6                    	XOR     DH,DH
 42197 00007815 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 42198 0000781A 1E                      	PUSH    DS
 42199 0000781B 56                              PUSH    SI
 42200 0000781C 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 42201                                  
 42202                                  PERUNIT:
 42203 00007821 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 42204 00007823 43                              INC     BX
 42205 00007824 43                              INC     BX                      ; On to next BPB
 42206                                  	; 15/12/2022
 42207                                  	; 07/07/2018
 42208                                          ;mov	[ES:BP+DPB.DRIVE],DL
 42209 00007825 26885600                	MOV     [ES:BP],DL
 42210                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42211                                  	;;mov	[ES:BP+0],DL
 42212                                  	;mov	[ES:BP+DPB.DRIVE],DL
 42213                                  
 42214                                  	;MOV	[ES:BP+1],DH
 42215 00007829 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 42216 0000782D 53                              PUSH    BX
 42217 0000782E 51                              PUSH    CX
 42218 0000782F 52                              PUSH    DX
 42219                                  
 42220                                          ;invoke	$SETDPB
 42221 00007830 E8A597                          CALL	_$SETDPB		; build DPB!
 42222                                  
 42223                                  	; 07/07/2018
 42224                                  	;MOV	AX,[ES:BP+2]
 42225 00007833 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 42226                                          ; 12/03/2018
 42227 00007837 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 42228 0000783C 7604                    	JBE     SHORT NOTMAX		; N:
 42229 0000783E 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 42230                                  NOTMAX:					
 42231                                  	; set the next dpb field in the currently built bpb
 42232                                  	; and mark as never accessed
 42233                                          
 42234                                  	; 24/04/2019
 42235 00007842 89E8                    	mov	ax,bp			; get pointer to DPB
 42236                                  	;add	ax,33
 42237 00007844 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 42238                                  					; set seg & offset of next DPB
 42239                                  	;mov	[es:bp+25],ax
 42240 00007847 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 42241                                  	;mov	[es:bp+27],es
 42242 0000784B 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 42243                                  					; mark as never accessed
 42244                                  	;mov	byte [es:bp+24],0FFh
 42245 0000784F 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 42246                                  
 42247 00007854 5A                      	POP     DX
 42248 00007855 59                              POP     CX
 42249 00007856 5B                              POP     BX
 42250 00007857 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 42251 00007859 5E                              POP     SI
 42252 0000785A 1F                              POP     DS
 42253                                  					; ds:si -> device header
 42254                                  					; store it in the corresponding dpb
 42255                                  	; 07/07/2018
 42256                                          ;MOV	[ES:BP+19],SI ; 24/04/2019
 42257 0000785B 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 42258                                          ;MOV	[ES:BP+21],DS ; 24/04/2019
 42259 0000785F 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 42260                                  
 42261 00007863 1E                              PUSH    DS			; save pointer to device header
 42262 00007864 56                              PUSH    SI
 42263 00007865 FEC6                            INC     DH			; inc unit #
 42264 00007867 FEC2                            INC     DL			; inc drive #
 42265 00007869 8ED8                            MOV     DS,AX			; restore segment of BPB array
 42266                                          ;add	bp,33 ; 24/04/2019
 42267 0000786B 83C521                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 42268 0000786E E2B1                    	LOOP    PERUNIT			; process all units in each driver
 42269                                          
 42270 00007870 5E                      	POP     SI			; restore pointer to device header
 42271 00007871 1F                              POP     DS
 42272 00007872 EB80                    	JMP	PERDRV			; process all drivers in chain
 42273                                  
 42274                                  CONTINIT:
 42275                                  	; 24/04/2019
 42276                                  	;sub	bp,33			; set link in last DPB to -1
 42277 00007874 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 42278                                  					; set last link offset & segment
 42279                                  	;mov	word [bp+25],0FFFFh
 42280 00007877 C74619FFFF              	mov	word [bp+DPB.NEXT_DPB],-1
 42281                                  	;mov	word [bp+27],0FFFFh
 42282 0000787C C7461BFFFF              	mov	word [bp+DPB.NEXT_DPB+2],-1
 42283                                  	;add	bp,33
 42284 00007881 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 42285                                  					; the DPB chain is done.  
 42286 00007884 16                      	push	ss
 42287 00007885 1F                      	pop	ds
 42288                                  
 42289 00007886 89E8                    	mov	ax,bp
 42290 00007888 E850FE                  	call	ParaRound		; round up to segment
 42291                                  
 42292 0000788B 8CDA                    	mov	dx,ds			; dx = dosdata segment
 42293 0000788D 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 42294                                  
 42295 0000788F BB0F00                  	mov	bx,0Fh
 42296                                  	
 42297                                  	; 24/05/2019
 42298                                  	;mov	cx,[ENDMEM]
 42299                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42300                                  	; 17/12/2022
 42301                                  	;mov	cx,[ENDMEM] 
 42302                                  					; set seg inpacketto dosdata					
 42303 00007892 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds 
 42304                                  
 42305                                  ; Patch in the segments of the interrupt vectors with current code segment.
 42306                                  ; Also patch in the segment of the pointers in the dosdata area.
 42307                                  ;
 42308                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 42309                                  ; calls were done. The procedure patch_misc_segments is called multiple
 42310                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 42311                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 42312                                  
 42313 00007896 52                      	push	dx			; preserve first free segment
 42314                                  
 42315 00007897 A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 42316 0000789A 8EC0                    	mov	es,ax			; es = segment of DOS
 42317 0000789C C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 42318                                  
 42319 000078A2 E8AF01                  	call	patch_vec_segments	; uses AX as doscode segment
 42320 000078A5 E8E401                  	call	patch_misc_segments	; patch in segments for sharer and 
 42321                                  					; other tables with seg in ES.
 42322                                  	; 17/12/2022
 42323                                  	; cx = 0
 42324 000078A8 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 42325                                  
 42326 000078AC 5A                      	pop	dx			; restore first free segment
 42327                                  
 42328                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 42329                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 42330                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 42331                                  ; low_mem_stub by seg_reinit.
 42332                                  
 42333                                  	;xor	ax,ax ; 0
 42334                                  	;mov	ds,ax
 42335                                  	;mov	es,ax
 42336                                  	; 17/12/2022
 42337                                  	; cx = 0
 42338                                  	;xor	cx,cx ; 0
 42339 000078AD 8ED9                    	mov	ds,cx
 42340 000078AF 8EC1                    	mov	es,cx
 42341                                  
 42342                                  	; set the segment of int 24 vector that was 
 42343                                  	; left out by patch_vec_segments above.
 42344                                  
 42345                                  	; 17/12/2022
 42346                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42347                                  ;%if 0
 42348                                  	; 24/05/2019
 42349                                  	;;mov	di,90h
 42350                                  	;;mov	di,4*int_fatal_abort
 42351                                  	;mov	di,addr_int_fatal_abort
 42352 000078B1 BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 42353                                  
 42354 000078B4 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 42355                                  	;mov	[di+2],ax  ; int 24h segment
 42356 000078B8 8905                    	mov	[di],ax ; 24/05/2019
 42357                                  
 42358                                  	;;mov	di,82h
 42359                                  	;mov	di,INTBASE+2
 42360                                  
 42361                                  ;%endif
 42362                                  	; 17/12/2022
 42363                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42364                                  	;;mov	di,90h
 42365                                  	;;mov	di,4*int_fatal_abort
 42366                                  	;mov	di,addr_int_fatal_abort
 42367                                  	;mov	ax,[ss:TEMP_DOSLOC]
 42368                                  	;mov	[di+2],ax  ; int 24h segment
 42369                                  	;;mov	di,82h
 42370                                  	;mov	di,INTBASE+2
 42371                                  
 42372                                  	; set default divide trap offset
 42373                                  
 42374                                  	;mov	word ptr ds:[0],offset doscode:divov
 42375 000078BA C7060000[AB52]          	mov	word [0],DIVOV	
 42376                                  
 42377                                  	; set vectors 20-28 and 2a-3f to point to iret.
 42378                                  
 42379                                  	;mov	di,80h
 42380 000078C0 BF8000                  	mov	di,INTBASE
 42381                                  	;mov	ax,offset doscode:irett
 42382 000078C3 B8[E102]                	mov	ax,IRETT
 42383                                  
 42384                                  	; 17/12/2022
 42385                                  	; cx = 0
 42386 000078C6 B109                    	mov	cl,9
 42387                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 42388                                  					;   sets offsets for ints 20h-28h
 42389                                  iset1:
 42390 000078C8 AB                      	stosw
 42391                                  	;add	di,2
 42392                                  	; 20/06/2023
 42393 000078C9 47                      	inc	di
 42394 000078CA 47                      	inc	di
 42395 000078CB E2FB                    	loop	iset1
 42396                                  
 42397 000078CD 83C704                  	add	di,4			; skip vector 29h
 42398                                  
 42399                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 42400                                  ;					;   sets offsets for ints 2ah-2fh
 42401                                  ;iset2:
 42402                                  ;	stosw
 42403                                  ;	add	di,2
 42404                                  ;	loop	iset2
 42405                                  
 42406                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42407                                  ; patch_vec_segments above. So skip it.
 42408                                  
 42409                                  ;	add	di,8			; skip vector 30h & 31h 
 42410                                  
 42411                                  	;;;
 42412                                  	; 06/05/2019 - Retro DOS v4.0
 42413                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 42414                                  	; 17/12/2022
 42415 000078D0 B105                    	mov	cl,5 ; 28/06/2019
 42416                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42417                                  	;mov	cx,6
 42418                                  iset2:
 42419 000078D2 AB                      	stosw
 42420                                  	;add	di,2
 42421                                  	; 20/09/2023
 42422 000078D3 47                      	inc	di
 42423 000078D4 47                      	inc	di	
 42424 000078D5 E2FB                    	loop	iset2
 42425                                  
 42426                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42427                                  	; 17/12/2022
 42428 000078D7 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 42429                                  	;add	di,8
 42430                                  	;;;
 42431                                  
 42432                                  	; 17/12/2022
 42433 000078DA B10E                    	mov	cl,14
 42434                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 42435                                  					;   sets offsets for ints 32h-3fh
 42436                                  iset3:
 42437 000078DC AB                      	stosw
 42438                                  	;add	di,2
 42439                                  	; 20/09/2023
 42440 000078DD 47                      	inc	di
 42441 000078DE 47                      	inc	di
 42442 000078DF E2FB                    	loop	iset3
 42443                                  
 42444                                  ;if installed
 42445                                  	; set the offset of int2f handler
 42446                                  	;mov	word [0BCh],INT2F
 42447 000078E1 C706BC00[0707]          	mov	word [02Fh*4],INT2F
 42448                                  	; set segment to doscode as we have to do int 2f to check for XMS
 42449 000078E7 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 42450                                  	;mov	[0BEh],ax
 42451 000078EB A3BE00                  	mov	[(02Fh*4)+2],ax
 42452                                  ;endif
 42453                                  	; set up entry point call at vectors 30-31h. Note the segment of the 
 42454                                  	; long jump will be patched in by seg_reinit
 42455                                  
 42456                                  	;mov	byte [C0h],0EAh
 42457 000078EE C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 42458                                  	;mov	byte [C1h],CALL_ENTRY
 42459 000078F3 C706C100[E202]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 42460                                  
 42461 000078F9 C7068000[DB02]          	mov	word [addr_int_abort],QUIT	; INT 20h
 42462 000078FF C7068400[0703]          	mov	word [addr_int_command],COMMAND ; INT 21h
 42463 00007905 C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 42464 0000790B 89168A00                	mov	word [addr_int_terminate+2],dx	
 42465 0000790F C7069400[3105]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 42466 00007915 C7069800[B805]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 42467 0000791B C7069C00[E561]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 42468                                  
 42469 00007921 16                      	push	ss
 42470 00007922 1F                      	pop	ds
 42471                                  	
 42472                                  	; 24/05/2019
 42473                                  	;push	ss
 42474                                  	;pop	es
 42475                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42476                                  	; 17/12/2022
 42477                                  	;push	ss
 42478                                  	;pop	es
 42479                                  
 42480 00007923 52                      	push	dx			; remember address of arena
 42481                                  
 42482 00007924 42                      	inc	dx			; leave room for arena header
 42483                                  	;mov	[330h],dx
 42484 00007925 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 42485                                  
 42486 00007929 31FF                    	xor	di,di			; point es:di at end of memory
 42487 0000792B 8EC2                    	mov	es,dx			; ...where psp will be
 42488 0000792D 31C0                    	xor	ax,ax
 42489                                  	;mov	cx,80h			; psp is 128 words
 42490                                  	; 17/12/2022
 42491 0000792F B180                    	mov	cl,128 ; 28/06/2019
 42492                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42493                                  	;mov	cx,128
 42494                                  
 42495 00007931 F3AB                    	rep	stosw			; zero out psp area
 42496 00007933 A1[4603]                        mov     ax,[ENDMEM]
 42497                                  	
 42498                                  	; 17/12/2022
 42499                                  	; cx = 0
 42500 00007936 E8EC97                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 42501                                  
 42502                                  	; ds, es now point to PSP
 42503                                  
 42504 00007939 16                      	push	ss
 42505 0000793A 1F                      	pop	ds
 42506                                  
 42507                                  	;mov	di,24
 42508 0000793B BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 42509 0000793E 31C0                    	xor	ax,ax
 42510 00007940 AB                      	stosw
 42511 00007941 AA                      	stosb				; 0,1 and 2 are con device
 42512 00007942 B0FF                    	mov	al,0FFh
 42513                                  	;mov	cx,FILPERPROC-3 ; 17
 42514                                  	; 17/12/2022
 42515                                  	; cx = 4
 42516 00007944 B111                    	mov	cl,FILPERPROC-3 ; 17
 42517 00007946 F3AA                    	rep	stosb			; rest are unused
 42518                                  
 42519 00007948 16                      	push	ss
 42520 00007949 07                      	pop	es
 42521                                  					; must be set to print messages
 42522 0000794A 8C1E[2C00]              	mov	[SFT_ADDR+2],ds     
 42523                                  
 42524                                  ; after this point the char device functions for con will work for
 42525                                  ; printing messages
 42526                                  
 42527                                  	; 24/04/2019 - Retro DOS v4.0
 42528                                  
 42529                                  ; 12/05/2019
 42530                                  ;
 42531                                  ;write_version_msg:
 42532                                  ;
 42533                                  ;	;if	(not ibm)
 42534                                  ;	;mov	si,offset doscode:header
 42535                                  ;	mov	si,HEADER
 42536                                  ;outmes:
 42537                                  ;	;lods	cs:byte ptr [si]
 42538                                  ;	cs
 42539                                  ;	lodsb
 42540                                  ;	cmp	al,"$"
 42541                                  ;	je	short outdone
 42542                                  ;	call	OUTT
 42543                                  ;	jmp	short outmes
 42544                                  ;outdone:
 42545                                  ;	push	ss			; out stomps on segments
 42546                                  ;	pop	ds
 42547                                  ;	push	ss
 42548                                  ;	pop	es
 42549                                  ;	;endif
 42550                                  
 42551                                  	; at this point es is dosdata
 42552                                  
 42553                                  	; Fill in the segment addresses of sysinitvar and country_cdpg 
 42554                                  	; in sysinittable (ms_data.asm)
 42555                                  
 42556                                  	;mov	si,0D28h
 42557 0000794E BE[280D]                	mov	si,SysInitTable
 42558                                  
 42559                                  	; 17/12/2022
 42560                                  	; ds = es = ss
 42561                                  
 42562                                  	; 17/12/2022
 42563                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42564                                  ;%if 0
 42565                                  	;;mov	[es:si+6],es
 42566                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42567                                  	;;mov	[es:si+2],es
 42568                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42569                                  	
 42570 00007951 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 42571 00007954 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 42572                                  
 42573                                  	; buffhead -> dosdata:hashinitvar 
 42574                                  
 42575                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42576 00007957 8C06[3A00]              	mov	[BUFFHEAD+2],es
 42577                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42578                                  	;mov	si,6Dh
 42579 0000795B BE[6D00]                	mov	si,HASHINITVAR
 42580                                  	;mov	[es:BUFFHEAD],si
 42581 0000795E 8936[3800]              	mov	[BUFFHEAD],si
 42582                                  
 42583 00007962 5A                              pop     dx                      ; restore address of arena
 42584                                  
 42585                                  	;mov	[032Ch+2],dx
 42586 00007963 8916[2E03]                      mov     [DMAADD+2],dx
 42587                                  
 42588                                  	;mov	[es:arena_head],dx
 42589 00007967 8916[2400]              	mov	[arena_head],dx
 42590                                  
 42591                                  ;%endif
 42592                                  
 42593                                  ; 17/12/2022
 42594                                  %if 0
 42595                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42596                                  	;;;
 42597                                  	;mov	[es:si+6],es
 42598                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42599                                  	;mov	[es:si+2],es
 42600                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42601                                  
 42602                                  	; buffhead -> dosdata:hashinitvar 
 42603                                  
 42604                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42605                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42606                                  	;mov	si,6Dh
 42607                                  	mov	si,HASHINITVAR
 42608                                  	mov	[es:BUFFHEAD],si
 42609                                  
 42610                                          pop     dx                      ; restore address of arena
 42611                                  
 42612                                  	;mov	[032Ch+2],dx
 42613                                          mov     [DMAADD+2],dx
 42614                                  
 42615                                  	mov	[es:arena_head],dx
 42616                                  	;;;
 42617                                  %endif
 42618                                  
 42619 0000796B 8EDA                            mov     ds,dx
 42620                                  
 42621                                  	;mov	byte [0],'Z'
 42622 0000796D C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 42623                                          ;mov	word [1],0
 42624 00007972 C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 42625                                  
 42626 00007978 36A1[4603]                      mov     ax,[ss:ENDMEM]
 42627 0000797C 29D0                    	sub	ax,dx
 42628 0000797E 48                              dec     ax
 42629 0000797F A30300                          mov     [ARENA.SIZE],ax
 42630                                  
 42631                                  	; point to sft 0
 42632                                  
 42633                                  	;mov	di,offset dosdata:sftabl + sftable
 42634                                  	;mov	di,SFTABL+6
 42635 00007982 BF[D200]                	mov	di,SFTABL+SFT.SFTable
 42636 00007985 B80300                          mov     ax,3
 42637 00007988 AB                              stosw           		; adjust refcount
 42638                                  
 42639                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 42640                                  
 42641                                          ;mov	di,offset dosdata:sysinittable
 42642                                  	;mov	di,0D28h
 42643 00007989 BF[280D]                	mov	di,SysInitTable	
 42644                                  
 42645 0000798C 42                      	inc	dx			; advance dx from arena to psp
 42646 0000798D 8EDA                    	mov	ds,dx			; point ds to psp
 42647                                  
 42648                                  					; pass the address os seg_reinit 
 42649                                  					; in dx
 42650 0000798F BA[FD79]                	mov	dx,seg_reinit
 42651 00007992 B9[2074]                	mov	cx,exepatch_start
 42652 00007995 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 42653                                  
 42654 00007999 B8[D876]                	mov	ax,SYSBUF
 42655 0000799C 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 42656                                  	
 42657 0000799F 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 42658 000079A4 368E16[8605]                    mov     ss,[ss:USER_SS]
 42659                                  
 42660 000079A9 CB                              retf
 42661                                  
 42662                                  ;
 42663                                  ; END OF DOSINIT
 42664                                  ;
 42665                                  ;--------------------------------------------------------------------------
 42666                                  
 42667                                  CHARINIT:
 42668                                  	; 24/04/2019 - Retro DOS v4.0
 42669                                  	; 07/07/2018 - Retro DOS v3.0
 42670                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 42671 000079AA 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 42672                                  	;mov	byte [ss:035Bh],0
 42673 000079B0 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 42674                                  	;mov	byte [ss:035Ch],0
 42675 000079B6 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 42676                                  	;mov	word [ss:035BD],0
 42677 000079BC 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 42678 000079C3 06                              PUSH	ES
 42679 000079C4 53                              PUSH	BX
 42680 000079C5 50                              PUSH	AX
 42681 000079C6 BB[5A03]                        MOV	BX,DEVCALL
 42682                                          ;PUSH	CS
 42683 000079C9 16                      	PUSH	SS ; 30/04/2019
 42684 000079CA 07                              POP	ES
 42685 000079CB E8C9CC                          CALL	DEVIOCALL2	
 42686 000079CE 58                      	POP	AX
 42687 000079CF 5B                              POP	BX
 42688 000079D0 07                              POP	ES
 42689 000079D1 C3                              RETN
 42690                                  
 42691                                  ; 25/04/2019 - Retro DOS v4.0
 42692                                  
 42693                                  ;-----------------------------------------------------------------------------
 42694                                  ;
 42695                                  ;	check_XMM: routine to check presence of XMM driver
 42696                                  ;
 42697                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 42698                                  ;
 42699                                  ;	USED:	none
 42700                                  ;
 42701                                  ;-----------------------------------------------------------------------------
 42702                                  
 42703                                  check_XMM: ; proc near
 42704                                  ;
 42705                                  ; determine whether or not an XMM driver is installed
 42706                                  ;
 42707 000079D2 50                      	push	ax
 42708                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 42709 000079D3 B80043                  	mov	ax,4300h
 42710 000079D6 CD2F                    	int	2Fh
 42711                                  		; - Multiplex - XMS - INSTALLATION CHECK
 42712                                  		; Return: AL = 80h XMS driver installed
 42713                                  		; AL <> 80h no driver
 42714 000079D8 3C80                    	cmp	al,80h			; Q: installed
 42715 000079DA 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 42716                                  ;
 42717                                  ; get the XMM control functions entry point, save it, we
 42718                                  ; need to call it later.
 42719                                  ;
 42720 000079DC 53                      	push	bx
 42721 000079DD 52                      	push	dx
 42722 000079DE 1E                      	push	ds
 42723 000079DF 06                      	push	es
 42724                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 42725 000079E0 B81043                  	mov	ax,4310h
 42726 000079E3 CD2F                    	int	2Fh
 42727                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 42728                                  		; Return: ES:BX -> driver entry point
 42729                                  
 42730 000079E5 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42731                                  
 42732 000079EA 891E[4911]              	mov	[XMMcontrol],bx
 42733 000079EE 8C06[4B11]              	mov	[XMMcontrol+2],es
 42734                                  cXMMexit:
 42735 000079F2 F8                      	clc
 42736 000079F3 07                      	pop	es
 42737 000079F4 1F                      	pop	ds
 42738 000079F5 5A                      	pop	dx
 42739 000079F6 5B                      	pop	bx
 42740 000079F7 58                      	pop	ax
 42741 000079F8 C3                      	retn				; done
 42742                                  ;
 42743                                  ; set carry if XMM driver not present
 42744                                  ;
 42745                                  cXMM_no_driver:
 42746 000079F9 F9                      	stc
 42747 000079FA 58                      	pop	ax
 42748 000079FB C3                      	retn
 42749                                  
 42750                                  ;-----------------------------------------------------------------------------
 42751                                  ;
 42752                                  ; Procedure Name : seg_reinit
 42753                                  ;
 42754                                  ; Inputs	 : ES has final dos code location
 42755                                  ;		   AX = 0 / 1
 42756                                  ;
 42757                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 42758                                  ;		   if AX =0
 42759                                  ;		      if first entry
 42760                                  ;			 patch segment & offset of vectors with stub
 42761                                  ;			 and stub with segment in ES
 42762                                  ;		      else
 42763                                  ;			 patch stub with segment in ES
 42764                                  ;
 42765                                  ;		   else if AX = 1
 42766                                  ;			patch segment of vectors with segment in ES	
 42767                                  ;
 42768                                  ; NOTE		 : This routine can be called at most twice!
 42769                                  ;
 42770                                  ; Regs Mod.	 : es, ax, di, cx, bx
 42771                                  ;-----------------------------------------------------------------------------
 42772                                  
 42773 000079FC 00                      num_entry: db	0		; keeps track of the # of times this routine
 42774                                  				; has been called. (0 or 1)
 42775                                  
 42776                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 42777                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 42778                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 42779                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 42780                                  
 42781                                  seg_reinit:	; proc	far
 42782 000079FD 1E                      	push	ds
 42783                                  
 42784 000079FE 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42785                                  
 42786 00007A03 E88600                  	call	patch_misc_segments	; patch in segments for sharer and 
 42787                                  					; other tables with seg in ES.
 42788                                  	; 17/12/2022
 42789                                  	; cx = 0
 42790 00007A06 39C8                    	cmp	ax,cx ; 0
 42791                                  	;cmp	ax,0
 42792 00007A08 753D                    	jne	short patch_vec_seg	; patch vectors with segment in es
 42793                                  
 42794                                  	; 17/12/2022
 42795 00007A0A 2E380E[FC79]            	cmp	[cs:num_entry],cl ; 0
 42796                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 42797 00007A0F 7508                    	jne	short second_entry	; N: just patch the stub with 
 42798                                  					;    segment in ES
 42799                                  					; Y: patch the vectors with stub 
 42800 00007A11 8CD8                    	mov	ax,ds
 42801 00007A13 E83E00                  	call	patch_vec_segments	; patch the segment of vectors
 42802 00007A16 E8BD00                  	call	patch_offset		; patch the offsets of vectors 
 42803                                  					; with those in the stub.
 42804                                  	; 17/12/2022
 42805                                  	; cx = 0
 42806                                  second_entry:
 42807 00007A19 8CC0                    	mov	ax,es			; patch the stub with segment in es
 42808                                  
 42809                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 42810                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 42811 00007A1B BF[4810]                	mov	di,DOSINTTABLE
 42812                                  	; 17/12/2022
 42813                                  	; cx = 0
 42814                                  	;mov	cx,9
 42815 00007A1E B109                    	mov	cl,9
 42816 00007A20 1E                      	push	ds			
 42817 00007A21 07                      	pop	es			; es:di -> DOSINTTABLE
 42818                                  
 42819                                  dosinttabloop:
 42820                                  	;add	di,2
 42821                                  	; 19/09/2023
 42822 00007A22 47                      	inc	di
 42823 00007A23 47                      	inc	di
 42824 00007A24 AB                      	stosw
 42825 00007A25 E2FB                    	loop	dosinttabloop	
 42826                                  
 42827                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 42828                                  ; use the HMA, so we don't want to check CS
 42829                                  
 42830                                  ;ifndef ROMDOS
 42831 00007A27 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 42832 00007A2A 7220                    	jb	short sr_done		; N: done
 42833                                  ;endif
 42834 00007A2C E8A3FF                  	call	check_XMM		; Y: set up the XMS entry point
 42835 00007A2F 721B                    	jc	short sr_done		; failed to set up XMS do not do
 42836                                  					; A20 toggling in the stub.
 42837                                  	; 17/12/2022
 42838                                  	; cx = 0
 42839 00007A31 E81D01                  	call	patch_in_nops		; enable the stub to check A20 state
 42840                                  ; M021-
 42841                                  	;mov	byte [1211h],1
 42842 00007A34 C606[F711]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 42843                                  				
 42844                                  					; set pointer to the routine that 
 42845                                  					; patches buggy exepacked code.
 42846                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 42847 00007A39 C706[F811][7075]        	mov	word [FixExePatch],ExePatch
 42848                                  					; M068: set pointer to the routine 
 42849                                  					; M068: that detects copy protected
 42850                                  					; M068: apps
 42851                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 42852 00007A3F C706[6100][A176]        	mov	word [ChkCopyProt],IsCopyProt
 42853                                  
 42854                                  ; 28/12/2022 - Retro DOS v4.1
 42855                                  %if 0
 42856                                  ;----------------------------------------------------------------------------
 42857                                  
 42858                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 42859                                  
 42860                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42861                                  ;
 42862                                  ;; M020 - begin
 42863                                  ;
 42864                                  ;	call	WhatCPUType
 42865                                  ;	cmp	al,1
 42866                                  ;	jne	short sr_done 		; we need Rational Patch only
 42867                                  ;					;  on 286 systems
 42868                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 42869                                  ;	mov	word [RationalPatchPtr],RationalPatch
 42870                                  ;
 42871                                  ;; M020 - end
 42872                                  ;
 42873                                  ;	jmp	short sr_done
 42874                                  ;
 42875                                  ;patch_vec_seg:				; patch vectors with segment in es
 42876                                  ;	mov	ax,es
 42877                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 42878                                  ;					; NOTE we don't have to patch the 
 42879                                  ;					; offsets as they have been already
 42880                                  ;					; set to the doscode offsets at
 42881                                  ;					; DOSINIT.
 42882                                  ;sr_done:
 42883                                  ;	mov	byte [cs:num_entry],1
 42884                                  ;	pop	ds
 42885                                  ;	retf	; ! far return !
 42886                                  
 42887                                  ;----------------------------------------------------------------------------
 42888                                  ;
 42889                                  ; Procedure Name : WhatCPUType
 42890                                  ;
 42891                                  ; Inputs	 : none
 42892                                  ;
 42893                                  ; Outputs	 : AL = 0 if CPU <  286
 42894                                  ;		      = 1 if CPU == 286
 42895                                  ;		      = 2 if CPU >= 386
 42896                                  ;
 42897                                  ; Regs. Mod.	 : AX
 42898                                  ;
 42899                                  ;----------------------------------------------------------------------------
 42900                                  
 42901                                  WhatCPUType:
 42902                                  	; 25/04/2019 - Retro DOS v4.0
 42903                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 42904                                  
 42905                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 42906                                  
 42907                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 42908                                  ; 	it is called from both CODE and SYSINITSEG.
 42909                                  ;
 42910                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 42911                                  ;  Returns: AX = 0 if 8086 or 8088
 42912                                  ;              = 1 if 80286
 42913                                  ;              = 2 if 80386
 42914                                  
 42915                                  	; 04/11/2022
 42916                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 42917                                  
 42918                                  Get_CPU_Type:	;macro
 42919                                  	pushf
 42920                                  	push	bx			; preserve bx
 42921                                  	xor	bx,bx			; init bx to zero
 42922                                  
 42923                                  	xor	ax,ax			; 0000 into AX
 42924                                  	push	ax			; put it on the stack...
 42925                                  	popf				; ...then shove it into the flags
 42926                                  	pushf				; get it back out of the flags...
 42927                                  	pop	ax			; ...and into ax
 42928                                  	and	ax,0F000h		; mask off high four bits
 42929                                  	cmp	ax,0F000h		; was it all 1's?
 42930                                  	je	short cpu_8086		; aye; it's an 8086 or 8088
 42931                                  
 42932                                  	mov	ax,0F000h		; now try to set the high four bits..
 42933                                  	push	ax
 42934                                  	popf
 42935                                  	pushf
 42936                                  	pop	ax			; ...and see what happens
 42937                                  	and	ax,0F000h		; any high bits set ?
 42938                                  	jz	short cpu_286		; nay; it's an 80286
 42939                                  
 42940                                  cpu_386:				; bx starts as zero
 42941                                  	inc	bx			; inc twice if 386
 42942                                  cpu_286:				; just inc once if 286
 42943                                  	inc	bx
 42944                                  cpu_8086:				; don't inc at all if 086
 42945                                  	mov	ax,bx			; put CPU type value in ax
 42946                                  	pop	bx			; restore original bx
 42947                                  	popf
 42948                                  	
 42949                                  	;endm
 42950                                  
 42951                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 42952                                  	;retn
 42953                                  
 42954                                  	; 04/11/2022
 42955                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 42956                                  	cmp	al,1
 42957                                  	jne	short sr_done 		; we need Rational Patch only
 42958                                  					;  on 286 systems
 42959                                  	mov	word [RationalPatchPtr],RationalPatch
 42960                                  
 42961                                  ;----------------------------------------------------------------------------
 42962                                  %endif	; 28/12/2022
 42963                                  
 42964 00007A45 EB05                    	jmp	short sr_done
 42965                                  
 42966                                  patch_vec_seg:				; patch vectors with segment in es
 42967 00007A47 8CC0                    	mov	ax,es
 42968 00007A49 E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 42969                                  					; NOTE we don't have to patch the 
 42970                                  					; offsets as they have been already
 42971                                  					; set to the doscode offsets at
 42972                                  					; DOSINIT.
 42973                                  sr_done:
 42974 00007A4C 2EC606[FC79]01          	mov	byte [cs:num_entry],1
 42975 00007A52 1F                      	pop	ds
 42976 00007A53 CB                      	retf	; ! far return !
 42977                                  
 42978                                  ;----------------------------------------------------------------------------
 42979                                  ;
 42980                                  ; Procedure Name : patch_vec_segments
 42981                                  ;
 42982                                  ; Inputs	 : ax -> has segment address to patch in
 42983                                  ;		   ds -> DOSDATA
 42984                                  ;
 42985                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 42986                                  ;			
 42987                                  ;			0,20-28,3a-3f
 42988                                  ;
 42989                                  ; Regs. Mod.	 : DI,CX,DX,AX
 42990                                  ;
 42991                                  ;----------------------------------------------------------------------------
 42992                                  
 42993                                  patch_vec_segments:
 42994                                  
 42995 00007A54 06                      	push	es
 42996                                  
 42997 00007A55 31C9                    	xor	cx,cx ; 0
 42998 00007A57 8EC1                    	mov	es,cx
 42999                                  
 43000                                  	;mov	di,82h
 43001 00007A59 BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 43002                                  
 43003 00007A5C 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 43004                                  
 43005                                  					; set vectors 20 & 21
 43006                                  	; 04/11/2022
 43007                                  	;mov	cx,2
 43008                                  	; 17/12/2022
 43009                                  	;mov	cl,2
 43010                                  ps_set1:
 43011 00007A60 AB                      	stosw	
 43012                                  	;add	di,2
 43013                                  	; 17/12/2022
 43014 00007A61 47                      	inc	di
 43015 00007A62 47                      	inc	di
 43016                                  	;loop	ps_set1
 43017                                  
 43018                                  	; 17/12/2022
 43019 00007A63 AB                      	stosw	; int 21h segment
 43020                                  	;inc	di
 43021                                  	;inc	di
 43022                                  
 43023                                  	;add	di,4			; skip int 22h vector
 43024 00007A64 83C706                  	add	di,6 ; *
 43025                                  
 43026 00007A67 AB                      	stosw				; set int 23h
 43027 00007A68 83C706                  	add	di,6			; skip int 24h
 43028                                  
 43029                                  					; set vectors 25-28 and 2a-3f 
 43030                                  	; 04/11/2022
 43031                                  	;mov	cx,4			; set 4 segments
 43032                                  	; 17/12/2022
 43033 00007A6B B104                    	mov	cl,4
 43034                                  ps_set2:
 43035 00007A6D AB                      	stosw				
 43036                                  	;add	di,2
 43037                                  	; 17/12/2022
 43038 00007A6E 47                      	inc	di
 43039 00007A6F 47                      	inc	di
 43040 00007A70 E2FB                    	loop	ps_set2
 43041                                  
 43042 00007A72 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 43043                                  					;   already be set.
 43044                                  	; 04/11/2022
 43045                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 43046                                  	; 17/12/2022
 43047 00007A75 B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 43048                                  ps_set3:
 43049 00007A77 AB                      	stosw
 43050                                  	;add	di,2
 43051                                  	; 17/12/2022
 43052 00007A78 47                      	inc	di
 43053 00007A79 47                      	inc	di
 43054 00007A7A E2FB                    	loop	ps_set3
 43055                                  
 43056                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 43057                                  ; below. So skip it.
 43058                                  
 43059 00007A7C 83C708                  	add	di,8			; skip vector 30h & 31h 
 43060                                  	
 43061                                  	; 04/11/2022
 43062                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 43063                                  	; 17/12/2022
 43064 00007A7F B10E                    	mov	cl,14			;   sets segs for ints 32h-3fh
 43065                                  ps_set4:
 43066 00007A81 AB                      	stosw
 43067                                  	;add	di,2
 43068                                  	; 17/12/2022
 43069 00007A82 47                      	inc	di
 43070 00007A83 47                      	inc	di
 43071 00007A84 E2FB                    	loop	ps_set4
 43072                                  
 43073                                  ; set offset of int2f
 43074                                  
 43075                                  ;if installed
 43076                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 43077                                  ;endif
 43078                                  	;mov	[es:0C3h],ax
 43079 00007A86 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 43080                                  	; 17/12/2022
 43081                                  	; cx = 0
 43082 00007A8A 07                      	pop	es
 43083 00007A8B C3                      	retn
 43084                                  
 43085                                  ;---------------------------------------------------------------------------
 43086                                  ;
 43087                                  ; Procedure Name : patch_misc_segments
 43088                                  ;
 43089                                  ; Inputs	 : es = segment to patch in
 43090                                  ;		   ds = dosdata
 43091                                  ;
 43092                                  ; outputs	 : patches in the sharer and other tables in the dos
 43093                                  ;		   with right dos code segment in es
 43094                                  ;
 43095                                  ; Regs Mod	 : DI,SI,CX
 43096                                  ;
 43097                                  ;---------------------------------------------------------------------------
 43098                                  
 43099                                  patch_misc_segments:
 43100                                  
 43101 00007A8C 53                      	push	bx
 43102 00007A8D 06                      	push	es
 43103 00007A8E 50                      	push	ax
 43104                                  
 43105 00007A8F 8CC0                    	mov	ax,es			; ax - > DOS segment
 43106                                  	
 43107 00007A91 1E                      	push	ds
 43108 00007A92 07                      	pop	es			; es -> DOSDATA
 43109                                  	
 43110                                  ; initialize the jump table for the sharer...
 43111                                  
 43112                                  	;mov	di,offset dosdata:jshare
 43113                                  	;mov	di,90h
 43114 00007A93 BF[9000]                	mov	di,JShare
 43115                                  	;mov	bx,[0AAAh]
 43116 00007A96 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 43117                                  					; table was patched during the first
 43118                                  					; call to this routine
 43119 00007A9A B90F00                  	mov	cx,15
 43120                                  jumptabloop:
 43121                                  	;add	di,2			; skip offset
 43122                                  	; 17/12/2022
 43123 00007A9D 47                      	inc	di
 43124 00007A9E 47                      	inc	di
 43125 00007A9F 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 43126 00007AA2 7405                    	je	short share_patch	; Y: patch in sharer table
 43127                                  					; N: 
 43128 00007AA4 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 43129 00007AA7 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 43130                                  share_patch:
 43131 00007AA9 AB                      	stosw				; drop in segment
 43132                                  no_share_patch:
 43133 00007AAA E2F1                    	loop	jumptabloop
 43134                                  					; BUGBUG patching the country info 
 43135                                  					; with dosdata can be done inline
 43136                                  					; in dosinit.
 43137                                  					; for dos 3.3 country info
 43138                                  					; table address
 43139                                  
 43140                                  	;mov	si,offset dosdata:country_cdpg
 43141                                  	;mov	si,122Ah   
 43142 00007AAC BE[0512]                	mov	si,COUNTRY_CDPG
 43143                                  					; initialize double word
 43144                                  					; pointers with dosdata in ds
 43145                                  	;mov	[si+4Fh],ds
 43146                                  	;mov	[si+54h],ds
 43147                                  	;mov	[si+59h],ds
 43148                                  	;mov	[si+5Eh],ds
 43149                                  	;mov	[si+80h],ds
 43150                                  	;mov	[si+63h],ds
 43151 00007AAF 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 43152 00007AB2 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 43153 00007AB5 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 43154 00007AB8 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 43155 00007ABB 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 43156 00007ABF 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 43157                                  
 43158                                  					; fastopen routines are in doscode
 43159                                  					; so patch with doscode seg in ax
 43160                                  
 43161                                  	;mov	si,offset dosdata:fastopentable
 43162                                  	;mov	si,0D30h
 43163 00007AC2 BE[300D]                	mov	si,FastOpenTable
 43164                                  
 43165                                  	; 17/12/2022
 43166                                  	; bx = [TEMP_DOSLOC]
 43167 00007AC5 83FBFF                  	cmp	bx,-1
 43168                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 43169 00007AC8 7405                    	je	short fast_patch	; Y: patch segment
 43170                                  	;mov	cx,[TEMP_DOSLOC]
 43171                                  					; Q: has fastopen patched in it's
 43172                                  					;    segment
 43173                                  	; 17/12/2022
 43174 00007ACA 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 43175                                  	;;cmp	cx,[si+4]
 43176                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 43177 00007ACD 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 43178                                  
 43179                                  fast_patch:
 43180                                  	;mov	[si+4],ax
 43181 00007ACF 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 43182                                  no_fast_patch:
 43183                                  	; 17/12/2022
 43184                                  	; cx = 0
 43185 00007AD2 58                      	pop	ax
 43186 00007AD3 07                      	pop	es
 43187 00007AD4 5B                      	pop	bx
 43188                                  
 43189 00007AD5 C3                      	retn
 43190                                  
 43191                                  ;--------------------------------------------------------------------------
 43192                                  ;
 43193                                  ; Procedure Name : patch_offset
 43194                                  ; 
 43195                                  ; Inputs	 : NONE
 43196                                  ;
 43197                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 43198                                  ;		   0,20-28,3a-3f, and 30,31
 43199                                  ;
 43200                                  ;
 43201                                  ; Regs. Mod	 : AX,DI,CX
 43202                                  ;--------------------------------------------------------------------------
 43203                                  
 43204                                  patch_offset:
 43205 00007AD6 06                      	push	es		; preserve es
 43206                                  
 43207 00007AD7 31C0                    	xor	ax,ax
 43208 00007AD9 8EC0                    	mov	es,ax
 43209                                  				; set default divide trap address
 43210                                  	;mov	word ptr es:[0],offset dosdata:ldivov	
 43211                                  	;mov	word [es:0],108Ah
 43212 00007ADB 26C7060000[7010]        	mov	word [es:0],ldivov
 43213                                  
 43214                                  	;mov	di,80h
 43215 00007AE2 BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 43216                                  	;mov	ax,offset dosdata:lirett
 43217                                  	;mov	ax,10DAh
 43218 00007AE5 B8[C010]                	mov	ax,lirett
 43219                                  				; set vectors 20 & 21 to point to iret.
 43220                                  	; 17/12/2022
 43221                                  	; cx = 0
 43222                                  
 43223                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 43224                                  po_iset1:
 43225 00007AE8 AB                      	stosw	; int 20h offset
 43226                                  	;add	di,2 ; *
 43227                                  	;loop	po_iset1
 43228                                  	; 17/12/2022
 43229 00007AE9 47                      	inc	di
 43230 00007AEA 47                      	inc	di
 43231 00007AEB AB                      	stosw	; int 21h offset
 43232                                  
 43233                                  	;add	di,4		; skip vector 22h
 43234                                  	; 17/12/2022
 43235 00007AEC 83C706                  	add	di,6 ; *	
 43236                                  
 43237 00007AEF AB                      	stosw			; set offset of 23h
 43238                                  	;add	di,6		; skip 24h
 43239                                  	; 19/09/2023
 43240 00007AF0 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 43241                                  
 43242                                  				; set vectors 25-28 and 2a-3f to iret.
 43243                                  	; 04/11/2022
 43244                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 43245                                  	; 19/09/2023
 43246                                  	; 17/12/2022
 43247                                  	;mov	cl,4		;   sets offsets for ints 25h-28h
 43248                                  po_iset2:
 43249 00007AF3 AB                      	stosw		; set offset for int 28h ; 19/09/2023
 43250                                  	;add	di,2
 43251                                  	; 19/09/2023
 43252                                  	; 17/12/2022
 43253                                  	;inc	di
 43254                                  	;inc	di
 43255                                  	; 19/09/2023
 43256                                  	;loop	po_iset2
 43257                                  
 43258                                  	;add	di,4		; skip vector 29h
 43259                                  	; 19/09/2023
 43260 00007AF4 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 43261                                  
 43262                                  	; 04/11/2022
 43263                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 43264                                  	; 17/12/2022
 43265                                  	;mov	cl,6		;   sets offsets for ints 2ah-2fh
 43266 00007AF7 B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 43267                                  po_iset3:
 43268 00007AF9 AB                      	stosw
 43269                                  	;add	di,2
 43270                                  	; 17/12/2022
 43271 00007AFA 47                      	inc	di
 43272 00007AFB 47                      	inc	di
 43273 00007AFC E2FB                    	loop	po_iset3
 43274                                  
 43275                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 43276                                  ; below. So skip it.
 43277                                  
 43278                                  	;add	di,8		; skip vector 30h & 31h 
 43279                                  	; 17/12/2022
 43280 00007AFE 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 43281                                  
 43282                                  	; 04/11/2022
 43283                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 43284                                  				;   sets offsets for ints 32h-3fh
 43285                                  	; 17/12/2022
 43286 00007B01 B10E                    	mov	cl,14 ; 26/06/2019
 43287                                  po_iset4:
 43288 00007B03 AB                      	stosw
 43289                                  	;add	di,2
 43290                                  	; 17/12/2022
 43291 00007B04 47                      	inc	di
 43292 00007B05 47                      	inc	di
 43293 00007B06 E2FB                    	loop	po_iset4
 43294                                  
 43295                                  ;if installed
 43296                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 43297                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 43298 00007B08 26C706BC00[AC10]        	mov	word [es:(2Fh*4)],lint2f
 43299                                  ;endif
 43300                                  
 43301                                  ; set up entry point call at vectors 30-31h
 43302                                  	;mov	byte [es:0C0h],0EAh
 43303 00007B0F 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 43304                                  	;mov	word [es:0C1h],10D0h
 43305                                  
 43306 00007B15 26C706C100[B610]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 43307                                  
 43308                                  							; 19/09/2023
 43309                                  	;mov	word [es:80h],1094h
 43310 00007B1C 26C7068000[7A10]        	mov	word [es:addr_int_abort],lquit		; int 20h
 43311                                  	;mov	word [es:84h],109Eh
 43312 00007B23 26C7068400[8410]        	mov	word [es:addr_int_command],lcommand	; int 21h
 43313                                  	;mov	word [es:94h],10A8h
 43314 00007B2A 26C7069400[8E10]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 43315                                  	;mov	word [es:98h],10B2h
 43316 00007B31 26C7069800[9810]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 43317                                  	;mov	word [es:9Ch],10BCh
 43318 00007B38 26C7069C00[A210]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 43319                                  
 43320                                  	; 17/12/2022
 43321                                  	; CX = 0
 43322 00007B3F 07                      	pop	es		; restore es
 43323 00007B40 C3                      	retn
 43324                                  
 43325                                  ;--------------------------------------------------------------------------
 43326                                  ;
 43327                                  ; 	Procedure Name	:	patch_in_nops
 43328                                  ;
 43329                                  ; 	Entry		: 	ES -> DOSDATA
 43330                                  ;
 43331                                  ;	Regs Mod	: 	cx, di
 43332                                  ;
 43333                                  ;	Description:
 43334                                  ;		This routine patches in 2 nops at the offsets specified in 
 43335                                  ;	patch_table. This basically enables the low mem stub to start 
 43336                                  ;	making XMS calls.
 43337                                  ;
 43338                                  ;--------------------------------------------------------------------------
 43339                                  
 43340                                  	; 04/11/2022
 43341                                  	; (MSDOS 5.0 MSDOS.SYS)
 43342                                  	; DOSCODE:0BC50h
 43343                                  
 43344                                  patch_table:	; label	byte
 43345                                  	;dw	offset dosdata:i0patch
 43346                                  	;dw	offset dosdata:i20patch
 43347                                  	;dw	offset dosdata:i21patch
 43348                                  	;dw	offset dosdata:i25patch
 43349                                  	;dw	offset dosdata:i26patch
 43350                                  	;dw	offset dosdata:i27patch
 43351                                  	;dw	offset dosdata:i2fpatch
 43352                                  	;dw	offset dosdata:cpmpatch
 43353 00007B41 [7010]                  	dw	i0patch
 43354 00007B43 [7A10]                  	dw	i20patch
 43355 00007B45 [8410]                  	dw	i21patch
 43356 00007B47 [8E10]                  	dw	i25patch
 43357 00007B49 [9810]                  	dw	i26patch
 43358 00007B4B [A210]                  	dw	i27patch
 43359 00007B4D [AC10]                  	dw	i2fpatch
 43360 00007B4F [B610]                  	dw	cpmpatch
 43361                                  
 43362                                  patch_table_size equ ($-patch_table)/2
 43363                                  
 43364                                  patch_in_nops:
 43365 00007B51 50                      	push	ax
 43366 00007B52 56                      	push	si
 43367 00007B53 BE[417B]                	mov	si,patch_table
 43368 00007B56 B89090                  	mov	ax,9090h ; nop, nop
 43369                                  	; 17/12/2022
 43370                                  	; cx = 0
 43371                                  	;mov	cx,8
 43372                                  	;mov	cx,patch_table_size ; 8
 43373 00007B59 B108                    	mov	cl,patch_table_size ; 8
 43374                                  pin_loop:
 43375 00007B5B 2E8B3C                  	mov	di,[cs:si]
 43376 00007B5E AB                      	stosw
 43377                                  	;add	si,2
 43378                                  	; 17/12/2022
 43379 00007B5F 46                      	inc	si
 43380 00007B60 46                      	inc	si
 43381 00007B61 E2F8                    	loop	pin_loop
 43382 00007B63 5E                      	pop	si
 43383 00007B64 58                      	pop	ax
 43384 00007B65 C3                      	retn
 43385                                  
 43386                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43387                                  ; ---------------------------------------------------------------------------
 43388                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 43389                                  ; ---------------------------------------------------------------------------
 43390                                  
 43391                                  	; 05/12/2022 - temporary ; (paragrapgh alinment)
 43392                                  DOSCODE_END:
 43393                                  	;times	9 db 0	; db 9 dup(0)
 43394                                  	; 18/12/2022
 43395 00007B66 0000                    	dw	0  ;	times 2 db 0
 43396                                  
 43397                                  ;align 16
 43398                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 43399                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 43400                                  
 43401                                  ; ---------------------------------------------------------------------------
 43402                                  
 43403                                  
 43404                                  ;memstrt label word
 43405                                  ; ---------------------------------------------------------------------------
 43406                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 43407                                  ; ---------------------------------------------------------------------------
 43408                                  
 43409                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 43410                                  
 43411                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 43412                                  ; the dos initialization segment
 43413                                  
 43414                                  ;ifndef ROMDOS
 43415                                  
 43416                                  ;doscode ends
 43417                                  
 43418                                  ;else
 43419                                  
 43420                                  ;;dosinitseg ends
 43421                                  
 43422                                  ;endif ; ROMDOS
 43423                                  
 43424                                  ;============================================================================
 43425                                  
 43426                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 43427                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 43428                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 43429                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 43430                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 43431                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 43432                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 43433                                  
 43434                                  ;; burasý doscode sonu
 43435                                  
 43436                                  ;============================================================================
 43437                                  ; DOSDATA
 43438                                  ;============================================================================
 43439                                  ; 29/04/2019 - Retro DOS 4.0
 43440                                  
 43441                                  ;[BITS 16]
 43442                                  
 43443                                  ;[ORG 0]
 43444                                  
 43445                                  ; 25/04/2019 - Retro DOS v4.0
 43446                                  
 43447                                  ;============================================================================
 43448                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 43449                                  ;============================================================================
 43450                                  
 43451                                  ;align 16
 43452                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 43453                                  	; (4970 bytes for MSDOS 6.21)
 43454                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 43455                                  
 43456                                  ;============================================================================
 43457                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 43458                                  ;============================================================================
 43459                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43460                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 43461                                  ; 16/07/2018 - Retro DOS 3.0	
 43462                                  
 43463                                  ;Break <Initialized data and data used at DOS initialization>
 43464                                  ;----------------------------------------------------------------------------
 43465                                  
 43466                                  ; We need to identify the parts of the data area that are relevant to tasks
 43467                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 43468                                  ; data will be gathered with the system code. The process data under 2.x will
 43469                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43470                                  ;
 43471                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43472                                  ; describing that data item.
 43473                                  
 43474                                  ;DOSDATA SEGMENT
 43475                                  
 43476                                  ; 04/11/2022
 43477                                  ;[ORG 0]
 43478                                  
 43479                                  ; ----------------------------------------------------------------------------
 43480                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43481                                  ; ----------------------------------------------------------------------------
 43482                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 43483                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 43484                                  ; ----------------------------------------------------------------------------
 43485                                  
 43486                                  ; 04/11/2022
 43487                                  
 43488                                  ;DOSDATA:0000h
 43489                                  
 43490 00007B68 90<rep 8h>              align 16
 43491                                  
 43492                                  ; ----------------------------------------------------------------------------
 43493                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43494                                  ; ----------------------------------------------------------------------------
 43495                                  
 43496                                  segment .data  vstart=0 ; 06/12/2022
 43497                                  								
 43498                                  ; ============================================================================
 43499                                  
 43500                                  ; 06/12/2022
 43501                                  ;DOSDATASTART equ $
 43502                                  DOSDATASTART:
 43503                                  
 43504                                  
 43505                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 43506                                  
 43507                                  	;; 03/11/2022
 43508                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 43509                                  
 43510                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43511                                  	;db	4 dup (?)	
 43512 00000000 00<rep 4h>              	times	4 db 0
 43513                                  
 43514                                  	; 29/04/2019 - Retro DOS v4.0 modification
 43515                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 43516                                  	;dw	0
 43517                                  
 43518                                  	;EVEN
 43519                                  
 43520                                  ;align 2
 43521                                  
 43522                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 43523                                  ; area compatability. This location must be incremented EACH TIME the data
 43524                                  ; area here gets mucked with.
 43525                                  ;
 43526                                  ; Also, do NOT change this position relative to DOSDATA:0.
 43527                                  
 43528                                  MSCT001S:	; LABEL BYTE
 43529                                  	
 43530                                  DataVersion:	
 43531 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 43532                                  
 43533                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 43534                                  ;hkn; been removed to DOSCODE above
 43535                                  
 43536                                  ;M044
 43537                                  ; First part of save area for saving last para of Window memory
 43538                                  
 43539                                  WinoldPatch1:	; db 8 dup (?)	;M044
 43540 00000006 00<rep 8h>              	times	8 db 0
 43541                                  
 43542                                  	; MSDOS 6.21 DOSDATA:000Eh
 43543                                  MYNUM:			; Offset 000Eh
 43544 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 43545                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 43546 00000010 0000                    	dw	0
 43547                                  OpenLRU:
 43548 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 43549                                  OEM_HANDLER: 		
 43550 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 43551                                  
 43552                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 43553                                  ;;			way that we leave DOS???? - jgl
 43554                                  
 43555                                  LeaveAddr:
 43556 00000018 [0804]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 43557                                  RetryCount:		
 43558 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 43559                                  RetryLoop:
 43560 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 43561                                  LastBuffer:
 43562 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 43563                                  CONTPOS:
 43564 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 43565                                  arena_head:
 43566 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 43567                                  
 43568                                  ;; 16/07/2018
 43569                                  ;;***************************************************************************
 43570                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 43571                                  ;;***************************************************************************
 43572                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 43573                                  ;;
 43574                                  ;;	AH = 52h
 43575                                  ;;
 43576                                  ;;	on return:
 43577                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 43578                                  ;;		Known "invars" fields follow (varies with DOS version):
 43579                                  ;;
 43580                                  ;;	Offset Size		 Description
 43581                                  ;;
 43582                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 43583                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 43584                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 43585                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 43586                                  ;;		      0 indicates no unread input (DOS 3.x)
 43587                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 43588                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 43589                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 43590                                  ;;	  08   dword  pointer to $CLOCK device driver
 43591                                  ;;	  0C   dword  pointer to CON device driver
 43592                                  ;;	  10   byte   number of logical drives in system
 43593                                  ;;	  11   word   maximum bytes/block of any block device
 43594                                  ;;	  13   dword  pointer to DOS cache buffer header
 43595                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 43596                                  ;;		      point to the next device in device chain
 43597                                  ;;
 43598                                  ;;***************************************************************************
 43599                                  
 43600                                  ; The following block of data is used by SYSINIT. 
 43601                                  ; Do not change the order or size of this block
 43602                                  
 43603                                  ;SYSINITVAR:
 43604                                  ;----------------------------------------------------------------------------
 43605                                  SYSINITVARS:
 43606                                  DPBHEAD:
 43607 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 43608                                  SFT_ADDR:
 43609 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 43610                                  BCLOCK:
 43611 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 43612                                  BCON:
 43613 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 43614                                  MAXSEC:
 43615 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 43616                                  BUFFHEAD:
 43617 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 43618                                  CDSADDR:
 43619 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 43620                                  SFTFCB:
 43621 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 43622                                  KEEPCOUNT:
 43623 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 43624                                  NUMIO:
 43625 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 43626                                  CDSCOUNT:
 43627 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 43628                                  
 43629                                  ; A fake header for the NUL device
 43630                                  NULDEV:
 43631 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 43632                                  	;dw	8004h
 43633 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 43634 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 43635 00000050 [CC0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 43636 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 43637                                  SPLICES:
 43638 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 43639                                  
 43640                                  Special_Entries:
 43641 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 43642                                  UU_IFS_DOS_CALL:
 43643 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 43644                                  ; 
 43645                                  ; UU_IFS_HEADER:
 43646                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 43647                                  
 43648                                  ChkCopyProt:
 43649 00000061 0000                    	dw	0	; M068
 43650                                  A20OFF_PSP:
 43651 00000063 0000                    	dw	0	; M068
 43652                                  BUFFERS_PARM1:
 43653 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 43654                                  BUFFERS_PARM2:
 43655 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 43656                                  BOOTDRIVE:
 43657 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 43658                                  DDMOVE:
 43659 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 43660                                  EXT_MEM_SIZE:
 43661 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 43662                                  
 43663                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 43664                                  ;
 43665                                  ; Replaced by next two declarations
 43666                                  ;
 43667                                  ;UU_BUF_HASH_PTR:
 43668                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 43669                                  ;UU_BUF_HASH_COUNT:
 43670                                  ;	dw	1	; [SYSTEM] number of Hash entries
 43671                                  
 43672                                  BufferQueue:
 43673 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 43674                                  DirtyBufferCount:
 43675 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 43676                                  			; BUGBUG ---- change to byte
 43677                                  SC_CACHE_PTR:
 43678 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 43679                                  SC_CACHE_COUNT:
 43680 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 43681                                  BuffInHMA:
 43682 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 43683                                  LoMemBuff:
 43684 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 43685                                  			;  in Low mem when buffs are in HMA
 43686                                  ;
 43687                                  ; All variables which have UU_ as prefix can be reused for other
 43688                                  ; purposes and can be renamed. All these variables were used for
 43689                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 43690                                  ; manager ---- MOHANS
 43691                                  ;
 43692                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 43693                                  UU_BUF_EMS_FIRST_PAGE:	
 43694 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 43695                                  
 43696                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 43697                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 43698                                  ;	dw	0			
 43699                                  
 43700                                  CL0FATENTRY:
 43701 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 43702                                  			; is used in pack/unpack rts.
 43703                                  			; in fat.asm if cluster 0 is specified.
 43704                                  			; SR;
 43705                                  IoStatFail:
 43706 00000083 00                      	db	0	; IoStatFail has been added to 
 43707                                  			; record a fail on an I24 
 43708                                  			; issued from IOFUNC on a status call. 
 43709                                  
 43710                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 43711                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 43712                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 43713                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 43714                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 43715                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 43716                                  ;
 43717                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 43718                                  						; state of the 	buffers page.
 43719                                  						; This one byte is retained to 
 43720                                  						; keep the size of this data 
 43721                                  						; block the same.;
 43722                                  ALLOCMSAVE:
 43723 00000084 00                      	db	0	; M063: temp var. used to 
 43724                                  			; M063: save alloc method in
 43725                                  			; M063: msproc.asm
 43726                                  A20OFF_COUNT:
 43727 00000085 00                      	db	0	; M068: indiactes the # of 
 43728                                  			; M068: int 21 calls for 
 43729                                  			; M068: which A20 is off
 43730                                  DOS_FLAG:
 43731 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 43732                                  			; definitions
 43733                                  UNPACK_OFFSET:
 43734 00000087 0000                    	dw	0	; saves pointer to the start
 43735                                  			; of unpack code in exepatch.
 43736                                  			; asm.
 43737                                  UMBFLAG:
 43738 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 43739                                  			; M003: link state of the UMBs
 43740                                  			; M003: whether linked or not 
 43741                                  			; M003: to the DOS arena chain
 43742                                  SAVE_AX:
 43743 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 43744                                  			; M000: in msproc.asm
 43745                                  UMB_HEAD:
 43746 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 43747                                  			; M000: the first umb arena by 
 43748                                  			; M000: BIOS sysinit.
 43749                                  START_ARENA:
 43750 0000008E 0100                    	dw	1	; M000: this is the first arena 
 43751                                  			; M000: from which DOS will 
 43752                                  			; M000: start its scan for alloc.
 43753                                  
 43754                                  ; End of SYSINITVar block
 43755                                  ;----------------------------------------------------------------------------
 43756                                  
 43757                                  ; 25/04/2019 - Retro DOS v4.0
 43758                                  
 43759                                  ; 16/07/2018
 43760                                  ; MSDOS 3.3 (& MDOS 6.0)
 43761                                  
 43762                                  ;
 43763                                  ; Sharer jump table
 43764                                  ;
 43765                                  
 43766                                  ;PUBLIC	JShare
 43767                                  	;EVEN
 43768                                  
 43769                                  ;JShare	LABEL	DWORD
 43770                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 43771                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 43772                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 43773                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 43774                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 43775                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 43776                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 43777                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 43778                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 43779                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 43780                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 43781                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 43782                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 43783                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 43784                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 43785                                  
 43786                                  align 2
 43787                                  
 43788                                  JShare:
 43789 00000090 [0107]0000              		DW	BadCall,0
 43790 00000094 [0507]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 43791 00000098 [0507]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 43792 0000009C [0107]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 43793 000000A0 [0107]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 43794 000000A4 [0107]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 43795 000000A8 [0107]0000              set_block:	DW	BadCall,0  ; 6   set_block
 43796 000000AC [0107]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 43797 000000B0 [0507]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 43798 000000B4 [0107]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 43799 000000B8 [0107]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 43800 000000BC [0107]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 43801 000000C0 [0507]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 43802 000000C4 [0107]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 43803 000000C8 [0107]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 43804                                  
 43805                                  
 43806                                  ;============================================================================
 43807                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 43808                                  ;============================================================================
 43809                                  ; 25/04/2019 - Retro DOS 4.0 
 43810                                  ; 16/07/2018 - Retro DOS 3.0	
 43811                                  
 43812                                  ;Break <Initialized data and data used at DOS initialization>
 43813                                  ;----------------------------------------------------------------------------
 43814                                  
 43815                                  ; We need to identify the parts of the data area that are relevant to tasks
 43816                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 43817                                  ; data will be gathered with the system code.  The process data under 2.x will
 43818                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43819                                  ;
 43820                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43821                                  ; describing that data item.
 43822                                  
 43823                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 43824                                  
 43825                                  ;
 43826                                  ; Table of routines for assignable devices
 43827                                  ;
 43828                                  ; MSDOS allows assignment if the following standard devices:
 43829                                  ;   stdin  (usually CON input)
 43830                                  ;   stdout (usually CON output)
 43831                                  ;   auxin  (usually AUX input)
 43832                                  ;   auxout (usually AUX output)
 43833                                  ;   stdlpt (usually PRN output)
 43834                                  ;
 43835                                  ; SPECIAL NOTE:
 43836                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 43837                                  ;   If we're not at end-of-file, then we always say that we have a character.
 43838                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 43839                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 43840                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 43841                                  ;   as EOF).
 43842                                  
 43843                                  ; Default SFTs for boot up
 43844                                  
 43845                                  		;PUBLIC	SFTABL
 43846                                  
 43847                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 43848 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 43849 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 43850 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 43851                                  		;times 295 db 0 ; MSDOS 6.0
 43852 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 43853                                  
 43854                                  ; the next two variables relate to the position of the logical stdout/stdin
 43855                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 43856                                  ; console.
 43857                                  		; DOSDATA:01F9h (MSDOS 6.21)
 43858 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 43859 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 43860                                  					;	   of buffered input call
 43861 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 43862 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 43863                                  		; DOSDATA:02FEh (MSDOS 6.21)
 43864 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 43865 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 43866 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 43867                                  switch_character:
 43868 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 43869 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 43870 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 43871 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 43872 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 43873                                  
 43874                                  ; The following table is a list of addresses that the sharer patches to be
 43875                                  ; PUSH AX to enable the critical sections
 43876                                  
 43877                                  		; DOSDATA:0315h (MSDOS 6.21)
 43878                                  
 43879                                  ;PUBLIC	CritPatch
 43880                                  
 43881                                  CritPatch:	; LABEL WORD
 43882                                  
 43883                                  ;IRP sect,<critDisk,critDevice>
 43884                                  
 43885                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 43886                                  ;
 43887                                  ;SR; Change code patch address to a variable in data segment
 43888                                  ;
 43889                                  ;       dw OFFSET DOSDATA: redir_patch
 43890                                  ;       dw OFFSET DOSDATA: redir_patch
 43891                                  ;
 43892                                  ;;hkn	Short_Addr  E&sect
 43893                                  ;;hkn	Short_Addr  L&sect
 43894                                  ;
 43895                                  ;ELSE
 43896                                  ;	DW	0
 43897                                  ;	DW	0
 43898                                  ;ENDIF
 43899                                  ;ENDM
 43900                                  ;	DW	0
 43901                                  
 43902                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 43903                                   
 43904 00000315 [0C0D]                  	dw 	redir_patch
 43905 00000317 [0C0D]                  	dw 	redir_patch			
 43906 00000319 [0C0D]                  	dw	redir_patch
 43907 0000031B [0C0D]                  	dw 	redir_patch
 43908                                  
 43909 0000031D 0000                    	dw	0
 43910                                  
 43911                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 43912                                  ; Also, IBM server 1.0 requires this also.
 43913                                  
 43914                                  	;EVEN			; Force swap area to start on word boundry
 43915 0000031F 90                      align 2
 43916                                  	;PUBLIC	SWAP_START
 43917                                  SWAP_START:	; LABEL BYTE
 43918 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 43919 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 43920 00000322 FF                      WPERR:		db -1		; Write protect error flag
 43921 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 43922 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 43923                                  
 43924                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 43925 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 43926 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 43927                                  ; end warning
 43928                                   
 43929 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 43930                                  
 43931 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 43932 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 43933 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 43934 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 43935 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 43936 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 43937                                  ;				; F.C. 2/17/86
 43938 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 43939 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 43940                                  ;align 2
 43941                                  SWAP_ALWAYS:	; 05/08/2018
 43942 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 43943                                  				;   extended error type stuff.
 43944                                  				;   NOTE: does not have Correct value on
 43945                                  				;   1-12, OEM, Get/Set CurrentPDB,
 43946                                  				;   GetExtendedError system calls)
 43947 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 43948 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 43949 00000340 0000                    FirstArena:	dw 0		; first free block found
 43950 00000342 0000                    BestArena:	dw 0		; best free block found
 43951 00000344 0000                    LastArena:	dw 0		; last free block found
 43952 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 43953 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 43954 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 43955 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 43956 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 43957 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 43958 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 43959                                  
 43960                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 43961                                  	;EVEN
 43962 0000034F 90                      align 2
 43963                                  		; DOSDATA:0350h (MSDOS 6.21)
 43964 00000350 00                      DAY:		db 0		; Day of month
 43965 00000351 00                      MONTH:		db 0		; Month of year
 43966 00000352 0000                    YEAR:		dw 0		; Year (with century)
 43967 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 43968 00000356 00                      WEEKDAY:	db 0		; Day of week
 43969                                  ; end warning
 43970                                  
 43971 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 43972 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 43973 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 43974                                  
 43975                                  ; Combination of all device call parameters
 43976                                  	;PUBLIC	DEVCALL 	;
 43977                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 43978                                  DEVCALL: ; 08/08/2018
 43979 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 43980 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 43981 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 43982 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 43983 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 43984                                  
 43985                                  	;PUBLIC	CALLUNIT
 43986                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 43987                                  CALLFLSH: ; LABEL   WORD	;
 43988 00000367 00                      CALLMED:	db 0		; media byte
 43989                                  CALLBR:	  ; LABEL   DWORD	;
 43990                                  	;PUBLIC	CALLXAD 	;
 43991                                  CALLXAD:  ; LABEL   DWORD	;
 43992 00000368 00                      CALLRBYT:	db 0		;
 43993                                  	;PUBLIC	CALLVIDM	;
 43994                                  CALLVIDM: ; LABEL   DWORD	;
 43995 00000369 00<rep 3h>              	times 3 db 0	;
 43996                                  	;PUBLIC CallBPB		;
 43997                                  CALLBPB:  ; LABEL   DWORD	;
 43998                                  CALLSCNT:			;
 43999 0000036C 0000                    		dw 0		;
 44000                                  	;PUBLIC	CALLSSEC	;
 44001                                  CALLSSEC: ; LABEL   WORD	;
 44002 0000036E 0000                    		dw 0		;
 44003 00000370 00000000                CALLVIDRW:	dd 0		;
 44004                                  ;MSDOS 6.0
 44005 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 44006 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 44007                                  
 44008                                  ; Same as above for I/O calls	;
 44009                                  				;
 44010                                  	;PUBLIC	IOCall		;
 44011                                  ;IOCALL	SRHEAD	<>		;
 44012                                  IOCALL:	; 07/08/2018
 44013 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 44014 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 44015 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 44016 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 44017 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 44018                                  IOFLSH:	  ; LABEL   WORD	;
 44019                                          ;PUBLIC  IORCHR		;
 44020                                  IORCHR:	  ; LABEL   BYTE	;
 44021 00000389 00                      IOMED:		db 0		;
 44022 0000038A 00000000                IOXAD:		dd 0		;
 44023 0000038E 0000                    IOSCNT:		dw 0		;	
 44024 00000390 0000                    IOSSEC:		dw 0		;
 44025                                  
 44026                                  ; Call struct for DSKSTATCHK	;
 44027 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 44028 00000393 00                      		db 0
 44029 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 44030 00000395 0000                    DSKSTST:	dw 0		;
 44031 00000397 00<rep 8h>              	times 8	db 0		;
 44032 0000039F 00                      DSKCHRET:	db 0		;
 44033                                  
 44034                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 44035                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 44036                                  ;hkn   short_addr  DEVIOBUF	;
 44037                                  	
 44038 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 44039 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 44040 000003A4 0100                    DSKSTCNT:	dw 1		;
 44041 000003A6 0000                    		dw 0		;
 44042                                  
 44043 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 44044                                  
 44045                                  ;MSDOS 6.0
 44046                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 44047 000003A9 00000000                		dd 0		;MS. position
 44048 000003AD 00000000                		dd 0		;MS. length
 44049                                  
 44050                                  ;hkn; the foll. was moved from dosmes.asm.
 44051                                  
 44052                                  	;EVEN
 44053 000003B1 90                      align 2				; needed to maintain offsets
 44054                                  
 44055                                  		; DOSDATA:03B2h (MSDOS 6.21)
 44056                                  USERNUM:
 44057 000003B2 0000                     		dw 0		; 24 bit user number
 44058 000003B4 00                      		db 0
 44059                                  ;IF IBM
 44060                                  ;IF IBMCOPYRIGHT
 44061                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 44062                                  ;ELSE
 44063                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 44064                                  ;ENDIF
 44065                                  ;ELSE
 44066 000003B5 FF                      OEMNUM:		DB 0FFh
 44067                                  ;ENDIF
 44068                                  
 44069                                  ;============================================================================
 44070                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 44071                                  ;============================================================================
 44072                                  ; 25/04/2019 - Retro DOS 4.0
 44073                                  
 44074                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 44075                                  ; ----------------------------------------------------------
 44076                                  ; This data section which was named as uninitialized data
 44077                                  ; (as overlayed by initialization code) but follows 
 44078                                  ; initialized data section from DOSDATA:03B6h address
 44079                                  ; (in otherwords, the method is different than MSDOS 3.3,
 44080                                  ; and there is not overlaying..)
 44081                                  ; **********************************************************
 44082                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 44083                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 44084                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 44085                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 44086                                  ; TIMEBUF is at offset 03B6h.
 44087                                  ; **********************************************************	
 44088                                  
 44089                                  ;Break <Uninitialized data overlayed by initialization code>
 44090                                  ;----------------------------------------------------------------------------
 44091                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 44092                                  ; Init code overlaps with data area below
 44093                                  
 44094                                  ; 	ORG     0
 44095                                  
 44096                                  MSDAT001S:	; label byte
 44097                                  
 44098                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 44099                                  TIMEBUF: ;	times 6 db 0
 44100 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 44101 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 44102                                  
 44103                                  ; The following areas are used as temp buffer in EXEC system call
 44104                                  
 44105                                  ; DOSDATA:03BEh
 44106                                  OPENBUF: ;times 64  dw	0
 44107 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 44108                                  RENBUF:	
 44109 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 44110                                  
 44111                                  ; Buffer for search calls
 44112                                  SEARCHBUF:	
 44113 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 44114                                  DUMMYCDS:  ;times 88 db 0
 44115 000004F3 00<rep 58h>             	times	curdirLen db 0
 44116                                  
 44117                                  ; End of contiguous buffer
 44118                                   
 44119                                  ; Temporary directory entry for use by many routines. Device directory
 44120                                  ; entries (bogus) are built here.
 44121                                  
 44122                                  ; DOSDATA:054Bh
 44123                                  
 44124                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 44125                                  
 44126                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 44127                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 44128                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 44129                                  
 44130                                  NAME1:	
 44131 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 44132                                  NAME2:
 44133 00000557 00<rep Dh>              	times	13 db	0 		;
 44134                                  DESTSTART:
 44135 00000564 0000                    	dw	0			;
 44136                                          ;DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 44137                                  	;times	5  db	0
 44138 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 44139                                  
 44140                                  ; End Temporary directory entry.
 44141                                  
 44142 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 44143                                  EXTFCB:	
 44144 0000056C 00                      	db	0		; TRUE => extended FCB in use
 44145                                  SATTRIB:
 44146 0000056D 00                      	db	0		; Storage for search attributes
 44147                                  OPEN_ACCESS:
 44148 0000056E 00                      	db	0		; access of open system call
 44149                                  FOUNDDEL:
 44150 0000056F 00                      	db	0		; true => file was deleted
 44151                                  FOUND_DEV:
 44152 00000570 00                      	db	0		; true => search found a device
 44153                                  FSPLICE:
 44154 00000571 00                      	db	0		; true => do a splice in transpath
 44155                                  FSHARING:
 44156 00000572 00                      	db	0		; TRUE => no redirection
 44157                                  SECCLUSPOS:
 44158 00000573 00                      	db	0		; Position of first sector within cluster
 44159 00000574 00                      TRANS:	db	0		;
 44160 00000575 00                      READOP:	db	0		;
 44161                                  THISDRV:
 44162 00000576 00                      	db	0		;
 44163                                  CLUSFAC:
 44164 00000577 00                      	db	0		;
 44165                                  CLUSSPLIT:
 44166 00000578 00                      	db	0		;
 44167                                  INSMODE:
 44168 00000579 00                      	db	0		; true => insert mode in buffered read
 44169 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 44170 0000057B 00                      VOLID:	db	0		;
 44171                                  EXIT_TYPE:
 44172 0000057C 00                      	db	0		; type of exit...
 44173                                   
 44174                                  	;EVEN
 44175                                  
 44176 0000057D 90                      align 2
 44177                                  
 44178                                  ; DOSDATA:057Eh
 44179                                  
 44180                                  ; WARNING - the following two items are accessed as a word
 44181                                  
 44182                                  CREATING:
 44183 0000057E 00                      	db	0		; true => creating a file
 44184 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 44185                                  				; = DIRFREE iff BUGBUG
 44186                                  EXITHOLD:
 44187 00000580 00000000                	dd	0		; Temp location for proc terminate
 44188                                  USER_SP:
 44189 00000584 0000                    	dw	0		; User SP for system call
 44190                                  USER_SS:
 44191 00000586 0000                    	dw	0		; User SS for system call
 44192                                  CONTSTK:
 44193 00000588 0000                    	dw	0		;
 44194                                  THISDPB:
 44195 0000058A 00000000                	dd	0		;
 44196                                  CLUSSAVE:
 44197 0000058E 0000                    	dw	0		;
 44198                                  CLUSSEC:
 44199 00000590 00000000                	dd	0		;>32mb			AC0000
 44200                                  PREREAD:
 44201 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 44202 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 44203                                  FATBYTE:
 44204 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 44205                                  ; DOSDATA:059Ah
 44206 0000059A 00000000                DEVPT:	dd	0		;
 44207                                  THISSFT:
 44208 0000059E 00000000                	dd	0		; Address of user SFT
 44209                                  THISCDS:
 44210 000005A2 00000000                	dd	0		; Address of current CDS
 44211                                  THISFCB:
 44212 000005A6 00000000                	dd	0		; Address of user FCB
 44213 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 44214 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 44215 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 44216                                  WFP_START:
 44217 000005B2 0000                    	dw	0		;
 44218                                  REN_WFP:
 44219 000005B4 0000                    	dw	0		;
 44220                                  CURR_DIR_END:
 44221 000005B6 0000                    	dw	0		;
 44222                                  NEXTADD:
 44223 000005B8 0000                    	dw	0		;
 44224                                  LASTPOS:
 44225 000005BA 0000                    	dw	0		;
 44226                                  CLUSNUM:
 44227 000005BC 0000                    	dw	0		;
 44228 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 44229                                  DIRSTART:
 44230 000005C2 0000                    	dw	0		;
 44231 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 44232 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 44233                                                                  ; sectors
 44234                                  BYTSECPOS:
 44235 000005CC 0000                    	dw	0		; Position of first byte within sector
 44236                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 44237 000005CE 0000<rep 2h>                    times	2 dw 0
 44238                                  BYTCNT1:
 44239 000005D2 0000                    	dw	0		; No. of bytes in first sector
 44240                                  BYTCNT2:
 44241 000005D4 0000                    	dw	0		; No. of bytes in last sector
 44242 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 44243                                  ; DOSDATA:05D8h
 44244                                  ENTFREE:
 44245 000005D8 0000                    	dw	0		;
 44246                                  ENTLAST:
 44247 000005DA 0000                    	dw	0		;
 44248                                  NXTCLUSNUM:
 44249 000005DC 0000                    	dw	0		;
 44250                                  GROWCNT:
 44251 000005DE 00000000                	dd	0		;
 44252 000005E2 00000000                CURBUF:	dd	0		;
 44253 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 44254 000005EA 0000                    SAVEBX:	dw	0		;
 44255 000005EC 0000                    SAVEDS:	dw	0		;
 44256                                  RESTORE_TMP:
 44257 000005EE 0000                    	dw	0		; return address for restore world
 44258 000005F0 0000                    NSS:	dw	0
 44259 000005F2 0000                    NSP:	dw	0
 44260                                  ; DOSDATA:05F4h
 44261                                  EXTOPEN_FLAG:
 44262 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 44263                                  EXTOPEN_ON:
 44264 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 44265                                  EXTOPEN_IO_MODE:
 44266 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 44267                                  SAVE_DI:
 44268 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 44269                                  SAVE_ES:
 44270 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 44271                                  SAVE_DX:
 44272 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 44273                                  SAVE_CX:
 44274 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 44275                                  SAVE_BX:
 44276 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 44277                                  SAVE_SI:
 44278 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 44279                                  SAVE_DS:
 44280 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 44281                                  
 44282                                  ; DOSDATA:0607h
 44283                                  
 44284                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 44285                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 44286                                  ; the high 16, the low 16 are still in the register.
 44287                                  
 44288                                  HIGH_SECTOR:	
 44289 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 44290                                  ;OffsetMagicPatch:
 44291                                  ;	dw	MagicPatch ;scottq 8/6/92
 44292                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44293 00000609 0000                    	dw	0
 44294                                  				;see dos\mpatch.asm
 44295                                  DISK_FULL:
 44296 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 44297                                  TEMP_VAR:
 44298 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 44299                                  TEMP_VAR2:
 44300 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 44301 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 44302                                  DOS34_FLAG:
 44303 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 44304                                  NO_FILTER_PATH:
 44305 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 44306                                  NO_FILTER_DPATH:
 44307 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 44308                                  ; M008
 44309                                  AbsRdWr_SS:
 44310 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 44311                                  AbsRdWr_SP:
 44312 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 44313                                  
 44314                                  	; I_am   UU_Callback_flag,BYTE,<0>  ; Unused
 44315                                  ; M008
 44316                                   
 44317                                   
 44318                                  ; make those pushes fast!!!
 44319                                  
 44320                                  ;EVEN
 44321                                  
 44322 0000061F 90                      align 2
 44323                                  
 44324                                  StackSize   equ 180h  ; 384	; gross but effective
 44325                                  
 44326                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 44327                                  ;				; made up their minds about
 44328                                   
 44329                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 44330                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 44331                                  
 44332                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 44333                                   
 44334 00000620 00<rep 180h>                    times	StackSize db	0	;
 44335                                  AUXSTACK:			; LABEL   BYTE
 44336                                   
 44337 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 44338                                  DSKSTACK:			; LABEL   BYTE
 44339                                   
 44340 00000920 00<rep 180h>                    times	StackSize db	0	;
 44341                                  IOSTACK:			; LABEL   BYTE
 44342                                  
 44343                                  ; DOSDATA:0AA0h 
 44344                                   
 44345                                  ; patch space for Boca folks.
 44346                                  ; Say What????!!! This does NOT go into the swappable area!
 44347                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 44348                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 44349                                   
 44350                                  IBMPATCH: ; label byte
 44351                                  PRINTER_FLAG:
 44352 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 44353                                  VOLCHNG_FLAG:
 44354 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 44355                                  VIRTUAL_OPEN:
 44356 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 44357                                   
 44358                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 44359                                  
 44360                                  FSeek_drive:
 44361 00000AA3 00                      	db	0		;AN000; fastseek drive #
 44362                                  FSeek_firclus:
 44363 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 44364                                  FSeek_logclus:
 44365 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 44366                                  FSeek_logsave:
 44367 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 44368                                  
 44369                                  ; DOSDATA:0AAAh
 44370                                  
 44371                                  TEMP_DOSLOC:
 44372 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 44373                                  				;at SYSINIT time.
 44374                                  SWAP_END:  ; LABEL   BYTE
 44375                                   
 44376                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 44377                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 44378                                  ; to include this byte.
 44379                                   
 44380 00000AAC 00                      	db	0
 44381                                  
 44382                                  ; DOSDATA:0AADh
 44383                                   
 44384                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 44385                                  
 44386                                  ;DOSDATA    ENDS
 44387                                  
 44388                                  ;============================================================================
 44389                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 44390                                  ;============================================================================
 44391                                  ; 27/04/2019 - Retro DOS 4.0
 44392                                  ; 16/07/2018 - Retro DOS 3.0
 44393                                  
 44394                                  ;DOSDATA Segment
 44395                                  
 44396                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 44397                                  
 44398                                  ;
 44399                                  ; upper case table
 44400                                  ; ---------------------------------------------------------------------------
 44401                                  UCASE_TAB:	; label   byte
 44402 00000AAD 8000                    	dw	128
 44403 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 44404 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44405 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44406 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44407 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44408 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44409 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44410 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44411 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44412 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44413 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44414 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44415 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44416 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44417 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44418 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44419                                  ;
 44420                                  ; file upper case table
 44421                                  ; ---------------------------------------------------------------------------
 44422                                  FILE_UCASE_TAB:	; label  byte
 44423 00000B2F 8000                    	dw	128
 44424 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 44425 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44426 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44427 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44428 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44429 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44430 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44431 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44432 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44433 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44434 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44435 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44436 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44437 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44438 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44439 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44440                                  ;
 44441                                  ; file char list
 44442                                  ; ---------------------------------------------------------------------------
 44443                                  FILE_CHAR_TAB:	; label  byte
 44444 00000BB1 1600                    	dw	22				; length
 44445 00000BB3 0100FF                  	db	1,0,255 			; include all
 44446 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 44447 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 44447 00000BC2 7C3C3E2B3D3B2C     
 44448                                  	;db	24 dup (?)			; reserved
 44449 00000BC9 00<rep 18h>             	times	24 db 0
 44450                                  
 44451                                  ;
 44452                                  ; collate table
 44453                                  ; ---------------------------------------------------------------------------
 44454                                  COLLATE_TAB:	; label   byte
 44455 00000BE1 0001                    	dw	256
 44456 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 44457 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 44458 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 44459 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 44460 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 44461 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 44462 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 44463 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 44464 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 44465 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44466 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44467 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 44468 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 44469 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44470 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44471 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 44472 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 44473 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 44474 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 44475 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 44476 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 44477 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 44478 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44479 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44480 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44481 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44482 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44483 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44484 00000CC3 E053                    	db	224,"S"
 44485 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 44486 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44487 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44488 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44489                                  
 44490                                  ; ------------------------------------------------<MSKK01>----------------------
 44491                                  
 44492                                  ; DOSDATA:0CE3h
 44493                                  
 44494                                  ; 29/04/2019
 44495                                  
 44496                                  ; dbcs is not supported in DOS 3.3
 44497                                  ;		   DBCS_TAB	    CC_DBCS <>
 44498                                  ;
 44499                                  ; DBCS for DOS 4.00			   2/12/KK
 44500                                  
 44501                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 44502                                  ; ------------------------------------------------<MSKK01>----------------------
 44503                                  ;ifdef	DBCS
 44504                                  ; ifdef	  JAPAN
 44505                                  ;		dw	6		; <MSKK01>
 44506                                  ;		db	081h,09fh	; <MSKK01>
 44507                                  ;		db	0e0h,0fch	; <MSKK01>
 44508                                  ;		db	0,0		; <MSKK01>
 44509                                  ;
 44510                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 44511                                  ; endif
 44512                                  ; ifdef	  TAIWAN
 44513                                  ;		dw	4		; <TAIWAN>
 44514                                  ;		db	081h,0FEh	; <TAIWAN>
 44515                                  ;		db	0,0		; <TAIWAN>
 44516                                  ;
 44517                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44518                                  ; endif
 44519                                  ; ifdef   KOREA                         ; Keyl
 44520                                  ;               dw      4               ; <KOREA>
 44521                                  ;               db      0A1h,0FEh       ; <KOREA>
 44522                                  ;               db      0,0             ; <KOREA>
 44523                                  ;
 44524                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44525                                  ;  endif
 44526                                  ;else
 44527 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 44528                                  		;db	16 dup(0)	;AN000;  2/12/KK
 44529 00000CE5 00<rep 10h>             		times	16 db 0
 44530                                  
 44531                                  ;		dw	6		;  2/12/KK
 44532                                  ;		db	081h,09Fh	;  2/12/KK
 44533                                  ;		db	0E0h,0FCh	;  2/12/KK
 44534                                  ;		db	0,0		;  2/12/KK
 44535                                  ;
 44536                                  ;endif
 44537                                  ; ------------------------------------------------<MSKK01>----------------------
 44538                                  
 44539                                  ; DOSDATA:0CF5h
 44540                                  
 44541                                  ; ---------------------------------------------------------------------------
 44542                                  ;
 44543                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 44544                                  ;     ENTRY: AL = Character to map
 44545                                  ;     EXIT:  AL = The converted character
 44546                                  ; Alters no registers except AL and flags.
 44547                                  ; The routine should do nothing to chars below 80H.
 44548                                  ; ---------------------------------------------------------------------------
 44549                                  ; Example:
 44550                                  
 44551                                  MAP_CASE:
 44552                                  ;Procedure MAP_CASE,FAR
 44553                                  
 44554 00000CF5 3C80                    	CMP	AL,80h
 44555 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 44556 00000CF9 CB                      	RETF
 44557                                  Map1:
 44558 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 44559 00000CFC 1E                      	PUSH	DS
 44560 00000CFD 53                      	PUSH	BX
 44561 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 44562                                  FINISH:
 44563 00000D01 0E                      	PUSH	CS		;Move to DS
 44564 00000D02 1F                      	POP	DS
 44565 00000D03 D7                      	XLAT			;Get upper case character
 44566 00000D04 5B                      	POP	BX
 44567 00000D05 1F                      	POP	DS
 44568                                  L_RET:	
 44569 00000D06 CB                      	RETF
 44570                                  
 44571                                  ;EndProc MAP_CASE
 44572                                  
 44573                                  ; ---------------------------------------------------------------------------
 44574                                  
 44575                                  ; The variables for ECS version are moved here for the same data alignments
 44576                                  ; as IBM-DOS and MS-DOS.
 44577                                  
 44578                                  InterChar:
 44579 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 44580                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 44581                                  DUMMY:	; LABEL   WORD
 44582                                  InterCon:  
 44583 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 44584                                  SaveCurFlg:
 44585 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 44586                                  
 44587                                  ; ---------------------------------------------------------------------------
 44588                                  
 44589 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 44590                                  redir_patch:
 44591 00000D0C 00                      	  db	0
 44592                                  
 44593                                  ; DOSDATA:0D0Dh
 44594                                  
 44595                                  Mark1:	; label byte
 44596                                  
 44597                                  ;IF2
 44598                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 44599                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44600                                  ;	ENDIF
 44601                                  ;ENDIF
 44602                                  
 44603 00000D0D 00<rep 5h>              	  times 5 db 0
 44604                                  
 44605                                  ;############################################################################
 44606                                  ;
 44607                                  ; ** HACK FOR DOS 4.0 REDIR **
 44608                                  ; 
 44609                                  ; The redir requires the following:
 44610                                  ;
 44611                                  ;	MSVERS	offset D12H
 44612                                  ;	YRTAB	offset D14H
 44613                                  ; 	MONTAB	offset D1CH
 44614                                  ;
 44615                                  ; WARNING! WARNING!
 44616                                  ; 
 44617                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44618                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44619                                  ;
 44620                                  ; CURRENTLY MARK1 = 0D0DH
 44621                                  ;
 44622                                  ;############################################################################
 44623                                  
 44624                                  	;ORG	0D12h
 44625                                  
 44626                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 44627                                  
 44628                                  	;db	6
 44629                                  	;db	20
 44630                                  
 44631                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 44632                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 44633 00000D12 05                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 44634 00000D13 00                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 44635                                  
 44636                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 44637                                  ;
 44638                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
 44639                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
 44640                                  
 44641                                  ; Days in year
 44642                                  
 44643                                  YRTAB:   
 44644 00000D14 C8A6                    	DB	200,166			; Leap year
 44645 00000D16 C8A5                    	DB	200,165
 44646 00000D18 C8A5                    	DB	200,165
 44647 00000D1A C8A5                    	DB	200,165
 44648                                  
 44649                                  ; Days of each month
 44650                                  
 44651                                  MONTAB:        
 44652 00000D1C 1F                      	DB      31                      ; January
 44653                                  february:
 44654 00000D1D 1C                      	DB	28 			; February--reset each 
 44655                                  					; time year changes
 44656 00000D1E 1F                              DB      31                      ; March
 44657 00000D1F 1E                              DB      30                      ; April
 44658 00000D20 1F                              DB      31                      ; May
 44659 00000D21 1E                              DB      30                      ; June
 44660 00000D22 1F                              DB      31                      ; July
 44661 00000D23 1F                              DB      31                      ; August
 44662 00000D24 1E                              DB      30                      ; September
 44663 00000D25 1F                              DB      31                      ; October
 44664 00000D26 1E                              DB      30                      ; November
 44665 00000D27 1F                              DB      31                      ; December
 44666                                  
 44667                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 44668                                  
 44669                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 44670                                  
 44671                                  SysInitTable:
 44672                                  	;dw	SYSINITVAR
 44673 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 44674 00000D2A 0000                            dw      0		; segment
 44675 00000D2C [0512]                          dw	COUNTRY_CDPG	; pointer to country tabl
 44676 00000D2E 0000                            dw      0		; segment of pointer
 44677                                  
 44678                                  ; DOS 3.3 F.C. 6/12/86
 44679                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 44680                                  
 44681                                  FastTable:				; a better name
 44682                                  FastOpenTable:
 44683 00000D30 0200                    	dw      2                       ; number of entries
 44684 00000D32 [AD12]                  	dw      FastRet			; pointer to ret instr.
 44685 00000D34 0000                    	dw      0                       ; and will be modified by
 44686 00000D36 [AD12]                  	dw      FastRet			; FASTxxx when loaded in
 44687 00000D38 0000                    	dw      0                       
 44688                                  
 44689                                  ; DOS 3.3 F.C. 6/12/86
 44690                                  
 44691                                  FastFlg:				; flags
 44692                                  FastOpenFlg:
 44693 00000D3A 00                      	db	0			; don't change the foll: order  
 44694                                  
 44695                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 44696                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 44697                                  ; or filled by FastOPen when calling FastOpen Lookup
 44698                                  
 44699                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 44700                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 44701                                  	;times	11 db 0
 44702 00000D3B 00<rep Bh>              	times	FEI.size db 0
 44703                                  
 44704                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 44705                                  ; when calling FastOpen Lookup
 44706                                  
 44707                                  Dir_Info_Buff:	; label  byte
 44708                                  	;db   	SIZE dir_entry dup (0)
 44709                                  	;times	32 db 0
 44710 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 44711                                  
 44712                                  Next_Element_Start:
 44713 00000D66 0000                    	dw	0			; save next element start offset
 44714                                  Del_ExtCluster:
 44715 00000D68 0000                    	dw	0			; for dos_delete                       
 44716                                  
 44717                                  ; The following is a stack and its pointer for interrupt 2F which is used
 44718                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 44719                                  ; not to destroy the INT 21 stack saved for the user.
 44720                                  
 44721                                  USER_SP_2F:	; LABEL  WORD
 44722 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 44723                                  
 44724                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 44725                                  DOS_TEMP:	; label  word		; temporary word
 44726                                  FAKE_STACK_2F:  
 44727                                  	; dw  14 dup (0)		; 12 register temporary storage
 44728 00000D6C 0000<rep Eh>            	times 14 dw 0
 44729                                  
 44730                                  Hash_Temp: 	;label  word		; temporary word             
 44731                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 44732 00000D88 0000<rep 4h>            	times 4 dw 0
 44733                                              	
 44734                                  SCAN_FLAG:	
 44735 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 44736                                  DATE_FLAG:
 44737 00000D91 0000                    	dw     0                	; flag to update the date
 44738                                  
 44739                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 44740 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 44741                                  
 44742                                  MSG_EXTERROR:	; label  DWORD   ; for system message addr                                                       
 44743 00000D95 00000000                	dd     0               		; for extended error                   
 44744 00000D99 00000000                	dd     0			; for parser                           
 44745 00000D9D 00000000                	dd     0			; for critical errror                  
 44746 00000DA1 00000000                	dd     0			; for IFS                              
 44747 00000DA5 00000000                	dd     0			; for code reduction                   
 44748                                  
 44749                                  SEQ_SECTOR:	; label  DWORD 		; last sector read                                                     
 44750 00000DA9 FFFFFFFF                	dd     -1                                                        
 44751                                  SC_SECTOR_SIZE:
 44752 00000DAD 0000                    	dw	0			; sector size for SC                 
 44753                                  SC_DRIVE:
 44754 00000DAF 00                      	db	0			; drive # for secondary cache        
 44755                                  CurSC_DRIVE:
 44756 00000DB0 FF                      	db	-1			; current SC drive                   
 44757                                  CurSC_SECTOR:
 44758 00000DB1 00000000                	dd	0			; current SC starting sector         
 44759                                  SC_STATUS:
 44760 00000DB5 0000                    	dw	0			; SC status word                     
 44761                                  SC_FLAG:
 44762 00000DB7 00                      	db	0			; SC flag                            
 44763                                  AbsDskErr:
 44764 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 44765                                                                                            
 44766                                  NO_NAME_ID:	; label byte                                                           
 44767 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id                      
 44767 00000DC3 2020               
 44768                                  
 44769                                  ;hkn; moved from TABLE segment in kstrin.asm
 44770                                  
 44771                                  KISTR001S:	; label	byte		; 2/17/KK
 44772 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 44773                                  KISTR001E:	; label	byte		; 2/17/KK
 44774                                  
 44775                                  ; the nul device driver used to be part of the code. However, since the 
 44776                                  ; header is in the data, and the entry points are only given as an offset,
 44777                                  ; the strategy and interrupt entry points must also be in the data now.
 44778                                  
 44779                                  ; DOSDATA:0DC6h
 44780                                  
 44781                                  SNULDEV:
 44782                                  ;procedure snuldev,far
 44783                                  	;or	word [es:bx+3],100h
 44784                                  	; 17/12/2022
 44785                                  	;or	byte [es:bx+4],01h
 44786                                  	; 05/01/2024 (Original MSDOS and RetroDOS DATA address compatibility)
 44787                                  	;or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 44788 00000DC6 26814F030001            	or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 44789                                  INULDEV:
 44790 00000DCC CB                      	retf				; must not be a return!
 44791                                  ;endproc snuldev
 44792                                  
 44793                                  ;M044
 44794                                  ; Second part of save area for saving last para of Windows memory
 44795                                  
 44796                                  WinoldPatch2:
 44797                                  	;db	8 dup (?)	; M044
 44798 00000DCD 00<rep 8h>              	times	8 db 0	
 44799                                  UmbSave2:
 44800                                  	;db	5 dup (?)	; M062
 44801 00000DD5 00<rep 5h>              	times	5 db 0
 44802                                  UmbSaveFlag:
 44803 00000DDA 00                      	db	0		; M062
 44804                                  
 44805                                  ; DOSDATA:0DDBh
 44806                                  
 44807                                  Mark2:	; label byte
 44808                                  
 44809                                  ;IF2
 44810                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 44811                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44812                                  ;	ENDIF
 44813                                  ;ENDIF
 44814                                  
 44815                                  ;############################################################################
 44816                                  ;
 44817                                  ; ** HACK FOR DOS 4.0 REDIR **
 44818                                  ; 
 44819                                  ; The redir requires the following:
 44820                                  ;
 44821                                  ;	ERR_TABLE_21	offset DDBH
 44822                                  ;	ERR_TABLE_24	offset E5BH
 44823                                  ; 	ErrMap24	offset EABH
 44824                                  ;
 44825                                  ; WARNING! WARNING!
 44826                                  ;
 44827                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44828                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44829                                  ;
 44830                                  ; CURRENTLY MARK2 = 0DD0H
 44831                                  ;
 44832                                  ;############################################################################
 44833                                  
 44834                                  	;ORG	0DDBh
 44835                                  
 44836                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 44837                                  
 44838                                  ; ---------------------------------------------------------------------------
 44839                                  ;
 44840                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 44841                                  ; errors. Each entry is 4 bytes long:
 44842                                  ;
 44843                                  ;       Err#,Class,Action,Locus
 44844                                  ;
 44845                                  ; A value of 0FFh indicates a call specific value (ie. should already
 44846                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44847                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 44848                                  ;
 44849                                  ; ---------------------------------------------------------------------------
 44850                                  
 44851                                  ;ErrTab  Macro   err,class,action,locus
 44852                                  ;ifidn <locus>,<0FFh>
 44853                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 44854                                  ;ELSE
 44855                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 44856                                  ;ENDIF
 44857                                  ;ENDM
 44858                                  
 44859                                  ERR_TABLE_21: ; LABEL   BYTE
 44860 00000DDB 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 44861 00000DDF 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44862 00000DE3 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44863 00000DE7 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 44864 00000DEB 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 44865 00000DEF 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44866 00000DF3 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 44867 00000DF7 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44868 00000DFB 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44869 00000DFF 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44870 00000E03 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44871 00000E07 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44872 00000E0B 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 44873 00000E0F 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44874 00000E13 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 44875 00000E17 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 44876 00000E1B 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44877 00000E1F 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 44878 00000E23 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44879 00000E27 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44880 00000E2B 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 44881 00000E2F 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 44882 00000E33 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 44883 00000E37 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 44884 00000E3B 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 44885 00000E3F 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44886 00000E43 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 44887 00000E47 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44888                                      ; MSDOS 6.0
 44889 00000E4B 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44890 00000E4F 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44891 00000E53 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 44892 00000E57 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 44893                                  
 44894                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 44895                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 44896                                  ;		db 2,8,3,2
 44897                                  ;		db 3,8,3,2
 44898                                  ;		db 4,1,4,1
 44899                                  ;		db 5,3,3,0FFh
 44900                                  ;		db 6,7,4,1
 44901                                  ;		db 7,7,5,5
 44902                                  ;		db 8,1,4,5
 44903                                  ;		db 9,7,4,5
 44904                                  ;		db 0Ah,7,4,5
 44905                                  ;		db 0Bh,9,3,1
 44906                                  ;		db 0Ch,7,4,1
 44907                                  ;		db 0Dh,9,4,1
 44908                                  ;		db 0Fh,8,3,2
 44909                                  ;		db 10h,3,3,2
 44910                                  ;		db 11h,0Dh,3,2
 44911                                  ;		db 12h,8,3,2
 44912                                  ;		db 50h,0Ch,3,2
 44913                                  ;		db 20h,0Ah,2,2
 44914                                  ;		db 21h,0Ah,2,2
 44915                                  ;		db 54h,1,4,0FFh
 44916                                  ;		db 56h,3,3,1
 44917                                  ;		db 52h,1,4,2
 44918                                  ;		db 32h,9,3,3
 44919                                  ;		db 55h,0Ch,3,3
 44920                                  ;		db 57h,9,3,1
 44921                                  ;		db 53h,0Dh,4,1
 44922                                  ;		db 24h,1,4,5
 44923                                  ; MSDOS 6.0 (MSDOS 6.21)
 44924                                  ;		db 26h,1,4,1
 44925                                  ;		db 27h,1,4,1
 44926                                  ;		db 5Ah,0Dh,4,2
 44927                                  ; MSDOS 6.0 & MSDOS 3.3
 44928                                  ;		db 0FFh,0FFh,0FFh,0FFh
 44929                                  
 44930                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 44931                                  
 44932                                  ; ---------------------------------------------------------------------------
 44933                                  ;
 44934                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 44935                                  ; errors. Each entry is 4 bytes long:
 44936                                  ;
 44937                                  ;       Err#,Class,Action,Locus
 44938                                  ;
 44939                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 44940                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44941                                  ; THE END.
 44942                                  ;
 44943                                  ; ---------------------------------------------------------------------------
 44944                                  
 44945                                  ERR_TABLE_24: ; LABEL   BYTE
 44946 00000E5B 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44947 00000E5F 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44948 00000E63 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 44949 00000E67 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44950 00000E6B 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 44951 00000E6F 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44952 00000E73 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 44953 00000E77 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44954 00000E7B 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 44955 00000E7F 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 44956 00000E83 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 44957 00000E87 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 44958 00000E8B 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 44959 00000E8F 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44960 00000E93 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44961 00000E97 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44962 00000E9B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 44963 00000E9F 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44964 00000EA3 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44965 00000EA7 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 44966                                  
 44967                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 44968                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 44969                                  ;		db 14h,4,5,1
 44970                                  ;		db 15h,5,7,0FFh
 44971                                  ;		db 16h,4,5,1
 44972                                  ;		db 17h,0Bh,4,2
 44973                                  ;		db 18h,4,5,1
 44974                                  ;		db 19h,5,1,2
 44975                                  ;		db 1Ah,0Bh,7,2
 44976                                  ;		db 1Bh,0Bh,4,2
 44977                                  ;		db 1Ch,2,7,4
 44978                                  ;		db 1Dh,5,4,0FFh
 44979                                  ;		db 1Eh,5,4,0FFh
 44980                                  ;		db 1Fh,0Dh,4,0FFh
 44981                                  ;		db 20h,0Ah,2,2
 44982                                  ;		db 21h,0Ah,2,2
 44983                                  ;		db 22h,0Bh,7,2
 44984                                  ;		db 32h,9,3,3
 44985                                  ;		db 23h,7,4,1
 44986                                  ;		db 24h,1,4,5
 44987                                  ;		db 0FFh,0Dh,5,0FFh
 44988                                  
 44989                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 44990                                  
 44991                                  ; ---------------------------------------------------------------------------
 44992                                  ;
 44993                                  ; We need to map old int 24 errors and device driver errors into the new set
 44994                                  ; of errors. The following table is indexed by the new errors
 44995                                  ;
 44996                                  ; ---------------------------------------------------------------------------
 44997                                  
 44998                                  ;Public  ErrMap24
 44999                                  ErrMap24: ; Label   BYTE
 45000 00000EAB 13                          DB  error_write_protect	; 0
 45001 00000EAC 14                          DB  error_bad_unit		; 1
 45002 00000EAD 15                          DB  error_not_ready		; 2
 45003 00000EAE 16                          DB  error_bad_command	; 3
 45004 00000EAF 17                          DB  error_CRC		; 4
 45005 00000EB0 18                          DB  error_bad_length	; 5
 45006 00000EB1 19                          DB  error_seek		; 6
 45007 00000EB2 1A                          DB  error_not_DOS_disk	; 7
 45008 00000EB3 1B                          DB  error_sector_not_found	; 8
 45009 00000EB4 1C                          DB  error_out_of_paper	; 9
 45010 00000EB5 1D                          DB  error_write_fault	; A
 45011 00000EB6 1E                          DB  error_read_fault	; B
 45012 00000EB7 1F                          DB  error_gen_failure	; C
 45013 00000EB8 1F                          DB  error_gen_failure	; D  RESERVED
 45014 00000EB9 1F                          DB  error_gen_failure	; E  RESERVED
 45015 00000EBA 22                          DB  error_wrong_disk	; F
 45016                                  
 45017                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 45018                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 45019                                  	
 45020                                  ErrMap24End: ; LABEL   BYTE
 45021                                  
 45022                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 45023                                  
 45024                                  ; ---------------------------------------------------------------------------
 45025                                  
 45026                                  ; 27/04/2019 - Retro DOS v4.0
 45027                                  
 45028                                  FIRST_BUFF_ADDR:
 45029 00000EBB 0000                    	dw	0			; first buffer address               
 45030                                  SPECIAL_VERSION:
 45031 00000EBD 0000                    	dw	0			;AN006; used by INT 2F 47H
 45032                                  FAKE_COUNT:
 45033 00000EBF 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 45034                                  OLD_FIRSTCLUS:
 45035 00000FBE 0000                    	dw	0			;AN011; save old first cluster for fastopen
 45036                                  
 45037                                  ; ---------------------------------------------------------------------------
 45038                                  
 45039                                  ;smr; moved from TABLE segment in exec.asm
 45040                                  
 45041 00000FC0 0000                    exec_init_SP: dw 0
 45042 00000FC2 0000                    exec_init_SS: dw 0
 45043 00000FC4 0000                    exec_init_IP: dw 0
 45044 00000FC6 0000                    exec_init_CS: dw 0
 45045                                  
 45046                                  exec_signature:
 45047 00000FC8 0000                    	dw	0	; must contain 4D5A (yay zibo!)
 45048                                  exec_len_mod_512:
 45049 00000FCA 0000                    	dw	0	; low 9 bits of length
 45050                                  exec_pages:
 45051 00000FCC 0000                    	dw	0	; number of 512b pages in file
 45052                                  exec_rle_count:
 45053 00000FCE 0000                    	dw	0	; count of reloc entries
 45054                                  exec_par_dir:
 45055 00000FD0 0000                    	dw	0	; number of paragraphs before image
 45056                                  exec_min_BSS:
 45057 00000FD2 0000                    	dw	0	; minimum number of para of BSS
 45058                                  exec_max_BSS:
 45059 00000FD4 0000                    	dw	0	; max number of para of BSS
 45060                                  exec_SS:
 45061 00000FD6 0000                    	dw	0	; stack of image
 45062                                  exec_SP:
 45063 00000FD8 0000                    	dw	0	; SP of image
 45064                                  exec_chksum:
 45065 00000FDA 0000                    	dw	0	; checksum of file (ignored)
 45066                                  exec_IP:
 45067 00000FDC 0000                    	dw	0	; IP of entry
 45068                                  exec_CS:
 45069 00000FDE 0000                    	dw	0	; CS of entry
 45070                                  exec_rle_table:
 45071 00000FE0 0000                    	dw	0	; byte offset of reloc table
 45072                                  
 45073                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 45074                                  
 45075                                  ;smr; eom
 45076                                  
 45077                                  ; ---------------------------------------------------------------------------
 45078                                  
 45079                                  ;SR;
 45080                                  ; WIN386 instance table for DOS
 45081                                  
 45082                                  Win386_Info:
 45083 00000FE2 0300                    	db	3, 0
 45084 00000FE4 000000000000000000-     	dd	0, 0, 0
 45084 00000FED 000000             
 45085 00000FF0 [F40F]0000              	dw	Instance_Table, 0
 45086                                  
 45087                                  Instance_Table:
 45088 00000FF4 [2200]00000200          	dw	CONTPOS, 0, 2
 45089 00000FFA [3200]00000400          	dw	BCON, 0, 4
 45090 00001000 [F901]00000601          	dw	CARPOS, 0, 106h
 45091 00001006 [0003]00000100          	dw	CHARCO, 0, 1
 45092 0000100C [C00F]00002200          	dw	exec_init_SP, 0, 34	; M074
 45093 00001012 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 45094 00001018 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 45095 0000101E 00000000                	dw	0, 0
 45096                                  
 45097                                  ; M001; SR;
 45098                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 45099                                  ; M001; some DOS variables. Note that the only really important variable in 
 45100                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 45101                                  ; M001; which does not need to be done in DOS 5.0. 
 45102                                  
 45103                                  ; 29/12/2022
 45104                                  ; (MSDOS 6.21 MSDOS.SYS DOSDATA:1022h)
 45105                                  
 45106                                  Win386_DOSVars:
 45107 00001022 05                      	db	5	;Major version 5 ; M001
 45108 00001023 00                      	db	0	;Minor version 0 ; M001
 45109 00001024 [EC05]                  	dw	SAVEDS	; M001
 45110 00001026 [EA05]                  	dw	SAVEBX	; M001
 45111 00001028 [2103]                  	dw	INDOS	; M001
 45112 0000102A [3E03]                  	dw	USER_ID	; M001
 45113 0000102C [1503]                  	dw	CritPatch ; M001
 45114 0000102E [8C00]                  	dw	UMB_HEAD ; M012
 45115                                  
 45116                                  ;SR;
 45117                                  ; Flag to indicate whether WIN386 is running or not
 45118                                  
 45119 00001030 00                      IsWin386: db	0
 45120                                  
 45121                                  ;M018
 45122                                  ; This variable contains the path to the VxD device needed for Win386
 45123                                  
 45124 00001031 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 45124 0000103A 2E33383600         
 45125                                  
 45126                                  ;End WIN386 support
 45127                                  
 45128                                  ; ---------------------------------------------------------------------------
 45129                                  
 45130                                  ;SR;
 45131                                  ; These variables have been added for the special lie support for device
 45132                                  ;drivers.
 45133                                  ;
 45134                                  
 45135                                  DriverLoad:	
 45136 0000103F 01                      	db	1	;initialized to do special handling
 45137                                  BiosDataPtr:
 45138 00001040 00000000                	dd	0
 45139                                  
 45140                                  ; 29/12/2022 - Retro DOS v4.1
 45141                                  %if 0
 45142                                  
 45143                                  ; 27/04/2019 - Retro DOS v4.0
 45144                                  ; 04/11/2022
 45145                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 45146                                  
 45147                                  ;------------------------------------------------------------------------
 45148                                  ; Patch for Sidekick
 45149                                  ;
 45150                                  ; A documented method for finding the offset of the Errormode flag in the 
 45151                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 45152                                  ; for the following sequence of instructions.
 45153                                  ;
 45154                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 45155                                  ;
 45156                                  ; The Offset of Errormode flag is 0320h
 45157                                  ;
 45158                                  ;------------------------------------------------------------------------
 45159                                  
 45160                                  	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 45161                                  	db	075h, 0Ch			 ; jnz  NearLabel
 45162                                  	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 45163                                  	db	0CDh, 028h			 ; int  28h
 45164                                  
 45165                                  ;--------------------------------------------------------------------------
 45166                                  ; Patch for PortOfEntry - M036
 45167                                  ;
 45168                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 45169                                  ; the offset of Errormode flag. The following patch is to support them in 
 45170                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 45171                                  ;
 45172                                  ;---------------------------------------------------------------------------
 45173                                  
 45174                                  	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 45175                                  	db	075h, 037h			 ; jnz	NearLabel
 45176                                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 45177                                  
 45178                                  %endif ; 29/12/2022
 45179                                  
 45180                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 45181                                  
 45182                                  ;--------------------------------------------------------------------------
 45183                                  
 45184                                  ;*** New FCB Implementation
 45185                                  ; This variable is used as a cache in the new FCB implementation to remember
 45186                                  ;the address of a local SFT that can be recycled for a regenerate operation
 45187                                  
 45188 00001044 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 45189                                  
 45190                                  ;DOSDATA ENDS
 45191                                  
 45192                                  ;============================================================================
 45193                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 45194                                  ;============================================================================
 45195                                  ; 27/04/2019 - Retro DOS 4.0
 45196                                  
 45197                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 45198                                  
 45199                                  ;---------------------------------------------------------------------------
 45200                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 45201                                  ;----------------------------------------------------------------------------
 45202                                  	
 45203                                  	;db	90h
 45204                                  
 45205                                  	;EVEN
 45206                                  align 2
 45207                                  
 45208                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 45209                                  
 45210                                  DOSINTTABLE:	; LABEL	DWORD
 45211                                  
 45212                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 45213                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 45214                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 45215                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 45216                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 45217                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 45218                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 45219                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 45220                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 45221                                  	
 45222 00001048 [AB52]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 45223 0000104C [DB02]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4	
 45224 00001050 [0703]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 45225 00001054 [3105]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 45226 00001058 [B805]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 45227 0000105C [E561]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 45228 00001060 [0707]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 45229 00001064 [E202]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 45230 00001068 [E102]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 45231                                  
 45232 0000106C 0000                    SS_Save: dw	0		; save user's stack segment
 45233 0000106E 0000                    SP_Save: dw	0		; save user's stack offset
 45234                                  
 45235                                  ;-------------------------------------------------------------------------
 45236                                  ;
 45237                                  ; LOW MEM STUB:
 45238                                  ;
 45239                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 45240                                  ; handled by DOS. This stub is installed if the user specifies that the 
 45241                                  ; DOS load in HIMEM. Each entry point does this.
 45242                                  ;
 45243                                  ; 	1. if jmp to 8 has been patched out
 45244                                  ;	   2. if A20 OFF
 45245                                  ;	      3. Enable A20
 45246                                  ;	   4. else 
 45247                                  ;	      5. just go to dos entry
 45248                                  ;	   6. endif
 45249                                  ;	7. else
 45250                                  ;	   8. just go to dos entry
 45251                                  ;	9. endif
 45252                                  ;
 45253                                  ;--------------------------------------------------------------------------
 45254                                  
 45255                                  ; 27/04/2019 - Retro DOS v4.0
 45256                                  
 45257                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 45258                                  
 45259                                  ;--------------------------------------------------------------------------
 45260                                  ;
 45261                                  ; DIVIDE BY 0 handler
 45262                                  ;
 45263                                  ;--------------------------------------------------------------------------
 45264                                  
 45265                                  ldivov:
 45266                                  	; The following jump, skipping the XMS calls will be patched to 
 45267                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45268                                  	; needed because the stub is installed even before the XMS driver
 45269                                  	; is loaded if the user specifies dos=high in the config.sys
 45270                                  i0patch:
 45271 00001070 EB03                    	jmp	short divov_cont	
 45272                                  
 45273 00001072 E8E000                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45274                                  divov_cont:
 45275 00001075 2EFF2E[4810]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 45276                                  
 45277                                  ;------------------------------------------------------------------------
 45278                                  ;
 45279                                  ; INT 20 Handler
 45280                                  ;
 45281                                  ; Here we do not have to set up the stack to return here as the abort call
 45282                                  ; will return to the address after the int 21 ah=4b call. This would be the
 45283                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 45284                                  ; will be restored then.
 45285                                  ;
 45286                                  ;-------------------------------------------------------------------------
 45287                                  
 45288                                  lquit:
 45289                                  	; The following jump, skipping the XMS calls will be patched to 
 45290                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45291                                  	; needed because the stub is installed even before the XMS driver
 45292                                  	; is loaded if the user specifies dos=high in the config.sys
 45293                                  i20patch:
 45294 0000107A EB03                    	jmp	short quit_cont	
 45295                                  
 45296 0000107C E8D600                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45297                                  quit_cont:
 45298 0000107F 2EFF2E[4C10]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 45299                                  
 45300                                  ;--------------------------------------------------------------------------
 45301                                  ;
 45302                                  ; INT 21 Handler
 45303                                  ;
 45304                                  ;--------------------------------------------------------------------------
 45305                                  
 45306                                  lcommand:
 45307                                  	; The following jump, skipping the XMS calls will be patched to 
 45308                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45309                                  	; needed because the stub is installed even before the XMS driver
 45310                                  	; is loaded if the user specifies dos=high in the config.sys
 45311                                  i21patch:
 45312 00001084 EB03                    	jmp	short command_cont	
 45313                                  
 45314 00001086 E8CC00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45315                                  command_cont:
 45316 00001089 2EFF2E[5010]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 45317                                  
 45318                                  ;------------------------------------------------------------------------
 45319                                  ;
 45320                                  ; INT 25 
 45321                                  ;
 45322                                  ;----------------------------------------------------------------------------
 45323                                  
 45324                                  labsdrd:
 45325                                  	; The following jump, skipping the XMS calls will be patched to 
 45326                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45327                                  	; needed because the stub is installed even before the XMS driver
 45328                                  	; is loaded if the user specifies dos=high in the config.sys
 45329                                  i25patch:
 45330 0000108E EB03                    	jmp	short absdrd_cont	
 45331                                  
 45332 00001090 E8C200                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45333                                  absdrd_cont:
 45334 00001093 2EFF2E[5410]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 45335                                  
 45336                                  ;-------------------------------------------------------------------------
 45337                                  ;
 45338                                  ; INT 26
 45339                                  ;
 45340                                  ;-----------------------------------------------------------------------
 45341                                  
 45342                                  labsdwrt:
 45343                                  	; The following jump, skipping the XMS calls will be patched to 
 45344                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45345                                  	; needed because the stub is installed even before the XMS driver
 45346                                  	; is loaded if the user specifies dos=high in the config.sys
 45347                                  i26patch:
 45348 00001098 EB03                    	jmp	short absdwrt_cont	
 45349                                  
 45350 0000109A E8B800                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45351                                  absdwrt_cont:
 45352 0000109D 2EFF2E[5810]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 45353                                  
 45354                                  ;------------------------------------------------------------------------
 45355                                  ;
 45356                                  ; INT 27
 45357                                  ;
 45358                                  ;-----------------------------------------------------------------------
 45359                                  
 45360                                  lstay_resident:
 45361                                  	; The following jump, skipping the XMS calls will be patched to 
 45362                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45363                                  	; needed because the stub is installed even before the XMS driver
 45364                                  	; is loaded if the user specifies dos=high in the config.sys
 45365                                  i27patch:
 45366 000010A2 EB03                    	jmp	short sr_cont	
 45367                                  
 45368 000010A4 E8AE00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45369                                  sr_cont:
 45370 000010A7 2EFF2E[5C10]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 45371                                  
 45372                                  ;-----------------------------------------------------------------------------
 45373                                  ;
 45374                                  ; INT 2f
 45375                                  ;
 45376                                  ;-------------------------------------------------------------------------
 45377                                  
 45378                                  lint2f:
 45379                                  	; The following jump, skipping the XMS calls will be patched to 
 45380                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45381                                  	; needed because the stub is installed even before the XMS driver
 45382                                  	; is loaded if the user specifies dos=high in the config.sys
 45383                                  i2fpatch:
 45384 000010AC EB03                    	jmp	short int2f_cont	
 45385                                  
 45386 000010AE E8A400                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45387                                  int2f_cont:
 45388 000010B1 2EFF2E[6010]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 45389                                  
 45390                                  ;-----------------------------------------------------------------------------
 45391                                  ;
 45392                                  ; CPM entry
 45393                                  ;
 45394                                  ;------------------------------------------------------------------------
 45395                                  
 45396                                  lcall_entry:
 45397                                  	; The following jump, skipping the XMS calls will be patched to 
 45398                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45399                                  	; needed because the stub is installed even before the XMS driver
 45400                                  	; is loaded if the user specifies dos=high in the config.sys
 45401                                  cpmpatch:
 45402 000010B6 EB03                    	jmp	short callentry_cont	
 45403                                  
 45404 000010B8 E89A00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45405                                  callentry_cont:
 45406 000010BB 2EFF2E[6410]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 45407                                  
 45408                                  ;--------------------------------------------------------------------------
 45409                                  
 45410                                  lirett:
 45411 000010C0 CF                      	iret
 45412                                  
 45413                                  ;---------------------------------------------------------------------------
 45414                                  ;
 45415                                  ; LowIntXX:
 45416                                  ;
 45417                                  ; Interrupts from DOS that pass control to a user program must be done from
 45418                                  ; low memory, as the user program may change the state of the A20 line or
 45419                                  ; they may require that the A20 line be OFF. The following piece of code is
 45420                                  ; far call'd from the following places in DOS:
 45421                                  ;
 45422                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 45423                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 45424                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 45425                                  ;
 45426                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 45427                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 45428                                  ; before doing the ints and then do a far junp back into DOS.
 45429                                  ;
 45430                                  ;---------------------------------------------------------------------------
 45431                                  
 45432 000010C1 00000000                DosRetAddr23:	dd	0
 45433 000010C5 00000000                DosRetAddr24:	dd	0
 45434 000010C9 00000000                DosRetAddr28:	dd	0
 45435                                  
 45436                                  	; Execute int 23h from low memory
 45437                                  LowInt23:
 45438                                  					; save the return address that is on
 45439                                  					; the stack
 45440 000010CD 2E8F06[C110]            	pop	word [cs:DosRetAddr23]
 45441 000010D2 2E8F06[C310]            	pop	word [cs:DosRetAddr23+2]
 45442                                  
 45443 000010D7 CD23                    	int	23h			; ctrl C
 45444                                  					; turn on A20 it has been turned OFF
 45445                                  					; by int 28/23/24 handler.
 45446                                  
 45447 000010D9 E87900                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 45448                                  
 45449 000010DC 2EFF2E[C110]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 45450                                  
 45451                                  
 45452                                  	; Execute int 24h from low memory
 45453                                  LowInt24:
 45454                                  					; save the return address that is on
 45455                                  					; the stack
 45456 000010E1 2E8F06[C510]            	pop	word [cs:DosRetAddr24]
 45457 000010E6 2E8F06[C710]            	pop	word [cs:DosRetAddr24+2]
 45458                                  
 45459 000010EB CD24                    	int	24h			; crit error
 45460                                  					; turn on A20 it has been turned OFF
 45461                                  					; by int 28/23/24 handler.
 45462                                  
 45463 000010ED E86500                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45464                                  
 45465 000010F0 2EFF2E[C510]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 45466                                  
 45467                                  
 45468                                   
 45469                                  	; Execute int 28h from low memory
 45470                                  LowInt28:
 45471 000010F5 CD28                    	int	28h			; idle int
 45472                                  					; turn on A20 it has been turned OFF
 45473                                  					; by int 28/23/24 handler.
 45474                                  
 45475 000010F7 E85B00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45476                                  
 45477 000010FA CB                      	retf
 45478                                  
 45479                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 45480                                  
 45481                                  ;-------------------------------------------------------------------------
 45482                                  ;
 45483                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 45484                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 45485                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 45486                                  ; This is so because exepac'd programs rely on address wrap.
 45487                                  ;
 45488                                  ;------------------------------------------------------------------------- 
 45489                                  
 45490                                  disa20_xfer:
 45491 000010FB E83F00                  	call	XMMDisableA20		; disable A20
 45492                                  
 45493                                  	; Look at msproc.asm at label exec_go for understanding the following:
 45494                                  
 45495                                  	; DS:SI points to entry point
 45496                                  	; AX:DI points to initial stack
 45497                                  	; DX has PDB pointer
 45498                                  	; BX has initial AX value
 45499                                  
 45500 000010FE FA                      	cli
 45501 000010FF 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 45502                                  
 45503 00001105 8ED0                    	mov	SS,AX			; set up user's stack
 45504 00001107 89FC                    	mov	SP,DI			; and SP
 45505 00001109 FB                      	sti
 45506                                  
 45507 0000110A 1E                      	push	DS			; fake long call to entry
 45508 0000110B 56                      	push	SI
 45509 0000110C 8EC2                    	mov	ES,DX			; set up proper seg registers
 45510 0000110E 8EDA                    	mov	DS,DX
 45511 00001110 89D8                    	mov	AX,BX			; set up proper AX
 45512 00001112 CB                      	retf
 45513                                  
 45514                                  ;-------------------------------------------------------------------------
 45515                                  ;
 45516                                  ; M003:
 45517                                  ;
 45518                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 45519                                  ; come here, turn A20 OFF restore user stack and registers before returning 
 45520                                  ; to user. This is done in dos\msdisp.asm. This has been done to support 
 45521                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for 
 45522                                  ; more info.	
 45523                                  ;
 45524                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that 
 45525                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 45526                                  ; stack to avoid additional stack overhead for the user.
 45527                                  ;
 45528                                  ; -------------------------------------------------------------------------
 45529                                  
 45530                                  disa20_iret:
 45531 00001113 E82700                  	call	XMMDisableA20
 45532 00001116 FE0E[2103]              	dec	byte [INDOS]
 45533 0000111A 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 45534 0000111E 8B26[8405]              	mov	SP,[USER_SP]
 45535 00001122 89E5                    	mov	BP,SP
 45536                                  	;mov	[BP+user_env.user_AX],AL
 45537 00001124 884600                  	mov	[bp],al
 45538 00001127 A1[F205]                	mov	AX,[NSP]
 45539 0000112A A3[8405]                	mov	[USER_SP],AX
 45540 0000112D A1[F005]                	mov	AX,[NSS]
 45541 00001130 A3[8605]                	mov	[USER_SS],AX
 45542                                  
 45543 00001133 58                      	pop	AX			; restore user regs
 45544 00001134 5B                      	pop	BX
 45545 00001135 59                      	pop	CX
 45546 00001136 5A                      	pop	DX
 45547 00001137 5E                      	pop	SI
 45548 00001138 5F                      	pop	DI
 45549 00001139 5D                      	pop	BP
 45550 0000113A 1F                      	pop	DS
 45551 0000113B 07                      	pop	ES
 45552 0000113C CF                      	iret
 45553                                  
 45554                                  ;**************************************************************************
 45555                                  ;***	XMMDisableA20 - switch 20th address line			      
 45556                                  ;									      
 45557                                  ;	This routine is used to disable the 20th address line in 	      
 45558                                  ;	the system using XMM calls.					      
 45559                                  ;									      
 45560                                  ;	ENTRY	none		;ds = _DATA				      
 45561                                  ;	EXIT	A20 line disabled					      
 45562                                  ;	USES	NOTHING					      
 45563                                  ;									      
 45564                                  ;**************************************************************************
 45565                                  
 45566                                  XMMDisableA20:
 45567 0000113D 53                      	push	bx
 45568 0000113E 50                      	push	ax
 45569                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 45570 0000113F B406                    	mov	ah,6
 45571 00001141 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 45572 00001146 58                      	pop	ax
 45573 00001147 5B                      	pop	bx
 45574 00001148 C3                      	retn
 45575                                  
 45576                                  ; The entry point in the BIOS XMS driver is defined here.
 45577                                  
 45578                                  XMMcontrol:
 45579 00001149 00000000                	dd	0
 45580                                  
 45581                                  ;--------------------------------------------------------------------------
 45582                                  ;
 45583                                  ;***	EnsureA20ON - Ensures that A20 is ON
 45584                                  ;									      
 45585                                  ;	This routine is used to query the A20 state in		 	      
 45586                                  ;	the system using XMM calls.					      
 45587                                  ;									      
 45588                                  ;	ENTRY: none		
 45589                                  ;
 45590                                  ;	EXIT : A20 will be ON
 45591                                  ;		
 45592                                  ; 	USES : NONE								      
 45593                                  ;									      
 45594                                  ;--------------------------------------------------------------------------
 45595                                  
 45596                                  LowMemory:	; label dword		; Set equal to 0000:0080
 45597 0000114D 8000                    	dw	00080h
 45598 0000114F 0000                    	dw	00000h
 45599                                  
 45600                                  HighMemory:	; label dword
 45601 00001151 9000                    	dw	00090h			; Set equal to FFFF:0090
 45602 00001153 FFFF                    	dw	0FFFFh
 45603                                  
 45604                                  EnsureA20ON:
 45605 00001155 9C                      	pushf
 45606 00001156 1E                      	push    ds
 45607 00001157 06                      	push	es
 45608 00001158 51                      	push	cx
 45609 00001159 56                      	push	si
 45610 0000115A 57                      	push	di
 45611                                  
 45612 0000115B 2EC536[4D11]            	lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 45613 00001160 2EC43E[5111]            	les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 45614 00001165 B90400                  	mov	cx,4
 45615 00001168 FC                      	cld
 45616 00001169 F3A7                    	repe    cmpsw
 45617                                  
 45618 0000116B 7407                    	jz	short EA20_OFF
 45619                                  EA20_RET:
 45620 0000116D 5F                      	pop	di
 45621 0000116E 5E                      	pop	si
 45622 0000116F 59                      	pop	cx
 45623 00001170 07                      	pop	es
 45624 00001171 1F                      	pop	ds
 45625 00001172 9D                      	popf
 45626 00001173 C3                      	retn
 45627                                  
 45628                                  EA20_OFF:
 45629                                  	; We are going to do the XMS call on the DOS's AuxStack.
 45630                                  	; NOTE: ints are disabled at this point.
 45631                                  
 45632 00001174 53                      	push	bx
 45633 00001175 50                      	push	ax
 45634                                  
 45635 00001176 8CD0                    	mov	ax,ss			; save user's stack pointer
 45636 00001178 2EA3[6C10]              	mov	[cs:SS_Save],ax
 45637 0000117C 2E8926[6E10]            	mov	[cs:SP_Save],sp
 45638 00001181 8CC8                    	mov	ax,cs
 45639 00001183 8ED0                    	mov	ss,ax
 45640 00001185 BC[A007]                	mov	sp,AUXSTACK
 45641                                  					; ss:sp -> DOSDATA:AuxStack
 45642                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 45643 00001188 B405                    	mov	ah,5
 45644 0000118A 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 45645 0000118F 09C0                    	or	ax,ax
 45646 00001191 740F                    	jz	short XMMerror		; AX = 0 fatal error
 45647                                  
 45648 00001193 2EA1[6C10]              	mov	ax,[cs:SS_Save]		; restore user stack
 45649 00001197 8ED0                    	mov	ss,ax
 45650 00001199 2E8B26[6E10]            	mov	sp,[cs:SP_Save]
 45651                                  
 45652 0000119E 58                      	pop	ax
 45653 0000119F 5B                      	pop	bx
 45654                                  
 45655 000011A0 EBCB                    	jmp	short EA20_RET
 45656                                  
 45657                                  XMMerror:				; M006 - Start
 45658 000011A2 B40F                    	mov	ah,0Fh			; get video mode
 45659 000011A4 CD10                    	int	10h
 45660 000011A6 3C07                    	cmp	al,7			; Q: are we an MDA
 45661 000011A8 7406                    	je	short XMMcont			; Y: do not change mode
 45662 000011AA 30E4                    	xor	ah,ah ; 0			; set video mode
 45663 000011AC B002                    	mov	al,02h			; 80 X 25 text
 45664 000011AE CD10                    	int	10h
 45665                                  XMMcont:
 45666 000011B0 B405                    	mov	ah,05h			; set display page
 45667 000011B2 30C0                    	xor	al,al			; page 0
 45668 000011B4 CD10                    	int	10h
 45669                                  	
 45670 000011B6 BE[9312]                	mov	si,XMMERRMSG
 45671 000011B9 0E                      	push	cs
 45672 000011BA 1F                      	pop	ds
 45673 000011BB FC                      	cld				; clear direction flag
 45674                                  XMMprnt:
 45675 000011BC AC                      	lodsb
 45676 000011BD 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 45677 000011BF 7409                    	jz	short XMMStall		; function 0Eh	
 45678 000011C1 B40E                    	mov	ah,0Eh
 45679 000011C3 BB0700                  	mov	bx,7
 45680 000011C6 CD10                    	int	10h
 45681 000011C8 EBF2                    	jmp	short XMMprnt
 45682                                  
 45683                                  XMMStall:
 45684 000011CA FB                      	sti				; allow the user to warm boot
 45685 000011CB EBFD                    	jmp	short XMMStall		; M006 - End
 45686                                  
 45687                                  ;---------------------------------------------------------------------------
 45688                                  
 45689                                  ; 27/04/2019 - Retro DOS v4.0
 45690                                  
 45691                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 45692                                  ALTAH	equ 0Ch
 45693                                  
 45694                                  ;This has been put in for WIN386 2.XX support. The format of the instance 
 45695                                  ;table was different for this. Segments will be patched in at init time.
 45696                                  
 45697                                  OldInstanceJunk:
 45698 000011CD 7000                    	dw	70h	;segment of BIOS
 45699 000011CF 0000                    	dw	0	;indicate stacks in SYSINIT area
 45700 000011D1 0600                    	dw	6	;5 instance items
 45701                                  
 45702                                  	;dw	0,offset dosdata:contpos, 2
 45703                                  	;dw	0,offset dosdata:bcon, 4
 45704                                  	;dw	0,offset dosdata:carpos,106h
 45705                                  	;dw	0,offset dosdata:charco, 1
 45706                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 45707                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 45708                                  
 45709 000011D3 0000[2200]0200          	dw	0,CONTPOS,2
 45710 000011D9 0000[3200]0400          	dw	0,BCON,4
 45711 000011DF 0000[F901]0601          	dw	0,CARPOS,106h
 45712 000011E5 0000[0003]0100          	dw	0,CHARCO,1
 45713 000011EB 0000[C00F]2200          	dw	0,exec_init_SP,34
 45714 000011F1 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 45715                                  
 45716                                  ;---------------------------------------------------------------------------
 45717                                  
 45718                                  ; M021-
 45719                                  ;
 45720                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 45721                                  ; 	takes control of the HMA. When running, this word is a reliable
 45722                                  ;	indicator that the DOS is actually using HMA. You can't just use
 45723                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 45724                                  
 45725                                  DosHasHMA:
 45726 000011F7 00                      	db	0
 45727                                  FixExePatch:
 45728 000011F8 0000                    	dw	0		; M012
 45729                                  ; 28/12/2022 - Retro DOS v4.1
 45730                                  ;RationalPatchPtr:
 45731                                  ;	dw	0		; M012
 45732                                  
 45733                                  ; End M021
 45734                                  
 45735                                  ;---------------------------------------------------------------------------
 45736                                  
 45737                                  ; 28/12/2022 - Retro DOS v4.1
 45738                                  %if 0
 45739                                  ; M020 Begin
 45740                                  
 45741                                  RatBugCode:	; proc	far
 45742                                  	push	cx
 45743                                  	mov	cx,[10h]
 45744                                  rbc_loop:
 45745                                  	;loop	$
 45746                                  	loop	rbc_loop
 45747                                  	pop	cx
 45748                                  	retf
 45749                                  		
 45750                                  ; M020 End
 45751                                  %endif
 45752                                  
 45753                                  ;---------------------------------------------------------------------------
 45754                                  	
 45755                                  UmbSave1:
 45756                                  	;db	11 dup (?)	; M023
 45757 000011FA 00<rep Bh>              	times	11 db 0	
 45758                                  
 45759                                  ; DOSDATA:122Ah
 45760                                  
 45761                                  Mark3:	; label byte
 45762                                  
 45763                                  ;IF2
 45764                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 45765                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45766                                  ;	ENDIF
 45767                                  ;ENDIF
 45768                                  
 45769                                  ;############################################################################
 45770                                  ;
 45771                                  ; ** HACK FOR DOS 4.0 REDIR **
 45772                                  ;
 45773                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 45774                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 45775                                  ; COUNTRY_CDPG if it can. 
 45776                                  ;
 45777                                  ; MARK3 SHOULD NOT BE > 122AH 
 45778                                  ;
 45779                                  ; As of 9/6/90, this area is FULL!
 45780                                  ;
 45781                                  ;############################################################################
 45782                                   
 45783                                  	;ORG	0122Ah
 45784                                  
 45785                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 45786                                  
 45787                                  ; The following table is used for DOS 3.3
 45788                                  ;DOS country and code page information is defined here for DOS 3.3.
 45789                                  ;The initial value for ccDosCountry is 1 (USA).
 45790                                  ;The initial value for ccDosCodepage is 850.
 45791                                  
 45792                                  ; country and code page information
 45793                                  ; ---------------------------------------------------------------------------
 45794                                  COUNTRY_CDPG:	; label  byte
 45795 00001205 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 45796 0000120D 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 45796 00001216 53595300           
 45797                                  	;db   51 dup (?)
 45798 0000121A 00<rep 33h>             	times 51 db 0
 45799                                  ; ------------------------------------------------<MSKK01>-------------------
 45800                                  ;ifdef	DBCS
 45801                                  ;  ifdef JAPAN
 45802                                  ;	dw   932			; system code page id (JAPAN)
 45803                                  ;  endif
 45804                                  ;  ifdef TAIWAN
 45805                                  ;	dw   938			; system code page id (TAIWAN)
 45806                                  ;  endif
 45807                                  ;  ifdef KOREA
 45808                                  ;	dw   934			; system code page id (KOREA IBM)
 45809                                  ;  endif
 45810                                  ;else
 45811 0000124D B501                    	dw   437			; system code page id
 45812                                  ;endif
 45813                                  ; ------------------------------------------------<MSKK01>-------------------
 45814 0000124F 0600                    	dw   6				; number of entries
 45815 00001251 02                      	db   SetUcase  ; 2		; Ucase type
 45816 00001252 [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 45817 00001254 0000                    	dw   0				; segment of poiter
 45818 00001256 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 45819 00001257 [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 45820 00001259 0000                    	dw   0				; segment of poiter
 45821 0000125B 05                      	db   SetFileList ; 5		; valid file chars type
 45822 0000125C [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 45823 0000125E 0000                    	dw   0				; segment of poiter
 45824 00001260 06                      	db   SetCollate	; 6		; collate type
 45825 00001261 [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 45826 00001263 0000                    	dw   0				; segment of poiter
 45827 00001265 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 45828 00001266 [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 45829 00001268 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 45830 0000126A 01                      	db   SetCountryInfo  ; 1	; country info type
 45831 0000126B 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 45832                                  ; ------------------------------------------------<MSKK01>-------------------
 45833                                  ;ifdef	DBCS
 45834                                  ;	...... 
 45835                                  ;else
 45836 0000126D 0100                    	dw   1				; USA country id
 45837 0000126F B501                    	dw   437			; USA system code page id
 45838 00001271 0000                    	dw   0 				; date format
 45839 00001273 2400000000              	db   '$',0,0,0,0		; currency symbol
 45840 00001278 2C00                    	db   ',',0			; thousand separator
 45841 0000127A 2E00                    	db   '.',0			; decimal separator
 45842 0000127C 2D00                    	db   '-',0			; date separator
 45843 0000127E 3A00                    	db   ':',0			; time separator
 45844 00001280 00                      	db   0				; currency format flag
 45845 00001281 02                      	db   2				; # of digits in currency
 45846 00001282 00                      	db   0 				; time format
 45847 00001283 [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 45848 00001285 0000                    	dw   0				; segment of entry point
 45849 00001287 2C00                    	db   ',',0			; data list separator
 45850 00001289 000000000000000000-     	dw   0,0,0,0,0			; reserved
 45850 00001292 00                 
 45851                                  ;endif
 45852                                  ; ------------------------------------------------<MSKK01>-------------------
 45853                                  
 45854                                  ; 27/04/2019 - Retro DOS v4.0
 45855                                  
 45856                                  ;include msdos.cl2			; XMMERRMSG
 45857                                  
 45858                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 45859                                  
 45860                                  XMMERRMSG:
 45861 00001293 0D0A                    	db	0Dh,0Ah
 45862 00001295 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 45862 0000129E 617265204572726F72-
 45862 000012A7 0D0A24             
 45863                                  
 45864                                  ; DOSDATA ends
 45865                                  
 45866                                  ; 05/11/2022
 45867                                  ;----------------------------------------------------------------------------
 45868                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 45869                                  ;----------------------------------------------------------------------------
 45870                                  
 45871                                  ; 28/12/2022 - Retro DOS v4.1
 45872                                  ; (windows 3.1 and Rational Extender patches are removed/disabled)
 45873                                  ; (Windows 3.1 does not use the patches below if DOS version is MSDOS 5.0)
 45874                                  ;----------------------------------------------------------------------------
 45875                                  %if 0
 45876                                  ;----------------------------------------------------------------------------
 45877                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45878                                  
 45879                                  ;============================================================================
 45880                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 45881                                  ;============================================================================
 45882                                  ; 27/04/2019 - Retro DOS 4.0
 45883                                  
 45884                                  ;DOSDATA Segment
 45885                                  
 45886                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 45887                                  
 45888                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45889                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 45890                                  
 45891                                  ; first and second DOS patches
 45892                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 45893                                  ;
 45894                                  ; Code in disk.asm, 2 locations, one for read, one for write
 45895                                  ;	DVRDLP:
 45896                                  ;	DVWRTLP:
 45897                                  ;
 45898                                  ;
 45899                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 45900                                  ;	lds	si,si+7 				  ; sf_devptr
 45901                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 45902                                  
 45903                                  DOSP1_ID:	db	036h,0C5h,036h
 45904                                  DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 45905                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 45906                                  
 45907                                  		db	90h, 90h
 45908                                  
 45909                                  DOSP12_ID:	db	036h,0C5h,036h
 45910                                  DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 45911                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 45912                                  
 45913                                  ; DOSDATA:12E3h
 45914                                  
 45915                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 45916                                  ;
 45917                                  ; Code in disk.asm, 1 location
 45918                                  ;	GETBUF:
 45919                                  ;
 45920                                  ; 051h	push	cx	<- begin special int28 mode
 45921                                  ;	push	es
 45922                                  ;	push	di
 45923                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 45924                                  ;	call	????	; $STD_CON_STRING_INPUT
 45925                                  ;	pop	di
 45926                                  ;	pop	es
 45927                                  ; 059h	pop	cx	<- end special int28 mode
 45928                                  
 45929                                  DOSP3_ID:	db	051h,006h,057h,0BAh
 45930                                  DOSP3_CONBUF:	db	029h,002h,0E8h
 45931                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 45932                                  		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 45933                                  DOSP4_ID:	db	059h			; pop cx
 45934                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 45935                                  	
 45936                                  ; DOSDATA:12EFh
 45937                                  
 45938                                  ; Fifth DOS patch - System call 40h (Write) to console
 45939                                  ;
 45940                                  ; Code in disk.asm, 1 location
 45941                                  ;
 45942                                  ;		push	cx
 45943                                  ;      WRCONLP: lodsb
 45944                                  ;		cmp	al,1Ah
 45945                                  ;		jz	????
 45946                                  ;		call	????	<- "simulate" int28 event
 45947                                  ;		loop	WRCONLP
 45948                                  ;      CONEOF:	pop	ax
 45949                                  
 45950                                  DOSP5_ID:	db	051h			; push cx
 45951                                  		db	0ACh,03Ch,01Ah,074h,005h
 45952                                  		db	0E8h			; call
 45953                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 45954                                  
 45955                                  ; DOSDATA:12F6h
 45956                                  
 45957                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 45958                                  ;
 45959                                  ; Code in disp.asm, 1 location
 45960                                  ;
 45961                                  ;
 45962                                  ;	mov [SaveDS],ds
 45963                                  ;	mov [SaveBX],bx
 45964                                  ;	mov bx,cs
 45965                                  ;	mov ds,bx
 45966                                  ;	inc [indos]
 45967                                  ;	xor ax,ax
 45968                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 45969                                  
 45970                                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 45971                                  DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 45972                                  		db	02Eh,089h,01Eh
 45973                                  DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 45974                                  		db	08Ch,0CBh		; mov bx,cs
 45975                                  		db	08Eh,0DBh		; mov ds,bx
 45976                                  		db	0FEh,006h
 45977                                  DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 45978                                  		db	033h,0C0h		; xor ax,ax
 45979                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 45980                                  
 45981                                  ; DOSDATA:130Ah
 45982                                  
 45983                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 45984                                  ;
 45985                                  ; Code in handle.asm, 1 location in routine CheckOwner
 45986                                  ;
 45987                                  ;
 45988                                  ;
 45989                                  ;	push	ax
 45990                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 45991                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 45992                                  ;	pop	ax
 45993                                  ;	jz	????
 45994                                  
 45995                                  DOSP8_ID:	db	050h			; push ax
 45996                                  		db	036h,0A1h
 45997                                  DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 45998                                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 45999                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 46000                                  		db	02Fh,058h		; pop  ax
 46001                                  
 46002                                  ; DOSDATA:1314h
 46003                                  
 46004                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 46005                                  ;
 46006                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 46007                                  ;   a yeild when a character is not ready to be read.
 46008                                  ;
 46009                                  ; Code in disk.asm, 3 locations
 46010                                  ;
 46011                                  ;   DVRDRAW:
 46012                                  ;	    PUSH    ES
 46013                                  ;	    POP     DS
 46014                                  ;   ReadRawRetry:				<- Patch 10
 46015                                  ;	    MOV     BX,DI
 46016                                  ;	    XOR     AX,AX			<- Reenter #2
 46017                                  ;	    MOV     DX,AX
 46018                                  ;	    call    SETREAD
 46019                                  ;	    PUSH    DS				<- Reenter #1
 46020                                  ;	    LDS     SI,[THISSFT]
 46021                                  ;	    call    DEVIOCALL
 46022                                  ;	    MOV     DX,DI
 46023                                  ;	    MOV     AH,86H
 46024                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 46025                                  ;	    TEST    DI,STERR
 46026                                  ;	    JZ	    CRDROK
 46027                                  ;	    call    CHARHARD
 46028                                  ;	    MOV     DI,DX
 46029                                  ;	    OR	    AL,AL
 46030                                  ;	    JZ	    CRDROK
 46031                                  ;	    CMP     AL,3
 46032                                  ;	    JZ	    CRDFERR
 46033                                  ;	    POP     DS
 46034                                  ;	    JMP     ReadRawRetry
 46035                                  ;
 46036                                  ;   CRDFERR:
 46037                                  ;	    POP     DI				<- Patch 11
 46038                                  ;   DEVIOFERR:
 46039                                  ;	    LES     DI,[THISSFT]
 46040                                  ;	    jmp     SET_ACC_ERR_DS
 46041                                  ;
 46042                                  ;   CRDROK:
 46043                                  ;	    POP     DI				<- Patch 12
 46044                                  ;	    MOV     DI,DX
 46045                                  ;	    ADD     DI,[CALLSCNT]
 46046                                  ;	    JMP     SHORT ENDRDDEVJ3
 46047                                  
 46048                                  DOSP10_ID:		db	006H,01FH
 46049                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 46050                                  DOSP10_LOC:		db	08BH,0DFH
 46051                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 46052                                  			db	033H,0C0H,08BH,0D0H,0E8H
 46053                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 46054                                  			db	0DFH,00EH
 46055                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 46056                                  			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 46057                                  			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 46058                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 46059                                  			db	009H,003H
 46060                                  			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 46061                                  			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 46062                                  			db	01FH,0EBH,0CFH
 46063                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 46064                                  			db	05FH
 46065                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 46066                                  			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 46067                                  
 46068                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 46069                                  			db	05FH,08BH,0FAH
 46070                                  ; DOSDATA:1353h
 46071                                  
 46072                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 46073                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 46074                                  ;
 46075                                  ;	    Sets focus to current VM so user can see fatal message.
 46076                                  ;
 46077                                  ;
 46078                                  ;	l0: lodsb		<- Setfocus here
 46079                                  ;	    cmp al, '$'
 46080                                  ;	    je l1
 46081                                  ;	    mov bl, 7
 46082                                  ;	    mov ah, 0Eh
 46083                                  ;	    int 10h
 46084                                  ;	    jmp l0
 46085                                  ;	l1: jmp $
 46086                                  
 46087                                  DOSP13_ID:	db	0ACh			; l0: lodsb
 46088                                  		db	03Ch,024h		;     cmp al, '$'
 46089                                  		db	074h,008h		;     je l1
 46090                                  		db	0B3h,007h		;     mov bl, 7
 46091                                  		db	0B4h,00Eh		;     mov ah, 0Eh
 46092                                  		db	0CDh,010h		;     int 10h
 46093                                  		db	0EBh,0F3h		;     jmp l0
 46094                                  		db	0EBh,0FEh		; l1: jmp $
 46095                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 46096                                  
 46097                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46098                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 46099                                  
 46100                                  ; 06/12/2022
 46101                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 46102                                  
 46103                                  ; DOSDATA ends
 46104                                  
 46105                                  ;============================================================================
 46106                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 46107                                  ;============================================================================
 46108                                  ; 27/04/2019 - Retro DOS 4.0
 46109                                  
 46110                                  ;mpatch.asm -- holds data patch location for callouts 
 46111                                  ; -- allocate cluster in rom.asm
 46112                                  ;
 46113                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 46114                                  ; Currently, this location is used only by magicdrv.sys's patch to
 46115                                  ; cluster allocation, however it can be expanded to be used by other
 46116                                  ; patches. This is important since we have an easy-access pointer to
 46117                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 46118                                  ; only patch out a far call/retf, so any space after that could be
 46119                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 46120                                  ; to call out here.
 46121                                  ;
 46122                                  ; Currently, we allocate only the minimum space required for the 6
 46123                                  ; byte magicdrv patch, so if you change the dos data, you may want
 46124                                  ; to reserve space here if your new data will be position dependent
 46125                                  ; and would prohibit growing of this table.
 46126                                  ;       
 46127                                  ;history	-	created 8-7-92 by scottq
 46128                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 46129                                  ;
 46130                                  ;Exported Functions
 46131                                  ;==================
 46132                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 46133                                  
 46134                                  ; DosData Segment
 46135                                  
 46136                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 46137                                  
 46138                                  ; ---------------------------------------------------------------------------
 46139                                  
 46140                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 46141                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 46142                                  ; greater). Added to this file because it needed to be somewhere and is
 46143                                  ; 'patch' related.
 46144                                  
 46145                                  Rational386PatchPtr:
 46146                                  	dw	0	; points to patch routine or RET instr.
 46147                                  ; ---------------------------------------------------------------------------
 46148                                  
 46149                                  MagicPatch:
 46150                                  ;MagicPatch proc far
 46151                                          retf            ;default is to just return to allocate
 46152                                          nop             ;however, this code will be patched
 46153                                          nop             ;by magicdrv.sys to
 46154                                          nop             ; call far ?:?     
 46155                                          nop             ; retf or perhaps just jmp far
 46156                                          nop             ;retf/nop take one byte, so we need six instructions
 46157                                                          ;for 6 byte patch
 46158                                  ;MagicPatch endp
 46159                                  
 46160                                  ; ---------------------------------------------------------------------------
 46161                                  
 46162                                  ;DosData Ends
 46163                                  
 46164                                  ; DOSDATA:136Ah
 46165                                  
 46166                                  ;----------------------------------------------------------------------------
 46167                                  
 46168                                  ;DOSDATALAST SEGMENT
 46169                                  
 46170                                  ; 29/04/2019 - Retro DOS v4.0
 46171                                  
 46172                                  ;----------------------------------------------------------------------------
 46173                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 46174                                  
 46175                                  db 0,1,12,64,19,0 ; ! Magic numbers !
 46176                                  
 46177                                  ;align 16
 46178                                  
 46179                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 46180                                  
 46181                                  ;----------------------------------------------------------------------------
 46182                                  
 46183                                  %endif	; 05/11/2022
 46184                                  
 46185                                  ; 05/12/2022
 46186                                  ;MSDAT001E:	; label byte
 46187                                  
 46188                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46189                                  DOSDATAEND equ $
 46190                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 46191                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 46192                                  
 46193                                  ;DOSDATALAST ENDS
 46194                                  
 46195                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 46196                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 46197                                  ;============================================================================
 46198                                  ;	END
 46199                                  ;============================================================================
 46200                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 46201                                  ; -----------------------------
 46202                                  ; MAY 2019, ISTANBUL - TURKIYE.
