     1                                  ;*****************************************************************************
     2                                  ; MSDOS5.BIN (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 27/06/2024 - Retro DOS v4.1 ((Previous: 12/04/2024))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos5.s -l msdos5.lst -o MSDOS5.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    27                                  
    28                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    29                                  ;	(as included binary, 'MSDOS5.BIN') 
    30                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    31                                  ;	
    32                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    33                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    34                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    35                                        
    36                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    37                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    38                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    39                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    40                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    41                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    42                                  
    43                                  ;=============================================================================
    44                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    45                                  ;-----------------------------------------------------------------------------
    46                                  
    47                                  ; MSDOS 6.0 Kernel source files:
    48                                  ;	MSDATA.ASM, 
    49                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    50                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    51                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    52                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    53                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    54                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    55                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    56                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    57                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    58                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    59                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    60                                  ;
    61                                  ; MSDOS 2.0 Kernel source files:
    62                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    63                                  ;	MSCODE.ASM
    64                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    65                                  
    66                                  ;============================================================================
    67                                  ; DOSLINK
    68                                  ;============================================================================
    69                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    70                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    71                                  ;stdio time xenix xenix2
    72                                  
    73                                  ;============================================================================
    74                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    75                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    76                                  ;============================================================================
    77                                  ;
    78                                  ; ###########################################################################
    79                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    80                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    81                                  ; #			 Licensed to: Freeware version			    #
    82                                  ; ###########################################################################
    83                                  ;
    84                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    85                                  
    86                                  ; ---------------------------------------------------------------------------
    87                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    88                                  ; Format      :	Binary file
    89                                  ;============================================================================
    90                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
    91                                  ;----------------------------------------------------------------------------
    92                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
    93                                  
    94                                  ;============================================================================
    95                                  ; MSDOS.ASM
    96                                  ;============================================================================
    97                                  
    98                                  ;TITLE   Standard MSDOS
    99                                  ;NAME    MSDOS_2
   100                                  
   101                                  ; Number of disk I/O buffers
   102                                  
   103                                  ;	INCLUDE STDSW.ASM
   104                                  ;       INCLUDE MSHEAD.ASM
   105                                  ;       INCLUDE MSDATA.ASM
   106                                  
   107                                  ;	END
   108                                  
   109                                  ;============================================================================
   110                                  ; STDSW.ASM
   111                                  ;============================================================================
   112                                  
   113                                  TRUE    EQU     0FFFFH
   114                                  FALSE   EQU     ~TRUE ; NOT TRUE
   115                                  
   116                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   117                                  ; version of the operating system
   118                                  ;MSVER   EQU	false
   119                                  ;IBM     EQU	true
   120                                  ;WANG    EQU	FALSE
   121                                  ;ALTVECT EQU	FALSE
   122                                  
   123                                  ; Set this switch to cause DOS to move itself to the end of memory
   124                                  ;HIGHMEM EQU     FALSE
   125                                  
   126                                  ;	IF      IBM
   127                                  ESCCH    EQU	 0			;character to begin escape seq.
   128                                  CANCEL   EQU	 27			;Cancel with escape
   129                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   130                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   131                                  ZEROEXT  EQU	TRUE
   132                                  ;       ELSE
   133                                  ;       IF      WANG			;Are we assembling for WANG?
   134                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   135                                  ;       ELSE
   136                                  ;ESCCH	 EQU	1BH
   137                                  ;       ENDIF
   138                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   139                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   140                                  					;and off if not WANG
   141                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   142                                  					;and off
   143                                  ;ZEROEXT EQU	TRUE
   144                                  ;        ENDIF
   145                                  
   146                                  ;============================================================================
   147                                  ; MSHEAD.ASM
   148                                  ;============================================================================
   149                                  
   150                                  ;--------------------------------------------------------------
   151                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   152                                  ;--------------------------------------------------------------
   153                                  
   154                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   155                                  ;        by Microsoft MSDOS development group:
   156                                  ;           Tim Paterson (Ret.)
   157                                  ;           Aaron Reynolds
   158                                  ;           Nancy Panners (Parenting)
   159                                  ;           Mark Zbikowski
   160                                  ;           Chris Peters (BIOS) (ret.)
   161                                  
   162                                  ; ****************** Revision History *************************
   163                                  ;          >> EVERY change must noted below!! <<
   164                                  ;
   165                                  ; 0.34 12/29/80 General release, updating all past customers
   166                                  ; 0.42 02/25/81 32-byte directory entries added
   167                                  ; 0.56 03/23/81 Variable record and sector sizes
   168                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   169                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   170                                  ; 0.75 04/17/81 Improve and correct buffer handling
   171                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   172                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   173                                  ; 1.00 04/28/81 Renumber for general release
   174                                  ; 1.01 05/12/81 Fix bug in `STORE'
   175                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   176                                  ;               RENAME fix, general cleanup
   177                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   178                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   179                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   180                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   181                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   182                                  ;               of smaller improvements
   183                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   184                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   185                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   186                                  ;               zero extent field in IBM version (back to 1.01!)
   187                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   188                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   189                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   190                                  ;               is searched first when possible to minimize I/O
   191                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   192                                  ;               full sector write when file is growing
   193                                  ;      03/09/82 Multiple I/O buffers
   194                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   195                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   196                                  ;               must invalidate all buffers (disk and directory).
   197                                  ; 1.27 03/31/82 Installable device drivers
   198                                  ;                 Function call 47 - Get pointer to device table list
   199                                  ;                 Function call 48 - Assign CON AUX LIST
   200                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   201                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   202                                  ;               call entries.  Most CS relative references changed to SS
   203                                  ;               relative with an eye toward putting a portion of the DOS in
   204                                  ;               ROM.  DOS source also broken into header, data and code pieces
   205                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   206                                  ;               return the current values.
   207                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   208                                  ;               call to return flag location (call 29)
   209                                  ;      04/15/82 Volume ID attribute added
   210                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   211                                  ;               avoid a CS relative reference.
   212                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   213                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   214                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   215                                  ;               call 49.
   216                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   217                                  ;               address of DPB
   218                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   219                                  ;               writting to console device via file I/O.  Added a console
   220                                  ;               output attribute to devices.
   221                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   222                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   223                                  ;               as devices....  pipes, redirection now possible
   224                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   225                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   226                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   227                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   228                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   229                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   230                                  ;               out back about 1.27 or so (oops).  ARR
   231                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   232                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   233                                  ;               RMDIR Xenix calls
   234                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   235                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   236                                  ;               Frees up lots of memory.
   237                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   238                                  ;               system buffers
   239                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   240                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   241                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   242                                  ;               changed to set file handle environment.
   243                                  ; 2.00 08/01/82 Number for IBM release
   244                                  ;      01/19/83 No environ bug in EXEC
   245                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   246                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   247                                  ;      01/27/83 Growcnt fixed for 32-bits
   248                                  ;      01/27/83 Find-first problem after create
   249                                  ; 2.01 02/17/83 International DOS
   250                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   251                                  ;               an IBM PC
   252                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   253                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   254                                  ; 2.10 03/09/83 Start of NETWORK support
   255                                  ;		New Buffer structure
   256                                  ;		New Sytem file table structure
   257                                  ;		FCB moved to internal representation
   258                                  ;		DOS re-organized
   259                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   260                                  ;		device interface.
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 2.50 09/12/83 More network stuff
   264                                  ;
   265                                  ; *************************************************************
   266                                  
   267                                  ; ----------------------------------------------------------------------------
   268                                  ; EQUATES
   269                                  
   270                                  ; Interrupt Entry Points:
   271                                  
   272                                  ; INTBASE:      ABORT
   273                                  ; INTBASE+4:    COMMAND
   274                                  ; INTBASE+8:    BASE EXIT ADDRESS
   275                                  ; INTBASE+C:    CONTROL-C ABORT
   276                                  ; INTBASE+10H:  FATAL ERROR ABORT
   277                                  ; INTBASE+14H:  BIOS DISK READ
   278                                  ; INTBASE+18H:  BIOS DISK WRITE
   279                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   280                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   281                                  ; INTBASE+40H:  Long jump to CALL entry point
   282                                  
   283                                  ENTRYPOINTSEG   EQU     0Ch
   284                                  MAXDIF          EQU     0FFFh
   285                                  SAVEXIT         EQU     10
   286                                  ; 06/05/2019
   287                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   288                                  
   289                                         ; INCLUDE DOSSYM.ASM
   290                                         ; INCLUDE DEVSYM.ASM
   291                                  
   292                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   293                                  ; PAGE
   294                                  ; There are three kinds of context resets that can occur during normal DOS
   295                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   296                                  ; be handles in a clean fashion that allows nested executions along with the
   297                                  ; ability to trap one's own errors.
   298                                  ;
   299                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   300                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   301                                  ;           follows:
   302                                  ;
   303                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   304                                  ;           Save it in static memory.
   305                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   306                                  ;
   307                                  ;           The interrupt service routine must preserve all registers and
   308                                  ;           return carry set iff the operation is to be aborted (via abort
   309                                  ;           system call), otherwise, carry is reset and the operation is
   310                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   311                                  ;           RESULTS.
   312                                  ;
   313                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   314                                  ;           restore INT int_ctrl_c from the saved vector.
   315                                  ;
   316                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   317                                  ;           also preserve registers and return one of three values in AL: 0 and
   318                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   319                                  ;           himself is not to issue the abort, rather, the dos will do it for
   320                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   321                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   322                                  ;
   323                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   324                                  ;           abort call.  This is reserved for knowledgeable system programs.
   325                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   326                                  
   327                                  ;SUBTTL SEGMENT DECLARATIONS
   328                                  
   329                                  ; The following are all of the segments used.  They are declared in the order
   330                                  ; that they should be placed in the executable
   331                                  
   332                                  ;
   333                                  ; segment ordering for MSDOS
   334                                  ;
   335                                  
   336                                  ;START           SEGMENT BYTE PUBLIC 'START'
   337                                  ;START           ENDS
   338                                  
   339                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   340                                  ;CONSTANTS       ENDS
   341                                  
   342                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   343                                  ;DATA            ENDS
   344                                  
   345                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   346                                  ;CODE            ENDS
   347                                  
   348                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   349                                  ;LAST            ENDS
   350                                  
   351                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   352                                  
   353                                  ; The following segment is defined such that the data/const classes appear
   354                                  ; before the code class for ROMification
   355                                  
   356                                  ;START		SEGMENT BYTE PUBLIC 'START'
   357                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   358                                  ;		JMP     DOSINIT
   359                                  ;START		ENDS
   360                                  
   361                                  ;============================================================================
   362                                  ; BPB.INC, MSDOS 6.0, 1991
   363                                  ;============================================================================
   364                                  ; 09/07/2018 - Retro DOS v3.0
   365                                  
   366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   367                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   368                                  ;									   ;
   369                                  
   370                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   371                                  ;
   372                                  ;	The BPB contains information about the disk structure. It dates
   373                                  ;	back to the earliest FAT systems and so FAT information is
   374                                  ;	intermingled with physical driver information.
   375                                  ;
   376                                  ;	A boot sector contains a BPB for its device; for other disks
   377                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   378                                  ;	information in the DPB.
   379                                  ;
   380                                  ;	The BDS structure contains a BPB within it. 
   381                                  
   382                                  struc A_BPB
   383 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   384 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   385 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   386 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   387 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   388 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   389 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   390 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   391 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   392 0000000F ????                    .BPB_HEADS:		resw	1
   393 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   394 00000013 ????                    			resw	1
   395 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   396 00000017 ????                    			resw	1
   397 00000019 ????????????            			resb	6	; NOTE:  many times these
   398                                  ;					; 	 6 bytes are omitted
   399                                  ;					;	 when BPB manipulations
   400                                  ;					;	 are performed!
   401                                  .size:
   402                                  endstruc
   403                                  
   404                                  ;                                                                          ;
   405                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   406                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   407                                  
   408                                  ;============================================================================
   409                                  ; BUFFER.INC, MSDOS 6.0, 1991
   410                                  ;============================================================================
   411                                  ; 04/05/2019 - Retro DOS v4.0
   412                                  
   413                                  ; <Disk I/O Buffer Header>
   414                                  
   415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   416                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   417                                  ;									   ;
   418                                  
   419                                  ; Field definition for I/O buffer information
   420                                  
   421                                  struc BUFFINFO
   422 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   423 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   424 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   425                                  				; SFT table index (bit 7 = 1)
   426                                  				; = FFH if buffer free
   427 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   428                                  				;	= 0 if Local device buffer
   429                                  				; Bit 6 = 1 if buffer dirty
   430                                  				; Bit 5 = Reserved
   431                                  				; Bit 4 = Search bit (bit 7 = 1)
   432                                  				; Bit 3 = 1 if buffer is DATA
   433                                  				; Bit 2 = 1 if buffer is DIR
   434                                  				; Bit 1 = 1 if buffer is FAT
   435                                  				; Bit 0 = Reserved
   436 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   437                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   438 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   439 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   440 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   441 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   442 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   443                                  .size:	; 20 bytes
   444                                  endstruc
   445                                  
   446                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   447                                  				;For buf_flags bit 7 = 1, this is the byte
   448                                  				;offset of the start of the buffer in
   449                                  				;the file pointed to by buf_ID. Thus
   450                                  				;the buffer starts at location
   451                                  				;buf_offset in the file and contains
   452                                  				;buf_fill bytes.
   453                                  
   454                                  BUFINSIZ        EQU     BUFFINFO.size
   455                                  
   456                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   457                                  
   458                                  ;Flag byte masks
   459                                  buf_isnet	EQU	10000000B
   460                                  buf_dirty	EQU	01000000B
   461                                  ;***
   462                                  buf_visit	EQU	00100000B
   463                                  ;***
   464                                  buf_snbuf	EQU	00010000B
   465                                  
   466                                  buf_isDATA	EQU	00001000B
   467                                  buf_isDIR	EQU	00000100B
   468                                  buf_isFAT	EQU	00000010B
   469                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   470                                  
   471                                  buf_NetID	EQU	BUFINSIZ
   472                                  
   473                                  ;                                                                          ;
   474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   476                                  
   477                                  ;============================================================================
   478                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   479                                  ;============================================================================
   480                                  ; 04/05/2019 - Retro DOS v4.0
   481                                  
   482                                  ; <Control character definitions>
   483                                  
   484                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   485                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   486                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   487                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   488                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   489                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   490                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   491                                  c_HT	    EQU     09h 	; ^I ASCII tab
   492                                  
   493                                  ; <User stack inside of system call>
   494                                  ; Location of user registers relative user stack pointer
   495                                  
   496                                  struc	user_env   ; user_environ
   497 00000000 ????                    .user_AX: resw 1
   498 00000002 ????                    .user_BX: resw 1
   499 00000004 ????                    .user_CX: resw 1
   500 00000006 ????                    .user_DX: resw 1
   501 00000008 ????                    .user_SI: resw 1
   502 0000000A ????                    .user_DI: resw 1
   503 0000000C ????                    .user_BP: resw 1
   504 0000000E ????                    .user_DS: resw 1
   505 00000010 ????                    .user_ES: resw 1
   506 00000012 ????                    .user_IP: resw 1
   507 00000014 ????                    .user_CS: resw 1
   508 00000016 ????                    .user_F:  resw 1
   509                                  .size:
   510                                  endstruc
   511                                  
   512                                  ; ---- <Disk map> ----
   513                                  
   514                                  ;	MSDOS partitions the disk into 4 sections:
   515                                  ;
   516                                  ;  phys sector 0:   +-------------------+
   517                                  ;	|	    | boot/reserved	|
   518                                  ;	|	    +-------------------+
   519                                  ;	|	    |  File allocation	|
   520                                  ;	v	    |	   table(s)	|
   521                                  ;		    |  (multiple copies |
   522                                  ;		    |	  are kept)	|
   523                                  ;		    +-------------------+
   524                                  ;		    |	  Directory	|
   525                                  ;		    +-------------------+
   526                                  ;		    |	  File space	|
   527                                  ;		    +-------------------+
   528                                  ;		    |	Unaddressable	|
   529                                  ;		    |  (to end of disk) |
   530                                  ;		    +-------------------+
   531                                  ;
   532                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   533                                  ; adjusted to maximize the file space addressable.
   534                                  
   535                                  ; <File allocation Table information>
   536                                  
   537                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   538                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   539                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   540                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   541                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   542                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   543                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   544                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   545                                  ; The first available allocation unit is assigned entry number two, and even
   546                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   547                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   548                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   549                                  ; the next cluster in the file.
   550                                  ;
   551                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   552                                  ; do because these clusters show as allocated, but are not part of any
   553                                  ; allocation chain and thus will never be allocated to a file.	A particular
   554                                  ; number is selected so that disk checking programs know what to do (ie.  a
   555                                  ; cluster with entry FF7H which is not in a chain is not an error).
   556                                  
   557                                  ;**	Character Type Flags
   558                                  ;
   559                                  ;	These flags are used in a lookup table indexed by the character code.
   560                                  ;	They're used to quickly classify characters when parsing paths.
   561                                  ;	I think that these are only used to parse FCBs - jgl
   562                                  
   563                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   564                                  FDELIM	equ 2		; is a delimiter
   565                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   566                                  FFCB	equ 8		; is valid in an FCB
   567                                  
   568                                  ;** Bit definitions for DOS_FLAG
   569                                  ;
   570                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   571                                  ;	  $open to indicate to the redirector that this open is being made
   572                                  ;	  by an exec call.
   573                                  ;
   574                                  ; Bit 2
   575                                  ;
   576                                  ; M003, M027:
   577                                  ;
   578                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   579                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   580                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   581                                  ; user program in the case of an Exec call. The next call to DOS will turn
   582                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   583                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   584                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   585                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   586                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   587                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   588                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   589                                  ; Bit 2 will be unconditionally cleared here.
   590                                  ;
   591                                  ; M009, M027:
   592                                  ;
   593                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   594                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   595                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   596                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   597                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   598                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   599                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   600                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   601                                  ; Bit 2 will be unconditionally cleared here.
   602                                  
   603                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   604                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   605                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   606                                  
   607                                  ;============================================================================
   608                                  ; VECTOR.INC, MSDOS 6.0, 1991
   609                                  ;============================================================================
   610                                  ; 04/05/2019 - Retro DOS v4.0
   611                                  
   612                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   613                                  
   614                                  ; <interrupt definitions>
   615                                  
   616                                  INTTAB          EQU     20H
   617                                  INTBASE         EQU     4 * INTTAB
   618                                  ENTRYPOINT      EQU     INTBASE+40H
   619                                  
   620                                  ;	IF      ALTVECT
   621                                  ;ALTTAB  EQU     0F0H
   622                                  ;ALTBASE EQU     4 * ALTTAB
   623                                  ;	ENDIF
   624                                  
   625                                  ;
   626                                  ; interrupt assignments
   627                                  ;
   628                                  ;	IF	NOT ALTVECT
   629                                  int_abort	    EQU     INTTAB	; abort process
   630                                  int_command	    EQU     int_abort+1 ; call MSDOS
   631                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   632                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   633                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   634                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   635                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   636                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   637                                  					; resident
   638                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   639                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   640                                  ;									   ;
   641                                  int_spooler	    EQU     int_abort+8 ; spooler call
   642                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   643                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   644                                  ;									   ;
   645                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   646                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   647                                  ;	ELSE
   648                                  ;int_abort	    EQU     INTTAB	; abort process
   649                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   650                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   651                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   652                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   653                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   654                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   655                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   657                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   658                                  ;									   ;
   659                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   660                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   661                                  ;									   ;
   662                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   663                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   664                                  ;	ENDIF
   665                                  
   666                                  addr_int_abort		EQU    4 * int_abort
   667                                  addr_int_command	EQU    4 * int_command
   668                                  addr_int_terminate	EQU    4 * int_terminate
   669                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   670                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   671                                  addr_int_disk_read	EQU    4 * int_disk_read
   672                                  addr_int_disk_write	EQU    4 * int_disk_write
   673                                  addr_int_keep_process	EQU    4 * int_keep_process
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   676                                  ;									   ;
   677                                  addr_int_spooler	EQU    4 * int_spooler
   678                                  addr_int_fastcon	EQU    4 * int_fastcon
   679                                  addr_int_ibm		EQU    4 * int_IBM
   680                                  ;									   ;
   681                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   682                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   683                                  
   684                                  ;============================================================================
   685                                  ; DIRENT.INC, MSDOS 6.0, 1991
   686                                  ;============================================================================
   687                                  ; 04/05/2019 - Retro DOS v4.0
   688                                  
   689                                  ; BREAK <Directory entry>
   690                                  
   691                                  ;
   692                                  ;       +---------------------------+
   693                                  ;       |  (12 BYTE) filename/ext   |       0       0
   694                                  ;       +---------------------------+
   695                                  ;       |     (BYTE) attributes     |       11      B
   696                                  ;       +---------------------------+
   697                                  ;       |    (10 BYTE) reserved     |       12      C
   698                                  ;       +---------------------------+
   699                                  ;       | (WORD) time of last write |       22      16
   700                                  ;       +---------------------------+
   701                                  ;       | (WORD) date of last write |       24      18
   702                                  ;       +---------------------------+
   703                                  ;       |   (WORD) First cluster    |       26      1A
   704                                  ;       +---------------------------+
   705                                  ;       |     (DWORD) file size     |       28      1C
   706                                  ;       +---------------------------+
   707                                  ;
   708                                  ;   First byte of filename  = E5 -> free directory entry
   709                                  ;                           = 00 -> end of allocated directory
   710                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   711                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   712                                  ;
   713                                  struc dir_entry
   714 00000000 <res Bh>                .dir_name:	resb 11			; file name
   715 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   716 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   717 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   718 00000010 ??                      .dir_attr2:	resb 1			; reserved
   719 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   720 00000016 ????                    .dir_time:	resw 1			; time of last write
   721 00000018 ????                    .dir_date:	resw 1			; date of last write
   722 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   723 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   724 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   725                                  .size:
   726                                  endstruc
   727                                  
   728                                  attr_read_only      EQU      1h
   729                                  attr_hidden         EQU      2h
   730                                  attr_system         EQU      4h
   731                                  attr_volume_id      EQU      8h
   732                                  attr_directory      EQU     10h
   733                                  attr_archive        EQU     20h
   734                                  attr_device	    EQU     40h	; This is a VERY special bit.
   735                                  				;   NO directory entry on a disk EVER
   736                                  				;   has this bit set. It is set non-zero
   737                                  				;   when a device is found by GETPATH
   738                                  
   739                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   740                                                                          ; OR of hard attributes for FINDENTRY
   741                                  
   742                                  attr_ignore         EQU     attr_read_only+attr_archive
   743                                                                          ; ignore this(ese) attribute(s)
   744                                                                          ; during search first/next
   745                                  
   746                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   747                                                                          ; changeable via CHMOD
   748                                  
   749                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   750                                  
   751                                  ;============================================================================
   752                                  ; DPB.INC, MSDOS 6.0, 1991
   753                                  ;============================================================================
   754                                  ; 24/04/2019 - Retro DOS v4.0
   755                                  
   756                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   757                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   758                                  
   759                                  ; ---------------------------------------------------------------------------
   760                                  ;**	DPB - Drive Parameter Block
   761                                  ;
   762                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   763                                  ;	possibly inaccurate deductions from code study... - jgl
   764                                  ;
   765                                  ;	The DPB is DOS's main structure for describing block devices.
   766                                  ;	It contains info about the "Drive" intermingled with info about
   767                                  ;	the FAT file system which is presumably on the drive.  I don't know
   768                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   769                                  ;
   770                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   771                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   772                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   773                                  ; ---------------------------------------------------------------------------
   774                                  
   775                                  struc	DPB
   776 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   777 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   778 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   779 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   780 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   781 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   782 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   783 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   784 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   785 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   786                                  ; MSDOS 3.3
   787                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   788                                  ; MSDOS 6.0
   789 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   790 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   791 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   792 00000017 ??                      .MEDIA:		resb 1		; Media byte
   793 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   794                                  				; check the first time this DPB is used
   795 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   796 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   797 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   798                                  .size:
   799                                  endstruc
   800                                  
   801                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   802                                  
   803                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   804                                  
   805                                  ;                                                                          ;
   806                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   807                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   808                                  
   809                                  ;============================================================================
   810                                  ; SF.INC, MSDOS 6.0, 1991
   811                                  ;============================================================================
   812                                  ; 25/04/2019 - Retro DOS v4.0
   813                                  ; 07/07/2018 - Retro DOS v3.0
   814                                  
   815                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   816                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   817                                  ;                                                                          ;
   818                                  
   819                                  ; ---------------------------------------------------------------------------
   820                                  ;**	SF.INC - System File Table
   821                                  ;
   822                                  ;   AN000   version 4.00   Jan. 1988
   823                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   824                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   825                                  ; ---------------------------------------------------------------------------
   826                                  ;**	System File Table SuperStructure
   827                                  ;
   828                                  ;	The system file table entries are allocated in contiguous groups.
   829                                  ;	There may be more than one such groups; the SF "superstructure"
   830                                  ;	tracks the groups.
   831                                  ; ---------------------------------------------------------------------------
   832                                  
   833                                  struc	SFT
   834 00000000 ????????                .SFLink:	resd 1
   835 00000004 ????                    .SFCount:	resw 1		; number of entries
   836 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   837                                  .size:
   838                                  endstruc
   839                                  
   840                                  ; ---------------------------------------------------------------------------
   841                                  ;**	System file table entry
   842                                  ;
   843                                  ;	These are the structures which are at SFTABLE in the SF structure.
   844                                  ; ---------------------------------------------------------------------------
   845                                  
   846                                  ; 25/04/2019 - Retro DOS v4.0
   847                                  
   848                                  struc SF_ENTRY
   849 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   850                                  				;   if FCB then ref count
   851 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   852 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   853 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   854                                  				; Bit 15 = 1 if remote file
   855                                  				;	 = 0 if local file or device
   856                                  				; Bit 14 = 1 if date/time is not to be
   857                                  				;   set from clock at CLOSE.  Set by
   858                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   859                                  				;   other reseters of the dirty bit
   860                                  				;   (WRITE)
   861                                  				; Bit 13 = Pipe bit (reserved)
   862                                  				;
   863                                  				; Bits 0-7 (old FCB_devid bits)
   864                                  				; If remote file or local file, bit
   865                                  				; 6=0 if dirty Device ID number, bits
   866                                  				; 0-5 if local file.
   867                                  				; bit 7=0 for local file, bit 7
   868                                  				;      =1 for local I/O device
   869                                  				; If local I/O device, bit 6=0 if EOF (input)
   870                                  				;		Bit 5=1 if Raw mode
   871                                  				;		Bit 0=1 if console input device
   872                                  				;		Bit 1=1 if console output device
   873                                  				;		Bit 2=1 if null device
   874                                  				;		Bit 3=1 if clock device
   875 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   876                                  				; to device header if local device,
   877                                  				; points to net device header if
   878                                  				; remote
   879 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   880 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   881 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   882 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   883 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   884                                  
   885                                  ; Starting here, the next 7 bytes may be used by the file system to store
   886                                  ; an ID
   887                                  
   888                                  ; 09/07/2018 - Retro DOS v3.0
   889                                  
   890                                  ; MSDOS 3.3 SF.INC, 1987
   891                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   892                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   893                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   894                                  ;				; for this file
   895                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   896                                  
   897                                  ; MSDOS 6.0, SF.INC, 1991
   898 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   899 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   900                                  				; for this file
   901 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   902                                  
   903                                  ; End of 7 bytes of file-system specific info.
   904                                  
   905 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   906                                  				; directory entry.  This is used by
   907                                  				; close to detect file deleted and
   908                                  				; disk changed errors.
   909                                  ; SHARING INFO
   910 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   911 0000002F ????                    .sf_UID:	resw	1
   912 00000031 ????                    .sf_PID:	resw	1
   913 00000033 ????                    .sf_MFT:	resw	1
   914                                  
   915                                  ; MSDOS 6.0, SF.INC, 1991
   916 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   917 00000037 ????????                .sf_IFS_HDR:	resd	1
   918                                  
   919                                  .size:
   920                                  endstruc
   921                                  
   922                                  ; 20/07/2018
   923                                  ; MSDOS 3.3, SF.INC, 1987
   924                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   925                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   926                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   927                                  ; MSDOS 6.0, SF.INC, 1991
   928                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   929                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   930                                  
   931                                  ; 19/07/2018
   932                                  ; MSDOS 3.3, SF.INC, 1987
   933                                  
   934                                  sf_default_number  EQU	5
   935                                  
   936                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   937                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   938                                  ; by placing a -1 in the ref_count field.
   939                                  
   940                                  sf_busy EQU -1
   941                                  
   942                                  ; mode mask for FCB detection
   943                                  sf_isFCB		EQU	1000000000000000B
   944                                  
   945                                  ; Flag word masks
   946                                  sf_isnet		EQU	1000000000000000B
   947                                  sf_close_nodate 	EQU	0100000000000000B
   948                                  sf_pipe 		EQU	0010000000000000B
   949                                  sf_no_inherit		EQU	0001000000000000B
   950                                  sf_net_spool		EQU	0000100000000000B
   951                                  
   952                                  ; 25/04/2019
   953                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   954                                  
   955                                  ; ---------------------------------------------------------------------------
   956                                  ; Local file/device flag masks
   957                                  ; ---------------------------------------------------------------------------
   958                                  
   959                                  devid_file_clean        EQU     40h     ; true if file and not written
   960                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   961                                  
   962                                  devid_device            EQU     80h     ; true if a device
   963                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   964                                  devid_device_raw        EQU     20h     ; true if in raw mode
   965                                  devid_device_special    EQU     10h     ; true if special device
   966                                  devid_device_clock      EQU     08h     ; true if clock device
   967                                  devid_device_null       EQU     04h     ; true if null device
   968                                  devid_device_con_out    EQU     02h     ; true if console output
   969                                  devid_device_con_in     EQU     01h     ; true if console input
   970                                  
   971                                  ; ---------------------------------------------------------------------------
   972                                  ; structure of devid field as returned by IOCTL is:
   973                                  ;
   974                                  ;       BIT     7   6   5   4   3   2   1   0
   975                                  ;             |---|---|---|---|---|---|---|---|
   976                                  ;             | I | E | R | S | I | I | I | I |
   977                                  ;             | S | O | A | P | S | S | S | S |
   978                                  ;             | D | F | W | E | C | N | C | C |
   979                                  ;             | E |   |   | C | L | U | O | I |
   980                                  ;             | V |   |   | L | K | L | T | N |
   981                                  ;             |---|---|---|---|---|---|---|---|
   982                                  ;       ISDEV = 1 if this channel is a device
   983                                  ;             = 0 if this channel is a disk file
   984                                  ;
   985                                  ;       If ISDEV = 1
   986                                  ;
   987                                  ;             EOF = 0 if End Of File on input
   988                                  ;             RAW = 1 if this device is in Raw mode
   989                                  ;                 = 0 if this device is cooked
   990                                  ;             ISCLK = 1 if this device is the clock device
   991                                  ;             ISNUL = 1 if this device is the null device
   992                                  ;             ISCOT = 1 if this device is the console output
   993                                  ;             ISCIN = 1 if this device is the console input
   994                                  ;
   995                                  ;       If ISDEV = 0
   996                                  ;             EOF = 0 if channel has been written
   997                                  ;             Bits 0-5 are the block device number for
   998                                  ;                 the channel (0 = A, 1 = B, ...)
   999                                  ; ---------------------------------------------------------------------------
  1000                                  
  1001                                  devid_ISDEV     EQU     80h
  1002                                  devid_EOF       EQU     40h
  1003                                  devid_RAW       EQU     20h
  1004                                  devid_SPECIAL   EQU     10H
  1005                                  devid_ISCLK     EQU     08h
  1006                                  devid_ISNUL     EQU     04h
  1007                                  devid_ISCOT     EQU     02h
  1008                                  devid_ISCIN     EQU     01h
  1009                                  
  1010                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1011                                  
  1012                                  ;============================================================================
  1013                                  ; PDB.INC, MSDOS 6.0, 1991
  1014                                  ;============================================================================
  1015                                  ; 04/05/2019 - Retro DOS v4.0
  1016                                  ; 08/07/2018 - Retro DOS v3.0
  1017                                  
  1018                                  ; ---------------------------------------------------------------------------
  1019                                  ; BREAK <Process data block>
  1020                                  ; ---------------------------------------------------------------------------
  1021                                  ;**	Process data block (otherwise known as program header)
  1022                                  ;
  1023                                  
  1024                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1025                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1026                                  ;	for use.
  1027                                  ; ---------------------------------------------------------------------------
  1028                                  
  1029                                  FILPERPROC	EQU     20
  1030                                  
  1031                                  struc PDB	; Process_data_block
  1032 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1033 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1034 00000004 ??                                      resb 1
  1035 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1036 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1037 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1038 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1039 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1040 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1041 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1042 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1043 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1044 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1045 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1046 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1047 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1048 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1049 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1050 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1051 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1052 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1053                                  				;  an extended FCB
  1054                                  ;endstruc 	; MSDOS 3.3
  1055                                  	  	; MSDOS 6.0
  1056 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1057 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1058 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1059 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1060                                  endstruc
  1061                                  
  1062                                  ;============================================================================
  1063                                  ; EXE.INC, MSDOS 6.0, 1991
  1064                                  ;============================================================================
  1065                                  ; 04/05/2019 - Retro DOS v4.0
  1066                                  
  1067                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1068                                  ; ---------------------------------------------------------------------------
  1069                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1070                                  ; whether or not the program is executed or whether or not a program header
  1071                                  ; gets created.
  1072                                  
  1073                                  exec_func_no_execute EQU 1	; no execute bit
  1074                                  exec_func_overlay    EQU 2	; overlay bit
  1075                                  
  1076                                  struc EXEC0
  1077 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1078 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1079 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1080 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1081                                  .size:
  1082                                  endstruc
  1083                                  
  1084                                  struc EXEC1
  1085 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1086 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1087 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1088 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1089 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1090 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1091 00000012 ????                    .IP:		resw 1		; entry point IP
  1092 00000014 ????                    .CS:		resw 1		; entry point CS
  1093                                  .size:
  1094                                  endstruc
  1095                                  
  1096                                  struc EXEC3
  1097 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1098 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1099                                  endstruc
  1100                                  
  1101                                  ;**	Exit codes (in upper byte) for terminating programs
  1102                                  
  1103                                  EXIT_TERMINATE		EQU	0
  1104                                  EXIT_ABORT		EQU	0
  1105                                  EXIT_CTRL_C		EQU	1
  1106                                  EXIT_HARD_ERROR 	EQU	2
  1107                                  EXIT_KEEP_PROCESS	EQU	3
  1108                                  
  1109                                  ;**	EXE File Header Description
  1110                                  
  1111                                  struc EXE
  1112 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1113 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1114 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1115 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1116 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1117 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1118 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1119 0000000E ????                    .SS:          resw 1		; stack of image
  1120 00000010 ????                    .SP:          resw 1		; SP of image
  1121 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1122 00000014 ????                    .IP:          resw 1		; IP of entry
  1123 00000016 ????                    .CS:          resw 1		; CS of entry
  1124 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1125 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1126 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1127                                  .size:
  1128                                  endstruc
  1129                                  
  1130                                  exe_valid_signature     EQU 5A4Dh
  1131                                  exe_valid_old_signature EQU 4D5Ah
  1132                                  
  1133                                  ;**	EXE file symbol info definitions
  1134                                  
  1135                                  struc symbol_entry
  1136 00000000 ????????                .value:	resd 1
  1137 00000004 ????                    .type:	resw 1
  1138 00000006 ??                      .len:	resb 1
  1139 00000007 <res FFh>               .name:	resb 255
  1140                                  endstruc
  1141                                  
  1142                                  ;**	Data structure passed for ExecReady call
  1143                                  
  1144                                  struc ERStruc
  1145 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1146 00000002 ????                     .ER_Flags:	resw	1
  1147 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1148 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1149 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1150 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1151                                   .size:
  1152                                  endstruc
  1153                                  
  1154                                  ;** bit fields in ER_Flags
  1155                                  
  1156                                  ER_EXE		equ	0001h
  1157                                  ER_OVERLAY	equ	0002h
  1158                                  
  1159                                  
  1160                                  ;============================================================================
  1161                                  ; ARENA.INC, MSDOS 6.0, 1991
  1162                                  ;============================================================================
  1163                                  ; 24/04/2019 - Retro DOS v4.0
  1164                                  ; 04/08/2018 - Retro DOS v3.0
  1165                                  
  1166                                  ;BREAK <Memory arena structure>
  1167                                  
  1168                                  ;**	Arena Header
  1169                                  
  1170                                  struc ARENA
  1171 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1172 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1173 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1174 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1175 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1176                                  .headersize:			
  1177                                  endstruc
  1178                                  
  1179                                  ; 20/05/2019 - Retro DOS v4.0
  1180                                  ARENAHEADERSIZE equ ARENA.headersize 
  1181                                  
  1182                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1183                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1184                                  ; Change them and change ALLOC.ASM.
  1185                                  
  1186                                  arena_owner_system  EQU 0               ; free block indication
  1187                                  
  1188                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1189                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1190                                  
  1191                                  FIRST_FIT	EQU	00000000B
  1192                                  BEST_FIT	EQU	00000001B
  1193                                  LAST_FIT	EQU	00000010B
  1194                                  
  1195                                  ; MSDOS 6.0
  1196                                  LOW_FIRST	EQU	00000000B	; M001
  1197                                  HIGH_FIRST	EQU	10000000B	; M001
  1198                                  HIGH_ONLY	EQU	01000000B	; M001
  1199                                  
  1200                                  LINKSTATE	EQU	00000001B	; M002
  1201                                  
  1202                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1203                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1204                                  
  1205                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1206                                  						; M026: used to mask of bits
  1207                                  						; M026: 6 & 7 of AllocMethod
  1208                                  
  1209                                  ;============================================================================
  1210                                  ; MI.INC, MSDOS 6.0, 1991
  1211                                  ;============================================================================
  1212                                  ; 07/07/2018 - Retro DOS v3.0
  1213                                  
  1214                                  ;BREAK <Machine instruction, flag definitions and character types>
  1215                                  
  1216                                  mi_INT		EQU	0CDh
  1217                                  mi_long_jmp	EQU	0EAh
  1218                                  mi_Long_CALL	EQU	09Ah
  1219                                  mi_Long_RET	EQU	0CBh
  1220                                  mi_Near_RET	EQU	0C3h
  1221                                  
  1222                                  ;			xxxxoditszxaxpxc
  1223                                  f_Overflow	EQU	0000100000000000B
  1224                                  f_Direction	EQU	0000010000000000B
  1225                                  f_Interrupt	EQU	0000001000000000B
  1226                                  f_Trace 	EQU	0000000100000000B
  1227                                  f_Sign		EQU	0000000010000000B
  1228                                  f_Zero		EQU	0000000001000000B
  1229                                  f_Aux		EQU	0000000000010000B
  1230                                  f_Parity	EQU	0000000000000100B
  1231                                  f_Carry 	EQU	0000000000000001B
  1232                                  
  1233                                  ;============================================================================
  1234                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1235                                  ;============================================================================
  1236                                  ; 13/07/2018 - Retro DOS v3.0
  1237                                  ; 29/04/2019 - Retro DOS v4.0
  1238                                  
  1239                                  ;**	Standard I/O file handles
  1240                                  
  1241                                  stdin       EQU     0
  1242                                  stdout      EQU     1
  1243                                  stderr      EQU     2
  1244                                  stdaux      EQU     3
  1245                                  stdprn      EQU     4
  1246                                  
  1247                                  ;**	File Modes
  1248                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1249                                  
  1250                                  open_for_read   EQU 0
  1251                                  open_for_write  EQU 1
  1252                                  open_for_both   EQU 2
  1253                                  
  1254                                  ; MSDOS 6.0
  1255                                  OPEN_FOR_BOTH	equ 2
  1256                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1257                                  				; made from exec
  1258                                  
  1259                                  access_mask	EQU 0Fh ; 09/08/2018
  1260                                  
  1261                                  SHARING_MASK	    equ 0F0h
  1262                                  SHARING_COMPAT	    equ 000h
  1263                                  SHARING_DENY_BOTH   equ 010h
  1264                                  SHARING_DENY_WRITE  equ 020h
  1265                                  SHARING_DENY_READ   equ 030h
  1266                                  SHARING_DENY_NONE   equ 040h
  1267                                  SHARING_NET_FCB     equ 070h
  1268                                  SHARING_NO_INHERIT  equ 080h
  1269                                  
  1270                                  ; 29/04/2019
  1271                                  
  1272                                  ;**	Extended Open Definitions
  1273                                  
  1274                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1275                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1276                                  NOT_EXISTS_MASK    equ 0F0h
  1277                                  
  1278                                  ;*	SF_MODE values
  1279                                  
  1280                                  AUTO_COMMIT_WRITE	equ 4000h
  1281                                  INT_24_ERROR		equ 2000h
  1282                                  
  1283                                  ;*	Flags in EXTOPEN_ON
  1284                                  
  1285                                  EXT_OPEN_ON		equ 01h
  1286                                  EXT_FILE_NOT_EXISTS	equ 04h
  1287                                  EXT_OPEN_I24_OFF	equ 02h
  1288                                  
  1289                                  ;*	Flags in EXTOPEN_FLAG
  1290                                  
  1291                                  ACTION_OPENED		equ 01h
  1292                                  ACTION_CREATED_OPENED	equ 02h
  1293                                  ACTION_REPLACED_OPENED	equ 03h
  1294                                  EXT_EXISTS_OPEN 	equ 01h
  1295                                  EXT_EXISTS_FAIL 	equ 00h
  1296                                  EXT_NEXISTS_CREATE	equ 10h
  1297                                  
  1298                                  ;**	Extended Open Structure
  1299                                  
  1300                                  struc EXT_OPEN_PARM
  1301 00000000 ????????                .SET_LIST:	resd 1
  1302 00000004 ????                    .NUM_OF_PARM:	resw 1
  1303                                  endstruc
  1304                                  
  1305                                  ;============================================================================
  1306                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1307                                  ;============================================================================
  1308                                  ; 29/04/2019 - Retro DOS v4.0
  1309                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1310                                  
  1311                                  ; <system call definitions>
  1312                                  
  1313                                  ABORT                           EQU 0   ;  0      0
  1314                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1315                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1316                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1317                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1318                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1319                                  RAW_CON_IO                      EQU 6   ;  6      6
  1320                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1321                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1322                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1323                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1324                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1325                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1326                                  DISK_RESET                      EQU 13  ; 13      D
  1327                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1328                                  FCB_OPEN                        EQU 15  ; 15      F
  1329                                  FCB_CLOSE                       EQU 16  ; 16     10
  1330                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1331                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1332                                  FCB_DELETE                      EQU 19  ; 19     13
  1333                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1334                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1335                                  FCB_CREATE                      EQU 22  ; 22     16
  1336                                  FCB_RENAME                      EQU 23  ; 23     17
  1337                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1338                                  SET_DMA                         EQU 26  ; 26     1A
  1339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1340                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1341                                  ;                                                                          ;
  1342                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1343                                  ;                                                                          ;
  1344                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1345                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1346                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1347                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1348                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1349                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1350                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1351                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1352                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1353                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1354                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1355                                  GET_DATE                        EQU 42  ; 42     2A
  1356                                  SET_DATE                        EQU 43  ; 43     2B
  1357                                  GET_TIME                        EQU 44  ; 44     2C
  1358                                  SET_TIME                        EQU 45  ; 45     2D
  1359                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1360                                  ; Extended functionality group
  1361                                  GET_DMA                         EQU 47  ; 47     2F
  1362                                  GET_VERSION                     EQU 48  ; 48     30
  1363                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1364                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1365                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1366                                  ;                                                                          ;
  1367                                  GET_DPB                         EQU 50  ; 50     32
  1368                                  ;                                                                          ;
  1369                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1370                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1371                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1372                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1373                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1374                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1375                                  CHAR_OPER                       EQU 55  ; 55     37
  1376                                  INTERNATIONAL                   EQU 56  ; 56     38
  1377                                  ; XENIX CALLS
  1378                                  ;   Directory Group
  1379                                  MKDIR                           EQU 57  ; 57     39
  1380                                  RMDIR                           EQU 58  ; 58     3A
  1381                                  CHDIR                           EQU 59  ; 59     3B
  1382                                  ;   File Group
  1383                                  CREAT                           EQU 60  ; 60     3C
  1384                                  OPEN                            EQU 61  ; 61     3D
  1385                                  CLOSE                           EQU 62  ; 62     3E
  1386                                  READ                            EQU 63  ; 63     3F
  1387                                  WRITE                           EQU 64  ; 64     40
  1388                                  UNLINK                          EQU 65  ; 65     41
  1389                                  LSEEK                           EQU 66  ; 66     42
  1390                                  CHMOD                           EQU 67  ; 67     43
  1391                                  IOCTL                           EQU 68  ; 68     44
  1392                                  XDUP                            EQU 69  ; 69     45
  1393                                  XDUP2                           EQU 70  ; 70     46
  1394                                  CURRENT_DIR                     EQU 71  ; 71     47
  1395                                  ;    Memory Group
  1396                                  ALLOC                           EQU 72  ; 72     48
  1397                                  DEALLOC                         EQU 73  ; 73     49
  1398                                  SETBLOCK                        EQU 74  ; 74     4A
  1399                                  ;    Process Group
  1400                                  EXEC                            EQU 75  ; 75     4B
  1401                                  EXIT                            EQU 76  ; 76     4C
  1402                                  _WAIT				EQU 77  ; 77     4D
  1403                                  FIND_FIRST                      EQU 78  ; 78     4E
  1404                                  ;   Special Group
  1405                                  FIND_NEXT                       EQU 79  ; 79     4F
  1406                                  ; SPECIAL SYSTEM GROUP
  1407                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1408                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1409                                  ;                                                                          ;
  1410                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1411                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1412                                  GET_IN_VARS                     EQU 82  ; 82     52
  1413                                  SETDPB                          EQU 83  ; 83     53
  1414                                  ;                                                                          ;
  1415                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1416                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1417                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  DUP_PDB                         EQU 85  ; 85     55
  1422                                  ;                                                                          ;
  1423                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1424                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1425                                  RENAME                          EQU 86  ; 86     56
  1426                                  FILE_TIMES                      EQU 87  ; 87     57
  1427                                  ALLOCOPER			EQU 88	; 88	 58
  1428                                  ; Network extention system calls
  1429                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1430                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1431                                  CREATENEWFILE			EQU 91	; 91	 5B
  1432                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1433                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1434                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1435                                  ;									   ;
  1436                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1437                                  					;	    CloseByName, CloseUser,
  1438                                  					;	    CloseUserProcess,
  1439                                  					;	    GetOpenFileList
  1440                                  ;									   ;
  1441                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1442                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1443                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1444                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1445                                  XNAMETRANS			EQU 96	; 96	 60
  1446                                  PATHPARSE			EQU 97	; 97	 61
  1447                                  GETCURRENTPSP			EQU 98	; 98	 62
  1448                                  HONGEUL 			EQU 99	; 99	 63
  1449                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1450                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1451                                  ;									   ;
  1452                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1453                                  ;									   ;
  1454                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1455                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1456                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1457                                  GETSETCDPG			EQU 102 ; 102	 66
  1458                                  EXTHANDLE			EQU 103 ; 103	 67
  1459                                  COMMIT				EQU 104 ; 104	 68
  1460                                  
  1461                                  ; 29/04/2019 - Retro DOS v4.0
  1462                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1463                                  
  1464                                  GetSetMediaID			EQU 105 ; 105	 69
  1465                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1466                                  ExtOpen 			EQU 108 ; 108	 6C
  1467                                  
  1468                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1469                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1470                                  ;                                                                          ;
  1471                                  ;ifdef ROMEXEC
  1472                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1473                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1474                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1475                                  ;endif
  1476                                  ;                                                                          ;
  1477                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1478                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1479                                  
  1480                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1481                                  ;OEM_C1				EQU 249 ; 249    F9
  1482                                  ;OEM_C2				EQU 250 ; 250    FA
  1483                                  ;OEM_C3				EQU 251 ; 251    FB
  1484                                  ;OEM_C4				EQU 252 ; 252    FC
  1485                                  ;OEM_C5				EQU 253 ; 253    FD
  1486                                  ;OEM_C6				EQU 254 ; 254    FE
  1487                                  ;OEM_C7				EQU 255 ; 255    FF
  1488                                  
  1489                                  ;============================================================================
  1490                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1491                                  ;============================================================================
  1492                                  ; 24/04/2019 - Retro DOS 4.0
  1493                                  
  1494                                  ;MAJOR_VERSION	EQU     6
  1495                                  ;;MINOR_VERSION	EQU	00
  1496                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1497                                  
  1498                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1499                                  MAJOR_VERSION	EQU     5
  1500                                  MINOR_VERSION	EQU     0
  1501                                  
  1502                                  ;============================================================================
  1503                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1504                                  ;============================================================================
  1505                                  ; 09/07/2018 - Retro DOS 3.0
  1506                                  
  1507                                  ; Current structure of the data returned by the international call
  1508                                  
  1509                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1510                                  .Date_tim_format:
  1511 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1512                                  .Currency_sym:
  1513 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1514                                  .Thous_sep:
  1515 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1516                                  .Decimal_sep:
  1517 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1518                                  .Date_sep:
  1519 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1520                                  .Time_sep:
  1521 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1522                                  .Bit_field:	
  1523 0000000F ??                      		RESB 1		; Bit values
  1524                                                                     ;   Bit 0 = 0 if currency symbol first
  1525                                                                     ;         = 1 if currency symbol last
  1526                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1527                                                                     ;         = 1 if space after currency symbol
  1528                                  .Currency_cents:
  1529 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1530                                  .Time_24:
  1531 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1532                                  .Map_call:
  1533 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1534 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1535                                  				;  in pieces.
  1536                                  .Data_sep:
  1537 00000016 ????                    		RESB	2	; Data list separator character
  1538                                  .size:		
  1539                                  endstruc
  1540                                  
  1541                                  ; Max size of the block returned by the INTERNATIONAL call
  1542                                  
  1543                                  internat_block_max	EQU	32
  1544                                  
  1545                                  ;============================================================================
  1546                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1547                                  ;============================================================================
  1548                                  ; 08/07/2018 - Retro DOS v3.0
  1549                                  
  1550                                  ;SysInitVars STRUC
  1551                                  struc SYSI
  1552 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1553 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1554 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1555 0000000C ????????                .CON:	    resd 1		; CON device
  1556 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1557 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1558 00000016 ????????                .CDS:	    resd 1		; CDS list
  1559 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1560 0000001E ????                    .Keep:	    resw 1		; keep count
  1561 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1562 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1563 00000022 ????????                .DEV:	    resd 1		; device list
  1564                                  ; 09/07/2018
  1565                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1566                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1567 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1568 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1569 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1570 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1571 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1572 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1573 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service routine entry
  1574 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1575 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1576 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1577 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1578 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1579                                  endstruc
  1580                                  ;SysInitVars ENDS
  1581                                  
  1582                                  ;This is added for more information exchange between DOS, BIOS.
  1583                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1584                                  
  1585                                  ;SysInitVars_Ext struc
  1586                                  struc SYSI_EXT
  1587 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1588 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1589                                  endstruc
  1590                                  ;SysInitVars_Ext ends
  1591                                  
  1592                                  ;============================================================================
  1593                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1594                                  ;============================================================================
  1595                                  ; 09/07/2018 - Retro DOS v3.0
  1596                                  
  1597                                  ;*** J.K.
  1598                                  ;General Guide -
  1599                                  ;Category Code:
  1600                                  ; 0... .... DOS Defined
  1601                                  ; 1... .... User defined
  1602                                  ; .xxx xxxx Code
  1603                                  
  1604                                  ;Function Code:
  1605                                  ; 0... .... Return error if unsupported
  1606                                  ; 1... .... Ignore if unsupported
  1607                                  ; .0.. .... Intercepted by DOS
  1608                                  ; .1.. .... Passed to driver
  1609                                  ; ..0. .... Sends data/commands to device
  1610                                  ; ..1. .... Quries data/info from device
  1611                                  ; ...x .... Subfunction
  1612                                  ;
  1613                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1614                                  ; function set.  It plays no critical role; some functions may contain both
  1615                                  ; command and query elements. The convention is that such commands are
  1616                                  ; defined as "sends data".
  1617                                  
  1618                                  ;*****************************;*
  1619                                  ; BLOCK DRIVERS 	      ;*
  1620                                  ;*****************************;*
  1621                                  
  1622                                  ; IOCTL SUB-FUNCTIONS
  1623                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1624                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1625                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1626                                  IOCTL_READ_HANDLE	EQU	2
  1627                                  IOCTL_WRITE_HANDLE	EQU	3
  1628                                  IOCTL_READ_DRIVE	EQU	4
  1629                                  IOCTL_WRITE_DRIVE	EQU	5
  1630                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1631                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1632                                  IOCTL_CHANGEABLE?	EQU	8
  1633                                  IOCTL_DeviceLocOrRem?	EQU	9
  1634                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1635                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1636                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1637                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1638                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1639                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1640                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1641                                  ; (MSDOS 6.0)
  1642                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1643                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1644                                  
  1645                                  ; GENERIC IOCTL CATEGORY CODES
  1646                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1647                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1648                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1649                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1650                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1651                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1652                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1653                                  
  1654                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1655                                  RAWIO			EQU	8
  1656                                  
  1657                                  ; RAWIO SUB-FUNCTIONS
  1658                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1659                                  GET_DEVICE_PARAMETERS	EQU	60H
  1660                                  SET_DEVICE_PARAMETERS	EQU	40H
  1661                                  READ_TRACK		EQU	61H
  1662                                  WRITE_TRACK		EQU	41H
  1663                                  VERIFY_TRACK		EQU	62H
  1664                                  FORMAT_TRACK		EQU	42H
  1665                                  ; (MSDOS 6.0)
  1666                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1667                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1668                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1669                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1670                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1671                                  
  1672                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1673                                  BUILD_DEVICE_BPB	EQU	000000001B
  1674                                  
  1675                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1676                                  INSTALL_FAKE_BPB	EQU	000000001B
  1677                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1678                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1679                                  
  1680                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1681                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1682                                  STATUS_FOR_FORMAT	EQU	000000001B
  1683                                  ; (MSDOS 6.0)
  1684                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1685                                  
  1686                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1687                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1688                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1689                                  
  1690                                  ; DEVICETYPE VALUES
  1691                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1692                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1693                                  DEV_5INCH		EQU	0
  1694                                  DEV_5INCH96TPI		EQU	1
  1695                                  DEV_3INCH720KB		EQU	2
  1696                                  DEV_8INCHSS		EQU	3
  1697                                  DEV_8INCHDS		EQU	4
  1698                                  DEV_HARDDISK		EQU	5
  1699                                  DEV_OTHER		EQU	7
  1700                                  ; (MSDOS 6.0)
  1701                                  ;DEV_3INCH1440KB	EQU	7
  1702                                  DEV_3INCH2880KB		EQU	9
  1703                                  ; Retro DOS v2.0 - 26/03/2018
  1704                                  ;;DEV_TAPE		EQU	6
  1705                                  ;;DEV_ERIMO		EQU	8
  1706                                  ;DEV_3INCH2880KB	EQU	9
  1707                                  DEV_3INCH1440KB		EQU	10
  1708                                  
  1709                                  ; (MSDOS 3.3)
  1710                                  ;MAX_DEV_TYPE		EQU	7
  1711                                  
  1712                                  ; (MSDOS 6.0)
  1713                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1714                                  					; CURRENTLY SUPPORT.
  1715                                  struc A_SECTORTABLE
  1716 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1717 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1718                                  .size:
  1719                                  endstruc
  1720                                  
  1721                                  ;============================================================================
  1722                                  ; DEVSYM.INC
  1723                                  ;============================================================================
  1724                                  ; 07/07/2018 - Retro DOS v3.0
  1725                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1726                                  
  1727                                  ;**	DevSym.inc - Device Symbols
  1728                                  
  1729                                  ; The device table list has the form:
  1730                                  struc	SYSDEV
  1731 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1732 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1733 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1734 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1735 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1736                                  .size:
  1737                                  endstruc
  1738                                  
  1739                                  ;
  1740                                  ; ATTRIBUTE BIT MASKS
  1741                                  ;
  1742                                  ; CHARACTER DEVICES:
  1743                                  ;
  1744                                  ; BIT 15 -> MUST BE 1
  1745                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1746                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1747                                  ;     12 -> UNUSED
  1748                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1749                                  ;     10 -> MUST BE 0
  1750                                  ;      9 -> MUST BE 0
  1751                                  ;      8 -> UNUSED
  1752                                  ;      7 -> UNUSED
  1753                                  ;      6 -> UNUSED
  1754                                  ;      5 -> UNUSED
  1755                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1756                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1757                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1758                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1759                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1760                                  ;
  1761                                  ; BLOCK DEVICES:
  1762                                  ;
  1763                                  ; BIT 15 -> MUST BE 0
  1764                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1765                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1766                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1767                                  ;	    THE SAME PLACE.
  1768                                  ;     12 -> UNUSED
  1769                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1770                                  ;     10 -> MUST BE 0
  1771                                  ;      9 -> MUST BE 0
  1772                                  ;      8 -> UNUSED
  1773                                  ;      7 -> UNUSED
  1774                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1775                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1776                                  ;      5 -> UNUSED
  1777                                  ;      4 -> UNUSED
  1778                                  ;      3 -> UNUSED
  1779                                  ;      2 -> UNUSED
  1780                                  ;      1 -> UNUSED
  1781                                  ;      0 -> UNUSED
  1782                                  ;
  1783                                  
  1784                                  ;Attribute bit masks
  1785                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1786                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1787                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1788                                  
  1789                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1790                                  
  1791                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1792                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1793                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1794                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1795                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1796                                  				;  ENTRY POINTS, 0 IF NOT
  1797                                  
  1798                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1799                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1800                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1801                                  				;  ITS CURRENT FORM.
  1802                                  
  1803                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1804                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1805                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1806                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1807                                  
  1808                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1809                                  
  1810                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1811                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1812                                  				;LOGICAL DRIVES, AND SUPPORTS
  1813                                  				;GENERIC IOCTL CALLS.
  1814                                  				;FOR CHARACTER DEVICES, THIS
  1815                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1816                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1817                                  
  1818                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1819                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1820                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1821                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1822                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1823                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1824                                  
  1825                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1826                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1827                                  
  1828                                  ;Static Reguest Header
  1829                                  struc	SRHEAD
  1830 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1831 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1832 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1833 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1834 00000005 ????????????????                	resb 8		;Reserved for queue links
  1835                                  .size:
  1836                                  endstruc
  1837                                  
  1838                                  ;Status word masks
  1839                                  STERR   EQU     8000H           ;Bit 15 - Error
  1840                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1841                                  STDON   EQU     0100H           ;Bit 8 - Done
  1842                                  STECODE EQU     00FFH           ;Error code
  1843                                  WRECODE EQU     0
  1844                                  
  1845                                  ;Function codes
  1846                                  DINITHL EQU     26              ;Size of init header
  1847                                  DMEDHL  EQU     15              ;Size of media check header
  1848                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1849                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1850                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1851                                  DSTATHL EQU     13              ;Size of status header
  1852                                  DFLSHL  EQU     15              ;Size of flush header
  1853                                  
  1854                                  DEVINIT EQU     0               ;Initialization
  1855                                  DEVMDCH EQU     1               ;Media check
  1856                                  DEVBPB  EQU     2               ;Get BPB
  1857                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1858                                  DEVRD   EQU     4               ;Read
  1859                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1860                                  DEVIST  EQU     6               ;Input status
  1861                                  DEVIFL  EQU     7               ;Input flush
  1862                                  DEVWRT  EQU     8               ;Write
  1863                                  DEVWRTV EQU     9               ;Write with verify
  1864                                  DEVOST  EQU     10              ;Output status
  1865                                  DEVOFL  EQU     11              ;Output flush
  1866                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1867                                  
  1868                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1869                                  DEVOPN	EQU	13		;DEVICE OPEN
  1870                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1871                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1872                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1873                                  ; 07/08/2018 - Retro DOS v3.0
  1874                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1875                                  GENIOCTL EQU	19
  1876                                  
  1877                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1878                                  ;		     20
  1879                                  ;		     21
  1880                                  ;		     22
  1881                                  
  1882                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1883                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1884                                  ; 18/05/2019 - Retro DOS v4.0
  1885                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1886                                  
  1887                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1888                                  
  1889                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1890                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1891                                  
  1892                                  ; ADDED FOR DOS 5.00
  1893                                  
  1894                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1895                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1896                                  
  1897                                  struc IOCTL_REQ
  1898 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1899                                  				; GENERIC IOCTL ADDITION.
  1900 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1901 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1902 0000000F ????                    .REG_SI:	resw 1
  1903 00000011 ????                    .REG_DI:	resw 1
  1904 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1905                                  .size: ; 07/08/2018
  1906                                  endstruc
  1907                                  
  1908                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1909                                  GEN_IOCTL_WRT_TRK EQU	40H
  1910                                  GEN_IOCTL_RD_TRK  EQU	60H
  1911                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1912                                  
  1913                                  ;; 32-bit absolute read/write input list structure
  1914                                  
  1915                                  struc ABS_32RW
  1916 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1917 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1918 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1919                                  .size:
  1920                                  endstruc
  1921                                  
  1922                                  ;; media ID info
  1923                                  
  1924                                  struc MEDIA_ID_INFO
  1925 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1926 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1927 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1928 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1929                                  .size:
  1930                                  endstruc
  1931                                  
  1932                                  ; equates for DOS34_FLAG
  1933                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1934                                  
  1935                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1936                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1937                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1938                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1939                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1940                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1941                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1942                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1943                                  					    ;M018: that knows how to handle 
  1944                                  					    ;M018: open for exec
  1945                                  
  1946                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1947                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1948                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1949                                  
  1950                                  ;============================================================================
  1951                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1952                                  ;============================================================================
  1953                                  ; 16/07/2018 - Retro DOS v3.0 
  1954                                  
  1955                                  ;**	ERROR.INC - DOS Error Codes
  1956                                  ;
  1957                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1958                                  ;    return error codes through AX. If an error occurred then
  1959                                  ;    the carry bit will be set and the error code is in AX. If no error
  1960                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1961                                  ;
  1962                                  ;    Since the set of error codes is being extended as we extend the operating
  1963                                  ;    system, we have provided a means for applications to ask the system for a
  1964                                  ;    recommended course of action when they receive an error.
  1965                                  ;
  1966                                  ;    The GetExtendedError system call returns a universal error, an error
  1967                                  ;    location and a recommended course of action. The universal error code is
  1968                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1969                                  ;    is issued.
  1970                                  
  1971                                  ;	2.0 error codes
  1972                                  
  1973                                  error_invalid_function		EQU	1
  1974                                  error_file_not_found		EQU	2
  1975                                  error_path_not_found		EQU	3
  1976                                  error_too_many_open_files	EQU	4
  1977                                  error_access_denied		EQU	5
  1978                                  error_invalid_handle		EQU	6
  1979                                  error_arena_trashed		EQU	7
  1980                                  error_not_enough_memory 	EQU	8
  1981                                  error_invalid_block		EQU	9
  1982                                  error_bad_environment		EQU	10
  1983                                  error_bad_format		EQU	11
  1984                                  error_invalid_access		EQU	12
  1985                                  error_invalid_data		EQU	13
  1986                                  ;**** reserved			EQU	14	; *****
  1987                                  error_invalid_drive		EQU	15
  1988                                  error_current_directory 	EQU	16
  1989                                  error_not_same_device		EQU	17
  1990                                  error_no_more_files		EQU	18
  1991                                  
  1992                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1993                                  
  1994                                  error_write_protect		EQU	19
  1995                                  error_bad_unit			EQU	20
  1996                                  error_not_ready 		EQU	21
  1997                                  error_bad_command		EQU	22
  1998                                  error_CRC			EQU	23
  1999                                  error_bad_length		EQU	24
  2000                                  error_seek			EQU	25
  2001                                  error_not_DOS_disk		EQU	26
  2002                                  error_sector_not_found		EQU	27
  2003                                  error_out_of_paper		EQU	28
  2004                                  error_write_fault		EQU	29
  2005                                  error_read_fault		EQU	30
  2006                                  error_gen_failure		EQU	31
  2007                                  
  2008                                  ;	the new 3.0 error codes reported through INT 24
  2009                                  
  2010                                  error_sharing_violation 	EQU	32
  2011                                  error_lock_violation		EQU	33
  2012                                  error_wrong_disk		EQU	34
  2013                                  error_FCB_unavailable		EQU	35
  2014                                  error_sharing_buffer_exceeded	EQU	36
  2015                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2016                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2017                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2018                                  
  2019                                  ;	New OEM network-related errors are 50-79
  2020                                  
  2021                                  error_not_supported		EQU	50
  2022                                  
  2023                                  error_net_access_denied		EQU	65	;M028
  2024                                  
  2025                                  ;	End of INT 24 reportable errors
  2026                                  
  2027                                  error_file_exists		EQU	80
  2028                                  error_DUP_FCB			EQU	81	; *****
  2029                                  error_cannot_make		EQU	82
  2030                                  error_FAIL_I24			EQU	83
  2031                                  
  2032                                  ;	New 3.0 network related error codes
  2033                                  
  2034                                  error_out_of_structures 	EQU	84
  2035                                  error_already_assigned		EQU	85
  2036                                  error_invalid_password		EQU	86
  2037                                  error_invalid_parameter 	EQU	87
  2038                                  error_NET_write_fault		EQU	88
  2039                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2040                                  
  2041                                  ;	BREAK <Interrupt 24 error codes>
  2042                                  
  2043                                  ;**	Int24 Error Codes
  2044                                  
  2045                                  error_I24_write_protect 	EQU	0
  2046                                  error_I24_bad_unit		EQU	1
  2047                                  error_I24_not_ready		EQU	2
  2048                                  error_I24_bad_command		EQU	3
  2049                                  error_I24_CRC			EQU	4
  2050                                  error_I24_bad_length		EQU	5
  2051                                  error_I24_Seek			EQU	6
  2052                                  error_I24_not_DOS_disk		EQU	7
  2053                                  error_I24_sector_not_found	EQU	8
  2054                                  error_I24_out_of_paper		EQU	9
  2055                                  error_I24_write_fault		EQU	0Ah
  2056                                  error_I24_read_fault		EQU	0Bh
  2057                                  error_I24_gen_failure		EQU	0Ch
  2058                                  ; NOTE: Code 0DH is used by MT-DOS.
  2059                                  error_I24_wrong_disk		EQU	0Fh
  2060                                  
  2061                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2062                                  ;
  2063                                  ;	NOTE: ABORT is ALWAYS allowed
  2064                                  
  2065                                  Allowed_FAIL			EQU	00001000B
  2066                                  Allowed_RETRY			EQU	00010000B
  2067                                  Allowed_IGNORE			EQU	00100000B
  2068                                  
  2069                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2070                                  I24_area			EQU	00000110B  ; 00 if DOS
  2071                                  						   ; 01 if FAT
  2072                                  						   ; 10 if root DIR
  2073                                  						   ; 11 if DATA
  2074                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2075                                  
  2076                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2077                                  
  2078                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2079                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2080                                  ;	to take for error codes that they don't explicitly understand.
  2081                                  
  2082                                  ;	Values for error CLASS
  2083                                  
  2084                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2085                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2086                                  errCLASS_Auth		EQU	3	; Permission problem
  2087                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2088                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2089                                  errCLASS_SysFail	EQU	6	; System Failure
  2090                                  errCLASS_Apperr 	EQU	7	; Application Error
  2091                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2092                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2093                                  errCLASS_Locked 	EQU	10	; Locked
  2094                                  errCLASS_Media		EQU	11	; Media Failure
  2095                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2096                                  errCLASS_Unk		EQU	13	; Unknown/other
  2097                                  
  2098                                  ;	Values for error ACTION
  2099                                  
  2100                                  errACT_Retry		EQU	1	; Retry
  2101                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2102                                  errACT_User		EQU	3	; Ask user to regive info
  2103                                  errACT_Abort		EQU	4	; abort with clean up
  2104                                  errACT_Panic		EQU	5	; abort immediately
  2105                                  errACT_Ignore		EQU	6	; ignore
  2106                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2107                                  
  2108                                  ;	Values for error LOCUS
  2109                                  
  2110                                  errLOC_Unk		EQU	1	; No appropriate value
  2111                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2112                                  errLOC_Net		EQU	3	; Network
  2113                                  errLOC_SerDev		EQU	4	; Serial Device
  2114                                  errLOC_Mem		EQU	5	; Memory
  2115                                  
  2116                                  ;============================================================================
  2117                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2118                                  ;============================================================================
  2119                                  ; 04/05/2019 - Retro DOS v4.0
  2120                                  
  2121                                  ;**	Int 2A functions
  2122                                  ; ---------------------------------------------------------------------------
  2123                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2124                                  ;		as a critical section handler since critical sections
  2125                                  ;		were originally created to support the net.
  2126                                  ; ---------------------------------------------------------------------------
  2127                                  
  2128                                  ; ---------------------------------------------------------------------------
  2129                                  ;**	This table was created by examining the source and may not be
  2130                                  ;	complete or completely accurate - JGL
  2131                                  ;
  2132                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2133                                  
  2134                                  ;	(ah) = 0	installation check
  2135                                  ;			   (returns ah !=0 if installed)
  2136                                  ;	(ah) = 1	cooked net bios call
  2137                                  ;	(ah) = 3	query drive shared
  2138                                  ;			   (ds:si) = "n:" asciz string
  2139                                  ;	(ah) = 4	net bios
  2140                                  ;	       (al) = 0	   cooked net bios call
  2141                                  ;	       (al) = 1	   raw net bios call
  2142                                  ;	       (al) = 2	   ???
  2143                                  ;
  2144                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2145                                  ;			NCBs available/outstanding. DX returns the number of
  2146                                  ;			sessions. Supposedly, this is documented in an old
  2147                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2148                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2149                                  ;			not be used, as it is a hack, only to get Lotus
  2150                                  ;			Notes running.
  2151                                  ;
  2152                                  ;	(ah) = 80h	enter critical section
  2153                                  ;	(ah) = 81h	leave critical section
  2154                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2155                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2156                                  ; ---------------------------------------------------------------------------
  2157                                  
  2158                                  ;**	Critical section definitions
  2159                                  ; ---------------------------------------------------------------------------
  2160                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2161                                  ;	which various programs use to make it so, in a limited fashion.
  2162                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2163                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2164                                  ;	DOS's global data structures, such as the memory arena, are not
  2165                                  ;	in this area, so critical section indicators are used to protect
  2166                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2167                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2168                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2169                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2170                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2171                                  ;	critical section they then switch away from that second thread and
  2172                                  ;	let the first one finish and exit the section.
  2173                                  ; ---------------------------------------------------------------------------
  2174                                  
  2175                                  ; These below are subject to leave-all sections
  2176                                  critDisk    EQU     1			; Disk I/O critical section
  2177                                  critShare   EQU     1			; Sharer I/O critical section
  2178                                  critMem     EQU     1			; memory maintenance critical section
  2179                                  critSFT     EQU     1			; sft table allocation
  2180                                  critDevice  EQU     2			; Device I/O critical section
  2181                                  critNet     EQU     5			; network critical section
  2182                                  critIFS     EQU     6			; ifsfunc critical section
  2183                                  ; These below are not subject to leave-all sections
  2184                                  critASSIGN  EQU     8			; Assign has munged a system call
  2185                                  
  2186                                  ;============================================================================
  2187                                  ; MULT.INC (MSDOS 6.0, 1991)
  2188                                  ;============================================================================
  2189                                  ; 04/05/2019 - Retro DOS v4.0
  2190                                  
  2191                                  ;Break <Multiplex channels>
  2192                                  
  2193                                  ; ---------------------------------------------------------------------------
  2194                                  ; The current set of defined multiplex channels is (* means documented):
  2195                                  ;
  2196                                  ;   Channel(h)  Issuer          Receiver    Function
  2197                                  ;      00       server          PSPRINT     print job control
  2198                                  ;     *01       print/apps      PRINT       Queueing of files
  2199                                  ;      02       BIOS            REDIR       signal open/close of printers
  2200                                  ;
  2201                                  ;      05       command         REDIR       obtain text of net int 24 message
  2202                                  ;     *06       server/assign   ASSIGN      Install check
  2203                                  ;
  2204                                  ;      08       external driver IBMBIO      interface to internal routines
  2205                                  ;
  2206                                  ;      10       sharer/server   Sharer      install check
  2207                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2208                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2209                                  ;      13       MSNET           MSNET       movement of NCBs
  2210                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2211                                  ;                                           of alternative INT_13 drivers after
  2212                                  ;                                           boot_up
  2213                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2214                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2215                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2216                                  ;      16       WIN386          WIN386      Windows communications
  2217                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2218                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2219                                  ;      19       Shell
  2220                                  ;      1A       Ansi.sys
  2221                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2222                                  ;
  2223                                  ;      40h      OS/2
  2224                                  ;      41h      Lanman
  2225                                  ;      42h      Lanman
  2226                                  ;      43h      Himem
  2227                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2228                                  ;                               AL = 30h    reserved for Himem external A20 code
  2229                                  ;      44h      Dosextender
  2230                                  ;      45H      Windows profiler
  2231                                  ;      46h      Windows/286 DOS extender
  2232                                  ;      47h      Basic Compiler Vn. 7.0
  2233                                  ;      48h      Doskey
  2234                                  ;      49h      DOS 5.x install 
  2235                                  ;      4Ah      Multi Purpose
  2236                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2237                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2238                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2239                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2240                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2241                                  ;
  2242                                  ;                multSmartdrv           10h
  2243                                  ;                multMagicdrv           11h
  2244                                  ;      4Bh      Task Switcher API
  2245                                  ;
  2246                                  ;      4Ch      APPS            APM         Advanced power management
  2247                                  ;      4Dh      Kana Kanji Converter, MSKK
  2248                                  ;
  2249                                  ;      51h      ODI real mode support driver (for Chicago)
  2250                                  ;
  2251                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2252                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2253                                  ;
  2254                                  ;      55h      COMMAND.COM
  2255                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2256                                  ;                                           instance of command.com
  2257                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2258                                  ;                                           instance of ROM COMMAND
  2259                                  ;      56h      Sewell Development
  2260                                  ;               INTERLNK
  2261                                  ;
  2262                                  ;      57h      Iomega Corp.
  2263                                  ;
  2264                                  ;      ABh      Unspecified IBM use
  2265                                  ;      ACh      Graphics
  2266                                  ;      ADh      NLS (toronto)
  2267                                  ;      AEh
  2268                                  ;      AFh      Mode
  2269                                  ;      B0h      GRAFTABL        GRAFTABL
  2270                                  ;
  2271                                  ;      D7h      Banyan VINES
  2272                                  ; ---------------------------------------------------------------------------
  2273                                  
  2274                                  ;MUX 00-3F reserverd for IBM
  2275                                  ;MUX 80-BF reserverd for IBM
  2276                                  
  2277                                  ;MUX 40-7F reserved for Microsoft
  2278                                  
  2279                                  ;MUX C0-FF users
  2280                                  
  2281                                  MultSHARE   EQU     10h 		; sharer
  2282                                      ;	1   MFT_enter
  2283                                      ;	2   MFTClose
  2284                                      ;	3   MFTclU
  2285                                      ;	4   MFTCloseP
  2286                                      ;	5   MFTCloN
  2287                                      ;	6   set_block
  2288                                      ;	7   clr_block
  2289                                      ;	8   chk_block
  2290                                      ;	9   MFT_get
  2291                                      ;	10  ShSave
  2292                                      ;	11  ShChk
  2293                                      ;	12  ShCol
  2294                                      ;	13  ShCloseFile
  2295                                  
  2296                                  MultNET     EQU     11h 		; Network support
  2297                                  MultIFS     EQU     11h                 ; Network support
  2298                                      ;   1   IFS_RMDIR
  2299                                      ;   2   IFS_SEQ_RMDIR
  2300                                      ;   3   IFS_MKDIR
  2301                                      ;   4   IFS_SEQ_MKDIR
  2302                                      ;   5   IFS_CHDIR
  2303                                      ;   6   IFS_CLOSE
  2304                                      ;   7   IFS_COMMIT
  2305                                      ;   8   IFS_READ
  2306                                      ;   9   IFS_WRITE
  2307                                      ;   10  IFS_LOCK
  2308                                      ;   11  IFS_UNLOCK
  2309                                      ;   12  IFS_DISK_INFO
  2310                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2311                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2312                                      ;   15  IFS_GET_FILE_INFO
  2313                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2314                                      ;   17  IFS_RENAME
  2315                                      ;   18  IFS_SEQ_RENAME
  2316                                      ;   19  IFS_DELETE
  2317                                      ;   20  IFS_SEQ_DELETE
  2318                                      ;   21  IFS_OPEN
  2319                                      ;   22  IFS_SEQ_OPEN
  2320                                      ;   23  IFS_CREATE
  2321                                      ;   24  IFS_SEQ_CREATE
  2322                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2323                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2324                                      ;   27  IFS_SEARCH_FIRST
  2325                                      ;   28  IFS_SEARCH_NEXT
  2326                                      ;   29  IFS_ABORT
  2327                                      ;   30  IFS_ASSOPER
  2328                                      ;   31  Printer_SET_STRING
  2329                                      ;   32  IFSFlushBuf
  2330                                      ;   33  IFSBufWrite
  2331                                      ;   34  IFSResetEnvironment
  2332                                      ;   35  IFSSpoolCheck
  2333                                      ;   36  IFSSpoolClose
  2334                                      ;   37  IFSDeviceOper
  2335                                      ;   38  IFSSpoolEchoCheck
  2336                                      ;   39      - - -   Unused   - - -
  2337                                      ;   40      - - -   Unused   - - -
  2338                                      ;   41      - - -   Unused   - - -
  2339                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2340                                      ;   43  DEVICE_IOCTL
  2341                                      ;   44  IFS_UPDATE_CB
  2342                                      ;   45  IFS_FILE_XATTRIBUTES
  2343                                      ;   46  IFS_XOPEN
  2344                                      ;   47  IFS_DEPENDENT_IOCTL
  2345                                  
  2346                                  MultDOS     EQU     12h 		; DOS call back
  2347                                      ;	1   DOS_CLOSE
  2348                                      ;	2   RECSET
  2349                                      ;	3   Get DOSGROUP
  2350                                      ;	4   PATHCHRCMP
  2351                                      ;	5   OUT
  2352                                      ;	6   NET_I24_ENTRY
  2353                                      ;	7   PLACEBUF
  2354                                      ;	8   FREE_SFT
  2355                                      ;	9   BUFWRITE
  2356                                      ;	10  SHARE_VIOLATION
  2357                                      ;	11  SHARE_ERROR
  2358                                      ;	12  SET_SFT_MODE
  2359                                      ;	13  DATE16
  2360                                      ;	14  SETVISIT
  2361                                      ;	15  SCANPLACE
  2362                                      ;	16  SKIPVISIT
  2363                                      ;	17  StrCpy
  2364                                      ;	18  StrLen
  2365                                      ;	19  UCase
  2366                                      ;	20  POINTCOMP
  2367                                      ;	21  CHECKFLUSH
  2368                                      ;	22  SFFromSFN
  2369                                      ;	23  GetCDSFromDrv
  2370                                      ;	24  Get_User_Stack
  2371                                      ;	25  GetThisDrv
  2372                                      ;	26  DriveFromText
  2373                                      ;	27  SETYEAR
  2374                                      ;	28  DSUM
  2375                                      ;	29  DSLIDE
  2376                                      ;	30  StrCmp
  2377                                      ;	31  initcds
  2378                                      ;	32  pjfnfromhandle
  2379                                      ;	33  $NameTrans
  2380                                      ;	34  CAL_LK
  2381                                      ;	35  DEVNAME
  2382                                      ;	36  Idle
  2383                                      ;   37  DStrLen
  2384                                      ;   38  NLS_OPEN      DOS 3.3
  2385                                      ;   39  $CLOSE        DOS 3.3
  2386                                      ;   40  NLS_LSEEK     DOS 3.3
  2387                                      ;   41  $READ         DOS 3.3
  2388                                      ;   42  FastInit      DOS 4.0
  2389                                      ;   43  NLS_IOCTL     DOS 3.3
  2390                                      ;   44  GetDevList    DOS 3.3
  2391                                      ;   45  NLS_GETEXT    DOS 3.3
  2392                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2393                                      ;   47  FAKE_VERSION  DOS 4.0
  2394                                  
  2395                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2396                                      ;	0   NLSInstall
  2397                                      ;	1   ChgCodePage
  2398                                      ;	2   GetExtInfo
  2399                                      ;	3   SetCodePage
  2400                                      ;	4   GetCntry
  2401                                  
  2402                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2403                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2404                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2405                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2406                                  
  2407                                  multMULT        EQU     4Ah
  2408                                  multMAGIC       EQU     256*multMULT + 11h
  2409                                  multMULTRPLTOM  EQU     06h
  2410                                  
  2411                                      ;   0   swap disk function for single floppy drive m/cs
  2412                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2413                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2414                                      ;       drive
  2415                                      ;
  2416                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2417                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2418                                      ;       returns pointer in ES:DI
  2419                                      ;
  2420                                      ;   3-4 currently used by nobody
  2421                                      ;   5   Switcher API
  2422                                      ;   6   Top of Memory for RPL.
  2423                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2424                                      ;           code present in TOM should respond with a new TOM in DX
  2425                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2426                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2427                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2428                                      ;           It is the responsibility of RPL program to release the mem.
  2429                                      ;   7   Reserved for PROTMAN support.
  2430                                      ;  10   smartdrv 4.0
  2431                                      ;  11   dblspace api
  2432                                      ;  12   MRCI     api
  2433                                      ;  13   dblspace/mrci stealth packet api
  2434                                  
  2435                                  MultAPM     EQU     4ch             ; Obselete ???
  2436                                      ;       00h     APM_VER_CHK
  2437                                      ;       01h     APM_SUS_SYS_REQ
  2438                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2439                                  
  2440                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2441                                  				;  APM events                         ; M036
  2442                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2443                                  
  2444                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2445                                  ;	  it calls Multdos 42 to set up an entry routine address
  2446                                      ;	0   Install status  (reserved)
  2447                                      ;	1   Lookup
  2448                                      ;	2   Insert
  2449                                      ;	3   Delete
  2450                                      ;	4   Purge	    (reserved)
  2451                                  
  2452                                  ;============================================================================
  2453                                  ; FIND.INC (MSDOS 6.0, 1991)
  2454                                  ;============================================================================
  2455                                  ; 17/05/2019 - Retro DOS v4.0
  2456                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2457                                  
  2458                                  ;Break	<find first/next buffer>
  2459                                  
  2460                                  struc find_buf
  2461 00000000 ??                      .drive:	    resb 1		; drive of search
  2462 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2463 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2464 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2465 0000000F ????                    .DirStart:  resw 1		; DirStart
  2466 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2467 00000015 ??                      .attr:	    resb 1		; attribute found
  2468 00000016 ????                    .time:	    resw 1		; time
  2469 00000018 ????                    .date:	    resw 1		; date
  2470 0000001A ????                    .size_l:    resw 1		; low(size)
  2471 0000001C ????                    .size_h:    resw 1		; high(size)
  2472 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2473                                  .size:
  2474                                  endstruc
  2475                                  
  2476                                  ;============================================================================
  2477                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2478                                  ;============================================================================
  2479                                  ; 29/04/2019 - Retro DOS v4.0
  2480                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2481                                  
  2482                                  ;Equates for COUNTRY INFORMATION.
  2483                                  SetCountryInfo	EQU	1	;country info
  2484                                  SetUcase	EQU	2	;uppercase table
  2485                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2486                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2487                                  SetFileList	EQU	5	;valid file character list
  2488                                  SetCollate	EQU	6	;collating sequence
  2489                                  SetDBCS 	EQU	7	;double byte character set
  2490                                  SetALL		EQU	-1	;all the entries
  2491                                  
  2492                                  ;DOS country and code page information table structure.
  2493                                  ;Internally, IBMDOS gives a pointer to this table.
  2494                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2495                                  ;this structure.
  2496                                  
  2497                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2498 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2499 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2500 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2501 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2502 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2503 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2504                                  
  2505 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2506 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2507                                  
  2508 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2509 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2510                                  
  2511 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2512 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2513                                  
  2514                                  ; MSDOS 6.0
  2515 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2516 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2517                                  
  2518 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2519 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2520 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2521 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2522 0000006C ????                    .ccDFormat:		resw 1	;date format
  2523 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2524 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2525 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2526 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2527 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2528 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2529 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2530 0000007D ??                      .ccTFormat:		resb 1	;time format
  2531 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2532 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2533 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2534                                  .size:
  2535                                  endstruc
  2536                                  
  2537                                  ;Ucase table
  2538                                  struc CC_UCASE_TAB
  2539 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2540 00000002 <res 80h>               .ccUcase_data:		resb 128
  2541                                  endstruc
  2542                                  
  2543                                  ;File Ucase table
  2544                                  struc CC_FILE_UCASE_TAB
  2545 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2546 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2547                                  endstruc
  2548                                  
  2549                                  ;File char list
  2550                                  struc CC_FILE_CHAR_TAB
  2551 00000000 ????                    .ccFilechar_leng:	resw 1
  2552 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2553                                  endstruc
  2554                                  
  2555                                  ;collate table
  2556                                  struc CC_COLLATE_TAB
  2557 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2558 00000002 <res 100h>              .ccCollate_data:	resb 256
  2559                                  endstruc
  2560                                  
  2561                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2562                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2563                                  
  2564                                  ; 06/08/2018
  2565                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2566                                  
  2567                                  ;CAPITALIZATION equates
  2568                                  CAP_ONE_CHAR	equ	20H
  2569                                  CAP_STRING	equ	21H
  2570                                  CAP_ASCIIZ	equ	22H
  2571                                  CHECK_YES_NO	equ	23H
  2572                                  UPPER_TABLE	equ	80H
  2573                                  
  2574                                  ;NLS_YES	equ	59H  ; 'Y'
  2575                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2576                                  ;NLS_NO		equ	4EH  ; 'N'	
  2577                                  ;NLS_no2	equ	6EH  ; 'n'	
  2578                                  
  2579                                  ;============================================================================
  2580                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2581                                  ;============================================================================
  2582                                  ; 25/04/2019 - Retro DOS v4.0
  2583                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2584                                  
  2585                                  ;BREAK <Current directory list structure>
  2586                                  
  2587                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2588                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2589                                  ;									   ;
  2590                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2591                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2592                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2593                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2594                                  ; of the disk being changed or if the path must be recracked.		   ;
  2595                                  ;
  2596                                  ;	Some pathnames have special preambles, such as
  2597                                  ;
  2598                                  ;		\\machine\sharename\...
  2599                                  ;	For these pathnames we can't allow ".." processing to back us
  2600                                  ;	up into the special front part of the name.  The CURDIR_END field
  2601                                  ;	holds the address of the seperator character which marks
  2602                                  ;	the split between the special preamble and the regular
  2603                                  ;	path list; ".." processing isn't allowed to back us up past
  2604                                  ;	(i.e., before) CURDIR_END
  2605                                  ;	For the root, it points at the leading /.  For net
  2606                                  ;	assignments it points at the end (nul) of the initial assignment:
  2607                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2608                                  ;	  ^		 ^		     ^
  2609                                  
  2610                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2611                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2612                                  
  2613                                  struc curdir	; curdir_list
  2614 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2615 00000043 ????                    .flags:		resw 1			; various flags
  2616 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2617 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2618 0000004D ????                    .user_word:	resw 1
  2619 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2620                                  ; MSDOS 6.0
  2621 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2622 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2623 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2624                                  .size:
  2625                                  endstruc
  2626                                  
  2627                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2628                                  
  2629                                  %define curdir_netID curdir_ID  ; dword
  2630                                  
  2631                                  ;**	Flag values for CURDIR_FLAGS
  2632                                  
  2633                                  curdir_isnet	EQU	1000000000000000B
  2634                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2635                                  curdir_inuse	EQU	0100000000000000B
  2636                                  curdir_splice	EQU	0010000000000000B
  2637                                  curdir_local	EQU	0001000000000000B
  2638                                  
  2639                                  ;									   ;
  2640                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2641                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2642                                  
  2643                                  ;============================================================================
  2644                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2645                                  ;============================================================================
  2646                                  ; 09/07/2018 - Retro DOS v3.0
  2647                                  
  2648                                  ;BREAK <File Control Block definition>
  2649                                  
  2650                                  ;
  2651                                  ; Field definition for FCBs
  2652                                  ; The FCB has the following structure:
  2653                                  ;
  2654                                  ;	+---------------------------+
  2655                                  ;	|   Drive indicator(byte)   |
  2656                                  ;	+---------------------------+
  2657                                  ;	|    Filename (8 chars)     |
  2658                                  ;	+---------------------------+
  2659                                  ;	|    Extension (3 chars)    |
  2660                                  ;	+---------------------------+
  2661                                  ;	|   Current Extent(word)    |
  2662                                  ;	+---------------------------+
  2663                                  ;	|    Record size (word)     |
  2664                                  ;	+---------------------------+
  2665                                  ;	|    File Size (2 words)    |
  2666                                  ;	+---------------------------+
  2667                                  ;	|	Date of write	    |
  2668                                  ;	+---------------------------+
  2669                                  ;	|	Time of write	    |
  2670                                  ;	+---------------------------+
  2671                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2672                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2673                                  ;									   ;
  2674                                  ;	+---------------------------+
  2675                                  ;	|   8 bytes reserved	    |
  2676                                  ;	+---------------------------+
  2677                                  ;									   ;
  2678                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2679                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2680                                  ;	|    next record number     |
  2681                                  ;	+---------------------------+
  2682                                  ;	|   random record number    |
  2683                                  ;	+---------------------------+
  2684                                  ;
  2685                                  
  2686                                  struc	SYS_FCB
  2687 00000000 ??                      .drive:	resb 1
  2688 00000001 ????????????????        .name:	resb 8
  2689 00000009 ??????                  .ext:	resb 3
  2690 0000000C ????                    .EXTENT: resw 1
  2691 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2692 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2693                                  				; following word
  2694 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2695 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2696 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2697                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2698                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2699                                  ;									   ;
  2700 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2701                                  ;									   ;
  2702                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2703                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2704 00000020 ??                      .NR:	resb 1			; Next record
  2705 00000021 ????????                .RR:	resb 4			; Random record
  2706                                  .size:
  2707                                  endstruc
  2708                                  
  2709                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2710                                  				; NEXT
  2711                                  ; 20/07/2018
  2712                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2713                                  
  2714                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2715                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2716                                  ; NOTE about this byte (fcb_nsl_drive)
  2717                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2718                                  ;	00 means a local file or device with sharing loaded
  2719                                  ;	10 means a remote (network) file
  2720                                  ;	01 means a local file with no sharing loaded
  2721                                  ;	11 means a local device with no sharing loaded
  2722                                  
  2723                                  ; 20/07/2018
  2724                                  
  2725                                  ;
  2726                                  ; Network FCB
  2727                                  ;
  2728                                  
  2729                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2730                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2731                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2732                                  
  2733                                  ;
  2734                                  ; No sharing local file FCB
  2735                                  ;
  2736                                  
  2737                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2738                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2739                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2740                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2741                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2742                                  
  2743                                  ;
  2744                                  ; No sharing local device FCB
  2745                                  ;
  2746                                  
  2747                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2748                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2749                                  
  2750                                  ;
  2751                                  ; Sharing local FCB
  2752                                  ;
  2753                                  
  2754                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2755                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2756                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2757                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2758                                  
  2759                                  ;
  2760                                  ; Bogusness:  the four cases are:
  2761                                  ;
  2762                                  ;   local file	    00
  2763                                  ;   local device    40
  2764                                  ;   local sharing   C0
  2765                                  ;   network	    80
  2766                                  ;
  2767                                  ; Since sharing and network collide, we cannot use a test instruction for
  2768                                  ; deciding whether a network or a share check in involved
  2769                                  ;
  2770                                  FCBDEVICE   EQU 040h
  2771                                  FCBNETWORK  EQU 080h
  2772                                  FCBSHARE    EQU 0C0h
  2773                                  
  2774                                  ; FCBSPECIAL must be able to mask off both net and share
  2775                                  FCBSPECIAL  EQU 080h
  2776                                  FCBMASK     EQU 0C0h
  2777                                  
  2778                                  ;============================================================================
  2779                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2780                                  ;============================================================================
  2781                                  ; 11/07/2018 - Retro DOS v3.0
  2782                                  ; 25/04/2019 - Retro DOS v4.0
  2783                                  
  2784                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2785 00000000 ??                      .dirpos:	resb 1
  2786 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2787                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2788 00000005 ????                    .clusnum:	resw 1
  2789 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2790 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2791                                  .size:
  2792                                  endstruc
  2793                                  
  2794                                  ; 23/07/2018
  2795                                  ;FASTOPEN NAME CACHING Subfunctions
  2796                                  FONC_Look_up	equ	1
  2797                                  FONC_insert	equ	2
  2798                                  FONC_delete	equ	3
  2799                                  FONC_update	equ	4
  2800                                  FONC_purge	equ	5	;reserved for the future use.
  2801                                  FONC_Rename	equ	6	;AN001
  2802                                  
  2803                                  ; 27/07/2018
  2804                                  ;FastOpen Data Structure
  2805                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2806 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2807 00000002 ????????                .name_caching:	resd 1
  2808                                  ; MSDOS 6.0
  2809                                  ;.fatchain_caching: resd 1	;reserved for future use
  2810                                  .size:
  2811                                  endstruc
  2812                                  
  2813                                  ; 27/07/2018
  2814                                  ;Equates used in DOS.
  2815                                  FastOpen_Set	       equ     00000001b
  2816                                  FastOpen_Reset	       equ     11111110b
  2817                                  Lookup_Success	       equ     00000010b
  2818                                  Lookup_Reset	       equ     11111101b
  2819                                  Special_Fill_Set       equ     00000100b
  2820                                  Special_Fill_Reset     equ     11111011b
  2821                                  No_Lookup	       equ     00001000b
  2822                                  Set_For_Search	       equ     00010000b	;DCR 167
  2823                                  
  2824                                  ; 09/08/2018 
  2825                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2826                                  ; Fastxxx equates
  2827                                  FastOpen_ID	   equ	   1
  2828                                  FastSeek_ID	   equ	   2
  2829                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2830                                  
  2831                                  ;Structure definitions
  2832                                  ;
  2833                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2834 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2835 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2836                                  endstruc
  2837                                  
  2838                                  ;============================================================================
  2839                                  ; LOCK.INC, MSDOS 6.0, 1991
  2840                                  ;============================================================================
  2841                                  ; 14/07/2018 - Retro DOS v3.0
  2842                                  
  2843                                  ;**	LOCK.INC - Definitions for Record Locking
  2844                                  
  2845                                  ;**	LOCK functions
  2846                                  
  2847                                  LOCK_ALL	    equ    0
  2848                                  UNLOCK_ALL	    equ    1
  2849                                  LOCK_MUL_RANGE	    equ    2
  2850                                  UNLOCK_MUL_RANGE    equ    3
  2851                                  LOCK_READ	    equ    4
  2852                                  WRITE_UNLOCK	    equ    5
  2853                                  LOCK_ADD	    equ    6
  2854                                  
  2855                                  ;**	Structure for Lock buffer
  2856                                  
  2857                                  struc LockBuf
  2858 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2859 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2860                                  endstruc
  2861                                  
  2862                                  ;============================================================================
  2863                                  ; DPL.ASM, MSDOS 6.0, 1991
  2864                                  ;============================================================================
  2865                                  ; 04/08/2018 - Retro DOS v3.0
  2866                                  
  2867                                  ; (SRVCALL.ASM)
  2868                                  
  2869                                  struc DPL
  2870 00000000 ????                    .AX:	resw	1	; AX register
  2871 00000002 ????                    .BX:	resw	1	; BX register
  2872 00000004 ????                    .CX:	resw	1	; CX register
  2873 00000006 ????                    .DX:	resw	1	; DX register
  2874 00000008 ????                    .SI:	resw	1	; SI register
  2875 0000000A ????                    .DI:	resw	1	; DI register
  2876 0000000C ????                    .DS:	resw	1	; DS register
  2877 0000000E ????                    .ES:	resw	1	; ES register
  2878 00000010 ????                    .rsrvd: resw	1	; Reserved
  2879 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2880 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2881                                  .size:
  2882                                  endstruc
  2883                                   
  2884                                  ;----------------------------------------------------------------------------
  2885                                  ; DOSDATA
  2886                                  ;----------------------------------------------------------------------------
  2887                                  ;============================================================================
  2888                                  ; 24/04/2019 - Retro DOS v4.0
  2889                                  
  2890                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2891                                  		; ((just after resident IO.SYS code&data))
  2892                                  
  2893                                  ;============================================================================
  2894                                  ; WIN386.INC, MSDOS 6.0, 1991
  2895                                  ;============================================================================
  2896                                  ; 24/04/2019 - Retro DOS 4.0
  2897                                  
  2898                                  ;
  2899                                  ;  Symbols and structures relating to WIN386 support.
  2900                                  ;
  2901                                  ;  Used by files in both the DOS and the BIOS.
  2902                                  ;
  2903                                  ;  Created: 7-13-89 by MRW
  2904                                  ;
  2905                                  
  2906                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2907                                  
  2908                                  MultWin386		equ     16h	; Int 2f multiplex number
  2909                                  
  2910                                  Win386_Init		equ	05h	; Win386 initialization
  2911                                  Win386_Exit		equ	06h	; Win386 exit
  2912                                  Win386_Devcall		equ	07h	; Win386 device call out
  2913                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2914                                  
  2915                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2916                                  ; answer call outs from the DOSMGR
  2917                                  
  2918                                  Win386_DOSMGR		equ	15H
  2919                                  
  2920                                  ; The following structures are used to communicate instance data to 
  2921                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2922                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2923                                  
  2924                                  struc Win386_SIS	; Startup Info Structure
  2925 00000000 ????                     .Version:		resb	2	; db 3, 0
  2926 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2927 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2928 0000000A ????????                 .Reference_Data:	resd	1
  2929 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2930                                  endstruc
  2931                                  
  2932                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2933                                  
  2934                                  struc Win386_IIS	; Instance Item Structure
  2935 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2936 00000004 ????                    .Size:			resw	1	; size of an instance item
  2937                                  endstruc
  2938                                  
  2939                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2940                                  
  2941                                  ;Win386 DOSMGR function return values to indicate operation done
  2942                                  
  2943                                  WIN_OP_DONE		equ	0B97Ch	; 
  2944                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2945                                  
  2946                                  ;M021
  2947                                  ; WInoldap callout multiplex number
  2948                                  
  2949                                  WINOLDAP		equ	46h	;
  2950                                  
  2951                                  ;============================================================================
  2952                                  ;----------------------------------------------------------------------------
  2953                                  ; DOSCODE
  2954                                  ;----------------------------------------------------------------------------
  2955                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2956                                  
  2957                                  ;============================================================================
  2958                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2959                                  ;============================================================================
  2960                                  ; 16/07/2018 - Retro DOS 3.0
  2961                                  ;----------------------------------------------------------------------------
  2962                                  ; 24/04/2019 - Retro DOS 4.0
  2963                                  
  2964                                  ; MSDOS 6.0
  2965                                  ;----------------------------------------------------------------------------
  2966                                  ; FILE : ORIGIN.INC
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2969                                  ; is used for ORGing the DOS code.
  2970                                  ;
  2971                                  ; Brief Description of the necessacity of this ORG:
  2972                                  ; -------------------------------------------------
  2973                                  ;
  2974                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2975                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2976                                  ; This means programs running out off the HMA must use non-zero offset base
  2977                                  ; addresses. It also means that if we're running multiple programs from the
  2978                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2979                                  ; HMA segments that precede it.
  2980                                  ; 
  2981                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2982                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2983                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2984                                  ; selecting segment values between f124h and ffffh it could be located 
  2985                                  ; anywhere in the HMA. The problem with this is that programs with such 
  2986                                  ; high ORGs would not be able to run in low RAM.
  2987                                  ;
  2988                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  2989                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  2990                                  ; the following solution has been implemented:
  2991                                  ;
  2992                                  ; The Bios Code segment will have a very small offset and run at the very
  2993                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  2994                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  2995                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  2996                                  ; possible physical address at which DOS code will run, while still providing
  2997                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  2998                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  2999                                  ; mostly true.
  3000                                  ;
  3001                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3002                                  ; putting this value after the first jmp instruction in the DOS code in
  3003                                  ; mshead.asm. 
  3004                                  ;
  3005                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3006                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3007                                  ;
  3008                                  ; Revision History:
  3009                                  ;
  3010                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3011                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3012                                  ;
  3013                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3014                                  ; A utility called getsize will obtain the corresponding values from msdos
  3015                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3016                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3017                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3018                                  ; dependant on that.				  --- Apr 3 '90
  3019                                  ;
  3020                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3021                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3022                                  ; so the offset will not need to be included at the beginning of the code
  3023                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3024                                  ; at offset zero within the segment.
  3025                                  ; 
  3026                                  ;
  3027                                  ;--------------------------------------------------------------------------
  3028                                  
  3029                                  BIODATASTART	EQU	00700h
  3030                                  ;include	bdsize.inc	; this sets the values:
  3031                                  				;	BIODATASIZ
  3032                                  				;	BIOCODESIZ
  3033                                  				;	DOSDATASIZ
  3034                                  
  3035                                  ; 05/12/2022
  3036                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3037                                  			; 0900h for MSDOS 5.0 IO.SYS
  3038                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3039                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3040                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3041                                  			; 1370h for MSDOS 5.0 IO.SYS
  3042                                  ;ifndef ROMDOS
  3043                                  ;
  3044                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3045                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3046                                  ;
  3047                                  ;else
  3048                                  ;
  3049                                  ;BYTSTART	EQU	0
  3050                                  ;PARASTART	EQU	0
  3051                                  ;
  3052                                  ;endif ; ROMDOS
  3053                                  
  3054                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3055                                  ; -----------------------------------------------------------------
  3056                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3057                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3058                                  ;DOSDATASIZE equ MSDAT001E
  3059                                  ; 05/12/2022
  3060                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3061                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3062                                  			    ; of DOSDATA (in low memory) while
  3063                                  			    ; dos/kernel code starts just after 
  3064                                  			    ; this data block ((org = DOSDATASIZE))
  3065                                  			    ; (in low memory or in HMA)	
  3066                                  ; -----------------------------------------------------------------
  3067                                  
  3068                                  ; 04/11/2022	
  3069                                  ; -----------------------------------------------------------------	
  3070                                  ; NOTE:
  3071                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3072                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3073                                  ; -----------------------------------------------------------------
  3074                                  
  3075                                  ; ----------------------------------------------------------------------------
  3076                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3077                                  ; ----------------------------------------------------------------------------
  3078                                  
  3079                                  segment .code vstart=3DD0h ; 06/12/2022
  3080                                  								
  3081                                  ; ============================================================================
  3082                                  
  3083                                  
  3084                                  ;[ORG 3DE0h]
  3085                                  
  3086                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3087                                  
  3088                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3089                                  
  3090                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3091                                  	PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3092                                  			    ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3093                                  	[ORG PARASTART]	
  3094                                  
  3095                                  _$STARTCODE:
  3096                                  
  3097                                  ;PARASTART:
  3098 00000000 E90275                          JMP     DOSINIT
  3099                                  
  3100                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3101                                  	; 04/11/2022
  3102 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3103                                  
  3104                                  BioDataSeg:
  3105 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3106                                  
  3107                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3108                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3109                                  ; allows getting the DOS data segment without going through the 
  3110                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3111                                  
  3112                                  DosDSeg:
  3113 00000007 0000                    	dw	0
  3114                                  	
  3115                                  ;============================================================================
  3116                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3117                                  ;============================================================================
  3118                                  ; 16/07/2018 - Retro DOS 3.0
  3119                                  ; 29/04/2019 - Retro DOS 4.0
  3120                                  
  3121                                  	; (MSDOS version)
  3122                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3123                                  	;db	6
  3124                                  	;db	20
  3125                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3126                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3127                                  	;db	5
  3128                                  	;db	0	
  3129                                  
  3130                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3131                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3132 00000009 05                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3133 0000000A 00                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3134                                  
  3135                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3136                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3137                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3138                                  
  3139                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3140                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3141                                  ;
  3142                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3143                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3144                                  
  3145                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3146                                  ; those error codes which are "allowed" for each system call. If the error
  3147                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3148                                  ; is to return the "real" error via Extended error, and one of the allowed
  3149                                  ; errors on the actual call.
  3150                                  ;
  3151                                  ; The table is organized as follows:
  3152                                  ;
  3153                                  ;    Each entry in the table is of variable size, but the first
  3154                                  ;       two bytes are always:
  3155                                  ;
  3156                                  ;       Call#,Cnt of bytes following this byte
  3157                                  ;
  3158                                  ; EXAMPLE:
  3159                                  ;       Call 61 (OPEN)
  3160                                  ;
  3161                                  ;       DB      61,5,12,3,2,4,5
  3162                                  ;
  3163                                  ;       61 is the AH INT 21 call value for OPEN.
  3164                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3165                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3166                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3167                                  ;       this case 5).  The last value will be the one returned on the call if
  3168                                  ;       the "real" error is not one of the allowed ones.
  3169                                  ;
  3170                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3171                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3172                                  ;   call, so set up an Extended error and leave the current error code alone.
  3173                                  ;
  3174                                  ; The table is terminated by a call value of 0FFh
  3175                                  
  3176                                  ;PUBLIC I21_MAP_E_TAB
  3177                                  	; 10/08/2018
  3178                                  
  3179                                  ; 29/04/2019
  3180                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3181                                  ; 04/11/2022
  3182                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3183                                  
  3184                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3185 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3186 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3187 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3188 00000018 0205                        DB          error_file_not_found,error_access_denied
  3189 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3190 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3191 00000022 04                          DB          error_too_many_open_files
  3192 00000023 05                          DB          error_access_denied
  3193                                      ; MSDOS 6.0
  3194 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3195 00000029 04                          DB          error_too_many_open_files
  3196 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3197                                      ; MSDOS 3.3
  3198                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3199                                      ;DB		error_too_many_open_files,error_access_denied
  3200 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3201 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3202 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3203 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3204 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3205 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3206 00000045 05                          DB          error_access_denied
  3207 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3208 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3209 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3210 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3211                                      ; MSDOS 6.0	
  3212 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3213                                      ; MSDOS 3.3	
  3214                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3215 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3216 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3217 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3218 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3219 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3220 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3221 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3222 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3223                                      ; MSDOS 6.0
  3224 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3225 0000007D 1005                        DB		error_current_directory,error_access_denied
  3226                                      ; MSDOS 3.3
  3227                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3228                                      ;DB		error_access_denied
  3229                                      ; MSDOS 6.0	
  3230 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3231 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3232                                      ; MSDOS 3.3	
  3233                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3234 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3235 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3236 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3237 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3238 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3239 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3240 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3241 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3242 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3243 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3244 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3245 000000AA 01                          DB              error_invalid_function
  3246                                      ; MSDOS 6.0		
  3247 000000AB 6C0A                        DB	ExtOpen,10
  3248 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3249 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3250 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3251 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3252 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3253 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3254 000000BD FF                          DB  0FFh
  3255                                  
  3256                                  ;19/09/2023
  3257                                  ;22/12/2022
  3258                                  ;04/11/2022	
  3259                                  ;29/04/2019 - Retro DOS v4.0
  3260                                  ;============================================================================
  3261                                  ; 	Retro DOS v4.0
  3262                                  ;============================================================================
  3263 000000BE 00                      	db 	0
  3264                                  RETRODOSMSG:
  3265 000000BF 0D0A                    	db	13,10
  3266                                  	;;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3267                                  	;;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3268                                  	;;db	"Retro DOS v4.1 by Erdogan Tan [2022]"	; 28/12/2022
  3269                                  	;db	"Retro DOS v4.1 by Erdogan Tan [2023]"
  3270 000000C1 526574726F20444F53-     	db	"Retro DOS v4.1 by Erdogan Tan [2024]"	; 05/01/2024
  3270 000000CA 2076342E3120627920-
  3270 000000D3 4572646F67616E2054-
  3270 000000DC 616E205B323032345D 
  3271 000000E5 0D0A2400                	db	13,10,"$", 0 
  3272                                  
  3273                                  ;============================================================================
  3274                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3275                                  ;============================================================================
  3276                                  ; 11/07/2018 - Retro DOS v3.0
  3277                                  
  3278                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3279 000000E9 90                      align 2
  3280                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3281                                  
  3282                                  ; Standard Functions
  3283                                  ;DISPATCH  LABEL WORD
  3284                                  DISPATCH:
  3285                                  	; 16/07/2018 - Retro DOS v3.0
  3286                                  	; (MSDOS 3.3)
  3287                                  
  3288                                  ; 29/04/2019
  3289                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3290                                  
  3291                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3292                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3293                                  
  3294 000000EA [9C60]                          short_addr  _$ABORT			    ;  0      0
  3295 000000EC [2C16]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3296 000000EE [3516]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3297 000000F0 [E716]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3298 000000F2 [0217]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3299 000000F4 [0817]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3300 000000F6 [7615]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3301 000000F8 [A215]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3302 000000FA [5113]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3303 000000FC [A913]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3304 000000FE [B513]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3305 00000100 [1C17]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3306 00000102 [2617]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3307 00000104 [7E0F]                          short_addr  _$DISK_RESET		    ; 13      D
  3308 00000106 [650E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3309 00000108 [EA1D]                          short_addr  _$FCB_OPEN			    ; 15      F
  3310 0000010A [C517]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3311 0000010C [D91E]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3312 0000010E [1F1F]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3313 00000110 [6B17]                          short_addr  _$FCB_DELETE		    ; 19     13
  3314 00000112 [411C]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3315 00000114 [451C]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3316 00000116 [C91E]                          short_addr  _$FCB_CREATE		    ; 22     16
  3317 00000118 [3118]                          short_addr  _$FCB_RENAME		    ; 23     17
  3318                                  	; 16/07/2018
  3319                                          ;short_addr _CPMFUNC			    ; 24     18	
  3320 0000011A [5106]                          short_addr  NO_OP			    ; 24     18
  3321 0000011C [600E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3322 0000011E [550E]                          short_addr  _$SET_DMA			    ; 26     1A
  3323                                  
  3324                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3325                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3326                                  ;                                                                          ;
  3327 00000120 [0D0F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3328 00000122 [0F0F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3329                                  ;                                                                          ;
  3330                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3331                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3332                                  
  3333                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3334                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3335                                  
  3336                                  ; 08/07/2018 - Retro DOS v3.0
  3337                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3338                                  
  3339 00000124 [5106]                  	short_addr  NO_OP			    ; 29     1D
  3340 00000126 [5106]                  	short_addr  NO_OP			    ; 30     1E
  3341                                  
  3342                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3343                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3344                                  ;                                                                          ;
  3345 00000128 [4E0F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3346                                  ;                                                                          ;
  3347                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3348                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3349                                          ;short_addr _CPMFUNC			    ; 32     20
  3350                                  
  3351                                  ; 08/07/2018 - Retro DOS v3.0
  3352                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3353                                  
  3354 0000012A [5106]                  	short_addr  NO_OP			    ; 32     20
  3355                                  
  3356 0000012C [491C]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3357 0000012E [4D1C]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3358 00000130 [7D17]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3359 00000132 [5317]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3360                                  
  3361                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3362                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3363                                  
  3364                                  ; Extended Functions
  3365 00000134 [860E]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3367                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3368                                  ;                                                                          ;
  3369 00000136 [8B10]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3370                                  ;                                                                          ;
  3371                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3372                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3373 00000138 [3D1C]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3374 0000013A [391C]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3375 0000013C [020F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3376 0000013E [5D0A]                          short_addr  _$GET_DATE                      ; 42     2A
  3377 00000140 [7A0A]                          short_addr  _$SET_DATE                      ; 43     2B
  3378 00000142 [990A]                          short_addr  _$GET_TIME                      ; 44     2C
  3379 00000144 [AA0A]                          short_addr  _$SET_TIME                      ; 45     2D
  3380 00000146 [460C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3381                                  
  3382                                  ; Extended functionality group
  3383 00000148 [420E]                          short_addr  _$GET_DMA                       ; 47     2F
  3384 0000014A [1F0C]                          short_addr  _$GET_VERSION                   ; 48     30
  3385 0000014C [4060]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3386                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3387                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3388                                  ;                                                                          ;
  3389 0000014E [500F]                          short_addr  _$GET_DPB			    ; 50     32
  3390                                  ;                                                                          ;
  3391                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3392                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3393 00000150 [6602]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3394 00000152 [380F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3395 00000154 [770E]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3396 00000156 [1F0E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3397 00000158 [B30E]                          short_addr  _$CHAR_OPER                     ; 55     37
  3398 0000015A [4D0C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3399                                  ; XENIX CALLS
  3400                                  ;   Directory Group
  3401 0000015C [A521]                          short_addr  _$MKDIR			    ; 57     39
  3402 0000015E [F120]                          short_addr  _$RMDIR			    ; 58     3A
  3403 00000160 [2C21]                          short_addr  _$CHDIR			    ; 59     3B
  3404                                  ;   File Group
  3405 00000162 [446E]                          short_addr  _$CREAT			    ; 60     3C
  3406 00000164 [706D]                          short_addr  _$OPEN			    ; 61     3D
  3407 00000166 [B265]                          short_addr  _$CLOSE		 	    ; 62     3E
  3408 00000168 [BB66]                          short_addr  _$READ			    ; 63     3F
  3409 0000016A [1867]                          short_addr  _$WRITE			    ; 64     40
  3410 0000016C [946E]                          short_addr  _$UNLINK			    ; 65     41
  3411 0000016E [1D67]                          short_addr  _$LSEEK			    ; 66     42
  3412 00000170 [516E]                          short_addr  _$CHMOD			    ; 67     43
  3413 00000172 [0622]                          short_addr  _$IOCTL			    ; 68     44
  3414 00000174 [D267]                          short_addr  _$DUP			    ; 69     45
  3415 00000176 [F067]                          short_addr  _$DUP2			    ; 70     46
  3416 00000178 [8D20]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3417                                  ;   Memory Group
  3418 0000017A [3261]                          short_addr  _$ALLOC			    ; 72     48
  3419 0000017C [AC62]                          short_addr  _$DEALLOC                       ; 73     49
  3420 0000017E [8862]                          short_addr  _$SETBLOCK                      ; 74     4A
  3421                                  ;   Process Group
  3422 00000180 [265A]                          short_addr  _$EXEC			    ; 75     4B
  3423 00000182 [7860]                          short_addr  _$EXIT			    ; 76     4C
  3424 00000184 [1C5A]                          short_addr  _$WAIT			    ; 77     4D
  3425 00000186 [D71F]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3426                                  ;   Special Group
  3427 00000188 [2B20]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3428                                  ; SPECIAL SYSTEM GROUP
  3429                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3430                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3431                                  ;                                                                          ;
  3432 0000018A [B802]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3433 0000018C [C402]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3434 0000018E [440F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3435 00000190 [B30F]                          short_addr  _$SETDPB			    ; 83     53
  3436                                  ;                                                                          ;
  3437                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3438                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3439 00000192 [410C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3440                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3441                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3442                                  ;                                                                          ;
  3443 00000194 [7A10]                          short_addr  _$DUP_PDB                       ; 85     55
  3444                                  ;                                                                          ;
  3445                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3446                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3447 00000196 [BA6E]                          short_addr  _$RENAME			    ; 86     56
  3448 00000198 [8467]                          short_addr  _$FILE_TIMES                    ; 87     57
  3449 0000019A [E162]                          short_addr  _$ALLOCOPER                     ; 88     58
  3450                                  
  3451                                  ; 08/07/2018 - Retro DOS v3.0
  3452                                  ; -------------------------------------------------------------------------;
  3453                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3454                                  
  3455                                  ; Network extention system calls
  3456 0000019C [C70E]                          short_addr  _$GetExtendedError              ; 89     59
  3457 0000019E [406F]                          short_addr  _$CreateTempFile                ; 90     5A
  3458 000001A0 [286F]                          short_addr  _$CreateNewFile                 ; 91     5B
  3459 000001A2 [F270]                          short_addr  _$LockOper                      ; 92     5C
  3460 000001A4 [C563]                          short_addr  _$ServerCall                    ; 93     5D
  3461 000001A6 [BA68]                          short_addr  _$UserOper                      ; 94     5E
  3462 000001A8 [1F68]                          short_addr  _$AssignOper                    ; 95     5F
  3463 000001AA [0B6D]                          short_addr  _$NameTrans                     ; 96     60
  3464 000001AC [5106]                  	short_addr  NO_OP			    ; 97     61
  3465 000001AE [C402]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3466                                  ; the next call is reserved for hangool sys call
  3467                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3468 000001B0 [E70E]                  	short_addr  _$ECS_Call			    ; 99     63
  3469                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3470                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3471                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3472                                  ;                                                                          ;
  3473 000001B2 [D002]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3474                                  ;                                                                          ;
  3475                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3476                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3477 000001B4 [D00C]                          short_addr  _$GetExtCntry                   ; 101    65
  3478 000001B6 [CD0D]                          short_addr  _$GetSetCdPg                    ; 102    66
  3479 000001B8 [FD65]                          short_addr  _$ExtHandle                     ; 103    67
  3480 000001BA [E565]                          short_addr  _$COMMIT                        ; 104    68
  3481                                  
  3482                                  ; 08/07/2018
  3483                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3484                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3485                                  
  3486                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3487 000001BC [7D11]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3488 000001BE [E565]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3489 000001C0 [5106]                  	short_addr  NO_OP                           ; 107    6B   
  3490                                  						    ; IFS_IOCTL no longer 
  3491                                  						    ; supported
  3492 000001C2 [DA6F]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3493                                  
  3494                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3495                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3496                                  ;                                                                          ;
  3497                                  ;ifdef ROMEXEC
  3498                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3499                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3500                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3501                                  ;endif
  3502                                  ;                                                                          ;
  3503                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3504                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3505                                  
  3506                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3507                                  
  3508                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3509                                  
  3510                                  ; 08/07/2018 - Retro DOS v3.0
  3511                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3512                                  
  3513                                  ;	If 	Installed
  3514                                  
  3515                                  align 2
  3516                                  
  3517                                  ;PUBLIC FOO
  3518                                  
  3519                                  FOO:	; LABEL WORD
  3520 000001C4 [0E07]                          short_addr  Leave2F
  3521                                  
  3522 000001C6 [C801]                  DTab:	DW  DOSTable
  3523                                  
  3524                                  	;PUBLIC FOO,DTAB
  3525                                  
  3526                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3527                                  
  3528                                  ; 29/04/2019
  3529                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3530                                  
  3531                                  
  3532                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3533                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3534                                         
  3535                                  DOSTable:  ; LABEL  WORD
  3536 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3537 000001C9 [3309]                          short_addr  DOSInstall          ;   0 install check
  3538 000001CB [922E]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3539 000001CD [A80E]                          short_addr  RECSET              ;   2   RECSET
  3540 000001CF [2D09]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3541 000001D1 [604F]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3542 000001D3 [3716]                          short_addr  OUTT                ;   5   OUT
  3543 000001D5 [3252]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3544 000001D7 [A957]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3545 000001D9 [862F]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3546 000001DB [6E59]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3547 000001DD [9F71]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3548 000001DF [DF2B]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3549 000001E1 [C92B]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3550 000001E3 [E50A]                          short_addr  DATE16              ;   13  DATE16
  3551 000001E5 [E911]                          short_addr  Idle		;   14      empty slot
  3552 000001E7 [A257]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3553 000001E9 [E911]                          short_addr  Idle		;   16      empty slot
  3554 000001EB [B611]                          short_addr  StrCpy              ;   17  StrCpy
  3555 000001ED [CE11]                          short_addr  StrLen              ;   18  StrLen
  3556 000001EF [0B4F]                          short_addr  UCase		;   19  UCase
  3557 000001F1 [E657]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3558 000001F3 [4559]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3559 000001F5 [2E65]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3560 000001F7 [7F69]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3561 000001F9 [8504]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3562 000001FB [2A69]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3563 000001FD [306D]                          short_addr  DriveFromText       ;   26  DriveFromText
  3564 000001FF [860B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3565 00000201 [150C]                          short_addr  DSUM                ;   28  DSUM
  3566 00000203 [7C0B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3567 00000205 [9411]                          short_addr  StrCmp              ;   30  StrCmp
  3568 00000207 [6D68]                          short_addr  InitCDS             ;   31  initcds
  3569 00000209 [FB64]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3570 0000020B [0B6D]                          short_addr  _$NameTrans		;   33  $NameTrans
  3571 0000020D [7806]                          short_addr  CAL_LK              ;   34  CAL_LK
  3572 0000020F [B240]                          short_addr  DEVNAME             ;   35  DEVNAME
  3573 00000211 [E911]                          short_addr  Idle                ;   36  Idle
  3574 00000213 [DC11]                          short_addr  DStrLen             ;   37  DStrLen
  3575 00000215 [8B12]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3576 00000217 [B265]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3577 00000219 [9112]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3578 0000021B [BB66]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3579 0000021D [4D12]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3580 0000021F [CE12]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3581 00000221 [BD12]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3582 00000223 [E212]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3583                                          
  3584                                  	; 29/04/2019 - Retro DOS v4.0
  3585 00000225 [E612]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3586                                  
  3587 00000227 [5106]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3588                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3589                                  
  3590                                  DOSTableEnd:  ; LABEL BYTE
  3591                                  
  3592                                  	;ENDIF
  3593                                  
  3594                                  ; ----------------------------------------------------------------------------
  3595                                  ; BREAK   <Copyright notice and version>
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  
  3598                                  ;CODSTRT EQU	$
  3599                                  
  3600                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3601                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3602                                  
  3603                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3604                                  ;       module. The reason is so that the data alignments are the same in
  3605                                  ;       IBM-DOS and MS-DOS up through header.
  3606                                  
  3607                                  	;PUBLIC	HEADER
  3608                                  
  3609                                  HEADER:	; LABEL	BYTE
  3610                                          ;IF	DEBUG
  3611                                          ;DB	13,10,"Debugging DOS version "
  3612                                          ;DB	MAJOR_VERSION + "0"
  3613                                          ;DB	"."
  3614                                          ;DB	(MINOR_VERSION / 10) + "0"
  3615                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3616                                          ;ENDIF
  3617                                  
  3618                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3619                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3620                                  %if 0
  3621                                          ;IF	NOT IBM
  3622                                          DB	13,10,"MS-DOS version "
  3623                                          DB	MAJOR_VERSION + "0"
  3624                                          DB	"."
  3625                                          DB	(MINOR_VERSION / 10) + "0"
  3626                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3627                                          DB	(MINOR_VERSION % 10) + "0"
  3628                                  
  3629                                          ;IF	HIGHMEM
  3630                                          ;DB	"H"
  3631                                          ;ENDIF
  3632                                  
  3633                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3634                                  	; 30/04/2019 - Retro DOS v4.0
  3635                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3636                                  
  3637                                  	;ENDIF
  3638                                  
  3639                                  %endif
  3640                                  
  3641                                  ;IF DEBUG
  3642                                  ;	DB	13,10,"$"
  3643                                  ;ENDIF
  3644                                  
  3645                                  ;include copyrigh.inc
  3646                                  
  3647                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3648                                  
  3649                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3650                                  	;DB	"Licensed Material - Property of Microsoft "
  3651                                  	;DB	"All rights reserved "
  3652                                  
  3653                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3654                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3655                                  
  3656                                  ; 28/12/2022 - Retro DOS v4.1
  3657                                  %if 0
  3658                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3659                                  ms_copyright:
  3660                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3661                                  	db	'Licensed Material - Property of Microsoft '
  3662                                  	db	'All rights reserved '
  3663                                  
  3664                                  %endif
  3665                                  	; 28/12/2022 - Retro DOS v4.1
  3666                                  ms_copyright:
  3667 00000229 0D0A4D5320444F5320-       	db	13,10,"MS DOS Version 5.0"
  3667 00000232 56657273696F6E2035-
  3667 0000023B 2E30               
  3668 0000023D 0D0A436F7079726967-     	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
  3668 00000246 687420313938312D31-
  3668 0000024F 393931204D6963726F-
  3668 00000258 736F667420436F7270-
  3668 00000261 2E0D0A2400         
  3669                                  
  3670                                  ;============================================================================
  3671                                  ; MSCODE.ASM
  3672                                  ;============================================================================
  3673                                  
  3674                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3675                                  ; 03/03/2018
  3676                                  
  3677                                  ;
  3678                                  ; MSCODE.ASM -- MSDOS code
  3679                                  ;
  3680                                  
  3681                                  ;INCLUDE DOSSEG.ASM
  3682                                  ;INCLUDE STDSW.ASM
  3683                                  
  3684                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3685                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3686                                  
  3687                                  ;.xcref
  3688                                  ;INCLUDE DOSSYM.ASM
  3689                                  ;INCLUDE DEVSYM.ASM
  3690                                  ;.cref
  3691                                  ;.list
  3692                                  
  3693                                  ;IFNDEF  KANJI
  3694                                  ;KANJI   EQU     0       ; FALSE
  3695                                  ;ENDIF
  3696                                  
  3697                                  ;IFNDEF  IBM
  3698                                  ;IBM     EQU     0
  3699                                  ;ENDIF
  3700                                  
  3701                                  ;IFNDEF  HIGHMEM
  3702                                  ;HIGHMEM  EQU     0
  3703                                  ;ENDIF
  3704                                  
  3705                                          ;i_need  USER_SP,WORD
  3706                                          ;i_need  USER_SS,WORD
  3707                                          ;i_need  SAVEDS,WORD
  3708                                          ;i_need  SAVEBX,WORD
  3709                                          ;i_need  INDOS,BYTE
  3710                                          ;i_need  NSP,WORD
  3711                                          ;i_need  NSS,WORD
  3712                                          ;i_need  CURRENTPDB,WORD
  3713                                          ;i_need  AUXSTACK,BYTE
  3714                                          ;i_need  CONSWAP,BYTE
  3715                                          ;i_need  IDLEINT,BYTE
  3716                                          ;i_need  NOSETDIR,BYTE
  3717                                          ;i_need  ERRORMODE,BYTE
  3718                                          ;i_need  IOSTACK,BYTE
  3719                                          ;i_need  WPERR,BYTE
  3720                                          ;i_need  DSKSTACK,BYTE
  3721                                          ;i_need  CNTCFLAG,BYTE
  3722                                          ;i_need  LEAVEADDR,WORD
  3723                                          ;i_need  NULLDEVPT,DWORD
  3724                                  
  3725                                          ;IF NOT IBM
  3726                                          ;i_need  OEM_HANDLER,DWORD
  3727                                          ;ENDIF
  3728                                  
  3729                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3730                                  
  3731                                  ;============================================================================
  3732                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3733                                  ;============================================================================
  3734                                  ; 11/07/2018 - Retro DOS v3.0
  3735                                  ; 01/05/2019 - Retro DOS v4.0
  3736                                  
  3737                                  ; DosCode SEGMENT
  3738                                  
  3739                                  ; ==========================================================================
  3740                                  ;
  3741                                  ; $Set_CTRL_C_Trapping
  3742                                  ;
  3743                                  ; Function:
  3744                                  ;	Enable disable ^C checking in dispatcher
  3745                                  ;
  3746                                  ; Inputs:
  3747                                  ;		AL = 0 read ^C status
  3748                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3749                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3750                                  ;		AL = 5 get DOS boot drive
  3751                                  ;		AL = 6 Get version number
  3752                                  ;			RETURNS:
  3753                                  ;				BH = Minor version number
  3754                                  ;				BL = Major version number
  3755                                  ;				DL = DOS internal revision
  3756                                  ;				DH = DOS type flags
  3757                                  ;					Bit 3 	- DOS in ROM
  3758                                  ;					Bit 4 	- DOS in HMA
  3759                                  ;					Bit 0-2, 5-7 - Reserved
  3760                                  ; Outputs:
  3761                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3762                                  ;
  3763                                  ; History:
  3764                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3765                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3766                                  ; ==========================================================================
  3767                                  
  3768                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3769                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3770                                  
  3771                                  	; 01/01/2024
  3772                                  	
  3773                                  _$SET_CTRL_C_TRAPPING:
  3774                                  	; 01/05/2019 - Retro DOS v4.0
  3775                                  
  3776 00000266 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3777 00000268 7603                    	jbe	short scct_1		; If yes continue processing
  3778                                  
  3779 0000026A B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3780 0000026C CF                      	iret
  3781                                  scct_1:
  3782 0000026D 1E                      	push	DS
  3783                                  
  3784                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3785 0000026E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3786                                  	
  3787 00000273 50                      	push	AX			; DL only register that can change
  3788 00000274 56                      	push	SI
  3789                                  
  3790 00000275 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3791 00000278 30E4                    	xor	AH,AH			; Clear high byte of AX
  3792 0000027A 09C0                    	or	AX,AX			; Check for subfunction 0
  3793 0000027C 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3794                                  
  3795 0000027E 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3796 00000280 EB30                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3797                                  scct_2:
  3798 00000282 48                      	dec	AX			; Now dec AX and see if it was 1
  3799 00000283 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3800                                  
  3801 00000285 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3802 00000288 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3803 0000028A EB26                    	jmp	SHORT scct_9s		; Jmp to exit
  3804                                  scct_3:
  3805 0000028C 48                      	dec	AX			; Dec AX again to see if it was 2
  3806 0000028D 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3807                                  
  3808 0000028F 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3809 00000292 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3810 00000294 EB1C                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3811                                  scct_4:
  3812 00000296 3C03                    	cmp	al,3 ; 01/01/2024	
  3813                                  	;cmp	AX,3 			; Test for 5 after it was dec twice
  3814 00000298 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3815 0000029A 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3816 0000029E EB12                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3817                                  scct_5:
  3818 000002A0 3C04                    	cmp	al,4 ; 01/01/2024
  3819                                  	;cmp	AX,4 			; Test for 6 after it was dec twice
  3820 000002A2 750E                    	jne	short scct_9s		; If not equal then not get version
  3821                                  	
  3822                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3823                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)
  3824 000002A4 BB0500                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3825                                  	
  3826                                  	;mov	dl,0
  3827                                  	;mov	DL,DOSREVNM ; 0
  3828                                  
  3829                                  	;xor	dh,dh			; assume vanilla DOS
  3830                                  	; 01/01/2024
  3831 000002A7 BA0000                  	mov	dx,0
  3832 000002AA 3836[1112]              	cmp	byte [DosHasHMA],dh ; 0
  3833                                  	;cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3834                                  	;je	short @F
  3835 000002AE 7402                    	je	short scct_6
  3836                                  	; 01/01/2024
  3837 000002B0 B610                    	mov	dh,10h
  3838                                  	;or	dh,10h
  3839                                  	;;or	DH,DOSINHMA ; 10h
  3840                                  ;@@:
  3841                                  scct_6:
  3842                                  
  3843                                  ;ifdef ROMDOS
  3844                                  ;	or	DH,DOSINROM ; 08h
  3845                                  ;endif ; ROMDOS
  3846                                  
  3847                                  scct_9s:
  3848 000002B2 5E                      	pop	SI
  3849 000002B3 58                      	pop	AX
  3850 000002B4 1F                      	pop	DS
  3851                                  scct_9f:
  3852 000002B5 CF                      	iret
  3853                                  
  3854                                  SetCtrlShortEntry:			; This allows a conditional entry
  3855                                  					; from main dispatch code
  3856 000002B6 EBAE                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3857                                  
  3858                                  ; ==========================================================================
  3859                                  ;									   
  3860                                  ; The following two routines are dispatched to directly with ints disabled
  3861                                  ; immediately after the int 21h entry.	no DIS state is set.
  3862                                  ;
  3863                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3864                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3865                                  ;
  3866                                  ; ==========================================================================
  3867                                  
  3868                                  _$SET_CURRENT_PDB:
  3869 000002B8 1E                      	push	DS
  3870                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3871 000002B9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3872 000002BE 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3873 000002C2 1F                      	pop	DS
  3874 000002C3 CF                      	iret
  3875                                  
  3876                                  ; ==========================================================================
  3877                                  ;
  3878                                  ; $get_current_PDB returns in BX the current process
  3879                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3880                                  ;
  3881                                  ; ==========================================================================
  3882                                  
  3883                                  _$GET_CURRENT_PDB:
  3884 000002C4 1E                      	push	DS
  3885                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3886 000002C5 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3887 000002CA 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3888 000002CE 1F                      	pop	DS
  3889 000002CF CF                      	iret
  3890                                  
  3891                                  ; ==========================================================================
  3892                                  ;
  3893                                  ; Sets the Printer Flag to whatever is in AL.
  3894                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3895                                  ;
  3896                                  ; ==========================================================================
  3897                                  
  3898                                  _$SET_PRINTER_FLAG:
  3899 000002D0 1E                      	push	ds
  3900                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3901 000002D1 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3902 000002D6 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3903 000002D9 1F                      	pop	ds
  3904 000002DA CF                      	iret
  3905                                  
  3906                                  ; 01/05/2019 - Retro DOS v4.0
  3907                                  ; 08/07/2018 - Retro DOS v3.0
  3908                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3909                                  
  3910                                  ; ----------------------------------------------------------------------------
  3911                                  ; BREAK   <System call entry points and dispatcher>
  3912                                  ; ----------------------------------------------------------------------------
  3913                                  
  3914                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3915                                  
  3916                                  ; ==========================================================================
  3917                                  ;
  3918                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3919                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3920                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3921                                  ;
  3922                                  ; ==========================================================================
  3923                                  
  3924                                  SYSTEM_CALL:    ; PROC NEAR
  3925                                  
  3926                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3927                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3928                                  
  3929                                  ;entry	QUIT				
  3930                                  QUIT:				; INT 20H entry point	
  3931                                  	;MOV	AH,0
  3932 000002DB 30E4                    	xor	ah,ah ; 08/07/2018
  3933 000002DD EB36                    	JMP     SHORT SAVREGS
  3934                                  
  3935                                  ; ---------------------------------------------------------------------------
  3936                                  
  3937                                  	; The system call in AH is out of the range that we know how
  3938                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3939                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3940                                  	; error as this may break some programs compatability.
  3941                                  
  3942                                  BADCALL:
  3943                                          ;MOV	AL,0
  3944 000002DF 30C0                    	xor	al,al ; 08/07/2018
  3945                                  IRETT:	; 06/05/2019
  3946                                  _IRET:
  3947 000002E1 CF                              IRET
  3948                                  
  3949                                  ; ---------------------------------------------------------------------------
  3950                                  
  3951                                  ; 01/05/2019 - Retro DOS v4.0
  3952                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3953                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3954                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3955                                  
  3956                                  	; An alternative method of entering the system is to perform a
  3957                                  	; CALL 5 in the program segment prefix with the contents of CL
  3958                                  	; indicating what system call the user would like. A subset of
  3959                                  	; the possible system calls is allowed here only the
  3960                                  	; CPM-compatible calls may get dispatched.
  3961                                  
  3962                                  		; System call entry point and dispatcher
  3963                                  CALL_ENTRY:
  3964 000002E2 1E                      	push	DS
  3965                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3966 000002E3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3967 000002E8 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  3968                                  
  3969 000002EC 58                              POP     AX                      ; IP from the long call at 5
  3970 000002ED 58                              POP     AX                      ; Segment from the long call at 5
  3971 000002EE 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  3972                                  
  3973                                  		; Re-order the stack to simulate an interrupt 21.
  3974                                  
  3975 000002F2 9C                      	PUSHF				; Start re-ordering the stack
  3976 000002F3 FA                      	CLI
  3977 000002F4 50                              PUSH    AX                      ; Save segment
  3978 000002F5 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  3979                                  	; 04/11/2022
  3980                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  3981                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  3982 000002F9 FF36[EC05]              	push	word [SAVEDS]
  3983 000002FD 1F                      	pop	ds
  3984                                  	;
  3985                                  	;cmp	cl,36
  3986 000002FE 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  3987 00000301 77DC                            JA      SHORT BADCALL
  3988 00000303 88CC                            MOV     AH,CL
  3989                                  	; 08/07/2018
  3990 00000305 EB0E                    	jmp	short SAVREGS
  3991                                  
  3992                                  ; ---------------------------------------------------------------------------
  3993                                  
  3994                                  ; 01/05/2019 - Retro DOS v4.0
  3995                                  
  3996                                  	; This is the normal INT 21 entry point. We first perform a
  3997                                  	; quick test to see if we need to perform expensive DOS-entry
  3998                                  	; functions. Certain system calls are done without interrupts
  3999                                  	; being enabled.
  4000                                  
  4001                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  4002                                  
  4003                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4004                                  ; 04/11/2022
  4005                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4006                                  
  4007                                  COMMAND:
  4008                                  	; 22/12/2022
  4009 00000307 FA                      	cli
  4010                                  
  4011                                  	; 01/05/2019 - Retro DOS v4.0
  4012                                  	; 08/07/2018 - Retro DOS v3.0
  4013                                  
  4014                                  ; 22/12/2022
  4015                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4016                                  	;IF	NOT IBM
  4017 00000308 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4018 0000030B 7203                    	JB	SHORT NOTOEM
  4019 0000030D E97F01                  	JMP	_$SET_OEM_HANDLER
  4020                                  
  4021                                  NOTOEM:
  4022                                  	;ENDIF
  4023                                  
  4024                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4025                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4026                                  
  4027                                  	; 22/12/2022
  4028                                  	;cli	; 08/07/2018
  4029                                  
  4030                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4031                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4032                                  	; 04/11/2022
  4033 00000310 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4034                                  	;JBE	SHORT SAVREGS
  4035 00000313 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4036                                  
  4037                                  	; 31/05/2019
  4038                                  
  4039                                  	; The following set of calls are issued by the server at
  4040                                  	; *arbitrary* times and, therefore, must be executed on
  4041                                  	; the user's entry stack and executed with interrupts off.
  4042                                  
  4043                                  SAVREGS:
  4044                                  	; 01/05/2019 - Retro DOS v4.0
  4045                                  	; 10/08/2018
  4046                                  	; 08/07/2018 - Retro DOS v3.0
  4047 00000315 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4048                                  	;;je	_$SET_CTRL_C_TRAPPING
  4049                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4050 00000318 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4051                                  	; 04/11/2022
  4052 0000031A 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4053 0000031C 80FC64                  	cmp	ah,64h			; Check Max case number
  4054 0000031F 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4055 00000321 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4056 00000323 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4057 00000326 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4058 00000328 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4059 0000032B 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4060 0000032D 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4061 00000330 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4062                                  
  4063                                  SaveAllRegs:
  4064                                  	; 01/05/2019 - Retro DOS v4.0
  4065                                  
  4066 00000332 06                              push	ES
  4067 00000333 1E                      	push	DS
  4068 00000334 55                      	push	BP
  4069 00000335 57                      	push	DI
  4070 00000336 56                      	push	SI
  4071 00000337 52                      	push	DX
  4072 00000338 51                      	push	CX
  4073 00000339 53                      	push	BX
  4074 0000033A 50                      	push	AX
  4075                                  
  4076 0000033B 8CD8                    	mov	AX,DS
  4077                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4078 0000033D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4079 00000342 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4080 00000345 891E[EA05]              	mov	[SAVEBX],BX
  4081                                  
  4082                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4083                                  	
  4084                                  	; 08/07/2018 - Retro DOS v3.0        
  4085                                  	;xor     ax,ax
  4086                                  	;mov     [USER_ID],ax
  4087                                  	;mov     ax,[CurrentPDB]
  4088                                  	;mov     [PROC_ID],ax
  4089                                  
  4090                                  	; 01/05/2019
  4091                                  
  4092                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4093                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4094                                  	; this!!!
  4095                                  
  4096 00000349 A1[8405]                	MOV     AX,[USER_SP]
  4097 0000034C A3[F205]                        MOV     [NSP],AX
  4098 0000034F A1[8605]                        MOV     AX,[USER_SS]
  4099 00000352 A3[F005]                        MOV     [NSS],AX
  4100                                  
  4101 00000355 31C0                    	xor	AX,AX ; 0
  4102 00000357 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4103                                  
  4104 0000035A F606[3010]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4105 0000035F 7503                    	jnz	short set_indos_flag	; if win386 present
  4106 00000361 A3[3E03]                	mov	[USER_ID],AX
  4107                                  set_indos_flag:
  4108 00000364 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4109                                  
  4110 00000368 8926[8405]                      MOV     [USER_SP],SP
  4111 0000036C 8C16[8605]                      MOV     [USER_SS],SS
  4112                                  
  4113 00000370 A1[3003]                	mov	AX,[CurrentPDB]
  4114 00000373 A3[3C03]                	mov	[PROC_ID],AX
  4115 00000376 8ED8                    	mov	DS,AX
  4116 00000378 58                      	pop	AX
  4117 00000379 50                      	push	AX
  4118                                  
  4119                                  	; save user stack in his area for later returns (possibly from EXEC)
  4120                                  
  4121 0000037A 89262E00                        MOV     [PDB.USER_STACK],SP
  4122 0000037E 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4123                                  
  4124                                  	; 18/07/2018
  4125                                  	;mov	byte [CS:FSHARING], 0
  4126                                  
  4127                                  	;MOV     BX,CS			; no holes here.
  4128                                  	;MOV     SS,BX
  4129                                  
  4130                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4131 00000382 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4132                                  					;entry	REDISP
  4133                                  REDISP:
  4134 00000387 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4135 0000038A FB                              STI                             ; stack is in our space now...
  4136                                  
  4137 0000038B 8CD3                    	mov	bx,ss
  4138 0000038D 8EDB                    	mov	ds,bx
  4139                                  
  4140 0000038F 93                      	xchg	ax,bx
  4141                                  
  4142 00000390 31C0                    	xor	ax,ax ; 0
  4143                                  
  4144                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4145                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4146                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4147                                  
  4148                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4149                                  
  4150                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4151                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4152                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4153                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4154                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4155                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4156                                  	;inc	ax
  4157                                  	;;inc	AL			; AL = 1
  4158                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4159                                  
  4160                                  	; 15/12/2022
  4161 00000392 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4162                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4163 00000395 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4164 0000039B A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4165                                  	;mov	byte [IDLEINT],1
  4166 0000039E A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4167 000003A1 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4168 000003A4 40                      	inc	ax
  4169                                  	;inc	al			; AL = 1
  4170 000003A5 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4171                                  
  4172 000003A8 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4173                                  
  4174 000003A9 88E3                    	MOV     BL,AH			
  4175 000003AB D1E3                            SHL     BX,1			; 2 bytes per call in table
  4176                                         
  4177 000003AD FC                      	CLD
  4178                                  		; Since the DOS maintains mucho state information across system
  4179                                  		; calls, we must be very careful about which stack we use.
  4180                                  		; First, all abort operations must be on the disk stack. This
  4181                                  		; is due to the fact that we may be hitting the disk (close
  4182                                  		; operations, flushing) and may need to report an INT 24.
  4183                                          
  4184 000003AE 08E4                    	OR      AH,AH
  4185 000003B0 7416                            JZ      SHORT DSKROUT		; ABORT
  4186                                  
  4187                                          ;CMP	AH,12
  4188                                          ;JBE	SHORT IOROUT		; Character I/O
  4189                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4190                                          ;JZ	SHORT IOROUT
  4191                                          ;CMP	AH,SET_CURRENT_PDB
  4192                                          ;JNZ	SHORT DSKROUT
  4193                                  
  4194                                  		; Second, PRINT and PSPRINT and the server issue
  4195                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4196                                  		; This call MUST, therefore, use the AUXSTACK.
  4197                                  
  4198                                  	; 10/08/2018
  4199 000003B2 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4200 000003B5 7439                    	je      short DISPCALL
  4201                                  	
  4202                                  	; 01/05/2019
  4203                                  	
  4204                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4205                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4206                                  
  4207 000003B7 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4208 000003BA 770C                    	ja      short DSKROUT
  4209                                  
  4210                                  IOROUT:
  4211                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4212                                  	; (ss: prefix was not needed here! ds=ss)
  4213                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4214                                  	; 15/12/2022
  4215 000003BC 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4216 000003C1 752D                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4217 000003C3 BC[A00A]                        MOV     SP,IOSTACK
  4218 000003C6 EB28                            JMP     SHORT DISPCALL
  4219                                  
  4220                                  		; We are on a system call that is classified as "the rest".
  4221                                  		; We place ourselves onto the DSKSTACK and away we go.
  4222                                  		; We know at this point:
  4223                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4224                                  		;    ErrorMode and WpErr
  4225                                  		; *  That there can be no critical sections in effect.
  4226                                  		;    We signal the server to remove all the resources.
  4227                                  
  4228                                  DSKROUT:
  4229                                  	; 01/01/2024
  4230                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4231                                  	; 08/07/2018 - Retro DOS v3.0
  4232 000003C8 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4233                                  	; 01/01/2024
  4234                                  	;mov	byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4235                                  	;MOV	BYTE [WPERR],-1		; error mode, so good place to
  4236                                  	                   		; make sure flags are reset
  4237 000003CB C706[2203]FF01          	mov	word [WPERR],1FFh ; (PCDOS 7.1 IBMDOS.COM))
  4238                                  
  4239 000003D1 C606[2003]00            	MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  4240                                  
  4241                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4242                                  	; (ss: prefix was not needed here! ds=ss)
  4243                                  
  4244                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4245                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4246                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4247                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4248                                                                          ; make sure flags are reset
  4249 000003D6 50                      	push    ax
  4250 000003D7 B482                    	mov     ah,82h			; Release all resource information
  4251 000003D9 CD2A                    	int     2Ah 		; Microsoft Networks 
  4252                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4253 000003DB 58                      	pop     ax
  4254                                  
  4255                                  		; Since we are going to be running on the DSKStack and since
  4256                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4257                                  		; generation of INT 28's.
  4258                                  
  4259                                  	; 15/12/2022
  4260                                  	;mov     byte [ss:IDLEINT],0
  4261                                  	;
  4262                                          ;mov	sp,DSKSTACK
  4263                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4264                                          ;jz	short DISPCALL
  4265                                  
  4266 000003DC C606[5803]00            	mov     byte [IDLEINT],0
  4267                                  
  4268 000003E1 BC[2009]                	MOV     SP,DSKSTACK
  4269 000003E4 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4270 000003E9 7405                    	JZ      SHORT DISPCALL
  4271                                  
  4272 000003EB 50                              PUSH    AX
  4273                                          ;invoke	DSKSTATCHK
  4274 000003EC E88A4B                          CALL	DSKSTATCHK
  4275 000003EF 58                      	POP     AX
  4276                                  DISPCALL:
  4277                                  	; 01/05/2019 - Retro DOS v4.0
  4278 000003F0 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4279                                  
  4280                                  	; 15/12/2022
  4281 000003F5 871E[EA05]              	xchg	bx,[SAVEBX]
  4282 000003F9 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4283                                  
  4284                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4285                                  	; (ss: prefix was not needed here! ds=ss)        
  4286                                  	;xchg	bx,[ss:SAVEBX]
  4287                                  	;mov	ds,[ss:SAVEDS]
  4288                                  
  4289 000003FD 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4290                                  
  4291                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4292                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4293                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4294                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4295                                  	; because this bit is used to indicate to the next int 21 call that
  4296                                  	; the previous int 21 was an exec.
  4297                                  	;
  4298                                  	; So do not add any code between the call above and the label 
  4299                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4300                                  
  4301                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4302 00000402 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4303                                  
  4304                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4305                                  ; DOSCODE:41F7h
  4306                                  
  4307                                  ;entry LEAVE
  4308                                  ;;;_LEAVE:				; Exit from a system call
  4309                                  LeaveDOS: ; 18/07/2018 
  4310                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4311 00000408 FA                      	CLI
  4312                                  
  4313                                  	; 01/05/2019
  4314                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4315 00000409 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4316 0000040E 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4317 00000413 7526                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4318                                  
  4319                                  LeaveA20On:
  4320 00000415 FE0E[2103]                      DEC     BYTE [INDOS]
  4321                                          ; 04/11/2022
  4322 00000419 8E16[8605]              	mov	ss,[USER_SS]
  4323 0000041D 8B26[8405]              	MOV     SP,[USER_SP]
  4324                                  	;MOV	SS,[USER_SS]
  4325 00000421 89E5                    	MOV     BP,SP
  4326                                  	;MOV	[BP.user_AX],AL	
  4327                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4328                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h
  4329                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4330                                  
  4331                                  	; 15/12/2022
  4332 00000423 884600                  	MOV	[BP],AL	; mov [bp+0],al
  4333                                  	
  4334                                  	;MOV	AX,[NSP]
  4335                                          ;MOV	[USER_SP],AX
  4336                                          ;MOV	AX,[NSS]
  4337                                          ;MOV	[USER_SS],AX
  4338                                  	; 01/01/2024
  4339 00000426 C406[F005]              	les	ax,[NSS] ; (PCDOS 7.1 IBMDOS.COM)
  4340 0000042A A3[8605]                	mov	[USER_SS],ax
  4341 0000042D 8C06[8405]              	mov	[USER_SP],es
  4342                                  
  4343 00000431 58                      	pop	AX
  4344 00000432 5B                      	pop	BX
  4345 00000433 59                      	pop	CX
  4346 00000434 5A                      	pop	DX
  4347 00000435 5E                      	pop	SI
  4348 00000436 5F                      	pop	DI
  4349 00000437 5D                      	pop	BP
  4350 00000438 1F                      	pop	DS
  4351 00000439 07                      	pop	ES
  4352                                  
  4353 0000043A CF                              IRET
  4354                                  
  4355                                  disa20:	   				; M068 - Start
  4356 0000043B 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4357 0000043F 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4358 00000443 75D0                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4359                                  					;    a20 off
  4360                                  					; Y: turn a20 off and dec a20off_count
  4361 00000445 FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4362                                   					; Start - M004
  4363 00000449 1E                      	push	ds			; segment of stub
  4364 0000044A BB[2D11]                	mov	bx,disa20_iret		; offset in stub
  4365 0000044D 53                      	push	bx
  4366 0000044E CB                      	retf	  			; go to stub
  4367                                  					; End - M004
  4368                                  ;SYSTEM_CALL ENDP
  4369                                  
  4370                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4371                                  ; 04/11/2022
  4372                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4373                                  
  4374                                  ; ==========================================================================
  4375                                  ;
  4376                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4377                                  ; the stack prior to giving the user control
  4378                                  ;
  4379                                  ; ==========================================================================
  4380                                  
  4381                                  ; 01/05/2019 - Retro DOS v4.0
  4382                                  
  4383                                          ;procedure restore_world,NEAR
  4384                                  restore_world:
  4385                                  	;getdseg <es>		; es -> dosdata
  4386 0000044F 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4387                                  
  4388 00000454 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4389                                  
  4390 00000459 58                              POP     AX
  4391 0000045A 5B                              POP     BX
  4392 0000045B 59                              POP     CX
  4393 0000045C 5A                              POP     DX
  4394 0000045D 5E                              POP     SI
  4395 0000045E 5F                              POP     DI
  4396 0000045F 5D                              POP     BP
  4397 00000460 1F                              POP     DS
  4398                                  
  4399 00000461 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4400                                  
  4401                                  ;restore_world	ENDP
  4402                                  
  4403                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4404                                  
  4405                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4406                                  ; 04/11/2022
  4407                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4408                                  
  4409                                  ; ==========================================================================
  4410                                  ;
  4411                                  ; Save_World saves complete registers on the stack
  4412                                  ;
  4413                                  ; ==========================================================================
  4414                                  
  4415                                          ;procedure save_world,NEAR
  4416                                  save_world:
  4417                                  	;getdseg <es>		; es -> dosdata
  4418 00000466 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4419                                  
  4420 0000046B 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4421                                  
  4422                                  	; 12/05/2019
  4423                                          
  4424 00000470 1E                      	PUSH    DS
  4425 00000471 55                              PUSH    BP
  4426 00000472 57                              PUSH    DI
  4427 00000473 56                              PUSH    SI
  4428 00000474 52                              PUSH    DX
  4429 00000475 51                              PUSH    CX
  4430 00000476 53                              PUSH    BX
  4431 00000477 50                              PUSH    AX
  4432                                  
  4433 00000478 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4434                                  
  4435 0000047D 55                      	push	BP		
  4436 0000047E 89E5                    	mov	BP,SP
  4437 00000480 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4438 00000483 5D                      	pop	BP
  4439                                  	
  4440 00000484 C3                      	retn
  4441                                  
  4442                                  ;save_world	ENDP
  4443                                  
  4444                                  ; 01/05/2019
  4445                                  
  4446                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4447                                  ; 04/11/2022
  4448                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4449                                  
  4450                                  ; ==========================================================================
  4451                                  ;
  4452                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4453                                  ;
  4454                                  ; ==========================================================================
  4455                                  
  4456                                          ;procedure get_user_stack,NEAR
  4457                                  Get_User_Stack:
  4458                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4459 00000485 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4460 0000048A C536[8405]                      lds	si,[USER_SP]
  4461 0000048E C3                      	retn
  4462                                  
  4463                                  ;get_user_stack  ENDP
  4464                                  
  4465                                  ; 22/12/2022
  4466                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4467                                  ;%if 0
  4468                                  
  4469                                  ; ---------------------------------------------------------------------------
  4470                                  ;
  4471                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4472                                  ; Inputs:
  4473                                  ;	User registers, User Stack, INTS disabled
  4474                                  ;	If CALL F8, DS:DX is new handler address
  4475                                  ; Function:
  4476                                  ;	Process OEM INT 21 extensions
  4477                                  ; Outputs:
  4478                                  ;	Jumps to OEM_HANDLER if appropriate
  4479                                  ;
  4480                                  ; ---------------------------------------------------------------------------
  4481                                  
  4482                                  ;IF	NOT IBM
  4483                                  
  4484                                  _$SET_OEM_HANDLER:
  4485                                  	; 01/05/2019 - Retro DOS v4.0
  4486                                  	
  4487                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4488                                  	;(jb	short NOTOOEM)
  4489                                  
  4490 0000048F 06                      	push	es ; *
  4491                                  	;getdseg <es>			; es -> dosdata
  4492 00000490 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4493                                  
  4494 00000495 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4495                                  						; (message) request	
  4496                                  	; AH = 0F8h = SET OEM HANDLER
  4497                                  
  4498 00000497 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4499 0000049C 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4500                                  
  4501 000004A1 07                      	pop	es ; *
  4502                                  
  4503 000004A2 CF                      	IRET                            ; Quick return, Have altered no registers
  4504                                  
  4505                                  check_trueversion_request:
  4506                                  	; 18/07/2019 - Retro DOS v3.0
  4507                                  
  4508                                  	; Retro DOS v2.0 - 20/04/2018
  4509 000004A3 83F8FF                  	CMP	AX,0FFFFh
  4510                                  	; 18/07/2018
  4511 000004A6 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4512                                  
  4513                                  	; 01/05/2019
  4514 000004A8 07                      	pop	es ; *
  4515                                  
  4516 000004A9 B40E                    	mov	ah,0Eh
  4517                                  
  4518                                  	; Retro DOS v4.0 feature only!
  4519 000004AB 81FBA101                	cmp	bx,417  ; Signature to bypass
  4520                                  			; Retro DOS true version message	
  4521 000004AF 7414                    	je	short true_version_iret
  4522                                  
  4523 000004B1 56                      	push	si
  4524 000004B2 53                      	push	bx
  4525                                  
  4526 000004B3 BE[BF00]                	mov	si,RETRODOSMSG
  4527                                  wrdosmsg:
  4528                                  	;movb	ah,0Eh
  4529 000004B6 BB0700                  	mov	bx,7
  4530                                  wrdosmsg_nxt:
  4531 000004B9 2EAC                    	cs	lodsb
  4532 000004BB 3C24                    	cmp	al,'$'
  4533 000004BD 7404                    	je	short wrdosmsg_ok		
  4534 000004BF CD10                    	int	10h
  4535 000004C1 EBF6                    	jmp	short wrdosmsg_nxt
  4536                                  
  4537                                  wrdosmsg_ok:
  4538 000004C3 5B                      	pop	bx
  4539 000004C4 5E                      	pop	si
  4540                                  
  4541                                  true_version_iret:
  4542                                  	; ah = 0Eh
  4543                                  	;mov	al,40h ; Retro DOS v4.0
  4544                                  	; 
  4545 000004C5 B041                    	mov	al,41h ; Retro DOS v4.1 
  4546 000004C7 CF                      	iret
  4547                                  
  4548                                  	; If above F8 try to jump to handler
  4549                                  
  4550                                  DO_OEM_FUNC:
  4551                                  	; 01/05/2019
  4552 000004C8 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4553 000004CE 7504                    	JNE     short OEM_JMP
  4554 000004D0 07                      	pop	es ; *
  4555 000004D1 E90BFE                  	JMP     BADCALL                 ; Handler not initialized
  4556                                  OEM_JMP:
  4557 000004D4 06                      	push	es
  4558 000004D5 1F                      	pop	ds ; DOSDATA segment !
  4559 000004D6 07                      	pop	es ; *
  4560                                  
  4561                                  	; 22/12/2022
  4562 000004D7 FB                      	sti	; (enable interrupts before jumping to private handler)  
  4563                                  
  4564 000004D8 FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4565                                  
  4566                                  ;       ENDIF
  4567                                  
  4568                                  ; ---------------------------------------------------------------------------
  4569                                  
  4570                                  ;%endif
  4571                                  
  4572                                  ;============================================================================
  4573                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4574                                  ;============================================================================
  4575                                  ; 17/07/2018 - Retro DOS v3.0
  4576                                  
  4577                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4578                                  ;	NAME	IBMCODE
  4579                                  
  4580                                  ;BREAK <NullDev -- Driver for null device>
  4581                                  
  4582                                  ; ROMDOS note:
  4583                                  ;	NUL device driver used to be here, but it was removed and placed in
  4584                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4585                                  ;	header, which is also in DOSDATA.
  4586                                  
  4587                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4588                                  
  4589                                  ;----------------------------------------------------------------------------
  4590                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4591                                  ;----------------------------------------------------------------------------
  4592                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4593                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4594                                  
  4595                                  ;Public MSC001S,MSC001E
  4596                                  ;MSC001S label byte
  4597                                  	;IF	IBM
  4598                                  ; Codes returned by BIOS
  4599                                  ERRIN:
  4600 000004DC 02                      	DB	2			; NO RESPONSE
  4601 000004DD 06                      	DB	6			; SEEK FAILURE
  4602 000004DE 0C                      	DB	12			; GENERAL ERROR
  4603 000004DF 04                      	DB	4			; BAD CRC
  4604 000004E0 08                      	DB	8			; SECTOR NOT FOUND
  4605 000004E1 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4606                                  ERROUT:
  4607                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4608 000004E2 80                      	DB	80H			; NO RESPONSE
  4609 000004E3 40                      	DB	40H			; Seek failure
  4610 000004E4 02                      	DB	2			; Address Mark not found
  4611 000004E5 10                      	DB	10H			; BAD CRC
  4612 000004E6 04                      	DB	4			; SECTOR NOT FOUND
  4613 000004E7 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4614                                  
  4615                                  NUMERR	EQU	$-ERROUT
  4616                                  	;ENDIF
  4617                                  ;MSC001E label byte
  4618                                  ;----------------------------------------------------------------------------
  4619                                  
  4620                                  ;============================================================================
  4621                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4622                                  ;============================================================================
  4623                                  ; 18/07/2018 - Retro DOS v3.0
  4624                                  ; 15/05/2019 - Retro DOS v4.0
  4625                                  
  4626                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4627                                  
  4628                                  ;   AbsSetup - setup for abs disk functions
  4629                                  ;----------------------------------------------------------------------------
  4630                                  
  4631                                  AbsSetup:
  4632                                  	; 02/01/2024
  4633 000004E8 1E                      	push	ds ; *
  4634 000004E9 16                      	push	ss
  4635 000004EA 1F                      	pop	ds
  4636 000004EB FE06[2103]              	inc	byte [INDOS]
  4637                                  	;INC	byte [SS:INDOS]		; SS override
  4638 000004EF FB                      	STI
  4639 000004F0 FC                      	CLD
  4640                                  	; 02/01/2024
  4641                                  	;PUSH	DS
  4642                                  	;push	ss
  4643                                  	;pop	ds
  4644 000004F1 E80901                  	CALL	GETBP
  4645                                  	; 02/01/2024
  4646 000004F4 1F                      	pop	ds ; *
  4647 000004F5 7239                    	JC	short errdriv 		; PM. error drive ;AN000;
  4648                                  	;mov	word [es:bp+1Fh]
  4649 000004F7 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4650                                  
  4651                                  	; 02/01/2024
  4652                                  ;errdriv:
  4653                                  ;	POP	DS
  4654                                  ;	jnc	short AbsSetup2
  4655                                  ;AbsSetup_retn:
  4656                                  ;	retn
  4657                                  
  4658                                  AbsSetup2:
  4659                                  	; 15/05/2019 - Retro DOS v4.0
  4660                                  	; MSDOS 6.0
  4661                                  					; SS override
  4662 000004FD 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4663 00000504 E82F04                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4664 00000507 7227                    	jc	short AbsSetup_retn
  4665 00000509 E8E954                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4666                                  
  4667                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4668 0000050C 1E                      	PUSH	DS
  4669 0000050D 56                      	PUSH	SI
  4670 0000050E 50                      	PUSH	AX
  4671                                  
  4672 0000050F 16                      	push	ss
  4673 00000510 1F                      	pop	ds
  4674                                  	
  4675 00000511 BE[BE03]                	MOV	SI,OPENBUF
  4676 00000514 8804                    	MOV	[SI],AL
  4677 00000516 800441                  	ADD	BYTE [SI],"A"
  4678 00000519 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4679 0000051E B80003                  	MOV	AX,0300H
  4680 00000521 F8                      	CLC
  4681 00000522 CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4682                                  		
  4683                                  		; 04/11/2022
  4684                                  		; (INT 2Ah - AX = 0300h)
  4685                                  		; Microsoft Networks - CHECK DIRECT I/O
  4686                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4687                                  		;    only drive specifier--must include the colon)
  4688                                  		; Return: CF clear if absolute disk access allowed
  4689                                  
  4690 00000524 58                      	POP	AX
  4691 00000525 5E                      	POP	SI
  4692 00000526 1F                      	POP	DS
  4693 00000527 7307                    	jnc	short AbsSetup_retn
  4694                                  
  4695                                  	;mov	word [ss:EXTERR],32h
  4696 00000529 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4697                                  errdriv:	; 02/01/2024
  4698                                  AbsSetup_retn:
  4699 00000530 C3                      	retn
  4700                                  
  4701                                  ;---------------------------------------------------------------------------
  4702                                  ;
  4703                                  ; Procedure Name : ABSDRD
  4704                                  ;
  4705                                  ; Interrupt 25 handler. Performs absolute disk read.
  4706                                  ; Inputs:	AL - 0-based drive number
  4707                                  ;		DS:BX point to destination buffer
  4708                                  ;		CX number of logical sectors to read
  4709                                  ;		DX starting logical sector number (0-based)
  4710                                  ; Outputs:	Original flags still on stack
  4711                                  ;		Carry set
  4712                                  ;		    AH error from BIOS
  4713                                  ;		    AL same as low byte of DI from INT 24
  4714                                  ;
  4715                                  ;---------------------------------------------------------------------------
  4716                                          ;procedure   ABSDRD,FAR
  4717                                  ABSDRD:
  4718                                  	; 15/05/2019 - Retro DOS v4.0
  4719                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4720                                  	; 04/11/2022
  4721                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4722                                  	
  4723                                  	; MSDOS 6.0
  4724 00000531 FA                      	CLI
  4725                                  	
  4726                                  ;	set up ds to point to DOSDATA
  4727                                  
  4728 00000532 50                      	push	ax			; preserve AX value
  4729 00000533 8CD8                    	mov	ax,ds			; store DS value in AX
  4730                                  	;getdseg <ds>
  4731 00000535 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4732 0000053A A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4733 0000053D 58                      	pop	ax			; restore AX value
  4734                                  
  4735                                  	; M072:
  4736                                  	; We shall save es on the user stack here. We need to use ES in
  4737                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4738                                  	; time in order to restore the user stack.
  4739                                  
  4740 0000053E 06                      	push	es  ; ****		; M072
  4741                                  
  4742 0000053F 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4743 00000543 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4744                                  
  4745                                  ; 	set up ss to point to DOSDATA
  4746                                  ;
  4747                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4748                                  ; version of the getdseg macro with the SS register! An interrupt will
  4749                                  ; sneak through.
  4750                                  
  4751                                  ;ifndef ROMDOS
  4752                                  	;getdseg <ss>			; cli in entry of routine
  4753 00000547 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4754                                  ;else
  4755                                  ;	mov	ds, cs:[BioDataSeg]
  4756                                  ;	assume	ds:bdata
  4757                                  ;
  4758                                  ;	mov	ss, ds:[DosDataSg]
  4759                                  ;	assume	ss:DOSDATA
  4760                                  ;
  4761                                  ;endif ; ROMDOS
  4762                                  
  4763 0000054C BC[2009]                	MOV	SP,DSKSTACK
  4764                                  
  4765 0000054F 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4766                                  
  4767 00000553 06                      	push	es ; *** (MSDOS 6.21)
  4768 00000554 E80FFF                  	call	save_world		; save all regs
  4769                                  
  4770 00000557 06                      	PUSH	ES ; **
  4771 00000558 E88DFF                  	CALL	AbsSetup
  4772 0000055B 723D                    	JC	short ILEAVE
  4773                                  
  4774                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4775                                  	;  the secondary cache. The secondary cache does not check for media
  4776                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4777                                  	;  read, and get data from the previous disk. To get around this,
  4778                                  	;  we just won't use the secondary cache for absolute disk reads.
  4779                                  	;                                                      -mw 8/5/88
  4780                                  
  4781                                  	;EnterCrit critDisk
  4782 0000055D E8870D                  	call	ECritDisk
  4783 00000560 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4784                                  	;LeaveCrit critDisk
  4785 00000566 E8990D                  	call	LCritDisk
  4786                                  
  4787                                          ;invoke	DSKREAD
  4788 00000569 E81231                  	CALL	DSKREAD
  4789 0000056C 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4790                                  
  4791 0000056E 89F9                            mov     cx,di
  4792 00000570 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4793 00000575 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4794                                  
  4795                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4796                                  ;            sectors, also termed an "Extent".)
  4797                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4798                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4799                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4800                                  ;
  4801                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4802                                  ;	buffers must be "read" into the transfer memory block, so that the
  4803                                  ;       transfer memory reflects the most recent data.
  4804                                  
  4805                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4806 0000057A E84533                          call	DskRdBufScan
  4807 0000057D EB1B                    	jmp     short ILEAVE
  4808                                  
  4809                                  TLEAVE:
  4810 0000057F 7419                    	JZ	short ILEAVE
  4811                                  
  4812                                  ERR_LEAVE:				; M039
  4813                                  	; 15/07/2018 - Retro DOS v3.0
  4814                                          ;IF	IBM
  4815                                  ; Translate the error code to ancient 1.1 codes
  4816 00000581 06                              PUSH    ES ; *
  4817 00000582 0E                              PUSH    CS
  4818 00000583 07                              POP     ES
  4819 00000584 30E4                            XOR     AH,AH			; Nul error code
  4820                                  	;mov	cx,6
  4821 00000586 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4822 00000589 BF[DC04]                        MOV     DI,ERRIN		; Point to error conditions
  4823 0000058C F2AE                            REPNE   SCASB
  4824 0000058E 7504                            JNZ     SHORT LEAVECODE		; Not found
  4825                                  	;mov	ah,[ES:DI+5]
  4826 00000590 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4827                                  LEAVECODE:
  4828 00000594 07                              POP     ES ; *
  4829                                  	; 15/05/2019 - Retro DOS v4.0
  4830 00000595 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4831                                          ;ENDIF
  4832                                  
  4833 00000599 F9                              STC
  4834                                  ILEAVE:
  4835                                  	; 15/05/2019
  4836 0000059A 07                              POP     ES ; **
  4837 0000059B E8B1FE                  	call	restore_world
  4838 0000059E 07                              pop	es ; *** (MSDOS 6.21)
  4839 0000059F FA                      	CLI
  4840 000005A0 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4841 000005A4 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4842 000005A9 16                              push	ss			; M072 - Start
  4843 000005AA 07                      	pop	es			; es - dosdata
  4844 000005AB 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4845 000005B0 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4846 000005B5 07                      	pop	es  ; ****		; Note es was saved on user
  4847                                  					; stack at entry 
  4848                                  					; M072 - End
  4849 000005B6 FB                              STI
  4850 000005B7 CB                      	RETF   ; ! FAR return !
  4851                                  
  4852                                  ;ABSDRD	ENDP
  4853                                  
  4854                                  ;---------------------------------------------------------------------------
  4855                                  ;
  4856                                  ; Procedure Name : ABSDWRT
  4857                                  ;
  4858                                  ; Interrupt 26 handler. Performs absolute disk write.
  4859                                  ; Inputs:	AL - 0-based drive number
  4860                                  ;		DS:BX point to source buffer
  4861                                  ;		CX number of logical sectors to write
  4862                                  ;		DX starting logical sector number (0-based)
  4863                                  ; Outputs:	Original flags still on stack
  4864                                  ;		Carry set
  4865                                  ;		    AH error from BIOS
  4866                                  ;		    AL same as low byte of DI from INT 24
  4867                                  ;
  4868                                  ;---------------------------------------------------------------------------
  4869                                          ;procedure   ABSDWRT,FAR
  4870                                  ABSDWRT:
  4871                                  	; 15/05/2019 - Retro DOS v4.0
  4872                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4873                                  	; 04/11/2022
  4874                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4875                                  
  4876 000005B8 FA                      	CLI
  4877                                  
  4878                                  ;	set up ds to point to DOSDATA
  4879                                  
  4880 000005B9 50                      	push	ax
  4881 000005BA 8CD8                    	mov	ax,ds
  4882                                  	;getdseg <ds>
  4883 000005BC 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4884 000005C1 A3[0A0D]                	mov	[TEMPSEG],ax
  4885 000005C4 58                      	pop	ax
  4886                                  
  4887                                  	; M072:
  4888                                  	; We shall save es on the user stack here. We need to use ES in
  4889                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4890                                  	; time in order to restore the user stack.
  4891                                  
  4892 000005C5 06                      	push	es ; ****		; M072
  4893                                  
  4894 000005C6 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4895 000005CA 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4896                                  
  4897                                  	; set up ss to point to DOSDATA
  4898                                  	;
  4899                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4900                                  	; ROMDOS version of the getdseg macro with the SS register!
  4901                                  	; An interrupt will sneak through.
  4902                                  
  4903                                  ;ifndef ROMDOS
  4904                                  	;getdseg <ss>			; cli in entry of routine
  4905 000005CE 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4906                                  ;else
  4907                                  ;	mov	ds, cs:[BioDataSeg]
  4908                                  ;	assume	ds:bdata
  4909                                  ;
  4910                                  ;	mov	ss, ds:[DosDataSg]
  4911                                  ;	assume	ss:DOSDATA
  4912                                  ;
  4913                                  ;endif ; ROMDOS
  4914                                  
  4915 000005D3 BC[2009]                	MOV	SP,DSKSTACK
  4916                                  		; we are now switched to DOS's disk stack
  4917                                  
  4918 000005D6 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4919                                  
  4920 000005DA 06                      	push	es ; *** (MSDOS 6.21)
  4921                                  
  4922 000005DB E888FE                  	call	save_world	      	; save all regs
  4923                                  
  4924 000005DE 06                      	PUSH	ES ; **
  4925 000005DF E806FF                  	CALL	AbsSetup
  4926 000005E2 72B6                    	JC	short ILEAVE
  4927                                  
  4928                                  	;EnterCrit critDisk
  4929 000005E4 E8000D                  	call	ECritDisk
  4930 000005E7 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4931 000005ED E88C03                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4932                                  	;LeaveCrit critDisk
  4933 000005F0 E80F0D                  	call	LCritDisk
  4934                                  
  4935                                  ;M039
  4936                                  ;       DS:BX = transfer address (source data address).
  4937                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4938                                  ;	     sectors, also termed an "Extent".)
  4939                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4940                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4941                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4942                                  ;
  4943                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4944                                  ;       written. Note that all the above registers are preserved for
  4945                                  ;       DSKWRITE.
  4946                                  
  4947 000005F3 1E                              push    ds
  4948                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4949 000005F4 E8CF35                  	call	DskWrtBufPurge
  4950 000005F7 1F                              pop     ds
  4951                                  ;M039
  4952                                  	;invoke	DSKWRITE
  4953 000005F8 E8A730                  	call	DSKWRITE
  4954 000005FB EB82                    	JMP	short TLEAVE
  4955                                  
  4956                                  ;ABSDWRT ENDP
  4957                                  
  4958                                  ;----------------------------------------------------------------------------
  4959                                  ;
  4960                                  ; Procedure Name : GETBP
  4961                                  ;
  4962                                  ; Inputs:
  4963                                  ;	AL = Logical unit number (A = 0)
  4964                                  ; Function:
  4965                                  ;	Find Drive Parameter Block
  4966                                  ; Outputs:
  4967                                  ;	ES:BP points to DPB
  4968                                  ;	[THISDPB] = ES:BP
  4969                                  ;	Carry set if unit number bad or unit is a NET device.
  4970                                  ;		Later case sets extended error error_I24_not_supported
  4971                                  ; No other registers alteredjjj
  4972                                  ;
  4973                                  ;----------------------------------------------------------------------------
  4974                                  
  4975                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4976                                  GETBP:
  4977                                  	; 15/05/2019 - Retro DOS v4.0
  4978                                  	; 11/07/2018 - Retro DOS v3.0
  4979 000005FD 50                      	PUSH	AX
  4980 000005FE 0401                    	ADD	AL,1		; No increment; need carry flag
  4981 00000600 7210                    	JC	SHORT SKIPGET
  4982 00000602 E82563                  	CALL	GETTHISDRV
  4983                                  	; MSDOS 6.0
  4984 00000605 730B                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  4985                                  	
  4986                                  	; 23/03/2024 - Retro DOS v4.1
  4987                                  	;XOR	AH,AH			;DCR. ax= error code 	;AN000;
  4988                                  	;CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  4989                                  	;JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  4990                                  	;STC				;DCR.			;AN000;
  4991 00000607 B400                    	mov	ah,0	
  4992                                  
  4993 00000609 A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  4994 0000060C C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  4995                                  SKIPGET:
  4996 00000612 58                      	POP	AX
  4997 00000613 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  4998                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4999                                  	;jnc	short getbp_t
  5000                                  	;retn
  5001                                  getbp_t:
  5002 00000615 C42E[A205]              	LES	BP,[THISCDS]
  5003                                  	; 15/12/2022
  5004 00000619 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  5005                                  	; 07/12/2022
  5006                                  	;TEST	WORD [ES:BP+43H],8000H
  5007                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5008 0000061E 7408                    	JZ	SHORT GETBP_CDS
  5009 00000620 C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  5010 00000626 F9                      	STC
  5011                                  GETBP_RETN:
  5012 00000627 C3                      	RETN
  5013                                  
  5014                                  GETBP_CDS:
  5015                                  	;LES	BP,[ES:BP+45H]
  5016 00000628 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5017                                  GOTDPB:
  5018                                  	; Load THISDPB from ES:BP
  5019 0000062C 892E[8A05]              	MOV	[THISDPB],BP
  5020 00000630 8C06[8C05]              	MOV	[THISDPB+2],ES
  5021 00000634 C3                      	RETN
  5022                                  
  5023                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5024                                  
  5025                                  ;----------------------------------------------------------------------------
  5026                                  ;
  5027                                  ; Procedure Name : SYS_RETURN
  5028                                  ;
  5029                                  ; These are the general system call exit mechanisms. All internal system
  5030                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5031                                  ; is to set the user's flags and set his AX register for return.
  5032                                  ;
  5033                                  ;----------------------------------------------------------------------------
  5034                                  
  5035                                          ;procedure   SYS_RETURN,NEAR
  5036                                  SYS_RETURN:        
  5037                                          ;entry	SYS_RET_OK
  5038                                  SYS_RET_OK:   
  5039 00000635 E84DFE                  	call    Get_User_Stack
  5040                                  		; turn off user's carry flag
  5041                                  SYS_RET_OK_clc: ; 25/06/2019 
  5042                                          ;;and	word [SI+16h],0FFFEh 
  5043                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5044                                          ; 25/06/2019
  5045 00000638 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5046 0000063C EB10                    	JMP     SHORT DO_RET
  5047                                  
  5048                                          ;entry   SYS_RET_ERR
  5049                                  SYS_RET_ERR:        
  5050 0000063E 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5051 00000640 E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5052 00000643 E81A00                  	CALL	ErrorMap
  5053                                  
  5054                                  	;entry	From_GetSet
  5055                                  From_GetSet:
  5056 00000646 E83CFE                          call    Get_User_Stack
  5057                                  		 ; signal carry to user
  5058                                  	;;or	word [SI+16h],1
  5059                                  	;OR	word [SI+user_env.user_F],f_Carry
  5060                                  	; 25/06/2019
  5061 00000649 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5062 0000064D F9                      	STC			; also, signal internal error
  5063                                  DO_RET:
  5064                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5065 0000064E 8904                    	MOV	[SI],AX
  5066 00000650 C3                      	RETN
  5067                                  
  5068                                  	;entry	FCB_RET_OK
  5069                                  FCB_RET_OK:
  5070                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5071                                  NO_OP:
  5072 00000651 30C0                    	XOR	AL,AL
  5073 00000653 C3                      	retn
  5074                                  
  5075                                  	;entry	FCB_RET_ERR
  5076                                  FCB_RET_ERR:
  5077 00000654 30E4                    	XOR	AH,AH
  5078 00000656 36A3[2403]              	mov	[ss:EXTERR],AX
  5079 0000065A E80300                  	CALL	ErrorMap
  5080 0000065D B0FF                    	MOV	AL,-1
  5081 0000065F C3                      	retn
  5082                                  
  5083                                  	;entry	ErrorMap
  5084                                  ErrorMap:
  5085 00000660 56                      	PUSH	SI
  5086                                  				; ERR_TABLE_21 is now in DOSDATA
  5087 00000661 BE[DB0D]                	MOV	SI,ERR_TABLE_21
  5088                                  				; SS override for FAILERR and EXTERR
  5089 00000664 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5090 0000066A 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5091                                  		 ; Ooops, this is the REAL reason
  5092                                  	;mov	word [SS:EXTERR],53h
  5093 0000066C 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5094                                  EXTENDED_NORMAL:
  5095 00000673 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5096 00000676 5E                      	POP	SI
  5097 00000677 C3                      	retn
  5098                                  
  5099                                  	;EndProc SYS_RETURN
  5100                                  
  5101                                  ;---------------------------------------------------------------------------
  5102                                  ;
  5103                                  ; Procedure Name : CAL_LK
  5104                                  ;
  5105                                  ; Inputs:
  5106                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5107                                  ;		(DS NEED not be DOSDATA)
  5108                                  ;	[EXTERR] is set with error
  5109                                  ; Function:
  5110                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5111                                  ; Outputs:
  5112                                  ;	[EXTERR_CLASS] set
  5113                                  ;	[EXTERR_ACTION] set
  5114                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5115                                  ; Destroys SI, FLAGS
  5116                                  ;
  5117                                  ;---------------------------------------------------------------------------
  5118                                  
  5119                                  	;procedure CAL_LK,NEAR
  5120                                  CAL_LK:
  5121 00000678 1E                      	PUSH	DS
  5122 00000679 50                      	PUSH	AX
  5123 0000067A 53                      	PUSH	BX
  5124                                  
  5125                                  ;M048	Context DS		; DS:SI -> Table
  5126                                  ;
  5127                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5128                                  ; is DOSDATA
  5129                                  
  5130                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5131                                  	; 15/05/2019 - Retro DOS v4.0
  5132 0000067B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5133                                  
  5134                                  	; 18/07/2018
  5135                                  	;push	ss
  5136                                  	;pop	ds
  5137                                  
  5138 00000680 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5139                                  TABLK1:
  5140 00000684 AC                      	LODSB
  5141                                  
  5142 00000685 3CFF                    	CMP	AL,0FFH
  5143 00000687 7409                    	JZ	short GOT_VALS	; End of table
  5144 00000689 38D8                    	CMP	AL,BL
  5145 0000068B 7405                    	JZ	short GOT_VALS	; Got entry
  5146 0000068D 83C603                  	ADD	SI,3		; Next table entry
  5147                                  	; 15/08/2018
  5148 00000690 EBF2                    	JMP	short TABLK1
  5149                                  
  5150                                  GOT_VALS:
  5151 00000692 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5152                                  
  5153 00000693 80FCFF                  	CMP	AH,0FFH
  5154 00000696 7404                    	JZ	short NO_SET_ACT
  5155 00000698 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5156                                  NO_SET_ACT:
  5157 0000069C 3CFF                    	CMP	AL,0FFH
  5158 0000069E 7403                    	JZ	short NO_SET_CLS
  5159 000006A0 A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5160                                  NO_SET_CLS:
  5161 000006A3 AC                      	LODSB			; Get LOCUS
  5162                                  
  5163 000006A4 3CFF                    	CMP	AL,0FFH
  5164 000006A6 7403                    	JZ	short NO_SET_LOC
  5165 000006A8 A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5166                                  NO_SET_LOC:
  5167 000006AB 5B                      	POP	BX
  5168 000006AC 58                      	POP	AX
  5169 000006AD 1F                      	POP	DS
  5170 000006AE C3                      	retn
  5171                                  
  5172                                  	;EndProc CAL_LK
  5173                                  
  5174                                  ;---------------------------------------------------------------------------
  5175                                  ;
  5176                                  ; Procedure Name : ETAB_LK
  5177                                  ;
  5178                                  ; Inputs:
  5179                                  ;	AX is error code
  5180                                  ;	[USER_IN_AX] has AH value of system call involved
  5181                                  ; Function:
  5182                                  ;	Make sure error code is appropriate to this call.
  5183                                  ; Outputs:
  5184                                  ;	AX MAY be mapped error code
  5185                                  ;	[EXTERR] = Input AX
  5186                                  ; Destroys ONLY AX and FLAGS
  5187                                  ;
  5188                                  ;---------------------------------------------------------------------------
  5189                                  
  5190                                  	;procedure ETAB_LK,NEAR
  5191                                  
  5192                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5193 000006AF 1E                      	PUSH	DS
  5194 000006B0 56                      	PUSH	SI
  5195 000006B1 51                      	PUSH	CX
  5196 000006B2 53                      	PUSH	BX
  5197                                  
  5198                                  	;Context DS			; SS is DOSDATA
  5199                                  
  5200 000006B3 16                      	push	ss
  5201 000006B4 1F                      	pop	ds
  5202                                  
  5203 000006B5 A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5204                                  
  5205                                  					; I21_MAP_E_TAB is now in DOSCODE
  5206 000006B8 BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5207 000006BB 88C7                    	MOV	BH,AL			; Real code to BH
  5208 000006BD 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5209                                  TABLK2:
  5210                                  	; 15/05/2019 - Retro DOS v4.0
  5211 000006C1 2E                      	cs
  5212 000006C2 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5213                                  	
  5214                                  	; 18/07/2018 - Retro DOS v3.0
  5215                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5216                                  
  5217 000006C3 3CFF                    	CMP	AL,0FFH 		; End of table?
  5218 000006C5 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5219 000006C7 38D8                    	CMP	AL,BL			; Found call?
  5220 000006C9 740C                    	JZ	short GOT_CALL		; Yes
  5221 000006CB 86E0                    	XCHG	AH,AL			; Count to AL
  5222 000006CD 30E4                    	XOR	AH,AH			; Make word for add
  5223 000006CF 01C6                    	ADD	SI,AX			; Next table entry
  5224 000006D1 EBEE                    	JMP	short TABLK2
  5225                                  
  5226                                  NOT_IN_TABLE:
  5227 000006D3 88F8                    	MOV	AL,BH			; Restore original code
  5228 000006D5 EB0C                    	JMP	SHORT NO_MAP
  5229                                  
  5230                                  GOT_CALL:
  5231 000006D7 88E1                    	MOV	CL,AH
  5232 000006D9 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5233                                  CHECK_CODE:
  5234                                  	; 15/05/2019 - Retro DOS v4.0
  5235 000006DB 2E                      	cs
  5236 000006DC AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5237                                  
  5238                                  	; 18/07/2018
  5239                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5240                                  
  5241 000006DD 38F8                    	CMP	AL,BH			; Code OK?
  5242 000006DF 7402                    	JZ	short NO_MAP		; Yes
  5243 000006E1 E2F8                    	LOOP	CHECK_CODE
  5244                                  NO_MAP:
  5245 000006E3 30E4                    	XOR	AH,AH			; AX is now valid code
  5246 000006E5 5B                      	POP	BX
  5247 000006E6 59                      	POP	CX
  5248 000006E7 5E                      	POP	SI
  5249 000006E8 1F                      	POP	DS
  5250 000006E9 C3                      	retn
  5251                                  
  5252                                  	;EndProc ETAB_LK
  5253                                  
  5254                                  ; 18/07/2018 - Retro DOS v3.0
  5255                                  ;---------------------------------------------------------------------------
  5256                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5257                                  
  5258                                  ;IF installed ; (*)
  5259                                  
  5260                                  ;---------------------------------------------------------------------------
  5261                                  ;
  5262                                  ; Procedure Name : SetBad
  5263                                  ;
  5264                                  ; SetBad sets up info for bad functions
  5265                                  ;
  5266                                  ;---------------------------------------------------------------------------
  5267                                  
  5268                                  SetBad:
  5269                                  	;mov	ax,1
  5270 000006EA B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5271                                  
  5272                                  	; MSDOS 3.3
  5273                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5274                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5275                                  
  5276                                  ;	set up ds to point to DOSDATA
  5277                                  
  5278                                  	; 15/05/2019 - Retro DOS v4.0
  5279                                  	; MSDOS 6.0
  5280 000006ED 1E                      	push	ds
  5281                                  
  5282                                  	;getdseg <ds>
  5283 000006EE 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5284                                  
  5285 000006F3 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5286                                  
  5287 000006F8 1F                      	pop	ds	  	;hkn; restore ds
  5288                                  
  5289 000006F9 F9                      	STC
  5290 000006FA C3                      	retn
  5291                                  
  5292                                  ;--------------------------------------------------------------------------
  5293                                  ;
  5294                                  ; Procedure Name : BadCall
  5295                                  ;
  5296                                  ; BadCall is the initial routine for bad function calls
  5297                                  ;
  5298                                  ;--------------------------------------------------------------------------
  5299                                  
  5300                                  BadCall:
  5301 000006FB E8ECFF                  	call	SetBad
  5302 000006FE CB                      	retf
  5303                                  
  5304                                  ;--------------------------------------------------------------------------
  5305                                  ;
  5306                                  ; OKCall always sets carry to off.
  5307                                  ;
  5308                                  ;-----------------------------------------------------------------------
  5309                                  
  5310                                  OKCall:
  5311 000006FF F8                      	CLC
  5312 00000700 CB                      	retf
  5313                                  
  5314                                  ;---------------------------------------------------------------------------
  5315                                  ;
  5316                                  ; Procedure Name : INT2F
  5317                                  ;
  5318                                  ; INT 2F handler works as follows:
  5319                                  ;   PUSH    AX
  5320                                  ;   MOV     AX,multiplex:function
  5321                                  ;   INT     2F
  5322                                  ;   POP     ...
  5323                                  ; The handler itself needs to make the AX available for the various routines.
  5324                                  ;
  5325                                  ;----------------------------------------------------------------------------
  5326                                  
  5327                                  ; 15/05/2019 - Retro DOS v4.0
  5328                                  
  5329                                  ;KERNEL_SEGMENT equ 70h
  5330                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5331                                  DOSBIODATASEG equ 70h
  5332                                  
  5333                                  ; retrodos4.s - offset in BIOSDATA
  5334                                  bios_i2f equ 5
  5335                                  
  5336                                  ;PUBLIC	Int2F
  5337                                  ;INT2F	PROC	FAR
  5338                                  
  5339                                  ; 15/05/2019
  5340                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5341                                  
  5342                                  ; 04/11/2022
  5343                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5344                                  
  5345                                  	; 05/01/2024	
  5346                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5347                                  	; 18/07/2018 - Retro DOS v3.0
  5348                                  INT2F:
  5349                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5350                                  INT2FNT:
  5351                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5352 00000701 FB                      	STI
  5353                                  	;cmp	ah,11h
  5354 00000702 80FC11                  	CMP	AH,MultNET
  5355 00000705 750A                    	JNZ	short INT2FSHR
  5356                                  TestInstall:
  5357 00000707 08C0                    	OR	AL,AL
  5358 00000709 7403                    	JZ	short Leave2F
  5359                                  BadFunc:
  5360 0000070B E8DCFF                  	CALL	SetBad
  5361                                  
  5362                                  	;entry	Leave2F
  5363                                  Leave2F:
  5364 0000070E CA0200                  	RETF	2			; long return + clear flags off stack
  5365                                  
  5366                                  INT2FSHR:
  5367                                  	;cmp	ah,10h
  5368 00000711 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5369 00000714 74F1                    	JZ	short TestInstall	; yes, check for installation
  5370                                  INT2FNLS:
  5371                                  	;cmp	ah,14h
  5372 00000716 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5373 00000719 74EC                    	JZ	short TestInstall	; yes check for installation
  5374                                  INT2FDOS:
  5375                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5376                                  
  5377                                  	; 18/07/2018
  5378                                  	; MSDOS 3.3
  5379                                  	;;cmp	ah,12h	
  5380                                  	;CMP	AH,MultDOS
  5381                                  	;jz	short DispatchDOS
  5382                                  	;iret
  5383                                  
  5384                                  	; 15/05/2019
  5385                                  	; MSDOS 6.0
  5386                                  	;cmp	ah,12h	; 07/12/2022
  5387 0000071B 80FC12                  	CMP	AH,MultDOS
  5388 0000071E 7503                    	JNZ	short check_win		;check if win386 broadcast
  5389 00000720 E9F201                  	jmp	DispatchDOS
  5390                                  
  5391                                  	; .... win386 .... 
  5392                                  
  5393                                  check_win:
  5394                                  	;cmp	ah,16h
  5395 00000723 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5396 00000726 7408                    	je	short Win386_Msg
  5397                                  
  5398                                  	; M044
  5399                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5400                                  	; of Windows. If so, do special action of going and saving last para
  5401                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5402                                  	; bug
  5403                                  
  5404 00000728 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5405                                  	;jne	short next_i2f		; no, chain on
  5406                                  	; 15/12/2022
  5407                                  	;jmp	winold_swap		; yes, do desired action
  5408 0000072B 7442                    	je	short winold_swap
  5409 0000072D E90501                  	jmp	next_i2f
  5410                                  
  5411                                  	; 15/12/2022
  5412                                  ;next_i2f:
  5413                                  ;	;;;jmp	bios_i2f
  5414                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5415                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5416                                  ;	; 04/11/2022
  5417                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5418                                  
  5419                                  ;	IRET				; This assume that we are at the head
  5420                                  					; of the list
  5421                                  ;INT2F	ENDP
  5422                                  
  5423                                  ; 15/05/2019 - Retro DOS v4.0
  5424                                  
  5425                                  ; We have received a message from Win386. There are three possible
  5426                                  ; messages we could get from Win386:
  5427                                  ;
  5428                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5429                                  ;		  to the Win386 startup info structure.
  5430                                  ; Exit		- for this, we clear the IsWin386 flag.
  5431                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5432                                  ;		  has already been handled. this is indicated by setting
  5433                                  ;		  CX to a non-zero value.
  5434                                  
  5435                                  Win386_Msg:
  5436 00000730 1E                      	push	ds
  5437                                  
  5438                                  	;getdseg <DS>			; ds is DOSDATA
  5439 00000731 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5440                                  
  5441                                  	; For WIN386 2.xx instance data
  5442                                  
  5443 00000736 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5444 00000738 7503                    	jne	short Win386_Msg_exit
  5445 0000073A E92A01                  	jmp	OldWin386Init		; yes, return instance data
  5446                                  Win386_Msg_exit:
  5447 0000073D 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5448 0000073F 7503                    	jne	short Win386_Msg_devcall
  5449 00000741 E92C01                  	jmp	Win386_Leaving
  5450                                  Win386_Msg_devcall:
  5451 00000744 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5452 00000746 7503                    	jne	short Win386_Msg_init
  5453 00000748 E96001                  	jmp	Win386_Query
  5454                                  Win386_Msg_init:
  5455 0000074B 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5456 0000074D 7403                    	je	short Win386_Starting
  5457 0000074F E9E200                  	jmp	win_nexti2f		; no, return
  5458                                  Win386_Starting:
  5459                                  	; 17/12/2022
  5460 00000752 F6C201                  	test	dl,1
  5461                                  	;test	dx,1			; is this really win386?
  5462 00000755 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5463 00000757 E9DA00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5464                                  Win386_vchk:
  5465                                  	; M018 -- start of block changes
  5466                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5467                                  	; than 030Ah, we skip the VxD presence check
  5468                                  
  5469                                  ;M067 -- Begin changes
  5470                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5471                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5472                                  ;So, we null out the VxD ptr before the check.
  5473                                  
  5474                                  	;mov	word [Win386_Info+6],0
  5475 0000075A C706[E80F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5476                                  	;mov	word [Win386_Info+8],0
  5477 00000760 C706[EA0F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5478                                  
  5479                                  ;M067 -- End changes
  5480                                  
  5481                                  ;ifdef JAPAN
  5482                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5483                                  ;else
  5484 00000766 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5485                                  ;endif
  5486                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5487 0000076A 724E                    	jb	short Win386_vxd
  5488 0000076C E9DD00                  	jmp	noVxD31
  5489                                  
  5490                                  	; 15/12/2022
  5491                                  winold_swap:
  5492 0000076F 1E                      	push	ds
  5493 00000770 06                      	push	es
  5494 00000771 56                      	push	si
  5495 00000772 57                      	push	di
  5496 00000773 51                      	push	cx
  5497                                  
  5498                                  	;getdseg <ds>			;ds = DOSDATA
  5499 00000774 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5500                                  
  5501 00000779 3C01                    	cmp	al,1			;swap Windows out call
  5502 0000077B 751B                    	jne	short swapin		;no, check if Swap in call
  5503 0000077D E88801                  	call	getwinlast
  5504 00000780 1E                      	push	ds
  5505 00000781 07                      	pop	es
  5506 00000782 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5507 00000784 31F6                    	xor	si,si
  5508 00000786 BF[0600]                	mov	di,WinoldPatch1
  5509 00000789 B90800                  	mov	cx,8
  5510 0000078C FC                      	cld
  5511 0000078D 51                      	push	cx
  5512 0000078E F3A4                    	rep	movsb			;save first 8 bytes
  5513 00000790 59                      	pop	cx
  5514 00000791 BF[CD0D]                	mov	di,WinoldPatch2
  5515 00000794 F3A4                    	rep	movsb			;save next 8 bytes
  5516 00000796 EB1B                    	jmp	short winold_done
  5517                                  swapin:
  5518 00000798 3C02                    	cmp	al,2			;swap Windows in call?
  5519 0000079A 7517                    	jne	short winold_done	;no, something else, pass it on
  5520 0000079C E86901                  	call	getwinlast
  5521 0000079F 8EC6                    	mov	es,si
  5522 000007A1 31FF                    	xor	di,di
  5523 000007A3 BE[0600]                	mov	si,WinoldPatch1
  5524 000007A6 B90800                  	mov	cx,8
  5525 000007A9 FC                      	cld
  5526 000007AA 51                      	push	cx
  5527 000007AB F3A4                    	rep	movsb			;restore first 8 bytes
  5528 000007AD 59                      	pop	cx
  5529 000007AE BE[CD0D]                	mov	si,WinoldPatch2
  5530 000007B1 F3A4                    	rep	movsb			;restore next 8 bytes
  5531                                  winold_done:
  5532 000007B3 59                      	pop	cx
  5533 000007B4 5F                      	pop	di
  5534 000007B5 5E                      	pop	si
  5535 000007B6 07                      	pop	es
  5536 000007B7 1F                      	pop	ds
  5537 000007B8 EB7B                    	jmp	short next_i2f		;chain on
  5538                                  	; 15/12/2022
  5539                                  	;jmp	next_i2f	
  5540                                  
  5541                                  Win386_vxd:
  5542 000007BA 50                      	push	ax
  5543 000007BB 53                      	push	bx
  5544 000007BC 51                      	push	cx
  5545 000007BD 52                      	push	dx
  5546 000007BE 56                      	push	si
  5547 000007BF 57                      	push	di			; save regs !!dont change order!!
  5548                                  
  5549 000007C0 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5550 000007C4 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5551 000007C7 741F                    	je	short Vxd31		; N: continue
  5552                                  					; Y: save arena associated with 
  5553                                  					;    umb_head
  5554                                  
  5555 000007C9 C606[DA0D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5556                                  					; umb_arena
  5557 000007CE 1E                      	push	ds
  5558 000007CF 06                      	push	es
  5559                                  
  5560                                  	;mov	ax,ds
  5561                                  	;mov	es,ax			; es - > dosdata
  5562                                  	; 05/01/2024
  5563 000007D0 1E                      	push	ds
  5564 000007D1 07                      	pop	es
  5565                                  
  5566 000007D2 8EDB                    	mov	ds,bx
  5567 000007D4 31F6                    	xor	si,si			; ds:si -> umb_head
  5568                                  
  5569 000007D6 FC                      	cld
  5570                                  
  5571 000007D7 BF[1F12]                	mov	di,UmbSave1
  5572 000007DA B90B00                  	mov	cx,11
  5573 000007DD F3A4                    	rep	movsb
  5574                                  
  5575 000007DF BF[D50D]                	mov	di,UmbSave2
  5576                                  	;mov	cx,5
  5577                                  	; 18/12/2022
  5578 000007E2 B105                    	mov	cl,5
  5579 000007E4 F3A4                    	rep	movsb	
  5580                                  
  5581 000007E6 07                      	pop	es
  5582 000007E7 1F                      	pop	ds			; M062 - End
  5583                                  
  5584                                  Vxd31:
  5585                                  	;test	byte [DOS_FLAG],2
  5586 000007E8 F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5587 000007ED 7408                    	jz	short Dont_Supress		; M066
  5588 000007EF 5F                      	pop	di				; M066
  5589 000007F0 5E                      	pop	si				; M066
  5590 000007F1 5A                      	pop	dx				; M066
  5591 000007F2 59                      	pop	cx				; M066
  5592 000007F3 5B                      	pop	bx				; M066
  5593 000007F4 58                      	pop	ax				; M066
  5594 000007F5 EB55                    	jmp	short noVxD31			; M066
  5595                                  
  5596                                  	; We check here if the VxD is available in the root of the boot drive. 
  5597                                  	; We do an extended open to suppress any error messages
  5598                                  	
  5599                                  Dont_Supress:
  5600 000007F7 A0[6900]                	mov	al,[BOOTDRIVE]
  5601 000007FA 0440                    	add	al,'A' - 1		; get drive letter
  5602 000007FC A2[3110]                	mov	[VxDpath],al		; path is root of bootdrive
  5603                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5604                                  	;mov	al,0			; no extended attributes
  5605                                  	; 18/12/2022
  5606 000007FF B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5607 00000802 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5608                                  					; no inherit, suppress crit err
  5609 00000805 B90700                  	mov	cx,7			; hidden,system,read-only attr
  5610 00000808 BA0100                  	mov	dx,1			; fail if file does not exist
  5611 0000080B BE[3110]                	mov	si,VxDpath	
  5612                                  					; path of VxD file
  5613 0000080E BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5614                                  
  5615 00000811 CD21                    	int	21h			; do extended open
  5616                                  
  5617 00000813 5F                      	pop	di
  5618 00000814 5E                      	pop	si
  5619 00000815 5A                      	pop	dx
  5620 00000816 59                      	pop	cx
  5621                                  
  5622 00000817 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5623                                  
  5624                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5625                                  	; to indicate error to Windows after displaying message to user that 
  5626                                  	; VxD needs to be present to run Windows in enhanced mode.
  5627                                  
  5628 00000819 52                      	push	dx
  5629 0000081A 1E                      	push	ds
  5630 0000081B 56                      	push	si
  5631 0000081C BE[B109]                	mov	si,NoVxDErrMsg
  5632 0000081F 0E                      	push	cs
  5633 00000820 1F                      	pop	ds
  5634 00000821 B96300                  	mov	cx,VxDMesLen ; 99	;
  5635 00000824 B402                    	mov	ah,2			; write char to console
  5636 00000826 FC                      	cld
  5637                                  vxdlp:
  5638 00000827 AC                      	lodsb
  5639 00000828 86D0                    	xchg	dl,al			; get char in dl
  5640 0000082A CD21                    	int	21h
  5641 0000082C E2F9                    	loop	vxdlp
  5642                                  
  5643 0000082E 5E                      	pop	si
  5644 0000082F 1F                      	pop	ds
  5645 00000830 5A                      	pop	dx
  5646 00000831 5B                      	pop	bx
  5647 00000832 58                      	pop	ax			;all registers restored
  5648 00000833 41                      	inc	cx			;cx != 0 to indicate error
  5649                                  	; 15/12/22022
  5650                                  	;jmp	win_nexti2f		;chain on
  5651                                  	;jmp	short win_nexti2f
  5652                                  
  5653                                  	; 15/12/2022
  5654                                  win_nexti2f:
  5655 00000834 1F                      	pop	ds
  5656                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5657                                  	; 15/12/2022
  5658                                  next_i2f:
  5659                                  	;;;jmp	bios_i2f
  5660                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5661                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5662                                  	; 04/11/2022
  5663 00000835 EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5664                                  
  5665                                  VxDthere:
  5666 0000083A 89C3                    	mov	bx,ax
  5667 0000083C B43E                    	mov	ah,CLOSE ; 3Eh
  5668 0000083E CD21                    	int	21h			;close the file
  5669                                  
  5670                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5671                                  
  5672                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5673                                  	;mov	bx,Win386_Info
  5674                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5675                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5676                                  	; 15/12/2022
  5677 00000840 C706[E80F][3110]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5678 00000846 8C1E[EA0F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5679                                  
  5680 0000084A 5B                      	pop	bx
  5681 0000084B 58                      	pop	ax
  5682                                  noVxD31:
  5683                                  	; M018; End of block changes
  5684                                  
  5685 0000084C 800E[3010]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5686 00000851 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5687                                  
  5688                                  	; M002;
  5689                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5690                                  
  5691 00000856 52                      	push	dx			; M002
  5692 00000857 89DA                    	mov	dx,bx			; M002
  5693                                  					; point ES:BX to Win386_Info ; M002
  5694 00000859 BB[E20F]                	mov	bx,Win386_Info 
  5695 0000085C 895702                  	mov	[bx+2],dx		; M002
  5696 0000085F 8C4704                  	mov	[bx+4],es		; M002
  5697 00000862 5A                      	pop	dx			; M002
  5698 00000863 1E                      	push	ds			; M002
  5699 00000864 07                      	pop	es			; M002
  5700                                  	;jmp	win_nexti2f		; M002
  5701                                  	; 15/12/2022
  5702 00000865 EBCD                    	jmp	short win_nexti2f
  5703                                  
  5704                                  	; 15/12/2022
  5705                                  	; Code to return Win386 2.xx instance table
  5706                                  OldWin386Init:
  5707 00000867 58                      	pop	ax			; discard ds pushed on stack
  5708 00000868 BE[E711]                	mov	si,OldInstanceJunk 
  5709                                  					; ds:si = instance table
  5710 0000086B B84852                  	mov	ax,5248h ; 'HR'		; indicate instance data present
  5711                                  	;jmp	next_i2f
  5712                                  	; 15/12/2022
  5713 0000086E EBC5                    	jmp	short next_i2f
  5714                                  
  5715                                  Win386_Leaving:
  5716                                  	; 15/12/2022
  5717 00000870 F6C201                  	test 	dl,1
  5718                                  	;test	dx,1			; is this really win386?
  5719                                  	;jz	short Win386_Leaving_c
  5720                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5721                                  	; 15/12/2022
  5722 00000873 75BF                    	jnz	short win_nexti2f	
  5723                                  
  5724                                  Win386_Leaving_c:
  5725                                  					; M062 - Start
  5726 00000875 803E[DA0D]01            	cmp	byte [UmbSaveFlag],1	; Q: was umb_arena saved at win start
  5727                                  					;    up.
  5728 0000087A 7523                    	jne	short noumb		; N: not saved 
  5729 0000087C C606[DA0D]00            	mov	byte [UmbSaveFlag],0	; Y: clear UmbSaveFlag and restore 
  5730                                  					;    previously saved umb_head
  5731                                  	; 05/01/2024
  5732                                  	;push	ax ; (not necessary)
  5733 00000881 06                      	push	es
  5734 00000882 51                      	push	cx
  5735 00000883 56                      	push	si
  5736 00000884 57                      	push	di
  5737                                  
  5738                                  	;mov	ax,[UMB_HEAD]
  5739                                  	;mov	es,ax
  5740                                  	; 05/01/2024
  5741 00000885 8E06[8C00]              	mov	es,[UMB_HEAD]
  5742 00000889 31FF                    	xor	di,di			; es:di -> umb_head
  5743                                  
  5744 0000088B FC                      	cld
  5745                                  
  5746 0000088C BE[1F12]                	mov	si,UmbSave1
  5747 0000088F B90B00                  	mov	cx,11
  5748 00000892 F3A4                    	rep	movsb
  5749 00000894 BE[D50D]                	mov	si,UmbSave2
  5750                                  	;mov	cx,5
  5751                                  	; 18/12/2022
  5752 00000897 B105                    	mov	cl,5
  5753 00000899 F3A4                    	rep	movsb
  5754                                  
  5755 0000089B 5F                      	pop	di
  5756 0000089C 5E                      	pop	si
  5757 0000089D 59                      	pop	cx
  5758 0000089E 07                      	pop	es
  5759                                  	; 05/01/2024
  5760                                  	;pop	ax
  5761                                  noumb:					; M062 - End
  5762 0000089F 8026[3010]00            	and	byte [IsWin386],0	; Win386 is gone
  5763 000008A4 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5764 000008A9 EB89                    	jmp	short win_nexti2f
  5765                                  
  5766                                  ;	; 15/12/2022
  5767                                  ;	; Code to return Win386 2.xx instance table
  5768                                  ;OldWin386Init:
  5769                                  ;	pop	ax			; discard ds pushed on stack
  5770                                  ;	mov	si,OldInstanceJunk 
  5771                                  ;					; ds:si = instance table
  5772                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5773                                  ;	;jmp	next_i2f
  5774                                  ;	; 15/12/2022
  5775                                  ;	jmp	short _next_i2f
  5776                                  
  5777                                  Win386_Query:
  5778 000008AB 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5779 000008AE 7584                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5780 000008B0 09C9                    	or	cx,cx			; is it an instance query?
  5781 000008B2 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5782 000008B4 41                      	inc	cx			; indicate that data is instanced
  5783                                  ;
  5784                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5785                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5786                                  ; M001;  
  5787                                  ; M001; OFFSETS STRUC
  5788                                  ; M001; 	Major_version	db	?
  5789                                  ; M001; 	Minor_version	db	?
  5790                                  ; M001; 	SaveDS		dw	?
  5791                                  ; M001; 	SaveBX		dw	?
  5792                                  ; M001; 	Indos		dw	?
  5793                                  ; M001; 	User_id		dw	?
  5794                                  ; M001; 	CritPatch	dw	?
  5795                                  ; M001; OFFSETS	ENDS
  5796                                  ; M001; 
  5797                                  ; M001; User_Id is the only variable really important for proper functioning  
  5798                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5799                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5800                                  ; M001; pass this table because Win386 depends on this table to get the 
  5801                                  ; M001; User_Id offset.
  5802                                  ; M001; 
  5803 000008B5 BB[2210]                	mov	bx,Win386_DOSVars	; M001 
  5804 000008B8 1E                      	push	ds			; M001
  5805 000008B9 07                      	pop	es			; es:bx points at offset table ; M001
  5806 000008BA EB40                    	jmp	short PopIret		; M001
  5807                                  
  5808                                  ; 15/12/2022
  5809                                  ;	; Code to return Win386 2.xx instance table
  5810                                  ;OldWin386Init:
  5811                                  ;	pop	ax			; discard ds pushed on stack
  5812                                  ;	mov	si,OldInstanceJunk 
  5813                                  ;					; ds:si = instance table
  5814                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5815                                  ;	;jmp	next_i2f
  5816                                  ;	; 15/12/2022
  5817                                  ;	jmp	short _next_i2f
  5818                                  
  5819                                  dosmgr_func:
  5820 000008BC 49                      	dec	cx
  5821 000008BD 7435                    	jz	short win386_patch	; call to patch DOS
  5822 000008BF 49                      	dec	cx
  5823 000008C0 743A                    	jz	short PopIret		; remove DOS patches, ignore
  5824 000008C2 49                      	dec	cx
  5825 000008C3 7439                    	jz	short win386_size	; get size of DOS data structures
  5826 000008C5 49                      	dec	cx
  5827 000008C6 7428                    	jz	short win386_inst	; instance more data
  5828                                  	;dec	cx
  5829                                  	;jnz	short PopIret		; no functions above this
  5830                                  	; 05/01/2024 (PCDOS 7.1 IBMDOS.COM DOSCODE:4771h)
  5831 000008C8 E232                    	loop	PopIret
  5832                                  
  5833                                  	; Get DOS device driver size -- es:di points at device driver header
  5834                                  	; In DOS 4.x, the para before the device header contains an arena 
  5835                                  	; header for the driver.
  5836                                  
  5837 000008CA 8CC0                    	mov	ax,es			; ax = device header segment
  5838                                  
  5839                                  	; We check to see if we have a memory arena for this device driver. 
  5840                                  	; The way to do this would be to look at the previous para to see if
  5841                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5842                                  	; in the arena is the same as the device header segment. These two 
  5843                                  	; checks together should take care of all cases
  5844                                  
  5845 000008CC 48                      	dec	ax			; get arena header
  5846 000008CD 06                      	push	es
  5847 000008CE 8EC0                    	mov	es,ax			; arena header for device driver
  5848                                  
  5849 000008D0 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5850 000008D4 7517                    	jnz	short cantsize		; no, cant size this driver
  5851 000008D6 40                      	inc	ax			; get back device header segment
  5852 000008D7 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5853 000008DB 7510                    	jnz	short cantsize		; no, not a proper arena
  5854                                  
  5855 000008DD 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5856 000008E1 07                      	pop	es
  5857                                  
  5858                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5859                                  	; Speed is not critical and so we choose the shortest method 
  5860                                  	; -- use "mul"
  5861                                  
  5862 000008E2 BB1000                  	mov	bx,16
  5863 000008E5 F7E3                    	mul	bx
  5864 000008E7 89C1                    	mov	cx,ax
  5865 000008E9 89D3                    	mov	bx,dx
  5866 000008EB EB09                    	jmp	short win386_done	; return with device driver size
  5867                                  cantsize:
  5868 000008ED 07                      	pop	es
  5869 000008EE 31C0                    	xor	ax,ax
  5870                                  win386_inst:	; 05/01/2024
  5871 000008F0 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5872 000008F2 EB08                    	jmp	short PopIret		; return
  5873                                  
  5874                                  win386_patch:
  5875                                  	; dx contains bits marking the patches to be applied. We return 
  5876                                  	; the field with all bits set to indicate that all patches have been
  5877                                  	; done
  5878                                  
  5879 000008F4 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5880                                   	;jmp	short win386_done	; done, return
  5881                                  	; 15/12/2022
  5882                                  	; 15/12/2022
  5883                                  win386_done:
  5884 000008F6 B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5885 000008F9 BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5886                                  PopIret:
  5887 000008FC 1F                      	pop	ds
  5888 000008FD CF                      	iret	
  5889                                  
  5890                                  win386_size:
  5891                                  	; Return the size of DOS data structures -- currently only CDS size
  5892                                  
  5893                                  	; 17/12/2022
  5894 000008FE F6C201                  	test	dl,1
  5895                                  	;test	dx,1			; check for CDS size bit
  5896 00000901 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5897                                  
  5898 00000903 B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5899 00000906 EBEE                    	jmp	short win386_done	; return with the size
  5900                                  
  5901                                  ; 05/01/2024
  5902                                  %if 0
  5903                                  win386_inst:
  5904                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device
  5905                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5906                                  	; this by returning a status of not previously instanced. The basic
  5907                                  	; structure of these things have not changed and so the current
  5908                                  	; DOSMGR code should be able to work it out
  5909                                  
  5910                                  	xor	dx,dx			; make sure dx has a not done value
  5911                                  	jmp	short PopIret		; skip done indication
  5912                                  %endif
  5913                                  
  5914                                  	; 15/12/2022
  5915                                  ;win386_done:
  5916                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5917                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5918                                  ;PopIret:
  5919                                  ;	pop	ds
  5920                                  ;	iret				; return back up the chain
  5921                                  
  5922                                  	; 15/12/2022
  5923                                  ;win_nexti2f:
  5924                                  	;pop	ds
  5925                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5926                                  
  5927                                  ;End WIN386 support
  5928                                  
  5929                                  ; 15/05/2019
  5930                                  
  5931                                  ;M044; Start of changes
  5932                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5933                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5934                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5935                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5936                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5937                                  ; in leading to a crash. Winoldap issues callouts when it swaps Windows out
  5938                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5939                                  ; last para of the Windows memory block and then restore this para on the
  5940                                  ; Windows swapin callout. 
  5941                                  
  5942                                  getwinlast:
  5943                                  	; 07/12/2022
  5944 00000908 8B36[3003]              	mov	si,[CurrentPDB]
  5945 0000090C 4E                      	dec	si
  5946 0000090D 8EC6                    	mov	es,si
  5947 0000090F 2603360300              	add	si,[es:3]
  5948 00000914 C3                      	retn
  5949                                  
  5950                                  ; 15/12/2022
  5951                                  %if 0
  5952                                  winold_swap:
  5953                                  	push	ds
  5954                                  	push	es
  5955                                  	push	si
  5956                                  	push	di
  5957                                  	push	cx
  5958                                  
  5959                                  	;getdseg <ds>			;ds = DOSDATA
  5960                                  	mov	ds,[cs:DosDSeg]
  5961                                  
  5962                                  	cmp	al,1			;swap Windows out call
  5963                                  	jne	short swapin		;no, check if Swap in call
  5964                                  	call	getwinlast
  5965                                  	push	ds
  5966                                  	pop	es
  5967                                  	mov	ds,si			;ds = memory arena of Windows
  5968                                  	xor	si,si
  5969                                  	mov	di,WinoldPatch1
  5970                                  	mov	cx,8
  5971                                  	cld
  5972                                  	push	cx
  5973                                  	rep	movsb			;save first 8 bytes
  5974                                  	pop	cx
  5975                                  	mov	di,WinoldPatch2
  5976                                  	rep	movsb			;save next 8 bytes
  5977                                  	jmp	short winold_done
  5978                                  swapin:
  5979                                  	cmp	al,2			;swap Windows in call?
  5980                                  	jne	short winold_done	;no, something else, pass it on
  5981                                  	call	getwinlast
  5982                                  	mov	es,si
  5983                                  	xor	di,di
  5984                                  	mov	si,WinoldPatch1
  5985                                  	mov	cx,8
  5986                                  	cld
  5987                                  	push	cx
  5988                                  	rep	movsb			;restore first 8 bytes
  5989                                  	pop	cx
  5990                                  	mov	si,WinoldPatch2
  5991                                  	rep	movsb			;restore next 8 bytes
  5992                                  winold_done:
  5993                                  	pop	cx
  5994                                  	pop	di
  5995                                  	pop	si
  5996                                  	pop	es
  5997                                  	pop	ds
  5998                                  	jmp	next_i2f		;chain on
  5999                                  
  6000                                  %endif
  6001                                  
  6002                                  ;M044; End of changes
  6003                                  
  6004                                  ; 15/05/2019
  6005                                  
  6006                                  DispatchDOS:
  6007 00000915 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  6008 0000091A 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  6009 0000091F 50                      	PUSH	AX			; push index
  6010 00000920 55                      	PUSH	BP
  6011 00000921 89E5                    	MOV	BP,SP
  6012                                  		; stack looks like:
  6013                                  		;   0	BP
  6014                                  		;   2	DISPATCH
  6015                                  		;   4	TABLE
  6016                                  		;   6	RETURN
  6017                                  		;   8	LONG-RETURN
  6018                                  		;   C	FLAGS
  6019                                  		;   E	AX
  6020                                  	
  6021 00000923 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6022 00000926 5D                      	POP	BP
  6023 00000927 E8D908                  	call	TableDispatch
  6024 0000092A E9DEFD                  	JMP	BadFunc 		; return indicates invalid function
  6025                                  
  6026                                  INT2F_etcetera:
  6027                                  	;entry	DosGetGroup
  6028                                  DosGetGroup:
  6029                                  	; MSDOS 3.3
  6030                                  	;push	cs
  6031                                  	;pop	ds
  6032                                  	;retn
  6033                                  
  6034                                  	; MSDOS 6.0
  6035                                  ;SR; Cannot use CS now
  6036                                  ;
  6037                                  ;	PUSH	CS
  6038                                  ;	POP	DS
  6039                                  
  6040                                  	; 04/11/2022
  6041                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  6042                                  
  6043                                  	;getdseg <ds>
  6044 0000092D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6045 00000932 C3                      	retn
  6046                                  
  6047                                  	;entry	DOSInstall
  6048                                  DOSInstall:
  6049 00000933 B0FF                    	MOV	AL,0FFh
  6050 00000935 C3                      	retn
  6051                                  
  6052                                  ;ENDIF ; (*)
  6053                                  
  6054                                  
  6055                                  ; 15/05/2019 - Retro DOS v4.0
  6056                                  
  6057                                  ;------------------------------------------------------------------------
  6058                                  ;
  6059                                  ; Procedure Name : RW32_CONVERT
  6060                                  ;
  6061                                  ;Input: same as ABSDRD and ABSDWRT
  6062                                  ;	 ES:BP -> DPB
  6063                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6064                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6065                                  ;	 carry clear, parms ok
  6066                                  ;
  6067                                  ;------------------------------------------------------------------------
  6068                                  
  6069                                  	; 06/01/2024
  6070                                  RW32_CONVERT:
  6071 00000936 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6072 00000939 742A                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6073 0000093B 49                      	dec	cx ; *
  6074 0000093C 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6075 0000093D 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6076 0000093E 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6077 00000942 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6078 00000946 80FAFE                  	CMP	DL,0FEh 		;>32mb  removable ?	;AN000;
  6079 00000949 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6080                                  	;INC	DL			;>32mb			;AN000;
  6081                                  	; 17/12/2022
  6082 0000094B 42                      	inc	dx
  6083 0000094C 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6084 0000094E F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6085 00000950 09D2                    	OR	DX,DX			;>32mb  > 32mb ?	;AN000;
  6086                                  letold:
  6087 00000952 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6088 00000953 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6089 00000954 7425                    	JZ	short old_style	; cf=0	;>32mb  no 		;AN000;
  6090                                  
  6091 00000956 1E                      	push	ds
  6092                                  	;getdseg <ds>
  6093 00000957 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6094 0000095C C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6095 00000962 1F                      	pop	ds
  6096                                  
  6097 00000963 F9                      	STC				;>32mb			;AN000;
  6098 00000964 C3                      	retn				;>32mb			;AN000;
  6099                                  
  6100                                  new32format:
  6101                                  	;mov	dx,[bx+2]
  6102 00000965 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6103                                  
  6104 00000968 1E                      	push	ds			; set up ds to DOSDATA
  6105                                  	;getdseg <ds>
  6106 00000969 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6107 0000096E 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6108 00000972 1F                      	pop	ds
  6109                                  
  6110 00000973 8B17                    	mov	dx,[bx]
  6111                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6112                                  	;mov	cx,[bx+4]
  6113 00000975 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6114                                  	;lds	bx,[bx+6]
  6115 00000978 C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6116                                  old_style:				;>32mb			;AN000;
  6117                                  	; 06/01/2024
  6118                                  	; cf=0
  6119                                  	;CLC				;>32mb			;AN000;
  6120 0000097B C3                      	retn				;>32mb			;AN000;
  6121                                  
  6122                                  ;------------------------------------------------------------------------
  6123                                  ;
  6124                                  ; Procedure Name : Fastxxx_Purge
  6125                                  ;
  6126                                  ; Input: None
  6127                                  ; Functions: Purge Fastopen/ Cache Buffers
  6128                                  ; Output: None
  6129                                  ;
  6130                                  ;------------------------------------------------------------------------
  6131                                  
  6132                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6133                                  
  6134                                  Fastxxx_Purge:
  6135 0000097C 50                      	PUSH	AX			; save regs.	;AN000;
  6136 0000097D 56                      	PUSH	SI						;AN000;
  6137 0000097E 52                      	PUSH	DX						;AN000;
  6138                                  topen:
  6139 0000097F 1E                      	push	ds			; set up ds to DOSDATA
  6140                                  	;getdseg <ds>
  6141 00000980 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6142                                  
  6143 00000985 F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6144                                  					; fastopen installed ?	;AN000;
  6145 0000098A 1F                      	pop	ds
  6146 0000098B 740B                    	JZ	short nofast		; no			;AN000;
  6147 0000098D B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6148                                  dofast:
  6149 0000098F B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6150                                  	;;mov	dl,[es:bp+0]
  6151                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6152                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6153                                  	; 15/12/2022
  6154 00000991 268A5600                	mov	dl,[es:bp]
  6155                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6156 00000995 E8D91C                  	call	Fast_Dispatch
  6157                                  nofast:
  6158 00000998 5A                      	POP	DX						;AN000;
  6159 00000999 5E                      	POP	SI			; restore regs		;AN000;
  6160 0000099A 58                      	POP	AX			 			;AN000;
  6161 0000099B C3                      	retn				; exit
  6162                                  
  6163                                  ;============================================================================
  6164                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6165                                  ;============================================================================
  6166                                  ; 29/04/2019 - Retro DOS v4.0
  6167                                  
  6168                                  ;include dossym.inc
  6169                                  ;include dosmac.inc
  6170                                  ;include doscntry.inc
  6171                                  
  6172                                  ; DOSCODE Segment
  6173                                  
  6174                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6175                                  ; ---------------------------------------------------------------------------
  6176                                  ;include divmes.inc
  6177                                  
  6178                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6179                                  ; -------------------------------------
  6180                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6181                                  
  6182                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6183                                  	;PUBLIC	DIVMES
  6184                                  
  6185 0000099C 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6185 000009A5 6F766572666C6F770D-
  6185 000009AE 0A                 
  6186                                  
  6187                                  	;PUBLIC	DivMesLen
  6188                                  DivMesLen:
  6189 000009AF 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6190                                  
  6191                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6192                                  ; -------------------------------------
  6193                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6194                                  
  6195                                  ; (MSDOS 6.0)
  6196                                  ; VxD not found error message
  6197                                  
  6198                                  NoVxDErrMsg:
  6199 000009B1 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6199 000009BA 686176652074686520-
  6199 000009C3 66696C652057494E41-
  6199 000009CC 32302E33383620696E-
  6199 000009D5 2074686520726F6F74-
  6199 000009DE 206F6620796F757220-
  6199 000009E7 626F6F742064726976-
  6199 000009F0 65                 
  6200 000009F1 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6200 000009FA 57696E646F77732069-
  6200 00000A03 6E20456E68616E6365-
  6200 00000A0C 64204D6F64650D0A   
  6201                                  
  6202                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6203                                  
  6204                                  ; 13/05/2019 - Retro DOS v4.0
  6205                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6206                                  
  6207                                  ;include yesno.asm  (MNSDOS 6.0)
  6208                                  ; -------------------------------------
  6209                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6210                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6211                                  
  6212                                  ; This is for country Yes and No
  6213                                  
  6214 00000A14 59                      NLS_YES:	db 'Y'
  6215 00000A15 4E                      NLS_NO:		db 'N'
  6216 00000A16 79                      NLS_yes2:	db 'y'
  6217 00000A17 6E                      NLS_no2:	db 'n'
  6218                                  
  6219                                  ; ---------------------------------------------------------------------------
  6220                                  
  6221                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6222                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6223                                  
  6224                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6225                                  
  6226                                  ; The following two tables implement the current buffered input editing
  6227                                  ; routines. The tables are pairwise associated in reverse order for ease
  6228                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6229                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6230                                  
  6231                                  	;PUBLIC	CANCHAR
  6232                                  CANCHAR:
  6233 00000A18 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6234                                  	
  6235                                  	;PUBLIC	ESCCHAR
  6236                                  ESCCHAR:
  6237 00000A19 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6238                                  	
  6239                                  	;IF	NOT Rainbow
  6240                                  
  6241                                  ESCTAB:	; LABEL BYTE
  6242                                  
  6243                                  	;IF	IBM
  6244 00000A1A 40                      	DB	64		; Ctrl-Z - F6
  6245 00000A1B 4D                      	DB	77		; Copy one char - -->
  6246 00000A1C 3B                      	DB	59		; Copy one char - F1
  6247 00000A1D 53                      	DB	83		; Skip one char - DEL
  6248 00000A1E 3C                      	DB	60		; Copy to char - F2
  6249 00000A1F 3E                      	DB	62		; Skip to char - F4
  6250 00000A20 3D                      	DB	61		; Copy line - F3
  6251 00000A21 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6252 00000A22 3F                      	DB	63		; Reedit line (new template) - F5
  6253 00000A23 4B                      	DB	75		; Backspace - <--
  6254 00000A24 52                      	DB	82		; Enter insert mode - INS (toggle)
  6255 00000A25 52                      	DB	82		; Exit insert mode - INS (toggle)
  6256 00000A26 41                      	DB	65		; Escape character - F7
  6257 00000A27 41                      	DB	65		; End of table
  6258                                  	;ENDIF
  6259                                  
  6260                                  ESCEND: ; LABEL BYTE
  6261                                  
  6262                                  ESCTABLEN EQU ESCEND-ESCTAB
  6263                                  
  6264                                  ESCFUNC: ; LABEL WORD
  6265                                  	
  6266 00000A28 [EE13]                  	short_addr  GETCH	; Ignore the escape sequence
  6267 00000A2A [6B14]                  	short_addr  TWOESC
  6268 00000A2C [6015]                  	short_addr  EXITINS
  6269 00000A2E [6015]                  	short_addr  ENTERINS
  6270 00000A30 [6614]                  	short_addr  BACKSP
  6271 00000A32 [4C15]                  	short_addr  REEDIT
  6272 00000A34 [5314]                  	short_addr  KILNEW
  6273 00000A36 [E214]                  	short_addr  COPYLIN
  6274 00000A38 [1415]                  	short_addr  SKIPSTR
  6275 00000A3A [E814]                  	short_addr  COPYSTR
  6276 00000A3C [0B15]                  	short_addr  SKIPONE
  6277 00000A3E [ED14]                  	short_addr  COPYONE
  6278 00000A40 [ED14]                  	short_addr  COPYONE
  6279 00000A42 [6715]                  	short_addr  CTRLZ
  6280                                  
  6281                                  	;ENDIF
  6282                                  
  6283                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6284                                  ; ---------------------------------------------------------------------------
  6285                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6286                                  
  6287                                  ; OEMFunction key is expected to process a single function
  6288                                  ;   key input from a device and dispatch to the proper
  6289                                  ;   routines leaving all registers UNTOUCHED.
  6290                                  ;
  6291                                  ; Inputs:   CS, SS are DOSGROUP
  6292                                  ; Outputs:  None. This function is expected to JMP to onw of
  6293                                  ;           the following labels:
  6294                                  ;
  6295                                  ;           GetCh       - ignore the sequence
  6296                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6297                                  ;           ExitIns     - toggle insert mode
  6298                                  ;           EnterIns    - toggle insert mode
  6299                                  ;           BackSp      - move backwards one space
  6300                                  ;           ReEdit      - reedit the line with a new template
  6301                                  ;           KilNew      - discard the current line and start from scratch
  6302                                  ;           CopyLin     - copy the rest of the template into the line
  6303                                  ;           SkipStr     - read the next character and skip to it in the template
  6304                                  ;           CopyStr     - read next char and copy from template to line until char
  6305                                  ;           SkipOne     - advance position in template one character
  6306                                  ;           CopyOne     - copy next character in template into line
  6307                                  ;           CtrlZ       - place a ^Z into the template
  6308                                  ; Registers that are allowed to be modified by this function are:
  6309                                  ;           AX, CX, BP
  6310                                  
  6311                                  ; 13/05/2019 - Retro DOS v4.0
  6312                                  ; -------------------------------------
  6313                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6314                                  
  6315                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6316                                  ; -------------------------------------
  6317                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6318                                  
  6319                                  OEMFunctionKey:
  6320 00000A44 E80A09                  	CALL	_$STD_CON_INPUT_NO_ECHO	; Get the second byte of the sequence
  6321 00000A47 B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6322 00000A49 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6323 00000A4A BF[1A0A]                	MOV     DI,ESCTAB		; offset of second byte table
  6324 00000A4D 06                      	push	es
  6325 00000A4E 0E                      	push	cs
  6326 00000A4F 07                      	pop	es
  6327 00000A50 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6328 00000A52 07                      	pop	es
  6329 00000A53 5F                      	POP     DI                      ; restore DI
  6330 00000A54 D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6331 00000A56 89CD                    	MOV     BP,CX                   ; move to indexable register
  6332                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6333 00000A58 2EFFA6[280A]            	JMP	word [CS:BP+ESCFUNC]
  6334                                  
  6335                                  ;DOSCODE ENDS
  6336                                  	
  6337                                  ;============================================================================
  6338                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6339                                  ;============================================================================
  6340                                  ; Retro DOS v3.0 - 18/07/2018
  6341                                  
  6342                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6343                                  ;----------------------------------------------------------------------------
  6344                                  ; Retro DOS v2.0 - 13/03/2018
  6345                                  
  6346                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6347                                  
  6348                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6349                                  
  6350                                  ;**	$GET_DATE - Get Current Date
  6351                                  ;----------------------------------------
  6352                                  ;	ENTRY	none
  6353                                  ;	EXIT	(cx:dx) = current date
  6354                                  ;	USES	all
  6355                                  
  6356                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6357                                  
  6358                                  _$GET_DATE:	;System call 42
  6359                                  
  6360 00000A5D 16                      	PUSH	SS
  6361 00000A5E 1F                      	POP	DS
  6362 00000A5F E8AD00                  	CALL	READTIME	;Check for rollover to next day
  6363 00000A62 A1[5203]                	MOV	AX,[YEAR]
  6364                                  
  6365                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6366                                  
  6367 00000A65 8B1E[5003]              	MOV	BX,[DAY]	; fetch both day and month
  6368 00000A69 E819FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6369                                  	;MOV	[SI+6],BX	;DH=month, DL=day
  6370 00000A6C 895C06                  	MOV	[SI+user_env.user_DX],BX
  6371 00000A6F 05BC07                  	ADD	AX,1980		;Put bias back
  6372                                  	;MOV	[SI+4],AX	;CX=year
  6373 00000A72 894404                  	MOV	[SI+user_env.user_CX],AX
  6374 00000A75 36A0[5603]              	MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6375                                  RET20:	; 05/11/2022
  6376                                  RET24:	; 18/12/2022
  6377 00000A79 C3                      	RETN
  6378                                  
  6379                                  ;**	$SET_DATE - Set Current Date
  6380                                  ;----------------------------------------
  6381                                  ;	ENTRY	(cx:dx) = current date
  6382                                  ;	EXIT	(al) = -1 iff bad date
  6383                                  ;		(al) = 0 if ok
  6384                                  ;	USES	all
  6385                                  
  6386                                  _$SET_DATE:	;System call 43
  6387                                  
  6388 00000A7A B0FF                    	MOV	AL,-1		;Be ready to flag error
  6389 00000A7C 81E9BC07                	SUB	CX,1980		;Fix bias in year
  6390                                  	;JC	SHORT RET24	;Error if not big enough
  6391                                  	; 05/11/2022
  6392 00000A80 72F7                    	jc	short RET20
  6393 00000A82 83F977                  	CMP	CX,119		;Year must be less than 2100
  6394 00000A85 77F2                    	JA	SHORT RET24
  6395 00000A87 08F6                    	OR	DH,DH
  6396                                  	;JZ	SHORT RET24
  6397                                   	; 05/11/2022
  6398 00000A89 74EE                    	jz	short RET20
  6399 00000A8B 08D2                    	OR	DL,DL
  6400                                  	;JZ	SHORT RET24	;Error if either month or day is 0
  6401                                  	; 05/11/2022
  6402 00000A8D 74EA                    	jz	short RET20
  6403 00000A8F 80FE0C                  	CMP	DH,12		;Check against max. month
  6404 00000A92 77E5                    	JA	SHORT RET24
  6405 00000A94 16                      	PUSH	SS
  6406 00000A95 1F                      	POP	DS
  6407                                  	;CALL	DODATE
  6408                                  	; 18/12/2022
  6409 00000A96 E90301                  	jmp	DODATE
  6410                                  ;RET24:  
  6411                                  	;RETN
  6412                                  
  6413                                  ;**	$GET_TIME - Get Current Time
  6414                                  ;----------------------------------------
  6415                                  ;	ENTRY	none
  6416                                  ;	EXIT	(cx:dx) = current time
  6417                                  ;	USES	all
  6418                                  
  6419                                  _$GET_TIME:			;System call 44
  6420                                  
  6421 00000A99 16                      	PUSH	SS
  6422 00000A9A 1F                      	POP	DS
  6423 00000A9B E87100                  	CALL	READTIME
  6424 00000A9E E8E4F9                  	CALL	Get_User_Stack	;Get pointer to user registers
  6425                                  	;MOV	[SI+6],DX
  6426 00000AA1 895406                  	MOV	[SI+user_env.user_DX],DX
  6427                                  	;MOV	[SI+4],CX
  6428 00000AA4 894C04                  	MOV	[SI+user_env.user_CX],CX
  6429                                  set_time_ok:	; 06/01/2024
  6430 00000AA7 30C0                    	XOR	AL,AL
  6431                                  RET26:  
  6432 00000AA9 C3                      	RETN
  6433                                  
  6434                                  ;**	$SET_TIME - Set Current Time
  6435                                  ;----------------------------------------
  6436                                  ;	ENTRY	(cx:dx) = time
  6437                                  ;	EXIT	(al) = 0 if 0k
  6438                                  ;		(al) = -1 if invalid
  6439                                  ;	USES	ALL
  6440                                  
  6441                                  _$SET_TIME:			;System call 45
  6442                                  
  6443 00000AAA B0FF                    	MOV	AL,-1		;Flag in case of error
  6444 00000AAC 80FD18                  	CMP	CH,24		;Check hours
  6445 00000AAF 73F8                    	JAE	SHORT RET26
  6446 00000AB1 80F93C                  	CMP	CL,60		;Check minutes
  6447 00000AB4 73F3                    	JAE	SHORT RET26
  6448 00000AB6 80FE3C                  	CMP	DH,60		;Check seconds
  6449 00000AB9 73EE                    	JAE	SHORT RET26
  6450 00000ABB 80FA64                  	CMP	DL,100		;Check 1/100's
  6451 00000ABE 73E9                    	JAE	SHORT RET26
  6452 00000AC0 51                      	PUSH	CX
  6453 00000AC1 52                      	PUSH	DX
  6454 00000AC2 16                      	PUSH	SS
  6455 00000AC3 1F                      	POP	DS
  6456                                  
  6457                                  ; 07/02/2024
  6458                                  %if 0
  6459                                  	MOV	BX,TIMEBUF
  6460                                  	MOV	CX,6
  6461                                  	; 06/02/2024 ; *
  6462                                  	;;XOR	DX,DX
  6463                                  	;;MOV	AX,DX
  6464                                  	;xor	ax,ax
  6465                                  	;cwd	; 06/01/2024
  6466                                  	PUSH	BX
  6467                                  	;CALL	SETREAD
  6468                                  	; 06/02/2024 ; *
  6469                                  	call	SETREAD_X
  6470                                  %else
  6471 00000AC4 E8EF3A                  	call	SETREAD_XT
  6472                                  %endif
  6473                                  
  6474 00000AC7 1E                      	PUSH	DS
  6475 00000AC8 C536[2E00]              	LDS	SI,[BCLOCK]
  6476 00000ACC E8703A                  	CALL	DEVIOCALL2	;Get correct day count
  6477 00000ACF 1F                      	POP	DS
  6478 00000AD0 5B                      	POP	BX
  6479 00000AD1 E81F3B                  	CALL	SETWRITE
  6480 00000AD4 8F06[BA03]              	POP	WORD [TIMEBUF+4]
  6481 00000AD8 8F06[B803]              	POP	WORD [TIMEBUF+2]
  6482 00000ADC C536[2E00]              	LDS	SI,[BCLOCK]
  6483 00000AE0 E85C3A                  	CALL	DEVIOCALL2	;Set the time
  6484                                  	; 06/01/2024
  6485                                  	;XOR	AL,AL
  6486                                  	;RETN
  6487 00000AE3 EBC2                    	jmp	short set_time_ok
  6488                                  
  6489                                  ; 11/07/2018 - Retro DOS v3.0
  6490                                  ; Retro DOS v2.0 - 14/03/2018
  6491                                  
  6492                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6493                                  
  6494                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6495                                  ;----------------------------------------------------------
  6496                                  ; Date16 returns the current date in AX, current time in DX
  6497                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6498                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6499                                  
  6500                                  DATE16:
  6501                                  	
  6502                                  ;M048	Context DS
  6503                                  ;
  6504                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6505                                  ; is DOSDATA
  6506                                  
  6507                                  	;push	ss
  6508                                  	;pop	ds
  6509                                  
  6510                                  	;getdseg <ds>		; M048
  6511                                  
  6512                                  	; 13/05/2019 - Retro DOS v4.0
  6513 00000AE5 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6514                                  
  6515 00000AEA 51                      	PUSH	CX
  6516 00000AEB 06                      	PUSH	ES
  6517 00000AEC E82000                  	CALL	READTIME
  6518 00000AEF 07                      	POP	ES
  6519 00000AF0 D0E1                    	SHL	CL,1		;Minutes to left part of byte
  6520 00000AF2 D0E1                    	SHL	CL,1
  6521 00000AF4 D1E1                    	SHL	CX,1		;Push hours and minutes to left end
  6522 00000AF6 D1E1                    	SHL	CX,1
  6523 00000AF8 D1E1                    	SHL	CX,1
  6524 00000AFA D0EE                    	SHR	DH,1		;Count every two seconds
  6525 00000AFC 08F1                    	OR	CL,DH		;Combine seconds with hours and minutes
  6526 00000AFE 89CA                    	MOV	DX,CX
  6527                                  
  6528                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6529                                  
  6530 00000B00 A1[5103]                	MOV	AX,[MONTH]	;Fetch month and year
  6531 00000B03 B104                    	MOV	CL,4
  6532 00000B05 D2E0                    	SHL	AL,CL		;Push month to left to make room for day
  6533 00000B07 D1E0                    	SHL	AX,1
  6534 00000B09 59                      	POP	CX
  6535 00000B0A 0A06[5003]              	OR	AL,[DAY]
  6536                                  RET21:
  6537 00000B0E C3                      	RETN
  6538                                  
  6539                                  ;----------------------------------------------------------
  6540                                  
  6541                                  READTIME:
  6542                                  
  6543                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6544                                  ;Uses AX, CX, DX.
  6545                                  
  6546 00000B0F C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6547 00000B15 56                      	PUSH	SI
  6548 00000B16 53                      	PUSH	BX
  6549                                  
  6550 00000B17 BB[B603]                	MOV	BX,TIMEBUF
  6551                                  ; 07/02/2024
  6552                                  %if 0
  6553                                  	MOV	CX,6
  6554                                  	; 06/02/2024
  6555                                  	;;XOR	DX,DX
  6556                                  	;;MOV	AX,DX
  6557                                  	;; 06/01/2024
  6558                                  	;xor	ax,ax
  6559                                  	;cwd
  6560                                  	;CALL	SETREAD
  6561                                  	; 06/02/2024
  6562                                  	call	SETREAD_X
  6563                                  %else
  6564 00000B1A E89D3A                  	call	SETREAD_XTC
  6565                                  %endif
  6566 00000B1D 1E                      	PUSH	DS
  6567 00000B1E C536[2E00]              	LDS	SI,[BCLOCK]
  6568 00000B22 E81A3A                  	CALL	DEVIOCALL2	;Get correct date and time
  6569 00000B25 1F                      	POP	DS
  6570 00000B26 5B                      	POP	BX
  6571 00000B27 5E                      	POP	SI
  6572 00000B28 A1[B603]                	MOV	AX,[TIMEBUF]
  6573 00000B2B 8B0E[B803]              	MOV	CX,[TIMEBUF+2]
  6574 00000B2F 8B16[BA03]              	MOV	DX,[TIMEBUF+4]
  6575 00000B33 3B06[5403]              	CMP	AX,[DAYCNT]	;See if day count is the same
  6576                                  	;JZ	SHORT RET22
  6577 00000B37 74D5                    	JZ	SHORT RET21 ; 18/07/2018
  6578                                  	;cmp	ax,43830
  6579 00000B39 3D36AB                  	CMP	AX,FOURYEARS*30 ;Number of days in 120 years
  6580 00000B3C 733D                    	JAE	SHORT RET22	;Ignore if too large
  6581 00000B3E A3[5403]                	MOV	[DAYCNT],AX
  6582 00000B41 56                      	PUSH	SI
  6583 00000B42 51                      	PUSH	CX
  6584 00000B43 52                      	PUSH	DX		;Save time
  6585 00000B44 31D2                    	XOR	DX,DX
  6586                                  	;mov	cx,1461
  6587 00000B46 B9B505                  	MOV	CX,FOURYEARS	;Number of days in 4 years
  6588 00000B49 F7F1                    	DIV	CX		;Compute number of 4-year units
  6589 00000B4B D1E0                    	SHL	AX,1
  6590 00000B4D D1E0                    	SHL	AX,1
  6591 00000B4F D1E0                    	SHL	AX,1		;Multiply by 8 (no. of half-years)
  6592 00000B51 89C1                    	MOV	CX,AX		;<240 implies AH=0
  6593                                  
  6594 00000B53 BE[140D]                	MOV	SI,YRTAB	;Table of days in each year
  6595                                  
  6596 00000B56 E82300                  	CALL	DSLIDE		;Find out which of four years we're in
  6597 00000B59 D1E9                    	SHR	CX,1		;Convert half-years to whole years
  6598 00000B5B 7304                    	JNC	SHORT SK	;Extra half-year?
  6599 00000B5D 81C2C800                	ADD	DX,200
  6600                                  SK:
  6601 00000B61 E82200                  	CALL	SETYEAR
  6602 00000B64 B101                    	MOV	CL,1		;At least at first month in year
  6603                                  
  6604 00000B66 BE[1C0D]                	MOV	SI,MONTAB	;Table of days in each month
  6605                                  	
  6606 00000B69 E81000                  	CALL	DSLIDE		;Find out which month we're in
  6607 00000B6C 880E[5103]              	MOV	[MONTH],CL
  6608 00000B70 42                      	INC	DX		;Remainder is day of month (start with one)
  6609 00000B71 8816[5003]              	MOV	[DAY],DL
  6610 00000B75 E88A00                  	CALL	WKDAY		;Set day of week
  6611 00000B78 5A                      	POP	DX
  6612 00000B79 59                      	POP	CX
  6613 00000B7A 5E                      	POP	SI
  6614                                  RET22:  
  6615 00000B7B C3                      	RETN
  6616                                  
  6617                                  ;----------------------------------------------------------
  6618                                  
  6619                                  DSLIDE:
  6620                                  	;MOV	AH,0
  6621                                  	; 06/01/2024
  6622                                  	; (AH = 0)
  6623                                  DSLIDE1:
  6624 00000B7C AC                      	LODSB			;Get count of days
  6625 00000B7D 39C2                    	CMP	DX,AX		;See if it will fit
  6626                                  	;JB	SHORT RET23	;If not, done
  6627 00000B7F 72FA                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6628 00000B81 29C2                    	SUB	DX,AX
  6629 00000B83 41                      	INC	CX		;Count one more month/year
  6630 00000B84 EBF6                    	JMP	SHORT DSLIDE1
  6631                                  
  6632                                  ;----------------------------------------------------------
  6633                                  
  6634                                  SETYEAR:
  6635                                  
  6636                                  ;Set year with value in CX. Adjust length of February for this year.
  6637                                  
  6638                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6639                                  ;	  set DS to DOSDATA. Since the only guy calling this should be the DOS
  6640                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6641                                  ;	preserve DS as CHKYR is also called as a routine.
  6642                                  
  6643                                  	; MSDOS 6.0 (18/07/2018) ; *
  6644                                  
  6645                                  	;GETDSEG DS
  6646                                  
  6647                                  	;PUSH	CS  ; *
  6648                                  	;POP	DS  ; *
  6649                                  
  6650                                  	; 13/05/2019 - Retro DOS v4.0
  6651 00000B86 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6652                                  
  6653                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6654                                  	; 05/11/2022 
  6655                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6656                                  
  6657 00000B8B 880E[5203]              	MOV	[YEAR],CL
  6658                                  CHKYR:
  6659 00000B8F F6C103                  	TEST	CL,3		;Check for leap year
  6660 00000B92 B01C                    	MOV	AL,28
  6661 00000B94 7502                    	JNZ	SHORT SAVFEB	;28 days if no leap year
  6662 00000B96 FEC0                    	INC	AL		;Add leap day
  6663                                  SAVFEB:
  6664 00000B98 A2[1D0D]                	mov	[february],al
  6665                                  	;MOV	[MONTAB+1],AL	;Store for February
  6666                                  RET23:  
  6667 00000B9B C3                      	RETN
  6668                                  
  6669                                  ;----------------------------------------------------------
  6670                                  
  6671                                  DODATE:
  6672 00000B9C E8F0FF                  	CALL	CHKYR		;Set Feb. up for new year
  6673 00000B9F 88F0                    	MOV	AL,DH
  6674                                  
  6675 00000BA1 BB[1B0D]                	MOV	BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6676                                  
  6677 00000BA4 D7                      	XLAT			;Look up days in month
  6678 00000BA5 38D0                    	CMP	AL,DL
  6679 00000BA7 B0FF                    	MOV	AL,-1		;Restore error flag, just in case
  6680                                  	;JB	SHORT RET25	;Error if too many days
  6681 00000BA9 72F0                    	jb	short RET23 ; 18/07/2018
  6682 00000BAB E8D8FF                  	CALL	SETYEAR
  6683                                  ;
  6684                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6685                                  ;
  6686 00000BAE 8916[5003]              	MOV	[DAY],DX	;Set both day and month
  6687 00000BB2 D1E9                    	SHR	CX,1
  6688 00000BB4 D1E9                    	SHR	CX,1
  6689                                  	;mov	ax,1461
  6690 00000BB6 B8B505                  	MOV	AX,FOURYEARS
  6691 00000BB9 89D3                    	MOV	BX,DX
  6692 00000BBB F7E1                    	MUL	CX
  6693 00000BBD 8A0E[5203]              	MOV	CL,[YEAR]
  6694 00000BC1 80E103                  	AND	CL,3
  6695                                  
  6696 00000BC4 BE[140D]                	MOV	SI,YRTAB
  6697                                  
  6698 00000BC7 89C2                    	MOV	DX,AX
  6699 00000BC9 D1E1                    	SHL	CX,1		;Two entries per year, so double count
  6700 00000BCB E84700                  	CALL	DSUM		;Add up the days in each year
  6701 00000BCE 88F9                    	MOV	CL,BH		;Month of year
  6702                                  
  6703 00000BD0 BE[1C0D]                	MOV	SI,MONTAB
  6704                                  
  6705 00000BD3 49                      	DEC	CX		;Account for months starting with one
  6706 00000BD4 E83E00                  	CALL	DSUM		;Add up days in each month
  6707 00000BD7 88D9                    	MOV	CL,BL		;Day of month
  6708 00000BD9 49                      	DEC	CX		;Account for days starting with one
  6709 00000BDA 01CA                    	ADD	DX,CX		;Add in to day total
  6710 00000BDC 92                      	XCHG	AX,DX		;Get day count in AX
  6711 00000BDD A3[5403]                	MOV	[DAYCNT],AX
  6712 00000BE0 56                      	PUSH	SI
  6713 00000BE1 53                      	PUSH	BX
  6714 00000BE2 50                      	PUSH	AX
  6715                                  
  6716                                  ; 07/02/2024
  6717                                  %if 0
  6718                                  	MOV	BX,TIMEBUF
  6719                                  	MOV	CX,6
  6720                                  	; 06/02/2024 ; *
  6721                                  	;;XOR	DX,DX
  6722                                  	;;MOV	AX,DX
  6723                                  	;; 06/01/2024
  6724                                  	;xor	ax,ax
  6725                                  	;cwd
  6726                                  	PUSH	BX
  6727                                  	;CALL	SETREAD
  6728                                  	; 06/02/2024 ; *
  6729                                  	call	SETREAD_X
  6730                                  %else
  6731 00000BE3 E8D039                  	call	SETREAD_XT
  6732                                  %endif
  6733                                  
  6734 00000BE6 1E                      	PUSH	DS
  6735 00000BE7 C536[2E00]              	LDS	SI,[BCLOCK]
  6736 00000BEB E85139                  	CALL	DEVIOCALL2	;Get correct date and time
  6737 00000BEE 1F                      	POP	DS
  6738 00000BEF 5B                      	POP	BX
  6739 00000BF0 E8003A                  	CALL	SETWRITE
  6740 00000BF3 8F06[B603]              	POP	WORD [TIMEBUF]
  6741 00000BF7 1E                      	PUSH	DS
  6742 00000BF8 C536[2E00]              	LDS	SI,[BCLOCK]
  6743 00000BFC E84039                  	CALL	DEVIOCALL2	;Set the date
  6744 00000BFF 1F                      	POP	DS
  6745 00000C00 5B                      	POP	BX
  6746 00000C01 5E                      	POP	SI
  6747                                  WKDAY:
  6748 00000C02 A1[5403]                	MOV	AX,[DAYCNT]
  6749 00000C05 31D2                    	XOR	DX,DX
  6750 00000C07 B90700                  	MOV	CX,7
  6751 00000C0A 40                      	INC	AX
  6752 00000C0B 40                      	INC	AX		;First day was Tuesday
  6753 00000C0C F7F1                    	DIV	CX		;Compute day of week
  6754 00000C0E 8816[5603]              	MOV	[WEEKDAY],DL
  6755 00000C12 30C0                    	XOR	AL,AL		;Flag OK
  6756                                  RET25:
  6757 00000C14 C3                      	RETN
  6758                                  
  6759                                  ;----------------------------------------------------------
  6760                                  
  6761                                  ;**	DSUM - Compute the sum of a string of bytes
  6762                                  ;
  6763                                  ;	ENTRY	(cx) = byte count
  6764                                  ;		(ds:si) = byte address
  6765                                  ;		(dx) = sum register, initialized by caller
  6766                                  ;	EXIT	(dx) updated
  6767                                  ;	USES	ax, cx, dx, si, flags
  6768                                  
  6769                                  DSUM:
  6770 00000C15 B400                    	MOV	AH,0
  6771 00000C17 E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6772                                  	;JCXZ	RET25 ; 18/07/2018
  6773                                  DSUM1:
  6774 00000C19 AC                      	LODSB
  6775 00000C1A 01C2                    	ADD	DX,AX
  6776 00000C1C E2FB                    	LOOP	DSUM1
  6777                                  DSUM9:
  6778 00000C1E C3                      	RETN
  6779                                  
  6780                                  ;============================================================================
  6781                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6782                                  ;============================================================================
  6783                                  ; 29/04/2019 - Retro DOS v4.0
  6784                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6785                                  
  6786                                  ; 12/03/2018 - Retro DOS v2.0 
  6787                                  
  6788                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6789                                  ;NAME	GETSET
  6790                                  
  6791                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6792                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6793                                  
  6794                                  ;USERNUM:
  6795                                  ;	DW	0			; 24 bit user number
  6796                                  ;       DB      0
  6797                                  ;;	IF      IBM
  6798                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6799                                  ;;	ELSE
  6800                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6801                                  ;;	ENDIF
  6802                                  
  6803                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6804                                  ;; 08/07/2018 - Retro DOS v3.0
  6805                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6806                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6807                                  
  6808                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6809                                  ;----------------------------------------------------------------------------
  6810                                  
  6811                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6812                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6813                                  
  6814                                  _$GET_VERSION:
  6815                                  
  6816                                  ; Inputs:
  6817                                  ;       None
  6818                                  ; Function:
  6819                                  ;       Return MS-DOS version number
  6820                                  ; Outputs:
  6821                                  ;       OEM number in BH
  6822                                  ;       User number in BL:CX (24 bits)
  6823                                  ;       Version number as AL.AH in binary
  6824                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6825                                  
  6826                                  ; MSDOS 6.0
  6827                                  ;
  6828                                  ;	Fake_Count is used to lie about the version numbers to support
  6829                                  ;	old binarys. See ms_table.asm for more info.
  6830                                  ;
  6831                                  ;		if input al = 00
  6832                                  ;		  (bh) = OEM number			
  6833                                  ;		else if input al = 01
  6834                                  ;		  (bh) = version flags
  6835                                  ;		 
  6836                                  ;		       	 bits 0-2 = DOS internal revision
  6837                                  ;		       	 bits 3-7 = DOS type flags
  6838                                  ;		              bit 3    = DOS is in ROM
  6839                                  ;		              bit 4    = DOS in in HMA
  6840                                  ;		              bits 5-7 = reserved
  6841                                  ;               M007 change - only bit 3 is now valid. Other bits
  6842                                  ;               are 0 when AL = 1
  6843                                  
  6844                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6845 00000C1F 36C50E[B203]            	lds	cx, [ss:USERNUM]
  6846 00000C24 8CDB                    	mov	bx, ds
  6847                                  
  6848                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6849                                  	;--------------------------------------
  6850                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6851                                  
  6852 00000C26 16                              PUSH    SS
  6853 00000C27 1F                              POP     DS
  6854                                          
  6855                                  	; 06/01/2024
  6856                                  	;MOV	BX,[USERNUM+2]
  6857                                          ;MOV	CX,[USERNUM]
  6858                                  
  6859                                  	; 13/05/2019 - Retro DOS v4.0
  6860                                  
  6861                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6862                                  	;DOS flags
  6863                                  
  6864 00000C28 3C01                    	cmp	AL,1
  6865 00000C2A 7502                    	jne	short Norm_Vers
  6866                                  
  6867                                  ;ifdef ROMDOS
  6868                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6869                                  ;				(DOSINROM = 8)
  6870                                  ;else
  6871 00000C2C 30FF                            xor     bh,bh		; Otherwise return 0
  6872                                  ;endif				;M007 end
  6873                                  
  6874                                  Norm_Vers:
  6875                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6876                                  
  6877                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6878                                  	; 26/06/2024
  6879                                  	; 13/05/2019 - Retro DOS v4.0
  6880                                  	;push	ds		; Get the version number from the
  6881 00000C2E 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6882                                  	;mov	ax,[40h]
  6883 00000C32 A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6884                                  	; 07/12/2022
  6885                                  	;pop	ds
  6886 00000C35 E84DF8                  	call	Get_User_Stack
  6887                                  				; Put values for return registers
  6888                                  				; in the proper place on the user's	 
  6889                                  				; stack addressed by DS:SI
  6890                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6891                                  gdrvfspc_ret:
  6892                                          ;MOV	[SI+user_env.user_AX],AX
  6893 00000C38 8904                            MOV	[SI],AX
  6894                                          ;MOV	[SI+4],CX
  6895 00000C3A 894C04                  	mov	[SI+user_env.user_CX],CX
  6896                                  set_user_bx:
  6897                                  	;MOV	[SI+2],BX
  6898 00000C3D 895C02                  	mov	[SI+user_env.user_BX],BX
  6899                                  
  6900 00000C40 C3                      	RETN
  6901                                  
  6902                                  ; 18/07/2018 - Retro DOS v3.0
  6903                                  
  6904                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6905                                  ;----------------------------------------------------------------------------
  6906                                  
  6907                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6908                                  ;
  6909                                  ;	ENTRY	none
  6910                                  ;	EXIT	(al) = value of VERIFY flag
  6911                                  ;	USES	all
  6912                                  
  6913                                  
  6914                                  _$GET_VERIFY_ON_WRITE:
  6915                                  
  6916                                  ;hkn; SS override
  6917 00000C41 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6918 00000C45 C3                      	retn
  6919                                  
  6920                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6921                                  ;
  6922                                  ;	ENTRY	(al) = value of VERIFY flag
  6923                                  ;	EXIT	none
  6924                                  ;	USES	all
  6925                                  
  6926                                  _$SET_VERIFY_ON_WRITE:
  6927                                  
  6928 00000C46 2401                    	AND	AL,1
  6929                                  ;hkn; SS override
  6930 00000C48 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6931                                  RET27:	; 18/07/2018
  6932 00000C4C C3                      	retn
  6933                                  
  6934                                  ; 19/07/2018 - Retro DOS v3.0
  6935                                  
  6936                                  ;BREAK <$International - return country-dependent information>
  6937                                  ;----------------------------------------------------------------------------
  6938                                  ;
  6939                                  ; Procedure Name : $INTERNATIONAL
  6940                                  ;
  6941                                  ; Inputs:
  6942                                  ;	MOV	AH,International
  6943                                  ;	MOV	AL,country	(al = 0 => current country)
  6944                                  ;      [MOV	BX,country]
  6945                                  ;	LDS	DX,block
  6946                                  ;	INT	21
  6947                                  ; Function:
  6948                                  ;	give users an idea of what country the application is running
  6949                                  ; Outputs:
  6950                                  ;	IF DX != -1 on input (get country)
  6951                                  ;	  AL = 0 means return current country table.
  6952                                  ;	  0<AL<0FFH means return country table for country AL
  6953                                  ;	  AL = 0FF means return country table for country BX
  6954                                  ;	  No Carry:
  6955                                  ;	     Register BX will contain the 16-bit country code.
  6956                                  ;	     Register AL will contain the low 8 bits of the country code.
  6957                                  ;	     The block pointed to by DS:DX is filled in with the information
  6958                                  ;	     for the particular country.
  6959                                  ;		BYTE  Size of this table excluding this byte and the next
  6960                                  ;		BYTE  Country code represented by this table
  6961                                  ;			A sequence of n bytes, where n is the number specified
  6962                                  ;			by the first byte above and is not > internat_block_max,
  6963                                  ;			in the correct order for being returned by the
  6964                                  ;			INTERNATIONAL call as follows:
  6965                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6966                                  ;		5 BYTE	Currency symbol null terminated
  6967                                  ;		2 BYTE	thousands separator null terminated
  6968                                  ;		2 BYTE	Decimal point null terminated
  6969                                  ;		2 BYTE	Date separator null terminated
  6970                                  ;		2 BYTE	Time separator null terminated
  6971                                  ;		1 BYTE	Bit field.  Currency format.
  6972                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6973                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6974                                  ;		1 BYTE	No. of significant decimal digits in currency
  6975                                  ;		1 BYTE	Bit field.  Time format.
  6976                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6977                                  ;		DWORD	Call address of case conversion routine
  6978                                  ;		2 BYTE	Data list separator null terminated.
  6979                                  ;	  Carry:
  6980                                  ;	     Register AX has the error code.
  6981                                  ;	IF DX = -1 on input (set current country)
  6982                                  ;	  AL = 0 is an error
  6983                                  ;	  0<AL<0FFH means set current country to country AL
  6984                                  ;	  AL = 0FF means set current country to country BX
  6985                                  ;	  No Carry:
  6986                                  ;	    Current country SET
  6987                                  ;	    Register AL will contain the low 8 bits of the country code.
  6988                                  ;	  Carry:
  6989                                  ;	     Register AX has the error code.
  6990                                  ;-----------------------------------------------------------------------------
  6991                                  
  6992                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6993                                  
  6994                                  ; 13/05/2019 - Retro DOS v4.0
  6995                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  6996                                  
  6997                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6998                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  6999                                  
  7000                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  7001                                  	 
  7002 00000C4D 3CFF                    	CMP	AL,0FFH
  7003 00000C4F 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  7004 00000C51 88C3                    	MOV	BL,AL			; Put AL country code in BX
  7005 00000C53 30FF                    	XOR	BH,BH
  7006                                  BX_HAS_CODE:
  7007 00000C55 1E                      	PUSH	DS
  7008 00000C56 07                      	POP	ES
  7009 00000C57 52                      	PUSH	DX
  7010 00000C58 5F                      	POP	DI			; User buffer to ES:DI
  7011                                  
  7012                                  ;hkn; SS is DOSDATA
  7013                                  ;	context DS
  7014                                  
  7015 00000C59 16                      	push	ss
  7016 00000C5A 1F                      	pop	ds
  7017                                  
  7018 00000C5B 83FFFF                  	CMP	DI,-1
  7019 00000C5E 745D                    	JZ	short international_set
  7020 00000C60 09DB                    	OR	BX,BX
  7021 00000C62 7505                    	JNZ	short international_find
  7022                                  
  7023                                  ;hkn; country_cdpg is in DOSDATA segment.
  7024 00000C64 BE[2A12]                	MOV	SI,COUNTRY_CDPG
  7025                                  
  7026 00000C67 EB39                    	JMP	SHORT international_copy
  7027                                  
  7028                                  international_find:
  7029                                  	;MOV	BP,0			 ; flag it for GetCntry only
  7030                                  	; 06/01/2024
  7031 00000C69 31ED                    	xor	bp,bp ; 0
  7032 00000C6B E80A00                  	CALL	international_get
  7033 00000C6E 7255                    	JC	short errtn
  7034                                  	;CMP	BX,0			 ; nlsfunc finished it ?
  7035                                  	; 06/01/2024
  7036 00000C70 09DB                    	or	bx,bx
  7037 00000C72 752E                    	JNZ	SHORT international_copy ; no, copy by myself
  7038 00000C74 89D3                    	MOV	BX,DX			 ; put country back
  7039 00000C76 EB3A                    	JMP	SHORT international_ok3
  7040                                  
  7041                                  international_get:
  7042 00000C78 BE[2A12]                	MOV	SI,COUNTRY_CDPG
  7043                                  
  7044                                  ;hkn; country_cdpg is in DOSDATA segment.
  7045                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7046                                  
  7047                                  	; MSDOS 3.3
  7048                                  	;;cmp	bx,[SI+63h]
  7049                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  7050                                  	;jz	short RET27
  7051                                  
  7052                                  	; 13/05/2019 - Retro DOS v4.0
  7053                                  
  7054                                  	; MSDOS 6.0
  7055                                  	;cmp	bx,[ss:si+68h]
  7056 00000C7B 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7057 00000C7F 74CB                    	jz	short RET27			; return if equal
  7058                                  
  7059 00000C81 89DA                    	MOV	DX,BX
  7060 00000C83 31DB                    	XOR	BX,BX			; bx = 0, default code page
  7061                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7062 00000C85 B80014                  	mov	ax,1400h
  7063 00000C88 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7064                                  			; Return: AL = 00h not installed, OK to install
  7065                                  			; 01h not installed, not OK
  7066                                  			; FFh installed
  7067 00000C8A 3CFF                    	CMP	AL,0FFH
  7068 00000C8C 7510                    	JNZ	short interr		; not in memory
  7069                                  	
  7070                                  	; 06/01/2024
  7071 00000C8E B80314                  	mov	ax,1403h		; set country info
  7072                                  
  7073                                  	;cmp	bp,0
  7074 00000C91 09ED                    	or	bp,bp			; GetCntry ?
  7075 00000C93 7501                    	JNZ	short stcdpg
  7076                                  	
  7077                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  7078                                  	;mov	ax,1404h
  7079 00000C95 40                      	inc	ax	; AX = 1404h ; get country info
  7080                                  
  7081                                  	; 06/01/2024
  7082                                  	;int	2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7083                                  	;		; BX = code page, DX = country code,
  7084                                  	;		; DS:SI -> internal code page structure
  7085                                  	;		; ES:DI -> user buffer
  7086                                  	;		; Return: AL = status
  7087                                  	;
  7088                                  	;JMP	short chkok
  7089                                  	
  7090                                  	;nop
  7091                                  
  7092                                  stcdpg:
  7093                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  7094                                  	; 06/01/2024
  7095                                  	;mov     ax,1403h
  7096                                  gscdpg:
  7097 00000C96 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  7098                                  			; DS:SI -> internal code page structure
  7099                                  			; BX = code page, DX = country code
  7100                                  			; Return: AL = status
  7101                                  chkok:
  7102 00000C98 08C0                    	or	al,al			; success ?
  7103                                  	;retz				; yes
  7104 00000C9A 74B0                    	jz	short RET27
  7105                                  
  7106                                  setcarry:
  7107 00000C9C F9                      	STC				; set carry
  7108 00000C9D C3                      	retn
  7109                                  interr:
  7110 00000C9E B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  7111 00000CA0 EBFA                    	JMP	short setcarry
  7112                                  
  7113                                  international_copy:
  7114                                  
  7115                                  ;hkn; country_cdpg is in DOSDATA segment.
  7116                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7117                                  
  7118                                  	; MSDOS 3.3
  7119                                  	;;mov	bx,[SI+63h]
  7120                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7121                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7122                                  
  7123                                  	; 13/05/2019 - Retro DOS v4.0
  7124                                  
  7125                                  	; MSDOS 6.0
  7126                                  	;mov	bx,[ss:si+68h]
  7127 00000CA2 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7128 00000CA6 BE[9612]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7129                                  
  7130                                  	;mov	cx,24
  7131 00000CA9 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7132                                  
  7133                                  	; MSDOS 6.0
  7134                                  
  7135                                  ;hkn;	must set up DS to SS so that international info can be copied
  7136                                  	
  7137 00000CAC 1E                      	push	ds
  7138                                  
  7139 00000CAD 16                      	push	ss			; cs -> ss
  7140 00000CAE 1F                      	pop	ds
  7141                                  
  7142 00000CAF F3A4                    	REP	MOVSB			; copy country info
  7143                                  
  7144                                  	; MSDOS 6.0
  7145                                  
  7146 00000CB1 1F                      	pop	ds	;hkn;	restore ds
  7147                                  
  7148                                  international_ok3:
  7149 00000CB2 E8D0F7                  	call	Get_User_Stack
  7150                                  ;ASSUME	DS:NOTHING
  7151                                  	;MOV	[SI+2],BX
  7152 00000CB5 895C02                  	MOV	[SI+user_env.user_BX],BX
  7153                                  international_ok:
  7154 00000CB8 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7155                                  ;SYS_RET_OK_jmp:
  7156                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7157                                  nono:	; 15/12/2022
  7158                                  SYS_RET_OK_jmp:
  7159 00000CBA E978F9                  	jmp	SYS_RET_OK
  7160                                  
  7161                                  international_set:
  7162                                  
  7163                                  ;hkn; ASSUME	DS:DOSGROUP
  7164                                  ;ASSUME	DS:DOSDATA
  7165                                  
  7166 00000CBD BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7167 00000CC0 E8B5FF                  	CALL	international_get
  7168 00000CC3 73F3                    	JNC	short international_ok
  7169                                  errtn:
  7170 00000CC5 3CFF                    	CMP	AL,0FFH
  7171 00000CC7 7403                    	JZ	short errtn2
  7172                                  errtn1:
  7173 00000CC9 E972F9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7174                                  errtn2:
  7175                                  	;error	error_invalid_function	; NLSFUNC not existent
  7176                                  
  7177                                  	;mov	al,1
  7178 00000CCC B001                    	mov	al,error_invalid_function 
  7179 00000CCE EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7180                                  ;errtn3:
  7181                                  ;	jmp	SYS_RET_ERR
  7182                                  
  7183                                  ;EndProc $INTERNATIONAL
  7184                                  
  7185                                  ; 19/07/2018
  7186                                  
  7187                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7188                                  
  7189                                  ;----------------------------------------------------------------------------
  7190                                  ;
  7191                                  ; Procedure Name : $GetExtCntry
  7192                                  ;
  7193                                  ; Inputs:
  7194                                  ;	if AL >= 20H
  7195                                  ;	  AL= 20H    capitalize single char, DL= char
  7196                                  ;	      21H    capitalize string, CX= string length
  7197                                  ;	      22H    capitalize ASCIIZ string
  7198                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7199                                  ;	      80H bit 0 = use normal upper case table
  7200                                  ;		      1 = use file upper case table
  7201                                  ;	   DS:DX points to string
  7202                                  ;
  7203                                  ;	else
  7204                                  ;
  7205                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7206                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7207                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7208                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7209                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7210                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7211                                  ;	INT	21
  7212                                  ; Function:
  7213                                  ;	give users extended country dependent information
  7214                                  ;	or capitalize chars
  7215                                  ; Outputs:
  7216                                  ;	  No Carry:
  7217                                  ;	     extended country info is succesfully returned
  7218                                  ;	  Carry:
  7219                                  ;	     Register AX has the error code.
  7220                                  ;	     AX=0, NO	 for YES/NO CHECK
  7221                                  ;		1, YES
  7222                                  ;----------------------------------------------------------------------------
  7223                                  
  7224                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7225                                  
  7226                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7227                                  
  7228                                  	; MSDOS 6.0
  7229                                  _$GetExtCntry:
  7230 00000CD0 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7231 00000CD2 7269                    	JB	short notcap
  7232                                  capcap: 				;
  7233 00000CD4 A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7234 00000CD6 7505                    	JNZ	short fileupper		; file upper case
  7235                                  
  7236                                  ;hkn; UCASE_TAB in DOSDATA
  7237 00000CD8 BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7238 00000CDB EB05                    	JMP	SHORT capit
  7239                                  
  7240                                  fileupper:
  7241                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7242                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7243                                  	; AL >= 80h
  7244 00000CDD 247F                    	and	al,7Fh
  7245                                  
  7246                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7247 00000CDF BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7248                                  capit:					;
  7249 00000CE2 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7250 00000CE4 750D                    	JNZ	short chkyes		; no
  7251 00000CE6 88D0                    	MOV	AL,DL			; set up AL
  7252 00000CE8 E84542                  	call	GETLET3 		; upper case it
  7253 00000CEB E897F7                  	call	Get_User_Stack		; get user stack
  7254                                  	;mov	[si+6],al
  7255 00000CEE 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7256 00000CF1 EBC7                    	JMP	SHORT nono		; done
  7257                                  chkyes: 				;
  7258 00000CF3 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7259 00000CF5 7522                    	JNZ	short capstring		; no
  7260                                  
  7261 00000CF7 31C0                    	XOR	AX,AX			; presume NO
  7262                                  		      
  7263                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7264                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7265                                  
  7266                                  	; 06/08/2018 - Retro DOS v3.0
  7267                                  	; 13/05/2019 - Retro DOS v4.0
  7268                                  	;cmp	dl,'Y'
  7269 00000CF9 2E3A16[140A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7270 00000CFE 7416                    	JZ	short yesyes		; yes
  7271                                  	;cmp	dl,'y'
  7272 00000D00 2E3A16[160A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7273 00000D05 740F                    	JZ	short yesyes		; yes
  7274                                  	;cmp	dl,'N'
  7275 00000D07 2E3A16[150A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7276 00000D0C 74AC                    	JZ	short nono		; no
  7277                                  	;cmp	dl,'n'
  7278 00000D0E 2E3A16[170A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7279 00000D13 74A5                    	JZ	short nono		; no
  7280                                  ;dbcs_char:				;
  7281 00000D15 40                      	INC	AX			; not YES or NO
  7282                                  yesyes: 				;
  7283 00000D16 40                      	INC	AX			; return 1
  7284                                  	; 15/12/2022
  7285                                  ;nono:	
  7286 00000D17 EBA1                    	jmp	short SYS_RET_OK_jmp	;
  7287                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7288                                  	;jmp	SYS_RET_OK		; done
  7289                                  
  7290                                  capstring:				;
  7291 00000D19 89D6                    	MOV	SI,DX			; si=dx
  7292 00000D1B 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7293 00000D1D 750D                    	JNZ	short capascii		; no
  7294                                  	;OR	CX,CX			; check count 0
  7295                                  	;JZ	short nono		; yes finished
  7296                                  	; 06/01/2024
  7297 00000D1F E399                    	jcxz	nono
  7298                                  concap: 				;
  7299 00000D21 AC                      	LODSB				; get char
  7300 00000D22 E80B42                  	call	GETLET3 		; upper case it
  7301 00000D25 8844FF                  	MOV	byte [SI-1],AL		; store back
  7302                                  ;next99: 				;
  7303 00000D28 E2F7                    	LOOP	concap			; continue
  7304 00000D2A EB8E                    	JMP	short nono		; done
  7305                                  capascii:				;
  7306 00000D2C 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7307 00000D2E 7545                    	JNZ	short capinval		; no
  7308                                  concap2:				;
  7309 00000D30 AC                      	LODSB				; get char
  7310 00000D31 08C0                    	or	al,al			; end of string ?
  7311 00000D33 7485                    	JZ	short nono		; yes
  7312 00000D35 E8F841                  	call	GETLET3 		; upper case it
  7313 00000D38 8844FF                  	MOV	[SI-1],AL		; store back
  7314 00000D3B EBF3                    	JMP	short concap2 		; continue
  7315                                  
  7316                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7317                                  
  7318                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7319                                  ; _$GetExtCntry:
  7320                                  
  7321                                  notcap:
  7322 00000D3D 83F905                  	CMP	CX,5			; minimum size is 5
  7323 00000D40 7277                    	jb	short sizeerror
  7324                                  
  7325                                  GEC_CONT:
  7326                                  ;hkn; SS is DOSDATA
  7327                                  	;context DS
  7328                                  
  7329 00000D42 16                      	push	ss
  7330                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7331 00000D43 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7332                                  	
  7333                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7334 00000D44 BE[2A12]                	MOV	SI,COUNTRY_CDPG
  7335                                  
  7336 00000D47 83FAFF                  	CMP	DX,-1			; active country ?
  7337 00000D4A 7503                    	JNZ	short GETCDPG 		; no
  7338                                  
  7339                                  ;hkn; use DS override to accesss country_cdpg fields
  7340                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7341                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7342 00000D4C 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7343                                  					; get active country id;smr;use DS
  7344                                  GETCDPG:
  7345 00000D4F 83FBFF                  	CMP	BX,-1			; active code page?
  7346 00000D52 7503                    	JNZ	short CHKAGAIN		; no, check again
  7347                                  
  7348                                  ;hkn; use DS override to accesss country_cdpg fields
  7349                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7350                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7351 00000D54 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7352                                  					; get active code page id;smr;Use DS
  7353                                  CHKAGAIN:
  7354                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7355 00000D57 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7356                                  					; same as active country id?;smr;use DS
  7357 00000D5A 7550                    	JNZ	short CHKNLS		; no
  7358                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7359 00000D5C 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7360                                  					; same as active code pg id?;smr;use DS
  7361 00000D5F 754B                    	JNZ	short CHKNLS		; no
  7362                                  CHKTYPE:
  7363                                  	;mov	bx,[si+48h]
  7364 00000D61 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7365                                  					; bx = sys code page id;smr;use DS
  7366 00000D64 51                      	PUSH	CX			; save cx
  7367                                  	;mov	cx,[si+4Ah]
  7368 00000D65 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7369                                  	;mov	si,COUNTRY_CDPG+76
  7370 00000D68 BE[7612]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7371                                  NXTENTRY:
  7372 00000D6B 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7373 00000D6D 740B                    	JZ	short FOUNDIT
  7374 00000D6F 83C605                  	ADD	SI,5			; next entry
  7375 00000D72 E2F7                    	LOOP	NXTENTRY
  7376 00000D74 59                      	POP	CX
  7377                                  capinval:
  7378                                  	;error	error_invalid_function	; info type not found
  7379                                  	;mov	al,1
  7380 00000D75 B001                    	mov	al,error_invalid_function
  7381                                  ;SYS_RET_ERR_jmp:
  7382                                  	;jmp	SYS_RET_ERR
  7383                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7384                                  SYS_RET_ERR_jmp:
  7385 00000D77 E9C4F8                  	jmp	SYS_RET_ERR	
  7386                                  
  7387                                  FOUNDIT:
  7388 00000D7A A4                      	MOVSB				; move info id byte
  7389 00000D7B 59                      	POP	CX			; restore char count
  7390                                  	;cmp	al,1
  7391 00000D7C 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7392 00000D7E 7415                    	JZ	short setsize
  7393 00000D80 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7394 00000D83 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7395                                  OK_RETN:
  7396 00000D86 F3A4                    	REP	MOVSB			; copy info
  7397 00000D88 89C1                    	MOV	CX,AX			; CX = actual length returned
  7398 00000D8A 89D8                    	MOV	AX,BX			; return sys code page in ax
  7399                                  GETDONE:
  7400 00000D8C E8F6F6                  	call	Get_User_Stack		; return actual length to user's CX
  7401                                  	;mov	[si+4],cx 
  7402 00000D8F 894C04                  	MOV	[SI+user_env.user_CX],CX
  7403                                  	;jmp	SYS_RET_OK
  7404                                  	; 15/12/2022
  7405                                  	; 25/06/2019
  7406 00000D92 E9A3F8                  	jmp	SYS_RET_OK_clc
  7407                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7408                                  	; 15/12/2022
  7409                                  ;nono_jmp:
  7410                                  	;jmp	short nono
  7411                                  setsize:
  7412 00000D95 83E903                  	SUB	CX,3			; size after length field
  7413 00000D98 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7414 00000D9A 7302                    	JAE	short setsize2		; no
  7415 00000D9C 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7416                                  setsize2:
  7417 00000D9E 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7418                                  	;ADD	DI,2			; update index
  7419                                  	;ADD	SI,2
  7420                                  	; 06/01/2024
  7421 00000DA1 47                      	inc	di
  7422 00000DA2 47                      	inc	di
  7423 00000DA3 46                      	inc	si
  7424 00000DA4 46                      	inc	si
  7425 00000DA5 89C8                    	MOV	AX,CX
  7426 00000DA7 83C003                  	ADD	AX,3			; AX has the actual length
  7427 00000DAA EBDA                    	JMP	short OK_RETN 		; go move it
  7428                                  CHKNLS:
  7429 00000DAC 30E4                    	XOR	AH,AH
  7430                                  	;PUSH	AX			; save info type
  7431                                  	;POP	BP			; bp = info type
  7432                                  	; 06/01/2024
  7433 00000DAE 89C5                    	mov	bp,ax
  7434                                  	
  7435                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7436 00000DB0 B80014                  	mov     ax,1400h
  7437 00000DB3 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7438                                  			; Return: AL = 00h not installed, OK to install
  7439                                  			; 01h not installed, not OK
  7440                                  			; FFh installed
  7441 00000DB5 3CFF                    	CMP	AL,0FFH
  7442 00000DB7 7404                    	JZ	short NLSNXT		; in memory
  7443                                  
  7444                                  sizeerror:
  7445                                  	;error	error_invalid_function
  7446                                  	;mov	al,1
  7447 00000DB9 B001                    	mov	al,error_invalid_function
  7448                                  	;jmp	SYS_RET_ERR
  7449                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7450                                  sys_ret_err_jmp2:
  7451 00000DBB EBBA                    	jmp	short SYS_RET_ERR_jmp
  7452                                  
  7453                                  NLSNXT: 
  7454                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7455 00000DBD B80214                  	mov     ax,1402h
  7456 00000DC0 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7457                                  			; BP = subfunction, BX = code page
  7458                                  			; DX = country code, DS:SI -> internal code page structure
  7459                                  			; ES:DI -> user buffer, CX = size of user buffer
  7460                                  			; Return: AL = status
  7461                                  			; 00h successful
  7462                                  			; else DOS error code
  7463                                  
  7464 00000DC2 3C00                    	CMP	AL,0			; success ?
  7465 00000DC4 7505                    	JNZ	short NLSERROR
  7466                                  	;mov	ax,[si+48h] ; 13/05/2019
  7467 00000DC6 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]
  7468                                  			; ax = sys code page id;smr;use ds;
  7469                                  			;BUGBUG;check whether DS is OK after the above calls
  7470 00000DC9 EBC1                    	JMP	short GETDONE
  7471                                  seterr:
  7472                                  	; 15/12/2022
  7473                                  NLSERROR:
  7474                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7475                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7476                                  	;jmp	short sys_ret_err_jmp2
  7477                                  	; 15/12/2022
  7478 00000DCB EBAA                    	jmp	short SYS_RET_ERR_jmp
  7479                                  
  7480                                  ;EndProc $GetExtCntry
  7481                                  
  7482                                  ; 13/05/2019 - Retro DOS v4.0
  7483                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7484                                  
  7485                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7486                                  ;----------------------------------------------------------------------------
  7487                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7488                                  ;
  7489                                  ;   System call format:
  7490                                  ;
  7491                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7492                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7493                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7494                                  ;	INT	21
  7495                                  ;
  7496                                  ;	ENTRY	(al) = n
  7497                                  ;		(bx) = code page
  7498                                  ;	EXIT	'C' clear
  7499                                  ;		  global code page is set	(set global code page)
  7500                                  ;		  (BX) = active code page id	(get global code page)
  7501                                  ;		  (DX) = system code page id	(get global code page)
  7502                                  ;		'C' set
  7503                                  ;		  (AX) = error code
  7504                                  
  7505                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7506                                  
  7507                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7508                                  	; DOSCODE:4BC9h
  7509                                  
  7510                                  _$GetSetCdPg:
  7511                                  
  7512                                  ;hkn; SS is DOSDATA
  7513                                  	;context DS
  7514                                  
  7515 00000DCD 16                      	push	ss
  7516 00000DCE 1F                      	pop	ds
  7517                                  
  7518                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7519 00000DCF BE[2A12]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7520                                  
  7521 00000DD2 3C01                    	CMP	AL,1		       ; get global code page
  7522 00000DD4 7512                    	JNZ	short setglpg 	       ; set global code page
  7523                                  	
  7524                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7525                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7526 00000DD6 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7527                                  					; get active code page id;smr;use ds
  7528                                  	;mov	dx,[si+48h]
  7529 00000DD9 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7530                                  				  	; get sys code page id;smr;use ds
  7531 00000DDC E8A6F6                  	call	Get_User_Stack
  7532                                  ;ASSUME DS:NOTHING
  7533                                  	;;mov	[si+2],bx
  7534                                  	;MOV	[SI+user_env.user_BX],BX ; update returned bx
  7535                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7536 00000DDF E85BFE                  	call    set_user_bx	; MOV [SI+user_env.user_BX],BX 
  7537                                  	;mov	[si+6],dx
  7538 00000DE2 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7539                                  OK_RETURN:
  7540                                  	; 15/12/2022
  7541                                  	;transfer SYS_RET_OK
  7542 00000DE5 E94DF8                  	jmp	SYS_RET_OK
  7543                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7544                                  	;jmp	short nono_jmp
  7545                                  
  7546                                  ;hkn; ASSUME DS:DOSGROUP
  7547                                  ;ASSUME	DS:DOSDATA
  7548                                  
  7549                                  setglpg:
  7550 00000DE8 3C02                    	CMP	AL,2
  7551 00000DEA 752F                    	JNZ	short nomem
  7552                                  	
  7553                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7554                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7555 00000DEC 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7556                                  	
  7557                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7558 00000DEF B80014                  	mov     ax,1400h
  7559 00000DF2 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7560                                  			; Return: AL = 00h not installed, OK to install
  7561                                  			; 01h not installed, not OK
  7562                                  			; FFh installed
  7563 00000DF4 3CFF                    	CMP	AL,0FFH
  7564 00000DF6 7523                    	JNZ	short nomem		; not in memory
  7565                                  
  7566                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7567 00000DF8 B80114                  	mov     ax,1401h
  7568 00000DFB CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7569                                  			; DS:SI -> internal code page structure
  7570                                  			; BX = new code page, DX = country code???
  7571                                  			; Return: AL = status
  7572                                  			; 00h successful
  7573                                  			; else DOS error code
  7574                                  	;cmp	al,0
  7575 00000DFD 08C0                    	or	al,al			; success ?
  7576 00000DFF 74E4                    	JZ	short OK_RETURN		; yes
  7577                                  
  7578 00000E01 3C41                    	CMP	AL,65			; set device code page failed
  7579 00000E03 75C6                    	JNZ	short seterr
  7580                                  	;MOV	AX,65
  7581                                  	; 06/01/2024
  7582 00000E05 98                      	cbw
  7583 00000E06 A3[2403]                	MOV	[EXTERR],AX
  7584                                  	;mov	byte [EXTERR_ACTION],6
  7585                                  	;mov	byte [EXTERR_CLASS],5
  7586                                  	;mov	byte [EXTERR_LOCUS],4
  7587 00000E09 C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7588 00000E0E C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7589 00000E13 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7590                                  	;transfer From_GetSet
  7591 00000E18 E92BF8                  	jmp	From_GetSet
  7592                                  
  7593                                  	; 15/12/2022
  7594                                  ;seterr:
  7595                                  	;;;transfer SYS_RET_ERR
  7596                                  	;;jmp	SYS_RET_ERR
  7597                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7598                                  	;jmp	short NLSERROR
  7599                                  
  7600                                  nomem:
  7601                                  	;error	error_invalid_function	; function not defined
  7602                                  	;mov	al,1
  7603 00000E1B B001                    	mov	al,error_invalid_function
  7604 00000E1D EBAC                    	jmp	short seterr
  7605                                  
  7606                                  ;EndProc $GetSetCdPg
  7607                                  
  7608                                  ; 09/01/2024
  7609                                  ; 13/05/2019 - Retro DOS v4.0
  7610                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7611                                  
  7612                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7613                                  ;----------------------------------------------------------------------------
  7614                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7615                                  ;
  7616                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7617                                  ;		drive.
  7618                                  ;
  7619                                  ;	This call returns the same info in the same registers (except for the
  7620                                  ;	FAT pointer) as the old FAT pointer calls
  7621                                  ;
  7622                                  ;	ENTRY	DL = Drive number
  7623                                  ;	EXIT	AX = Sectors per allocation unit
  7624                                  ;		   = -1 if bad drive specified
  7625                                  ;		On User Stack
  7626                                  ;		    BX = Number of free allocation units
  7627                                  ;		    DX = Total Number of allocation units on disk
  7628                                  ;		    CX = Sector size
  7629                                  
  7630                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7631                                  
  7632                                  _$GET_DRIVE_FREESPACE:
  7633                                  
  7634                                  ;hkn; SS is DOSDATA
  7635                                  	;context DS
  7636 00000E1F 16                      	push	ss
  7637 00000E20 1F                      	pop	ds
  7638                                  
  7639 00000E21 88D0                    	MOV	AL,DL
  7640                                  	;invoke	GetThisDrv		; Get drive
  7641 00000E23 E8045B                  	call	GETTHISDRV
  7642                                  SET_AX_RET:
  7643 00000E26 7212                    	JC	short BADFDRV
  7644                                  	;invoke	DISK_INFO
  7645 00000E28 E81A1E                  	call	DISK_INFO
  7646 00000E2B 87D3                    	XCHG	DX,BX
  7647                                  	;JC	short SET_AX_RET	; User FAILed to I 24
  7648                                  	; 06/01/2024
  7649 00000E2D 720B                    	jc	short BADFDRV
  7650 00000E2F 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7651                                  DoSt:
  7652 00000E31 E851F6                  	call	Get_User_Stack
  7653                                  ;ASSUME	DS:NOTHING
  7654                                  	;mov	[si+6],dx
  7655                                  	;;mov	[si+4],cx
  7656                                  	;;mov	[si+2],bx
  7657                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7658 00000E34 895406                  	MOV	[SI+user_env.user_DX],DX ; total clusters
  7659                                  	;MOV	[SI+user_env.user_CX],CX
  7660                                  	;MOV	[SI+user_env.user_BX],BX
  7661                                  	;;MOV	[SI+user_env.user_AX],AX
  7662                                  	;mov	[si],ax
  7663                                  	;;return
  7664                                  	;retn
  7665                                  	; 09/01/2024
  7666 00000E37 E9FEFD                  	jmp     gdrvfspc_ret    ; ax = sectors per cluster (modified)
  7667                                  
  7668                                  BADFDRV:
  7669                                  	; MSDOS 3.3
  7670                                  	;;mov	al,0Fh
  7671                                  	;mov	al,error_invalid_drive	; Assume error
  7672                                  
  7673                                  	; 13/05/2019 - Retro DOS v4.0
  7674                                  
  7675                                  	; MSDOS 6.0 & MSDOS 3.3
  7676                                  	;invoke	FCB_RET_ERR
  7677 00000E3A E817F8                  	call	FCB_RET_ERR
  7678                                  	
  7679 00000E3D B8FFFF                  	MOV	AX,-1
  7680 00000E40 EBEF                    	JMP	short DoSt
  7681                                  
  7682                                  ;EndProc $GET_DRIVE_FREESPACE
  7683                                  
  7684                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7685                                  ;----------------------------------------------------------------------------
  7686                                  ;**	$Get_DMA - Get Disk Transfer Address
  7687                                  ;
  7688                                  ;	ENTRY	none
  7689                                  ;	EXIT	ES:BX is current transfer address
  7690                                  ;	USES	all
  7691                                  
  7692                                  	; 09/01/2024
  7693                                  _$GET_DMA:
  7694 00000E42 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7695 00000E47 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7696 00000E4C E836F6                  	call	Get_User_Stack
  7697                                  	;mov	[si+2],bx
  7698                                  	;mov	[si+10h],cx
  7699                                  	; 09/01/2024
  7700                                  	;MOV	[SI+user_env.user_BX],BX
  7701 00000E4F 894C10                  	MOV	[SI+user_env.user_ES],CX
  7702                                  	;retn
  7703                                  	; 09/01/2024
  7704 00000E52 E9E8FD                  	jmp	set_user_bx ; (PCDOS 7.1 IBMDOS.COM)
  7705                                  
  7706                                  ;**	$Set_DMA - Set Disk Transfer Address
  7707                                  ;----------------------------------------------------------------------------
  7708                                  ;	ENTRY	DS:DX is current transfer address
  7709                                  ;	EXIT	none
  7710                                  ;	USES	all
  7711                                  
  7712                                  _$SET_DMA:
  7713 00000E55 368916[2C03]            	MOV	[SS:DMAADD],DX
  7714 00000E5A 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7715 00000E5F C3                      	retn
  7716                                  
  7717                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7718                                  ;------------------------------------------------------------------------------
  7719                                  
  7720                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7721                                  ;-----------------------------------------------------
  7722                                  ;	ENTRY	none
  7723                                  ;	EXIT	(AL) = drive number
  7724                                  ;	USES	all
  7725                                  
  7726                                  _$GET_DEFAULT_DRIVE:
  7727 00000E60 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7728 00000E64 C3                      	retn
  7729                                  
  7730                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7731                                  ;-----------------------------------------------------
  7732                                  ;	ENTRY	(DL) = Drive number for new default drive
  7733                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7734                                  
  7735                                  _$SET_DEFAULT_DRIVE:
  7736 00000E65 88D0                    	MOV	AL,DL
  7737 00000E67 FEC0                    	INC	AL			; A=1, B=2...
  7738 00000E69 E8A25A                  	call	GetVisDrv		; see if visible drive
  7739 00000E6C 7204                    	JC	short SETRET		; errors do not set
  7740 00000E6E 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7741                                  
  7742                                  SETRET:
  7743 00000E72 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7744 00000E76 C3                      	retn
  7745                                  
  7746                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7747                                  ;----------------------------------------------------------------------------
  7748                                  
  7749                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7750                                  ;---------------------------------------------------
  7751                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7752                                  ;	contents of an interrupt vector.
  7753                                  ;
  7754                                  ;	ENTRY	(AL) = interrupt number
  7755                                  ;	EXIT	(ES:BX) = current interrupt vector
  7756                                  
  7757                                  _$GET_INTERRUPT_VECTOR:
  7758 00000E77 E82E00                  	CALL	RECSET
  7759 00000E7A 26C41F                  	LES	BX,[ES:BX]
  7760 00000E7D E805F6                  	call	Get_User_Stack
  7761                                  set_user_es_bx:
  7762                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7763                                  	;;mov	[si+2],bx
  7764                                  	;mov	[si+10h],es
  7765                                  	;MOV	[SI+user_env.user_BX],BX
  7766 00000E80 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7767                                  	;retn
  7768 00000E83 E9B7FD                  	jmp	set_user_bx
  7769                                  
  7770                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7771                                  ;---------------------------------------------------
  7772                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7773                                  ;	contents of an interrupt vector.
  7774                                  ;
  7775                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7776                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7777                                  ;	for explanation.
  7778                                  ;
  7779                                  ;	ENTRY	(AL) = interrupt number
  7780                                  ;		(ds:dx) = desired new vector value
  7781                                  ;	EXIT	none
  7782                                  ;	USES	all
  7783                                  
  7784                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7785                                  ; 13/05/2019 - Retro DOS v4.0
  7786                                  
  7787                                  _$SET_INTERRUPT_VECTOR:
  7788 00000E86 E81F00                  	CALL	RECSET
  7789 00000E89 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7790 00000E8A 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7791 00000E8D 268C5F02                	MOV	[ES:BX+2],DS
  7792 00000E91 FB                      	STI
  7793                                  					; M004, M068 - Start
  7794                                  	; MSDOS 6.0
  7795 00000E92 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7796                                  					; Q: was the previous call an int 21h
  7797                                  					;    exec call
  7798                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7799                                  	;jnz	short siv_1		; Y: go set count
  7800                                  	;retn				; N: return
  7801                                  	; 15/12/2022
  7802 00000E98 740D                    	jz	short siv_2
  7803                                  siv_1:	
  7804 00000E9A 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7805 00000EA0 7505                    	jnz	short siv_2		 ; N: done
  7806                                  	; 20/09/2023
  7807 00000EA2 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
  7808                                  	;mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos
  7809                                  					 ; dispatcher to turn A20 Off before
  7810                                  					 ; returning to user.
  7811                                  siv_2:
  7812                                  	; 07/12/2022
  7813 00000EA7 C3                      	retn				; M004, M068 - End
  7814                                  	
  7815                                  RECSET:
  7816 00000EA8 31DB                    	XOR	BX,BX
  7817 00000EAA 8EC3                    	MOV	ES,BX
  7818 00000EAC 88C3                    	MOV	BL,AL
  7819 00000EAE D1E3                    	SHL	BX,1
  7820 00000EB0 D1E3                    	SHL	BX,1
  7821 00000EB2 C3                      	retn
  7822                                  
  7823                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7824                                  ;-------------------------------------------------------------------------------------
  7825                                  
  7826                                  ;**	$Char_Oper - Manipulate Switch Character
  7827                                  ;
  7828                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7829                                  ;
  7830                                  ;	ENTRY	AL = function:
  7831                                  ;		    0 - read switch char
  7832                                  ;		    1 - set switch char (char in DL)
  7833                                  ;		    2 - read device availability
  7834                                  ;			Always returns available
  7835                                  ;		    3 - set device availability
  7836                                  ;			No longer supported (NOP)
  7837                                  ;	EXIT	(al) = 0xff iff error
  7838                                  ;		(al) != 0xff if ok
  7839                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7840                                  ;	USES	AL, DL
  7841                                  ;
  7842                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7843                                  ;		The character / is always returned for subfunction 0,
  7844                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7845                                  
  7846                                  ; 13/05/2019 - Retro DOS v4.0
  7847                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7848                                  
  7849                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7850                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7851                                  
  7852                                  _$CHAR_OPER:
  7853                                  	; MSDOS 6.0
  7854 00000EB3 08C0                    	or	al,al				; get switch?
  7855 00000EB5 B22F                    	mov	dl,'/'				; assume yes
  7856 00000EB7 7407                    	jz	short chop_1			; jump if yes
  7857 00000EB9 3C02                    	cmp	al,2				; check device availability?
  7858 00000EBB B2FF                    	mov	dl,-1				; assume yes
  7859 00000EBD 7401                    	jz	short chop_1			; jump if yes
  7860 00000EBF C3                      	retn					; otherwise just quit
  7861                                  
  7862                                  ; subfunctions requiring return of value to user come here. DL holds
  7863                                  ; value to return
  7864                                  
  7865                                  chop_1:
  7866 00000EC0 E8C2F5                  	call	Get_User_Stack
  7867 00000EC3 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7868 00000EC6 C3                      	retn
  7869                                  
  7870                                  	; MSDOS 3.3
  7871                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7872                                  	;push	ss
  7873                                  	;pop	ds
  7874                                  	;cmp	al,1
  7875                                  	;jb	short chop_1
  7876                                  	;jz	short chop_2
  7877                                  	;cmp	al,3
  7878                                  	;jb	short chop_3
  7879                                  	;jz	short chop_5
  7880                                  	;mov	al,0FFh
  7881                                  	;retn
  7882                                  ;chop_1:
  7883                                  	;mov	dl,[chSwitch]
  7884                                  	;jmp	short chop_4
  7885                                  ;chop_2:
  7886                                  	;mov	[chSwitch],dl
  7887                                  	;retn
  7888                                  ;chop_3:
  7889                                  	;mov	dl, FFh
  7890                                  ;chop_4:
  7891                                  	;call	Get_User_Stack
  7892                                  	;mov	[si+6],dx
  7893                                  ;chop_5:
  7894                                  	;retn
  7895                                  
  7896                                  ;**	$GetExtendedError - Return Extended error code
  7897                                  ;----------------------------------------------------------------------------
  7898                                  ;	This function reads up the extended error info from the static
  7899                                  ;	variables where it was stored.
  7900                                  ;
  7901                                  ;	ENTRY	none
  7902                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7903                                  ;		BL = recommended action
  7904                                  ;		BH = class of error
  7905                                  ;		CH = locus of error
  7906                                  ;		ES:DI = may be pointer
  7907                                  ;	USES	ALL
  7908                                  
  7909                                  	; 09/01/2024
  7910                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7911                                  
  7912                                  _$GetExtendedError:
  7913 00000EC7 16                      	push	ss
  7914 00000EC8 1F                      	pop	ds
  7915 00000EC9 A1[2403]                	MOV	AX,[EXTERR]
  7916 00000ECC C43E[2803]              	LES	DI,[EXTERRPT]
  7917 00000ED0 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7918 00000ED4 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7919 00000ED8 E8AAF5                  	call	Get_User_Stack
  7920                                  	;mov	[si+0Ah],di
  7921 00000EDB 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7922                                  
  7923                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7924                                  	;;mov	[si+10h],es
  7925                                  	;MOV	[SI+user_env.user_ES],ES
  7926                                  	;;mov	[si+2],bx
  7927                                  	;MOV	[SI+user_env.user_BX],BX
  7928 00000EDE E89FFF                  	call	set_user_es_bx
  7929                                  
  7930                                  	;mov	[si+4],cx
  7931 00000EE1 894C04                  	MOV	[SI+user_env.user_CX],CX
  7932                                  jmp_SYS_RET_OK:
  7933                                  	; 15/12/2022
  7934                                  	;jmp	SYS_RET_OK
  7935                                  	; 25/06/2019
  7936 00000EE4 E951F7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7937                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7938                                  ;jmp_SYS_RET_OK:
  7939                                  	;jmp	SYS_RET_OK
  7940                                  
  7941                                  ; --------------------------------------------------------------------------
  7942                                  ; 09/01/2024
  7943                                  %if 0
  7944                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7945                                  	; DOSCODE:4CF3h
  7946                                  ;patch_or_unknown:
  7947                                  ;get_code_page:
  7948                                  	push    si
  7949                                  	mov     si, COUNTRY_CDPG
  7950                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7951                                  	mov     ax, [ss:si+6Ah]
  7952                                  	pop     si
  7953                                  	retn
  7954                                  %endif
  7955                                  ; --------------------------------------------------------------------------
  7956                                  
  7957                                  ; 29/04/2019 - Retro DOS v4.0
  7958                                  
  7959                                  ;BREAK	<ECS_call - Extended Code System support function>
  7960                                  ;---------------------------------------------------------------------------
  7961                                  ; Inputs:
  7962                                  ;	AL = 0	get lead byte table
  7963                                  ;		on return DS:SI has the table location
  7964                                  ;
  7965                                  ;	AL = 1	set / reset interim console flag
  7966                                  ;		DL = flag (00H or 01H)
  7967                                  ;		no return
  7968                                  ;
  7969                                  ;	AL = 2	get interim console flag
  7970                                  ;		on return DL = current flag value
  7971                                  ;
  7972                                  ;	AL = OTHER then error, and returns with:
  7973                                  ;		AX = error_invalid_function
  7974                                  ;
  7975                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  7976                                  ;	 SS:SP WILL BE PRESERVED!
  7977                                  ;---------------------------------------------------------------------------
  7978                                  
  7979                                  _$ECS_Call:
  7980 00000EE7 08C0                    	or	al,al			; AL = 0 (get table)?
  7981                                  	;jnz	short _okok
  7982                                  	; 15/12/2022
  7983 00000EE9 7403                    	jz	short get_lbt
  7984                                  ;_okok:
  7985 00000EEB E947F7                  	jmp	SYS_RET_OK
  7986                                  get_lbt:
  7987 00000EEE E894F5                  	call	Get_User_Stack		; *
  7988                                  
  7989                                  ;hkn; dbcs_table moved low to dosdata
  7990                                  	;mov	word [si+8],DBCS_TAB+2
  7991 00000EF1 C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  7992                                  
  7993 00000EF6 06                      	push	es
  7994                                  	;getdseg <es>			; es = DOSDATA
  7995 00000EF7 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  7996                                  	;mov	[si+14],es
  7997 00000EFC 8C440E                  	mov	[SI+user_env.user_DS],es
  7998 00000EFF 07                      	pop	es
  7999                                  
  8000                                  	; 15/12/2022
  8001 00000F00 EBE2                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  8002                                  ;_okok:
  8003                                  	; 15/12/2022	
  8004                                  	;;transfer SYS_RET_OK
  8005                                  	;jmp	short jmp_SYS_RET_OK
  8006                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8007                                  	;;jmp	SYS_RET_OK
  8008                                  	;jmp	short jmp_SYS_RET_OK
  8009                                  
  8010                                  ;============================================================================
  8011                                  ; PARSE.ASM, MSDOS 6.0, 1991
  8012                                  ;============================================================================
  8013                                  ; 19/07/2018 - Retro DOS v3.0
  8014                                  ; 15/05/2019 - Retro DOS v4.0
  8015                                  
  8016                                  ; System calls for parsing command lines
  8017                                  ;
  8018                                  ;   $PARSE_FILE_DESCRIPTOR
  8019                                  ;
  8020                                  ;   Modification history:
  8021                                  ;
  8022                                  ;       Created: ARR 30 March 1983
  8023                                  ;               EE PathParse 10 Sept 1983
  8024                                  ;
  8025                                  
  8026                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  8027                                  ;---------------------------------------------------------------------------
  8028                                  ; Inputs:
  8029                                  ;       DS:SI Points to a command line
  8030                                  ;       ES:DI Points to an empty FCB
  8031                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  8032                                  ;                   = 0 Parse stops if separator encountered
  8033                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  8034                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  8035                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  8036                                  ;                   = 0  "       "      "       - put blanks in FCB
  8037                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  8038                                  ;                   = 0  "       "      "        - put blanks in FCB
  8039                                  ; Function:
  8040                                  ;       Parse command line into FCB
  8041                                  ; Returns:
  8042                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  8043                                  ;       DS:SI points to first character after filename
  8044                                  ;---------------------------------------------------------------------------
  8045                                  
  8046                                  _$PARSE_FILE_DESCRIPTOR:
  8047 00000F02 E8D33E                  	call	MAKEFCB
  8048 00000F05 56                      	PUSH    SI
  8049 00000F06 E87CF5                  	call	Get_User_Stack
  8050                                  	;pop	word [si+8]
  8051 00000F09 8F4408                  	POP     word [SI+user_env.user_SI]
  8052 00000F0C C3                      	retn
  8053                                  
  8054                                  ;============================================================================
  8055                                  ; MISC.ASM, MSDOS 6.0, 1991
  8056                                  ;============================================================================
  8057                                  ; 19/07/2018 - Retro DOS v3.0
  8058                                  
  8059                                  ; 29/04/2019 - Retro DOS v4.0
  8060                                  
  8061                                  ;ENTRYPOINTSEG	EQU	0CH
  8062                                  ;MAXDIF		EQU	0FFFH
  8063                                  ;SAVEXIT 	EQU	10
  8064                                  ;WRAPOFFSET	EQU	0FEF0h
  8065                                  
  8066                                  ;
  8067                                  ;----------------------------------------------------------------------------
  8068                                  ;
  8069                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  8070                                  ;
  8071                                  ;	Return Stuff sort of like old get fat call
  8072                                  ;
  8073                                  ;	ENTRY	none
  8074                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8075                                  ;			GOD help anyone who tries to do ANYTHING except
  8076                                  ;			READ this ONE byte.
  8077                                  ;		DX = Total Number of allocation units on disk
  8078                                  ;		CX = Sector size
  8079                                  ;		AL = Sectors per allocation unit
  8080                                  ;		   = -1 if bad drive specified
  8081                                  ;	USES	all
  8082                                  ;
  8083                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  8084                                  ;
  8085                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  8086                                  ;
  8087                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  8088                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8089                                  ;			GOD help anyone who tries to do ANYTHING except
  8090                                  ;			READ this ONE byte.
  8091                                  ;		DX = Total Number of allocation units on disk
  8092                                  ;		CX = Sector size
  8093                                  ;		AL = Sectors per allocation unit
  8094                                  ;		   = -1 if bad drive specified
  8095                                  ;	USES	all
  8096                                  ;
  8097                                  ;----------------------------------------------------------------------------
  8098                                  ;
  8099                                  
  8100                                  _$SLEAZEFUNC:
  8101                                  	; 10/01/2024
  8102                                  	; 15/05/2019 - Retro DOS v4.0
  8103 00000F0D B200                    	MOV	DL,0
  8104                                  _$SLEAZEFUNCDL:
  8105 00000F0F 16                      	push	ss
  8106 00000F10 1F                      	pop	ds
  8107                                  	
  8108 00000F11 88D0                    	MOV	AL,DL
  8109 00000F13 E8145A                  	call	GETTHISDRV		; Get CDS structure
  8110                                  SET_AL_RET:
  8111                                  	; MSDOS 3.3
  8112                                  	;;mov	al, 0Fh
  8113                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  8114                                  	
  8115                                  	; MSDOS 6.0 & MSDOS 3.3
  8116 00000F16 721D                    	JC	short BADSLDRIVE
  8117                                  
  8118 00000F18 E82A1D                  	call	DISK_INFO
  8119                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  8120 00000F1B 7218                    	jc	short BADSLDRIVE
  8121 00000F1D 8826[9805]              	MOV	[FATBYTE],AH
  8122                                  
  8123                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  8124                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  8125                                  ; CALL AGAIN
  8126                                  
  8127                                  	; 10/01/2024
  8128                                  	;MOV	DI,FATBYTE
  8129 00000F21 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  8130 00000F23 E85FF5                  	call	Get_User_Stack
  8131                                  	;mov	[si+4],cx
  8132                                  	;mov	[si+6],bx
  8133                                  	;mov	[si+2],di
  8134 00000F26 894C04                  	MOV	[SI+user_env.user_CX],CX
  8135 00000F29 895C06                  	MOV	[SI+user_env.user_DX],BX
  8136                                  	;MOV	[SI+user_env.user_BX],DI
  8137                                  	; 10/01/2024
  8138 00000F2C C74402[9805]            	MOV	word [SI+user_env.user_BX],FATBYTE
  8139                                  	
  8140                                  	;mov	[si+0Eh],ss
  8141 00000F31 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  8142                                  
  8143 00000F34 C3                      	retn
  8144                                  
  8145                                  BADSLDRIVE:
  8146 00000F35 E91CF7                  	jmp	FCB_RET_ERR
  8147                                  
  8148                                  ;
  8149                                  ;----------------------------------------------------------------------------
  8150                                  ;
  8151                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8152                                  ;
  8153                                  ;	Returns location of DOS status for interrupt routines
  8154                                  ;
  8155                                  ;	ENTRY	none
  8156                                  ;	EXIT	(es:bx) = flag location
  8157                                  ;	USES	all
  8158                                  ;
  8159                                  ;----------------------------------------------------------------------------
  8160                                  ;
  8161                                  
  8162                                  _$GET_INDOS_FLAG:
  8163 00000F38 E84AF5                          CALL	Get_User_Stack
  8164                                          ;MOV	WORD [SI+2],INDOS
  8165 00000F3B C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8166                                  getin_segm:	; 13/01/2024
  8167                                  	;MOV	[SI+10H],SS
  8168 00000F40 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8169 00000F43 C3                      	RETN 
  8170                                  ;
  8171                                  ;----------------------------------------------------------------------------
  8172                                  ;
  8173                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8174                                  ;
  8175                                  ;	Return a pointer to interesting DOS variables This call is version
  8176                                  ;	dependent and is subject to change without notice in future versions.
  8177                                  ;	Use at risk.
  8178                                  ;
  8179                                  ;	ENTRY	none
  8180                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8181                                  ;	uses	ALL
  8182                                  ;
  8183                                  ;----------------------------------------------------------------------------
  8184                                  ;
  8185                                  
  8186                                  	; 13/01/2024
  8187                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:5226h
  8188                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:4D65h
  8189                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:4D58h	
  8190                                  
  8191                                  _$GET_IN_VARS:
  8192 00000F44 E83EF5                  	CALL	Get_User_Stack
  8193                                  	;MOV	WORD [SI+2],SYSINITVAR
  8194                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8195 00000F47 C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8196                                  	; 13/01/2024
  8197                                  	;;MOV	[SI+10H],SS
  8198                                  	;MOV	[SI+user_env.user_ES],SS
  8199                                  	;RETN
  8200 00000F4C EBF2                    	jmp	short getin_segm
  8201                                  
  8202                                  ;
  8203                                  ;----------------------------------------------------------------------------
  8204                                  ;
  8205                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8206                                  ;
  8207                                  ;	Return pointer to drive parameter table for default drive
  8208                                  ;
  8209                                  ;	ENTRY	none
  8210                                  ;	EXIT	(ds:bx) = DPB address
  8211                                  ;	USES	all
  8212                                  ;
  8213                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8214                                  ;
  8215                                  ;	Return pointer to a specified drive parameter table
  8216                                  ;
  8217                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8218                                  ;	EXIT	(al) = 0 iff ok
  8219                                  ;		  (ds:bx) = DPB address
  8220                                  ;		(al) = -1 if bad drive
  8221                                  ;	USES	all
  8222                                  ;
  8223                                  ;----------------------------------------------------------------------------
  8224                                  ;
  8225                                  
  8226                                  ; 15/05/2019 - Retro DOS v4.0
  8227                                  
  8228                                  _$GET_DEFAULT_DPB:
  8229 00000F4E B200                    	MOV	DL,0
  8230                                  _$GET_DPB:
  8231 00000F50 16                      	push	ss
  8232 00000F51 1F                      	pop	ds
  8233                                  
  8234 00000F52 88D0                    	MOV	AL,DL
  8235 00000F54 E8D359                  	call	GETTHISDRV		; Get CDS structure
  8236 00000F57 7222                    	JC	short ISNODRV 		; no valid drive
  8237 00000F59 C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8238                                  	;;test	word [es:di+43h],8000h
  8239                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8240                                  	;test	byte [es:di+44h],80h
  8241 00000F5D 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8242 00000F62 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8243 00000F64 E88003                  	call	ECritDisk
  8244 00000F67 E82946                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8245 00000F6A E89503                  	call	LCritDisk
  8246 00000F6D 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8247                                  					;   have.
  8248 00000F6F E813F5                  	call	Get_User_Stack
  8249                                  	;mov	[si+2],bp
  8250 00000F72 896C02                  	MOV	[SI+user_env.user_BX],BP
  8251                                  	;mov	[si+0Eh],es
  8252 00000F75 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8253 00000F78 30C0                    	XOR	AL,AL
  8254 00000F7A C3                      	retn
  8255                                  ISNODRV:
  8256 00000F7B B0FF                    	MOV	AL,-1
  8257 00000F7D C3                      	retn
  8258                                  
  8259                                  ;
  8260                                  ;----------------------------------------------------------------------------
  8261                                  ;
  8262                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8263                                  ;
  8264                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8265                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8266                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8267                                  ;
  8268                                  ;	ENTRY	none
  8269                                  ;	EXIT	none
  8270                                  ;	USES	all
  8271                                  ;
  8272                                  ;----------------------------------------------------------------------------
  8273                                  ;
  8274                                  
  8275                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8276                                  	; DOSCODE:4D94h
  8277                                  _$DISK_RESET:
  8278                                  	; 15/05/2019 - Retro DOS v4.0
  8279 00000F7E B0FF                    	mov	al,0FFh	; -1
  8280 00000F80 16                      	push	ss
  8281 00000F81 1F                      	pop	ds
  8282                                  	; 06/11/2022
  8283                                  	;MOV	AL,-1
  8284 00000F82 E86203                  	call	ECritDisk
  8285                                  	; MSDOS 6.0
  8286                                  	;;or	word [DOS34_FLAG],4
  8287                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8288 00000F85 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8289 00000F8A E87949                  	call	FLUSHBUF
  8290                                  	; MSDOS 6.0
  8291                                  	;and	word [DOS34_FLAG],0FFFBh
  8292                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8293                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8294                                  	; 15/12/2022
  8295 00000F8D 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8296 00000F92 C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8297                                  ;
  8298                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate. This
  8299                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8300                                  ; let's do it.
  8301                                  ;
  8302                                  ; Invalidate 'last-buffer' used
  8303                                  ;
  8304 00000F98 BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8305 00000F9B 891E[2000]              	MOV	[LastBuffer+2],BX
  8306 00000F9F 891E[1E00]              	MOV	[LastBuffer],BX
  8307                                  
  8308                                  	; MSDOS 3.3 
  8309                                  	; IBMDOS.COM, Offset 1C66h
  8310                                  	;;;;
  8311                                  	;lds	si,[BUFFHEAD]
  8312                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8313                                  				; .buf_flags, AH = 0, reset/clear
  8314                                  ;DRST_1:
  8315                                  	;;mov	[si+4],ax
  8316                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8317                                  	;lds	si,[SI]
  8318                                  	;cmp	si,bx ; -1
  8319                                  	;je	short DRST_2
  8320                                  	;;mov	[si+4],ax
  8321                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8322                                  	;lds	si,[SI]
  8323                                  	;cmp	si,bx
  8324                                  	;jne	short DRST_1
  8325                                  	;;;;
  8326                                  ;DRST_2:
  8327 00000FA3 E85C03                  	call	LCritDisk
  8328 00000FA6 B8FFFF                  	MOV	AX,-1
  8329                                  	; 07/12/2022
  8330                                  	;mov	ax,0FFFFh
  8331                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8332 00000FA9 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8333 00000FAA B82011                  	mov     ax,1120h
  8334 00000FAD CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8335                                  			; DS = DOS CS
  8336                                  			; Return: CF clear (successful)
  8337 00000FAF 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8338                                  	
  8339 00000FB0 C3                      	retn
  8340                                  
  8341                                  	; 19/07/2018 - Retro DOS v3.0
  8342                                  
  8343                                  ;
  8344                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8345                                  ;
  8346                                  ;----------------------------------------------------------------------------
  8347                                  ;
  8348                                  ;**	$SetDPB - Create a DPB
  8349                                  ;
  8350                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8351                                  ;
  8352                                  ;	ENTRY	ES:BP Points to DPB
  8353                                  ;		DS:SI Points to BPB
  8354                                  ;	EXIT	DPB setup
  8355                                  ;	USES	ALL but BP, DS, ES
  8356                                  ;
  8357                                  ;----------------------------------------------------------------------------
  8358                                  ;
  8359                                  
  8360                                  ; 10/05/2019 - Retro DOS v4.0
  8361                                  
  8362                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8363                                  
  8364                                  ; MSDOS 6.0
  8365 00000FB1 0300                    word3:	dw	3			; M008 -- word value for divides
  8366                                  
  8367                                  ; 13/01/2024
  8368                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8369                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8370                                  
  8371                                  ;procedure   $SETDPB,NEAR
  8372                                  
  8373                                  _$SETDPB:
  8374 00000FB3 89EF                    	MOV	DI,BP
  8375                                  	;ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8376                                  	; 13/01/2024
  8377 00000FB5 47                      	inc	di
  8378 00000FB6 47                      	inc	di
  8379 00000FB7 AD                      	LODSW
  8380 00000FB8 AB                      	STOSW				; dpb_sector_size
  8381                                  	; MSDOS 6.0
  8382                                  	;cmp	byte [si+3],0
  8383 00000FB9 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8384 00000FBD 7509                    	JNZ	short yesfat			     ; yes		;AN000;
  8385                                  	;mov	byte [es:di+4],0
  8386 00000FBF 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8387                                  	; 13/01/2024
  8388 00000FC4 89C3                    	mov	bx,ax
  8389 00000FC6 EB70                    	JMP	short setend			     ; NO		;AN000;
  8390                                  
  8391                                  yesfat: ; 10/08/2018
  8392 00000FC8 89C2                    	MOV	DX,AX
  8393 00000FCA AC                      	LODSB
  8394                                  	;DEC	AL
  8395                                  	; 17/12/2022
  8396 00000FCB 48                      	dec	ax
  8397 00000FCC AA                      	STOSB				; dpb_cluster_mask
  8398                                  	;INC	AL
  8399 00000FCD 40                      	inc	ax
  8400 00000FCE 30E4                    	XOR	AH,AH
  8401                                  LOG2LOOP:
  8402 00000FD0 A801                    	test	AL,1
  8403 00000FD2 7506                    	JNZ	short SAVLOG
  8404 00000FD4 FEC4                    	INC	AH
  8405 00000FD6 D0E8                    	SHR	AL,1
  8406 00000FD8 EBF6                    	JMP	SHORT LOG2LOOP
  8407                                  SAVLOG:
  8408 00000FDA 88E0                    	MOV	AL,AH
  8409 00000FDC AA                      	STOSB				; dpb_cluster_shift
  8410 00000FDD 88C3                    	MOV	BL,AL
  8411 00000FDF A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8412 00000FE0 AC                      	LODSB
  8413 00000FE1 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8414                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8415                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8416 00000FE2 88C7                    	MOV	BH,AL
  8417 00000FE4 AD                      	LODSW
  8418 00000FE5 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8419 00000FE6 B105                    	MOV	CL,5
  8420 00000FE8 D3EA                    	SHR	DX,CL			; Directory entries per sector
  8421 00000FEA 48                      	DEC	AX
  8422 00000FEB 01D0                    	ADD	AX,DX			; Cause Round Up
  8423 00000FED 89D1                    	MOV	CX,DX
  8424 00000FEF 31D2                    	XOR	DX,DX
  8425 00000FF1 F7F1                    	DIV	CX
  8426 00000FF3 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8427 00000FF5 47                      	INC	DI
  8428 00000FF6 47                      	INC	DI			; Skip dpb_first_sector
  8429 00000FF7 A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8430 00000FF8 AC                      	LODSB
  8431                                  	;mov	[es:bp+17h],al
  8432 00000FF9 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8433 00000FFD AD                      	LODSW				; Number of sectors in a FAT
  8434                                  	
  8435                                  	;;;
  8436                                  	;MSDOS 3.3
  8437                                  	;
  8438                                  	;STOSB		; DPB.FAT_SIZE
  8439                                  	;MUL	BH
  8440                                  	
  8441                                  	;MSDOS 6.0
  8442                                  	;
  8443 00000FFE AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8444 00000FFF 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8445 00001001 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8446 00001003 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8447                                  	;;;
  8448                                  	
  8449                                  	;add	ax,[es:bp+6]
  8450 00001005 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8451 00001009 AB                      	STOSW				; dpb_dir_sector
  8452 0000100A 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8453                                  	;mov	[es:bp+0Bh],ax
  8454 0000100C 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8455                                  	
  8456                                  	; MSDOS 6.0
  8457 00001010 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8458                                  	;;cmp	word [es:bp+0Dh],0
  8459                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8460                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8461                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8462                                  	; 15/12/2022
  8463                                  	; 28/07/2019
  8464 00001012 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8465 00001016 09DB                    	or	bx,bx
  8466 00001018 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8467                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8468                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8469                                  	
  8470                                  
  8471 0000101A 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8472                                  	;mov	bx,[si+8]
  8473 0000101C 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8474                                  	;mov	dx,[si+10]
  8475 0000101F 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8476 00001022 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8477 00001024 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8478 00001027 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8479 00001029 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8480                                  rott:					;AN000;;F.C. >32mb
  8481 0000102B F8                      	CLC				;AN000;;F.C. >32mb
  8482 0000102C D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8483 0000102E D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8484 00001030 E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8485                                  norot:					;AN000;
  8486                                  	; 15/12/2022
  8487                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8488 00001032 EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8489                                  normal_dpb:
  8490                                  	;;sub	ax,[es:bp+0Dh]
  8491                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8492                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8493                                  	; 15/12/2022
  8494                                  	; bx = [es:bp+DSKSIZ]
  8495                                  	;sub	ax,bx ; 28/07/2019
  8496                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8497                                  	; 15/12/2022
  8498 00001034 29C3                    	sub	bx,ax
  8499                                  	;NEG	AX			; Sectors in data area
  8500                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8501                                  	; 15/12/2022
  8502                                  	; CL = cluster shift
  8503                                  	; BX = number of data sectors 
  8504                                  	;SHR	AX,CL			; Div by sectors/cluster
  8505 00001036 D3EB                    	shr	bx,cl 
  8506                                  setend:
  8507                                  ;	M008 - CAS
  8508                                  ;
  8509                                  	; 15/12/2022
  8510 00001038 43                      	inc	bx
  8511                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8512                                  ;
  8513                                  ;	There has been a bug in our fatsize calculation for so long
  8514                                  ;	  that we can't correct it now without causing some user to
  8515                                  ;	  experience data loss. There are even cases where allowing
  8516                                  ;	  the number of clusters to exceed the fats is the optimal
  8517                                  ;	  case -- where adding 2 more fat sectors would make the
  8518                                  ;	  data field smaller so that there's nothing to use the extra
  8519                                  ;	  fat sectors for.
  8520                                  ;
  8521                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8522                                  ;	  still report that there was a cluster left when the disk was
  8523                                  ;	  actually full. Very graceful failure for a corrupt system
  8524                                  ;	  configuration. There may be worse cases that were never
  8525                                  ;	  properly traced back to this bug. The problem cases only
  8526                                  ;	  occurred when partition sizes were very near FAT sector
  8527                                  ;	  rounding boundaries, which were rare cases.
  8528                                  ;
  8529                                  ;	Also, it's possible that some third-party partition program might
  8530                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8531                                  ;	  scheme. In this hypothetical case, the number of allocation
  8532                                  ;	  clusters which don't actually have FAT entries to represent
  8533                                  ;	  them might be larger and might create a more catastrophic
  8534                                  ;	  failure. So we'll provide the safeguard of limiting the
  8535                                  ;	  max_cluster to the amount that will fit in the FATs.
  8536                                  ;
  8537                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8538                                  
  8539                                  ;	make sure the number of fat sectors is actually enough to
  8540                                  ;	  hold that many clusters. otherwise, back the number of
  8541                                  ;	  clusters down
  8542                                  
  8543                                  	; 15/12/2022
  8544                                  	; bx = number of clusters
  8545                                  
  8546                                  	; 19/07/2018 - Retro DOS v3.0
  8547                                  	; MSDOS 6.0
  8548                                  	; 15/12/2022
  8549                                  	;mov	bx,ax			; remember calculated # clusters
  8550                                  
  8551                                  	; 01/08/2018 (MSDOS 3.3)
  8552                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8553                                  	;xor	ah,ah 
  8554                                  
  8555                                  	; 10/05/2019 - Retro DOS v4.0
  8556                                  	;mov	ax,[ES:BP+0Fh]
  8557 00001039 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8558                                  
  8559                                  	;mul	word [es:bp+2]	
  8560 0000103D 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8561 00001041 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8562 00001045 720D                    	jb	short setend_fat12
  8563 00001047 D1EA                    	shr	dx,1
  8564                                  
  8565                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8566                                  	; 15/12/2022
  8567                                  ;cs3 7/2/92
  8568 00001049 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8569                                  					; than enough for the maximum FAT,
  8570                                  					; so go ahead and use the calculated
  8571                                  					; number of clusters.
  8572                                  ;cs3 7/2/92
  8573                                  
  8574 0000104B D1D8                    	rcr	ax,1			; find number of entries
  8575 0000104D 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8576                                  ;					;  into 12-bit fatland?
  8577 00001050 7215                    	jb	short setend_faterr	; then go ahead and let the
  8578                                  ;					;  inconsistency pass through
  8579                                  ;					;  rather than lose data by
  8580                                  ;					;  correcting the fat type
  8581 00001052 EB0E                    	jmp	short setend_fat16
  8582                                  
  8583                                  setend_fat12:
  8584 00001054 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8585 00001056 11D2                    	adc	dx,dx
  8586                                  
  8587                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8588                                  ;cs3 7/2/92
  8589                                  	; 15/12/2022
  8590 00001058 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8591 0000105B 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8592                                  					; here. Check for it and use
  8593                                  					; the calculated size in this case.
  8594                                  ;cs3 7/2/92
  8595                                  
  8596 0000105D 2EF736[B10F]            	div	word [cs:word3]
  8597                                  
  8598                                  setend_fat16:
  8599 00001062 48                      	dec	ax			; limit at 1
  8600 00001063 39D8                    	cmp	ax,bx			; is fat big enough?
  8601 00001065 7602                    	jbe	short setend_fat	; use max value that'll fit
  8602                                  
  8603                                  setend_faterr:
  8604 00001067 89D8                    	mov	ax,bx			; use calculated value
  8605                                  
  8606                                  setend_fat:
  8607                                  
  8608                                  ;	now ax = maximum legal cluster
  8609                                  
  8610                                  ;	end M008
  8611                                  
  8612                                  	;mov	[es:bp+0Dh], ax
  8613 00001069 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8614                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8615                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8616 0000106D 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8617                                  					; Init so first ALLOC starts at
  8618                                  					; begining of FAT
  8619                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8620                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8621 00001073 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8622                                  
  8623 00001079 C3                      	retn
  8624                                  
  8625                                  ;EndProc $SETDPB
  8626                                  
  8627                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8628                                  
  8629                                  ;
  8630                                  ;----------------------------------------------------------------------------
  8631                                  ;
  8632                                  ;**	$Dup_PDB
  8633                                  ;
  8634                                  ; Inputs:   DX is new segment address of process
  8635                                  ;	    SI is end of new allocation block
  8636                                  ;
  8637                                  ;----------------------------------------------------------------------------
  8638                                  ;
  8639                                  
  8640                                  _$DUP_PDB:
  8641                                  
  8642                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8643                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8644                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8645                                  
  8646                                  	; MSDOS 3.3
  8647                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8648                                  	;MOV	DS,[CS:CurrentPDB]
  8649                                  
  8650                                  	; 15/05/2019 - Retro DOS v4.0
  8651                                  	; MSDOS 6.0
  8652 0000107A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8653 0000107F C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8654 00001084 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8655                                  
  8656 00001088 56                      	PUSH	SI
  8657 00001089 EB0A                    	JMP	SHORT CreateCopy
  8658                                  
  8659                                  ;
  8660                                  ;----------------------------------------------------------------------------
  8661                                  ;
  8662                                  ; Inputs:
  8663                                  ;	DX = Segment number of new base
  8664                                  ; Function:
  8665                                  ;	Set up program base and copy term and ^C from int area
  8666                                  ; Returns:
  8667                                  ;	None
  8668                                  ; Called at DOS init
  8669                                  ;
  8670                                  ;----------------------------------------------------------------------------
  8671                                  ;
  8672                                  
  8673                                  ; 15/05/2019 - Retro DOS v4.0
  8674                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8675                                  
  8676                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8677                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8678                                  
  8679                                  _$CREATE_PROCESS_DATA_BLOCK:
  8680                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8681 0000108B E8F7F3                  	CALL	Get_User_Stack
  8682                                  	;mov	ds,[si+14h]
  8683 0000108E 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8684                                  	;push	word [2]
  8685 00001091 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8686                                  CreateCopy:
  8687 00001095 8EC2                    	MOV	ES,DX
  8688                                  
  8689 00001097 31F6                    	XOR	SI,SI			; copy entire PDB
  8690 00001099 89F7                    	MOV	DI,SI
  8691 0000109B B98000                  	MOV	CX,128
  8692 0000109E F3A5                    	REP	MOVSW
  8693                                  
  8694                                  ; DOS 3.3 7/9/86
  8695                                  	;mov	cx,20
  8696                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8697                                  	; 15/12/2022
  8698 000010A0 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8699                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8700                                  	;mov	cx,FILPERPROC
  8701                                  
  8702                                  	;mov	di,18h
  8703 000010A2 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8704                                  	;;PUSH	DS ; * 15/05/2019
  8705                                  	;;lds	si,[34h]
  8706                                  	;LDS	SI,[PDB.JFN_Pointer]
  8707                                  	;REP	MOVSB
  8708                                  	;;POP	DS ; * 15/05/2019
  8709                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8710                                  	; 05/12/2022
  8711                                  	; (push ds then pop ds is not needed here!)
  8712                                  	;push	ds
  8713                                  	;lds	si,[34h]
  8714 000010A5 C5363400                	lds	si,[PDB.JFN_Pointer]
  8715 000010A9 F3A4                    	rep	movsb
  8716                                  	;pop	ds
  8717                                  
  8718                                  ; DOS 3.3 7/9/86
  8719                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8720                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8721                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8722                                  
  8723 000010AB 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8724                                  
  8725                                  	;;test	byte [cs:CreatePDB],0FFh
  8726                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8727                                  	; 17/12/2022
  8728 000010B0 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8729                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8730 000010B4 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8731                                  
  8732                                  ; Here we set up for a new process...
  8733                                  
  8734                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8735                                  	;POP	DS
  8736                                  
  8737                                  	; MSDOS 6.0
  8738                                  	;;getdseg <ds>			; ds -> dosdata
  8739                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8740                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8741                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8742                                  	; 15/12/2022
  8743                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8744                                  
  8745 000010B6 31DB                    	XOR	BX,BX			; dup all jfns
  8746                                  	;mov	cx,20
  8747                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8748                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8749                                  	; 15/12/2022
  8750 000010B8 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8751                                  
  8752                                  Create_dup_jfn:
  8753 000010BA 06                      	PUSH	ES ;**			; save new PDB
  8754 000010BB E85A54                  	call	SFFromHandle		; get sf pointer
  8755 000010BE B0FF                    	MOV	AL,-1			; unassigned JFN
  8756 000010C0 7224                    	JC	short CreateStash	; file was not really open
  8757                                  	;;test	word [es:di+5],1000h
  8758                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8759                                  	; 15/05/2019
  8760                                  	;test	byte [es:di+6],10h
  8761 000010C2 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8762 000010C7 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8763                                  
  8764                                  ; We do not inherit network file handles.
  8765                                  
  8766                                  	;mov	ah,[es:di+2]
  8767 000010C9 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8768                                  	;and	ah,0F0h
  8769 000010CD 80E4F0                  	AND	AH,SHARING_MASK
  8770                                  	;cmp	ah,70h
  8771 000010D0 80FC70                  	CMP	AH,SHARING_NET_FCB
  8772 000010D3 7411                    	jz	short CreateStash
  8773                                  
  8774                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8775                                  ; duplication operation.
  8776                                  
  8777 000010D5 893E[9E05]              	MOV	[THISSFT],DI
  8778 000010D9 8C06[A005]              	MOV	[THISSFT+2],ES
  8779 000010DD E8C118                  	call	DOS_DUP 		; signal duplication
  8780                                  
  8781                                  ; get the old sfn for copy
  8782                                  
  8783 000010E0 E81854                  	call	pJFNFromHandle		; ES:DI is jfn
  8784 000010E3 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8785                                  
  8786                                  ; Take AL (old sfn or -1) and stash it into the new position
  8787                                  
  8788                                  CreateStash:
  8789 000010E6 07                      	POP	ES ;**
  8790                                  	;mov	[es:bx+18h],al
  8791 000010E7 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8792 000010EB 43                      	INC	BX			; next jfn...
  8793 000010EC E2CC                    	LOOP	Create_dup_jfn
  8794                                  
  8795 000010EE 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8796                                  	; 06/11/2022
  8797                                  	;mov	[es:16h],bx
  8798 000010F2 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8799 000010F7 8C06[3003]              	MOV	[CurrentPDB],ES
  8800                                  	;MOV	DS,BX ; 28/07/2019
  8801                                  	; 07/12/2022
  8802                                  	;mov	ds,[cs:DosDSeg]
  8803                                  	; 15/12/2022
  8804                                  	; ds = [cs:DosDSeg]
  8805 000010FB C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8806                                  	;mov	ds,bx
  8807                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8808                                  	; 15/12/2022
  8809                                  	;mov	ds,bx
  8810                                  
  8811                                  ; end of new process create
  8812                                  
  8813                                  Create_PDB_cont:
  8814                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8815                                  
  8816                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8817                                  
  8818                                  	;; 28/07/2019
  8819                                  	;;push	ds
  8820                                  	;;mov	ds,[cs:DosDSeg]
  8821                                  	;mov	byte [CreatePDB],0
  8822                                  	;;pop	ds
  8823                                  
  8824                                  ; 05/12/2022
  8825                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8826                                  ;	; (push-pop ds is nonsense here! 
  8827                                  ;	;  but i am using same code with original MSDOS.SYS
  8828                                  ;	;  for address compatibility.)
  8829                                  ;	push	ds
  8830                                  ;	; ds = [cs:DosDSeg] !
  8831                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8832                                  ;	mov	byte [CreatePDB],0
  8833                                  ;	pop	ds
  8834                                  
  8835 00001100 58                      	POP	AX ;*
  8836                                  
  8837                                  	;entry	SETMEM
  8838                                  
  8839                                  	; 17/12/2022
  8840                                  	; cx = 0
  8841                                  
  8842                                  ;---------------------------------------------------------------------------
  8843                                  ; Inputs:
  8844                                  ;	AX = Size of memory in paragraphs
  8845                                  ;	DX = Segment
  8846                                  ; Function:
  8847                                  ;	Completely prepares a program base at the
  8848                                  ;	specified segment.
  8849                                  ; Called at DOS init
  8850                                  ; Outputs:
  8851                                  ;	DS = DX
  8852                                  ;	ES = DX
  8853                                  ;	[0] has INT int_abort
  8854                                  ;	[2] = First unavailable segment
  8855                                  ;	[5] to [9] form a long call to the entry point
  8856                                  ;	[10] to [13] have exit address (from int_terminate)
  8857                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8858                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8859                                  ; DX,BP unchanged. All other registers destroyed.
  8860                                  ;---------------------------------------------------------------------------
  8861                                  
  8862                                  SETMEM:
  8863                                  	;XOR	CX,CX
  8864                                  	; 17/12/2022
  8865                                  	; cx = 0
  8866 00001101 8ED9                    	MOV	DS,CX
  8867 00001103 8EC2                    	MOV	ES,DX
  8868                                  	;mov	si,88h
  8869 00001105 BE8800                  	MOV	SI,addr_int_terminate
  8870                                  	;mov	di,10 ; 0Ah
  8871 00001108 BF0A00                  	MOV	DI,SAVEXIT
  8872                                  	;MOV	CX,6
  8873                                  	; 15/12/2022
  8874 0000110B B106                    	mov	cl,6
  8875 0000110D F3A5                    	REP	MOVSW
  8876 0000110F 26A30200                	MOV	[ES:2],AX
  8877 00001113 29D0                    	SUB	AX,DX
  8878 00001115 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8879 00001118 7603                    	JBE	short HAVDIF
  8880 0000111A B8FF0F                  	MOV	AX,MAXDIF
  8881                                  HAVDIF:
  8882 0000111D 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8883 00001120 BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8884 00001123 29C3                    	SUB	BX,AX
  8885 00001125 B104                    	MOV	CL,4
  8886 00001127 D3E0                    	SHL	AX,CL
  8887 00001129 8EDA                    	MOV	DS,DX
  8888                                  
  8889                                  	; (MSDOS 6.0 note)
  8890                                  	;
  8891                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8892                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8893                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8894                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8895                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8896                                  	; making this equvalence valid for this particular case. If however
  8897                                  	; there is less than 64K remaining the address in BX:AX will not 
  8898                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8899                                  	; into the PSP.
  8900                                  	;
  8901                                  	; Therefore for the case where there is less than 64K remaining in 
  8902                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8903                                  	; requirements will not work. Call 5, however will continue to work
  8904                                  	; for all cases.
  8905                                  	;
  8906                                  
  8907                                  	;mov	[6],ax
  8908                                  	;mov	[8],bx
  8909                                  
  8910 0000112B A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8911 0000112E 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8912                                  
  8913                                  	; 06/05/2019 - Retro DOS v4.0
  8914 00001132 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8915                                  					;    memory left
  8916 00001135 740C                    	je	short addr_ok		; Y: the above calculated address is
  8917                                  					;    OK
  8918                                  					; N: 
  8919                                  
  8920 00001137 C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8921 0000113D C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8922                                  addr_ok:
  8923                                  	;mov	word [0],20CDh
  8924 00001143 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8925                                  	;mov	byte [5],9Ah
  8926 00001149 C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8927                                  	;mov	word [50h],21CDh
  8928 0000114E C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8929                                  	;mov	byte [52h],0CBh
  8930 00001154 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8931                                  	;mov	word [34h],18h
  8932 00001159 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8933                                  	;mov	word [36h],ds
  8934 0000115F 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8935                                  	;mov	word [32h],20
  8936 00001163 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8937                                  ;
  8938                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8939                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8940                                  ; particular SFT.  We perform this by requiring that the server link together
  8941                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8942                                  ; initialize this pointer.
  8943                                  ;
  8944                                   	;mov	word [38h],-1
  8945 00001169 C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8946                                  	;mov	word [3Ah],-1
  8947 0000116F C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8948                                  
  8949                                  	; 06/05/2019
  8950                                  	; Set the real version number in the PSP - 5.00
  8951                                  
  8952                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8953                                  	; 07/12/2022
  8954 00001175 26C70640000500          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8955                                  
  8956 0000117C C3                      	retn
  8957                                  
  8958                                  ; 29/04/2019 - Retro DOS v4.0
  8959                                  
  8960                                  ;BREAK <$GSetMediaID -- get set media ID>
  8961                                  
  8962                                  ;---------------------------------------------------------------------------
  8963                                  ; Inputs:
  8964                                  ;	BL= drive number as defined in IOCTL
  8965                                  ;	AL= 0 get media ID
  8966                                  ;	    1 set media ID
  8967                                  ;	DS:DX= buffer containing information
  8968                                  ;		DW  0  info level (set on input)
  8969                                  ;		DD  ?  serial #
  8970                                  ;		DB  11 dup(?)  volume id
  8971                                  ;		DB   8 dup(?)  file system type
  8972                                  ; Function:
  8973                                  ;	Get or set media ID
  8974                                  ; Returns:
  8975                                  ;	carry clear, DS:DX is filled
  8976                                  ;	carry set, error
  8977                                  ;---------------------------------------------------------------------------
  8978                                  
  8979                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8980                                  _$GSetMediaID:
  8981                                  	; RAWIO - GET_MEDIA_ID
  8982 0000117D B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  8983 00001180 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  8984 00001182 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  8985                                  	;cmp	al,1		      ;AN000;MS.; set ?
  8986                                  	;jne	short errorfunc	      ;AN000;MS.; no
  8987                                  	; 15/12/2022
  8988 00001184 FEC8                    	dec	al
  8989 00001186 7507                    	jnz	short errorfunc ; al > 1
  8990                                  	; RAWIO - SET_MEDIA_ID
  8991                                  	;mov	cx,0846h	      ;AN001;MS.;
  8992                                  	; 15/12/2022
  8993 00001188 B146                    	mov	cl,46h	; cx = 0846h 
  8994                                  doioctl:			      ;AN000;
  8995 0000118A B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  8996                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  8997                                  	;call	_$IOCTL
  8998                                  	;retn			      ;AN000;MS.;
  8999                                  	; 15/12/2022
  9000 0000118C E97710                  	jmp	_$IOCTL
  9001                                  errorfunc:			      ;AN000;
  9002                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  9003                                  	;mov	al,1
  9004 0000118F B001                    	mov	al,error_invalid_function
  9005 00001191 E9AAF4                  	jmp	SYS_RET_ERR
  9006                                  
  9007                                  ; 16/05/2019 - Retro DOS v4.0
  9008                                  
  9009                                  ;============================================================================
  9010                                  ; MISC2.ASM, MSDOS 6.0, 1991
  9011                                  ;============================================================================
  9012                                  ; 20/07/2018 - Retro DOS v3.0
  9013                                  ; 29/04/2019 - Retro DOS v4.0
  9014                                  
  9015                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  9016                                  ;----------------------------------------------------------------------------
  9017                                  ;
  9018                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  9019                                  ;	     Strings of different lengths don't match.
  9020                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  9021                                  ;   Outputs: Z if strings same, NZ if different
  9022                                  ;   Registers modified: NONE
  9023                                  ;----------------------------------------------------------------------------
  9024                                  
  9025                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9026                                  StrCmp:
  9027 00001194 56                      	push	si
  9028 00001195 57                      	push	di
  9029 00001196 50                      	push	ax
  9030                                  Cmplp:
  9031 00001197 AC                      	LODSB
  9032 00001198 E8703D                  	call	UCase			; convert to upper case
  9033 0000119B E8C23D                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9034 0000119E 88C4                    	MOV	AH,AL
  9035 000011A0 268A05                  	MOV	AL,[ES:DI]
  9036 000011A3 47                      	INC	DI
  9037 000011A4 E8643D                  	call	UCase			; convert to upper case
  9038 000011A7 E8B63D                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9039 000011AA 38C4                    	CMP	AH,AL
  9040 000011AC 7504                    	JNZ	short PopRet		; Strings dif
  9041                                  
  9042 000011AE 08C0                    	OR	AL,AL
  9043 000011B0 75E5                    	JNZ	short Cmplp		; More string
  9044                                  PopRet:
  9045 000011B2 58                      	pop	ax
  9046 000011B3 5F                      	pop	di
  9047 000011B4 5E                      	pop	si
  9048 000011B5 C3                      	retn
  9049                                  
  9050                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  9051                                  ;----------------------------------------------------------------------------
  9052                                  ;
  9053                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  9054                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  9055                                  ;	characters.
  9056                                  ;
  9057                                  ;   Inputs:	DS:SI - pointer to source string
  9058                                  ;		ES:DI - pointer to destination string
  9059                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  9060                                  ;		DS:SI point byte after nul byte at end of source string
  9061                                  ;   Registers modified: SI,DI
  9062                                  ;----------------------------------------------------------------------------
  9063                                  
  9064                                  StrCpy:
  9065 000011B6 50                      	push	ax
  9066                                  CPYLoop:
  9067 000011B7 AC                      	LODSB
  9068 000011B8 E8503D                  	call	UCase			; convert to upper case
  9069 000011BB E8A23D                  	call	PATHCHRCMP		; convert / to \ ;
  9070 000011BE AA                      	STOSB
  9071                                  
  9072 000011BF 08C0                    	OR	AL,AL
  9073 000011C1 75F4                    	JNZ	short CPYLoop
  9074 000011C3 58                      	pop	ax
  9075 000011C4 C3                      	retn
  9076                                  
  9077                                  ;----------------------------------------------------------------------------
  9078                                  ; Procedure Name : FStrCpy
  9079                                  ;----------------------------------------------------------------------------
  9080                                  
  9081                                  FStrCpy:
  9082 000011C5 50                      	push	ax
  9083                                  FCPYLoop:
  9084 000011C6 AC                      	LODSB
  9085 000011C7 AA                      	STOSB
  9086 000011C8 08C0                    	OR	AL,AL
  9087 000011CA 75FA                    	JNZ	short FCPYLoop
  9088 000011CC 58                      	pop	ax
  9089 000011CD C3                      	retn
  9090                                  
  9091                                  ; 20/07/2018 - Retro DOS v3.0
  9092                                  ;----------------------------------------------------------------------------
  9093                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  9094                                  ;----------------------------------------------------------------------------
  9095                                  ;
  9096                                  ;UCase:	
  9097                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  9098                                  ;	retn
  9099                                  
  9100                                  ;Break <StrLen - compute length of string ES:DI>
  9101                                  ;----------------------------------------------------------------------------
  9102                                  ;**	StrLen - Compute Length of String
  9103                                  ;
  9104                                  ;	StrLen computes the length of a string, including the trailing 00
  9105                                  ;
  9106                                  ;	ENTRY	(es:di) = address of string
  9107                                  ;	EXIT	(cx) = size of string
  9108                                  ;	USES	cx, flags
  9109                                  ;----------------------------------------------------------------------------
  9110                                  
  9111                                  StrLen:
  9112 000011CE 57                      	push	di
  9113 000011CF 50                      	push	ax
  9114                                  	;MOV	CX,-1
  9115 000011D0 B9FFFF                  	mov	cx,65535
  9116 000011D3 30C0                    	XOR	AL,AL
  9117 000011D5 F2AE                    	REPNE	SCASB
  9118 000011D7 F7D1                    	NOT	CX
  9119 000011D9 58                      	pop	ax
  9120 000011DA 5F                      	pop	di
  9121 000011DB C3                      	retn
  9122                                  
  9123                                  ;----------------------------------------------------------------------------
  9124                                  ;**	DStrLen - Compute Length of String
  9125                                  ;
  9126                                  ;	ENTRY	(ds:si) = address of string
  9127                                  ;	EXIT	(cx) = size of string, including trailing NUL
  9128                                  ;	USES	cx, flags
  9129                                  ;----------------------------------------------------------------------------
  9130                                  
  9131                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  9132 000011DC E80300                  	CALL	XCHGP
  9133 000011DF E8ECFF                  	CALL	StrLen
  9134                                  	;CALL	XCHGP
  9135                                  	;retn
  9136                                  	; 18/12/2022
  9137                                  	;jmp	short XCHGP
  9138                                  
  9139                                  ;----------------------------------------------------------------------------
  9140                                  ;**	XCHGP - Exchange Source and Destination Pointers
  9141                                  ;
  9142                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  9143                                  ;
  9144                                  ;	ENTRY	none
  9145                                  ;	EXIT	pairs exchanged
  9146                                  ;	USES	SI, DI, DS, ES
  9147                                  ;----------------------------------------------------------------------------
  9148                                  
  9149                                  XCHGP:
  9150 000011E2 1E                      	push	ds
  9151 000011E3 06                      	push	es
  9152 000011E4 1F                      	pop	ds
  9153 000011E5 07                      	pop	es
  9154 000011E6 87F7                    	XCHG	SI,DI
  9155                                  xchgp_retn:
  9156 000011E8 C3                      	retn
  9157                                  
  9158                                  ;Break	<Idle - wait for a specified amount of time>
  9159                                  ;----------------------------------------------------------------------------
  9160                                  ;
  9161                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  9162                                  ;   	   we spin until RetryLoop is exhausted.
  9163                                  ;
  9164                                  ;   Inputs:	RetryLoop is the number of times we spin
  9165                                  ;   Outputs:	Wait
  9166                                  ;   Registers modified: none
  9167                                  ;----------------------------------------------------------------------------
  9168                                  
  9169                                  Idle:
  9170                                  	;test	byte [SS:FSHARING],0FFh
  9171 000011E9 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9172                                  	;retnz
  9173 000011EF 75F7                    	jnz	short xchgp_retn
  9174                                  	;SAVE	<CX>
  9175 000011F1 51                      	push	cx
  9176 000011F2 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9177 000011F7 E308                    	JCXZ	Idle3
  9178                                  Idle1:	
  9179 000011F9 51                      	PUSH	CX
  9180 000011FA 31C9                    	XOR	CX,CX
  9181                                  Idle2:	
  9182 000011FC E2FE                    	LOOP	Idle2
  9183 000011FE 59                      	POP	CX
  9184 000011FF E2F8                    	LOOP	Idle1
  9185                                  Idle3:	
  9186                                  	;RESTORE <CX>
  9187 00001201 59                      	pop	cx
  9188 00001202 C3                      	retn
  9189                                  
  9190                                  ;Break	<TableDispatch - dispatch to a table>
  9191                                  ;----------------------------------------------------------------------------
  9192                                  ;
  9193                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9194                                  ;   routine. Preserve all input registers to the routine.
  9195                                  ;
  9196                                  ;   Inputs:	Push	return address
  9197                                  ;		Push	Table address
  9198                                  ;		Push	index (byte)
  9199                                  ;   Outputs:	appropriate routine gets jumped to.
  9200                                  ;		return indicates invalid index
  9201                                  ;   Registers modified: none.
  9202                                  ;----------------------------------------------------------------------------
  9203                                  
  9204                                  struc TFrame	 ; TableFrame
  9205 00000000 ????                    .OldBP:	 resw 1  ; 0
  9206 00000002 ????                    .OldRet: resw 1  ; 2
  9207 00000004 ??                      .Index:	 resb 1  ; 4
  9208 00000005 ??                      .Pad:	 resb 1  ; 5  
  9209 00000006 ????                    .Tab:	 resw 1  ; 6
  9210 00000008 ????                    .NewRet: resw 1  ; 8
  9211                                  endstruc
  9212                                  
  9213                                  TableDispatch:
  9214 00001203 55                      	PUSH	BP
  9215 00001204 89E5                    	MOV	BP,SP
  9216 00001206 53                      	PUSH	BX			; save BX
  9217                                  	;mov	bx,[bp+6]
  9218 00001207 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9219 0000120A 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9220                                  	;cmp	[bp+4],bl
  9221 0000120D 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9222 00001210 7317                    	JAE	short TableError	; yes
  9223                                  	;mov	bl,[bp+4]
  9224 00001212 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9225 00001215 30FF                    	XOR	BH,BH			; convert to word
  9226 00001217 D1E3                    	SHL	BX,1			; convert to word pointer
  9227 00001219 43                      	INC	BX			; point past first length byte
  9228                                  	; 17/08/2018
  9229                                  	;add	bx,[bp+6]
  9230 0000121A 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9231 0000121D 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9232                                  	;mov	[bp+6],bx
  9233 00001220 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9234 00001223 5B                      	POP	BX			; restore BX
  9235 00001224 5D                      	POP	BP			; restore BP
  9236 00001225 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9237 00001228 C3                      	retn				; do operation
  9238                                  TableError:
  9239 00001229 5B                      	POP	BX			; restore BX
  9240 0000122A 5D                      	POP	BP			; restore BP
  9241 0000122B C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9242                                  
  9243                                  ;Break	<TestNet - determine if a CDS is for the network>
  9244                                  ;----------------------------------------------------------------------------
  9245                                  ;
  9246                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9247                                  ;	network CDS. This will handle NULL cds also.
  9248                                  ;
  9249                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9250                                  ;   Outputs:	ES:DI = ThisCDS
  9251                                  ;		carry Set => network
  9252                                  ;		carry Clear => local
  9253                                  ;   Registers modified: none.
  9254                                  ;----------------------------------------------------------------------------
  9255                                  
  9256                                  TestNet:
  9257                                  	;LES	DI,[CS:THISCDS]
  9258                                  
  9259                                  	; 16/05/2019 - Retro DOS v4.0
  9260 0000122E 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9261 00001233 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9262 00001238 83FFFF                  	CMP	DI,-1
  9263 0000123B 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9264                                  	;;test	word [es:di+43h],8000h
  9265                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9266                                  	;test	byte [es:di+44h],80h
  9267 0000123D 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9268 00001242 7501                    	JNZ	short CMCRet		; jump has carry clear
  9269 00001244 C3                      	retn				; carry is clear
  9270                                  CMCRet: 
  9271 00001245 F5                      	CMC
  9272 00001246 C3                      	retn
  9273                                  
  9274                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9275                                  ;----------------------------------------------------------------------------
  9276                                  ;
  9277                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9278                                  ;	network file.
  9279                                  ;
  9280                                  ;   Inputs:	ES:DI point to SFT
  9281                                  ;   Outputs:	Zero set if not network sft
  9282                                  ;		zero reset otherwise
  9283                                  ;		Carry CLEAR!!!
  9284                                  ;   Registers modified: none.
  9285                                  ;----------------------------------------------------------------------------
  9286                                  
  9287                                  IsSFTNet:
  9288                                  	;;test	word [es:di+5],8000h
  9289                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9290                                  	; 16/05/2019 
  9291                                  	;test	byte [es:di+6],80h
  9292 00001247 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9293 0000124C C3                      	retn
  9294                                  
  9295                                  ;Break	<FastInit - Initialize FastTable entries >
  9296                                  ;----------------------------------------------------------------------------
  9297                                  ;   DOS 4.00   2/9/87
  9298                                  ;   FastInit  - initialize the FASTXXX routine entry
  9299                                  ;		  in the FastTable
  9300                                  ;
  9301                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9302                                  ;		DS:SI = address of FASTXXX routine entry
  9303                                  ;		   SI = -1 for query only
  9304                                  ;   Outputs:	Carry flag clear, if success
  9305                                  ;		Carry flag set,   if failure
  9306                                  ;
  9307                                  ;
  9308                                  ;----------------------------------------------------------------------------
  9309                                  
  9310                                  ;Procedure FastInit,NEAR
  9311                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9312                                  
  9313                                  ;	; MSDOS 3.3
  9314                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9315                                  ;FastInit:
  9316                                  ;	mov	di,FastTable ; FastOpenTable
  9317                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9318                                  ;	mov	bx,cs			; get DOS segment
  9319                                  ;	cmp	ax,bx			; first time installed ?	
  9320                                  ;	je	short ok_install	; yes
  9321                                  ;	stc				; set carry
  9322                                  ;	retn				; (cf=1 means) already installed !
  9323                                  ;
  9324                                  ;ok_install:
  9325                                  ;	mov	bx,FastTable ; FastOpenTable
  9326                                  ;	mov	cx,ds
  9327                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9328                                  ;	mov	[cs:bx+4],cx
  9329                                  ;	mov	[cs:bx+2],si
  9330                                  ;	retn
  9331                                  
  9332                                  ; 16/05/2019 - Retro DOS v4.0
  9333                                  
  9334                                  FastInit:
  9335                                  	; MSDOS 6.0
  9336                                  	;hkn; set up es to dosdataseg.
  9337 0000124D 06                      	push	es
  9338                                  	;getdseg <es>			; es -> dosdata
  9339 0000124E 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9340                                  
  9341                                  	;hkn; FastTable is in DOSDATA
  9342 00001253 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9343 00001256 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9344 00001257 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9345 00001259 D1E3                    	SHL	BX,1			;AN000;FO.;; times 4, each entry is DWORD
  9346 0000125B D1E3                    	SHL	BX,1			;AN000;FO.
  9347 0000125D 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9348 0000125F 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9349                                  fcheck: 				;AN000;
  9350 00001263 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9351 00001265 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9352 00001267 7405                    	JZ	short ok_install	;AN000;FO.;; yes
  9353 00001269 09C0                    	OR	AX,AX			;AN000;FO.;
  9354                                  	;JZ	short ok_install	;AN000;FO.;
  9355                                  	;STC				;AN000;FO.;; already installed !
  9356                                  	;JMP	SHORT FSret		;AN000;FO. set carry
  9357                                  	; 14/01/2024
  9358 0000126B F9                      	stc
  9359 0000126C 7517                    	jnz	short FSret
  9360                                  ok_install:				;AN000;
  9361 0000126E 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9362 00001271 7412                    	JZ	short FSret		;AN000;FO.; yes
  9363 00001273 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9364 00001275 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9365 00001279 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9366                                  
  9367                                  ;hkn; FastFlg moved to DOSDATA
  9368 0000127C BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9369 0000127F 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9370                                  	;or	byte [es:di],80h
  9371 00001281 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9372                                  FSret:					;AN000;
  9373 00001285 07                      	pop	es
  9374 00001286 C3                      	retn				;AN000;FO.
  9375                                  
  9376                                  ;EndProc FastInit
  9377                                  
  9378                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9379                                  ;----------------------------------------------------------------------------
  9380                                  ;   DOS 3.3   6/10/86
  9381                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9382                                  ;
  9383                                  ;   Inputs:	None
  9384                                  ;   Outputs:	AX = -1 and carry flag set
  9385                                  ;
  9386                                  ;   Registers modified: none.
  9387                                  ;----------------------------------------------------------------------------
  9388                                  
  9389                                  FastRet:
  9390                                  	;mov	ax,-1
  9391                                  	;stc
  9392                                  	;retf
  9393 00001287 F9                      	STC
  9394 00001288 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9395 0000128A CB                      	RETF
  9396                                  
  9397                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9398                                  ;----------------------------------------------------------------------------
  9399                                  ;   DOS 3.3   6/10/86
  9400                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9401                                  ;
  9402                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9403                                  ;   Outputs:	same output as $OPEN
  9404                                  ;
  9405                                  ;----------------------------------------------------------------------------
  9406                                  
  9407                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9408                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9409                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9410                                  
  9411                                  NLS_OPEN:
  9412                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9413                                  ;	MOV	BYTE [CPSWFLAG],0
  9414                                  ;	PUSH	BX		 ; save current state
  9415                                  
  9416 0000128B 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9417 0000128D E8E05A                  	call	_$OPEN
  9418                                  
  9419                                  ;	POP	BX		 ; restore current state
  9420                                  ;	MOV	[CPSWFLAG],BL
  9421                                  	
  9422 00001290 C3                      	RETN
  9423                                  
  9424                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9425                                  ;----------------------------------------------------------------------------
  9426                                  ;   DOS 3.3   6/10/86
  9427                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9428                                  ;
  9429                                  ;   Inputs:	BP = open mode
  9430                                  ;   Outputs:	same output as $LSEEK
  9431                                  ;
  9432                                  ;----------------------------------------------------------------------------
  9433                                  
  9434                                  ; 16/05/2019 - Retro DOS v4.0
  9435                                  
  9436                                  NLS_LSEEK:
  9437 00001291 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9438 00001296 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9439 0000129B E81000                  	CALL	Fake_User_Stack
  9440 0000129E 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9441 000012A0 E87A54                  	call	_$LSEEK
  9442                                  NLS_SEEK_RET:	; 26/06/2024
  9443 000012A3 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9444 000012A8 368F06[8405]            	POP	word [SS:USER_SP]
  9445 000012AD C3                      	RETN
  9446                                  
  9447                                  ;Break	<Fake_User_Stack - save user stack>
  9448                                  ;----------------------------------------------------------------------------
  9449                                  ;   DOS 3.3   6/10/86
  9450                                  ;   Fake_User_Stack - save user stack pointer
  9451                                  ;
  9452                                  ;----------------------------------------------------------------------------
  9453                                  
  9454                                  Fake_User_Stack:
  9455 000012AE 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9456 000012B2 36A3[8405]              	MOV	[SS:USER_SP],AX
  9457 000012B6 8CD0                    	MOV	AX,SS
  9458 000012B8 36A3[8605]              	MOV	[SS:USER_SS],AX
  9459 000012BC C3                      	RETN
  9460                                  
  9461                                  ;Break	<GetDevList - get device header list pointer>
  9462                                  ;----------------------------------------------------------------------------
  9463                                  ;   DOS 3.3   7/25/86
  9464                                  ;   GetDevList - get device header list pointer
  9465                                  ;
  9466                                  ;   Output: AX:BX points to the device header list
  9467                                  ;----------------------------------------------------------------------------
  9468                                  
  9469                                  GetDevList:
  9470                                  	; 16/05/2019 - Retro DOS v4.0
  9471 000012BD BE[280D]                	MOV	SI,SysInitTable
  9472 000012C0 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9473 000012C5 C534                    	LDS	SI,[SI]
  9474                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9475 000012C7 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9476                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9477 000012CA 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9478 000012CD C3                      	RETN
  9479                                  
  9480                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC>
  9481                                  ;----------------------------------------------------------------------------
  9482                                  ;   DOS 3.3   7/25/86
  9483                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9484                                  ;
  9485                                  ;   Inputs:	BP = function code 0CH
  9486                                  ;   Outputs:	same output as generic $IOCTL
  9487                                  ;
  9488                                  ;----------------------------------------------------------------------------
  9489                                  
  9490                                  NLS_IOCTL:
  9491                                  	; 16/05/2019 - Retro DOS v4.0
  9492 000012CE 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9493 000012D3 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9494 000012D8 E8D3FF                  	CALL	Fake_User_Stack
  9495 000012DB 89E8                    	MOV	AX,BP		; set up correct interface for $IOCTL
  9496 000012DD E8260F                  	call	_$IOCTL
  9497                                  	;POP	word [SS:USER_SS] ; restore user stack
  9498                                  	;POP	word [SS:USER_SP]
  9499                                  	;RETN
  9500                                  	; 26/06/2024 (PCDOS 7.1 IBMDOS.COM)
  9501 000012E0 EBC1                    	jmp	short NLS_SEEK_RET
  9502                                  
  9503                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9504                                  ;----------------------------------------------------------------------------
  9505                                  ;   DOS 3.3   7/25/86
  9506                                  ;   NLS_GETEXT	-
  9507                                  ;
  9508                                  ;   Inputs:	none
  9509                                  ;   Outputs:	AX = extended error
  9510                                  ;
  9511                                  ;----------------------------------------------------------------------------
  9512                                  
  9513                                  NLS_GETEXT:
  9514                                  	; 16/05/2019 - Retro DOS v4.0
  9515 000012E2 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9516                                  	; 23/09/2023
  9517                                  MSG_RETRIEVAL:
  9518 000012E6 C3                      	RETN
  9519                                  
  9520                                  ; 29/04/2019 - Retro DOS v4.0
  9521                                  
  9522                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9523                                  
  9524                                  ;----------------------------------------------------------------------------
  9525                                  ;   DOS 4.00
  9526                                  ;
  9527                                  ;   Inputs:	DL=0 get extended error message addr
  9528                                  ;		  =1 set extended error message addr
  9529                                  ;		  =2 get parser error message addr
  9530                                  ;		  =3 set parser error message addr
  9531                                  ;		  =4 get critical error message addr
  9532                                  ;		  =5 set critical error message addr
  9533                                  ;		  =6 get file system error message addr
  9534                                  ;		  =7 set file system error message addr
  9535                                  ;		  =8 get address for code reduction
  9536                                  ;		  =9 set address for code reduction
  9537                                  ;   Function:	get/set message address
  9538                                  ;   Outputs:	ES:DI points to addr when get
  9539                                  ;----------------------------------------------------------------------------
  9540                                  
  9541                                  ;Procedure MSG_RETRIEVAL,NEAR
  9542                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9543                                  
  9544                                  ; 23/09/2023
  9545                                  ;MSG_RETRIEVAL:
  9546                                  
  9547                                  ;;	NOTE:  This function lives in command.com resident code now.
  9548                                  ;;	If the int 2F ever gets this far, we'll return registers
  9549                                  ;;	unchanged, which produces the same result as before, if
  9550                                  ;;	command.com wasn't present (and therefore no messages available).
  9551                                  ;;
  9552                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9553                                  ;;	No_Op zeroes AL.
  9554                                  ;;
  9555                                  ;;;hkn; set up ds to point to DOSDATA
  9556                                  ;;	push	ds
  9557                                  ;;	getdseg	<ds>			; ds -> dosdata
  9558                                  ;;
  9559                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9560                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9561                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9562                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9563                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9564                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9565                                  ;;	DEC	AL		    ;AN000;;MS.
  9566                                  ;;toget:				    ;AN000;
  9567                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9568                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9569                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9570                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9571                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9572                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9573                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9574                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9575                                  ;;getget: 				     ;AN000;
  9576                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9577                                  ;;MSGret: 				     ;AN000;
  9578                                  ;;	POP	SI			     ;AN000;;MS.
  9579                                  ;;	POP	AX			     ;AN000;;MS.
  9580                                  ;;
  9581                                  ;;	pop	ds
  9582                                  
  9583                                  ;	return				     ;AN000;;MS. exit
  9584                                  
  9585                                  ; 23/09/2023
  9586                                  ;	retn	; 29/04/2019
  9587                                  
  9588                                  ;============================================================================
  9589                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9590                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9591                                  ;============================================================================
  9592                                  ; 20/07/2018 - Retro DOS v3.0
  9593                                  
  9594                                  ;	; MSDOS 3.3
  9595                                  ;	; 08/08/2018 - Retro DOS v3.0
  9596                                  ;ECritMEM:
  9597                                  ;ECritSFT:
  9598                                  ;	;
  9599                                  ;ECritDisk:
  9600                                  ;	retn
  9601                                  ;	;push	ax
  9602                                  ;	
  9603                                  ;	mov	ax,8001h
  9604                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9605                                  ;			; AL = critical section number (00h-0Fh)
  9606                                  ;	pop	ax
  9607                                  ;	retn
  9608                                  ;
  9609                                  ;	; MSDOS 3.3
  9610                                  ;	; 08/08/2018 - Retro DOS v3.0
  9611                                  ;LCritMEM:
  9612                                  ;LCritSFT:
  9613                                  ;	;
  9614                                  ;LCritDisk:
  9615                                  ;	retn
  9616                                  ;	;push	ax
  9617                                  ;	
  9618                                  ;	mov	ax,8101h
  9619                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9620                                  ;			; AL = critical section number (00h-0Fh)
  9621                                  ;	pop	ax
  9622                                  ;	retn
  9623                                  ;
  9624                                  ;ECritDevice:
  9625                                  ;	retn
  9626                                  ;	;push	ax
  9627                                  ;	
  9628                                  ;	mov	ax,8002h
  9629                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9630                                  ;			; AL = critical section number (00h-0Fh)
  9631                                  ;	pop	ax
  9632                                  ;	retn
  9633                                  ;
  9634                                  ;LCritDevice:
  9635                                  ;	retn
  9636                                  ;	;push	ax
  9637                                  ;	
  9638                                  ;	mov	ax,8102h
  9639                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9640                                  ;			; AL = critical section number (00h-0Fh)
  9641                                  ;	pop	ax
  9642                                  ;	retn
  9643                                  
  9644                                  ;============================================================================
  9645                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9646                                  ;============================================================================
  9647                                  ; 12/05/2019 - Retro DOS v4.0
  9648                                  
  9649                                  ; Critical Section Routines
  9650                                  
  9651                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9652                                  
  9653                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9654                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9655                                  
  9656                                  ; ---------------------------------------------------------------------------
  9657                                  ; Each handler must leave everything untouched; including flags!
  9658                                  ;
  9659                                  ; Sleaze for time savings: first instruction is a return. This is patched
  9660                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9661                                  ; ---------------------------------------------------------------------------
  9662                                  
  9663                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9664                                  ; ---------------------------------------------------------------------------
  9665                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9666                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9667                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9668                                  ; ---------------------------------------------------------------------------
  9669                                  
  9670                                  ;%macro POPFF 0
  9671                                  ;	jmp	$+3
  9672                                  ;	iret
  9673                                  ;	push	cs
  9674                                  ;	call	$-2
  9675                                  ;%endmacro
  9676                                  
  9677                                  ; ---------------------------
  9678                                  
  9679                                  ;Procedure  ECritDisk,NEAR
  9680                                  	;public  ECritMEM
  9681                                  	;public  ECritSFT
  9682                                  ECritMEM:
  9683                                  ECritSFT:
  9684                                  ;
  9685                                  ECritDisk:
  9686                                  
  9687                                  ;SR; Check if critical section is to be entered
  9688                                  
  9689 000012E7 9C                      	pushf
  9690 000012E8 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9691 000012EE 740D                    	jz	short ECritDisk_2
  9692                                  
  9693                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9694                                  ;	;popff  ; * (macro)
  9695                                  ;	jmp	short ECritDisk_1 ; *
  9696                                  ;
  9697                                  ;ECritDisk_iret: ; *
  9698                                  ;	iret ; *
  9699                                  
  9700                                  	; 16/12/2022
  9701                                  	; 13/11/2022
  9702                                  	;jmp	short ECritDisk_1
  9703                                  	; 06/11/2022
  9704                                  ;ECritDisk_iret:
  9705                                  ;	iret	
  9706                                  
  9707                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9708                                  ECritDisk_1:
  9709 000012F0 0E                      	push	cs ; *
  9710 000012F1 E80800                  	call	ECritDisk_iret ; *		
  9711                                  	
  9712                                  ECritDisk_0:
  9713 000012F4 50                      	PUSH    AX
  9714                                  	;MOV	AX,8000h+critDisk
  9715                                  	;INT	int_IBM
  9716 000012F5 B80180                  	mov	ax,8001h
  9717 000012F8 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9718                                  			; AL = critical section number (00h-0Fh)
  9719 000012FA 58                      	POP     AX
  9720 000012FB C3                      	retn
  9721                                  
  9722                                  	; 16/12/2022
  9723                                  	; 13/11/2022
  9724                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9725                                  LCritDisk_iret: 
  9726 000012FC CF                      	iret
  9727                                  
  9728                                  ECritDisk_2:
  9729                                  	;;popff ; *
  9730                                  	;;retn
  9731                                  ;	jmp	short ECritDisk_3 ; *
  9732                                  ;ECritDisk_iret2: ; *
  9733                                  ;	iret
  9734                                  	
  9735                                  	; 16/12/2022
  9736                                  	; 13/11/2022
  9737                                  	;jmp	short ECritDisk_3
  9738                                  ;ECritDisk_iret2:
  9739                                  	;iret
  9740                                  
  9741                                  ECritDisk_3:
  9742 000012FD 0E                      	push    cs ; *
  9743                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9744                                  	;call	ECritDisk_iret2 ; *
  9745                                  	;retn
  9746                                  	; 16/12/2022
  9747 000012FE E8FBFF                  	call	ECritDisk_iret
  9748 00001301 C3                      	retn
  9749                                  
  9750                                  ;EndProc ECritDisk
  9751                                  
  9752                                  ; ---------------------------
  9753                                  
  9754                                  ;Procedure   LCritDisk,NEAR
  9755                                  	;public  LCritMEM
  9756                                  	;public  LCritSFT
  9757                                  LCritMEM:
  9758                                  LCritSFT:
  9759                                  ;
  9760                                  LCritDisk:
  9761                                  
  9762                                  ;SR; Check if critical section is to be entered
  9763                                  
  9764 00001302 9C                      	pushf
  9765 00001303 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9766 00001309 740C                    	jz	short LCritDisk_2
  9767                                  	;popff  ; * (macro)
  9768                                  ;	jmp	short LCritDisk_1 ; *
  9769                                  ;
  9770                                  ;LCritDisk_iret: ; *
  9771                                  ;	iret ; *
  9772                                  
  9773                                  	; 16/12/2022
  9774                                  	; 13/11/2022
  9775                                  	;jmp	short LCritDisk_1
  9776                                  ;LCritDisk_iret:
  9777                                  	;iret
  9778                                  
  9779                                  LCritDisk_1:
  9780 0000130B 0E                      	push	cs ; *
  9781 0000130C E8EDFF                  	call	LCritDisk_iret ; *		
  9782                                  	
  9783                                  LCritDisk_0:
  9784 0000130F 50                      	PUSH	AX
  9785                                  	;MOV	AX,8100h+critDisk
  9786                                  	;INT	int_IBM
  9787 00001310 B80181                  	mov	ax,8101h
  9788 00001313 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9789                                  			; AL = critical section number (00h-0Fh)
  9790 00001315 58                      	POP	AX
  9791 00001316 C3                      	retn
  9792                                  
  9793                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9794                                  ;	iret
  9795                                  
  9796                                  LCritDisk_2:
  9797                                  	;;popff ; *
  9798                                  	;;retn
  9799                                  ;	jmp	short LCritDisk_3 ; *
  9800                                  ;LCritDisk_iret2: ; *
  9801                                  ;	iret
  9802                                  
  9803                                  	; 16/12/2022
  9804                                  	; 13/11/2022
  9805                                  	;jmp	short LCritDisk_3
  9806                                  ;LCritDisk_iret2:
  9807                                  	;iret
  9808                                  
  9809                                  LCritDisk_3:
  9810 00001317 0E                      	push    cs ; *
  9811                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9812                                  	;call	LCritDisk_iret2 ; *
  9813                                  	;retn
  9814                                  	; 16/12/2022
  9815 00001318 E8E1FF                  	call	LCritDisk_iret
  9816 0000131B C3                      	retn
  9817                                  
  9818                                  ;EndProc LCritDisk
  9819                                  
  9820                                  ; ---------------------------
  9821                                  
  9822                                  ;Procedure   ECritDevice,NEAR
  9823                                  
  9824                                  ECritDevice:
  9825                                  
  9826                                  ;SR; Check if critical section is to be entered
  9827                                  
  9828 0000131C 9C                      	pushf
  9829 0000131D 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9830 00001323 740D                    	jz	short ECritDevice_2
  9831                                  	;popff  ; * (macro)
  9832                                  ;	jmp	short ECritDevice_1 ; *
  9833                                  ;
  9834                                  ;ECritDevice_iret: ; *
  9835                                  ;	iret ; *
  9836                                  
  9837                                  	; 16/12/2022	
  9838                                  	; 13/11/2022
  9839                                  	;jmp	short ECritDevice_1
  9840                                  ;ECritDevice_iret:
  9841                                  	;iret
  9842                                  
  9843                                  ECritDevice_1:
  9844 00001325 0E                      	push	cs ; *
  9845 00001326 E80800                  	call	ECritDevice_iret ; *		
  9846                                  	
  9847                                  ECritDevice_0:
  9848 00001329 50                      	PUSH	AX
  9849                                  	;MOV	AX,8000h+critDevice
  9850                                  	;INT	int_IBM
  9851 0000132A B80280                  	mov	ax,8002h
  9852 0000132D CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9853                                  			; AL = critical section number (00h-0Fh)
  9854 0000132F 58                      	POP     AX
  9855 00001330 C3                      	retn
  9856                                  
  9857                                  	; 16/12/2022
  9858                                  	; 06/12/2022
  9859                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9860                                  LCritDevice_iret: 
  9861 00001331 CF                      	iret
  9862                                  
  9863                                  ECritDevice_2:
  9864                                  	;;popff ; *
  9865                                  	;;retn
  9866                                  ;	jmp	short ECritDevice_3 ; *
  9867                                  ;ECritDevice_iret2: ; *
  9868                                  ;	iret
  9869                                  
  9870                                  	; 16/12/2022
  9871                                  	; 13/11/2022
  9872                                  	;jmp	short ECritDevice_3
  9873                                  ;ECritDevice_iret2:
  9874                                  	;iret
  9875                                  
  9876                                  ECritDevice_3:
  9877 00001332 0E                      	push    cs ; *
  9878                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9879                                  	;call	ECritDevice_iret2 ; *
  9880                                  	;retn
  9881                                  	; 16/12/2022
  9882 00001333 E8FBFF                  	call	ECritDevice_iret
  9883 00001336 C3                      	retn
  9884                                  
  9885                                  ;EndProc ECritDevice
  9886                                  
  9887                                  ; ---------------------------
  9888                                  
  9889                                  ;Procedure   LCritDevice,NEAR
  9890                                  
  9891                                  LCritDevice:
  9892                                  
  9893                                  ;SR; Check if critical section is to be entered
  9894                                  
  9895 00001337 9C                      	pushf
  9896 00001338 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9897 0000133E 740C                    	jz	short LCritDevice_2
  9898                                  	;popff  ; * (macro)
  9899                                  ;	jmp	short LCritDevice_1 ; *
  9900                                  ;
  9901                                  ;LCritDevice_iret: ; *
  9902                                  ;	iret ; *
  9903                                  
  9904                                  	; 16/12/2022
  9905                                  	; 13/11/2022
  9906                                  	;jmp	short LCritDevice_1
  9907                                  ;LCritDevice_iret:
  9908                                  	;iret
  9909                                  
  9910                                  LCritDevice_1:
  9911 00001340 0E                      	push	cs ; *
  9912 00001341 E8EDFF                  	call	LCritDevice_iret ; *		
  9913                                  	
  9914                                  LCritDevice_0:
  9915 00001344 50                      	PUSH	AX
  9916                                  	;MOV	AX,8100h+critDevice
  9917                                  	;INT	int_IBM
  9918 00001345 B80281                  	mov	ax,8102h
  9919 00001348 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9920                                  			; AL = critical section number (00h-0Fh)
  9921 0000134A 58                      	POP     AX
  9922 0000134B C3                      	retn
  9923                                  
  9924                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9925                                  ;	iret
  9926                                  
  9927                                  LCritDevice_2:
  9928                                  	;;popff ; *
  9929                                  	;;retn
  9930                                  ;	jmp	short LCritDevice_3 ; *
  9931                                  ;LCritDevice_iret2: ; *
  9932                                  ;	iret
  9933                                  
  9934                                  	; 16/12/2022
  9935                                  	; 13/11/2022
  9936                                  	;jmp	short LCritDevice_3
  9937                                  ;LCritDevice_iret2:
  9938                                  	;iret
  9939                                  
  9940                                  LCritDevice_3:
  9941 0000134C 0E                      	push    cs ; *
  9942                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9943                                  	;call	LCritDevice_iret2 ; *
  9944                                  	;retn
  9945                                  	; 16/12/2022
  9946 0000134D E8E1FF                  	call	LCritDevice_iret
  9947 00001350 C3                      	retn
  9948                                  
  9949                                  ;EndProc LCritDevice
  9950                                  
  9951                                  ;============================================================================
  9952                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9953                                  ;============================================================================
  9954                                  ; 20/07/2018 - Retro DOS v3.0
  9955                                  
  9956                                  ;============================================================================
  9957                                  ; STDIO.ASM - (MSDOS 2.0)
  9958                                  ;============================================================================
  9959                                  
  9960                                  ;
  9961                                  ; Standard device IO for MSDOS (first 12 function calls)
  9962                                  ;
  9963                                  
  9964                                  ;.xlist
  9965                                  ;.xcref
  9966                                  ;INCLUDE STDSW.ASM
  9967                                  ;INCLUDE DOSSEG.ASM
  9968                                  ;.cref
  9969                                  ;.list
  9970                                  
  9971                                  ;TITLE   STDIO - device IO for MSDOS
  9972                                  ;NAME    STDIO
  9973                                  
  9974                                  ;INCLUDE IO.ASM
  9975                                  
  9976                                  ; ---------------------------------------------------------------------------
  9977                                  ;
  9978                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9979                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9980                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9981                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9982                                  ;			    to restore MSDOS 2.0 device IO source code 
  9983                                  ;
  9984                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9985                                  	
  9986                                  ;============================================================================
  9987                                  ; STDIO.ASM - (MSDOS 2.0)
  9988                                  ;============================================================================
  9989                                  
  9990                                  ;
  9991                                  ; Standard device IO for MSDOS (first 12 function calls)
  9992                                  ;
  9993                                  
  9994                                  ;.xlist
  9995                                  ;.xcref
  9996                                  ;INCLUDE STDSW.ASM
  9997                                  ;INCLUDE DOSSEG.ASM
  9998                                  ;.cref
  9999                                  ;.list
 10000                                  
 10001                                  ;TITLE   STDIO - device IO for MSDOS
 10002                                  ;NAME    STDIO
 10003                                  
 10004                                  ;INCLUDE IO.ASM
 10005                                  
 10006                                  ; ---------------------------------------------------------------------------
 10007                                  ;
 10008                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
 10009                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
 10010                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
 10011                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
 10012                                  ;			    to restore MSDOS 2.0 device IO source code 
 10013                                  ;
 10014                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
 10015                                  ;
 10016                                  ;============================================================================
 10017                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
 10018                                  ;============================================================================
 10019                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
 10020                                  
 10021                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
 10022                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
 10023                                  
 10024                                  ;============================================================================
 10025                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
 10026                                  ;============================================================================
 10027                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
 10028                                  
 10029                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10030                                  
 10031                                  ;**	Standard device IO for MSDOS (first 12 function calls)
 10032                                  ;
 10033                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
 10034                                  ;	NAME	IBMCPMIO
 10035                                  
 10036                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
 10037                                  ;
 10038                                  ;	$Std_Con_Input_No_Echo
 10039                                  ;	$Std_Con_String_Output
 10040                                  ;	$Std_Con_String_Input
 10041                                  ;	$RawConIO
 10042                                  ;	$RawConInput
 10043                                  ;	RAWOUT
 10044                                  ;	RAWOUT2
 10045                                  ;
 10046                                  
 10047                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10048                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10049                                  ; references to be SS or CS relative which is desired.
 10050                                  
 10051                                  ; ---------------------------------------------------------------------------
 10052                                  
 10053                                  ;	TITLE	CPMIO2 - device IO for MSDOS
 10054                                  ;	NAME	CPMIO2
 10055                                  
 10056                                  ;
 10057                                  ;	Microsoft Confidential
 10058                                  ;	Copyright (C) Microsoft Corporation 1991
 10059                                  ;	All Rights Reserved.
 10060                                  ;
 10061                                  
 10062                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
 10063                                  ;
 10064                                  ;	$Std_Con_Input
 10065                                  ;	$Std_Con_Output
 10066                                  ;	OUTT
 10067                                  ;	TAB
 10068                                  ;	BUFOUT
 10069                                  ;	$Std_Aux_Input
 10070                                  ;	$Std_Aux_Output
 10071                                  ;	$Std_Printer_Output
 10072                                  ;	$Std_Con_Input_Status
 10073                                  ;	$Std_Con_Input_Flush
 10074                                  ;
 10075                                  ;	Revision History:
 10076                                  ;
 10077                                  ;	  AN000	 version 4.00 - Jan. 1988
 10078                                  
 10079                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10080                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10081                                  ; references to be SS or CS relative which is desired.
 10082                                  
 10083                                  ;DOSCODE SEGMENT
 10084                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
 10085                                  
 10086                                  
 10087                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10088                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10089                                  ;hkn;	not valid. 
 10090                                  
 10091                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
 10092                                  ; 08/11/2022
 10093                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
 10094                                  
 10095                                  ;
 10096                                  ;----------------------------------------------------------------------------
 10097                                  ;
 10098                                  ; Procedure : $Std_Con_Input_No_Echo
 10099                                  ;
 10100                                  ;----------------------------------------------------------------------------
 10101                                  ;
 10102                                  
 10103                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
 10104                                  
 10105                                  ; Inputs:
 10106                                  ;	None
 10107                                  ; Function:
 10108                                  ;	Input character from console, no echo
 10109                                  ; Returns:
 10110                                  ;	AL = character
 10111                                  
 10112 00001351 1E                      	push	ds
 10113 00001352 56                      	push	si
 10114                                  INTEST:
 10115 00001353 E8D23C                  	call	STATCHK
 10116 00001356 753A                    	jnz	short GET ; 08/09/2018
 10117                                  ;*************************************************************************
 10118                                  ;hkn; SS override
 10119 00001358 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
 10120 0000135E 7505                    	jnz	short no_sys_wait
 10121 00001360 B405                    	mov	ah,5			; get input status with system wait
 10122 00001362 E80C30                  	call	IOFUNC
 10123                                  no_sys_wait:
 10124                                  ;**************************************************************************
 10125 00001365 B484                    	MOV	AH,84h
 10126 00001367 CD2A                    	INT	int_IBM	 ; int 2Ah
 10127                                  
 10128                                  ;;; 7/15/86  update the date in the idle loop
 10129                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
 10130                                  ;;;;		 to shorten loop in consideration of the PC Convertible
 10131                                  
 10132                                  ;hkn; SS override
 10133 00001369 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
 10134 0000136F 751A                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
 10135                                  
 10136 00001371 50                      	PUSH	AX
 10137 00001372 53                      	PUSH	BX			; following is tricky,
 10138 00001373 51                      	PUSH	CX			; it may be called by critical handler
 10139 00001374 52                      	PUSH	DX			; at that time, DEVCALL is used by
 10140                                  					; other's READ or WRITE
 10141 00001375 1E                      	PUSH	DS			; save DS = SFT's segment
 10142                                  
 10143                                  ;hkn; READTIME must use ds = DOSDATA
 10144                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
 10145                                  
 10146 00001376 16                      	PUSH	SS ; 04/05/2019
 10147 00001377 1F                      	POP	DS
 10148                                  
 10149                                  	;MOV	AX,0			; therefore, we save DEVCALL
 10150                                  	; 26/06/2024
 10151 00001378 31C0                    	xor	ax,ax
 10152 0000137A E89102                  	CALL	Save_Restore_Packet	; save DEVCALL packet
 10153                                  	;invoke	READTIME		; readtime
 10154 0000137D E88FF7                  	call	READTIME
 10155 00001380 B80100                  	MOV	AX,1
 10156 00001383 E88802                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
 10157                                  
 10158                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
 10159                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
 10160                                  ;	push	bx
 10161                                  ;	mov	bx,DATE_FLAG
 10162                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
 10163                                  ;	cmp	word [cs:bx],5872h
 10164                                  ;	jz	short FETCHI_TAG_chk_ok
 10165                                  ;	call	DOSINIT
 10166                                  ;FETCHI_TAG_chk_ok:
 10167                                  ;	pop	bx
 10168                                  
 10169 00001386 1F                      	POP	DS			; restore DS
 10170 00001387 5A                      	POP	DX
 10171 00001388 59                      	POP	CX
 10172 00001389 5B                      	POP	BX
 10173 0000138A 58                      	POP	AX
 10174                                  NoUpdate:
 10175                                  
 10176                                  ;hkn; SS override
 10177 0000138B 36FF06[910D]            	INC	word [SS:DATE_FLAG]
 10178                                  
 10179                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10180 00001390 EBC1                    	JMP	short INTEST
 10181                                  GET:
 10182 00001392 30E4                    	XOR	AH,AH
 10183 00001394 E8DA2F                  	call	IOFUNC
 10184 00001397 5E                      	POP	SI
 10185 00001398 1F                      	POP	DS
 10186                                  ;;; 7/15/86
 10187                                  
 10188                                  ;hkn; SS override
 10189                                  	; MSDOS 6.0
 10190 00001399 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10191                                  	;
 10192 0000139F 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10193 000013A1 7505                    	JNZ	short noscan
 10194                                  
 10195                                  ;hkn; SS override
 10196                                  	;MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10197                                  	; 20/06/2023
 10198 000013A3 36FE06[900D]            	inc	byte [SS:SCAN_FLAG]
 10199                                  noscan:
 10200 000013A8 C3                      	retn
 10201                                  ;
 10202                                  ;----------------------------------------------------------------------------
 10203                                  ;
 10204                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10205                                  ;
 10206                                  ;
 10207                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10208                                  ;	EXIT	none
 10209                                  ;	USES	ALL
 10210                                  ;
 10211                                  ;----------------------------------------------------------------------------
 10212                                  ;
 10213                                  
 10214                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10215                                  
 10216 000013A9 89D6                    	mov	si,dx
 10217                                  STRING_OUT1:	
 10218 000013AB AC                      	lodsb
 10219 000013AC 3C24                    	cmp	al,'$'
 10220 000013AE 74F8                    	je	short noscan
 10221                                  NEXT_STR1:
 10222 000013B0 E88402                  	call	OUTT
 10223 000013B3 EBF6                    	jmp	short STRING_OUT1
 10224                                  
 10225                                  ;----------------------------------------------------------------------------
 10226                                  ;
 10227                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10228                                  ;
 10229                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10230                                  ;
 10231                                  ;	ENTRY	(ds:dx) = input buffer
 10232                                  ;	EXIT	none
 10233                                  ;	USES	ALL
 10234                                  ;
 10235                                  ;----------------------------------------------------------------------------
 10236                                  
 10237                                  	; 15/01/2024
 10238                                  
 10239                                  _$STD_CON_STRING_INPUT:		;System call 10
 10240                                  
 10241                                  	; 15/01/2024
 10242                                  	;mov	ax,ss
 10243                                  	;mov	es,ax
 10244 000013B5 16                      	push	ss
 10245 000013B6 07                      	pop	es
 10246                                  
 10247 000013B7 89D6                    	mov	si,dx
 10248 000013B9 30ED                    	xor	ch,ch
 10249 000013BB AD                      	lodsw
 10250                                  
 10251                                  ;	(AL) = the buffer length
 10252                                  ;	(AH) = the template length
 10253                                  
 10254 000013BC 08C0                            or	al,al
 10255 000013BE 74E8                            jz	short noscan	;Buffer is 0 length!!?
 10256 000013C0 88E3                    	mov	bl,ah		;Init template counter
 10257 000013C2 88EF                            mov	bh,ch		;Init template counter
 10258                                  
 10259                                  ;	(BL) = the number of bytes in the template
 10260                                  
 10261 000013C4 38D8                            cmp	al,bl
 10262 000013C6 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10263 000013C8 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10264 000013CB 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10265                                  
 10266                                  ; The number of chars in the template is >= the number of chars in buffer or
 10267                                  ; there is no CR at the end of the template. This is an inconsistant state
 10268                                  ; of affairs. Pretend that the template was empty:
 10269                                  ;
 10270                                  
 10271                                  NOEDIT:	
 10272 000013CD 88EB                    	mov	bl,ch		;Reset buffer
 10273                                  EDITON: 
 10274 000013CF 88C2                    	mov	dl,al
 10275 000013D1 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10276                                  
 10277                                  ;	Top level. We begin to read a line in.
 10278                                  
 10279                                  NEWLIN: 
 10280 000013D2 36A0[F901]              	mov	al,[SS:CARPOS]
 10281 000013D6 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10282                                  
 10283 000013DA 56                      	push	si
 10284 000013DB BF[FB01]                	mov	di,INBUF ;Build the new line here
 10285 000013DE 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10286 000013E3 88EF                    	mov	bh,ch		;No chars from template yet
 10287 000013E5 88EE                    	mov	dh,ch		;No chars to new line yet
 10288 000013E7 E867FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10289 000013EA 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10290 000013EC 7503                    	jnz	short GOTCH
 10291                                  
 10292                                  ;	This is the main loop of reading in a character and processing it.
 10293                                  ;
 10294                                  ;	(BH) = the index of the next byte in the template
 10295                                  ;	(BL) = the length of the template
 10296                                  ;	(DH) = the number of bytes in the buffer
 10297                                  ;	(DL) = the length of the buffer
 10298                                  
 10299                                  GETCH:
 10300 000013EE E860FF                  	call	_$STD_CON_INPUT_NO_ECHO
 10301                                  GOTCH:
 10302                                  ;
 10303                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10304                                  ; input queue.
 10305                                  ;
 10306 000013F1 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10307 000013F3 74F9                    	jz	short GETCH
 10308                                  
 10309                                  ;	If the leading char is the function-key lead byte
 10310                                  
 10311                                  	;cmp	al,[SS:ESCCHAR]
 10312                                  
 10313                                  	; 04/05/2019 - Retro DOS v4.0
 10314                                  
 10315                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10316                                  
 10317 000013F5 2E3A06[190A]            	CMP	AL,[cs:ESCCHAR]
 10318 000013FA 7439                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10319                                  
 10320                                  ;	Rubout and ^H are both destructive backspaces.
 10321                                  
 10322 000013FC 3C7F                            cmp	al,c_DEL ; 7FH
 10323                                          ;jz	short BACKSPJ
 10324                                          ; 15/01/2024
 10325 000013FE 7466                    	je	short BACKSP
 10326 00001400 3C08                    	cmp	al,c_BS  ; 8
 10327                                          ;jz	short BACKSPJ
 10328                                          ; 15/01/2024
 10329 00001402 7462                    	je	short BACKSP
 10330                                  
 10331                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10332                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10333                                  	;	   	after CMP and a CMP again!
 10334                                  	;		
 10335                                  	;		-It would be better if they use a 'JMP short' to 
 10336                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10337                                  	;		between them. Then, they would be able use a patch
 10338                                  	;		between 5271h and 5279h when if it will be required.
 10339                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10340                                  	;	
 10341                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10342                                  
 10343                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10344                                  	;
 10345                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10346                                  
 10347                                  ;DOSCODE:526D	cmp     al, 8
 10348                                  ;DOSCODE:526F	jz      short BACKSPJ
 10349                                  ;DOSCODE:5271	cmp     al, 17h
 10350                                  ;DOSCODE:5273	nop
 10351                                  ;DOSCODE:5274	nop
 10352                                  ;DOSCODE:5275	cmp     al, 15h
 10353                                  ;DOSCODE:5277	nop
 10354                                  ;DOSCODE:5278	nop
 10355                                  ;DOSCODE:5279	cmp     al, 0Dh
 10356                                  ;DOSCODE:527B	jz      short ENDLIN
 10357                                  ;DOSCODE:527D	cmp     al, 0Ah
 10358                                  ;DOSCODE:527F	jz      short PHYCRLF
 10359                                  	
 10360                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10361                                  	; DOSCODE:525Dh
 10362                                  
 10363                                  ; 16/12/2022
 10364                                  %if 0
 10365                                  	; MSDOS 6.0
 10366                                  ;	^W deletes backward once and then backs up until a letter is before the
 10367                                  ;	cursor
 10368                                  
 10369                                  	CMP     AL,"W"-"@" ; 17h
 10370                                  
 10371                                  ;	The removal of the comment characters before the jump statement will
 10372                                  ;	cause ^W to backup a word.
 10373                                  
 10374                                  ;***	JZ	short WordDel
 10375                                  	NOP
 10376                                  	NOP
 10377                                  
 10378                                  	CMP     AL,"U"-"@" ; 15h
 10379                                  
 10380                                  ;	The removal of the comment characters before the jump statement will
 10381                                  ;	cause ^U to clear a line.
 10382                                  
 10383                                  ;***	JZ	short LineDel
 10384                                  	NOP
 10385                                  	NOP
 10386                                  
 10387                                  %endif
 10388                                  
 10389                                  ;	CR terminates the line.
 10390                                  
 10391 00001404 3C0D                            cmp	al,c_CR ; 0Dh
 10392 00001406 7430                            jz	short ENDLIN
 10393                                  
 10394                                  ;	LF goes to a new line and keeps on reading.
 10395                                  
 10396 00001408 3C0A                            cmp	al,c_LF ; 0Ah
 10397 0000140A 7442                    	jz	short PHYCRLF
 10398                                  
 10399                                  ;	^X (or ESC) deletes the line and starts over
 10400                                  
 10401                                  	; MSDOS 3.3
 10402                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10403                                  	;jz	short KILNEW
 10404                                  
 10405                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10406                                  
 10407                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10408                                  
 10409 0000140C 2E3A06[180A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10410 00001411 7440                    	jz	short KILNEW
 10411                                  	
 10412                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10413                                  	;jz	short KILNEW
 10414                                  
 10415                                  ; Otherwise, we save the input character.
 10416                                  
 10417                                  SAVCH:	
 10418 00001413 38D6                    	cmp	dh,dl
 10419 00001415 7317                    	jnb	short BUFFUL		; buffer is full.
 10420 00001417 AA                              stosb
 10421 00001418 FEC6                    	inc	dh                      ; increment count in buffer.
 10422 0000141A E8AE02                  	call	BUFOUT			; Print control chars nicely
 10423                                  
 10424 0000141D 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10425 00001423 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10426 00001425 38DF                            cmp	bh,bl
 10427 00001427 73C5                            jnb	short GETCH		; no more characters in template
 10428 00001429 46                              inc	si                      ; Skip to next char in template
 10429 0000142A FEC7                            inc	bh                      ; remember position in template
 10430 0000142C EBC0                            jmp	short GETCH
 10431                                  
 10432                                  	; 15/01/2024
 10433                                  ;BACKSPJ: 
 10434                                  	;jmp	short BACKSP
 10435                                  
 10436                                  BUFFUL: 
 10437 0000142E B007                    	mov	al, 7			; Bell to signal full buffer
 10438 00001430 E80402                  	call	OUTT
 10439 00001433 EBB9                    	jmp	short GETCH
 10440                                  
 10441                                  ESCAPE: 
 10442                                  	;transfer OEMFunctionKey
 10443 00001435 E90CF6                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10444                                  
 10445                                  ENDLIN:
 10446 00001438 AA                              stosb				; Put the CR in the buffer
 10447 00001439 E8FB01                  	call	OUTT                    ; Echo it
 10448 0000143C 5F                              pop	di                      ; Get start of user buffer
 10449 0000143D 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10450 00001440 FEC6                            inc	dh			; DH is length including CR
 10451                                  
 10452                                  COPYNEW:
 10453                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10454                                  	;mov	bp, es
 10455                                  	;mov	bx, ds
 10456                                  	;mov	es, bx
 10457                                  	;mov	ds, bp
 10458                                  	;mov	si, INBUF
 10459                                  	;mov	cl, dh
 10460                                  	;rep	movsb
 10461                                  	;retn
 10462                                  
 10463                                  	; CPMIO.ASM (MSDOS 6.0)
 10464                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10465                                  	;SAVE	<DS,ES>
 10466 00001442 1E                      	PUSH	DS
 10467 00001443 06                      	PUSH	ES
 10468                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10469 00001444 1F                      	POP	DS
 10470 00001445 07                      	POP	ES
 10471                                  
 10472                                  ;;hkn; INBUF is in DOSDATA
 10473 00001446 BE[FB01]                        MOV     SI,INBUF
 10474 00001449 88F1                            MOV     CL,DH                   ; set up count
 10475 0000144B F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10476                                  OLDBAK_RETN:
 10477 0000144D C3                              RETN
 10478                                  
 10479                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10480                                  
 10481                                  PHYCRLF:
 10482 0000144E E81B01                  	CALL	CRLF
 10483 00001451 EB9B                            JMP	short GETCH
 10484                                  
 10485                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10486                                  
 10487                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10488                                  
 10489                                  	; Note: Following routines were not used in IBMDOS.COM
 10490                                  	;	-CRTL+W, CRTL+U is not activated-
 10491                                  	;	but they were in the kernel code!?)
 10492                                  
 10493                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10494                                  	; DOSCODE:52B6h
 10495                                  
 10496                                  ;;;;;;;;
 10497                                  
 10498                                  ; 16/12/2022
 10499                                  %if 0
 10500                                  ;
 10501                                  ; Delete the previous line
 10502                                  ;
 10503                                  LineDel:
 10504                                  	OR      DH,DH
 10505                                  	JZ	short GETCH	 ; 06/12/2022
 10506                                  	Call    BackSpace
 10507                                  	JMP	short LineDel
 10508                                  
 10509                                  %endif
 10510                                  
 10511                                  ;
 10512                                  ; delete the previous word.
 10513                                  ;
 10514                                  WordDel:
 10515                                  WordLoop:
 10516                                  ;	Call    BackSpace               ; backspace the one spot
 10517                                  ;	OR      DH,DH
 10518                                  ;	JZ	short GetChj
 10519                                  ;	MOV     AL,[ES:DI-1]
 10520                                  ;	cmp     al,'0'
 10521                                  ;	jb	short GetChj
 10522                                  ;	cmp     al,'9'
 10523                                  ;	jbe	short WordLoop
 10524                                  ;	OR      AL,20h
 10525                                  ;	CMP     AL,'a'
 10526                                  ;	JB	short GetChj
 10527                                  ;	CMP     AL,'z'
 10528                                  ;	JBE	short WordLoop
 10529                                  ;GetChj: 
 10530                                  ;	JMP	GETCH
 10531                                  
 10532                                  ; 16/12/2022
 10533                                  %if 0
 10534                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10535                                  	; (Worddel is not called or jumped from anywhere!)
 10536                                  WordDel:
 10537                                  WordLoop:
 10538                                  	Call    BackSpace               ; backspace the one spot
 10539                                  	OR      DH,DH
 10540                                  	JZ	short GetChj
 10541                                  	MOV     AL,[ES:DI-1]
 10542                                  	cmp     al,'0'
 10543                                  	jb	short GetChj
 10544                                  	cmp     al,'9'
 10545                                  	jbe	short WordLoop
 10546                                  	OR      AL,20h
 10547                                  	CMP     AL,'a'
 10548                                  	JB	short GetChj
 10549                                  	CMP     AL,'z'
 10550                                  	JBE	short WordLoop
 10551                                  GetChj: 
 10552                                  	JMP	GETCH
 10553                                  
 10554                                  %endif
 10555                                  
 10556                                  ;;;;;;;;
 10557                                  
 10558                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10559                                  
 10560                                  ; The user wants to throw away what he's typed in and wants to start over.
 10561                                  ; We print the backslash and then go to the next line and tab to the correct
 10562                                  ; spot to begin the buffered input.
 10563                                  
 10564                                  KILNEW:
 10565 00001453 B05C                            mov	al,'\'
 10566 00001455 E8DF01                          call	OUTT            ;Print the CANCEL indicator
 10567 00001458 5E                              pop	si		;Remember start of edit buffer
 10568                                  PUTNEW:
 10569 00001459 E81001                  	call	CRLF            ;Go to next line on screen
 10570 0000145C 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10571 00001460 E84802                  	call	TAB             ;Tab over
 10572 00001463 E96CFF                          JMP     NEWLIN		;Start over again
 10573                                  
 10574                                  ;	Destructively back up one character position
 10575                                  
 10576                                  BACKSP:
 10577                                  	; 09/09/2018
 10578 00001466 E80800                  	Call    BackSpace
 10579 00001469 EB83                    	JMP     short GETCH	; 15/01/2024
 10580                                  
 10581                                  	; 15/01/2024
 10582                                  ;User really wants an ESC character in his line
 10583                                  TWOESC:	
 10584 0000146B 2EA0[190A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10585 0000146F EBA2                    	jmp	short SAVCH
 10586                                  
 10587                                  BackSpace:
 10588 00001471 08F6                    	or	dh,dh
 10589 00001473 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10590 00001475 E85800                  	call	BACKUP          ;Do the backup
 10591 00001478 268A05                  	mov	al,[es:di]	;Get the deleted char
 10592 0000147B 3C20                            cmp	al,20h	; ' '
 10593 0000147D 730F                    	jnb	short OLDBAK	;Was a normal char
 10594 0000147F 3C09                            cmp	al,c_HT ; 9
 10595 00001481 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10596                                  ;; 9/27/86 fix for ctrl-U backspace
 10597 00001483 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10598 00001485 7407                    	JZ	short OLDBAK
 10599 00001487 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10600 00001489 7403                    	JZ	short OLDBAK
 10601                                  ;; 9/27/86 fix for ctrl-U backspace
 10602 0000148B E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10603                                  OLDBAK:
 10604 0000148E 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10605 00001494 75B7                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10606 00001496 08FF                    	or	bh,bh
 10607 00001498 74B3                            jz	short OLDBAK_RETN 
 10608                                  				;Not advanced in template, stay where we are
 10609 0000149A FECF                    	dec	bh		;Go back in template
 10610 0000149C 4E                              dec	si
 10611 0000149D C3                      	retn
 10612                                  BAKTAB:
 10613 0000149E 57                              push	di
 10614 0000149F 4F                              dec	di		;Back up one char
 10615 000014A0 FD                              std			;Go backward
 10616 000014A1 88F1                            mov	cl,dh		;Number of chars currently in line
 10617 000014A3 B020                            mov	al,20h	; ' '
 10618 000014A5 53                              push	bx
 10619 000014A6 B307                            mov	bl,7		;Max
 10620 000014A8 E30E                            jcxz	FIGTAB		;At start, do nothing
 10621                                  FNDPOS:
 10622 000014AA AE                              scasb			;Look back
 10623 000014AB 7609                    	jbe	short CHKCNT
 10624 000014AD 26807D0109              	cmp	byte [es:di+1],9
 10625 000014B2 7409                    	jz	short HAVTAB	;Found a tab
 10626 000014B4 FECB                    	dec	bl		;Back one char if non tab control char
 10627                                  CHKCNT:
 10628 000014B6 E2F2                            loop	FNDPOS
 10629                                  FIGTAB:		
 10630 000014B8 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10631                                  HAVTAB:
 10632 000014BD 28F3                    	sub	bl,dh
 10633 000014BF 00D9                    	add	cl,bl
 10634 000014C1 80E107                  	and	cl,7		;CX has correct number to erase
 10635 000014C4 FC                      	cld			;Back to normal
 10636 000014C5 5B                      	pop	bx
 10637 000014C6 5F                      	pop	di
 10638 000014C7 74C5                    	jz	short OLDBAK	;Nothing to erase
 10639                                  TABBAK:
 10640 000014C9 E80700                  	call	BACKMES
 10641 000014CC E2FB                    	loop	TABBAK		;Erase correct number of chars
 10642 000014CE EBBE                    	jmp	short OLDBAK
 10643                                  
 10644                                  BACKUP:
 10645 000014D0 FECE                            dec	dh		;Back up in line
 10646 000014D2 4F                              dec	di
 10647                                  BACKMES:
 10648 000014D3 B008                            mov	al,c_BS ; 8	;Backspace
 10649 000014D5 E85F01                          call	OUTT
 10650 000014D8 B020                            mov	al,20h ; ' '	;Erase
 10651 000014DA E85A01                          call	OUTT
 10652 000014DD B008                            mov	al,c_BS ; 8	;Backspace
 10653 000014DF E95501                  	jmp	OUTT		;Done
 10654                                  
 10655                                  	; 15/01/2024
 10656                                  ;User really wants an ESC character in his line
 10657                                  ;TWOESC:	
 10658                                  ;	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10659                                  ;	jmp	SAVCH
 10660                                  
 10661                                  ;Copy the rest of the template
 10662                                  COPYLIN:
 10663 000014E2 88D9                            mov	cl,bl		;Total size of template
 10664 000014E4 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10665 000014E6 EB07                            jmp	short COPYEACH
 10666                                  
 10667                                  COPYSTR:
 10668 000014E8 E83200                  	call	FINDOLD         ;Find the char
 10669 000014EB EB02                    	jmp	short COPYEACH  ;Copy up to it
 10670                                  
 10671                                  ;Copy one char from template to line
 10672                                  COPYONE:
 10673 000014ED B101                            mov	cl,1
 10674                                  ;Copy CX chars from template to line
 10675                                  COPYEACH:
 10676 000014EF 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10677 000014F5 38D6                    	cmp	dh,dl
 10678 000014F7 740F                            jz	short GETCH2		;At end of line, can't do anything
 10679 000014F9 38DF                            cmp	bh,bl
 10680 000014FB 740B                            jz	short GETCH2		;At end of template, can't do anything
 10681 000014FD AC                              lodsb
 10682 000014FE AA                              stosb
 10683 000014FF E8C901                  	call	BUFOUT
 10684 00001502 FEC7                            inc	bh			;Ahead in template
 10685 00001504 FEC6                            inc	dh			;Ahead in line
 10686 00001506 E2E7                            loop	COPYEACH
 10687                                  GETCH2:
 10688 00001508 E9E3FE                          jmp	GETCH
 10689                                  
 10690                                  ;Skip one char in template
 10691                                  SKIPONE:
 10692 0000150B 38DF                    	cmp	bh,bl
 10693 0000150D 74F9                    	jz	short GETCH2		;At end of template
 10694 0000150F FEC7                    	inc	bh			;Ahead in template
 10695 00001511 46                      	inc	si
 10696                                          ;jmp	GETCH
 10697                                  	; 15/01/2024
 10698 00001512 EBF4                    	jmp	short GETCH2
 10699                                  
 10700                                  SKIPSTR:
 10701 00001514 E80600                  	call	FINDOLD                 ;Find out how far to go
 10702 00001517 01CE                            add	si,cx			;Go there
 10703 00001519 00CF                            add	bh,cl
 10704                                          ;jmp	GETCH
 10705                                  	; 15/01/2024
 10706 0000151B EBEB                    	jmp	short GETCH2
 10707                                  
 10708                                  ;Get the next user char, and look ahead in template for a match
 10709                                  ;CX indicates how many chars to skip to get there on output
 10710                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10711                                  ;       address is popped off and a jump to GETCH is taken.
 10712                                  ;       Make sure nothing extra on stack when this routine
 10713                                  ;       is called!!! (no PUSHes before calling it).
 10714                                  
 10715                                  FINDOLD:
 10716 0000151D E831FE                          call	_$STD_CON_INPUT_NO_ECHO
 10717                                  
 10718                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10719                                  
 10720                                  	;CMP	AL,[SS:ESCCHAR]	
 10721                                  	;JNZ	SHORT FINDSETUP
 10722                                  
 10723                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10724                                  
 10725                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10726                                  
 10727 00001520 2E3A06[190A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10728 00001525 7505                    	JNZ	SHORT FINDSETUP		; no, set up for scan
 10729                                  
 10730 00001527 E827FE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10731 0000152A EB1D                            JMP	SHORT NOTFND		; go try again
 10732                                  FINDSETUP:
 10733 0000152C 88D9                    	mov	cl,bl
 10734 0000152E 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10735 00001530 7417                    	jz	short NOTFND	;At end of template
 10736 00001532 49                              dec	cx		;Cannot point past end, limit search
 10737 00001533 7414                            jz	short NOTFND	;If only one char in template, forget it
 10738 00001535 06                      	push	es
 10739 00001536 1E                      	push	ds
 10740 00001537 07                      	pop	es
 10741 00001538 57                      	push	di
 10742 00001539 89F7                    	mov	di,si		;Template to ES:DI
 10743 0000153B 47                      	inc	di
 10744 0000153C F2AE                    	repne	scasb		;Look
 10745 0000153E 5F                      	pop	di
 10746 0000153F 07                      	pop	es
 10747 00001540 7507                    	jnz	short NOTFND	;Didn't find the char
 10748 00001542 F6D1                            not	cl		;Turn how far to go into how far we went
 10749 00001544 00D9                            add	cl,bl		;Add size of template
 10750 00001546 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10751                                  FINDOLD_RETN:
 10752 00001548 C3                      	retn
 10753                                  
 10754                                  NOTFND:
 10755 00001549 5D                      	pop	bp              ;Chuck return address
 10756                                  	;jmp	GETCH
 10757                                  	; 15/01/2024
 10758                                  GETCH2_j:
 10759 0000154A EBBC                    	jmp	short GETCH2
 10760                                  
 10761                                  REEDIT:
 10762 0000154C B040                    	mov	al,'@'		;Output re-edit character
 10763 0000154E E8E600                  	call	OUTT
 10764 00001551 5F                      	pop	di
 10765 00001552 57                      	push	di
 10766 00001553 06                      	push	es
 10767 00001554 1E                      	push	ds
 10768 00001555 E8EAFE                  	call	COPYNEW		;Copy current line into template
 10769 00001558 1F                      	pop	ds
 10770 00001559 07                      	pop	es
 10771 0000155A 5E                      	pop	si
 10772 0000155B 88F3                    	mov	bl,dh		;Size of line is new size template
 10773 0000155D E9F9FE                  	jmp	PUTNEW		;Start over again
 10774                                  
 10775                                  EXITINS:
 10776                                  ENTERINS:
 10777 00001560 36F616[7905]            	not	byte [SS:INSMODE]
 10778                                  	;jmp	GETCH
 10779                                  	; 15/01/2024
 10780 00001565 EBE3                    	jmp	short GETCH2_j
 10781                                  
 10782                                  ;Put a real live ^Z in the buffer (embedded)
 10783                                  CTRLZ:
 10784 00001567 B01A                    	mov	al,"Z"-"@" ; 1Ah
 10785 00001569 E9A7FE                          jmp	SAVCH
 10786                                  
 10787                                  ;Output a CRLF
 10788                                  CRLF:
 10789 0000156C B00D                    	mov	al,c_CR ; 0Dh 
 10790 0000156E E8C600                  	call	OUTT
 10791 00001571 B00A                    	mov	al,c_LF ; 0Ah
 10792 00001573 E9C100                  	jmp	OUTT
 10793                                  
 10794                                  ;
 10795                                  ;----------------------------------------------------------------------------
 10796                                  ;
 10797                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10798                                  ;
 10799                                  ;	Input or output raw character from console, no echo
 10800                                  ;
 10801                                  ;	ENTRY	DL = -1 if input
 10802                                  ;		   =  output character if output
 10803                                  ;	EXIT	(AL) = input character if input
 10804                                  ;	USES	all
 10805                                  ;
 10806                                  ;----------------------------------------------------------------------------
 10807                                  ; 20/07/2018 - Retro DOS v3.0
 10808                                  
 10809                                  ; 04/05/2019 - Retro DOS v4.0
 10810                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10811                                  
 10812                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10813                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10814                                  
 10815                                  _$RAW_CON_IO:			; System call 6
 10816 00001576 88D0                    	MOV	AL,DL
 10817 00001578 3CFF                    	CMP	AL,-1
 10818 0000157A 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10819                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10820                                  	;jz	short rci1
 10821                                  	;jmp	short RAWOUT
 10822                                  	; 16/12/202
 10823                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10824                                  	;nop
 10825                                  rci1:
 10826                                  			; Get pointer to register save area
 10827 0000157C 36C43E[8405]            	LES	DI,[SS:USER_SP] ; 12/03/2018
 10828 00001581 31DB                    	XOR	BX,BX
 10829                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10830 00001583 E8F01F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10831                                          ;JC	SHORT RET17
 10832 00001586 72C0                            jc	short FINDOLD_RETN
 10833 00001588 B401                    	MOV	AH,1
 10834 0000158A E8E42D                  	CALL	IOFUNC
 10835 0000158D 750B                    	JNZ	SHORT RESFLG
 10836 0000158F E8683A                  	CALL	SPOOLINT
 10837                                  	;OR	BYTE [ES:DI+16H],40H
 10838 00001592 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10839 00001597 30C0                    	XOR	AL,AL
 10840                                  RET17:
 10841 00001599 C3                      	RETN
 10842                                  
 10843                                  RESFLG:
 10844                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10845 0000159A 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10846                                  				; Reset user's zero flag
 10847                                  ;RILP:
 10848                                  rci0:
 10849 0000159F E8583A                  	CALL	SPOOLINT
 10850                                  ;
 10851                                  ;----------------------------------------------------------------------------
 10852                                  ;
 10853                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10854                                  ;
 10855                                  ;	Input raw character from console, no echo
 10856                                  ;
 10857                                  ;	ENTRY	none
 10858                                  ;	EXIT	(al) = character
 10859                                  ;	USES	all
 10860                                  ;
 10861                                  ;----------------------------------------------------------------------------
 10862                                  ;
 10863                                  
 10864                                  ;rci0:	invoke	SPOOLINT
 10865                                  
 10866                                  	;entry	$RAW_CON_INPUT
 10867                                  
 10868                                  	; 04/05/2019 - Retro DOS v4.0
 10869                                  
 10870                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10871                                  
 10872                                  _$RAW_CON_INPUT:		; System call 7
 10873 000015A2 53                      	push	bx
 10874 000015A3 31DB                    	XOR	BX,BX
 10875                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10876 000015A5 E8CE1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10877 000015A8 5B                      	pop	bx
 10878 000015A9 72EE                    	JC	SHORT RET17
 10879 000015AB B401                    	MOV	AH,1
 10880 000015AD E8C12D                  	CALL	IOFUNC
 10881                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10882                                  	;XOR	AH,AH
 10883                                          ;CALL	IOFUNC
 10884                                          ;RETN
 10885 000015B0 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10886 000015B2 B484                    	MOV	AH,84h
 10887 000015B4 CD2A                    	INT	int_IBM  ; int 2Ah
 10888 000015B6 EBE7                    	JMP	short rci0
 10889                                  rci5:	
 10890 000015B8 30E4                    	XOR	AH,AH
 10891                                  	;CALL	IOFUNC
 10892                                  	;RETN
 10893                                  	; 18/12/2022
 10894 000015BA E9B42D                  	jmp	IOFUNC
 10895                                  
 10896                                  ;       Output the character in AL to stdout
 10897                                  ;
 10898                                  	;entry	RAWOUT
 10899                                  RAWOUT:
 10900 000015BD 53                      	PUSH    BX
 10901 000015BE BB0100                  	MOV     BX,1
 10902                                  
 10903                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10904 000015C1 E8B21F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10905 000015C4 721B                    	JC	SHORT RAWRET1
 10906                                  
 10907                                  	;
 10908                                  	; MSDOS 2.11
 10909                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10910                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10911                                          ;PUSH	DS
 10912                                          ;PUSH	SI
 10913                                          ;LDS	SI,[SI+19H]		; output to special?
 10914                                  	;TEST	BYTE [SI+4],ISSPEC
 10915                                  	;POP	SI
 10916                                  	;
 10917                                          
 10918                                  	; MSDOS 3.3 & MSDOS 6.0
 10919                                  	;mov	bx,[si+5]
 10920 000015C6 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10921                                   ;
 10922                                   ; If we are a network handle OR if we are not a local device then go do the
 10923                                   ; output the hard way.
 10924                                   ;	
 10925                                  	;and	bx,8080h
 10926 000015C9 81E38080                	AND	BX,sf_isnet+devid_device
 10927                                  	;cmp	bx,80h
 10928 000015CD 81FB8000                	CMP	BX,devid_device
 10929 000015D1 7510                    	jnz     short RAWNORM
 10930 000015D3 1E                      	push    ds
 10931                                  	;lds	bx,[si+7]
 10932 000015D4 C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10933                                  	;test	byte [bx+4],10h
 10934 000015D7 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10935                                  	;
 10936                                  
 10937 000015DB 1F                      	POP	DS
 10938 000015DC 7405                    	JZ	SHORT RAWNORM		; if not, do normally
 10939                                  
 10940 000015DE CD29                    	INT	int_fastcon  ; int 29h	; quickly output the char
 10941                                  
 10942                                  	;JMP	SHORT RAWRET
 10943                                  ;RAWNORM:
 10944                                  ;	CALL    RAWOUT3
 10945                                  RAWRET: 
 10946 000015E0 F8                      	CLC
 10947                                  RAWRET1:
 10948 000015E1 5B                      	POP     BX
 10949                                  RAWRET2:
 10950 000015E2 C3                      	RETN
 10951                                  RAWNORM:
 10952 000015E3 E80700                  	CALL    RAWOUT3
 10953 000015E6 EBF8                    	jmp	short RAWRET
 10954                                  
 10955                                  ;	Output the character in AL to handle in BX
 10956                                  ;
 10957                                  ;	entry	RAWOUT2
 10958                                  
 10959                                  RAWOUT2:
 10960                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10961                                  	;JC	SHORT RET18
 10962 000015E8 E88B1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10963 000015EB 72F5                    	JC	SHORT RAWRET2
 10964                                  RAWOUT3:
 10965 000015ED 50                      	PUSH	AX
 10966 000015EE EB0C                    	JMP	SHORT RAWOSTRT
 10967                                  ROLP:
 10968 000015F0 E8073A                  	CALL	SPOOLINT
 10969                                  
 10970                                  	; 01/05/2019 - Retro DOS v4.0
 10971                                  
 10972                                  	; MSDOS 6.0
 10973                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10974                                  	; 17/12/2022
 10975 000015F3 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h
 10976                                  	;or	word [ss:DOS34_FLAG],200h
 10977                                  				;AN002; set control break
 10978                                  	;invoke DSKSTATCHK
 10979 000015F9 E87D39                  	call	DSKSTATCHK	;AN002; check control break
 10980                                  RAWOSTRT:
 10981 000015FC B403                    	MOV	AH,3
 10982 000015FE E8702D                  	CALL	IOFUNC
 10983 00001601 74ED                    	JZ	SHORT ROLP
 10984                                  
 10985                                  	; MSDOS 6.0
 10986                                  ;SR;
 10987                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10988                                  ;the user failed. We do not send a char if this happens. We however return
 10989                                  ;to the caller with carry clear because this DOS call does not return any
 10990                                  ;status. 
 10991                                  ;
 10992 00001603 40                      	inc	ax		;fail on I24 if ax = -1
 10993 00001604 58                      	POP	AX
 10994 00001605 7405                    	jz	short nosend	;yes, do not send char
 10995 00001607 B402                    	MOV	AH,2
 10996 00001609 E8652D                  	call	IOFUNC
 10997                                  nosend:
 10998 0000160C F8                      	CLC			; Clear carry indicating successful
 10999 0000160D C3                      	retn
 11000                                  
 11001                                  	; MSDOS 3.3 & MSDOS 2.11
 11002                                  	;POP	AX
 11003                                  	;MOV	AH,2
 11004                                          ;CALL	IOFUNC
 11005                                  	;CLC			; Clear carry indicating successful
 11006                                  ;RET18:    
 11007                                  	;RETN
 11008                                  
 11009                                  ;;10/08/2018
 11010                                  ; 20/07/2018 - Retro DOS v3.0
 11011                                  ; ---------------------------------------------------------------------------
 11012                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 11013                                  ; ---------------------------------------------------------------------------
 11014                                  
 11015                                  ; This routine is called at DOS init
 11016                                  
 11017                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 11018                                  ;;OUTMES:
 11019                                  ;;	;LODS	CS:BYTE PTR [SI]
 11020                                  ;;	CS	LODSB
 11021                                  ;;	CMP     AL,"$" ; 24h
 11022                                  ;;	JZ	SHORT RET18
 11023                                  ;;	CALL	OUTT
 11024                                  ;;	JMP     SHORT OUTMES
 11025                                  
 11026                                  ; ---------------------------------------------------------------------------
 11027                                  
 11028                                  ; 20/07/2018 - Retro DOS v3.0
 11029                                  
 11030                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 11031                                  
 11032                                  ;
 11033                                  ;----------------------------------------------------------------------------
 11034                                  ;
 11035                                  ; Inputs:
 11036                                  ;	AX=0 save the DEVCALL request packet
 11037                                  ;	  =1 restore the DEVCALL request packet
 11038                                  ; Function:
 11039                                  ;	save or restore the DEVCALL packet
 11040                                  ; Returns:
 11041                                  ;	none
 11042                                  ;
 11043                                  ;----------------------------------------------------------------------------
 11044                                  ;
 11045                                  
 11046                                  ; 04/05/2019 - Retro DOS v4.0
 11047                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 11048                                  
 11049                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11050                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 11051                                  
 11052                                  ; 12/05/2019
 11053                                  
 11054                                  	; 15/01/2024
 11055                                  
 11056                                  Save_Restore_Packet:
 11057 0000160E 1E                      	PUSH	DS
 11058 0000160F 06                      	PUSH	ES
 11059 00001610 56                      	PUSH	SI
 11060 00001611 57                      	PUSH	DI
 11061                                  
 11062                                  	; 16/12/2022
 11063                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11064                                  	; 09/09/2018
 11065 00001612 BF[6C0D]                	mov	di,FAKE_STACK_2F
 11066 00001615 BE[5A03]                	mov	si,DEVCALL
 11067                                  	;
 11068                                  	; 21/09/2023
 11069 00001618 09C0                    	or	ax,ax
 11070                                  	;CMP	AX,0		; save packet
 11071 0000161A 7402                    	JZ	short save_packet ; 16/12/2022
 11072                                  	;je	short set_seg
 11073                                  
 11074                                  	; MSDOS 6.0
 11075                                  restore_packet:
 11076                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 11077                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 11078                                  	; MSDOS 3.3
 11079                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11080                                  	;mov	di,DEVCALL  ; 09/09/2018
 11081                                  	;
 11082                                  	;JMP	short set_seg
 11083                                  
 11084                                  	; 16/12/2022	
 11085                                  	; 09/09/2018
 11086 0000161C 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 11087                                  
 11088                                  ; 16/12/2022
 11089                                  %if 0
 11090                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11091                                  	cmp	ax,0		; save packet
 11092                                  	jz	short save_packet
 11093                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 11094                                  	mov	di,DEVCALL 
 11095                                  	jmp	short set_seg
 11096                                  
 11097                                  	; MSDOS 6.0
 11098                                  save_packet:
 11099                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 11100                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 11101                                  	; 09/09/2018
 11102                                  	; MSDOS 3.3
 11103                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11104                                  	;mov	si,DEVCALL ; 09/09/2018
 11105                                  
 11106                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11107                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11108                                  	mov	si,DEVCALL
 11109                                  %endif
 11110                                  
 11111                                  ; 15/01/2024
 11112                                  ; 16/12/2022
 11113                                  save_packet:
 11114                                  ;set_seg:
 11115                                  	; MSDOS 3.3
 11116                                  	;mov	ax,cs
 11117                                  
 11118                                  	; MSDOS 6.0
 11119                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 11120                                  	;MOV	DS,AX
 11121                                  	;MOV	ES,AX
 11122                                  	; 15/01/2024
 11123 0000161E 16                      	push	ss
 11124 0000161F 1F                      	pop	ds
 11125 00001620 1E                      	push	ds
 11126 00001621 07                      	pop	es
 11127                                  
 11128 00001622 B90B00                  	MOV	CX,11		; 11 words to move
 11129 00001625 F3A5                    	REP	MOVSW
 11130                                  
 11131 00001627 5F                      	POP	DI
 11132 00001628 5E                      	POP	SI
 11133 00001629 07                      	POP	ES
 11134 0000162A 1F                      	POP	DS
 11135 0000162B C3                      	retn
 11136                                  
 11137                                  ;============================================================================
 11138                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 11139                                  ;============================================================================
 11140                                  ; 20/07/2018 - Retro DOS v3.0
 11141                                  ; 01/05/2019 - Retro DOS v4.0
 11142                                  
 11143                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 11144                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 11145                                  ;hkn;	not valid. 
 11146                                  
 11147                                  ;
 11148                                  ;----------------------------------------------------------------------------
 11149                                  ;
 11150                                  ;**	$STD_CON_INPUT - System Call 1
 11151                                  ;
 11152                                  ;	Input character from console, echo
 11153                                  ;
 11154                                  ;	ENTRY	none
 11155                                  ;	EXIT	(al) = character
 11156                                  ;	USES	ALL
 11157                                  ;
 11158                                  ;----------------------------------------------------------------------------
 11159                                  ;
 11160                                  
 11161                                  _$STD_CON_INPUT:	;System call 1
 11162                                  	
 11163 0000162C E822FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 11164 0000162F 50                      	PUSH	AX
 11165 00001630 E80400                  	CALL	OUTT
 11166 00001633 58                      	POP	AX
 11167                                  CON_INPUT_RETN:	
 11168 00001634 C3                      	RETN
 11169                                  
 11170                                  ;
 11171                                  ;----------------------------------------------------------------------------
 11172                                  ;
 11173                                  ;**	$STD_CON_OUTPUT - System Call 2
 11174                                  ;
 11175                                  ;	Output character to console
 11176                                  ;
 11177                                  ;	ENTRY	(dl) = character
 11178                                  ;	EXIT	none
 11179                                  ;	USES	all
 11180                                  ;
 11181                                  ;----------------------------------------------------------------------------
 11182                                  ;
 11183                                  
 11184                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 11185                                  
 11186                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11187                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 11188                                  
 11189                                  _$STD_CON_OUTPUT:	;System call 2
 11190                                  
 11191 00001635 88D0                    	MOV	AL,DL
 11192                                  OUTT:
 11193 00001637 3C20                    	CMP	AL,20H ; " "
 11194 00001639 725C                    	JB	SHORT CTRLOUT
 11195 0000163B 3C7F                    	CMP	AL,c_DEL ; 7Fh
 11196 0000163D 7405                    	JZ	SHORT OUTCH
 11197                                  OUTCHA:	
 11198                                  	;INC	BYTE PTR [CARPOS]
 11199 0000163F 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 11200                                  OUTCH:
 11201 00001644 1E                      	PUSH	DS
 11202 00001645 56                      	PUSH	SI
 11203                                  	;INC	BYTE PTR [CHARCO]		;invoke statchk...
 11204                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 11205 00001646 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 11206                                  	;AND	BYTE [SS:CHARCO],00111111B
 11207                                  	; 01/05/2019 - Retro DOS v4.0
 11208 0000164B 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 11209 00001651 7505                    	JNZ	SHORT OUTSKIP
 11210                                  
 11211 00001653 50                      	PUSH	AX
 11212 00001654 E8D139                  	CALL	STATCHK
 11213 00001657 58                      	POP	AX
 11214                                  OUTSKIP:
 11215 00001658 E862FF                  	CALL	RAWOUT				;output the character
 11216                                  
 11217 0000165B 5E                      	POP	SI
 11218 0000165C 1F                      	POP	DS
 11219                                  
 11220                                  	;TEST	BYTE PTR [PFLAG],-1
 11221                                  	;retz
 11222 0000165D 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11223 00001663 74CF                    	JZ	SHORT CON_INPUT_RETN
 11224                                  
 11225 00001665 53                      	PUSH	BX
 11226 00001666 1E                      	PUSH	DS
 11227 00001667 56                      	PUSH	SI
 11228 00001668 BB0100                  	MOV	BX,1
 11229                                  	; 20/07/2018 - Retro DOS v3.0
 11230                                  	; MSDOS 3.3
 11231                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11232 0000166B E8081F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI
 11233                                  					;hkn; to sft entry
 11234 0000166E 7224                    	JC	SHORT TRIPOPJ
 11235                                  
 11236                                  	; 01/05/2019 - Retro DOS v4.0
 11237                                  
 11238                                  	;mov	bx,[si+5]
 11239 00001670 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11240                                  	;test	bx,8000h
 11241                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11242 00001673 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11243 00001676 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11244                                  	;;test	bx,80h
 11245                                  	;TEST	BX,devid_device 		; output to file?
 11246 00001678 F6C380                  	test	bl,devid_device ; 80h
 11247 0000167B 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11248                                  	; 14/03/2018
 11249                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11250                                  	;jc	short TRIPOPJ
 11251                                  	; MSDOS 2.11
 11252                                  	;test	byte [SI+18H], 80h
 11253                                  	;jz	short TRIPOPJ
 11254 0000167D BB0400                  	MOV	BX,4
 11255 00001680 E8F31E                  	CALL	GET_IO_SFT
 11256 00001683 720F                    	JC	SHORT TRIPOPJ
 11257                                  	;;test	word [si+5], 800h
 11258                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11259                                  	;test	byte [si+6],8 ; 08/11/2022
 11260 00001685 F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11261                                  						; StdPrn redirected?
 11262                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11263                                  	;jz	LISSTRT2 ; 10/08/2018 
 11264                                  	; 16/12/2022
 11265 00001689 7503                    	jnz	short outch1
 11266 0000168B E98700                  	jmp	LISSTRT2
 11267                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11268                                  	;jz	short LISSTRT2J
 11269                                  outch1:
 11270                                  	;MOV	BYTE [PFLAG],0
 11271 0000168E 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11272                                  	; MSDOS 2.11
 11273                                  	;mov	bx,4
 11274                                  	;jmp	short LISSTRT2
 11275                                  	
 11276                                  TRIPOPJ:
 11277                                  	; 20/07/2018
 11278 00001694 E98100                  	JMP	TRIPOP
 11279                                  
 11280                                  	; 16/12/2022
 11281                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11282                                  ;LISSTRT2J:
 11283                                  ;	JMP	LISSTRT2
 11284                                  
 11285                                  CTRLOUT:
 11286 00001697 3C0D                    	CMP	AL,c_CR ; 0Dh
 11287 00001699 7420                    	JZ	SHORT ZERPOS
 11288 0000169B 3C08                    	CMP	AL,c_BS ; 8
 11289 0000169D 7424                    	JZ	SHORT BACKPOS
 11290 0000169F 3C09                    	CMP	AL,c_HT ; 9
 11291 000016A1 75A1                    	JNZ	SHORT OUTCH
 11292                                  	;MOV	AL,[CARPOS]
 11293 000016A3 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11294 000016A7 0CF8                    	OR	AL,0F8H
 11295 000016A9 F6D8                    	NEG	AL
 11296                                  TAB:
 11297 000016AB 51                      	PUSH	CX
 11298 000016AC 88C1                    	MOV	CL,AL
 11299 000016AE B500                    	MOV	CH,0
 11300 000016B0 E307                    	JCXZ	POPTAB
 11301                                  TABLP:
 11302 000016B2 B020                    	MOV	AL," "
 11303 000016B4 E880FF                  	CALL	OUTT
 11304 000016B7 E2F9                    	LOOP	TABLP
 11305                                  POPTAB:
 11306 000016B9 59                      	POP	CX
 11307                                  
 11308 000016BA C3                      	RETN
 11309                                  
 11310                                  ZERPOS:
 11311                                  	;MOV	BYTE PTR [CARPOS],0
 11312 000016BB 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11313                                  	; 10/08/2018
 11314 000016C1 EB81                    	JMP	short OUTCH ; 04/05/2019
 11315                                  	
 11316                                  	; 18/12/2022
 11317                                  ;OUTJ:	
 11318                                  	;JMP	OUTT
 11319                                  
 11320                                  BACKPOS:
 11321                                  	;DEC	BYTE PTR [CARPOS]
 11322 000016C3 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11323 000016C8 E979FF                  	JMP	OUTCH
 11324                                  
 11325                                  BUFOUT:
 11326 000016CB 3C20                    	CMP	AL," "
 11327 000016CD 7315                    	JAE	SHORT OUTJ		;Normal char
 11328 000016CF 3C09                    	CMP	AL,9
 11329 000016D1 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11330                                  	;DOS 3.3  7/14/86
 11331 000016D3 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11332 000016D5 740D                    	JZ	short CTRLU
 11333 000016D7 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11334 000016D9 7409                    	JZ	short CTRLU
 11335                                  NOT_CTRLU:
 11336                                  	;DOS 3.3  7/14/86
 11337 000016DB 50                      	PUSH	AX
 11338 000016DC B05E                    	MOV	AL,"^"
 11339 000016DE E856FF                  	CALL	OUTT		;Print '^' before control chars
 11340 000016E1 58                      	POP	AX
 11341 000016E2 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11342                                  CTRLU:
 11343                                  	;CALL	OUTT
 11344                                  	; 18/12/2022
 11345                                  OUTJ:
 11346 000016E4 E950FF                  	jmp	OUTT
 11347                                  ;BUFOUT_RETN:
 11348                                  	;RETN
 11349                                  
 11350                                  ;
 11351                                  ;----------------------------------------------------------------------------
 11352                                  ;
 11353                                  ;**	$STD_AUX_INPUT - System Call 3
 11354                                  ;
 11355                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11356                                  ;
 11357                                  ;	ENTRY	none
 11358                                  ;	EXIT	(al) = character
 11359                                  ;	USES	all
 11360                                  ;
 11361                                  ;----------------------------------------------------------------------------
 11362                                  ;
 11363                                  
 11364                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11365                                  
 11366                                  _$STD_AUX_INPUT:	;System call 3
 11367                                  
 11368 000016E7 E83E39                  	CALL	STATCHK
 11369 000016EA BB0300                  	MOV	BX,3
 11370 000016ED E8861E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11371                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11372                                  	;retc
 11373                                  	; 16/12/2022
 11374                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11375                                  	;JC	SHORT BUFOUT_RETN
 11376                                  	;JMP	SHORT TAISTRT
 11377                                  	; 07/12/2022
 11378 000016F0 7304                    	jnc	SHORT TAISTRT
 11379 000016F2 C3                      	retn	
 11380                                  
 11381                                  AUXILP:
 11382 000016F3 E80439                  	CALL	SPOOLINT
 11383                                  TAISTRT:
 11384 000016F6 B401                    	MOV	AH,1
 11385 000016F8 E8762C                  	CALL	IOFUNC
 11386 000016FB 74F6                    	JZ	SHORT AUXILP
 11387 000016FD 30E4                    	XOR	AH,AH
 11388                                  	; 16/12/2022
 11389                                  	;CALL	IOFUNC
 11390                                  	;RETN
 11391                                  	; 07/12/2022
 11392 000016FF E96F2C                  	jmp	IOFUNC
 11393                                  
 11394                                  ;
 11395                                  ;----------------------------------------------------------------------------
 11396                                  ;
 11397                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11398                                  ;
 11399                                  ;	ENTRY	(dl) = character
 11400                                  ;	EXIT	none
 11401                                  ;	USES	all
 11402                                  ;
 11403                                  ;----------------------------------------------------------------------------
 11404                                  ;
 11405                                  
 11406                                  _$STD_AUX_OUTPUT:	;System call 4
 11407                                  
 11408 00001702 53                      	PUSH	BX
 11409 00001703 BB0300                  	MOV	BX,3
 11410 00001706 EB04                    	JMP	SHORT SENDOUT
 11411                                  
 11412                                  ;
 11413                                  ;----------------------------------------------------------------------------
 11414                                  ;
 11415                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11416                                  ;
 11417                                  ;	ENTRY	(dl) = character
 11418                                  ;	EXIT	none
 11419                                  ;	USES	all
 11420                                  ;
 11421                                  ;----------------------------------------------------------------------------
 11422                                  ;
 11423                                  
 11424                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11425                                  
 11426 00001708 53                      	PUSH	BX
 11427 00001709 BB0400                  	MOV	BX,4
 11428                                  
 11429                                  SENDOUT:
 11430 0000170C 88D0                    	MOV	AL,DL
 11431 0000170E 50                      	PUSH	AX
 11432 0000170F E81639                  	CALL	STATCHK
 11433 00001712 58                      	POP	AX
 11434 00001713 1E                      	PUSH	DS
 11435 00001714 56                      	PUSH	SI
 11436                                  LISSTRT2:
 11437 00001715 E8D0FE                  	CALL	RAWOUT2
 11438                                  TRIPOP:
 11439 00001718 5E                      	POP	SI
 11440 00001719 1F                      	POP	DS
 11441 0000171A 5B                      	POP	BX
 11442                                  SCIS_RETN:	; 20/07/2018
 11443 0000171B C3                      	RETN
 11444                                  ;
 11445                                  ;----------------------------------------------------------------------------
 11446                                  ;
 11447                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11448                                  ;
 11449                                  ;	Check console input status
 11450                                  ;
 11451                                  ;	ENTRY	none
 11452                                  ;	EXIT	AL = -1 character available, = 0 no character
 11453                                  ;	USES	all
 11454                                  ;
 11455                                  ;----------------------------------------------------------------------------
 11456                                  ;
 11457                                  
 11458                                  _$STD_CON_INPUT_STATUS:		;System call 11
 11459                                  
 11460 0000171C E80939                  	CALL	STATCHK
 11461 0000171F B000                    	MOV	AL,0		; no xor!!
 11462                                  	;retz
 11463 00001721 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11464 00001723 0CFF                    	OR	AL,-1
 11465                                  ;SCIS_RETN:
 11466 00001725 C3                      	RETN
 11467                                  
 11468                                  ;
 11469                                  ;----------------------------------------------------------------------------
 11470                                  ;
 11471                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11472                                  ;
 11473                                  ;	Flush console input buffer and perform call in AL
 11474                                  ;
 11475                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11476                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11477                                  ;		return arguments for the fcn supplied in (AL)
 11478                                  ;	USES	all
 11479                                  ;
 11480                                  ;----------------------------------------------------------------------------
 11481                                  ;
 11482                                  
 11483                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11484                                  
 11485 00001726 50                      	PUSH	AX
 11486 00001727 52                      	PUSH	DX
 11487 00001728 31DB                    	XOR	BX,BX
 11488 0000172A E8491E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11489                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11490 0000172D 7205                    	JC	SHORT BADJFNCON
 11491 0000172F B404                    	MOV	AH,4
 11492 00001731 E83D2C                  	CALL	IOFUNC
 11493                                  
 11494                                  BADJFNCON:
 11495 00001734 5A                      	POP	DX
 11496 00001735 58                      	POP	AX
 11497 00001736 88C4                    	MOV	AH,AL
 11498 00001738 3C01                    	CMP	AL,1
 11499 0000173A 7413                    	JZ	SHORT REDISPJ
 11500 0000173C 3C06                    	CMP	AL,6
 11501 0000173E 740F                    	JZ	SHORT REDISPJ
 11502 00001740 3C07                    	CMP	AL,7
 11503 00001742 740B                    	JZ	SHORT REDISPJ
 11504 00001744 3C08                    	CMP	AL,8
 11505 00001746 7407                    	JZ	SHORT REDISPJ
 11506 00001748 3C0A                    	CMP	AL,10
 11507 0000174A 7403                    	JZ	SHORT REDISPJ
 11508 0000174C B000                    	MOV	AL,0
 11509 0000174E C3                      	RETN
 11510                                  
 11511                                  REDISPJ:
 11512 0000174F FA                      	CLI
 11513                                  	;transfer REDISP
 11514 00001750 E934EC                  	JMP	REDISP
 11515                                  
 11516                                  ;============================================================================
 11517                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11518                                  ;============================================================================
 11519                                  ; 20/07/2018 - Retro DOS v3.0
 11520                                  ; 17/05/2019 - Retro DOS v4.0
 11521                                  
 11522                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11523                                  ;
 11524                                  ;	$GET_FCB_POSITION
 11525                                  ;	$FCB_DELETE
 11526                                  ;	$GET_FCB_FILE_LENGTH
 11527                                  ;	$FCB_CLOSE
 11528                                  ;	$FCB_RENAME
 11529                                  ;	SaveFCBInfo
 11530                                  ;	ResetLRU
 11531                                  ;	SetOpenAge
 11532                                  ;	LRUFCB
 11533                                  ;	FCBRegen
 11534                                  ;	BlastSFT
 11535                                  ;	CheckFCB
 11536                                  ;	SFTFromFCB
 11537                                  ;	FCBHardErr
 11538                                  ;
 11539                                  ;	Revision history:
 11540                                  ;
 11541                                  ;		Created: ARR 4 April 1983"
 11542                                  ;			 MZ  6 June  1983 completion of functions
 11543                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11544                                  ;					  times.  Change so successive closes work by
 11545                                  ;					  always returning OK.	Also, detect I/O to
 11546                                  ;					  already closed FCB and return EOF.
 11547                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11548                                  ;					  out of sft into FCB for reconnection
 11549                                  ;
 11550                                  ;		A000	 version 4.00  Jan. 1988
 11551                                  
 11552                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11553                                  ;----------------------------------------------------------------------------
 11554                                  ;
 11555                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11556                                  ;	extent and next record field and set the random record field to point
 11557                                  ;	to that record
 11558                                  ;
 11559                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11560                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11561                                  ;   Registers modified: all
 11562                                  ;
 11563                                  ;----------------------------------------------------------------------------
 11564                                  ;
 11565                                  
 11566                                  _$GET_FCB_POSITION:
 11567 00001753 E8C904                  	call	GetExtended		; point to FCB
 11568 00001756 E89A04                  	call	GetExtent		; DX:AX is current record
 11569                                  	;mov	[si+21h],ax
 11570 00001759 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11571                                  	;mov	[si+23h],dl
 11572 0000175C 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11573                                  	;cmp	word [si+0Eh],64
 11574 0000175F 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11575 00001763 7303                    	JAE	short GetFCBBye
 11576                                  	;mov	[si+24h],dh
 11577 00001765 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11578                                  GoodPath:	; 16/12/2022
 11579                                  GetFCBBye:
 11580 00001768 E9E6EE                  	jmp	FCB_RET_OK
 11581                                  
 11582                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11583                                  ;----------------------------------------------------------------------------
 11584                                  ;
 11585                                  ;**	$FCB_Delete - Delete from FCB Template
 11586                                  ;
 11587                                  ;	given an FCB, remove all directory entries in the current
 11588                                  ;	directory that have names that match the FCB's ?  marks.
 11589                                  ;
 11590                                  ;	ENTRY	(DS:DX) = address of FCB
 11591                                  ;	EXIT	entries matching the FCB are deleted
 11592                                  ;		(al) = ff iff no entries were deleted
 11593                                  ;	USES	all
 11594                                  ;
 11595                                  ;----------------------------------------------------------------------------
 11596                                  ;
 11597                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11598                                  
 11599                                  _$FCB_DELETE:		; System call 19
 11600                                  					; OpenBuf is in DOSDATA
 11601 0000176B BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11602                                  
 11603 0000176E E82E52                  	call	TransFCB		; convert FCB to path
 11604 00001771 7207                    	JC	short BadPath 		; signal no deletions
 11605                                  
 11606 00001773 16                      	push	SS
 11607 00001774 1F                      	pop	DS			; SS is DOSDATA
 11608                                  
 11609 00001775 E82C0D                  	call	DOS_DELETE		; wham
 11610                                  	;JC	short BadPath
 11611                                  	; 16/12/2022
 11612 00001778 73EE                    	jnc 	short GoodPath
 11613                                  ;GoodPath:
 11614                                  ;	;jmp	FCB_RET_OK		; do a good return
 11615                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11616                                  ;	jmp	short GetFCBBye
 11617                                  
 11618                                  BadPath:
 11619                                  	; Error code is in AX
 11620                                  
 11621 0000177A E9D7EE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11622                                  
 11623                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11624                                  ;----------------------------------------------------------------------------
 11625                                  ;
 11626                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11627                                  ;	file in records (rounded up if partial).
 11628                                  ;
 11629                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11630                                  ;   Outputs:	Random record field updated to reflect the number of records
 11631                                  ;   Registers modified: all
 11632                                  ;
 11633                                  ;----------------------------------------------------------------------------
 11634                                  ;
 11635                                  	; 15/01/2024
 11636                                  
 11637                                  _$GET_FCB_FILE_LENGTH:
 11638                                  
 11639 0000177D E89F04                  	call	GetExtended		; get real FCB pointer
 11640                                  					; DX points to Input FCB
 11641                                  
 11642                                  					; OpenBuf is in DOSDATA
 11643 00001780 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11644                                  
 11645 00001783 1E                      	push	ds			; save pointer to true FCB
 11646 00001784 56                      	push	si
 11647 00001785 E81752                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11648 00001788 5E                      	pop	si
 11649 00001789 1F                      	pop	ds
 11650 0000178A 72EE                    	JC	short BadPath
 11651 0000178C 1E                      	push	ds			; save pointer
 11652 0000178D 56                      	push	si
 11653 0000178E 16                      	push	ss		
 11654 0000178F 1F                      	pop	ds
 11655 00001790 E80F11                  	call	GET_FILE_INFO		; grab the info
 11656 00001793 5E                      	pop	si			; get pointer back
 11657 00001794 1F                      	pop	ds
 11658 00001795 72E3                    	JC	short BadPath 		; invalid something
 11659                                  	; 15/01/2024
 11660                                  	;MOV	DX,BX (*)		; get high order size
 11661                                  	;MOV	AX,DI (**)		; get low order size
 11662 00001797 89D8                    	mov	ax,bx ; hw of file size
 11663                                  	;
 11664                                  	;mov	bx,[si+0Eh]
 11665 00001799 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11666 0000179C 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11667 0000179E 7502                    	JNZ	short GetSize 		; not empty
 11668                                  	;MOV	BX,128
 11669 000017A0 B380                    	mov	bl,128	; 15/01/2024
 11670                                  GetSize:
 11671                                  	; 15/01/2024
 11672                                  	;MOV	DI,AX			; save low order word
 11673                                  	;MOV	AX,DX			; move high order for divide
 11674                                  	;xchg	ax,dx ; (*)
 11675                                  	; ax = hw of file size
 11676                                  
 11677 000017A2 31D2                    	XOR	DX,DX			; clear out high
 11678 000017A4 F7F3                    	DIV	BX			; wham
 11679 000017A6 50                      	PUSH	AX			; save dividend
 11680 000017A7 89F8                    	MOV	AX,DI ; (**)		; get low order piece
 11681 000017A9 F7F3                    	DIV	BX			; wham
 11682 000017AB 89D1                    	MOV	CX,DX			; save remainder
 11683 000017AD 5A                      	POP	DX			; get high order dividend
 11684 000017AE E306                    	JCXZ	LengthStore		; no roundup
 11685 000017B0 83C001                  	ADD	AX,1
 11686 000017B3 83D200                  	ADC	DX,0			; 32-bit increment
 11687                                  LengthStore:
 11688                                  	;mov	[si+21h],ax
 11689 000017B6 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11690                                  	;mov	[si+23h],dl
 11691 000017B9 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11692 000017BC 08F6                    	OR	DH,DH
 11693 000017BE 74A8                    	JZ	short GoodPath		; not storing insignificant zero
 11694                                  	;mov	[si+24h],dh
 11695 000017C0 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11696                                  	; 16/12/2022
 11697                                  GoodRet:
 11698                                  	;jmp	FCB_RET_OK
 11699 000017C3 EBA3                    	jmp	short GoodPath
 11700                                  
 11701                                  ;Break <$FCB_Close - close a file>
 11702                                  ;----------------------------------------------------------------------------
 11703                                  ;
 11704                                  ;   $FCB_Close - given an FCB, look up the SFN and close it. Do not free it
 11705                                  ;	as the FCB may be used for further I/O
 11706                                  ;
 11707                                  ;   Inputs:	DS:DX point to FCB
 11708                                  ;   Outputs:	AL = FF if file was not found on disk
 11709                                  ;   Registers modified: all
 11710                                  ;
 11711                                  ;----------------------------------------------------------------------------
 11712                                  ;
 11713                                  	; 16/01/2024
 11714                                  
 11715                                  _$FCB_CLOSE:		; System call 16
 11716                                  
 11717 000017C5 30C0                    	XOR	AL,AL			; default search attributes
 11718 000017C7 E85504                  	call	GetExtended		; DS:SI point to real FCB
 11719 000017CA 7403                    	JZ	short NoAttr		; not extended
 11720 000017CC 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11721                                  NoAttr:
 11722                                  					; SS override
 11723 000017CF 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11724 000017D3 E8B803                  	call	SFTFromFCB
 11725 000017D6 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11726                                  
 11727                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11728                                  	; there is no need to set the SFT's attribute.
 11729                                  
 11730                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11731                                  	;;; done
 11732                                  
 11733                                  	;mov	al,[es:di+4]
 11734 000017D8 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11735 000017DC 30E4                    	XOR	AH,AH
 11736 000017DE 50                      	PUSH	AX
 11737                                  
 11738                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11739                                  	;;; done
 11740                                  
 11741 000017DF E8AB59                  	call	CheckShare
 11742 000017E2 7508                    	JNZ	short NoStash
 11743 000017E4 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11744                                  	;mov	[es:di+4],al
 11745 000017E8 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11746                                  NoStash:
 11747                                  
 11748                                  ; 16/01/2024
 11749                                  %if 0
 11750                                  	;mov	ax,[si+14h]
 11751                                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11752                                  	;mov	[es:di+0Fh],ax
 11753                                  	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11754                                  	;mov	ax,[si+16h]
 11755                                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11756                                  	;mov	[es:di+0Dh],ax
 11757                                  	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11758                                  	;mov	ax,[si+10h]
 11759                                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11760                                  	;mov	[es:di+11h],ax
 11761                                  	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11762                                  	;mov	ax,[si+12h]
 11763                                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11764                                  	;mov	[es:di+13h],ax
 11765                                  	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11766                                  	;or	word [es:di+5],4000h
 11767                                  	; 17/12/2022
 11768                                  	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11769                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11770                                  %else
 11771                                  	; 16/01/2024 (PCDOS 7.1 IBMDOS.COM)
 11772 000017EC 1E                      	push	ds
 11773                                  	;lds	ax,[si+14h]
 11774 000017ED C54414                  	lds	ax,[si+SYS_FCB.FDATE]	; move in the time and date
 11775                                  	;mov	[es:di+0Fh],ax
 11776 000017F0 2689450F                	mov	[es:di+SF_ENTRY.sf_date],ax
 11777                                  	;mov	[es:di+0Dh],ds		
 11778 000017F4 268C5D0D                	mov	[es:di+SF_ENTRY.sf_time],ds
 11779 000017F8 1F                      	pop	ds
 11780                                  	;lds	ax,[si+10h]
 11781 000017F9 C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 11782                                  	;mov	[es:di+11h],ax
 11783 000017FC 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 11784                                  	;mov	[es:di+13h],ds
 11785 00001800 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 11786                                  	; 16/01/2024
 11787                                  	;;or	word [es:di+5],4000h
 11788                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 11789 00001804 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11790                                  %endif
 11791                                  
 11792 00001809 16                      	push	ss
 11793 0000180A 1F                      	pop	ds
 11794 0000180B E88416                  	call	DOS_CLOSE	; wham
 11795 0000180E C43E[9E05]              	LES	DI,[THISSFT]
 11796                                  
 11797                                  	;;; 9/8/86 F.C. restore SFT attribute
 11798 00001812 59                      	POP	CX
 11799                                  	;mov	[es:di+4],cl
 11800 00001813 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11801                                  	;;; 9/8/86 F.C. restore SFT attribute
 11802                                  
 11803 00001817 9C                      	PUSHF
 11804                                  	;test	word [es:di],0FFFFh
 11805                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11806                                  				; zero ref count gets blasted
 11807 00001818 26833D00                	cmp	word [ES:DI],0
 11808 0000181C 7507                    	jnz     short CloseOK
 11809 0000181E 50                      	PUSH	AX
 11810 0000181F B04D                    	MOV	AL,'M' ; 4Dh
 11811 00001821 E8E802                  	call	BlastSFT
 11812 00001824 58                      	POP	AX
 11813                                  CloseOK:
 11814 00001825 9D                      	POPF
 11815 00001826 739B                    	JNC	short GoodRet
 11816                                  	;cmp	al,6
 11817 00001828 3C06                    	CMP	AL,error_invalid_handle
 11818 0000182A 7497                    	JZ	short GoodRet
 11819                                  	;mov	al,2
 11820 0000182C B002                    	MOV	AL,error_file_not_found
 11821                                  fren90:
 11822                                  	; 16/12/2022
 11823                                  fcb_close_err:
 11824 0000182E E923EE                  	jmp	FCB_RET_ERR
 11825                                  
 11826                                  ;
 11827                                  ;----------------------------------------------------------------------------
 11828                                  ;
 11829                                  ;**	$FCB_Rename - Rename a File
 11830                                  ;
 11831                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11832                                  ;	multiple files copying from the meta characters.
 11833                                  ;
 11834                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11835                                  ;		    name of the files to be renamed. Starting at offset 11h
 11836                                  ;		    in the FCB is the destination name.
 11837                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11838                                  ;		AL = FF -> some files may have been renamed but:
 11839                                  ;			rename to existing file or source file not found
 11840                                  ;	USES	ALL
 11841                                  ;
 11842                                  ;----------------------------------------------------------------------------
 11843                                  ;
 11844                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11845                                  
 11846                                  _$FCB_RENAME:		; System call 23
 11847                                  
 11848 00001831 E8EB03                  	call	GetExtended		; get pointer to real FCB
 11849 00001834 52                      	push	dx
 11850 00001835 8A04                    	MOV	AL,[SI] 		; get drive byte
 11851 00001837 83C610                  	ADD	SI,10h			; point to destination
 11852                                  
 11853                                  					; RenBuf is in DOSDATA
 11854 0000183A BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11855 0000183D FF34                    	push	word [SI]
 11856 0000183F 1E                      	push	ds
 11857                                  	;push	di			; save source pointer for TransFCB
 11858                                  	; 16/01/2024 - BugFix !
 11859 00001840 56                      	push	si
 11860 00001841 8804                    	MOV	[SI],AL			; drop in real drive
 11861 00001843 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11862 00001845 E85751                  	call	TransFCB		; munch this pathname
 11863 00001848 5E                      	pop	si
 11864 00001849 1F                      	pop	ds	
 11865 0000184A 8F04                    	pop	WORD [SI]		; get path back
 11866 0000184C 5A                      	pop	dx			; Original FCB pointer
 11867 0000184D 72DF                    	JC	short fren90		; bad path -> error
 11868                                  
 11869                                  					; SS override for WFP_Start & Ren_WFP
 11870 0000184F 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11871 00001854 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11872                                  
 11873                                  					; OpenBuf is in DOSDATA
 11874 00001859 BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11875 0000185C E84051                  	call	TransFCB		; wham
 11876                                  					; NOTE that this call is pointing
 11877                                  					;  back to the ORIGINAL FCB so
 11878                                  					;  SATTRIB gets set correctly
 11879 0000185F 72CD                    	JC	short fren90		; error
 11880 00001861 E8140E                  	call	DOS_RENAME
 11881 00001864 72C8                    	JC	short fren90
 11882                                  	; 16/12/2022
 11883 00001866 E9E8ED                  	jmp	FCB_RET_OK
 11884                                  	
 11885                                  ;	Error -
 11886                                  ;
 11887                                  ;	(al) = error code
 11888                                  
 11889                                  	; 16/12/2022
 11890                                  ;fren90:	
 11891                                  ;	;jmp	FCB_RET_ERR
 11892                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11893                                  ;	jmp	short fcb_close_err
 11894                                  
 11895                                  ;Break <Misbehavior fixers>
 11896                                  ;
 11897                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11898                                  ;   user's space so he may move them at will. Second, they have a small
 11899                                  ;   reserved area that may be used for system information. Third, there was
 11900                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11901                                  ;   usage.
 11902                                  ;
 11903                                  ;   This results in the following misbehavior:
 11904                                  ;
 11905                                  ;	infinite opens of the same file:
 11906                                  ;
 11907                                  ;	While (TRUE) {			While (TRUE) {
 11908                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11909                                  ;	    Read (FCB); 		    Write (FCB);
 11910                                  ;	    }				    }
 11911                                  ;
 11912                                  ;	infinite opens of different files:
 11913                                  ;
 11914                                  ;	While (TRUE) {			While (TRUE) {
 11915                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11916                                  ;	    Read (FCB); 		    Write (FCB);
 11917                                  ;	    }				    }
 11918                                  ;
 11919                                  ;	multiple closes of the same file:
 11920                                  ;
 11921                                  ;	FCBOpen (FCB);
 11922                                  ;	while (TRUE)
 11923                                  ;	    FCBClose (FCB);
 11924                                  ;
 11925                                  ;	I/O after closing file:
 11926                                  ;
 11927                                  ;	FCBOpen (FCB);
 11928                                  ;	while (TRUE) {
 11929                                  ;	    FCBWrite (FCB);
 11930                                  ;	    FCBClose (FCB);
 11931                                  ;	    }
 11932                                  ;
 11933                                  ;   The following is am implementation of a methodology for emulating the
 11934                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11935                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11936                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11937                                  ;   the local machine.
 11938                                  ;
 11939                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11940                                  ;   structures depending on the file itself and the state of operations of the
 11941                                  ;   OS. The information contained in this reserved field is enough to
 11942                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11943                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11944                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11945                                  ;
 11946                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11947                                  ;
 11948                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11949                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11950                                  ;   regenerated.
 11951                                  ;
 11952                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11953                                  ;   longer available. We can make up for this by using the following
 11954                                  ;   information:
 11955                                  ;
 11956                                  ;	The Drive number (from the DPB).
 11957                                  ;	The physical sector of the directory that contains the entry.
 11958                                  ;	The relative position of the entry in the sector.
 11959                                  ;	The first cluster field.
 11960                                  ;	The last used SFT.
 11961                                  ;      OR In the case of a device FCB
 11962                                  ;	The low 6 bits of sf_flags (indicating device type)
 11963                                  ;	The pointer to the device header
 11964                                  ;
 11965                                  ;   We read in the particular directory sector and examine the indicated
 11966                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11967                                  ;
 11968                                  ;   Some key items need to be remembered:
 11969                                  ;
 11970                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11971                                  ;	information. We enforce good behavior on the FCBs.
 11972                                  ;
 11973                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11974                                  ;	open VCs. The VCs may be closed only at process termination.
 11975                                  ;
 11976                                  ;	If this is not an installed version of the DOS, file sharing will
 11977                                  ;	always be present.
 11978                                  ;
 11979                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11980                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11981                                  ;
 11982                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11983                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11984                                  ;	proper OI record.
 11985                                  ;
 11986                                  ;   The test bits are:
 11987                                  ;
 11988                                  ;	00 -> local file
 11989                                  ;	40 -> sharing local
 11990                                  ;	80 -> network
 11991                                  ;	C0 -> local device
 11992                                  
 11993                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 11994                                  ;----------------------------------------------------------------------------
 11995                                  ;
 11996                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 11997                                  ;	pieces of information into the FCB to allow for subsequent
 11998                                  ;	regeneration. Poke LRU also.
 11999                                  ;
 12000                                  ;   Inputs:	ThisSFT points to a complete SFT.
 12001                                  ;		DS:SI point to the FCB (not an extended one)
 12002                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 12003                                  ;		DS:SI preserved
 12004                                  ;		ES:DI point to sft
 12005                                  ;   Registers modified: All
 12006                                  ;
 12007                                  ;
 12008                                  ;----------------------------------------------------------------------------
 12009                                  ;
 12010                                  	; 20/01/2024
 12011                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12012                                  
 12013                                  SaveFCBInfo:
 12014                                  
 12015 00001869 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 12016 0000186E E8D6F9                  	call	IsSFTNet
 12017 00001871 740B                    	JZ	short SaveLocal		; if not network then save local info
 12018                                  ;
 12019                                  ;----- In net support -----
 12020                                  ;
 12021                                  	; 17/05/2019 - Retro DOS v4.0
 12022                                  
 12023                                  	; MSDOS 3.3
 12024                                  	;;mov	ax,[es:di+1Dh]
 12025                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 12026                                  	;;mov	[si+1Ah],ax
 12027                                  	;mov	[si+fcb_net_handle],ax
 12028                                  	;push	es
 12029                                  	;push	di
 12030                                  	;;les	di,[es:di+19h]
 12031                                  	;LES	DI,[ES:DI+sf_netid]
 12032                                  	;;mov	[si+1Ch],di
 12033                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 12034                                  	;;mov 	[si+1Eh],es
 12035                                  	;MOV	[SI+fcb_netID+2],ES
 12036                                  	;pop	di
 12037                                  	;pop	es
 12038                                  
 12039                                  	; MSDOS 6.0
 12040                                  	;mov	ax,[es:di+0Bh]
 12041 00001873 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 12042                                  	;mov	[si+1Ch],ax
 12043 00001877 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 12044                                  	
 12045                                  	;mov	bl,80h
 12046 0000187A B380                    	MOV	BL,FCBNETWORK
 12047                                  ;
 12048                                  ;----- END In net support -----
 12049                                  ;
 12050 0000187C EB63                    	jmp	SHORT SaveSFN
 12051                                  
 12052                                  SaveLocal:
 12053                                  	;IF	Installed
 12054 0000187E E80C59                  	call	CheckShare
 12055                                  	;JZ	short SaveNoShare	; no sharer
 12056                                  	;JMP	short SaveShare		; sharer present
 12057                                  	; 16/12/2022
 12058                                  	; 28/07/2019
 12059 00001881 7559                    	jnz	short SaveShare
 12060                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12061                                  	;JZ	short SaveNoShare	; no sharer
 12062                                  	;JMP	short SaveShare		; sharer present
 12063                                  
 12064                                  SaveNoShare:
 12065                                  	;;test 	word [es:di+5],80h
 12066                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12067 00001883 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 12068 00001888 7542                    	JNZ	short SaveNoShareDev	; Device
 12069                                  
 12070                                  	; Save no sharing local file information
 12071                                  
 12072                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 12073                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 12074 0000188A 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 12075                                  	;mov	[si+1Dh],ax
 12076 0000188E 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 12077                                  
 12078                                  	; MSDOS 6.0
 12079                                  
 12080                                  	;SR; Store high byte of directory sector
 12081                                  	;mov	ax,[es:di+1Dh]
 12082 00001891 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 12083                                  	
 12084                                  	; SR;
 12085                                  	; We have to store the read-only and archive attributes of the file.
 12086                                  	; We extract it from the SFT and store it in the top two bits of the 
 12087                                  	; sector number ( sector number == 22 bits only )
 12088                                  
 12089                                  	;mov	bl,[es:di+4]
 12090 00001895 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 12091 00001899 88DF                    	mov	bh,bl
 12092 0000189B D0CB                    	ror	bl,1
 12093 0000189D D0E7                    	shl	bh,1
 12094 0000189F 08FB                    	or	bl,bh
 12095 000018A1 80E3C0                  	and	bl,0C0h
 12096 000018A4 08D8                    	or	al,bl
 12097                                  	;mov	[si+18h],al ; 08/11/2022
 12098 000018A6 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 12099                                  
 12100                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12101                                  	;mov	al,[es:di+1Fh]
 12102 000018A9 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 12103                                  	;mov	[si+1Fh],al
 12104 000018AD 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 12105                                  	;mov	ax,[es:di+0Bh]
 12106 000018B0 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 12107                                  	;mov	[si+1Bh],ax
 12108 000018B4 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 12109 000018B7 B300                    	MOV	BL,0
 12110                                  
 12111                                  	; Create the bits field from the dirty/device bits of the flags word 
 12112                                  	; and the mode byte
 12113                                  
 12114                                  SetFCBBits:
 12115                                  	;mov	ax,[es:di+5]
 12116 000018B9 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12117 000018BD 24C0                    	AND	AL,0C0h 		; mask off drive bits
 12118                                  	;or	al,[es:di+2]
 12119 000018BF 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 12120                                  	;mov	[si+1Ah], al
 12121 000018C3 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 12122                                  
 12123                                  	; MSDOS 6.0
 12124                                  	
 12125                                  	; SR;
 12126                                  	; Check if we came here for local file or device. If for local file, 
 12127                                  	; skip setting of SFT index
 12128                                  	
 12129 000018C6 08DB                    	or	bl,bl
 12130 000018C8 7428                    	jz	short SaveNoSFN		; do not save SFN if local file
 12131                                  
 12132 000018CA EB15                    	JMP	short SaveSFN 		; go and save SFN
 12133                                  
 12134                                  	; Save no sharing local device information
 12135                                  
 12136                                  SaveNoShareDev:
 12137                                  	; 20/01/2024
 12138                                  	;;mov	ax,[es:di+7]
 12139                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 12140                                  	;;mov	[si+1Ah],ax
 12141                                  	;MOV	[SI+fcb_nsld_drvptr],AX
 12142                                  	;;mov	ax,[es:di+9]
 12143                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 12144                                  	;MOV	[SI+fcb_nsld_drvptr+2],AX
 12145                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12146 000018CC 06                      	push	es
 12147 000018CD 26C44507                	les	ax,[es:di+SF_ENTRY.sf_devptr]
 12148 000018D1 89441A                  	mov	[si+fcb_nsld_drvptr],ax
 12149 000018D4 8C441C                  	mov	[si+fcb_nsld_drvptr+2],es
 12150 000018D7 07                      	pop	es
 12151                                  	
 12152                                  	;mov	bl,40h
 12153 000018D8 B340                    	MOV	BL,FCBDEVICE
 12154                                  	; 28/12/2022
 12155 000018DA EBDD                    	JMP	short SetFCBBits	; go and save SFN
 12156                                  
 12157                                  SaveShare:
 12158                                  	;ENDIF
 12159                                  
 12160                                  ;----- In share support -----
 12161                                  
 12162                                  	;call	far [ss:ShSave]
 12163 000018DC 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 12164                                  
 12165                                  ;----- end in share support -----
 12166                                  
 12167                                  	; 17/05/2019
 12168                                  
 12169                                  SaveSFN:
 12170                                  	;lea	ax,[di-6]
 12171 000018E1 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 12172                                  	
 12173                                  	; Adjust for offset to table.
 12174                                  	
 12175 000018E4 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 12176                                  
 12177 000018E9 53                      	push	bx			;bx = FCB type (net/Share or local)
 12178                                  	;;mov	bl,53 ; MSDOS 3.3
 12179                                  	;mov	bl,59 ; MSDOS 6.0
 12180 000018EA B33B                    	MOV	BL,SF_ENTRY.size
 12181 000018EC F6F3                    	DIV	BL
 12182                                  	;mov	[si+18h],al
 12183 000018EE 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 12184 000018F1 5B                      	pop	bx			;restore bx
 12185                                  
 12186                                  SaveNoSFN:
 12187                                  	;mov	ax,[es:di+5]
 12188 000018F2 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12189 000018F6 243F                    	AND	AL,3Fh			; get real drive
 12190 000018F8 08D8                    	OR	AL,BL
 12191                                  	;mov	[si+19h],al
 12192 000018FA 884419                  	MOV	[SI+fcb_l_drive],AL
 12193                                  
 12194 000018FD 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 12195 00001901 40                      	INC	AX
 12196                                  	;mov	[es:di+15h],ax
 12197 00001902 26894515                	MOV	[ES:DI+sf_LRU],AX
 12198 00001906 7506                    	JNZ	short SimpleStuff
 12199                                  	
 12200                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 12201                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 12202                                  	
 12203                                  	;mov	bx,15h
 12204 00001908 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 12205 0000190B E80500                  	call	ResetLRU
 12206                                  
 12207                                  	; Set new LRU to AX
 12208                                  SimpleStuff:
 12209 0000190E 36A3[1000]              	MOV	[SS:FCBLRU],AX
 12210 00001912 C3                      	retn
 12211                                  
 12212                                  ;Break	<ResetLRU - reset overflowed lru counts>
 12213                                  ;----------------------------------------------------------------------------
 12214                                  ;
 12215                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 12216                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 12217                                  ;   at 0.
 12218                                  ;
 12219                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 12220                                  ;		ES:DI point to SFT currently being updated
 12221                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 12222                                  ;		AX has 8000h
 12223                                  ;   Registers modified: none
 12224                                  ;
 12225                                  ;----------------------------------------------------------------------------
 12226                                  ;
 12227                                  
 12228                                  	; 17/05/2019 - Retro DOS v4.0
 12229                                  ResetLRU:
 12230                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 12231                                  	; DOSDATA
 12232                                  
 12233 00001913 B80080                  	MOV	AX,8000h
 12234 00001916 06                      	push	es
 12235 00001917 57                      	push	di
 12236                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 12237 00001918 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 12238                                  	;mov	cx,[es:di+4]
 12239 0000191D 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 12240                                  	;lea	di,[di+6]
 12241 00001921 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 12242                                  ovScan:
 12243 00001924 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 12244 00001927 7703                    	JA	short ovLoop
 12245 00001929 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 12246                                  ovLoop:
 12247                                  	;;add	di,53	; MSDOS 3.3
 12248                                  	;add	di,59	; MSDOS 6.0	
 12249 0000192C 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 12250 0000192F E2F3                    	LOOP	ovScan
 12251 00001931 5F                      	pop	di
 12252 00001932 07                      	pop	es
 12253 00001933 268901                  	MOV	[ES:DI+BX],AX
 12254 00001936 C3                      	retn
 12255                                  
 12256                                  ;IF  0  ; We dont need this routine any more.
 12257                                  ;
 12258                                  ;Break	<SetOpenAge - update the open age of a SFT>
 12259                                  ;----------------------------------------------------------------------------
 12260                                  ;
 12261                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 12262                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 12263                                  ;   count here and fill in the appropriate field.
 12264                                  ;
 12265                                  ;   Inputs:	ES:DI point to SFT
 12266                                  ;   Outputs:	ES:DI has the open age field filled in.
 12267                                  ;		If open age has wraparound, we will have subtracted 8000h
 12268                                  ;		    from all open ages.
 12269                                  ;   Registers modified: AX
 12270                                  ;
 12271                                  ;----------------------------------------------------------------------------
 12272                                  ;
 12273                                  ;SetOpenAge:
 12274                                  ;	; 20/07/2018 - Retro DOS v3.0
 12275                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12276                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12277                                  ;
 12278                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12279                                  ;
 12280                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12281                                  ;	INC	AX
 12282                                  ;	;mov	[es:di+17h],ax
 12283                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12284                                  ;	JNZ	short SetDone
 12285                                  ;	;mov	bx,17h
 12286                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12287                                  ;	call	ResetLRU
 12288                                  ;SetDone:
 12289                                  ;	MOV	[CS:OpenLRU],AX
 12290                                  ;	retn
 12291                                  ;
 12292                                  ;ENDIF	; SetOpenAge no longer needed
 12293                                  
 12294                                  ; 21/07/2018 - Retro DOS v3.0
 12295                                  ; LRUFCB for MSDOS 6.0 !
 12296                                  
 12297                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12298                                  ;----------------------------------------------------------------------------
 12299                                  ;
 12300                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12301                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12302                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12303                                  ;
 12304                                  ;   Inputs:	none
 12305                                  ;   Outputs:	ES:DI point to SFT
 12306                                  ;		ThisSFT points to SFT
 12307                                  ;		SFT is zeroed
 12308                                  ;		Carry set of closes failed
 12309                                  ;   Registers modified: none
 12310                                  ;
 12311                                  ;----------------------------------------------------------------------------
 12312                                  ;
 12313                                  ; MSDOS 6.0
 12314                                  ;IF 0	; rewritten this routine
 12315                                  ;
 12316                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12317                                  ;	call	save_world
 12318                                  ;	
 12319                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12320                                  ; to find the lease recently used one that is younger than the open age.  We
 12321                                  ; operate be scanning the list n times finding the least age that is greater
 12322                                  ; or equal to the previous minimum age.
 12323                                  ;
 12324                                  ;   BP is the count of times we need to go through this loop.
 12325                                  ;   AX is the current acceptable minimum age to consider
 12326                                  ;
 12327                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12328                                  ;	XOR	AX,AX			; low = 0;
 12329                                  ;
 12330                                  ; If we've scanned the table n times, then we are done.
 12331                                  ;
 12332                                  ;lru1:
 12333                                  ;	CMP	bp,0			; while (k--) {
 12334                                  ;	JZ	short lru75
 12335                                  ;	DEC	bp
 12336                                  ;
 12337                                  ; Set up for scan.
 12338                                  ;
 12339                                  ;   AX is the minimum age for consideration
 12340                                  ;   BX is the minimum age found during the scan
 12341                                  ;   SI is the position of the entry that corresponds to BX
 12342                                  ;
 12343                                  ;	MOV	BX,-1			;     min = 0xffff;
 12344                                  ;	MOV	si,BX			;     pos = 0xffff;
 12345                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12346                                  ;	;mov	cx,[es:di+4]
 12347                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12348                                  ;	;lea	di,[di+6]
 12349                                  ;	LEA	DI,[DI+SFT.SFTable]
 12350                                  ;
 12351                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12352                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12353                                  ; are done.  In both cases, we use the found entry.
 12354                                  ;
 12355                                  ;lru2:
 12356                                  ;	cmp	word [es:di],0
 12357                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12358                                  ;	jz	short lru25
 12359                                  ;	;cmp	word [es:di],-1
 12360                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 12361                                  ;	cmp	word [es:di],sf_busy
 12362                                  ;	jnz	short lru3
 12363                                  ;
 12364                                  ; The entry is usable without further scan.  Go and use it.
 12365                                  ;
 12366                                  ;lru25:
 12367                                  ;	MOV	si,DI			;	      pos = i;
 12368                                  ;	JMP	short lru11		;	      goto got;
 12369                                  ;
 12370                                  ; See if the entry is for the network or for the sharer.
 12371                                  ;
 12372                                  ;  If for the sharer or network then
 12373                                  ;	if the age < current minimum AND >= allowed minimum then
 12374                                  ;	    this entry becomes current minimum
 12375                                  ;
 12376                                  ;lru3:
 12377                                  ;	;test	word [es:di+5],8000h
 12378                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12379                                  ;					;	  if (!net[i]
 12380                                  ;	JNZ	short lru35
 12381                                  ;if installed
 12382                                  ;	call	CheckShare		;		&& !sharing)
 12383                                  ;	JZ	short lru5		;	  else
 12384                                  ;ENDIF
 12385                                  ;
 12386                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12387                                  ; current minimum.
 12388                                  ;
 12389                                  ;lru35:
 12390                                  ;	;mov	dx,[es:di+17h]
 12391                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12392                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12393                                  ;	JB	short lru5
 12394                                  ;	CMP	DX,BX
 12395                                  ;	JAE	short lru5		;	      age[i] < min) {
 12396                                  ;
 12397                                  ; entry is new minimum.  Remember his age.
 12398                                  ;
 12399                                  ;	mov	bx,DX			;	      min = age[i];
 12400                                  ;	mov	si,di			;	      pos = i;
 12401                                  ;
 12402                                  ; End of loop.	gp back for more
 12403                                  ;
 12404                                  ;lru5:
 12405                                  ;	;add	di,53
 12406                                  ;	add	di,SF_ENTRY.size
 12407                                  ;	loop	lru2			;	      }
 12408                                  ;
 12409                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12410                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12411                                  ; complete.  Go find LRU.
 12412                                  ;
 12413                                  ;lru6:	
 12414                                  ;	cmp	si,-1			; position not -1?
 12415                                  ;	jz	short lru75		; no, done with everything
 12416                                  ;	lea	ax,[bx+1]		; set new threshold age
 12417                                  ;	jmp	short lru1		; go and loop for more
 12418                                  ;lru65:	
 12419                                  ;	stc
 12420                                  ;	jmp	short LRUDead		;	  return -1;
 12421                                  ;
 12422                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12423                                  ; network entry. We now make a second pass through to find the LRU entry
 12424                                  ; that is local-no-share or has age >= AX
 12425                                  ;
 12426                                  ;lru75:
 12427                                  ;	mov	bx,-1			; min = 0xffff;
 12428                                  ;	mov	si,bx			; pos = 0xffff;
 12429                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12430                                  ;	;mov	cx,[es:di+4]
 12431                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12432                                  ;	;lea	di,[di+6]
 12433                                  ;	LEA	DI,[DI+SFT.SFTable]
 12434                                  ;
 12435                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12436                                  ; then check for lru.
 12437                                  ;
 12438                                  ;lru8:
 12439                                  ;	;test	word [es:di+5],8000h
 12440                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12441                                  ;	jnz	short lru85		; is for network, go check age
 12442                                  ;	call	CheckShare		; sharer here?
 12443                                  ;	jz	short lru86		; no, go check lru
 12444                                  ;
 12445                                  ; Network or sharer.  Check age
 12446                                  ;
 12447                                  ;lru85:
 12448                                  ;	;cmp	[es:di+17h],ax
 12449                                  ;	cmp	[es:di+sf_OpenAge],ax
 12450                                  ;	jb	short lru9		; age is before threshold, skip it
 12451                                  ;
 12452                                  ; Check LRU
 12453                                  ;
 12454                                  ;lru86:
 12455                                  ;	;cmp	[es:di+15h],bx
 12456                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12457                                  ;	jae	short lru9		; no, skip this
 12458                                  ;	mov	si,di			; remember position
 12459                                  ;	;mov	bx,[es:di+15h]
 12460                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12461                                  ;
 12462                                  ; Done with this entry, go back for more.
 12463                                  ;
 12464                                  ;lru9:
 12465                                  ;	;add	di, 53
 12466                                  ;	add	di,SF_ENTRY.size
 12467                                  ;	loop	lru8
 12468                                  ;
 12469                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12470                                  ; out. The conditions here are:
 12471                                  ;
 12472                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12473                                  ;
 12474                                  ;lru10:
 12475                                  ;	cmp	si,-1			; if no one f
 12476                                  ;	jz	short lru65		;     return -1;
 12477                                  ;lru11:
 12478                                  ;	mov	di,si
 12479                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12480                                  ;	MOV	[CS:THISSFT+2],ES
 12481                                  ;
 12482                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12483                                  ; is 0.
 12484                                  ;
 12485                                  ;	;test	word [es:di+5],8000h
 12486                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12487                                  ;	JNZ	short LRUClose
 12488                                  ;IF INSTALLED
 12489                                  ;	call	CheckShare
 12490                                  ;	JZ	short LRUDone
 12491                                  ;ENDIF
 12492                                  ;
 12493                                  ; Repeat close until ref count is 0
 12494                                  ;
 12495                                  ;LRUClose:
 12496                                  ;	push	ss
 12497                                  ;	pop	ds
 12498                                  ;	LES	DI,[THISSFT]
 12499                                  ;	cmp     word [es:di],0
 12500                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12501                                  ;	JZ	short LRUDone 		; nope, all done
 12502                                  ;	call	DOS_CLOSE
 12503                                  ;	jnc	short LRUClose		; no error => clean up
 12504                                  ;	;cmp	al,6
 12505                                  ;	cmp	al,error_invalid_handle
 12506                                  ;	jz	short LRUClose
 12507                                  ;	stc
 12508                                  ;	JMP	short LRUDead
 12509                                  ;LRUDone:
 12510                                  ;	XOR	AL,AL
 12511                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12512                                  ;
 12513                                  ;LRUDead:
 12514                                  ;	call	restore_world
 12515                                  ;	LES     DI,[CS:THISSFT]
 12516                                  ;	jnc	short LRUFCB_retn
 12517                                  ;LRUFCB_err:
 12518                                  ;	; mov	al, 23h	
 12519                                  ;	MOV	AL,error_FCB_unavailable
 12520                                  ;LRUFCB_retn:	
 12521                                  ;	retn:
 12522                                  ;
 12523                                  ;ENDIF	; LRUFCB has been rewritten below.
 12524                                  
 12525                                  ; 17/05/2019 - Retro DOS v4.0
 12526                                  ; LRUFCB for MSDOS 6.0 !
 12527                                  ;----------------------------------------------------------------------------
 12528                                  ;
 12529                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12530                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12531                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12532                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12533                                  ; optimize regeneration operations by keeping track of the current local
 12534                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12535                                  ; local SFT in the SFT Block.
 12536                                  ;
 12537                                  ; Inputs: al = 0 => Regenerate SFT operation
 12538                                  ;	    = 1 => Allocate new SFT for Open/Create
 12539                                  ;
 12540                                  ; Outputs: Carry clear
 12541                                  ;	 	es:di = Address of allocated SFT
 12542                                  ;	  	ThisSFT = Address of allocated SFT
 12543                                  ;
 12544                                  ;	  carry set if closes of net/Share files failed 
 12545                                  ;		al = error_FCB_unavailable
 12546                                  ;
 12547                                  ; Registers affected: None
 12548                                  ;
 12549                                  ;----------------------------------------------------------------------------
 12550                                  
 12551                                  ;LruFCB	PROC	NEAR
 12552                                  LRUFCB:
 12553                                  	; 17/05/2019 - Retro DOS v4.0
 12554                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12555                                  
 12556                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12557                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12558                                  
 12559                                  	; 20/01/2024
 12560                                  
 12561 00001937 06                      	push	es	; * (MSDOS 6.21)
 12562                                  	
 12563 00001938 E82BEB                  	call	save_world
 12564                                  	
 12565                                  	;getdseg <ds>		;ds = DOSDATA
 12566 0000193B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12567                                  
 12568 00001940 08C0                    	or	al,al		;Check if regenerate allocation
 12569 00001942 7516                    	jnz	short lru1	;Try to find SFT to use
 12570                                  
 12571                                  	; This is a regen call. If LocalSFT contains the address of a valid
 12572                                  	; local SFT, just return that SFT to reuse
 12573                                  
 12574                                  	; 20/01/2024
 12575                                  	;mov	di,[LocalSFT]
 12576                                  	;or	di,[LocalSFT+2]	;is address == 0?
 12577                                  	;jz	short lru1	;invalid local SFT, find one
 12578                                  
 12579                                  	; We have found a valid local SFT. Recycle this SFT
 12580                                  
 12581 00001944 C43E[5D10]              	les	di,[LocalSFT]
 12582                                  
 12583                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12584 00001948 8CC1                    	mov	cx,es
 12585 0000194A 09F9                    	or	cx,di		; is address == 0?
 12586 0000194C 740C                    	jz	short lru1	; invalid local SFT, find one
 12587                                  
 12588                                  gotlocalSFT:
 12589 0000194E 893E[9E05]              	mov	[THISSFT],di
 12590 00001952 8C06[A005]              	mov	[THISSFT+2],es
 12591 00001956 F8                      	clc
 12592 00001957 E9A900                  	jmp	LRUDone		;clear up SFT and return
 12593                                  
 12594                                  lru1:
 12595 0000195A C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12596                                  	;mov	cx,[es:di+4]
 12597 0000195E 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12598                                  	;lea	di,[di+6]
 12599 00001962 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12600                                  
 12601                                  	; We scan through all the SFTs scanning for a free one. It also 
 12602                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately.
 12603                                  	; bx = min. LRU for local SFTs
 12604                                  	; si = pos. of local SFT with min. LRU
 12605                                  	; dx = min. LRU for net/Share SFTs
 12606                                  	; bp = pos. of net/Share SFT with min. LRU
 12607                                  
 12608 00001965 BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12609 00001968 89DE                    	mov	si,bx
 12610 0000196A 89DA                    	mov	dx,bx
 12611 0000196C 89DD                    	mov	bp,bx
 12612                                  
 12613                                  findSFT:
 12614                                  	;See if this SFT is a free one. If so, return it
 12615 0000196E 26830D00                	or	word [es:di],0
 12616                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12617 00001972 744C                    	jz	short gotSFT	;yes, SFT is free
 12618                                  	;;cmp	word [es:di],-1
 12619                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12620 00001974 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12621 00001978 7446                    	jz	short gotSFT	;no, can use it
 12622                                  
 12623                                  	; Check if this SFT is local and store its address in LocalSFT. Can be 
 12624                                  	; used for a later regen.
 12625                                  
 12626                                  	; 16/12/2022
 12627                                  	; 08/11/2022
 12628                                  	;test	byte [es:di+6],80h
 12629 0000197A 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12630                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12631                                  	;;test	word [es:di+5],8000h
 12632                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12633 0000197F 7531                    	jnz	short lru5	;yes, get net/Share LRU
 12634                                  
 12635                                  ;IF installed
 12636 00001981 E80958                  	call	CheckShare	;Share present?
 12637                                  ;ENDIF
 12638 00001984 752C                    	jnz	short lru5	;yes, get net/Share LRU
 12639                                  
 12640                                  	;Local SFT, register its address
 12641                                  
 12642                                  	; !!HACK!!!
 12643                                  	; There is a slightly dirty hack out here in a desperate bid to save
 12644                                  	; code space. There is similar code duplicated at label 'gotSFT'. We
 12645                                  	; enter from there if al = 0, update the LocalSFT variable, and since
 12646                                  	; al = 0, we jump out of the loop to the exit point. I have commented
 12647                                  	; out the code that previously existed at label 'gotSFT'
 12648                                  
 12649                                  hackpoint:
 12650 00001986 893E[5D10]              	mov	[LocalSFT],di
 12651 0000198A 8C06[5F10]              	mov	[LocalSFT+2],es	;store local SFT address
 12652                                  
 12653 0000198E 08C0                    	or	al,al		;Is operation = REGEN?
 12654 00001990 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12655                                  
 12656                                  	;Get LRU for local files
 12657                                  	
 12658                                  	;cmp	[es:di+15h],bx
 12659 00001992 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12660 00001996 7306                    	jae	short lru4	;no, skip
 12661                                  
 12662                                  	;mov	bx,[es:di+15h]
 12663 00001998 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12664 0000199C 89FE                    	mov	si,di		;store SFT position
 12665                                  lru4:
 12666                                  	;add	di,59
 12667 0000199E 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12668 000019A1 E2CB                    	loop	findSFT
 12669                                  	
 12670                                  	; 20/01/2024
 12671 000019A3 49                      	dec	cx ; -1
 12672                                  
 12673                                  	; Check whether we got a net/Share or local SFT. If local SFT
 12674                                  	; available, we will reuse it instead of net/Share LRU
 12675                                  
 12676 000019A4 89F7                    	mov	di,si
 12677                                  	;cmp	si,-1		;local SFT available?
 12678 000019A6 39CE                    	cmp	si,cx ; 20/01/2024
 12679 000019A8 7516                    	jnz	short gotSFT	;yes, return it
 12680                                  
 12681                                  	;No local SFT, see if we got a net/Share SFT
 12682                                  
 12683 000019AA 89EF                    	mov	di,bp
 12684                                  
 12685 000019AC 39CD                    	cmp	bp,cx ; -1 ; 20/01/2024
 12686                                  	;cmp	bp,-1		;net/Share SFT available?
 12687 000019AE 752D                    	jnz	short gotnetSFT	;yes, return it
 12688                                  noSFT:
 12689                                  	; NB: This error should never occur. We always must have an LRU SFT.
 12690                                  	; This error can occur only if the SFT has been corrupted or the LRU
 12691                                  	; count is not maintained properly.
 12692                                  
 12693 000019B0 EB4E                    	jmp	short errorbadSFT ;error, no FCB available.
 12694                                  
 12695                                  	; Handle the LRU for net/Share SFTs
 12696                                  lru5:
 12697                                  	;cmp	[es:di+15h],dx
 12698 000019B2 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12699 000019B6 73E6                    	jae	short lru4	;no, skip
 12700                                  
 12701                                  	;mov	dx,[es:di+15h]
 12702 000019B8 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12703                                  
 12704 000019BC 89FD                    	mov	bp,di		;store SFT position
 12705 000019BE EBDE                    	jmp	short lru4	;continue with next SFT
 12706                                  
 12707                                  gotSFT:
 12708 000019C0 08C0                    	or	al,al
 12709 000019C2 74C2                    	jz	short hackpoint	;save es:di in LocalSFT
 12710                                  
 12711                                  	; HACK!!!
 12712                                  	; The code here differs from the code at 'hackpoint' only in the
 12713                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint'
 12714                                  	; and then from there jump out to 'gotlocalSFT'. The original code
 12715                                  	; has been commented out below and replaced by the code just above.
 12716                                  
 12717                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12718                                  ;
 12719                                  ;	or	al,al		  ;Regen?
 12720                                  ;	jnz	short notlocaluse ;yes, register it and return
 12721                                  ;
 12722                                  ;Register this SFT as a local one
 12723                                  ;
 12724                                  ;	mov	[LocalSFT],di
 12725                                  ;	mov	[LocalSFT+2],es
 12726                                  ;	jmp	gotlocalSFT	;return to caller
 12727                                  ;
 12728                                  ;notlocaluse:
 12729                                  
 12730                                  	; The caller is probably going to use this SFT for a net/Share file.
 12731                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN)
 12732                                  	; does not really know whether it is a local file or not. We
 12733                                  	; invalidate LocalSFT if the SFT we are going to use was previously
 12734                                  	; registered as a local SFT that can be recycled.
 12735                                  
 12736 000019C4 8CC0                    	mov	ax,es
 12737 000019C6 393E[5D10]              	cmp	[LocalSFT],di		;Offset same?
 12738 000019CA 750E                    	jne	short notinvalid
 12739 000019CC 3906[5F10]              	cmp	[LocalSFT+2],ax		;Segments same?
 12740                                  	;je	short zerolocalSFT	;no, no need to invalidate
 12741                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12742 000019D0 7508                    	jne	short notinvalid
 12743                                  zerolocalSFT:	
 12744 000019D2 31C0                    	xor	ax,ax ; 0
 12745 000019D4 A3[5D10]                	mov	[LocalSFT],ax
 12746 000019D7 A3[5F10]                	mov	[LocalSFT+2],ax
 12747                                  	
 12748                                  notinvalid:
 12749 000019DA E971FF                  	jmp	gotlocalSFT
 12750                                  
 12751                                  	; The SFT we are going to use was registered in the LocalSFT variable.
 12752                                  	; Invalidate this variable i.e LocalSFT = NULL
 12753                                  
 12754                                  ;zerolocalSFT:
 12755                                  	;xor	ax,ax ; 0
 12756                                  	;mov	[LocalSFT],ax
 12757                                  	;mov	[LocalSFT+2],ax
 12758                                  	;
 12759                                  	;jmp	gotlocalSFT
 12760                                  
 12761                                  gotnetSFT:
 12762                                  	; We have an SFT that is currently net/Share. If it is going to be
 12763                                  	; used for a regen, we know it has to be a local SFT. Update the
 12764                                  	; LocalSFT variable
 12765                                  
 12766 000019DD 08C0                    	or	al,al
 12767 000019DF 7508                    	jnz	short closenet
 12768                                  
 12769 000019E1 893E[5D10]              	mov	[LocalSFT],di
 12770 000019E5 8C06[5F10]              	mov	[LocalSFT+2],es	;store local SFT address
 12771                                  closenet:
 12772 000019E9 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12773 000019ED 8C06[A005]              	mov	[THISSFT+2],es
 12774                                  
 12775                                  	; If we have sharing or thisSFT is a net sft, then close it until ref
 12776                                  	; count is 0.
 12777                                  	; NB: We come here only if it is a net/Share SFT that is going to be
 12778                                  	; recycled -- no need to check for this.
 12779                                  
 12780                                  LRUClose:
 12781 000019F1 26833D00                	cmp	word [es:di],0
 12782                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12783 000019F5 740C                    	jz	short LRUDone	; nope, all done
 12784                                  
 12785 000019F7 E89814                  	call	DOS_CLOSE
 12786 000019FA 73F5                    	jnc	short LRUClose	; no error => clean up
 12787                                  
 12788                                  	; Bugbug: I dont know why we are trying to close after we get an
 12789                                  	; error closing. Seems like we could have a potential infinite loop
 12790                                  	; here. This has to be verified.
 12791                                  
 12792 000019FC 3C06                    	cmp	al,error_invalid_handle ; 6
 12793 000019FE 74F1                    	je	short LRUClose
 12794                                  errorbadSFT:
 12795 00001A00 F9                      	stc
 12796 00001A01 EB05                    	JMP	short LRUDead
 12797                                  LRUDone:
 12798 00001A03 30C0                    	XOR	AL,AL
 12799 00001A05 E80401                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12800                                  
 12801                                  LRUDead:
 12802 00001A08 E844EA                  	call	restore_world		; use macro
 12803                                  	
 12804 00001A0B 07                      	pop	es ; * (MSDOS 6.21)
 12805                                  
 12806                                  	;getdseg <es>
 12807 00001A0C 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12808 00001A11 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12809                                  
 12810                                  	;;retnc
 12811                                  	;jc	short LruFCB_err
 12812                                  	;retn
 12813                                  
 12814                                  	; 16/12/2022
 12815                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12816 00001A16 7302                    	jnc	short LruFCB_retn
 12817                                  	;jc	short LruFCB_err
 12818                                  	;retn
 12819                                  		
 12820                                  LruFCB_err:
 12821 00001A18 B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12822                                  LruFCB_retn:
 12823 00001A1A C3                      	retn
 12824                                  	
 12825                                  ;LruFCB	ENDP
 12826                                  
 12827                                  ; 17/05/2019 - Retro DOS v4.0
 12828                                  
 12829                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12830                                  
 12831                                  ; 26/06/2024
 12832                                  %if 0
 12833                                  
 12834                                  ; --------------------------------------------------------------------------
 12835                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12836                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12837                                  ; to copy the name to different destinations
 12838                                  ;
 12839                                  ; Inputs: ds:si = source string
 12840                                  ;	 es:di = destination string
 12841                                  ;	 cx = length of string
 12842                                  ;
 12843                                  ; Outputs: String copied to destination
 12844                                  ;
 12845                                  ; Registers affected: cx,di,si
 12846                                  ; --------------------------------------------------------------------------
 12847                                  
 12848                                  RegenCopyName:
 12849                                  CopyName:
 12850                                  	lodsb			;load character
 12851                                  	call	UCase		; convert char to upper case
 12852                                  StuffChar2:
 12853                                  	STOSB			;store converted character
 12854                                  	LOOP	CopyName	;
 12855                                  DoneName:
 12856                                  	retn
 12857                                  
 12858                                  %endif
 12859                                  
 12860                                  ; --------------------------------------------------------------------------
 12861                                  
 12862                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12863                                  FCBRegen:
 12864                                  	; called from SFTFromFCB. SS already DOSDATA
 12865                                  
 12866                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12867                                  	; we do not fill, size we do no fill, position we do not fill,
 12868                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12869                                  
 12870                                  	;mov	al,[si+19h]
 12871 00001A1B 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12872                                  
 12873                                  	; We discriminate based on the first two bits in the reserved field.
 12874                                  	
 12875                                  	;test	al,80h
 12876 00001A1E A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12877 00001A20 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12878                                  
 12879                                  	; The FCB is for a network or a sharing based system. At this point 
 12880                                  	; we have already closed the SFT for this guy and reconnection is 
 12881                                  	; impossible.
 12882                                  	;
 12883                                  	; Remember that he may have given us a FCB with bogus information in
 12884                                  	; it. Check to see if sharing is present or if the redir is present.
 12885                                  	; If either is around, presume that we have cycled out the FCB and 
 12886                                  	; give the hard error. Otherwise, just return with carry set.
 12887                                  
 12888 00001A22 E86857                  	call	CheckShare		; test for sharer
 12889 00001A25 7509                    	JNZ	short RegenFail		; yep, fail this.
 12890                                  	
 12891                                  	;mov	ax,1100h
 12892 00001A27 B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12893 00001A2A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12894                                  			; Return: AL = 00h  not installed, OK to install
 12895                                  			; 01h  not installed, not OK to install
 12896                                  			; FFh  installed
 12897 00001A2C 08C0                    	OR	AL,AL			; is it there?
 12898 00001A2E 740C                    	JZ	short RegenDead		; no, just fail the operation
 12899                                  RegenFail:
 12900                                  	; 17/05/2019 - Retro DOS v4.0
 12901                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12902 00001A30 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12903                                  
 12904                                  	;cmp	ah,10h
 12905 00001A34 80FC10                  	cmp	AH,FCB_CLOSE
 12906 00001A37 7403                    	jz	short RegenDead
 12907 00001A39 E88801                  	call	FCBHardErr		; massive hard error.
 12908                                  RegenDead:
 12909 00001A3C F9                      	STC				; carry set
 12910                                  FCBRegen_retn:
 12911 00001A3D C3                      	retn
 12912                                  
 12913                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12914                                  	; so fail the operation.
 12915                                  
 12916                                  RegenNoSharing:
 12917 00001A3E E84C57                  	call	CheckShare		; Sharing around?
 12918 00001A41 75ED                    	JNZ	short RegenFail
 12919                                  	
 12920                                  	; Find an SFT for this guy.
 12921                                  	
 12922                                  	; 17/05/2019 - Retro DOS v4.0
 12923                                  
 12924                                  	; MSDOS 3.3
 12925                                  	;call	LRUFCB
 12926                                  	;jc	short FCBRegen_retn
 12927                                  	
 12928                                  	; MSDOS 6.0
 12929 00001A43 50                      	push	ax
 12930 00001A44 B000                    	mov	al,0			;indicate it is a regen operation
 12931 00001A46 E8EEFE                  	call	LRUFCB
 12932 00001A49 58                      	pop	ax
 12933 00001A4A 72F1                    	jc	short FCBRegen_retn
 12934                                  
 12935                                  	;mov	word [es:di+2],8002h
 12936 00001A4C 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12937 00001A52 243F                    	AND	AL,3Fh			; get drive number for flags
 12938 00001A54 98                      	CBW
 12939                                  	;or	ax,4000h
 12940 00001A55 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12941                                  
 12942                                  	; The bits field consists of the upper two bits (dirty and device) 
 12943                                  	; from the SFT and the low 4 bits from the open mode.
 12944                                  
 12945                                  	;mov	cl,[si+1Ah]
 12946 00001A58 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12947 00001A5B 88CD                    	MOV	CH,CL
 12948 00001A5D 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12949 00001A60 08E8                    	OR	AL,CH
 12950                                  	;and	cl,0Fh
 12951 00001A62 80E10F                  	AND	CL,access_mask		; get the mode bits
 12952                                  	;mov	[es:di+2],cl
 12953 00001A65 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12954                                  	;mov	[es:di+5],ax
 12955 00001A69 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12956                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12957 00001A6D 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12958                                  	;mov	[es:di+31h],ax
 12959 00001A71 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12960 00001A75 1E                      	push	ds
 12961 00001A76 56                      	push	si
 12962 00001A77 06                      	push	es
 12963 00001A78 57                      	push	di
 12964 00001A79 16                      	push	ss
 12965 00001A7A 07                      	pop	es
 12966 00001A7B BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12967                                  
 12968 00001A7E B90800                  	MOV	CX,8
 12969 00001A81 46                      	INC	SI			; Skip past drive byte to name in FCB
 12970                                  
 12971                                  	; MSDOS 3.3
 12972                                  ;RegenCopyName:
 12973                                  	;lodsb
 12974                                  	;call	UCase
 12975                                  	;stosb
 12976                                  	;loop	RegenCopyName
 12977                                  
 12978                                  	; MSDOS 6.0
 12979 00001A82 E87F00                  	call	RegenCopyName		;copy the name to NAME1
 12980                                  
 12981 00001A85 16                      	push	ss	; SS is DOSDATA
 12982 00001A86 1F                      	pop	ds
 12983                                  
 12984                                  	;mov	byte [ATTRIB],16h
 12985 00001A87 C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12986                                  					; Must set this to something interesting
 12987                                  					; to call DEVNAME.
 12988 00001A8C E82326                  	call	DEVNAME 		; check for device
 12989 00001A8F 5E                      	pop	si
 12990 00001A90 07                      	pop	es
 12991 00001A91 5E                      	pop	si
 12992 00001A92 1F                      	pop	ds
 12993 00001A93 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 12994                                  
 12995                                  	; Device found. We can ignore disk-specific info
 12996                                  
 12997                                  	;mov	[es:di+5],bh
 12998 00001A95 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 12999                                  	;mov	byte [es:di+4],0
 13000 00001A99 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 13001                                  					; SS override
 13002                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 13003 00001A9E 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 13004                                  regen_save_dpb:	; 26/06/2024
 13005                                  	;mov	[es:di+7],si
 13006 00001AA3 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 13007                                  	;mov	[es:di+9],ds
 13008 00001AA7 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 13009 00001AAB C3                      	retn				; carry is clear
 13010                                  
 13011                                  RegenDeadJ:
 13012 00001AAC EB8E                    	JMP	short RegenDead
 13013                                  
 13014                                  	; File found. Just copy in the remaining pieces.
 13015                                  
 13016                                  RegenFileNoSharing:
 13017                                  	;mov	ax,[es:di+5]
 13018 00001AAE 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 13019 00001AB2 83E03F                  	AND	AX,03Fh
 13020 00001AB5 1E                      	push	ds
 13021 00001AB6 56                      	push	si
 13022 00001AB7 E89E4D                  	call	FIND_DPB
 13023                                  	;;mov	[es:di+7],si
 13024                                  	;MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 13025                                  	;;mov	[es:di+9],ds
 13026                                  	;MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 13027                                  	; 26/06/2024 (PCDOS 7.1 IBMDOS.COM)
 13028 00001ABA E8E6FF                  	call	regen_save_dpb
 13029 00001ABD 5E                      	pop	si
 13030 00001ABE 1F                      	pop	ds
 13031 00001ABF 72EB                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 13032                                  					; indicator was bogus
 13033                                  	;mov	ax,[si+1Dh]
 13034 00001AC1 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 13035                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 13036                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 13037 00001AC4 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 13038                                  
 13039                                  	; MSDOS 6.0
 13040                                  
 13041                                  	; SR;
 13042                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 13043                                  	; number
 13044                                  
 13045                                  	;mov	al,[si+18h]
 13046 00001AC8 8A4418                  	mov	al,[si+fcb_sfn]
 13047 00001ACB 24C0                    	and	al,0C0h		;get the 2 attribute bits
 13048 00001ACD 88C4                    	mov	ah,al
 13049 00001ACF D0C4                    	rol	ah,1
 13050 00001AD1 D0E8                    	shr	al,1
 13051 00001AD3 08E0                    	or	al,ah
 13052 00001AD5 243F                    	and	al,03Fh		;mask off unused bits
 13053                                  	;mov	[es:di+4],al
 13054 00001AD7 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 13055                                  
 13056                                  	; SR;
 13057                                  	; Update the higher word of the directory sector from the FCB
 13058                                  
 13059                                  	;;mov	al,[si+18h]
 13060 00001ADB 8A4418                  	mov	al,[si+fcb_sfn]
 13061 00001ADE 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 13062 00001AE0 28E4                    	sub	ah,ah
 13063                                  	;mov	[es:di+1Dh],ax
 13064 00001AE2 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 13065                                  
 13066                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13067                                  	;mov	ax,[si+1Bh]
 13068 00001AE6 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 13069                                  	;mov	[es:di+0Bh],ax
 13070 00001AE9 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 13071                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 13072                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 13073 00001AED 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 13074                                  	;mov	al,[si+1Fh]
 13075 00001AF1 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 13076                                  	;mov  	[es:di+1Fh],al
 13077 00001AF4 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 13078                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13079 00001AF8 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 13080                                  					; Existing FCB entries would be
 13081                                  					; flushed unnecessarily because of
 13082                                  					; check in CheckFCB of the ref_count.
 13083                                  					; July 22/85 - BAS
 13084                                  	;lea	si,[si+1]
 13085 00001AFB 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 13086                                  	;lea	di,[di+20h]
 13087 00001AFE 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 13088                                  	;mov	cx,11
 13089 00001B01 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13090                                  	
 13091                                  	; 26/06/2024
 13092                                  	; MSDOS 6.0
 13093                                  	;call	RegenCopyName	;copy name to SFT
 13094                                  	; 26/06/2024
 13095                                  	; cf = 0 (at the result of the 'test' instruction) 
 13096                                  	
 13097                                  	; MSDOS 3.3
 13098                                  ;RegenCopyName2:
 13099                                  	;lodsb
 13100                                  	;call    UCase
 13101                                  	;stosb
 13102                                  	;loop    RegenCopyName2
 13103                                  
 13104                                  	; 26/06/2024
 13105                                  	; cf = 0
 13106                                  	;clc
 13107                                  	;retn
 13108                                  
 13109                                  ; 26/06/2024
 13110                                  %if 1
 13111                                  
 13112                                  ; --------------------------------------------------------------------------
 13113                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 13114                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 13115                                  ; to copy the name to different destinations
 13116                                  ;
 13117                                  ; Inputs: ds:si = source string
 13118                                  ;	 es:di = destination string
 13119                                  ;	 cx = length of string
 13120                                  ;
 13121                                  ; Outputs: String copied to destination
 13122                                  ;
 13123                                  ; Registers affected: cx,di,si
 13124                                  ; --------------------------------------------------------------------------
 13125                                  
 13126                                  RegenCopyName:
 13127                                  CopyName:
 13128 00001B04 AC                      	lodsb			;load character
 13129 00001B05 E80334                  	call	UCase ; *	; convert char to upper case
 13130                                  StuffChar2:
 13131 00001B08 AA                      	STOSB			;store converted character
 13132 00001B09 E2F9                    	LOOP	CopyName	;
 13133                                  	; 26/06/2024
 13134                                  	; cf= 0 ; *
 13135                                  DoneName:
 13136 00001B0B C3                      	retn
 13137                                  
 13138                                  %endif
 13139                                  
 13140                                  ; 17/05/2019 - Retro DOS v4.0
 13141                                  
 13142                                  ;**	BlastSFT - FIll SFT with Garbage
 13143                                  ; --------------------------------------------------------------------------
 13144                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 13145                                  ;	various garbage values to put into the SFT.  I don't know why,
 13146                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 13147                                  ;	necessary to show that the SFT is free after filling it.
 13148                                  ;
 13149                                  ;	ENTRY	(es:di) = address of SFT
 13150                                  ;		(al) = fill character
 13151                                  ;	EXIT	(ax) = -1
 13152                                  ;		'C' clear
 13153                                  ;	USES	AX, CX, Flags
 13154                                  
 13155                                  BlastSFT:
 13156 00001B0C 57                      	push	di
 13157                                  	;mov	cx,53 ; MSDOS 3.3
 13158                                  	;mov	cx,59 ; MSDOS 6.0
 13159 00001B0D B93B00                  	mov	cx,SF_ENTRY.size
 13160 00001B10 F3AA                    	rep	stosb
 13161 00001B12 5F                      	pop	di
 13162 00001B13 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 13163 00001B15 268905                  	mov	[es:di],ax
 13164                                  	;mov	[es:di+SF_ENTRY.sf_ref_count],ax ; set ref count    ;
 13165                                  	;mov	[es:di+15h],ax
 13166 00001B18 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 13167 00001B1C 48                      	dec	ax	; -1					    ;
 13168                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 13169 00001B1D 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 13170                                  BlastSFT_retn:
 13171 00001B21 C3                      	retn				; return with 'C' clear     ;
 13172                                  
 13173                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 13174                                  ; --------------------------------------------------------------------------
 13175                                  ;
 13176                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 13177                                  ;   regenerated.
 13178                                  ;
 13179                                  ;   Inputs:	DS:SI point to FCB (not extended)
 13180                                  ;		AL is SFT index
 13181                                  ;   Outputs:	Carry Set - FCB needs to be regened
 13182                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 13183                                  ;   Registers modified: AX and BX
 13184                                  ;
 13185                                  ; --------------------------------------------------------------------------
 13186                                  
 13187                                  	; 21/01/2024
 13188                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13189                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 13190                                  CheckFCB:
 13191                                  		
 13192                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 13193                                  
 13194                                  	; MSDOS 3.3
 13195                                  
 13196                                  	; LES	DI,[CS:SFTFCB]
 13197                                  
 13198                                  	; MSDOS 6.0
 13199                                  	
 13200                                  	; SR;
 13201                                  	; We check if the given FCB is for a local file. If so, we return a 
 13202                                  	; bad SFT status forcing the caller to regenerate the SFT.
 13203                                  
 13204                                  	;test	byte [si+19h],0C0h
 13205 00001B22 F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 13206 00001B26 7464                    	jz	short BadSFT		;Local file, return bad SFT
 13207 00001B28 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 13208                                  
 13209                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13210                                  	;cmp	[es:di+4],al
 13211 00001B2D 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 13212 00001B31 7259                    	JC	short BadSFT
 13213                                  	;;mov	bl,53 ; MSDOS 3.3
 13214                                  	;mov	bl,59 ; MSDOS 6.0
 13215 00001B33 B33B                    	MOV	BL,SF_ENTRY.size
 13216 00001B35 F6E3                    	MUL	BL
 13217                                  	;lea	di,[di+6]
 13218 00001B37 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 13219 00001B3A 01C7                    	ADD	DI,AX
 13220                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 13221 00001B3C 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 13222                                  	;cmp	[es:di+31h],ax
 13223 00001B40 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 13224 00001B44 7546                    	JNZ	short BadSFT		; must match process
 13225 00001B46 26833D00                	cmp	word [es:di],0
 13226                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 13227 00001B4A 7440                    	JZ	short BadSFT		; must also be in use
 13228                                  	;mov	al,[si+19h]
 13229 00001B4C 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 13230                                  	;test	al,80h
 13231 00001B4F A880                    	test	AL,FCBSPECIAL		; a special FCB?
 13232 00001B51 7427                    	JZ	short CheckNoShare	; No. try local or device
 13233                                  
 13234                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 13235                                  	; FCBSHARE is a superset of FCBNETWORK.
 13236                                  
 13237 00001B53 50                      	PUSH	AX
 13238                                  	;and	al,0C0h
 13239 00001B54 24C0                    	AND	AL,FCBMASK
 13240                                  	;cmp	al,0C0h
 13241 00001B56 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 13242 00001B58 58                      	POP	AX
 13243 00001B59 7515                    	JNZ	short CheckNet		; yes
 13244                                  ;
 13245                                  ;----- In share support -----
 13246                                  ;
 13247                                  	;call	far [cs:JShare+(11*4)]
 13248 00001B5B 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 13249 00001B60 722A                    	JC	short BadSFT
 13250                                  
 13251                                  ; 21/01/2024
 13252                                  %if 0
 13253                                  	JMP	SHORT CheckD
 13254                                  ;
 13255                                  ;----- End in share support -----
 13256                                  ;
 13257                                  	; 09/11/2022
 13258                                  	; (There is not any procedure/sub
 13259                                  	;  which calls or jumps to CheckFirClus here)
 13260                                  	;;;
 13261                                  CheckFirClus:
 13262                                  	;cmp     bx,[es:di+0Bh]
 13263                                  	; 07/12/2022
 13264                                  	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 13265                                  	JNZ	short BadSFT
 13266                                  	;;;
 13267                                  %endif
 13268                                  
 13269                                  CheckD:
 13270 00001B62 243F                    	AND	AL,3Fh
 13271                                  	;mov	ah,[es:di+5]
 13272 00001B64 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 13273 00001B68 80E43F                  	AND	AH,3Fh
 13274 00001B6B 38C4                    	CMP	AH,AL
 13275                                  	; 26/06/2024
 13276                                  	; 16/12/2022
 13277                                  	;jz	short BlastSFT_retn	; carry is clear
 13278                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13279 00001B6D 751D                    	jnz	short BadSFT
 13280                                  CheckD_retn:
 13281 00001B6F C3                      	retn
 13282                                  
 13283                                  ; 26/06/2024
 13284                                  ;BadSFT: 
 13285                                  ;	STC
 13286                                  ;	retn
 13287                                  
 13288                                  CheckNet:
 13289                                  	; 17/05/2019 - Retro DOS v4.0
 13290                                  	
 13291                                  ;----- In net support -----
 13292                                  
 13293                                  	; MSDOS 3.3
 13294                                  	;;mov	ax,[si+1Ah]
 13295                                  	;mov	ax,[si+fcb_net_handle]
 13296                                  	;;cmp	ax,[es:di+1Dh]
 13297                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 13298                                  	;jnz	short BadSFT
 13299                                  	;;cmp	ax,[es:di+19h]
 13300                                  	;cmp	ax,[ES:DI+sf_netid]
 13301                                  	;jnz     short BadSFT
 13302                                  	;;mov	ax,[si+1Eh]
 13303                                  	;mov	ax,[si+fcb_l_attr]
 13304                                  	;;cmp	ax,[es:di+1Bh]
 13305                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 13306                                  	;jnz     short BadSFT
 13307                                  
 13308                                  	; MSDOS 6.0
 13309                                  	;mov	ax,[si+1Ch]
 13310 00001B70 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 13311                                  	; 09/11/2022
 13312                                  	;cmp	ax,[es:di+0Bh] 
 13313 00001B73 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 13314 00001B77 7513                    	JNZ	short BadSFT
 13315                                  
 13316                                  ;----- END In net support -----
 13317                                  
 13318                                  CheckNet_retn:
 13319 00001B79 C3                      	retn
 13320                                  
 13321                                  CheckNoShare:
 13322                                  
 13323                                  ; 16/12/2022
 13324                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 13325                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 13326                                  ;	;test	al,40h
 13327                                  ;	test	AL,FCBDEVICE		; Device?
 13328                                  ;	;jnz	short $+2 ; 09/11/2022
 13329                                  ;	JNZ	short CheckNoShareDev 	; Yes
 13330                                  
 13331                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 13332                                  	;;mov	bx,[si+1Dh]
 13333                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 13334                                  	;;cmp	bx,[es:di+1Dh]
 13335                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 13336                                  	;jnz	short BadSFT
 13337                                  	;;mov	bl,[si+1Fh]
 13338                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13339                                  	;;cmp	bl,[es:di+1Fh]
 13340                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13341                                  	;jnz	short BadSFT
 13342                                  	;;mov	bl,[si+1Ah]
 13343                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13344                                  	;;mov	bh,[es:di+5]
 13345                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13346                                  	;xor	bh,bl
 13347                                  	;and	bh,0C0h
 13348                                  	;jnz	short BadSFT
 13349                                  	;;xor	bl,[es:di+2]
 13350                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13351                                  	;and	bl,0Fh
 13352                                  	;jnz	short BadSFT
 13353                                  	;push	di
 13354                                  	;push	si
 13355                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13356                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13357                                  	;;lea	si,[si+1]
 13358                                  	;LEA	SI,[SI+SYS_FCB.name]
 13359                                  	;;mov	cx,11
 13360                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13361                                  	;repe	cmpsb
 13362                                  	;pop	si
 13363                                  	;pop	di
 13364                                  	;jnz	short BadSFT
 13365                                  	;;mov	bx,[si+1Bh]
 13366                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13367                                  	;jmp	short CheckFirClus
 13368                                  
 13369                                  	; MSDOS 6.0
 13370                                  
 13371                                  	; SR;
 13372                                  	; The code below to match a local FCB with its SFT can no longer be
 13373                                  	; used. We just return a no-match status. This check is done right
 13374                                  	; at the top.
 13375                                  
 13376                                  CheckNoShareDev:
 13377                                  	;mov	bx,[si+1Ah]
 13378 00001B7A 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13379                                  	;cmp	bx,[es:di+7]
 13380 00001B7D 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13381 00001B81 7509                    	JNZ	short BadSFT
 13382                                  	;mov	bx,[si+1Ch]
 13383 00001B83 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13384                                  	;cmp	bx,[es:di+9]
 13385 00001B86 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13386                                  	;JNZ	short BadSFT
 13387                                  	;JMP	short CheckD
 13388                                  	; 26/06/2024
 13389 00001B8A 74D6                    	jz	short CheckD
 13390                                  
 13391                                  ; 26/06/2024
 13392                                  BadSFT: 
 13393 00001B8C F9                      	STC
 13394 00001B8D C3                      	retn
 13395                                  
 13396                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13397                                  ;----------------------------------------------------------------------------
 13398                                  ;
 13399                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13400                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13401                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13402                                  ;	with PID
 13403                                  ;
 13404                                  ;   Inputs:	DS:SI point to FCB
 13405                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13406                                  ;		Carry clear -> OK ES:DI -> SFT
 13407                                  ;		Carry set -> error in ax
 13408                                  ;   Registers modified: ES,DI, AX
 13409                                  ;
 13410                                  ;----------------------------------------------------------------------------
 13411                                  
 13412                                  SFTFromFCB:
 13413                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13414                                  
 13415                                  	; 17/05/2019 - Retro DOS v4.0
 13416                                  
 13417 00001B8E 50                      	push	ax
 13418 00001B8F 53                      	push	bx
 13419                                  	;mov	al,[si+18h]
 13420 00001B90 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13421 00001B93 E88CFF                  	call	CheckFCB
 13422 00001B96 5B                      	pop	bx
 13423 00001B97 58                      	pop	ax
 13424                                  	;MOV	[CS:THISSFT],DI		; SS override
 13425                                  	;MOV	[CS:THISSFT+2],ES
 13426 00001B98 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13427 00001B9D 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13428 00001BA2 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13429                                  	
 13430                                  	; 09/11/2022 (MSDOS 5.0)
 13431                                  	; 31/05/2019
 13432 00001BA4 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13433 00001BA5 E8BEE8                  	call	save_world
 13434 00001BA8 E870FE                  	call	FCBRegen
 13435 00001BAB E8A1E8                  	call	restore_world		; use macro restore world
 13436 00001BAE 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13437                                  
 13438                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13439 00001BAF 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13440 00001BB3 72C4                    	jc	short CheckNet_retn
 13441                                  
 13442                                  Set_SFT: 
 13443                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13444 00001BB5 36C43E[9E05]            	les	di,[ss:THISSFT]
 13445                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13446 00001BBA 36FF36[3C03]            	push	word [ss:PROC_ID]
 13447                                  	;pop	word [es:di+31h]
 13448 00001BBF 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13449 00001BC3 C3                      	retn				; carry is clear
 13450                                  
 13451                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13452                                  ;----------------------------------------------------------------------------
 13453                                  ;
 13454                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13455                                  ;	unavailable FCB.
 13456                                  ;
 13457                                  ;   Inputs:	none.
 13458                                  ;   Outputs:	none.
 13459                                  ;   Registers modified: all
 13460                                  ;
 13461                                  ;----------------------------------------------------------------------------
 13462                                  
 13463                                  FCBHardErr:
 13464                                  	; 17/05/2019 - Retro DOS v4.0
 13465 00001BC4 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13466                                  	;
 13467                                  	;mov	ax,23h
 13468 00001BC9 B82300                  	MOV	AX,error_FCB_unavailable
 13469                                  	;;mov	byte [cs:ALLOWED],8
 13470                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13471 00001BCC 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13472                                  	
 13473                                  	;LES	BP,[CS:THISDPB]
 13474 00001BD2 26C42E[8A05]            	les	bp,[es:THISDPB]
 13475                                  	
 13476 00001BD7 BF0100                  	MOV	DI,1			; Fake some registers
 13477 00001BDA 89F9                    	MOV	CX,DI
 13478                                  	;mov	dx,[es:bp+0Bh]
 13479 00001BDC 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13480 00001BE0 E8E235                  	call	HARDERR
 13481 00001BE3 F9                      	STC
 13482 00001BE4 C3                      	retn
 13483                                  
 13484                                  ;============================================================================
 13485                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13486                                  ;============================================================================
 13487                                  ; 21/07/2018 - Retro DOS v3.0
 13488                                  ; 17/05/2019 - Retro DOS v4.0
 13489                                  
 13490                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13491                                  ;
 13492                                  ;	GetRR
 13493                                  ;	GetExtent
 13494                                  ;	SetExtent
 13495                                  ;	GetExtended
 13496                                  ;	GetRecSize
 13497                                  ;	FCBIO
 13498                                  ;	$FCB_OPEN
 13499                                  ;	$FCB_CREATE
 13500                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13501                                  ;	$FCB_RANDOM_READ_BLOCK
 13502                                  ;	$FCB_SEQ_READ
 13503                                  ;	$FCB_SEQ_WRITE
 13504                                  ;	$FCB_RANDOM_READ
 13505                                  ;	$FCB_RANDOM_WRITE
 13506                                  ;
 13507                                  ;	Revision history:
 13508                                  ;
 13509                                  ;		Created: ARR 4 April 1983
 13510                                  ;			 MZ  6 June  1983 completion of functions
 13511                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13512                                  ;				  times.  Change so successive closes work by
 13513                                  ;				  always returning OK.	Also, detect I/O to
 13514                                  ;				  already closed FCB and return EOF.
 13515                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13516                                  ;				  out of sft into FCB for reconnection
 13517                                  ;
 13518                                  ;	    A000   version 4.00	Jan. 1988
 13519                                  
 13520                                  ; Defintions for FCBOp flags
 13521                                  
 13522                                  RANDOM	equ 2				; random operation
 13523                                  FCBREAD equ 4				; doing a read
 13524                                  BLOCK	equ 8				; doing a block I/O
 13525                                  
 13526                                  ;Break <GetRR - return the random record field in DX:AX>
 13527                                  ;---------------------------------------------------------------------------
 13528                                  ;
 13529                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13530                                  ;	from the FCB pointed to by DS:SI
 13531                                  ;
 13532                                  ;   Inputs:	DS:SI point to an FCB
 13533                                  ;		BX has record size
 13534                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13535                                  ;   Registers modified: none
 13536                                  ;---------------------------------------------------------------------------
 13537                                  
 13538                                  GetRR:
 13539                                  	;mov	ax,[si+21h]
 13540 00001BE5 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13541                                  	;mov	dx,[si+23h]
 13542 00001BE8 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13543 00001BEB 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13544 00001BEE 7202                    	JB	short GetRRBye
 13545                                  GetExtent_bye:	; 21/01/2024
 13546 00001BF0 30F6                    	XOR	DH,DH
 13547                                  GetRRBye:
 13548 00001BF2 C3                      	retn
 13549                                  
 13550                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13551                                  ;---------------------------------------------------------------------------
 13552                                  ;
 13553                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13554                                  ;	NR fields in the FCB.
 13555                                  ;
 13556                                  ;   Inputs:	DS:SI - point to FCB
 13557                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13558                                  ;   Registers modified: none
 13559                                  ;---------------------------------------------------------------------------
 13560                                  
 13561                                  GetExtent:
 13562                                  	;mov	al,[si+20h]
 13563 00001BF3 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13564                                  	;mov	dx,[si+0Ch]
 13565 00001BF6 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13566 00001BF9 D0E0                    	SHL	AL,1
 13567 00001BFB D1EA                    	SHR	DX,1
 13568 00001BFD D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13569 00001BFF 88D4                    	MOV	AH,DL
 13570 00001C01 88F2                    	MOV	DL,DH
 13571                                  	; 21/01/2024
 13572                                  	;XOR	DH,DH
 13573                                  	;retn
 13574 00001C03 EBEB                    	jmp	short GetExtent_bye
 13575                                  
 13576                                  ;Break <SetExtent - update the extent/NR field>
 13577                                  ;---------------------------------------------------------------------------
 13578                                  ;
 13579                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13580                                  ;	fields
 13581                                  ;
 13582                                  ;   Inputs:	DS:SI point to FCB
 13583                                  ;		DX:AX is a record location in file
 13584                                  ;   Outputs:	Extent/NR fields are filled in
 13585                                  ;   Registers modified: CX
 13586                                  ;---------------------------------------------------------------------------
 13587                                  
 13588                                  SetExtent:
 13589 00001C05 50                      	push	ax
 13590 00001C06 52                      	push	dx
 13591 00001C07 89C1                    	MOV	CX,AX
 13592 00001C09 247F                    	AND	AL,7FH			; next rec field
 13593                                  	;mov	[si+20h],al
 13594 00001C0B 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13595 00001C0E 80E180                  	AND	CL,80H			; save upper bit
 13596 00001C11 D1E1                    	SHL	CX,1
 13597 00001C13 D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13598 00001C15 88E8                    	MOV	AL,CH
 13599 00001C17 88D4                    	MOV	AH,DL
 13600                                  	;mov	[si+0Ch], ax
 13601 00001C19 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13602 00001C1C 5A                      	pop	dx
 13603 00001C1D 58                      	pop	ax
 13604 00001C1E C3                      	retn
 13605                                  
 13606                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13607                                  ;---------------------------------------------------------------------------
 13608                                  ;
 13609                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13610                                  ;
 13611                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13612                                  ;   Outputs:	DS:SI point to the FCB part
 13613                                  ;		zeroflag set if not extended fcb
 13614                                  ;   Registers modified: SI
 13615                                  ;---------------------------------------------------------------------------
 13616                                  
 13617                                  GetExtended:
 13618 00001C1F 89D6                    	MOV	SI,DX			; point to Something
 13619 00001C21 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13620 00001C24 7503                    	JNZ	short GetBye		; not there
 13621 00001C26 83C607                  	ADD	SI,7			; point to FCB
 13622                                  GetBye:
 13623 00001C29 39D6                    	CMP	SI,DX			; set condition codes
 13624                                  getextd_retn:
 13625 00001C2B C3                      	retn
 13626                                  
 13627                                  ;Break <GetRecSize - return in BX the FCB record size>
 13628                                  ;---------------------------------------------------------------------------
 13629                                  ;
 13630                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13631                                  ;
 13632                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13633                                  ;   Outputs:	BX contains the record size
 13634                                  ;   Registers modified: None
 13635                                  ;---------------------------------------------------------------------------
 13636                                  
 13637                                  	; 22/01/2024
 13638                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13639                                  GetRecSize:
 13640                                  	;mov	bx,[si+0Eh]
 13641 00001C2C 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13642 00001C2F 09DB                    	OR	BX,BX			; is it nul?
 13643                                  	;jz	short getextd_retn
 13644                                  	; 22/01/2024 (BugFix)
 13645 00001C31 75F8                    	jnz	short getextd_retn
 13646                                  	;MOV	BX,128			; use default size
 13647 00001C33 B380                    	mov	bl,128
 13648                                  	;mov	[si+0Eh],bx
 13649 00001C35 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13650 00001C38 C3                      	retn
 13651                                  
 13652                                  ; 23/01/2024 - Retro DOS v5.0
 13653                                  ; PCDOS 7.1 IBMDOS.COM - DOSCODE:61B3h
 13654                                  ; 23/01/2024 - Retro DOS v4.2
 13655                                  ; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DC1h
 13656                                  ; 23/01/2024 - Retro DOS v4.1
 13657                                  ; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DADh
 13658                                  
 13659                                  ; 22/07/2018 - Retro DOS v3.0
 13660                                  
 13661                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13662                                  ;----------------------------------------------------------------------------
 13663                                  ;
 13664                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13665                                  ;	and write a number of blocks from it.
 13666                                  ;
 13667                                  ;   Inputs:	DS:DX point to an FCB
 13668                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13669                                  ;		AL <> 0 Not enough room on disk for the output
 13670                                  ;
 13671                                  ;----------------------------------------------------------------------------
 13672                                  
 13673                                  _$FCB_RANDOM_WRITE_BLOCK:
 13674                                  	;mov	AL,0Ah
 13675 00001C39 B00A                    	MOV	AL,RANDOM+BLOCK
 13676 00001C3B EB12                    	JMP	short FCBIO	; 23/01/2024
 13677                                  
 13678                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13679                                  ;----------------------------------------------------------------------------
 13680                                  ;
 13681                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13682                                  ;	and read a number of blocks from it.
 13683                                  ;
 13684                                  ;   Inputs:	DS:DX point to an FCB
 13685                                  ;   Outputs:	AL = error codes defined above
 13686                                  ;
 13687                                  ;----------------------------------------------------------------------------
 13688                                  
 13689                                  _$FCB_RANDOM_READ_BLOCK:
 13690                                  	;mov	AL,0Eh
 13691 00001C3D B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13692 00001C3F EB0E                    	JMP	short FCBIO	; 23/01/2024
 13693                                  
 13694                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13695                                  ;----------------------------------------------------------------------------
 13696                                  ;
 13697                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13698                                  ;	memory
 13699                                  ;
 13700                                  ;   Inputs:	DS:DX point to an FCB
 13701                                  ;   Outputs:	AL = error codes defined above
 13702                                  ;
 13703                                  ;----------------------------------------------------------------------------
 13704                                  
 13705                                  _$FCB_SEQ_READ:
 13706                                  	;mov	AL,4
 13707 00001C41 B004                    	MOV	AL,FCBREAD
 13708 00001C43 EB0A                    	JMP	short FCBIO	; 23/01/2024
 13709                                  
 13710                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13711                                  ;----------------------------------------------------------------------------
 13712                                  ;
 13713                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13714                                  ;	file
 13715                                  ;
 13716                                  ;   Inputs:	DS:DX point to an FCB
 13717                                  ;   Outputs:	AL = error codes defined above
 13718                                  ;
 13719                                  ;----------------------------------------------------------------------------
 13720                                  
 13721                                  _$FCB_SEQ_WRITE:
 13722 00001C45 B000                    	MOV	AL,0
 13723 00001C47 EB06                    	JMP	short FCBIO	; 23/01/2024
 13724                                  
 13725                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13726                                  ;----------------------------------------------------------------------------
 13727                                  ;
 13728                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13729                                  ;	record from it.
 13730                                  ;
 13731                                  ;   Inputs:	DS:DX point to an FCB
 13732                                  ;   Outputs:	AL = error codes defined above
 13733                                  ;
 13734                                  ;----------------------------------------------------------------------------
 13735                                  
 13736                                  _$FCB_RANDOM_READ:
 13737                                  	;mov	AL,6
 13738 00001C49 B006                    	MOV	AL,RANDOM+FCBREAD
 13739                                  	; 23/01/2024
 13740                                  	;jmp	FCBIO 		; single block
 13741 00001C4B EB02                    	jmp	short FCBIO
 13742                                  
 13743                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13744                                  ;----------------------------------------------------------------------------
 13745                                  ;
 13746                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13747                                  ;	a record to it.
 13748                                  ;
 13749                                  ;   Inputs:	DS:DX point to an FCB
 13750                                  ;   Outputs:	AL = error codes defined above
 13751                                  ;
 13752                                  ;----------------------------------------------------------------------------
 13753                                  
 13754                                  _$FCB_RANDOM_WRITE:
 13755                                  	;mov	AL,2
 13756 00001C4D B002                    	MOV	AL,RANDOM
 13757                                  	; 23/01/2024
 13758                                  	;;jmp	FCBIO
 13759                                  	;jmp	short FCBIO
 13760                                  
 13761                                  ;BREAK <FCBIO - do internal FCB I/O>
 13762                                  ;---------------------------------------------------------------------------
 13763                                  ;
 13764                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13765                                  ;
 13766                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13767                                  ;		DS:DX point to FCB
 13768                                  ;		CX may have count of number of records to xfer
 13769                                  ;   Outputs:	AL has error code
 13770                                  ;   Registers modified: all
 13771                                  ;---------------------------------------------------------------------------
 13772                                  
 13773                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13774                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13775                                  
 13776                                  	; 23/01/2024
 13777                                  	; DOSCODE:5B2Bh (MSDOS 6.22 MSDOS.SYS)
 13778                                  
 13779                                  	; 23/01/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 13780                                  	; DOSCODE:61C9h (PCDOS 7.1 IBMDOS.COM)
 13781                                  
 13782                                  FCBIO:
 13783                                  
 13784                                  FEOF	EQU	1
 13785                                  FTRIM	EQU	2
 13786                                  
 13787                                  %define	FCBErr	byte [bp-1]  ; byte
 13788                                  %define	cRec	word [bp-3]  ; word
 13789                                  ;%define RecPos	word [bp-7]  ; dword
 13790                                  %define RecPosL	word [bp-7]  ; word
 13791                                  %define RecPosH	word [bp-5]  ; word
 13792                                  %define	RecSize	word [bp-9]  ; word
 13793                                  ;%define bPos	word [bp-13] ; dword
 13794                                  %define bPosL	word [bp-13] ; word
 13795                                  %define bPosH	word [bp-11] ; word
 13796                                  %define cByte	word [bp-15] ; word
 13797                                  %define cResult word [bp-17] ; word
 13798                                  %define	cRecRes	word [bp-19] ; word
 13799                                  %define	FCBOp	byte [bp-20] ; byte
 13800                                  ; 23/01/2024
 13801                                  %define bPos bp-13
 13802                                  
 13803                                  	;Enter
 13804                                  
 13805 00001C4F 55                      	push	bp
 13806 00001C50 89E5                    	mov	bp,sp
 13807 00001C52 83EC14                  	sub	sp,20
 13808                                  	;mov	[bp-20],al
 13809 00001C55 8846EC                  	MOV	FCBOp,AL
 13810                                  	;mov	byte [bp-1],0
 13811 00001C58 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13812 00001C5C E8C0FF                  	call	GetExtended		;   FCB = GetExtended ();
 13813                                  	;test	byte [bp-20],8
 13814 00001C5F F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13815 00001C63 7503                    	JNZ	short GetPos
 13816 00001C65 B90100                  	MOV	CX,1			;	cRec = 1;
 13817                                  GetPos:
 13818                                  	;mov	[bp-3],cx
 13819 00001C68 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13820 00001C6B E885FF                  	call	GetExtent		;   RecPos = GetExtent ();
 13821 00001C6E E8BBFF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13822                                  	;mov	[bp-9],bx
 13823 00001C71 895EF7                  	MOV	RecSize,BX
 13824                                  	;test	byte [bp-20],2
 13825 00001C74 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13826 00001C78 7403                    	JZ	short GetRec
 13827 00001C7A E868FF                  	call	GetRR			;	RecPos = GetRR ();
 13828                                  GetRec:
 13829                                  	;mov	[bp-7],ax
 13830 00001C7D 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13831                                  	;mov	[bp-5],dx
 13832 00001C80 8956FB                  	MOV	RecPosH,DX
 13833 00001C83 E87FFF                  	call	SetExtent		;   SetExtent (RecPos);
 13834                                  	;mov	ax,[bp-5]
 13835 00001C86 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13836 00001C89 F7E3                    	MUL	BX
 13837 00001C8B 89C7                    	MOV	DI,AX
 13838                                  	;mov	ax,[bp-7]
 13839 00001C8D 8B46F9                  	MOV	AX,RecPosL
 13840 00001C90 F7E3                    	MUL	BX
 13841 00001C92 01FA                    	ADD	DX,DI
 13842                                  	;mov	[bp-13],ax
 13843 00001C94 8946F3                  	MOV	bPosL,AX
 13844                                  	;mov	[bp-11],dx
 13845 00001C97 8956F5                  	MOV	bPosH,DX
 13846                                  	;mov	ax,[bp-3]
 13847 00001C9A 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13848 00001C9D F7E3                    	MUL	BX
 13849                                  	;mov	[bp-15],ax
 13850 00001C9F 8946F1                  	MOV	cByte,AX
 13851                                  
 13852                                  ;hkn; 	SS override
 13853 00001CA2 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13854 00001CA7 83D200                  	ADC	DX,0
 13855 00001CAA 7419                    	JZ	short DoOper
 13856                                  	;mov	byte [bp-1],2
 13857 00001CAC C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13858                                  
 13859                                  ;hkn; 	SS override
 13860 00001CB0 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13861 00001CB4 F7D8                    	NEG	AX
 13862 00001CB6 7501                    	JNZ	short DoDiv
 13863 00001CB8 48                      	DEC	AX
 13864                                  DoDiv:
 13865 00001CB9 31D2                    	XOR	DX,DX
 13866 00001CBB F7F3                    	DIV	BX
 13867                                  	;mov	[bp-3],ax
 13868 00001CBD 8946FD                  	MOV	cRec,AX
 13869 00001CC0 F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13870                                  	;mov	[bp-15],ax
 13871 00001CC2 8946F1                  	MOV	cByte,AX		;	}
 13872                                  DoOper:
 13873 00001CC5 31DB                    	XOR	BX,BX
 13874                                  	;mov	[bp-17],bx
 13875 00001CC7 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13876                                  	;cmp	[bp-15],bx
 13877 00001CCA 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13878 00001CCD 7506                    	JNZ	short DoGetExt
 13879                                  	;test	byte [bp-1],2
 13880 00001CCF F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13881                                  	;JZ	short DoGetExt
 13882                                  	;JMP	short SkipOp
 13883                                  	; 16/12/2022
 13884 00001CD3 7572                    	jnz	short SkipOp
 13885                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13886                                  	;JZ	short DoGetExt
 13887                                  	;JMP	short SkipOp
 13888                                  DoGetExt:
 13889 00001CD5 E8B6FE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13890 00001CD8 730F                    	JNC	short ContinueOp
 13891                                  FCBDeath:
 13892 00001CDA E877E9                  	call	FCB_RET_ERR		; signal error, map for extended
 13893                                  	;mov	word [bp-19],0
 13894 00001CDD C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13895                                  	;mov	byte [bp-1],1
 13896 00001CE2 C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13897 00001CE6 E9EB00                  	JMP	FCBSave 		; bam!
 13898                                  ContinueOp:
 13899                                  	; 23/01/2024
 13900                                  	; (PCDOS 7.1 IBMDOS.COM)
 13901                                  	;
 13902                                  	;;mov	ax,[si+10h]
 13903                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ]
 13904                                  	;;mov	[es:di+11h],ax
 13905                                  	;MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13906                                  	;;mov	ax,[si+12h]
 13907                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13908                                  	;;mov	[es:di+13h],ax
 13909                                  	;MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13910                                  	;;;
 13911 00001CE9 1E                      	push	ds
 13912 00001CEA C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 13913 00001CED 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 13914 00001CF1 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 13915 00001CF5 C546F3                  	lds	ax,[bPos] ; lds ax,[bp-13]
 13916 00001CF8 8CDA                    	mov	dx,ds
 13917 00001CFA 1F                      	pop	ds
 13918                                  	;;;
 13919                                  	;;mov	ax,[bp-13]
 13920                                  	;MOV	AX,bPosL
 13921                                  	;;mov	dx,[bp-11]
 13922                                  	;MOV	DX,bPosH
 13923                                  
 13924                                  	;mov	[es:di+15h],ax
 13925 00001CFB 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13926                                  	;xchg	dx,[es:di+17h]
 13927 00001CFF 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13928 00001D03 52                      	PUSH	DX			; save away Open age.
 13929                                  	;mov	cx,[bp-15]
 13930 00001D04 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13931                                  
 13932                                  ;hkn; DOS_Read is in DOSCODE
 13933 00001D07 BF[2332]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13934                                  	;test	byte [bp-20],4
 13935 00001D0A F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13936 00001D0E 7503                    	JNZ	short DoContext
 13937                                  
 13938                                  ;hkn; DOS_Write is in DOSCODE
 13939 00001D10 BF[2434]                	MOV	DI,DOS_WRITE
 13940                                  DoContext:
 13941 00001D13 55                      	push	bp
 13942 00001D14 1E                      	push	ds
 13943 00001D15 56                      	push	si
 13944                                  
 13945                                  ;hkn; SS is DOSDATA
 13946 00001D16 16                      	push	ss
 13947 00001D17 1F                      	pop	ds
 13948                                  
 13949                                  ;; Fix for disk full
 13950 00001D18 FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE
 13951                                  	
 13952 00001D1A 5E                      	pop	si
 13953 00001D1B 1F                      	pop	ds
 13954 00001D1C 5D                      	pop	bp
 13955 00001D1D 72BB                    	JC	short FCBDeath
 13956                                  	
 13957 00001D1F 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13958 00001D25 740A                    	JZ	short NODSKFULL
 13959 00001D27 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13960                                  
 13961                                  	; (MSDOS 5.0-6.22 MSDOS.SYS) ; 23/01/2024
 13962                                  	;mov	byte [bp-1],1 
 13963 00001D2D C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13964                                  
 13965                                  	; 23/01/2024
 13966                                  	; (PCDOS 7.1 IBMDOS.COM)
 13967                                  	;;mov	byte [bp-1],1 
 13968                                  	;MOV	FCBErr,FEOF		; set disk full flag
 13969                                  
 13970                                  NODSKFULL:
 13971                                  ;; Fix for disk full
 13972                                  	;mov	[bp-17],cx
 13973 00001D31 894EEF                  	MOV	cResult,CX
 13974 00001D34 E832FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13975                                  	;pop	word [es:di+17h]	
 13976 00001D37 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13977                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)
 13978                                  
 13979                                  	; 23/01/2024
 13980                                  	; (PCDOS 7.1 IBMDOS.COM)
 13981                                  	;
 13982                                  	;;mov	ax,[es:di+11h]
 13983                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13984                                  	;;mov	[si+10h],ax
 13985                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 13986                                  	;;mov	ax,[es:di+13h]
 13987                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13988                                  	;;mov	[si+12h],ax
 13989                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13990                                  	;;;
 13991 00001D3B 06                      	push	es
 13992 00001D3C 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size]
 13993 00001D40 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 13994 00001D43 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 13995 00001D46 07                      	pop	es
 13996                                  	;;;
 13997                                  					;	}
 13998                                  SkipOp:
 13999                                  	;mov	ax,[bp-17]
 14000 00001D47 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 14001 00001D4A 31D2                    	XOR	DX,DX
 14002                                  	;div	word [bp-9]
 14003 00001D4C F776F7                  	DIV	RecSize
 14004                                  	;mov	[bp-19],ax
 14005 00001D4F 8946ED                  	MOV	cRecRes,AX
 14006                                  	;add	[bp-7],ax
 14007 00001D52 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 14008                                  	;adc	word [bp-5],0
 14009 00001D55 8356FB00                	ADC	RecPosH,0
 14010                                  
 14011                                  ; If we have not gotten the expected number of records, we signal an EOF
 14012                                  ; condition. On input, this is EOF. On output this is usually disk full.
 14013                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 14014                                  ; do we.
 14015                                  
 14016                                  	;cmp	ax,[bp-3]
 14017 00001D59 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 14018 00001D5C 7411                    	JZ	short TryBlank
 14019                                  	;test	byte [bp-20],4
 14020 00001D5E F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 14021 00001D62 7507                    	JNZ	short SetEOF
 14022                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14023                                  	; MSDOS 3.3
 14024                                  	;;test	word [es:di+5],80h
 14025                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 14026                                  	;JNZ	short TryBlank
 14027                                  	; MSDOS 5.0 & MSDOS 6.0
 14028                                  	;test	byte [es:di+5],80h
 14029 00001D64 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 14030 00001D69 7504                    	jnz	short TryBlank
 14031                                  
 14032                                  SetEOF:
 14033                                  	;mov	byte [bp-1],1
 14034 00001D6B C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 14035                                  TryBlank:				;
 14036 00001D6F 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 14037 00001D71 7426                    	JZ	short SetExt
 14038                                  	;add	word [bp-7],1
 14039 00001D73 8346F901                	ADD	RecPosL,1		;	RecPos++;
 14040                                  	;adc	word [bp-5],0
 14041 00001D77 8356FB00                	ADC	RecPosH,0
 14042                                  	;test	byte [bp-20],4
 14043 00001D7B F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 14044 00001D7F 7418                    	JZ	short SetExt
 14045                                  	;inc	word [bp-19]
 14046 00001D81 FF46ED                  	INC	cRecRes 		;	cRecRes++;
 14047                                  	;mov	byte [bp-1],3
 14048 00001D84 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 14049                                  	;mov	cx,[bp-9]
 14050 00001D88 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 14051 00001D8B 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 14052 00001D8D 30C0                    	XOR	AL,AL
 14053                                  ;hkn; 	SS override
 14054 00001D8F 36C43E[2C03]            	les     di,[ss:DMAADD]
 14055                                  	;add	di,[bp-17]
 14056 00001D94 037EEF                  	ADD	DI,cResult
 14057 00001D97 F3AA                    	REP	STOSB			;   }	}
 14058                                  SetExt:
 14059                                  	;mov	dx,[bp-5]
 14060 00001D99 8B56FB                  	MOV	DX,RecPosH
 14061                                  	;mov	ax,[bp-7]
 14062 00001D9C 8B46F9                  	MOV	AX,RecPosL
 14063                                  	;test	byte [bp-20],2
 14064 00001D9F F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 14065 00001DA3 7406                    	JZ	short DoSetExt
 14066                                  	;test	byte [bp-20],8
 14067 00001DA5 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 14068 00001DA9 7403                    	JZ	short TrySetRR
 14069                                  DoSetExt:
 14070 00001DAB E857FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 14071                                  TrySetRR:
 14072                                  	;test	byte [bp-20],8
 14073 00001DAE F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14074 00001DB2 740F                    	JZ	short TryReturn
 14075                                  	;mov	[si+21h],ax
 14076 00001DB4 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 14077                                  	;mov	[si+23h],dl
 14078 00001DB7 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 14079                                  	;cmp	word [si+0Eh],64
 14080 00001DBA 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 14081 00001DBE 7303                    	JAE	short TryReturn
 14082                                  	;mov	[si+24h],dh
 14083 00001DC0 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 14084                                  TryReturn: 
 14085                                  	;test	byte [bp-20],4
 14086 00001DC3 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 14087 00001DC7 750B                    	JNZ	short FCBSave
 14088 00001DC9 1E                      	push	ds			;	FCB->FDate = date;
 14089 00001DCA E818ED                  	call	DATE16			;	FCB->FTime = time;
 14090 00001DCD 1F                      	pop	ds
 14091                                  	;mov	[si+14h],ax
 14092 00001DCE 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 14093                                  	;mov	[si+16h],dx
 14094 00001DD1 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 14095                                  FCBSave: 
 14096                                  	;test	byte [bp-20],8
 14097 00001DD4 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14098 00001DD8 7409                    	jz	short DoReturn
 14099                                  	;mov	cx,[bp-19]
 14100 00001DDA 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 14101 00001DDD E8A5E6                  	call    Get_User_Stack
 14102                                  	;mov	[si+4],cx
 14103 00001DE0 894C04                  	MOV	[SI+user_env.user_CX],CX
 14104                                  DoReturn:
 14105                                  	;mov	al,[bp-1]
 14106 00001DE3 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 14107                                  	;Leave	
 14108 00001DE6 89EC                    	mov     sp,bp
 14109 00001DE8 5D                      	pop     bp
 14110 00001DE9 C3                      	retn
 14111                                  
 14112                                  ; 22/07/2018 - Retro DOS v3.0
 14113                                  
 14114                                  ;Break <$FCB_Open - open an old-style FCB>
 14115                                  ;---------------------------------------------------------------------------
 14116                                  ;
 14117                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 14118                                  ;	for us and asked to have the rest filled in.
 14119                                  ;
 14120                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14121                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14122                                  ;		FCB has the following fields filled in:
 14123                                  ;		    Time/Date Extent/NR Size
 14124                                  ;---------------------------------------------------------------------------
 14125                                  
 14126                                  _$FCB_OPEN:			; System call 15
 14127                                  
 14128 00001DEA B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 14129                                  
 14130                                  ;hkn; DOS_Open is in DOSCODE
 14131 00001DED B9[DD2A]                	MOV	CX,DOS_OPEN
 14132                                  
 14133                                  ; The following is common code for Creation and openning of FCBs. AX is
 14134                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 14135                                  ; the FCB
 14136                                  
 14137                                  DoAccess:
 14138 00001DF0 1E                      	push	ds
 14139 00001DF1 52                      	push	dx
 14140 00001DF2 51                      	push	cx
 14141 00001DF3 50                      	push	ax			; save FCB pointer away
 14142                                  
 14143                                  ;hkn; 	OpenBuf is in DOSDATA
 14144 00001DF4 BF[BE03]                	MOV	DI,OPENBUF
 14145 00001DF7 E8A54B                  	call	TransFCB		; crunch the fcb
 14146 00001DFA 58                      	pop	ax
 14147 00001DFB 59                      	pop	cx
 14148 00001DFC 5A                      	pop	dx
 14149 00001DFD 1F                      	pop	ds			; get fcb
 14150 00001DFE 7303                    	JNC	short FindFCB		; everything seems ok
 14151                                  FCBOpenErr:
 14152                                  	; AL has error code
 14153 00001E00 E951E8                  	jmp	FCB_RET_ERR
 14154                                  FindFCB:
 14155 00001E03 E819FE                  	call	GetExtended		; DS:SI will point to FCB
 14156                                  
 14157                                  	; 17/05/2019 - Retro DOS v4.0
 14158                                  
 14159                                  	; MSDOS 3.3
 14160                                  	;call	LRUFCB
 14161                                  	;jc	short HardMessage
 14162                                  
 14163                                  	; MSDOS 6.0
 14164 00001E06 50                      	push	ax
 14165 00001E07 B001                    	mov	al,1			;indicate Open/Create operation
 14166 00001E09 E82BFB                  	call	LRUFCB			; get a sft entry (no error)
 14167 00001E0C 58                      	pop	ax
 14168 00001E0D 722A                    	jc	short HardMessage
 14169                                  	
 14170                                  	;mov	word [es:di+2],8000h
 14171 00001E0F 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 14172 00001E15 1E                      	push	ds
 14173 00001E16 56                      	push	si	
 14174 00001E17 53                      	push	bx			; save fcb pointer
 14175 00001E18 89CE                    	MOV	SI,CX
 14176                                  
 14177                                  ;hkn; SS is DOSDATA
 14178 00001E1A 16                      	push	ss
 14179 00001E1B 1F                      	pop	ds			    ; let DOS_Open see variables
 14180 00001E1C FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 14181 00001E1E 5B                      	pop	bx
 14182 00001E1F 5E                      	pop	si
 14183 00001E20 1F                      	pop	ds			; get fcb
 14184                                  
 14185                                  ;hkn; SS override
 14186 00001E21 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 14187 00001E26 7318                    	JNC	short FCBOK		; operation succeeded
 14188                                  failopen:
 14189 00001E28 50                      	PUSH	AX
 14190 00001E29 B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 14191 00001E2B E8DEFC                  	call	BlastSFT
 14192 00001E2E 58                      	POP	AX
 14193                                  	;cmp	ax,4
 14194 00001E2F 83F804                  	CMP	AX,error_too_many_open_files
 14195 00001E32 7405                    	JZ	short HardMessage
 14196                                  	;cmp	ax,24h
 14197 00001E34 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 14198 00001E37 7505                    	jnz	short DeadFCB
 14199                                  HardMessage:
 14200 00001E39 50                      	PUSH	AX
 14201 00001E3A E887FD                  	call	FCBHardErr
 14202 00001E3D 58                      	POP	AX
 14203                                  DeadFCB:
 14204                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14205                                  	;jmp	FCB_RET_ERR
 14206 00001E3E EBC0                    	jmp	short FCBOpenErr
 14207                                  FCBOK:
 14208                                  	; MSDOS 6.0
 14209 00001E40 E804F4                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 14210 00001E43 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 14211 00001E45 E84553                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 14212 00001E48 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 14213                                  ;SR;
 14214                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 14215                                  ; LocalSFT variable to reflect this.
 14216                                  
 14217 00001E4A 36893E[5D10]            	mov	[ss:LocalSFT],di
 14218 00001E4F 368C06[5F10]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 14219                                  ;;SR;
 14220                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 14221                                  ;;
 14222                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 14223                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 14224                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 14225                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 14226                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 14227                                  
 14228                                  FCBOK2:
 14229                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14230 00001E54 26FF05                  	inc	word [es:di]
 14231                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 14232 00001E57 E80FFA                  	call	SaveFCBInfo
 14233                                  	; MSDOS 3.3
 14234                                  	;call	SetOpenAge
 14235                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14236                                  	;test	word [es:di+5],80h
 14237                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 14238 00001E5A 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 14239 00001E5F 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 14240 00001E61 8A04                    	MOV	AL,[SI]			; get drive byte
 14241 00001E63 E8C44A                  	call	GETTHISDRV		; convert
 14242                                  	;INC	AL
 14243                                  	; 17/12/2022
 14244 00001E66 40                      	inc	ax
 14245 00001E67 8804                    	MOV	[SI],AL			; stash in good drive letter
 14246                                  
 14247                                  FCBNoDrive:
 14248                                  	;mov	word [si+0Eh],128
 14249 00001E69 C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 14250                                  
 14251                                  	; 23/01/2024
 14252                                  	; (PCDOS 7.1 IBMDOS.COM)
 14253                                  	;;;
 14254                                  	;;mov	ax,[es:di+0Dh]
 14255                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 14256                                  	;;mov	[si+16h],ax
 14257                                  	;MOV	[SI+SYS_FCB.FTIME],AX
 14258                                  	;;mov	ax,[es:di+0Fh]
 14259                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 14260                                  	;;mov	[si+14h],ax
 14261                                  	;MOV	[SI+SYS_FCB.FDATE],AX
 14262                                  	;;mov	ax,[es:di+11h]
 14263                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 14264                                  	;;mov	[si+10h],ax
 14265                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 14266                                  	;;mov	ax,[es:di+13h]
 14267                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 14268                                  	;;mov	[si+12h],ax
 14269                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 14270                                  	;
 14271 00001E6E 06                      	push	es
 14272                                  	;les	ax,[es:di+0Dh]
 14273 00001E6F 26C4450D                	les	ax,[es:di+SF_ENTRY.sf_time]
 14274                                  	;mov	[si+16h],ax
 14275 00001E73 894416                  	mov	[si+SYS_FCB.FTIME],ax	; set time
 14276                                  	;mov	[si+14h],es
 14277 00001E76 8C4414                  	mov	[si+SYS_FCB.FDATE],es	; set date
 14278 00001E79 07                      	pop	es
 14279 00001E7A 06                      	push	es
 14280                                  	;les	ax,[es:di+11h]
 14281 00001E7B 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size] ; set size
 14282                                  	;mov	[si+10h],ax
 14283 00001E7F 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 14284                                  	;mov	[si+12h],ax
 14285 00001E82 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 14286 00001E85 07                      	pop	es
 14287                                  	;;;
 14288                                  	
 14289 00001E86 31C0                    	XOR	AX,AX			; convenient zero
 14290                                  	;mov	[si+0Ch],ax
 14291 00001E88 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 14292                                  
 14293                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 14294                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 14295                                  
 14296                                  ;hkn; 	SS override
 14297 00001E8B 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 14298                                  	;mov	ah,[es:di+4]
 14299 00001E90 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 14300                                  OpenScan:
 14301                                  	;cmp	al,[si+18h]
 14302 00001E94 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 14303 00001E97 7407                    	JZ	short SkipCheck
 14304 00001E99 50                      	push	ax			; preserve count
 14305 00001E9A E885FC                  	call	CheckFCB		; do they match
 14306 00001E9D 58                      	pop	ax			; get count back
 14307 00001E9E 7309                    	JNC	short OpenFound		; found a match!
 14308                                  SkipCheck:
 14309 00001EA0 FEC0                    	INC	AL			; advance to next FCB
 14310 00001EA2 38E0                    	CMP	AL,AH			; table full?
 14311 00001EA4 75EE                    	JNZ	short OpenScan		; no, go for more
 14312                                  OpenDone:
 14313 00001EA6 30C0                    	xor	al,al			; return success
 14314 00001EA8 C3                      	retn
 14315                                  
 14316                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 14317                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 14318                                  ; Consider:
 14319                                  ;
 14320                                  ;   open (foo)	delete (foo) open (bar)
 14321                                  ;
 14322                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 14323                                  ; foo even though foo is no longer needed; this is due to the server closing
 14324                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 14325                                  ; If we were to CLOSE bar, the server would then close the only reference to
 14326                                  ; bar and subsequent I/O would be lost to the redirector.
 14327                                  ;
 14328                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 14329                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 14330                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 14331                                  ; around. This will allow us to access the same file through multiple network
 14332                                  ; connections and NOT prematurely terminate when the ref count on one
 14333                                  ; connection goes to zero.
 14334                                  
 14335                                  OpenFound:
 14336                                  	;mov	[si+18h],al
 14337 00001EA9 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 14338 00001EAC 26FF05                  	inc	word [es:di]
 14339                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14340                                  					; remember this new invocation
 14341                                  	; 24/01/2024
 14342 00001EAF 16                      	push	ss
 14343 00001EB0 1F                      	pop	ds
 14344                                  	
 14345                                  	;MOV	AX,[SS:FCBLRU]		; update LRU counts
 14346 00001EB1 A1[1000]                	mov	ax,[FCBLRU] ; 24/01/2024
 14347                                  	;mov	[es:di+15h],ax
 14348 00001EB4 26894515                	MOV	[ES:DI+sf_LRU],AX
 14349                                  ;
 14350                                  ; We have an FCB sft that is now of no use. We release sharing info and then
 14351                                  ; blast it to prevent other reuse.
 14352                                  ;
 14353                                  	;push	ss
 14354                                  	;pop	ds
 14355                                  
 14356 00001EB8 C43E[9E05]              	LES	DI,[THISSFT]
 14357 00001EBC 26FF0D                  	dec	word [es:di]
 14358                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14359                                  					; free the newly allocated SFT
 14360 00001EBF E80353                  	call	ShareEnd
 14361 00001EC2 B043                    	MOV	AL,'C'	 ; 43h
 14362 00001EC4 E845FC                  	call	BlastSFT
 14363 00001EC7 EBDD                    	JMP	short OpenDone
 14364                                  
 14365                                  ;BREAK	<$FCB_Create - create a new directory entry>
 14366                                  ;----------------------------------------------------------------------------
 14367                                  ;
 14368                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 14369                                  ;	FCB for us and asked to have the rest filled in.
 14370                                  ;
 14371                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14372                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14373                                  ;		FCB has the following fields filled in:
 14374                                  ;		    Time/Date Extent/NR Size
 14375                                  ;----------------------------------------------------------------------------
 14376                                  
 14377                                  _$FCB_CREATE:		; System call 22
 14378                                  
 14379                                  ;hkn; DOS_Create is in DOSCODE
 14380 00001EC9 B9[B729]                	MOV	CX,DOS_CREATE		; routine to call
 14381 00001ECC 31C0                    	XOR	AX,AX			; attributes to create
 14382 00001ECE E84EFD                  	call	GetExtended		; get extended FCB
 14383 00001ED1 7403                    	JZ	short DoAccessJ		; not an extended FCB
 14384 00001ED3 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 14385                                  DoAccessJ:
 14386 00001ED6 E917FF                  	JMP	DoAccess		; do dirty work
 14387                                  
 14388                                  ;============================================================================
 14389                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 14390                                  ;============================================================================
 14391                                  ; 22/07/2018 - Retro DOS v3.0
 14392                                  ; 17/05/2019 - Retro DOS v4.0
 14393                                  
 14394                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 14395                                  
 14396                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14397                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 14398                                  
 14399                                  ;**	Search.asm
 14400                                  ;----------------------------------------------------------------------------
 14401                                  ;	Directory search system calls.
 14402                                  ;	These will be passed direct text of the pathname from the user. 
 14403                                  ;	They will need to be passed through the macro expander prior to
 14404                                  ;	being sent through the low-level stuff. 
 14405                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 14406                                  ;
 14407                                  ;	$Dir_Search_First	  written
 14408                                  ;	$Dir_Search_Next	  written
 14409                                  ;	$Find_First	  written
 14410                                  ;	$Find_Next		  written
 14411                                  ;	PackName		  written
 14412                                  ;
 14413                                  ;	Modification history:
 14414                                  ;
 14415                                  ;	  Created: ARR 4 April 1983
 14416                                  
 14417                                  ;----------------------------------------------------------------------------
 14418                                  ; Procedure Name : $DIR_SEARCH_FIRST
 14419                                  ;
 14420                                  ; Inputs:
 14421                                  ;	DS:DX Points to unopenned FCB
 14422                                  ; Function:
 14423                                  ;	Directory is searched for first matching entry and the directory
 14424                                  ;	entry is loaded at the disk transfer address
 14425                                  ; Returns:
 14426                                  ;	AL = -1 if no entries matched, otherwise 0
 14427                                  ;----------------------------------------------------------------------------
 14428                                  
 14429                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 14430                                  
 14431                                  	; 24/01/2024
 14432                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DCBh
 14433                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DDFh
 14434                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:647Bh
 14435                                  
 14436                                  _$DIR_SEARCH_FIRST:
 14437 00001ED9 368916[A605]            	MOV	[SS:THISFCB],DX
 14438 00001EDE 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14439 00001EE3 89D6                    	MOV	SI,DX
 14440 00001EE5 803CFF                  	CMP	BYTE [SI],0FFH
 14441 00001EE8 7503                    	JNZ	short NORMFCB4
 14442 00001EEA 83C607                  	ADD	SI,7			; Point to drive select byte
 14443                                  NORMFCB4:
 14444 00001EED FF34                    	push	word [SI]		; Save original drive byte for later
 14445                                  
 14446 00001EEF 16                      	push	ss
 14447 00001EF0 07                      	pop	es			; get es to address DOSGroup
 14448                                  
 14449 00001EF1 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14450 00001EF4 E8A84A                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14451 00001EF7 7304                    	JNC	short SearchIt		; no error, go and look
 14452 00001EF9 5B                      	pop	bx			; Clean stack
 14453                                  
 14454                                  ; Error code is in AX
 14455                                  
 14456                                  	; 09/11/2022
 14457                                  dcf_errj:
 14458 00001EFA E957E7                  	jmp	FCB_RET_ERR		; error
 14459                                  
 14460                                  SearchIt:
 14461 00001EFD 16                      	push	ss
 14462 00001EFE 1F                      	pop	ds			; get ready for search
 14463                                  	;push	word [DMAADD]
 14464                                  	;push	word [DMAADD+2]
 14465                                  	; 24/01/2024
 14466 00001EFF C43E[2C03]              	les	di,[DMAADD]
 14467 00001F03 57                      	push	di
 14468 00001F04 06                      	push	es
 14469 00001F05 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14470 00001F0B 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14471                                  	; MSDOS 3.3
 14472                                  	;call	DOS_SEARCH_FIRST
 14473                                  	; MSDOS 6.0
 14474 00001F0F E8930D                  	call	GET_FAST_SEARCH		; search
 14475 00001F12 8F06[2E03]              	pop	word [DMAADD+2]
 14476 00001F16 8F06[2C03]              	pop	word [DMAADD]
 14477 00001F1A 735C                    	JNC	short SearchSet		; no error, transfer info
 14478 00001F1C 5B                      	pop	bx			; Clean stack
 14479                                  
 14480                                  ; Error code is in AX
 14481                                  
 14482                                  	; 09/11/2022
 14483                                  	;jmp	FCB_RET_ERR
 14484 00001F1D EBDB                    	jmp	short dcf_errj
 14485                                  
 14486                                  ;----------------------------------------------------------------------------
 14487                                  ;
 14488                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14489                                  ;
 14490                                  ; Inputs:
 14491                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14492                                  ; Function:
 14493                                  ;	Directory is searched for the next matching entry and the directory
 14494                                  ;	entry is loaded at the disk transfer address
 14495                                  ; Returns:
 14496                                  ;	AL = -1 if no entries matched, otherwise 0
 14497                                  ;----------------------------------------------------------------------------
 14498                                  
 14499                                  	; 24/01/2024
 14500                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5E5Fh
 14501                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5E73h
 14502                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6517h
 14503                                  
 14504                                  _$DIR_SEARCH_NEXT:
 14505 00001F1F 368916[A605]            	MOV	[SS:THISFCB],DX
 14506 00001F24 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14507 00001F29 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14508 00001F2F 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14509                                  
 14510 00001F35 16                      	push	ss
 14511 00001F36 07                      	pop	es
 14512                                  
 14513 00001F37 BF[BE04]                	MOV	DI,SEARCHBUF
 14514                                  
 14515 00001F3A 89D6                    	MOV	SI,DX
 14516 00001F3C 803CFF                  	CMP	BYTE [SI],0FFh
 14517 00001F3F 750D                    	JNZ	short NORMFCB6
 14518 00001F41 83C606                  	ADD	SI,6
 14519 00001F44 AC                      	LODSB
 14520                                  
 14521 00001F45 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14522 00001F49 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14523                                  NORMFCB6:
 14524 00001F4E AC                      	LODSB				; Get original user drive byte
 14525 00001F4F 50                      	push	ax			; Put it on stack
 14526 00001F50 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14527 00001F53 AA                      	STOSB				; Put in correct place
 14528 00001F54 B90A00                  	MOV	CX,20/2
 14529 00001F57 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14530                                  
 14531 00001F59 16                      	push	ss
 14532 00001F5A 1F                      	pop	ds
 14533                                  
 14534                                  	;push	word [DMAADD]
 14535                                  	;push	word [DMAADD+2]
 14536                                  	; 24/01/2024
 14537 00001F5B C43E[2C03]              	les	di,[DMAADD]
 14538 00001F5F 57                      	push	di
 14539 00001F60 06                      	push	es
 14540 00001F61 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14541 00001F67 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14542 00001F6B E8320E                  	call	DOS_SEARCH_NEXT 	; Find it
 14543 00001F6E 8F06[2E03]              	pop	word [DMAADD+2]
 14544 00001F72 8F06[2C03]              	pop	word [DMAADD]
 14545 00001F76 724A                    	JC	short SearchNoMore
 14546                                  	; 24/01/2024
 14547                                  	;JMP	SearchSet		; Ok set return
 14548                                  
 14549                                  ;;;	; 24/01/2024
 14550                                  
 14551                                  ; The search was successful (or the search-next). We store the information
 14552                                  ; into the user's FCB for continuation.
 14553                                  
 14554                                  SearchSet:
 14555 00001F78 BE[BE04]                	MOV	SI,SEARCHBUF
 14556 00001F7B C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14557 00001F7F F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14558 00001F84 7403                    	JZ	short NORMFCB1
 14559 00001F86 83C707                  	ADD	DI,7			; Point past the extension
 14560                                  NORMFCB1:
 14561 00001F89 5B                      	pop	bx			; Get original drive byte
 14562 00001F8A 08DB                    	OR	BL,BL
 14563 00001F8C 7506                    	JNZ	short SearchDrv
 14564 00001F8E 8A1E[3603]              	MOV	BL,[CURDRV]
 14565 00001F92 FEC3                    	INC	BL
 14566                                  SearchDrv:
 14567 00001F94 AC                      	LODSB				; Get correct search contin drive byte
 14568 00001F95 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14569 00001F97 47                      	INC	DI
 14570                                  	;STOSB				; Store the correct "user" drive byte
 14571                                  					;  at the start of the search info
 14572 00001F98 B90A00                  	MOV	CX,20/2
 14573 00001F9B F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14574 00001F9D 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14575                                  					;   byte to AL
 14576 00001F9F AA                      	STOSB				; Search contin drive byte at end of
 14577                                  					;   contin info
 14578 00001FA0 C43E[2C03]              	LES	DI,[DMAADD]
 14579 00001FA4 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14580 00001FA9 740D                    	JZ	short NORMFCB2
 14581 00001FAB B0FF                    	MOV	AL,0FFh
 14582 00001FAD AA                      	STOSB
 14583 00001FAE FEC0                    	INC	AL
 14584                                  	;MOV	CX,5
 14585                                  	; 17/12/2022
 14586 00001FB0 B105                    	mov	cl,5
 14587 00001FB2 F3AA                    	REP	STOSB
 14588 00001FB4 A0[6D05]                	MOV	AL,[SATTRIB]
 14589 00001FB7 AA                      	STOSB
 14590                                  NORMFCB2:
 14591 00001FB8 88D8                    	MOV	AL,BL			; User Drive byte
 14592 00001FBA AA                      	STOSB
 14593                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14594                                  	; 17/12/2022
 14595 00001FBB B110                    	mov	cl,16
 14596 00001FBD F3A5                    	REP	MOVSW
 14597 00001FBF E98FE6                  	jmp	FCB_RET_OK
 14598                                  ;;;
 14599                                  
 14600                                  SearchNoMore:
 14601 00001FC2 C43E[A605]              	LES	DI,[THISFCB]
 14602 00001FC6 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14603 00001FCB 7403                    	JZ	short NORMFCB8
 14604 00001FCD 83C707                  	ADD	DI,7			; Point past the extension
 14605                                  NORMFCB8:
 14606 00001FD0 5B                      	pop	bx			; Get original drive byte
 14607 00001FD1 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14608                                  					;  at the right spot
 14609                                  ; error code is in AX
 14610                                  
 14611 00001FD4 E97DE6                  	jmp	FCB_RET_ERR
 14612                                  
 14613                                  ; 17/05/2019 - Retro DOS v4.0
 14614                                  
 14615                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14616                                  
 14617                                  ;---------------------------------------------------------------------------
 14618                                  ;
 14619                                  ;   Procedure Name : $FIND_FIRST
 14620                                  ; 
 14621                                  ;   Assembler usage:
 14622                                  ;	    MOV AH, FindFirst
 14623                                  ;	    LDS DX, name
 14624                                  ;	    MOV CX, attr
 14625                                  ;	    INT 21h
 14626                                  ;	; DMA address has datablock
 14627                                  ;
 14628                                  ;   Error Returns:
 14629                                  ;	    AX = error_path_not_found
 14630                                  ;	       = error_no_more_files
 14631                                  ;---------------------------------------------------------------------------
 14632                                  
 14633                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14634                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14635                                  
 14636                                  	; 24/01/2024
 14637                                  	; DOSCODE:5EE6h (MSDOS 6.22, MSDOS.SYS)
 14638                                  
 14639                                  _$FIND_FIRST:
 14640 00001FD7 89D6                    	MOV	SI,DX			; get name in appropriate place
 14641 00001FD9 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14642                                  
 14643 00001FDE BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14644                                  
 14645 00001FE1 E8214A                  	call	TransPathSet		; convert the path
 14646 00001FE4 7305                    	JNC	short Find_it 		; no error, go and look
 14647                                  FindError:
 14648                                  	;mov	al,3
 14649 00001FE6 B003                    	mov	al,error_path_not_found	; error and map into one.
 14650                                  	; 09/11/2022
 14651                                  FF_errj:
 14652 00001FE8 E953E6                  	jmp	SYS_RET_ERR
 14653                                  Find_it:
 14654 00001FEB 16                      	push	ss
 14655 00001FEC 1F                      	pop	ds
 14656                                  
 14657                                  	;push	word [DMAADD]
 14658                                  	;push	word [DMAADD+2]
 14659                                  	; 24/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14660 00001FED C43E[2C03]              	les	di,[DMAADD]
 14661 00001FF1 57                      	push	di
 14662 00001FF2 06                      	push	es
 14663 00001FF3 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14664 00001FF9 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14665                                  	; MSDOS 3.3
 14666                                  	;call	DOS_SEARCH_FIRST
 14667                                  	; MSDOS 6.0
 14668 00001FFD E8A50C                  	call	GET_FAST_SEARCH 	; search
 14669 00002000 8F06[2E03]              	pop	word [DMAADD+2]
 14670 00002004 8F06[2C03]              	pop	word [DMAADD]
 14671                                  	
 14672                                  	; 16/12/2022
 14673                                  	;JNC	short FindSet 		; no error, transfer info
 14674 00002008 72DE                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14675                                  	;
 14676                                  	;jmp	SYS_RET_ERR
 14677                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14678                                  ;FFF_errj:
 14679                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14680                                  
 14681                                  FindSet:
 14682 0000200A BE[BE04]                	MOV	SI,SEARCHBUF
 14683 0000200D C43E[2C03]              	LES	DI,[DMAADD]
 14684 00002011 B91500                  	MOV	CX,21
 14685 00002014 F3A4                    	REP	MOVSB
 14686 00002016 56                      	PUSH	SI			; Save pointer to start of entry
 14687                                  	;mov	al,[si+0Bh]
 14688 00002017 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14689 0000201A AA                      	STOSB
 14690                                  	;add	si,16h ; 22
 14691 0000201B 83C616                  	ADD	SI,dir_entry.dir_time
 14692 0000201E A5                      	MOVSW				; dir_time
 14693 0000201F A5                      	MOVSW				; dir_date
 14694 00002020 46                      	INC	SI
 14695 00002021 46                      	INC	SI			; Skip dir_first
 14696 00002022 A5                      	MOVSW				; dir_size (2 words)
 14697 00002023 A5                      	MOVSW
 14698 00002024 5E                      	POP	SI			; Point back to dir_name
 14699 00002025 E83300                   	CALL	PackName
 14700 00002028 E90AE6                  	jmp	SYS_RET_OK		; bye with no errors
 14701                                  
 14702                                  ;---------------------------------------------------------------------------
 14703                                  ;
 14704                                  ;   Procedure Name : $FIND_NEXT
 14705                                  ;
 14706                                  ;   Assembler usage:
 14707                                  ;	; dma points at area returned by find_first
 14708                                  ;	    MOV AH, findnext
 14709                                  ;	    INT 21h
 14710                                  ;	; next entry is at dma
 14711                                  ;
 14712                                  ;   Error Returns:
 14713                                  ;	    AX = error_no_more_files
 14714                                  ;---------------------------------------------------------------------------
 14715                                  
 14716                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14717                                  
 14718                                  	; 24/01/2024
 14719                                  	; DOSCODE:5F3Eh (MSDOS 6.22, MSDOS.SYS)
 14720                                  
 14721                                  _$FIND_NEXT:
 14722 0000202B 16                      	push	ss
 14723 0000202C 07                      	pop	es
 14724                                  
 14725 0000202D BF[BE04]                	MOV	DI,SEARCHBUF
 14726                                  
 14727 00002030 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14728                                  
 14729 00002035 B91500                  	MOV	CX,21
 14730 00002038 F3A4                    	REP	MOVSB			; Put the search continuation info
 14731                                  					;  in the right place
 14732 0000203A 16                      	push	ss
 14733 0000203B 1F                      	pop	ds			; get ready for search
 14734                                  	
 14735                                  	;push	word [DMAADD]
 14736                                  	;push	word [DMAADD+2]
 14737                                  	; 24/01/2024
 14738 0000203C C43E[2C03]              	les	di,[DMAADD]
 14739 00002040 57                      	push	di
 14740 00002041 06                      	push	es
 14741 00002042 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14742 00002048 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14743 0000204C E8510D                  	call	DOS_SEARCH_NEXT 	; Find it
 14744 0000204F 8F06[2E03]              	pop	word [DMAADD+2]
 14745 00002053 8F06[2C03]              	pop	word [DMAADD]
 14746 00002057 73B1                    	JNC	short FindSet 		; No error, set info
 14747                                  	;jmp	SYS_RET_ERR
 14748                                  	; 16/12/2022
 14749 00002059 EB8D                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14750                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14751                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14752                                  
 14753                                  ;---------------------------------------------------------------------------
 14754                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14755                                  ;
 14756                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14757                                  ;	the ASCIZ format.
 14758                                  ;
 14759                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14760                                  ;		(ES:DI) = destination area (13 bytes)
 14761                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14762                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14763                                  ;---------------------------------------------------------------------------
 14764                                  
 14765                                  	; 25/01/2024 - Retro DOS v4.1
 14766                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5F5Ch
 14767                                  
 14768                                  PackName:
 14769                                  ;	Move over 8 characters to cover the name component, then trim it's
 14770                                  ;	trailing blanks.
 14771                                  
 14772                                  	;MOV	CX,8			; Pack the name
 14773                                  	;REP	MOVSB			; Move all of it
 14774                                  	; 25/01/2024
 14775 0000205B B90400                  	mov	cx,4
 14776 0000205E F3A5                    	rep	movsw
 14777                                  main_kill_tail:
 14778 00002060 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14779 00002065 7507                    	JNZ	short find_check_dot
 14780 00002067 4F                      	DEC	DI			; Back up over trailing space
 14781 00002068 41                      	INC	CX
 14782 00002069 83F908                  	CMP	CX,8
 14783 0000206C 72F2                    	JB	short main_kill_tail
 14784                                  find_check_dot:
 14785                                  	;CMP	WORD [SI],(" " << 8) | " "
 14786 0000206E 813C2020                	cmp     word [si],2020h 
 14787 00002072 7506                    	JNZ	short got_ext 		; Some chars in extension
 14788 00002074 807C0220                	CMP	BYTE [SI+2]," "
 14789 00002078 740F                    	JZ	short find_done		; No extension
 14790                                  got_ext:
 14791 0000207A B02E                    	MOV	AL,"."	; 2Eh
 14792 0000207C AA                      	STOSB
 14793                                  	;MOV	CX,3
 14794                                  	;; 18/12/2022
 14795                                  	;;mov	cl,3
 14796                                  	;;REP	MOVSB
 14797                                  	;movsb
 14798                                  	;movsb
 14799                                  	;movsb
 14800                                  	; 25/01/2024
 14801 0000207D A5                      	movsw
 14802 0000207E A4                      	movsb
 14803                                  ext_kill_tail:
 14804 0000207F 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14805 00002084 7503                    	JNZ	short find_done
 14806 00002086 4F                      	DEC	DI			; Back up over trailing space
 14807 00002087 EBF6                    	JMP	short ext_kill_tail
 14808                                  find_done:
 14809 00002089 31C0                    	XOR	AX,AX
 14810 0000208B AA                      	STOSB				; NUL terminate
 14811 0000208C C3                      	retn
 14812                                  
 14813                                  ;---------------------------------------------------------------------------
 14814                                  
 14815                                  ; 24/01/2024
 14816                                  %if 0
 14817                                  	; 17/05/2019 - Retro DOS v4.0
 14818                                  GET_FAST_SEARCH:
 14819                                  	; 22/07/2018
 14820                                  	; MSDOS 6.0
 14821                                  	; 17/12/2022
 14822                                  	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14823                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14824                                  					;FO.trigger fastopen ;AN000;
 14825                                  	;call	DOS_SEARCH_FIRST
 14826                                  	;retn
 14827                                  	; 17/12/2022
 14828                                  	jmp	DOS_SEARCH_FIRST
 14829                                  %endif
 14830                                  
 14831                                  ;============================================================================
 14832                                  ; PATH.ASM, MSDOS 6.0, 1991
 14833                                  ;============================================================================
 14834                                  ; 06/08/2018 - Retro DOS v3.0
 14835                                  ; 17/05/2019 - Retro DOS v4.0
 14836                                  
 14837                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14838                                  
 14839                                  ;**	Directory related system calls. These will be passed direct text of the
 14840                                  ;	pathname from the user. They will need to be passed through the macro
 14841                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14842                                  ;	defined in DISPATCH. The system calls are:
 14843                                  ;
 14844                                  ;	$CURRENT_DIR  Written
 14845                                  ;	$RMDIR	  Written
 14846                                  ;	$CHDIR	  Written
 14847                                  ;	$MKDIR	  Written
 14848                                  ;
 14849                                  ;
 14850                                  ;	Modification history:
 14851                                  ;
 14852                                  ;	    Created: ARR 4 April 1983
 14853                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14854                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14855                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14856                                  ;				    current directory.
 14857                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14858                                  
 14859                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14860                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14861                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14862                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14863                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14864                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14865                                  ;	I_Need	cMeta,BYTE
 14866                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14867                                  
 14868                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14869                                  ;----------------------------------------------------------------------------
 14870                                  ;
 14871                                  ;   Procedure Name : $CURRENT_DIR
 14872                                  ;
 14873                                  ;   Assembler usage:
 14874                                  ;		LDS	SI,area
 14875                                  ;		MOV	DL,drive
 14876                                  ;		INT	21h
 14877                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14878                                  ;	    ; current directory.
 14879                                  ;   Error returns:
 14880                                  ;	    AX = error_invalid_drive
 14881                                  ;
 14882                                  ;----------------------------------------------------------------------------
 14883                                  
 14884                                  	; 06/08/2018 - Retro DOS v3.0
 14885                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14886                                  
 14887                                  	; 25/01/2024 - Retro DOS v4.1
 14888                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5F9Ch
 14889                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5FB0h
 14890                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6664h
 14891                                  
 14892                                  _$CURRENT_DIR:
 14893 0000208D E857F2                  	call	ECritDisk
 14894 00002090 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14895 00002092 E87948                  	call	GetVisDrv		; grab it
 14896 00002095 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14897                                  CurdirErr:
 14898 00002097 E868F2                  	call	LCritDisk
 14899                                  
 14900                                  	; MSDOS 3.3
 14901                                  	;mov	al,0Fh
 14902                                  	
 14903                                  	; MSDOS 6.0
 14904 0000209A 1E                      	push	ds
 14905 0000209B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14906 000020A0 A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14907 000020A3 1F                      	pop	ds
 14908                                  
 14909                                  curdir_errj:
 14910 000020A4 E997E5                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14911                                  
 14912                                  CurrentValidate:
 14913 000020A7 1E                      	push	ds			; save destination
 14914 000020A8 56                      	push	si
 14915                                  	
 14916                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14917                                  	
 14918                                  	; MSDOS 6.0
 14919 000020A9 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14920                                  	; 25/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14921 000020AE C606[4C03]00            	mov	byte [NoSetDir],0 ; *
 14922                                  	
 14923                                  	; 25/01/2024
 14924                                  	;lds     si,[THISCDS]
 14925                                  
 14926                                  ; 16/12/2022
 14927                                  %if 0
 14928                                  	; 09/11/2022 (following test instruction is nonsense!)
 14929                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14930                                  
 14931                                  	;test	word [si+43h],8000h
 14932                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14933                                  	;jnz	short $+2  ; 09/11/2022	
 14934                                  	jnz	short DoCheck
 14935                                  %endif
 14936                                  
 14937                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14938                                  ; media check.
 14939                                  ;	CMP	word [SI+curdir.ID],0
 14940                                  ;	JZ	short GetDst
 14941                                  DoCheck:
 14942                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14943                                  
 14944                                  	; 25/01/2024
 14945                                  	; MSDOS 6.0
 14946                                  	;push	ds
 14947                                  	;mov	ds,[cs:DosDSeg]
 14948                                  	;mov	byte [NoSetDir],0 ; *
 14949                                  	;pop	ds
 14950                                  
 14951 000020B3 BF[BE03]                	MOV	DI,OPENBUF
 14952 000020B6 E88520                  	call	ValidateCDS		; output is ES:DI -> CDS
 14953                                  
 14954 000020B9 06                      	push	es	 		; swap source and destination
 14955 000020BA 57                      	push	di
 14956 000020BB 5E                      	pop	si
 14957 000020BC 1F                      	pop	ds
 14958                                  GetDst:
 14959 000020BD 5F                      	pop	di
 14960 000020BE 07                      	pop	es			; get real destination
 14961 000020BF 72D6                    	JC	short CurdirErr
 14962                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14963                                  	;
 14964                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14965                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14966                                  	; 16/12/2022
 14967                                  	;add	si,0  ; add si,curdir.text
 14968                                  	;
 14969                                  	;add	si,[si+4Fh] ; 17/05/2019
 14970 000020C1 03744F                  	ADD	SI,[SI+curdir.end]
 14971 000020C4 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14972 000020C7 7501                    	JNZ	short CurrentCopy
 14973 000020C9 46                      	INC	SI
 14974                                  CurrentCopy:
 14975                                  ;	call	FStrCpy
 14976                                  ;; 10/29/86 E5 char
 14977 000020CA 50                      	PUSH	AX
 14978 000020CB AC                      	LODSB				; get char
 14979 000020CC 08C0                    	OR	AL,AL
 14980 000020CE 7413                    	JZ	short FOK
 14981 000020D0 3C05                    	CMP	AL,05H
 14982 000020D2 740D                    	JZ	short FCHANGE
 14983 000020D4 EB01                    	JMP	short FFF
 14984                                  FCPYNEXT:
 14985 000020D6 AC                      	LODSB				; get char
 14986                                  FFF:
 14987 000020D7 3C5C                    	CMP	AL,'\'			; beginning of directory
 14988 000020D9 7508                    	JNZ	short FOK		; no
 14989 000020DB AA                      	STOSB				; put into user's buffer
 14990 000020DC AC                      	LODSB				; 1st char of dir is 05?
 14991 000020DD 3C05                    	CMP	AL,05H
 14992 000020DF 7502                    	JNZ	short FOK		; no
 14993                                  FCHANGE:
 14994 000020E1 B0E5                    	MOV	AL,0E5H			; make it E5
 14995                                  FOK:
 14996 000020E3 AA                      	STOSB				; put into user's buffer
 14997 000020E4 08C0                    	OR	AL,AL			; final char
 14998 000020E6 75EE                    	JNZ	short FCPYNEXT		; no
 14999 000020E8 58                      	POP	AX
 15000                                  
 15001                                  ;; 10/29/86 E5 char
 15002 000020E9 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 15003 000020EB E814F2                  	call	LCritDisk
 15004 000020EE E944E5                  	jmp	SYS_RET_OK		; no more, bye!
 15005                                  
 15006                                  ; 17/05/2019 - Retro DOS v4.0
 15007                                  
 15008                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 15009                                  
 15010                                  ;BREAK <$RmDir -- Remove a directory>
 15011                                  ;----------------------------------------------------------------------------
 15012                                  ;
 15013                                  ; Procedure Name : $RmDir
 15014                                  ;
 15015                                  ; Inputs:
 15016                                  ;	DS:DX Points to asciz name
 15017                                  ; Function:
 15018                                  ;	Delete directory if empty
 15019                                  ; Returns:
 15020                                  ;	STD XENIX Return
 15021                                  ;	AX = error_path_not_found If path bad
 15022                                  ;	AX = error_access_denied If
 15023                                  ;		Directory not empty
 15024                                  ;		Path not directory
 15025                                  ;		Root directory specified
 15026                                  ;		Directory malformed (. and .. not first two entries)
 15027                                  ;		User tries to delete a current directory
 15028                                  ;	AX = error_current_directory
 15029                                  ;
 15030                                  ;----------------------------------------------------------------------------
 15031                                  
 15032                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15033                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 15034                                  
 15035                                  _$RMDIR:
 15036 000020F1 52                      	push	dx			; Save ptr to name
 15037 000020F2 1E                      	push	ds
 15038 000020F3 89D6                    	mov	si,dx			; Load ptr into si
 15039 000020F5 BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 15040 000020F8 57                      	push	di
 15041 000020F9 E81149                  	call	TransPathNoSet		; Translate the name
 15042 000020FC 5F                      	pop	di			; di = ptr to buf for trans name
 15043 000020FD 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 15044 000020FF 1F                      	pop	ds
 15045 00002100 5A                      	pop	dx			; Restore the name
 15046                                  	;mov	al,3
 15047 00002101 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 15048                                  	; 16/12/2022
 15049                                  rmdir_errj: ; 10/08/2018
 15050                                  chdir_errj:
 15051 00002103 EB9F                    	jmp	short curdir_errj
 15052                                  	;jmp	SYS_RET_ERR
 15053                                  rmlset:
 15054 00002105 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 15055 0000210B 7512                    	Jnz	short rmerr		;	return (-1);
 15056 0000210D 16                      	push	ss
 15057 0000210E 07                      	pop	es
 15058 0000210F 30C0                    	xor	al,al			; al = 0 , ie drive a:
 15059                                  rmloop: 
 15060 00002111 E86B48                  	call	GetCDSFromDrv		; Get curdir for drive in al
 15061 00002114 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 15062 00002116 E87BF0                  	call	StrCmp			; Are the 2 paths the same?
 15063 00002119 7404                    	jz	short rmerr		; Yes, report error.
 15064 0000211B FEC0                    	inc	al			; No, inc al to next drive number
 15065 0000211D EBF2                    	jmp	short rmloop		; Go check next drive.
 15066                                  rmerr:
 15067 0000211F 1F                      	pop	ds
 15068 00002120 5A                      	pop	dx			; Restore the name
 15069                                  	;mov	al,10h
 15070 00002121 B010                    	mov	al,error_current_directory ; error
 15071                                  	; 16/12/2022
 15072                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15073                                  ;chdir_errj:
 15074 00002123 EBDE                    	jmp	short rmdir_errj
 15075                                  rmcont:
 15076 00002125 1F                      	pop	ds
 15077 00002126 5A                      	pop	dx			; Restore the name
 15078 00002127 BE[4D31]                	MOV	SI,DOS_RMDIR
 15079 0000212A EB7C                    	JMP	DoDirCall
 15080                                  
 15081                                  ; 17/05/2019 - Retro DOS v4.0
 15082                                  
 15083                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 15084                                  
 15085                                  ;BREAK <$ChDir -- Change current directory on a drive>
 15086                                  ;----------------------------------------------------------------------------
 15087                                  ;
 15088                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 15089                                  ; for setting up the CDS for the specified drive appropriately.  There are
 15090                                  ; several cases to consider:
 15091                                  ;
 15092                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 15093                                  ;	it into a WFP.	We verify the existance of this directory and then
 15094                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 15095                                  ;	directory cluster.
 15096                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 15097                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 15098                                  ;	WFP back into the CDS.
 15099                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 15100                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 15101                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 15102                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 15103                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 15104                                  ;	to process the path but to return the logical CDS and the logical
 15105                                  ;	path.  We then copy the logical path into the logical CDS.
 15106                                  ;
 15107                                  ; Inputs:
 15108                                  ;	DS:DX Points to asciz name
 15109                                  ; Returns:
 15110                                  ;	STD XENIX Return
 15111                                  ;	AX = chdir_path_not_found if error
 15112                                  ;
 15113                                  ;----------------------------------------------------------------------------
 15114                                  
 15115                                  _$CHDIR:
 15116 0000212C BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15117 0000212F 89D6                    	MOV	SI,DX			; get source
 15118 00002131 E8CD48                  	call	TransPath		; go munge the path and get real CDS
 15119 00002134 7304                    	JNC	short ChDirCrack	; no errors, try path
 15120                                  ChDirErrP:
 15121                                  	;mov	al,3
 15122 00002136 B003                    	MOV	AL,error_path_not_found
 15123                                  ChDirErr:
 15124                                  	;jmp	SYS_RET_ERR 	; oops!
 15125                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15126 00002138 EBC9                    	jmp	short chdir_errj
 15127                                  
 15128                                  ChDirCrack:
 15129 0000213A 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 15130 0000213F 75F5                    	JNZ	short ChDirErrP
 15131                                  
 15132                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 15133                                  ; found.
 15134                                  
 15135 00002141 C43E[A205]              	LES	DI,[THISCDS]
 15136 00002145 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 15137 00002148 74EC                    	JZ	short ChDirErrP		;	error ();
 15138                                  
 15139                                  ; Find out if the directory exists.
 15140                                  
 15141 0000214A E8BE0F                  	call	DOS_CHDIR
 15142                                  	;Jc	short ChDirErr
 15143                                  	; 16/12/2022
 15144 0000214D 72B4                    	jc	short chdir_errj
 15145                                  ;
 15146                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 15147                                  ; not network). If one was seen, all we need to do is copy in the text
 15148                                  ;
 15149 0000214F C43E[A205]              	LES	DI,[THISCDS]
 15150                                  	;test	word [es:di+43h],2000h
 15151                                  	; 17/12/2022
 15152 00002153 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15153                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 15154 00002158 7425                    	JZ	short GotCDS
 15155                                  
 15156                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 15157                                  
 15158 0000215A 06                      	push	es	
 15159 0000215B 57                      	push	di
 15160 0000215C 51                      	push	cx			; save CDS and cluster...
 15161 0000215D E825E3                  	call	Get_User_Stack		; get original text
 15162                                  	
 15163                                  	;mov	di,[si+6]
 15164 00002160 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 15165                                  	;mov	ds,[si+0Eh]
 15166 00002163 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 15167                                  	
 15168 00002166 BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 15169 00002169 87F7                    	XCHG	SI,DI
 15170 0000216B 30C0                    	XOR	AL,AL			; do no splicing
 15171 0000216D 57                      	push	di
 15172 0000216E E89C48                  	call	TransPathNoSet		; Munge path
 15173 00002171 5E                      	pop	si
 15174                                  
 15175                                  ; There should NEVER be an error here.
 15176                                  
 15177                                  ;IF FALSE
 15178                                  ;	JNC SKipErr
 15179                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 15180                                  ;SkipErr:
 15181                                  ;ENDIF
 15182 00002172 C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 15183                                  	;mov	word [es:di+49h],-1
 15184 00002176 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 15185                                  					; no valid cluster here...
 15186 0000217C 59                      	pop	cx
 15187 0000217D 5F                      	pop	di
 15188 0000217E 07                      	pop	es
 15189                                  
 15190                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 15191                                  
 15192                                  GotCDS:
 15193                                  
 15194                                  ; wfp_start points to the text. See if it is long enough
 15195                                  
 15196                                  	; MSDOS 3.3
 15197                                  	;push	ss
 15198                                  	;pop	ds
 15199                                  	;mov	si,[WFP_START]
 15200                                  	;push	cx
 15201                                  	;call	DStrLen
 15202                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 15203                                  	;pop	cx
 15204                                  	;ja	short ChDirErrP
 15205                                  
 15206                                  	; MSDOS 6.0
 15207 0000217F E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 15208 00002182 77B2                    	JA	short ChDirErrP
 15209                                  	; MSDOS 3.3 & MSDOS 6.0
 15210                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 15211                                  	; 17/12/2022
 15212 00002184 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 15213 00002189 7512                    	JNZ	short SkipRecency
 15214                                  	; MSDOS 6.0
 15215                                  	;test	word [es:di+43h],2000h
 15216                                  	; 17/12/2022
 15217 0000218B 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15218                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 15219                                  					;PTM. for Join and Subst ;AN000;
 15220 00002190 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 15221 00002192 B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 15222                                  setdirclus:
 15223                                  	;mov	[es:di+49h],cx
 15224 00002195 26894D49                	MOV	[ES:DI+curdir.ID],CX
 15225 00002199 C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 15226                                  SkipRecency:
 15227 0000219D E825F0                  	call	FStrCpy
 15228 000021A0 30C0                    	XOR	AL,AL
 15229                                  mkdir_ok:
 15230 000021A2 E990E4                  	jmp	SYS_RET_OK
 15231                                  
 15232                                  ; 17/05/2019 - Retro DOS v4.0
 15233                                  
 15234                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 15235                                  
 15236                                  ;BREAK <$MkDir - Make a directory entry>
 15237                                  ;---------------------------------------------------------------------------
 15238                                  ;
 15239                                  ; Procedure Name : $MkDir
 15240                                  ; Inputs:
 15241                                  ;	DS:DX Points to asciz name
 15242                                  ; Function:
 15243                                  ;	Make a new directory
 15244                                  ; Returns:
 15245                                  ;	STD XENIX Return
 15246                                  ;	AX = mkdir_path_not_found if path bad
 15247                                  ;	AX = mkdir_access_denied  If
 15248                                  ;		Directory cannot be created
 15249                                  ;		Node already exists
 15250                                  ;		Device name given
 15251                                  ;		Disk or directory(root) full
 15252                                  ;---------------------------------------------------------------------------
 15253                                  
 15254                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15255                                  
 15256                                  _$MKDIR:
 15257 000021A5 BE[1E30]                	MOV	SI,DOS_MKDIR
 15258                                  DoDirCall:
 15259 000021A8 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15260                                  
 15261 000021AB 56                      	push	si
 15262 000021AC 89D6                    	MOV	SI,DX			; get source
 15263 000021AE E85048                  	call	TransPath		; go munge the path
 15264 000021B1 5E                      	pop	si
 15265 000021B2 7305                    	JNC	short MkDirCrack	; no errors, try path
 15266                                  MkErrP:
 15267 000021B4 B003                    	MOV	AL,error_path_not_found	; oops!
 15268                                  MkErr:
 15269 000021B6 E985E4                  	jmp	SYS_RET_ERR
 15270                                  MkDirCrack:
 15271 000021B9 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 15272 000021BF 75F3                    	JNZ	short MkErrP
 15273                                  
 15274                                  	; MSDOS 3.3
 15275                                  	;push	ss
 15276                                  	;pop	ds
 15277                                  	;call	si
 15278                                  	;jb	short MkErr
 15279                                  	;;jmp	short mkdir_ok
 15280                                  	;jmp	SYS_RET_OK
 15281                                  
 15282                                  	; MSDOS 6.0
 15283 000021C1 56                      	PUSH	SI			;PTM.			;AN000;
 15284 000021C2 E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 15285 000021C5 5E                      	POP	SI			;PTM.			;AN000;
 15286 000021C6 7604                    	JBE	short pathok		;PTM.			;AN000;
 15287                                  	;mov	al,5
 15288 000021C8 B005                    	MOV	AL,error_access_denied	;PTM. ops!
 15289                                  	;jmp	SYS_RET_ERR		;PTM.
 15290 000021CA EBEA                    	jmp	short MkErr
 15291                                  pathok:
 15292 000021CC FFD6                    	CALL	SI			; go get file
 15293 000021CE 72E6                    	JC	short MkErr		; no errors
 15294                                  	; 16/12/2022
 15295                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15296 000021D0 EBD0                    	jmp	short mkdir_ok
 15297                                  	;jmp	SYS_RET_OK
 15298                                  
 15299                                  ;----------------------------------------------------------------------------
 15300                                  ;
 15301                                  ; Procedure Name : Check_PathLen
 15302                                  ;
 15303                                  ; Inputs:
 15304                                  ;	nothing
 15305                                  ; Function:
 15306                                  ;	check if final path length greater than 67
 15307                                  ; Returns:
 15308                                  ;	Above flag set if > 67
 15309                                  ;
 15310                                  ;---------------------------------------------------------------------------
 15311                                  
 15312                                  Check_PathLen:
 15313                                  	; 09/09/2018
 15314                                  	;mov	SI,[WFP_START]
 15315 000021D2 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 15316                                  Check_PathLen2:
 15317 000021D7 16                      	push	ss
 15318 000021D8 1F                      	pop	ds
 15319                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 15320 000021D9 51                      	push	CX	
 15321 000021DA E8FFEF                  	CALL	DStrLen
 15322 000021DD 83F943                  	CMP	CX,DIRSTRLEN ; 67
 15323 000021E0 59                      	POP	CX
 15324 000021E1 C3                      	retn
 15325                                  
 15326                                  ;============================================================================
 15327                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 15328                                  ;============================================================================
 15329                                  ; 07/08/2018 - Retro DOS v3.0
 15330                                  ; 17/05/2019 - Retro DOS v4.0
 15331                                  
 15332                                  ;**	IOCTL system call.
 15333                                  ;----------------------------------------------------------------------------
 15334                                  ;	$IOCTL
 15335                                  ;
 15336                                  ;	  Revision history:
 15337                                  ;
 15338                                  ;		Created: ARR 4 April 1983
 15339                                  ;
 15340                                  ;		GenericIOCTL added:		KGS	22 April 1985
 15341                                  ;
 15342                                  ;		A000	version 4.00	Jan. 1988
 15343                                  ;
 15344                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 15345                                  ;
 15346                                  
 15347                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 15348                                  ;---------------------------------------------------------------------------
 15349                                  ;
 15350                                  ;   Assembler usage:
 15351                                  ;	    MOV     BX, Handle
 15352                                  ;	    MOV     DX, Data
 15353                                  ;
 15354                                  ;	(or LDS     DX,BUF
 15355                                  ;	    MOV     CX,COUNT)
 15356                                  ;
 15357                                  ;	    MOV     AH, Ioctl
 15358                                  ;	    MOV     AL, Request
 15359                                  ;	    INT     21h
 15360                                  ;
 15361                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 15362                                  ;	    attribute word in DX, handle in BX:
 15363                                  ;	    DH = high word of device driver attributes
 15364                                  ;	    DL = low byte of sf_flags
 15365                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 15366                                  ;	    in BX.
 15367                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 15368                                  ;	    into DS:DX.  Return number read in AX.
 15369                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 15370                                  ;	    DS:DX.  Return bytes written in AX.
 15371                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 15372                                  ;	    into DS:DX.  Return number read in AX.
 15373                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 15374                                  ;	    DS:DX.  Return bytes written in AX.
 15375                                  ;	 6  Return input status of handle in BX. If a read will go to the
 15376                                  ;	    device, AL = 0FFh, otherwise 0.
 15377                                  ;	 7  Return output status of handle in BX. If a write will go to the
 15378                                  ;	    device, AL = 0FFh, otherwise 0.
 15379                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 15380                                  ;	    removable media, 0 otherwise.
 15381                                  ;	 9  Return the contents of the device attribute word in DX for the
 15382                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 15383                                  ;	    network. 8000h is the bit for local use.
 15384                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 15385                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 15386                                  ;	    the count and CX is the delay.
 15387                                  ;
 15388                                  ;   Error returns:
 15389                                  ;	    AX = error_invalid_handle
 15390                                  ;	       = error_invalid_function
 15391                                  ;	       = error_invalid_data
 15392                                  ;
 15393                                  ;-------------------------------------------------------------------------------
 15394                                  ;
 15395                                  ;   This is the documentation copied from DOS 4.0 it is much better
 15396                                  ;   than the above
 15397                                  ;
 15398                                  ;	There are several basic forms of IOCTL calls:
 15399                                  ;
 15400                                  ;
 15401                                  ;	** Get/Set device information:	**
 15402                                  ;
 15403                                  ;	ENTRY	(AL) = function code
 15404                                  ;		  0 - Get device information
 15405                                  ;		  1 - Set device information
 15406                                  ;		(BX) = file handle
 15407                                  ;		(DX) = info for "Set Device Information"
 15408                                  ;	EXIT	'C' set if error
 15409                                  ;		  (AX) = error code
 15410                                  ;		'C' clear if OK
 15411                                  ;		  (DX) = info for "Get Device Information"
 15412                                  ;	USES	ALL
 15413                                  ;
 15414                                  ;
 15415                                  ;	**  Read/Write Control Data From/To Handle  **
 15416                                  ;
 15417                                  ;	ENTRY	(AL) = function code
 15418                                  ;		  2 - Read device control info
 15419                                  ;		  3 - Write device control info
 15420                                  ;		(BX) = file handle
 15421                                  ;		(CX) = transfer count
 15422                                  ;		(DS:DX) = address for data
 15423                                  ;	EXIT	'C' set if error
 15424                                  ;		  (AX) = error code
 15425                                  ;		'C' clear if OK
 15426                                  ;		  (AX) = count of bytes transfered
 15427                                  ;	USES	ALL
 15428                                  ;
 15429                                  ;
 15430                                  ;	**  Read/Write Control Data From/To Block Device  **
 15431                                  ;
 15432                                  ;	ENTRY	(AL) = function code
 15433                                  ;		  4 - Read device control info
 15434                                  ;		  5 - Write device control info
 15435                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15436                                  ;		(CX) = transfer count
 15437                                  ;		(DS:DX) = address for data
 15438                                  ;	EXIT	'C' set if error
 15439                                  ;		  (AX) = error code
 15440                                  ;		'C' clear if OK
 15441                                  ;		  (AX) = count of bytes transfered
 15442                                  ;	USES	ALL
 15443                                  ;
 15444                                  ;
 15445                                  ;	**  Get Input/Output Status  **
 15446                                  ;
 15447                                  ;	ENTRY	(AL) = function code
 15448                                  ;		  6 - Get Input status
 15449                                  ;		  7 - Get Output Status
 15450                                  ;		(BX) = file handle
 15451                                  ;	EXIT	'C' set if error
 15452                                  ;		  (AX) = error code
 15453                                  ;		'C' clear if OK
 15454                                  ;		  (AL) = 00 if not ready
 15455                                  ;		  (AL) = FF if ready
 15456                                  ;	USES	ALL
 15457                                  ;
 15458                                  ;
 15459                                  ;	**  Get Drive Information  **
 15460                                  ;
 15461                                  ;	ENTRY	(AL) = function code
 15462                                  ;		  8 - Check for removable media
 15463                                  ;		  9 - Get device attributes
 15464                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15465                                  ;	EXIT	'C' set if error
 15466                                  ;		  (AX) = error code
 15467                                  ;		'C' clear if OK
 15468                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 15469                                  ;		  (DX) = device attribute word (func. 9)
 15470                                  ;	USES	ALL
 15471                                  ;
 15472                                  ;
 15473                                  ;	**  Get Redirected bit	**
 15474                                  ;
 15475                                  ;	ENTRY	(AL) = function code
 15476                                  ;		  0Ah - Network stuff
 15477                                  ;		(BX) = file handle
 15478                                  ;	EXIT	'C' set if error
 15479                                  ;		  (AX) = error code
 15480                                  ;		'C' clear if OK
 15481                                  ;		  (DX) = SFT flags word, 8000h set if network file
 15482                                  ;	USES	ALL
 15483                                  ;
 15484                                  ;
 15485                                  ;	**  Change sharer retry parameters  **
 15486                                  ;
 15487                                  ;	ENTRY	(AL) = function code
 15488                                  ;		  0Bh - Set retry parameters
 15489                                  ;		(CX) = retry loop count
 15490                                  ;		(DX) = number of retries
 15491                                  ;	EXIT	'C' set if error
 15492                                  ;		  (AX) = error code
 15493                                  ;		'C' clear if OK
 15494                                  ;	USES	ALL
 15495                                  ;
 15496                                  ;
 15497                                  ;   =================================================================
 15498                                  ;
 15499                                  ;	**  New Standard Control  **
 15500                                  ;
 15501                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15502                                  ;	FORMS ARE OBSOLETE.
 15503                                  ;
 15504                                  ;   =================================================================
 15505                                  ;
 15506                                  ;	ENTRY	(AL) = function code
 15507                                  ;		  0Ch - Control Function subcode
 15508                                  ;		(BX) = File Handle
 15509                                  ;		(CH) = Category Indicator
 15510                                  ;		(CL) = Function within category
 15511                                  ;		(DS:DX) = address for data, if any
 15512                                  ;		(SI) = Passed to device as argument, use depends upon function
 15513                                  ;		(DI) = Passed to device as argument, use depends upon function
 15514                                  ;	EXIT	'C' set if error
 15515                                  ;		  (AX) = error code
 15516                                  ;		'C' clear if OK
 15517                                  ;		  (SI) = Return value, meaning is function dependent
 15518                                  ;		  (DI) = Return value, meaning is function dependent
 15519                                  ;		  (DS:DX) = Return address, use is function dependent
 15520                                  ;	USES	ALL
 15521                                  ;
 15522                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15523                                  ;     (See inc\ioctl.inc for more info)
 15524                                  ;
 15525                                  ;	ENTRY	(AL) = function code
 15526                                  ;		  0Dh - Control Function subcode
 15527                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15528                                  ;		(CH) = Category Indicator
 15529                                  ;		(CL) = Function within category
 15530                                  ;		(DS:DX) = address for data, if any
 15531                                  ;		(SI) = Passed to device as argument, use depends upon function
 15532                                  ;		(DI) = Passed to device as argument, use depends upon function
 15533                                  ;
 15534                                  ;	EXIT	'C' set if error
 15535                                  ;		  (AX) = error code
 15536                                  ;		'C' clear if OK
 15537                                  ;		  (DS:DX) = Return address, use is function dependent
 15538                                  ;	USES	ALL
 15539                                  ;
 15540                                  ;---------------------------------------------------------------------------
 15541                                  	
 15542                                  	; 17/05/2019 - Retro DOS v4.0
 15543                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15544                                  
 15545                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15546                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15547                                  
 15548                                  IOCTLJMPTABLE:	;label	word
 15549                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15550 000021E2 [1E22]                  	dw	ioctl_getset_data	; 0
 15551 000021E4 [1E22]                  	dw	ioctl_getset_data   	; 1
 15552 000021E6 [6E22]                  	dw	ioctl_control_string	; 2
 15553 000021E8 [6E22]                  	dw	ioctl_control_string	; 3
 15554 000021EA [BC23]                  	dw	ioctl_get_dev		; 4
 15555 000021EC [BC23]                  	dw	ioctl_get_dev		; 5
 15556 000021EE [8822]                  	dw	ioctl_status		; 6
 15557 000021F0 [8822]                  	dw	ioctl_status		; 7
 15558 000021F2 [2923]                  	dw	ioctl_rem_media		; 8
 15559 000021F4 [6423]                  	dw	ioctl_drive_attr	; 9
 15560 000021F6 [AE23]                  	dw	ioctl_handle_redir	; A
 15561 000021F8 [A422]                  	dw	Set_Retry_Parameters	; B
 15562 000021FA [B222]                  	dw	GENERICIOCTLHANDLE	; C
 15563 000021FC [C922]                  	dw	GENERICIOCTL		; D
 15564                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15565 000021FE [5F24]                  	dw	ioctl_drive_owner	; E
 15566 00002200 [5F24]                  	dw	ioctl_drive_owner	; F
 15567                                  	; MSDOS 6.0
 15568 00002202 [B222]                  	dw	query_handle_support	; 10h
 15569 00002204 [C922]                  	dw	query_device_support	; 11h
 15570                                  
 15571                                  	; 11/11/2022
 15572                                  _$IOCTL:
 15573 00002206 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15574 00002208 16                      	push	ss
 15575 00002209 1F                      	pop	ds			;hkn; SS is DOSDATA
 15576                                  
 15577                                  	; MSDOS 3.3
 15578                                  	;cmp	al,0Fh 
 15579                                  	; MSDOS 6.0
 15580 0000220A 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15581 0000220C 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 15582                                  
 15583                                  	; 14/01/2024
 15584                                  	; 28/05/2019
 15585                                  	;push	AX	; 14/01/2024	; Need to save AL for generic IOCTL
 15586 0000220E 89C7                    	mov	di,ax			; di NOT a PARM
 15587 00002210 81E7FF00                	and	di,0FFh			; di = al
 15588 00002214 D1E7                    	shl	di,1			; di = index into jmp table
 15589                                  	;pop	AX			; Restore AL for generic IOCTL
 15590                                  
 15591 00002216 2EFFA5[E221]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15592                                  
 15593                                  ioctl_bad_funj2:
 15594 0000221B E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15595                                  
 15596                                  ;--------------------------------------------------------------------------
 15597                                  ;
 15598                                  ; IOCTL: AL = 0,1
 15599                                  ;
 15600                                  ; ENTRY: DS = DOSDATA
 15601                                  ;
 15602                                  ;--------------------------------------------------------------------------
 15603                                  
 15604                                  ioctl_getset_data:
 15605                                  	; MSDOS 6.0
 15606 0000221E E8F742                  	call	SFFromHandle		; ES:DI -> SFT
 15607 00002221 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15608                                  ioctl_bad_handle:
 15609                                  	;mov	al,6
 15610 00002223 B006                    	mov	al,error_invalid_handle
 15611                                  ioctl_error:
 15612 00002225 E916E4                  	jmp	SYS_RET_ERR
 15613                                  
 15614                                  ioctl_check_permissions:
 15615 00002228 3C00                    	CMP	AL,0
 15616                                  	;mov	al,[es:di+5]
 15617 0000222A 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15618 0000222E 741B                    	JZ	short ioctl_read	; read the byte
 15619                                  
 15620 00002230 08F6                    	or	dh,dh
 15621 00002232 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15622                                  	;mov	al,0Dh
 15623 00002234 B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15624                                  	;jmp	SYS_RET_ERR
 15625 00002236 EBED                    	jmp	short ioctl_error
 15626                                  
 15627                                  ioctl_check_device:
 15628 00002238 A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15629 0000223A 74DF                    	jz	short ioctl_bad_funj2
 15630 0000223C 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15631                                  					;   device bit!! He can muck with the
 15632                                  					;   others at will.
 15633 0000223F C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15634 00002244 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15635                                  ioctl_ok:
 15636 00002248 E9EAE3                  	jmp	SYS_RET_OK
 15637                                  
 15638                                  ioctl_read:
 15639 0000224B C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15640 00002250 30E4                    	XOR	AH,AH
 15641 00002252 A880                    	test	AL,devid_device 	; Should I set high byte
 15642 00002254 740D                    	JZ	short ioctl_no_high	; no
 15643 00002256 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15644                                  	;les	di,[es:di+7]
 15645 0000225B 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15646                                  	;mov	ah,[es:di+5]
 15647 0000225F 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15648                                  ioctl_no_high:
 15649 00002263 89C2                    	MOV	DX,AX
 15650                                  ioctl_set_dx:	; 16/12/2022
 15651 00002265 E81DE2                  	call	Get_User_Stack
 15652                                  	;mov	[si+6],dx
 15653 00002268 895406                  	MOV	[SI+user_env.user_DX],DX
 15654                                  	;;jmp	SYS_RET_OK
 15655                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15656                                  ioctl_ok_j:
 15657                                  	; 16/12/2022
 15658 0000226B E9CAE3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15659                                  	;jmp	short ioctl_ok
 15660                                  	; 26/07/2019
 15661                                  	;jmp	SYS_RET_OK_clc
 15662                                  
 15663                                  ;--------------------------------------------------------------------------
 15664                                  ;
 15665                                  ; IOCTL: AL = 2,3
 15666                                  ;
 15667                                  ; ENTRY: DS = DOSDATA
 15668                                  ;	 SI = user's DS
 15669                                  ;
 15670                                  ;--------------------------------------------------------------------------
 15671                                  
 15672                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15673                                  ioctl_control_string:
 15674 0000226E E8A742                  	call	SFFromHandle		; ES:DI -> SFT
 15675 00002271 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15676                                  	; 07/12/2022
 15677                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15678                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15679                                  	; MSDOS 5.0 & MSDOS 6.0
 15680 00002273 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15681 00002278 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15682 0000227A C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15683 0000227F 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15684 00002283 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15685 00002285 E93C01                  	JMP	ioctl_do_string
 15686                                  
 15687                                  ;--------------------------------------------------------------------------
 15688                                  ;
 15689                                  ; IOCTL: AL = 6,7
 15690                                  ;
 15691                                  ; ENTRY: DS = DOSDATA
 15692                                  ;
 15693                                  ;--------------------------------------------------------------------------
 15694                                  
 15695                                  ioctl_status:
 15696 00002288 B401                    	MOV	AH,1
 15697 0000228A 2C06                    	SUB	AL,6			; 6=0,7=1
 15698 0000228C 7402                    	JZ	short ioctl_get_status
 15699 0000228E B403                    	MOV	AH,3
 15700                                  ioctl_get_status:
 15701 00002290 50                      	PUSH	AX
 15702 00002291 E8E212                  	call	GET_IO_SFT
 15703 00002294 58                      	POP	AX
 15704                                  	;JNC	short DO_IOFUNC
 15705                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15706                                  	; 16/12/2022
 15707 00002295 728C                    	jc	short ioctl_bad_handle
 15708                                  DO_IOFUNC:
 15709 00002297 E8D720                  	call	IOFUNC
 15710 0000229A 88C4                    	MOV	AH,AL
 15711 0000229C B0FF                    	MOV	AL,0FFH
 15712                                  	;JNZ	short ioctl_status_ret
 15713                                  	; 29/01/2024
 15714 0000229E 75A8                    	jnz	short ioctl_ok
 15715 000022A0 FEC0                    	INC	AL
 15716                                  ioctl_status_ret:
 15717                                  	;jmp	SYS_RET_OK
 15718                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15719                                  	;jmp	short ioctl_ok_j
 15720                                  	; 16/12/2022
 15721 000022A2 EBA4                    	jmp	short ioctl_ok
 15722                                  
 15723                                  ;--------------------------------------------------------------------------
 15724                                  ;
 15725                                  ; IOCTL: AL = B
 15726                                  ;
 15727                                  ; ENTRY: DS = DOSDATA
 15728                                  ;
 15729                                  ;--------------------------------------------------------------------------
 15730                                  
 15731                                  Set_Retry_Parameters:
 15732                                  	; 09/09/2018
 15733 000022A4 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15734 000022A8 09D2                    	OR	DX,DX			; zero retries not allowed
 15735 000022AA 7475                    	JZ	short ioctl_bad_fun
 15736 000022AC 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15737                                  doneok:
 15738                                  	;jmp	SYS_RET_OK		; Done
 15739                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15740                                  	;jmp	short ioctl_status_ret
 15741                                  	; 16/12/2022
 15742 000022B0 EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15743                                  
 15744                                  ;--------------------------------------------------------------------------
 15745                                  ;
 15746                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15747                                  ;
 15748                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15749                                  ;	SI:DX -> Users Device Parameter Table
 15750                                  ;	IOCALL -> IOCTL_Req structure
 15751                                  ;
 15752                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15753                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15754                                  ;	call.
 15755                                  ;
 15756                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15757                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15758                                  ;         return address off the stack if the drive is invalid.
 15759                                  ;
 15760                                  ;--------------------------------------------------------------------------
 15761                                  
 15762                                  query_handle_support:	; Entry point for handles
 15763                                  GENERICIOCTLHANDLE:
 15764 000022B2 E86342                  	call	SFFromHandle		; Get SFT for device.
 15765 000022B5 726F                    	jc	short ioctl_bad_handlej
 15766                                  
 15767                                  	;test	word [es:di+5],8000h
 15768                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15769                                  	;test	byte [es:di+6],80h
 15770 000022B7 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15771 000022BC 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15772                                  
 15773 000022BE C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15774                                  	;les	di,[es:di+7]
 15775 000022C3 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15776 000022C7 EB0F                    	jmp	short Do_GenIOCTL
 15777                                  
 15778                                  query_device_support:	; Entry point for devices:
 15779                                  GENERICIOCTL:
 15780 000022C9 C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15781 000022CE 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15782 000022D1 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15783                                  
 15784 000022D3 E87A01                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15785 000022D6 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15786                                  
 15787                                  Do_GenIOCTL:
 15788                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15789                                  					; Can device handle Generic IOCTL funcs
 15790                                  	; 09/09/2018
 15791                                  	;test	byte [es:di+4],40h
 15792 000022D8 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15793 000022DD 7442                    	jz	short ioctl_bad_fun
 15794                                  
 15795                                  	; 17/05/2019 - Retro DOS v4.0
 15796                                  
 15797                                  	; MSDOS 6.0
 15798                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15799 000022DF C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15800                                  	;cmp	al,10h
 15801 000022E4 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15802 000022E6 7C0C                    	jl	short SetIOCtlBlock
 15803                                  	
 15804                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15805                                  	;test	byte [es:di+4],80h 
 15806 000022E8 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15807 000022ED 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15808                                  	;
 15809                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15810 000022EF C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15811                                  
 15812                                  SetIOCtlBlock:
 15813 000022F4 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15814 000022F5 57                      	PUSH	DI			; in DS:SI
 15815                                  					; Setup Generic IOCTL Request Block
 15816                                  	;mov	byte [IOCALL_REQLEN],23
 15817 000022F6 C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15818                                  	; 07/09/2018 (MSDOS 3.3)
 15819                                  	;;mov	byte [IOCALL_REQFUNC],19
 15820                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15821                                  	;
 15822 000022FB 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15823 000022FF 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15824 00002303 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15825 00002307 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15826 0000230B 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15827 0000230F 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15828 00002313 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15829                                  
 15830                                  ;hkn; IOCALL is in DOSDATA
 15831 00002317 BB[7C03]                	MOV	BX,IOCALL
 15832                                  
 15833 0000231A 16                      	PUSH	SS
 15834 0000231B 07                      	POP	ES
 15835                                  					; DS:SI -> Device header.
 15836 0000231C 5E                      	POP	SI
 15837 0000231D 1F                      	POP	DS
 15838                                  	; 10/08/2018
 15839 0000231E E9DC00                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15840                                  
 15841                                  ioctl_bad_fun:
 15842 00002321 B001                    	mov	al, error_invalid_function  ; 1
 15843 00002323 E918E3                  	jmp	SYS_RET_ERR	
 15844                                  
 15845                                  ioctl_bad_handlej:
 15846 00002326 E9FAFE                  	jmp	ioctl_bad_handle
 15847                                  
 15848                                  ;---------------------------------------------------------------------------
 15849                                  ;
 15850                                  ; IOCTL: AL = 8
 15851                                  ;
 15852                                  ; ENTRY: DS = DOSDATA
 15853                                  ;
 15854                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15855                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15856                                  ;         return address off the stack if the drive is invalid.
 15857                                  ;
 15858                                  ;-------------------------------------------------------------------------
 15859                                  
 15860                                  	; 30/01/2024
 15861                                  ioctl_rem_media:
 15862                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15863 00002329 E82401                  	CALL	Check_If_Net
 15864 0000232C 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15865                                  					;   certainly don't know how to do this
 15866                                  					;   call.
 15867                                  	;test	word [es:di+4],800h
 15868                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15869                                  	;test	byte [es:di+5],8
 15870 0000232E 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15871 00002333 74EC                    	JZ	short ioctl_bad_fun		; NO
 15872                                  
 15873                                  ;hkn; SS override for IOCALL
 15874                                  	; 30/01/2024
 15875                                  	; ds = ss = DOSDATA segment ('Get_Driver_BL' in 'Check_If_Net')
 15876                                  	;MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15877 00002335 C606[7E03]0F            	mov	byte [IOCALL_REQFUNC],DEVRMD ; 15
 15878 0000233A B00D                    	MOV	AL,REMHL  ; 13
 15879 0000233C 88DC                    	MOV	AH,BL			; Unit number
 15880                                  	;MOV	[SS:IOCALL_REQLEN],AX
 15881 0000233E A3[7C03]                	mov	[IOCALL_REQLEN],ax	
 15882 00002341 31C0                    	XOR	AX,AX
 15883                                  	;MOV	[SS:IOCALL_REQSTAT],AX
 15884 00002343 A3[7F03]                	mov	[IOCALL_REQSTAT],ax ; 0
 15885                                  	
 15886 00002346 06                      	PUSH	ES
 15887 00002347 1F                      	POP	DS
 15888 00002348 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15889 0000234A 16                      	PUSH	SS
 15890 0000234B 07                      	POP	ES
 15891                                  
 15892                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15893 0000234C BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15894 0000234F 1E                      	push	ds
 15895 00002350 56                      	push	si
 15896 00002351 E8EB21                  	call	DEVIOCALL2
 15897 00002354 5E                      	pop	si
 15898 00002355 1F                      	pop	ds
 15899                                  
 15900                                  ;hkn; SS override
 15901                                  	; 30/01/2024
 15902                                  	; (ds <> ss, ss = DOSDATA segment)
 15903 00002356 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15904                                  	;AND	AX,STBUI ; 200h		; Mask to busy bit
 15905                                  	; 29/01/2024
 15906 0000235A 80E402                  	and	ah,STBUI>>8
 15907 0000235D B109                    	MOV	CL,9
 15908 0000235F D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15909                                  ioctl_da_ok_j:	; 11/11/2022
 15910 00002361 E9D1E2                  	jmp	SYS_RET_OK
 15911                                  
 15912                                  ;-------------------------------------------------------------------------
 15913                                  ;
 15914                                  ; IOCTL: AL = 9
 15915                                  ;
 15916                                  ; ENTRY: DS = DOSDATA
 15917                                  ;
 15918                                  ;-------------------------------------------------------------------------
 15919                                  
 15920                                  ioctl_drive_attr:
 15921                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15922 00002364 88D8                    	mov	al,bl
 15923 00002366 E8C145                  	call	GETTHISDRV
 15924 00002369 723E                    	jc	short ioctl_drv_err
 15925 0000236B E8B500                  	call	Get_Driver_BL
 15926                                  	; MSDOS 6.0
 15927 0000236E 7239                    	JC	short ioctl_drv_err	; drive not valid
 15928                                  
 15929                                  	;mov	dx,[es:di+4]
 15930 00002370 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15931                                  					; get device attribute word
 15932 00002374 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15933                                  
 15934                                  ;hkn; SS override
 15935                                  	;LES	DI,[SS:THISCDS]
 15936                                  	; 30/01/2024
 15937 00002376 C43E[A205]              	les	di,[THISCDS] ; (Get_Driver_BL)
 15938                                  
 15939                                  	;test	word [es:di+43h],8000h
 15940                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15941                                  	;test	byte [es:di+44h],80h
 15942 0000237A 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15943 0000237F 7403                    	JZ	short IOCTLShare
 15944                                  
 15945                                  	;or	dx,1000h ; (MSDOS 3.3)
 15946                                  
 15947                                  ;	Net devices don't return a device attribute word.
 15948                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15949                                  
 15950 00002381 BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15951                                  
 15952                                  IOCTLShare:
 15953                                  	; 30/01/2024
 15954                                  	; ds = ss = DOSDATA segment
 15955                                  	;push	ss
 15956                                  	;pop	ds
 15957                                  
 15958 00002384 BE[BE03]                	MOV	SI,OPENBUF
 15959 00002387 80C341                  	ADD	BL,"A"	; 41h
 15960 0000238A 881C                    	MOV	[SI],BL
 15961 0000238C C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15962 00002391 B80003                  	MOV	AX,0300h
 15963 00002394 F8                      	CLC
 15964                                  	;INT	int_IBM
 15965 00002395 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15966                                  			; DS:SI -> ASCIZ disk device name 
 15967                                  			; (may be full path or only drive
 15968                                  			; specifier--must include the colon)
 15969                                  			; Return: CF clear if absolute disk access allowed
 15970 00002397 7303                    	JNC	short IOCTLLocal	; Not shared
 15971                                  	;OR	DX,0200H		; Shared, bit 9
 15972                                  	; 17/12/2022
 15973 00002399 80CE02                  	or	dh,02h
 15974                                  IOCTLLocal:
 15975                                  	;test	word [es:di+43h],1000h
 15976                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15977                                  	;test	byte [es:di+44h],10h
 15978 0000239C 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15979                                  	;JZ	short ioctl_set_DX
 15980                                  	; 16/12/2022
 15981 000023A1 7403                    	jz	short _ioctl_set_DX
 15982                                  	;OR	DX,8000h
 15983                                  	; 17/12/2022
 15984 000023A3 80CE80                  	or	dh,80h
 15985                                  ;ioctl_set_DX:
 15986                                  _ioctl_set_DX:
 15987                                  	; 16/12/2022
 15988 000023A6 E9BCFE                  	jmp	ioctl_set_dx
 15989                                  ; 16/12/2022
 15990                                  %if 0	
 15991                                  	call	Get_User_Stack
 15992                                  	MOV	[SI+user_env.user_DX],DX
 15993                                  	;;jmp	SYS_RET_OK
 15994                                  	;; 25/06/2019
 15995                                  	;jmp	SYS_RET_OK_clc
 15996                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15997                                  ioctl_gd_ok_j:
 15998                                  	jmp	short ioctl_da_ok_j
 15999                                  %endif
 16000                                  
 16001                                  ioctl_drv_err:
 16002 000023A9 B00F                    	mov	al,error_invalid_drive ; 0Fh
 16003                                  ioctl_gd_err_j:	; 11/11/2022
 16004 000023AB E990E2                  	jmp	SYS_RET_ERR
 16005                                  
 16006                                  ;--------------------------------------------------------------------------
 16007                                  ;
 16008                                  ; IOCTL: AL = A
 16009                                  ;
 16010                                  ; ENTRY: DS = DOSDATA
 16011                                  ;
 16012                                  ;--------------------------------------------------------------------------
 16013                                  
 16014                                  ioctl_handle_redir:
 16015 000023AE E86741                  	call	SFFromHandle		; ES:DI -> SFT
 16016 000023B1 7303                    	JNC	short ioctl_got_sft	; have valid handle
 16017 000023B3 E96DFE                  	jmp	ioctl_bad_handle ; 10/08/2018
 16018                                  
 16019                                  ioctl_got_sft:
 16020                                  	;mov	dx,[es:di+5]
 16021 000023B6 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 16022                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 16023                                  	; 16/12/2022
 16024 000023BA EBEA                    	jmp	short _ioctl_set_DX
 16025                                  
 16026                                  	; 16/12/2022
 16027                                  ;ioctl_bad_funj:
 16028                                  	;JMP	ioctl_bad_fun
 16029                                  
 16030                                  ;--------------------------------------------------------------------------
 16031                                  ;
 16032                                  ; IOCTL: AL= 4,5
 16033                                  ;
 16034                                  ; ENTRY: DS = DOSDATA
 16035                                  ;	 SI = user's DS
 16036                                  ;
 16037                                  ;
 16038                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 16039                                  ;         the call to Check_If_Net because Check_If_Net gets our
 16040                                  ;         return address off the stack if the drive is invalid.
 16041                                  ;
 16042                                  ;-------------------------------------------------------------------------
 16043                                  
 16044                                  ioctl_get_dev:
 16045 000023BC E89100                  	CALL	Check_If_Net
 16046                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 16047                                  					; certainly don't know how to do this
 16048                                  					; call.
 16049                                  	; 16/12/2022
 16050 000023BF 7403                    	jz	short ioctl_do_string
 16051                                  ioctl_bad_funj:
 16052 000023C1 E95DFF                  	JMP	ioctl_bad_fun
 16053                                  
 16054                                  ioctl_do_string:
 16055                                  	;test	word [es:di+4],4000h
 16056                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 16057                                  	;test	byte [es:di+5],40h
 16058 000023C4 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 16059 000023C9 74F6                    	JZ	short ioctl_bad_funj		; NO
 16060                                  					; assume IOCTL read
 16061 000023CB C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 16062                                  
 16063 000023D0 A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 16064 000023D2 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 16065                                  
 16066                                  					; it is an IOCTL write
 16067 000023D4 C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 16068                                  
 16069                                  ioctl_control_call:
 16070 000023D9 B016                    	MOV	AL,DRDWRHL ; 22
 16071                                  ioctl_setup_pkt:
 16072 000023DB 88DC                    	MOV	AH,BL			; Unit number
 16073 000023DD A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16074 000023E0 31C0                    	XOR	AX,AX
 16075 000023E2 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16076 000023E5 A2[8903]                	MOV	[IOMED],AL
 16077 000023E8 890E[8E03]              	MOV	[IOSCNT],CX
 16078 000023EC 8916[8A03]              	MOV	[IOXAD],DX
 16079 000023F0 8936[8C03]              	MOV	[IOXAD+2],SI
 16080 000023F4 06                      	PUSH	ES
 16081 000023F5 1F                      	POP	DS
 16082 000023F6 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16083 000023F8 16                      	PUSH	SS
 16084 000023F9 07                      	POP	ES
 16085                                  
 16086 000023FA BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16087                                  ioctl_do_IO:
 16088 000023FD E83F21                  	call	DEVIOCALL2
 16089                                  
 16090                                  ;hkn; SS override for IOCALL
 16091                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 16092                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16093                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16094 00002400 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16095 00002406 7507                    	JNZ	short ioctl_string_err
 16096                                  
 16097                                  ;hkn; SS override
 16098 00002408 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 16099                                  	; 16/12/2022
 16100 0000240C E926E2                  	jmp	SYS_RET_OK
 16101                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16102                                  	;jmp	short ioctl_gd_ok_j
 16103                                  
 16104                                  ioctl_string_err:
 16105 0000240F 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 16106                                  device_err:
 16107 00002414 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 16108 00002418 89F8                    	MOV	AX,DI
 16109 0000241A E8A22F                  	call	SET_I24_EXTENDED_ERROR
 16110                                  
 16111                                  ;hkn; use SS override
 16112                                  ;hkn;	mov	ax,[CS:EXTERR]
 16113 0000241D 36A1[2403]              	mov	ax,[SS:EXTERR]
 16114                                  	;jmp	SYS_RET_ERR
 16115                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16116 00002421 EB88                    	jmp	short ioctl_gd_err_j
 16117                                  
 16118                                  ; 17/05/2019 - Retro DOS v4.0
 16119                                  
 16120                                  ;--------------------------------------------------------------------------
 16121                                  ; Proc name : Get_Driver_BL
 16122                                  ;
 16123                                  ;	DS is DOSDATA
 16124                                  ;	BL is drive number (0=default)
 16125                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 16126                                  ;	No regs modified
 16127                                  ;
 16128                                  ;---------------------------------------------------------------------------
 16129                                  
 16130                                  	; 30/01/2024
 16131                                  Get_Driver_BL:
 16132 00002423 50                      	PUSH	AX
 16133 00002424 88D8                    	MOV	AL,BL			; Drive
 16134 00002426 E80145                  	call	GETTHISDRV
 16135 00002429 7223                    	jc	short ioctl_bad_drv
 16136 0000242B 30DB                    	XOR	BL,BL			; Unit zero on Net device
 16137 0000242D C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 16138 00002432 C43E[A205]              	LES	DI,[THISCDS]
 16139                                  	;test	word [es:di+43h],8000h
 16140                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16141                                  	;test	byte [es:di+44h],80h
 16142 00002436 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16143                                  	;les	di,[es:di+45h]
 16144 0000243B 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 16145 0000243F 750D                    	JNZ	short got_dev_ptr	 ; Is net
 16146 00002441 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16147                                  	;mov	bl,[es:di+1]
 16148 00002446 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 16149                                  	;les	di,[es:di+13h]
 16150 0000244A 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 16151                                  got_dev_ptr:
 16152                                  	; 30/01/2024
 16153                                  	; cf=0
 16154                                  	;CLC
 16155                                  ioctl_bad_drv:
 16156 0000244E 58                      	POP	AX
 16157 0000244F C3                      	retn
 16158                                  
 16159                                  ;-------------------------------------------------------------------------
 16160                                  ; Proc Name : Check_If_Net:
 16161                                  ;
 16162                                  ;
 16163                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 16164                                  ; If no device is found, the return address is popped off the stack, and a
 16165                                  ; jump is made to ioctl_drv_err.
 16166                                  ;
 16167                                  ; On Entry:
 16168                                  ; Registers same as those for Get_Driver_BL
 16169                                  ;
 16170                                  ; On Exit:
 16171                                  ; ZERO flag	- set if not a net device
 16172                                  ;		- reset if net device
 16173                                  ; ES:DI -> the device
 16174                                  ;
 16175                                  ;
 16176                                  ; BUGBUG: This function assumes the following stack setup on entry
 16177                                  ;
 16178                                  ;	  SP+2 -> Error return address
 16179                                  ;	  SP   -> Normal return address
 16180                                  ;
 16181                                  ;-------------------------------------------------------------------------
 16182                                  
 16183                                  Check_If_Net:
 16184                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16185 00002450 E8D0FF                  	CALL	Get_Driver_BL
 16186 00002453 7201                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 16187                                  
 16188                                  ; 30/01/2024 ('Get_Driver_BL' returns with
 16189                                  ;	      'curdir_isnet' condition/ZF, no need to a second test)
 16190                                  %if 0
 16191                                  	;;;
 16192                                  	; (PCDOS 7.1 IBMDOS.COM, Windows ME IO.SYS)
 16193                                  	PUSH	ES
 16194                                  	PUSH	DI
 16195                                  	LES	DI,[THISCDS]
 16196                                  	;test	word [es:di+43h],8000h
 16197                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16198                                  	;test	byte [es:di+44h],80h
 16199                                  	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16200                                  	POP	DI
 16201                                  	POP	ES
 16202                                  	;;;
 16203                                  %endif
 16204 00002455 C3                      	retn
 16205                                  
 16206                                  ioctl_drv_err_pop:
 16207 00002456 58                      	pop	ax			; pop off return address
 16208 00002457 E94FFF                  	jmp	ioctl_drv_err
 16209                                  
 16210                                  ioctl_bad_funj3:
 16211 0000245A E9C4FE                  	jmp	ioctl_bad_fun
 16212                                  
 16213                                  ioctl_string_errj:
 16214 0000245D EBB0                    	jmp	short ioctl_string_err  ; 25/05/2019
 16215                                  
 16216                                  ;--------------------------------------------------------------------------
 16217                                  ;
 16218                                  ; IOCTL: AL = E, F
 16219                                  ;
 16220                                  ; ENTRY: DS = DOSDATA
 16221                                  ;
 16222                                  ;
 16223                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 16224                                  ;         the call to Check_If_Net because Check_If_Net gets our
 16225                                  ;         return address off the stack if the drive is invalid.
 16226                                  ;
 16227                                  ;--------------------------------------------------------------------------
 16228                                  
 16229                                  ioctl_drive_owner:
 16230                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16231 0000245F E8EEFF                  	Call	Check_If_Net
 16232 00002462 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 16233                                  					;   certainly don't know how to do this
 16234                                  					;   call.
 16235                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 16236                                  	; 09/09/2018
 16237                                  	;test	byte [es:di+4],40h
 16238 00002464 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 16239 00002469 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 16240                                  	;mov	byte [IOCALL_REQFUNC],23
 16241 0000246B C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 16242 00002470 3C0E                    	cmp	al,0Eh			; Get Owner ?
 16243 00002472 7405                    	jz	short GetOwner
 16244                                  SetOwner:
 16245 00002474 C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 16246                                  GetOwner:
 16247 00002479 B00D                    	MOV	AL,OWNHL ; 13
 16248 0000247B 88DC                    	MOV	AH,BL			; Unit number
 16249 0000247D A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16250 00002480 31C0                    	XOR	AX,AX
 16251 00002482 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16252 00002485 06                      	PUSH	ES
 16253 00002486 1F                      	POP	DS
 16254 00002487 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16255 00002489 16                      	PUSH	SS
 16256 0000248A 07                      	POP	ES
 16257 0000248B BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16258 0000248E 1E                      	push	ds
 16259 0000248F 56                      	push	si
 16260 00002490 E8AC20                  	call	DEVIOCALL2
 16261 00002493 5E                      	pop	si
 16262 00002494 1F                      	pop	ds
 16263                                  ;hkn; SS override
 16264                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16265                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16266 00002495 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16267 0000249B 75C0                    	jnz	short ioctl_string_errj
 16268 0000249D 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 16269                                  					; owner returned is 1-based.
 16270 000024A1 E991E1                  	jmp	SYS_RET_OK
 16271                                  
 16272                                  ;============================================================================
 16273                                  ; DELETE.ASM, MSDOS 6.0, 1991
 16274                                  ;============================================================================
 16275                                  ; 07/08/2018 - Retro DOS v3.0
 16276                                  ; 17/05/2019 - Retro DOS v4.0
 16277                                  
 16278                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 16279                                  ;	NAME	DOS_DELETE
 16280                                  
 16281                                  ;
 16282                                  ;	Microsoft Confidential
 16283                                  ;	Copyright (C) Microsoft Corporation 1991
 16284                                  ;	All Rights Reserved.
 16285                                  ;
 16286                                  
 16287                                  ;**	DELETE.ASM - Low level routine for deleting files
 16288                                  ;----------------------------------------------------------------------------
 16289                                  ;		DOS_DELETE
 16290                                  ;		REN_DEL_Check
 16291                                  ;		FastOpen_Delete	       ; DOS 3.3
 16292                                  ;		FastOpen_Update	       ; DOS 3.3
 16293                                  
 16294                                  ;   Revision history:
 16295                                  ;
 16296                                  ;   A000  version 4.00	Jan. 1988
 16297                                  ;   A001  Fastopen Rename fix	April 1989
 16298                                  
 16299                                  ;Installed = TRUE
 16300                                  
 16301                                  ;	i_need	NoSetDir,BYTE
 16302                                  ;	i_need	Creating,BYTE
 16303                                  ;	i_need	DELALL,BYTE
 16304                                  ;	i_need	THISDPB,DWORD
 16305                                  ;	i_need	THISSFT,DWORD
 16306                                  ;	i_need	THISCDS,DWORD
 16307                                  ;	i_need	CURBUF,DWORD
 16308                                  ;	i_need	ATTRIB,BYTE
 16309                                  ;	i_need	SATTRIB,BYTE
 16310                                  ;	i_need	WFP_START,WORD
 16311                                  ;	i_need	REN_WFP,WORD			 ;BN001
 16312                                  ;	i_need	NAME1,BYTE			 ;BN001
 16313                                  ;	i_need	FoundDel,BYTE
 16314                                  ;	i_need	AUXSTACK,BYTE
 16315                                  ;	i_need	VOLCHNG_FLAG,BYTE
 16316                                  ;	i_need	JShare,DWORD
 16317                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 16318                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 16319                                  ;
 16320                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 16321                                  ;
 16322                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 16323                                  ;	i_need	DMAADD,DWORD
 16324                                  ;	i_need	RENAMEDMA,BYTE
 16325                                  
 16326                                  ;----------------------------------------------------------------------------
 16327                                  ;
 16328                                  ; Procedure Name : DOS_DELETE
 16329                                  ;
 16330                                  ; Inputs:
 16331                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16332                                  ;		terminated)
 16333                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16334                                  ;		( = -1 if current dir not involved, else
 16335                                  ;		 Points to first char after last "/" of current dir part)
 16336                                  ;	[THISCDS] Points to CDS being used
 16337                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16338                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16339                                  ; Function:
 16340                                  ;	Delete the specified file(s)
 16341                                  ; Outputs:
 16342                                  ;	CARRY CLEAR
 16343                                  ;		OK
 16344                                  ;	CARRY SET
 16345                                  ;	    AX is error code
 16346                                  ;		error_file_not_found
 16347                                  ;			Last element of path not found
 16348                                  ;		error_path_not_found
 16349                                  ;			Bad path (not in curr dir part if present)
 16350                                  ;		error_bad_curr_dir
 16351                                  ;			Bad path in current directory part of path
 16352                                  ;		error_access_denied
 16353                                  ;			Attempt to delete device or directory
 16354                                  ;		***error_sharing_violation***
 16355                                  ;			Deny both access required, generates an INT 24.
 16356                                  ;			This error is NOT returned. The INT 24H is generated,
 16357                                  ;			  and the file is ignored (not deleted). Delete will
 16358                                  ;			  simply continue on looking for more files.
 16359                                  ;			  Carry will NOT be set in this case.
 16360                                  ; DS preserved, others destroyed
 16361                                  ;
 16362                                  ;----------------------------------------------------------------------------
 16363                                  
 16364                                  FILEFOUND   equ 01h
 16365                                  FILEDELETED equ 10h
 16366                                  
 16367                                  
 16368                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16369                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 16370                                  
 16371                                  	; 30/01/2024
 16372                                  
 16373                                  DOS_DELETE:
 16374                                  
 16375                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 16376                                  ;hkn; appropriately at this point.
 16377                                  
 16378 000024A4 E887ED                  	call	TestNet
 16379 000024A7 7306                    	JNC	short LOCAL_DELETE
 16380                                  
 16381                                  ;IF NOT Installed
 16382                                  ;	transfer NET_DELETE
 16383                                  ;ELSE
 16384                                  	;MOV	AX,(MultNET SHL 8) | 19
 16385                                  	;INT	2FH
 16386                                  	;return
 16387                                  
 16388 000024A9 B81311                  	mov	ax,1113h
 16389 000024AC CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 16390                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 16391                                  			;		fully-qualified filename in DOS CS
 16392                                  			; SDA CDS pointer -> current directory structure for drive with file
 16393                                  			; Return: CF set on error
 16394 000024AE C3                      	retn
 16395                                  ;ENDIF
 16396                                  
 16397                                  LOCAL_DELETE:
 16398 000024AF C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 16399 000024B4 E830EE                  	call	ECritDisk
 16400                                  	;mov	word [CREATING],0E500h
 16401 000024B7 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 16402 000024BD 8B36[B205]              	MOV	SI,[WFP_START]
 16403                                  SKPNUL:
 16404 000024C1 AC                      	LODSB
 16405 000024C2 08C0                    	OR	AL,AL
 16406 000024C4 75FB                    	JNZ	short SKPNUL		; go to end
 16407 000024C6 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 16408 000024C9 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 16409 000024CD 7506                    	JNZ	short TEST_QUEST
 16410 000024CF 807C022A                	CMP	BYTE [SI+2],"*"
 16411 000024D3 741F                    	JZ	short CHECK_ATTS
 16412                                  TEST_QUEST:
 16413 000024D5 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 16414 000024D8 87FE                    	XCHG	DI,SI
 16415                                  
 16416 000024DA 16                      	push	ss
 16417                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 16418 000024DB 07                      	pop	es ; 17/05/2019
 16419                                  
 16420 000024DC B83F3F                  	MOV	AX,"??" ; 3F3Fh
 16421 000024DF B90400                  	MOV	CX,4		; four sets of "??"
 16422 000024E2 F3AF                    	REPE	SCASW
 16423 000024E4 751C                    	JNZ	short NOT_ALL
 16424 000024E6 87FE                    	XCHG	DI,SI
 16425 000024E8 AD                      	LODSW
 16426 000024E9 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 16427 000024EC 7514                    	JNZ	short NOT_ALL
 16428 000024EE AD                      	LODSW
 16429 000024EF 3D3F3F                  	CMP	AX,"??"
 16430 000024F2 750E                    	JNZ	short NOT_ALL
 16431                                  CHECK_ATTS:
 16432 000024F4 A0[6D05]                	MOV	AL,[SATTRIB]
 16433                                  	;and	al,1Fh
 16434 000024F7 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16435                                  					; Look only at hidden bits
 16436                                  	;cmp	al,1Fh
 16437 000024F9 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16438                                  					; All must be set
 16439 000024FB 7505                    	JNZ	short NOT_ALL
 16440                                  
 16441                                  ; NOTE WARNING DANGER-----
 16442                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 16443                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 16444                                  
 16445 000024FD C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 16446                                  NOT_ALL:
 16447 00002502 C606[4C03]01            	MOV	byte [NoSetDir],1
 16448 00002507 E81519                  	call	GetPathNoSet
 16449 0000250A 7312                    	JNC	short Del_found
 16450 0000250C 750B                    	JNZ	short _bad_path
 16451 0000250E 08C9                    	OR	CL,CL
 16452 00002510 7407                    	JZ	short _bad_path
 16453                                  No_file:
 16454 00002512 B80200                  	MOV	AX,error_file_not_found
 16455                                  ErrorReturn:
 16456 00002515 F9                      	STC
 16457                                  	;call	LCritDisk
 16458                                  	;retn
 16459                                  	; 18/12/2022
 16460 00002516 E9E9ED                  	jmp	LCritDisk
 16461                                  
 16462                                  _bad_path:
 16463 00002519 B80300                  	MOV	AX,error_path_not_found
 16464 0000251C EBF7                    	JMP	short ErrorReturn
 16465                                  
 16466                                  Del_found:
 16467 0000251E 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 16468 00002520 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 16469 00002525 7405                    	JZ	short NOT_DIR
 16470                                  Del_access_err:
 16471 00002527 B80500                  	MOV	AX,error_access_denied
 16472 0000252A EBE9                    	JMP	short ErrorReturn
 16473                                  
 16474                                  NOT_DIR:
 16475 0000252C 08E4                    	OR	AH,AH			; Check if device name
 16476 0000252E 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 16477                                  
 16478                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 16479                                  
 16480                                  DELFILE:
 16481 00002530 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 16482                                  
 16483                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 16484                                  ; DOS issue a build BPB call the next time this drive is accessed.
 16485                                  
 16486 00002535 1E                      	PUSH	DS
 16487 00002536 8A26[7F05]              	MOV	AH,[DELALL]
 16488 0000253A C53E[E205]              	LDS	DI,[CURBUF]
 16489                                  	
 16490                                  ;hkn; SS override
 16491 0000253E 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 16492 00002544 7509                    	JNZ	short DoDelete		; yes
 16493                                  
 16494 00002546 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 16495 0000254A 7403                    	JZ	short DoDelete		; not read only
 16496                                  
 16497                                  	; 30/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16498                                  Skip_it:
 16499 0000254C 1F                      	POP	DS
 16500 0000254D EB2F                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 16501                                  
 16502                                  DoDelete:
 16503 0000254F E88100                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 16504                                  	;JNC	short DEL_SHARE_OK
 16505                                  	;POP	DS
 16506                                  	;JMP	SHORT DELNXT		; Skip it
 16507                                  	; 30/01/2024
 16508 00002552 72F8                    	jc	short Skip_it
 16509                                  
 16510                                  DEL_SHARE_OK:
 16511                                  	; 17/05/2019 - Retro DOS v4.0
 16512                                  	; MSDOS 6.0
 16513                                  	;test	byte [di+5],40h
 16514 00002554 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16515                                  					;LB. if already dirty		  ;AN000;
 16516 00002558 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 16517 0000255A E8AB34                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 16518                                  	;or	byte [di+5],40h
 16519 0000255D 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16520                                  yesdirty:
 16521 00002561 8827                    	mov	[bx],ah 
 16522                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 16523 00002563 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 16524 00002565 1F                      	POP	DS
 16525 00002566 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 16526                                  
 16527 0000256B 83FB02                  	CMP	BX,2
 16528 0000256E 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 16529                                  	;cmp	bx,[es:bp+0Dh]
 16530 00002570 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16531 00002574 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16532                                  
 16533 00002576 E81228                  	call	RELEASE 		; Free file data
 16534 00002579 7252                    	JC	short No_fileJ
 16535                                  
 16536                                  ; DOS 3.3  FastOpen
 16537                                  
 16538 0000257B E8C200                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16539                                  
 16540                                  ; DOS 3.3  FastOpen
 16541                                  
 16542                                  DELNXT:
 16543 0000257E C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16544 00002582 E80718                  	call	GETENTRY		; Registers need to be reset
 16545 00002585 7246                    	JC	short No_fileJ
 16546 00002587 E84217                  	call	NEXTENT
 16547 0000258A 73A4                    	JNC	short DELFILE
 16548 0000258C C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16549                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16550                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16551                                  	;;mov	al,[es:bp+0]
 16552                                  	; 15/12/2022
 16553 00002590 268A4600                	MOV	AL,[ES:BP]
 16554 00002594 E86F33                  	call	FLUSHBUF
 16555 00002597 7234                    	JC	short No_fileJ
 16556                                  ;
 16557                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16558                                  ;
 16559                                  ;   not found not deleted		file not found
 16560                                  ;   not found	  deleted		*** impossible ***
 16561                                  ;	found not deleted		access denied (read-only)
 16562                                  ;	found	  deleted		no error
 16563                                  ;
 16564 00002599 F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16565 0000259E 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16566                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16567                                  ; and to force the DOS to issue a media check.
 16568 000025A0 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16569 000025A5 741C                    	jz	short No_Set_Flag
 16570 000025A7 50                      	PUSH	AX
 16571 000025A8 06                      	PUSH	ES
 16572 000025A9 57                      	PUSH	DI
 16573 000025AA C43E[A205]              	LES	DI,[THISCDS]
 16574 000025AE 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16575 000025B1 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16576 000025B4 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16577                                  	
 16578                                  	; MSDOS 6.0
 16579 000025B8 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16580 000025BA E8C804                  	call	Set_Media_ID		;>32mb set volume id to boot record	 ;AN000;
 16581                                  	 
 16582 000025BD E8D32F                  	call	FATREAD_CDS		; force media check
 16583 000025C0 5F                      	POP	DI
 16584 000025C1 07                      	POP	ES
 16585 000025C2 58                      	POP	AX
 16586                                  No_Set_Flag:
 16587                                  	;call	LCritDisk		; carry is clear
 16588                                  	;retn
 16589                                  	; 18/12/2022
 16590 000025C3 E93CED                  	jmp	LCritDisk
 16591                                  DelError:
 16592 000025C6 F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16593 000025CB 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16594                                  No_fileJ:
 16595 000025CD E942FF                  	JMP	No_file ; 10/08/2018 		; Nope
 16596                                  Del_access_errJ:
 16597 000025D0 E954FF                  	JMP	Del_access_err ; 10/08/2018
 16598                                  
 16599                                  ; 08/08/2018 - Retro DOS v3.0
 16600                                  
 16601                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16602                                  ;---------------------------------------------------------------------------
 16603                                  ; Procedure Name : REN_DEL_Check
 16604                                  ;
 16605                                  ; Inputs:
 16606                                  ;	[THISDPB] set
 16607                                  ;	[CURBUF+2]:BX points to entry
 16608                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16609                                  ;	[WFP_Start] points to name
 16610                                  ; Function:
 16611                                  ;	Check for Exclusive access on given file.
 16612                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16613                                  ; Outputs:
 16614                                  ;	ES:BP = [THISDPB]
 16615                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16616                                  ;		last element will be loaded from the directory entry.  This is
 16617                                  ;		so the name given to the sharer doesn't have any meta chars in
 16618                                  ;		it.
 16619                                  ;	Carry set if sharing violation, INT 24H generated
 16620                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16621                                  ;		This is because input AX is preserved.
 16622                                  ;		Caller must set the error if needed.
 16623                                  ;	Carry clear
 16624                                  ;		OK
 16625                                  ; AX,DS,BX,SI,DI preserved
 16626                                  ;---------------------------------------------------------------------------
 16627                                  
 16628                                  REN_DEL_Check:
 16629                                  
 16630 000025D3 1E                      	PUSH	DS
 16631 000025D4 57                      	PUSH	DI
 16632 000025D5 50                      	PUSH	AX
 16633 000025D6 53                      	PUSH	BX
 16634 000025D7 56                      	PUSH	SI		; Save CURBUF pointers
 16635                                  	
 16636 000025D8 16                      	push	ss
 16637 000025D9 07                      	pop	es
 16638                                  
 16639                                  ;hkn; context ES will assume ES to DOSDATA
 16640                                  ;hkn; ASSUME	ES:DOSGROUP
 16641                                  
 16642                                  ;hkn; SS override
 16643 000025DA 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16644 000025DF 89DE                    	MOV	SI,BX
 16645                                  
 16646                                  ;hkn; SS override
 16647 000025E1 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16648 000025E6 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16649                                  	;ADD	BX,2		; Skip over d: to point to leading '\'
 16650                                  	; 31/01/2024
 16651 000025E8 43                      	inc	bx
 16652 000025E9 43                      	inc	bx
 16653 000025EA E8E1EB                  	call	StrLen		; CX is length of ES:DI including NUL
 16654 000025ED 49                      	DEC	CX		; Don't include nul in count
 16655 000025EE 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16656 000025F0 E8F145                  	call	SkipBack	; Back up one element
 16657 000025F3 47                      	INC	DI		; Point to start of last element
 16658                                  
 16659                                  	; 17/05/2019 - Retro DOS v4.0
 16660                                  ;hkn; SS override
 16661                                  	; MSDOS 6.0
 16662 000025F4 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16663                                  	;
 16664 000025F9 E85FFA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16665 000025FC 5E                      	POP	SI		; Get back entry pointers
 16666 000025FD 5B                      	POP	BX
 16667 000025FE 53                      	PUSH	BX
 16668 000025FF 56                      	PUSH	SI		; Back on stack
 16669                                  	
 16670 00002600 16                      	push	ss
 16671 00002601 1F                      	pop	ds
 16672                                  
 16673                                  ;hkn; context DS will assume ES to DOSDATA
 16674                                  ;hkn; ASSUME	DS:DOSGROUP
 16675                                  
 16676                                  ; Close the file if possible by us.
 16677                                  ;
 16678                                  ;if installed
 16679 00002602 FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16680                                  ;else
 16681                                  ;	Call	ShCloseFile
 16682                                  ;endif
 16683 00002606 8C1E[A005]              	MOV	[THISSFT+2],DS
 16684                                  
 16685                                  ;hkn; AUXSTACK is in DOSDATA
 16686 0000260A C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16687                                  				; Scratch space
 16688 00002610 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16689 00002612 E80924                  	call	DOOPEN		; Fill in SFT for share check
 16690 00002615 C43E[9E05]              	LES	DI,[THISSFT]
 16691                                  	;mov	word [es:di+2],10h
 16692 00002619 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16693                                  				; requires exclusive access
 16694                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16695 0000261F 26C7050100              	mov	word [ES:DI],1
 16696 00002624 E8A34B                  	call	ShareEnter
 16697 00002627 720D                    	jc	short CheckDone
 16698 00002629 C43E[9E05]              	LES	DI,[THISSFT]
 16699                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16700 0000262D 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16701                                  	
 16702 00002632 E8904B                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16703 00002635 F8                      	CLC
 16704                                  CheckDone:
 16705 00002636 C42E[8A05]              	LES	BP,[THISDPB]
 16706 0000263A 5E                      	POP	SI
 16707 0000263B 5B                      	POP	BX
 16708 0000263C 58                      	POP	AX
 16709 0000263D 5F                      	POP	DI
 16710 0000263E 1F                      	POP	DS
 16711 0000263F C3                      	retn
 16712                                  
 16713                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16714                                  ;---------------------------------------------------------------------------
 16715                                  ; Procedure Name : FastOpen_Delete
 16716                                  ; Inputs:
 16717                                  ;	None
 16718                                  ; Function:
 16719                                  ;	Call FastOpen to delete the dir info.
 16720                                  ; Outputs:
 16721                                  ;	None
 16722                                  ;---------------------------------------------------------------------------
 16723                                  
 16724                                  	; 31/01/2024
 16725                                  
 16726                                  FastOpen_Delete:
 16727 00002640 9C                      	PUSHF			; save flag
 16728 00002641 56                      	PUSH	SI		; save registers
 16729 00002642 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16730 00002643 53                      	PUSH	BX
 16731 00002644 50                      	PUSH	AX
 16732                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16733                                  ;hkn; SS override
 16734                                  	; 17/05/2019 - Retro DOS v4.0
 16735                                  	; MSDOS 6.0
 16736 00002645 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16737                                  	
 16738 0000264A B003                    	MOV	AL,FONC_delete	; al = 3
 16739                                  
 16740                                  ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16741                                  %if 0 
 16742                                  fastinvoke:
 16743                                  ;hkn; FastTable is in DOSDATA
 16744                                  	MOV	BX,FastTable+2
 16745                                  	CALL	far [BX]	; call fastopen
 16746                                  	POP	AX		; restore registers
 16747                                  	POP	BX
 16748                                  	;pop	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16749                                  	POP	SI
 16750                                  	POPF			; restore flag
 16751                                  	retn
 16752                                  %else
 16753 0000264C EB0F                    	jmp	short fastinvoke ; 31/01/2024
 16754                                  %endif
 16755                                  
 16756                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16757                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16758                                  
 16759                                  	; 31/01/2024 Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 16760                                  	; DOSCODE:65B4h (MSDOS 6.22 MSDOS.SYS)
 16761                                  	; DOSCODE:6D07h (PCDOS 7.1 IBMDOS.COM)
 16762                                  
 16763                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16764                                  ;---------------------------------------------------------------------------
 16765                                  ; PROCEDURE Name : FastOpen_Rename
 16766                                  ;
 16767                                  ; Inputs:
 16768                                  ;	 REN_WFP   = Path Name
 16769                                  ;	 NAME1	   = New Name
 16770                                  ; Function:
 16771                                  ;	Call FastOpen to rename the dir entry in the cache
 16772                                  ; Outputs:
 16773                                  ;	None
 16774                                  ;---------------------------------------------------------------------------
 16775                                  
 16776                                  FastOpen_Rename:
 16777                                  	; 17/05/2019 - Retro DOS v4.0
 16778                                  	; 08/08/2018 - Retro DOS v3.0
 16779                                  	; MSDOS 6.0
 16780 0000264E 9C                      	PUSHF			;AN001 save flag
 16781 0000264F 56                      	PUSH	SI		;AN001 save registers
 16782 00002650 57                      	PUSH	DI		;AN001
 16783 00002651 53                      	PUSH	BX		;AN001
 16784 00002652 50                      	PUSH	AX		;AN001
 16785                                  	;
 16786                                  ;hkn; SS override
 16787 00002653 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16788                                  
 16789                                  ;hkn; NAME1 is in DOSDATA
 16790 00002658 BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16791                                  	;mov	al,6
 16792 0000265B B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16793                                  
 16794                                  fastinvoke:	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16795                                  	
 16796                                  ;hkn; FastTable is in DOSDATA
 16797 0000265D BB[320D]                	MOV	BX,FastTable+2
 16798 00002660 FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16799                                  	
 16800 00002662 58                      	POP	AX		; restore registers  ;AN001
 16801 00002663 5B                      	POP	BX				     ;AN001
 16802 00002664 5F                      	POP	DI				     ;AN001
 16803 00002665 5E                      	POP	SI				     ;AN001
 16804 00002666 9D                      	POPF			; restore flag	     ;AN001
 16805 00002667 C3                      	retn					     ;AN001
 16806                                  
 16807                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16808                                  ;---------------------------------------------------------------------------
 16809                                  ; Procedure Name : FastOpen_Update
 16810                                  ;
 16811                                  ; Inputs:
 16812                                  ;	DL     drive number (A=0,B=1,,,)
 16813                                  ;	CX     first cluster #
 16814                                  ;	AH     0 updates dir entry
 16815                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16816                                  ;	ES:DI  directory entry
 16817                                  ; Function:
 16818                                  ;	Call FastOpen to update the dir info.
 16819                                  ; Outputs:
 16820                                  ;	None
 16821                                  ;---------------------------------------------------------------------------
 16822                                  
 16823                                  FastOpen_Update:
 16824 00002668 9C                      	PUSHF			; save flag
 16825 00002669 56                      	PUSH	SI
 16826 0000266A 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16827 0000266B 53                      	PUSH	BX		; save regs
 16828 0000266C 50                      	PUSH	AX
 16829 0000266D B004                    	MOV	AL,FONC_update	; al = 4
 16830 0000266F EBEC                    	JMP	short fastinvoke
 16831                                  
 16832                                  	; 17/05/2019
 16833                                  
 16834                                  	; MSDOS 6.0
 16835                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16836                                  ;---------------------------------------------------------------------------
 16837                                  Fast_Dispatch:
 16838                                  ;hkn; FastTable is in DOSDATA
 16839 00002671 BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16840                                  ;hkn; use SS override
 16841 00002674 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16842 00002677 C3                      	retn
 16843                                  
 16844                                  ;============================================================================
 16845                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16846                                  ;============================================================================
 16847                                  ; 08/08/2018 - Retro DOS v3.0
 16848                                  ; 17/05/2019 - Retro DOS v4.0
 16849                                  
 16850                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16851                                  ;	NAME	DOS_RENAME
 16852                                  
 16853                                  ;**	Low level routine for renaming files
 16854                                  ;----------------------------------------------------------------------------
 16855                                  ;	DOS_RENAME
 16856                                  ;
 16857                                  ;	Modification history:
 16858                                  ;
 16859                                  ;	    Created: ARR 30 March 1983
 16860                                  
 16861                                  ;----------------------------------------------------------------------------
 16862                                  ;
 16863                                  ; Procedure Name : DOS_RENAME
 16864                                  ;
 16865                                  ; Inputs:
 16866                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16867                                  ;		chars, NUL terminated)
 16868                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16869                                  ;		( = -1 if current dir not involved, else
 16870                                  ;		 Points to first char after last "/" of current dir part)
 16871                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16872                                  ;		chars, NUL terminated)
 16873                                  ;	[THISCDS] Points to CDS being used
 16874                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16875                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16876                                  ; Function:
 16877                                  ;	Rename the specified file(s)
 16878                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16879                                  ; Outputs:
 16880                                  ;	CARRY CLEAR
 16881                                  ;	    OK
 16882                                  ;	CARRY SET
 16883                                  ;	    AX is error code
 16884                                  ;		error_file_not_found
 16885                                  ;			No match for source, or dest path invalid
 16886                                  ;		error_not_same_device
 16887                                  ;			Source and dest are on different devices
 16888                                  ;		error_access_denied
 16889                                  ;			Directory specified (not simple rename),
 16890                                  ;			Device name given, Destination exists.
 16891                                  ;			NOTE: In third case some renames may have
 16892                                  ;			 been done if metas.
 16893                                  ;		error_path_not_found
 16894                                  ;			Bad path (not in curr dir part if present)
 16895                                  ;			SOURCE ONLY
 16896                                  ;		error_bad_curr_dir
 16897                                  ;			Bad path in current directory part of path
 16898                                  ;			SOURCE ONLY
 16899                                  ;		error_sharing_violation
 16900                                  ;			Deny both access required, generates an INT 24.
 16901                                  ; DS preserved, others destroyed
 16902                                  ;
 16903                                  ;----------------------------------------------------------------------------
 16904                                  
 16905                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16906                                  
 16907                                  	; 31/01/2024
 16908                                  
 16909                                  DOS_RENAME:
 16910                                  
 16911                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16912                                  ;hkn; at this point to DOSDATA.
 16913                                  
 16914 00002678 E8B3EB                  	call	TestNet
 16915 0000267B 7306                    	JNC	short LOCAL_RENAME
 16916                                  
 16917                                  ;IF NOT Installed
 16918                                  ;	transfer NET_RENAME
 16919                                  ;ELSE
 16920                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16921                                  	;INT	2FH
 16922                                  	;return
 16923                                  
 16924 0000267D B81111                  	mov     ax, 1111h
 16925 00002680 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16926                                  			; SS = DS = DOS CS, 
 16927                                  			; SDA first filename pointer = offset of fully-qualified old name
 16928                                  			; SDA CDS pointer -> current directory
 16929                                  			; Return: CF set on error
 16930 00002682 C3                      	retn
 16931                                  ;ENDIF
 16932                                  
 16933                                  LOCAL_RENAME:
 16934 00002683 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16935 00002688 8B36[B205]              	MOV	SI,[WFP_START]
 16936 0000268C 8B3E[B405]              	MOV	DI,[REN_WFP]
 16937 00002690 8A04                    	MOV	AL,[SI]
 16938 00002692 8A25                    	MOV	AH,[DI]
 16939 00002694 0D2020                  	OR	AX,2020H		; Lower case
 16940 00002697 38E0                    	CMP	AL,AH
 16941 00002699 7405                    	JZ	short SAMEDRV
 16942 0000269B B81100                  	MOV	AX,error_not_same_device ; 11h
 16943 0000269E F9                      	STC
 16944 0000269F C3                      	retn
 16945                                  
 16946                                  SAMEDRV:
 16947 000026A0 FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16948 000026A4 FF36[2C03]              	PUSH	WORD [DMAADD]
 16949 000026A8 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16950                                  
 16951                                  ;hkn; RENAMEDMA is in DOSDATA
 16952 000026AC C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16953 000026B2 C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16954 000026B7 E82DEC                  	call	ECritDisk
 16955 000026BA E8EE05                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16956                                  					;    points to entry
 16957 000026BD 7314                    	JNC	short Check_Dev
 16958 000026BF 83F812                  	CMP	AX,error_no_more_files ; 12h
 16959 000026C2 7503                    	JNZ	short GOTERR
 16960 000026C4 B80200                  	MOV	AX,error_file_not_found ; 2
 16961                                  GOTERR:
 16962 000026C7 F9                      	STC
 16963                                  RENAME_POP:
 16964 000026C8 8F06[2C03]              	POP	WORD [DMAADD]
 16965 000026CC 8F06[2E03]              	POP	WORD [DMAADD+2]
 16966                                  	;call	LCritDisk
 16967                                  	;retn
 16968                                  	; 16/12/2022
 16969 000026D0 E92FEC                  	jmp	LCritDisk
 16970                                  
 16971                                  Check_Dev:
 16972                                  	; 17/05/2019 - Retro DOS v4.0
 16973                                  	;mov	ax,5
 16974 000026D3 B80500                  	MOV	AX,error_access_denied	; Assume error
 16975                                  	
 16976                                  	; MSDOS 6.0
 16977 000026D6 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16978 000026D7 C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  check if source a dir  ;AN000;
 16979                                  	;add	si,21
 16980 000026DB 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16981                                  	;test	byte [si+11],10h
 16982 000026DE F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16983 000026E2 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16984 000026E4 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16985 000026E8 E8ECFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16986                                  notdir:
 16987 000026EB 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16988 000026EC 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16989                                  
 16990                                  	; MSDOS 3.3 & MSDOS 6.0
 16991 000026EE 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16992 000026F3 75D2                    	JNZ	short GOTERR
 16993                                  
 16994                                  ; At this point a source has been found. There is search continuation info (a
 16995                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16996                                  ; directory entry found.
 16997                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16998                                  ; throughout the RENAME since it is known at this point that the source and
 16999                                  ; destination are both on the same device.
 17000                                  ; [SATTRIB] is also set.
 17001                                  
 17002 000026F5 89DE                    	MOV	SI,BX
 17003                                  	;add	si,26
 17004 000026F7 83C61A                  	ADD	SI,dir_entry.dir_first
 17005 000026FA E8D6FE                  	call	REN_DEL_Check
 17006 000026FD 7305                    	JNC	short REN_OK1
 17007 000026FF B82000                  	MOV	AX,error_sharing_violation  ; 20h
 17008 00002702 EBC4                    	JMP	short RENAME_POP
 17009                                  
 17010                                  ;------------------------------------------------------------------------------
 17011                                  ; Check if the source is a file or directory. If file, delete the entry
 17012                                  ; from the Fastopen cache. If directory, rename it later
 17013                                  ;------------------------------------------------------------------------------
 17014                                  
 17015                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 17016                                  	; MSDOS 6.0
 17017                                  	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 17018                                  	;PUSH	SI
 17019 00002704 C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 17020                                  	;add	si,21
 17021 00002708 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 17022                                  	;test	byte [si+11],10h
 17023 0000270B F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 17024                                  	;JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 17025 0000270F 7503                    	jnz	short SWAP_SOURCE ; 31/01/2024
 17026                                  	;POP	SI			;BN00X
 17027                                  	;JMP	SHORT SWAP_SOURCE	;BN00X
 17028                                  ;NOT_DIR1:				;;BN00X it is a file, delete the entry
 17029                                  	;POP	SI
 17030                                  
 17031                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17032 00002711 E82CFF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 17033                                  SWAP_SOURCE:
 17034                                  	; MSDOS 3.3
 17035                                  	;MOV	SI,[REN_WFP]
 17036                                  	;MOV	[WFP_START],SI
 17037                                  	; MSDOS 6.0
 17038 00002714 A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 17039 00002717 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 17040 0000271B 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 17041 0000271F A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 17042                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17043 00002722 C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 17044                                  	;mov	word [CREATING],0E5FFh
 17045 00002728 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 17046                                  					; A rename is like a CREATE_NEW as far
 17047                                  					; as the destination is concerned.
 17048 0000272E E8EE16                  	call	GetPathNoSet
 17049                                  
 17050                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 17051                                  ;   since no files match the destination name. If it fails for any other
 17052                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 17053                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 17054                                  ;   if the rename should fail because we haven't built an explicit name by
 17055                                  ;   substituting for the meta chars in it. In this case the destination file
 17056                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 17057                                  ;   in the directory entry part.
 17058                                  	
 17059 00002731 7223                    	JC	short NODEST
 17060                                  	
 17061                                  	; MSDOS 6.0
 17062                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 17063                                  	; !! MSDOS 3.3 !!
 17064                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 17065                                  
 17066 00002733 08E4                    	OR	AH,AH			; Device?
 17067 00002735 792C                    	JNS	short SAVEDEST		; No, continue
 17068                                  BAD_ACC:
 17069 00002737 B80500                  	MOV	AX,error_access_denied
 17070 0000273A F9                      	STC
 17071                                  RENAME_CLEAN:
 17072 0000273B 9C                      	PUSHF				; Save carry state
 17073 0000273C 50                      	PUSH	AX			; and error code (if carry set)
 17074 0000273D A0[7605]                	MOV	AL,[THISDRV]
 17075 00002740 E8C331                  	call	FLUSHBUF
 17076 00002743 58                      	POP	AX
 17077 00002744 803E[4A03]00            	CMP	byte [FAILERR],0
 17078 00002749 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 17079 0000274B 9D                      	POPF
 17080 0000274C E979FF                  	JMP	RENAME_POP
 17081                                  
 17082                                  BAD_ERR:
 17083 0000274F 58                      	POP	AX			; Saved flags
 17084                                  	; 16/12/202
 17085                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17086                                  BAD_PATH: ; *
 17087 00002750 B80300                  	MOV	AX,error_path_not_found
 17088 00002753 E971FF                  	JMP	GOTERR
 17089                                  
 17090                                  NODEST:
 17091 00002756 75F8                    	JNZ	short BAD_PATH
 17092 00002758 803E[4A03]00            	CMP	byte [FAILERR],0
 17093 0000275D 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 17094                                  					; because user FAILed on I 24
 17095                                  	; 14/11/2022
 17096 0000275F 08C9                    	OR	CL,CL
 17097                                  	;JNZ	short SAVEDEST
 17098                                  	; 17/05/2019
 17099 00002761 74ED                    	jz	short BAD_PATH ; *
 17100                                  ;BAD_PATH: ; *
 17101                                  ;	MOV	AX,error_path_not_found
 17102                                  ;	;STC
 17103                                  ;	;JMP	RENAME_POP
 17104                                  ;	; 17/05/2019
 17105                                  ;	jmp	GOTERR 
 17106                                  
 17107                                  ; 16/12/2022
 17108                                  %if 0
 17109                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17110                                  	or	cl,cl
 17111                                  	jnz	short SAVEDEST
 17112                                  	;jz	short BAD_PATH ; *
 17113                                  BAD_PATH: ; *
 17114                                  	;mov	ax,3
 17115                                  	mov	ax,error_path_not_found
 17116                                  	stc
 17117                                  	jmp	RENAME_POP
 17118                                  %endif
 17119                                  
 17120                                  SAVEDEST:
 17121 00002763 16                      	push	ss
 17122 00002764 07                      	pop	es
 17123                                  
 17124                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 17125 00002765 BF[5705]                	MOV	DI,NAME2
 17126 00002768 BE[4B05]                	MOV	SI,NAME1
 17127                                  
 17128 0000276B B90B00                  	MOV	CX,11
 17129 0000276E F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 17130 00002770 A1[C205]                	MOV	AX,[DIRSTART]
 17131 00002773 A3[6405]                	MOV	[DESTSTART],AX
 17132                                  BUILDDEST:
 17133                                  	; 31/01/2024
 17134                                  	;push	ss
 17135                                  	;pop	es			; needed due to JMP BUILDDEST below
 17136                                  
 17137                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 17138 00002776 BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 17139 00002779 BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 17140 0000277C BE[5705]                	MOV	SI,NAME2		; Raw dest
 17141                                  
 17142 0000277F B90B00                  	MOV	CX,11
 17143                                  
 17144                                  	; 17/05/2019 - Retro DOS v4.0
 17145                                  	
 17146                                  	; MSDOS 6.0
 17147 00002782 E81101                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 17148                                  
 17149                                  	; MSDOS 3.3
 17150                                  
 17151                                  ; 08/08/2018 - Retro DOS v3.0
 17152                                  ; MSDOS 6.0 
 17153                                  ;---------------------------------------------------------------------------
 17154                                  ;Procedure: NEW_RENAME
 17155                                  ;
 17156                                  ;Input: DS:SI -> raw string with ?
 17157                                  ;	ES:DI -> destination string
 17158                                  ;	DS:BX -> source string
 17159                                  ;Function: replace ? chars of raw string with chars in source string and
 17160                                  ;	   put in destination string
 17161                                  ;Output: ES:DI-> new string
 17162                                  ;---------------------------------------------------------------------------
 17163                                  ;
 17164                                  ;NEW_RENAME:
 17165                                  ;NEWNAM:
 17166                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 17167                                  ;	LODSB
 17168                                  ;	CMP	AL,"?"
 17169                                  ;	JNZ	short NOCHG
 17170                                  ;	MOV	AL,[BX] 		; Get replace char
 17171                                  ;NOCHG:
 17172                                  ;	STOSB
 17173                                  ;	INC	BX			; Next replace char
 17174                                  ;	LOOP	NEWNAM
 17175                                  ;	; MSDOS 6.0
 17176                                  ;	;retn
 17177                                  
 17178                                  	; MSDOS 3.3 & MSDOS 6.0
 17179                                  	;mov	byte [ATTRIB],16h
 17180 00002785 C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 17181 0000278A C606[7E05]FF            	MOV	byte [CREATING],0FFH
 17182 0000278F E82019                  	call	DEVNAME 		; Check if we built a device name
 17183 00002792 73A3                    	JNC	short BAD_ACC
 17184 00002794 8B1E[6405]              	MOV	BX,[DESTSTART]
 17185 00002798 C42E[8A05]              	LES	BP,[THISDPB]
 17186 0000279C E81D16                  	call	SETDIRSRCH		; Reset search to start of dir
 17187 0000279F 7296                    	JC	short BAD_ACC 		; Screw up
 17188 000027A1 E8DE14                  	call	FINDENTRY		; See if new name already exists
 17189 000027A4 7391                    	JNC	short BAD_ACC 		; Error if found
 17190 000027A6 803E[4A03]00            	CMP	byte [FAILERR],0
 17191 000027AB 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 17192 000027AD A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 17193 000027B0 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 17194 000027B4 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 17195                                  
 17196                                  	;mov	al,[RENAMEDMA+32]
 17197 000027B6 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 17198 000027B9 A810                    	TEST	AL,attr_directory ; 10h
 17199 000027BB 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 17200                                  					; otherwise the . and .. entries get
 17201                                  					; wiped.
 17202 000027BD A2[6B05]                	MOV	[ATTRIB],AL
 17203 000027C0 8C1E[A005]              	MOV	[THISSFT+2],DS
 17204                                  
 17205                                  ;hkn; AUXSTACK is in DOSDATA
 17206                                  	;mov	si,RENAMEDMA+145h
 17207 000027C4 BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 17208 000027C7 8936[9E05]              	MOV	[THISSFT],SI
 17209                                  	;mov	word [SI+2],2
 17210 000027CB C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17211 000027D0 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 17212 000027D2 E8B220                  	call	RENAME_MAKE		; This is in mknode
 17213 000027D5 7303                    	JNC	short GOT_DEST
 17214                                  BAD_ACCJ:
 17215 000027D7 E95DFF                  	JMP	BAD_ACC
 17216                                  
 17217                                  GOT_DEST:
 17218 000027DA 53                      	push	bx
 17219 000027DB C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 17220 000027DF E8E349                  	call	ShareEnd		; we need to remove it.
 17221 000027E2 5B                      	pop	bx
 17222                                  
 17223                                  ; A zero length entry with the correct new name has now been made at
 17224                                  ;   [CURBUF+2]:BX.
 17225                                  
 17226 000027E3 C43E[E205]              	LES	DI,[CURBUF]
 17227                                  
 17228                                  	; MSDOS 6.0
 17229                                  	;test	byte [es:di+5],40h
 17230 000027E7 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17231                                  					;LB. if already dirty		  ;AN000;
 17232 000027EC 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 17233 000027EE E81732                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17234                                  	;or	byte [es:di+5],40h
 17235 000027F1 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17236                                  yesdirty1:
 17237 000027F6 89DF                    	MOV	DI,BX
 17238                                  	;add	di,11
 17239 000027F8 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 17240                                  
 17241                                  ;hkn; RENAMEDMA is in DOSDATA
 17242                                  	;mov	si,[RENAMEDMA+32]
 17243 000027FB BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 17244                                  	;mov	cx,21
 17245 000027FE B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 17246 00002801 F3A4                    	REP	MOVSB
 17247 00002803 E87A00                  	CALL	GET_SOURCE
 17248 00002806 7275                    	JC	short RENAME_OVER
 17249 00002808 89DF                    	MOV	DI,BX
 17250 0000280A 8E06[E405]              	MOV	ES,[CURBUF+2]
 17251 0000280E B0E5                    	MOV	AL,DIRFREE ; 0E5h
 17252 00002810 AA                      	STOSB				; "free" the source
 17253 00002811 EB13                    	JMP	SHORT DIRTY_IT
 17254                                  
 17255                                  SIMPLE_RENAME:
 17256 00002813 E86A00                  	CALL	GET_SOURCE		; Get the source back
 17257 00002816 7265                    	JC	short RENAME_OVER
 17258 00002818 89DF                    	MOV	DI,BX
 17259 0000281A 8E06[E405]              	MOV	ES,[CURBUF+2]
 17260                                  
 17261                                  ;hkn; NAME1 is in DOSDATA
 17262 0000281E BE[4B05]                	MOV	SI,NAME1		; New Name
 17263 00002821 B90B00                  	MOV	CX,11
 17264 00002824 F3A4                    	REP	MOVSB
 17265                                  DIRTY_IT:
 17266 00002826 8B3E[E205]              	MOV	DI,[CURBUF]
 17267                                  
 17268                                  	; MSDOS 6.0
 17269 0000282A 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17270                                  					;LB. if already dirty		  ;AN000;
 17271 0000282F 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 17272 00002831 E8D431                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17273                                  	
 17274 00002834 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17275                                  
 17276                                  ;------------------------------------------------------------------------------
 17277                                  ; Check if the source is a directory of file. If directory rename it to the
 17278                                  ; the new name in the Fastopen cache buffer. If file name it has been
 17279                                  ; previously deleted.
 17280                                  ;------------------------------------------------------------------------------
 17281                                  
 17282                                  yesdirty2:
 17283                                  	; MSDOS 6.0
 17284 00002839 56                      	PUSH	SI
 17285 0000283A C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 17286 0000283E 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 17287 00002841 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 17288 00002845 7403                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 17289 00002847 E804FE                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 17290                                  	; 31/01/2024
 17291                                  	;POP	SI
 17292                                  	;JMP	SHORT NOT_DIRTY1
 17293                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 17294 0000284A 5E                      	POP	SI
 17295                                  NOT_DIRTY1:				;;BN00X
 17296                                  NEXT_SOURCE:
 17297                                  ;hkn; RENAMEDMA is in DOSDATA
 17298 0000284B BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 17299                                  
 17300                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 17301                                  ; to enter it before going to RENAME_Next.
 17302                                  
 17303 0000284E E896EA                  	call	ECritDisk
 17304 00002851 C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 17305                                  				  ;  to FF when we made the prev new file).
 17306 00002856 E89305                  	call	RENAME_NEXT
 17307                                  
 17308                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 17309                                  ; we were before.
 17310                                  
 17311 00002859 7222                    	JC	short RENAME_OVER
 17312                                  
 17313                                  	;lea	si,[bx+26]
 17314 0000285B 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 17315 0000285E E872FD                  	call	REN_DEL_Check
 17316 00002861 7306                    	JNC	short REN_OK2
 17317 00002863 B82000                  	MOV	AX,error_sharing_violation ; 20h
 17318                                  jmp_to_rename_clean: ; 28/12/2022
 17319 00002866 E9D2FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 17320                                  
 17321                                  ;------------------------------------------------------------------------------
 17322                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 17323                                  ; if directory, rename directory name in the Fastopen cache.
 17324                                  ;-----------------------------------------------------------------------------
 17325                                  
 17326                                  REN_OK2:
 17327                                  	; MSDOS 6.0
 17328                                  	;mov	al,[RENAMEDMA+32]
 17329 00002869 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 17330                                  	;test	al,10h
 17331 0000286C A810                    	TEST	AL,attr_directory	;;BN00X directory
 17332 0000286E 7408                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 17333                                  	
 17334                                  	; MSDOS 3.3 & MSDOS 6.0
 17335 00002870 E8CDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 17336                                  jmp_to_builddest: ; 28/12/2022
 17337                                  	; 31/01/2024
 17338 00002873 16                      	push	ss
 17339 00002874 07                      	pop	es
 17340 00002875 E9FEFE                  	JMP	BUILDDEST		;;BN00X
 17341                                  
 17342                                  	; MSDOS 6.0
 17343                                  Ren_Directory:
 17344 00002878 E8D3FD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 17345                                  	;JMP	BUILDDEST
 17346                                  	; 28/12/2022
 17347 0000287B EBF6                    	jmp	short jmp_to_builddest
 17348                                  
 17349                                  RENAME_OVER:
 17350 0000287D F8                      	CLC
 17351                                  	;JMP	RENAME_CLEAN ; 10/08/2018
 17352                                  	; 28/12/2022
 17353 0000287E EBE6                    	jmp	short jmp_to_rename_clean
 17354                                  
 17355                                  ;----------------------------------------------------------------------------
 17356                                  ; Procedure: GET_SOURCE
 17357                                  ;
 17358                                  ; Inputs:
 17359                                  ;	RENAMEDMA has source info
 17360                                  ; Function:
 17361                                  ;	Re-find the source
 17362                                  ; Output:
 17363                                  ;	[CURBUF] set
 17364                                  ;	[CURBUF+2]:BX points to entry
 17365                                  ;	Carry set if error (currently user FAILed to I 24)
 17366                                  ; DS preserved, others destroyed
 17367                                  ;----------------------------------------------------------------------------
 17368                                  
 17369                                  GET_SOURCE:
 17370 00002880 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 17371 00002884 C42E[8A05]              	LES	BP,[THISDPB]
 17372 00002888 E83115                  	call	SETDIRSRCH
 17373 0000288B 7214                    	JC	short gs_ret_label	; retc
 17374 0000288D E80118                  	call	STARTSRCH
 17375 00002890 A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 17376                                  	;call	GETENT
 17377                                  	; 18/12/2022
 17378 00002893 E9F914                  	jmp	GETENT
 17379                                  ;gs_ret_label:
 17380                                  	;retn
 17381                                  
 17382                                  ; MSDOS 6.0 
 17383                                  ;---------------------------------------------------------------------------
 17384                                  ;Procedure: NEW_RENAME
 17385                                  ;
 17386                                  ;Input: DS:SI -> raw string with ?
 17387                                  ;	ES:DI -> destination string
 17388                                  ;	DS:BX -> source string
 17389                                  ;Function: replace ? chars of raw string with chars in source string and
 17390                                  ;	   put in destination string
 17391                                  ;Output: ES:DI-> new string
 17392                                  ;---------------------------------------------------------------------------
 17393                                  
 17394                                  NEW_RENAME:
 17395                                  	; 17/05/2019 - Retro DOS v4.0
 17396                                  NEWNAM:
 17397                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 17398 00002896 AC                      	LODSB
 17399 00002897 3C3F                    	CMP	AL,"?" ; 3Fh
 17400 00002899 7502                    	JNZ	short NOCHG
 17401 0000289B 8A07                    	MOV	AL,[BX] 		; Get replace char
 17402                                  NOCHG:
 17403 0000289D AA                      	STOSB
 17404 0000289E 43                      	INC	BX			; Next replace char
 17405 0000289F E2F5                    	LOOP	NEWNAM
 17406                                  	; MSDOS 6.0
 17407                                  gs_ret_label:	; 18/12/2022
 17408 000028A1 C3                      	retn
 17409                                  
 17410                                  ;============================================================================
 17411                                  ; FINFO.ASM, MSDOS 6.0, 1991
 17412                                  ;============================================================================
 17413                                  ; 08/08/2018 - Retro DOS v3.0
 17414                                  ; 17/05/2019 - Retro DOS v4.0
 17415                                  
 17416                                  ;**	Low level routines for returning file information and setting file
 17417                                  ;	attributes
 17418                                  ;
 17419                                  ;	GET_FILE_INFO
 17420                                  ;	SET_FILE_ATTRIBUTE
 17421                                  ;
 17422                                  ;	Modification history:
 17423                                  ;
 17424                                  ;	    Created: ARR 30 March 1983
 17425                                  ;
 17426                                  ;	M025: Return access_denied if attempting to set
 17427                                  ;	      attribute of root directory.
 17428                                  ;
 17429                                  
 17430                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 17431                                  
 17432                                  ;---------------------------------------------------------------------------
 17433                                  ; Procedure Name : GET_FILE_INFO
 17434                                  ;
 17435                                  ; Inputs:
 17436                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17437                                  ;		terminated)
 17438                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17439                                  ;		( = -1 if current dir not involved, else
 17440                                  ;		 Points to first char after last "/" of current dir part)
 17441                                  ;	[THISCDS] Points to CDS being used
 17442                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17443                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17444                                  ; Function:
 17445                                  ;	Get Information about a file
 17446                                  ; Returns:
 17447                                  ;	CARRY CLEAR
 17448                                  ;	    AX = Attribute of file
 17449                                  ;	    CX = Time stamp of file
 17450                                  ;	    DX = Date stamp of file
 17451                                  ;	    BX:DI = Size of file (32 bit)
 17452                                  ;	CARRY SET
 17453                                  ;	    AX is error code
 17454                                  ;		error_file_not_found
 17455                                  ;			Last element of path not found
 17456                                  ;		error_path_not_found
 17457                                  ;			Bad path (not in curr dir part if present)
 17458                                  ;		error_bad_curr_dir
 17459                                  ;			Bad path in current directory part of path
 17460                                  ; DS preserved, others destroyed
 17461                                  ;---------------------------------------------------------------------------
 17462                                  
 17463                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17464                                  
 17465                                  GET_FILE_INFO:
 17466                                  
 17467                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 17468                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17469                                  
 17470 000028A2 E889E9                  	call	TestNet
 17471 000028A5 7306                    	JNC	short LOCAL_INFO
 17472                                  
 17473                                  ;IF NOT Installed
 17474                                  ;	transfer NET_GET_FILE_INFO
 17475                                  ;ELSE
 17476                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 17477                                  ;	INT	2FH
 17478                                  ;	return
 17479                                  
 17480 000028A7 B80F11                  	mov     ax, 110Fh
 17481 000028AA CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 17482                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17483                                  			; SDA CDS pointer -> current directory
 17484                                  			; Return: CF set on error, AX = file attributes
 17485 000028AC C3                      	retn
 17486                                  ;ENDIF
 17487                                  
 17488                                  LOCAL_INFO:
 17489 000028AD E837EA                  	call	ECritDisk
 17490 000028B0 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17491                                  	; MSDOS 3.3
 17492                                  	;call	GETPATH
 17493                                  	; MSDOS 6.0
 17494 000028B5 E8D700                  	call	GET_FAST_PATH
 17495                                  	; MSDOS 3.3 & MSDOS 6.0
 17496 000028B8 7312                    	JNC	short info_check_dev
 17497                                  NO_PATH:
 17498 000028BA 750B                    	JNZ	short bad_path1
 17499 000028BC 08C9                    	OR	CL,CL
 17500 000028BE 7407                    	JZ	short bad_path1
 17501                                  info_no_file:
 17502 000028C0 B80200                  	MOV	AX,error_file_not_found
 17503                                  BadRet:
 17504 000028C3 F9                      	STC
 17505                                  JustRet:
 17506                                  	;call	LCritDisk
 17507                                  	;retn
 17508                                  	; 18/12/2022
 17509 000028C4 E93BEA                  	jmp	LCritDisk
 17510                                  
 17511                                  bad_path1:
 17512 000028C7 B80300                  	MOV	AX,error_path_not_found
 17513 000028CA EBF7                    	jmp	short BadRet
 17514                                  
 17515                                  info_check_dev:
 17516 000028CC 08E4                    	OR	AH,AH
 17517 000028CE 78F0                    	JS	short info_no_file	; device
 17518                                  
 17519                                  	; MSDOS 6.0
 17520                                  ;SR;
 17521                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 17522                                  ;for a root dir
 17523                                  
 17524 000028D0 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 17525 000028D5 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 17526                                  
 17527 000028D7 30E4                    	xor	ah,ah
 17528 000028D9 B010                    	mov	al,attr_directory ; 10h
 17529                                  	;clc
 17530                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17531                                  	; (DOSCODE:683Eh)
 17532                                  	; 16/12/2022
 17533                                  	;clc
 17534 000028DB EBE7                    	jmp	short JustRet
 17535                                  
 17536                                  not_root:
 17537                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17538 000028DD 1E                      	PUSH	DS
 17539 000028DE 8E1E[E405]              	MOV	DS,[CURBUF+2]
 17540 000028E2 89DE                    	MOV	SI,BX
 17541 000028E4 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 17542 000028E6 89DF                    	MOV	DI,BX
 17543                                  	;mov	cx,[si+16h]
 17544 000028E8 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 17545                                  	;mov	dx,[si+18h]
 17546 000028EB 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 17547 000028EE 30E4                    	XOR	AH,AH
 17548                                  	;mov	al,[si+0Bh]
 17549 000028F0 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 17550                                  	;test	al,10h
 17551 000028F3 A810                    	TEST	AL,attr_directory
 17552 000028F5 7506                    	JNZ	short NO_SIZE
 17553                                  	;mov	di,[si+1Ch]
 17554 000028F7 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 17555                                  	;mov	bx,[si+1Eh]
 17556 000028FA 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 17557                                  NO_SIZE:
 17558 000028FD 1F                      	POP	DS
 17559                                  	;CLC
 17560                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17561                                  	; (DOSCODE:6864h)
 17562                                  	; 16/12/2022
 17563                                  	;clc
 17564 000028FE EBC4                    	jmp	short JustRet
 17565                                  
 17566                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17567                                  ;-------------------------------------------------------------------------------
 17568                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17569                                  ; Inputs:
 17570                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17571                                  ;		terminated)
 17572                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17573                                  ;		( = -1 if current dir not involved, else
 17574                                  ;		 Points to first char after last "/" of current dir part)
 17575                                  ;	[THISCDS] Points to CDS being used
 17576                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17577                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17578                                  ;	AX is new attributes to give to file
 17579                                  ; Function:
 17580                                  ;	Set File Attributes
 17581                                  ; Returns:
 17582                                  ;	CARRY CLEAR
 17583                                  ;	    No error
 17584                                  ;	CARRY SET
 17585                                  ;	    AX is error code
 17586                                  ;		error_file_not_found
 17587                                  ;			Last element of path not found
 17588                                  ;		error_path_not_found
 17589                                  ;			Bad path (not in curr dir part if present)
 17590                                  ;		error_bad_curr_dir
 17591                                  ;			Bad path in current directory part of path
 17592                                  ;		error_access_denied
 17593                                  ;			Attempt to set an attribute which cannot be set
 17594                                  ;			(attr_directory, attr_volume_ID)
 17595                                  ;		error_sharing_violation
 17596                                  ;			Sharing mode of file did not allow the change
 17597                                  ;			(this request requires exclusive write/read access)
 17598                                  ;			(INT 24H generated)
 17599                                  ; DS preserved, others destroyed
 17600                                  ;----------------------------------------------------------------------------
 17601                                  
 17602                                  SET_FILE_ATTRIBUTE:
 17603                                  
 17604                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17605                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17606                                  
 17607 00002900 A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17608 00002903 7414                    	JZ	short set_look
 17609                                  _BAD_ACC:
 17610 00002905 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17611 0000290A C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17612 0000290F C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17613 00002914 B80500                  	MOV	AX,error_access_denied ; 5
 17614 00002917 F9                      	STC
 17615 00002918 C3                      	retn
 17616                                  
 17617                                  set_look:
 17618 00002919 E812E9                  	call	TestNet
 17619 0000291C 7308                    	JNC	short LOCAL_SET
 17620                                  
 17621                                  ;IF NOT Installed
 17622                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17623                                  ;ELSE
 17624 0000291E 50                      	PUSH	AX
 17625                                  	
 17626                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17627                                  	;INT	2FH
 17628                                  
 17629 0000291F B80E11                  	mov     ax, 110Eh
 17630 00002922 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17631                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17632                                  			; SDA CDS pointer -> current directory
 17633                                  			; STACK: WORD new file attributes
 17634                                  			; Return: CF set on error
 17635                                  
 17636 00002924 5B                      	POP	BX			; clean stack
 17637 00002925 C3                      	retn
 17638                                  ;ENDIF
 17639                                  
 17640                                  LOCAL_SET:
 17641 00002926 E8BEE9                  	call	ECritDisk
 17642 00002929 50                      	PUSH	AX			; Save new attributes
 17643 0000292A C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17644 0000292F E8E714                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17645 00002932 7308                    	JNC	short set_check_device
 17646 00002934 5B                      	POP	BX			; Clean stack (don't zap AX)
 17647 00002935 EB83                    	JMP	short NO_PATH
 17648                                  
 17649                                  	; MSDOS 6.0
 17650                                  cannot_set_root:			; M025:
 17651 00002937 B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17652                                  	;stc				; M025: to set attr. of root
 17653                                  	;jmp	short OK_BYE		; M025:
 17654                                  	; 01/02/2024
 17655 0000293A EB87                    	jmp	short BadRet
 17656                                  
 17657                                  set_check_device:
 17658 0000293C 08E4                    	OR	AH,AH
 17659 0000293E 7906                    	JNS	short set_check_share
 17660 00002940 58                      	POP	AX
 17661 00002941 E8BEE9                  	call	LCritDisk
 17662 00002944 EBBF                    	JMP	short _BAD_ACC 		; device
 17663                                  
 17664                                  set_check_share:
 17665 00002946 58                      	POP	AX			; Get new attributes
 17666                                  
 17667                                  	; MSDOS 6.0
 17668 00002947 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17669 0000294C 74E9                    	je	short cannot_set_root	; M025: Y: return error
 17670                                  
 17671                                  	; MSDOS 3.3 & MSDOS 6.0
 17672 0000294E E882FC                  	call	REN_DEL_Check
 17673 00002951 7305                    	JNC	short set_do
 17674 00002953 B82000                  	MOV	AX,error_sharing_violation ; 32
 17675 00002956 EB34                    	jmp	short OK_BYE
 17676                                  
 17677                                  set_do:
 17678                                  	; MSDOS 3.3 & MSDOS 6.0
 17679 00002958 C43E[E205]              	LES	DI,[CURBUF]
 17680 0000295C 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17681 00002961 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17682                                  
 17683                                  	; MSDOS 6.0
 17684 00002965 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17685                                  					;LB. if already dirty		  ;AN000;
 17686 0000296A 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17687 0000296C E89930                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17688                                  	
 17689 0000296F 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17690                                  yesdirty3:
 17691 00002974 A0[7605]                	MOV	AL,[THISDRV]
 17692                                  ;;;; 10/1/86 F.C update fastopen cache
 17693 00002977 52                      	PUSH	DX
 17694 00002978 57                      	PUSH	DI
 17695 00002979 B400                    	MOV	AH,0		  ; dir entry update
 17696 0000297B 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17697 0000297D 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17698 0000297F E8E6FC                  	call	FastOpen_Update
 17699 00002982 5F                      	POP	DI
 17700 00002983 5A                      	POP	DX
 17701                                  ;;;; 9/11/86 F.C update fastopen cache
 17702 00002984 E87F2F                  	call	FLUSHBUF
 17703 00002987 7303                    	JNC	short OK_BYE
 17704 00002989 B80200                  	MOV	AX,error_file_not_found
 17705                                  OK_BYE:
 17706                                  	;call	LCritDisk
 17707                                  	;retn
 17708                                  	; 16/12/2022
 17709 0000298C E973E9                  	jmp	LCritDisk
 17710                                  
 17711                                  	; 17/05/2019 - Retro DOS v4.0
 17712                                  
 17713                                  	; MSDOS 6.0
 17714                                  GET_FAST_PATH:
 17715                                  ;hkn; use SS override for FastOpenFlg
 17716 0000298F 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17717                                  					;FO. trigger fastopen	;AN000;
 17718 00002995 E88114                  	call	GETPATH
 17719 00002998 9C                      	PUSHF			 	;FO.			;AN000;
 17720 00002999 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17721                                  					;FO. clear all fastopen flags ;AN000;
 17722 0000299F 9D                      	POPF				;FO.			;AN000;
 17723 000029A0 C3                      	retn
 17724                                  
 17725                                  ;============================================================================
 17726                                  ; DUP.ASM, MSDOS 6.0, 1991
 17727                                  ;============================================================================
 17728                                  ; 08/08/2018 - Retro DOS v3.0
 17729                                  ; 17/05/2019 - Retro DOS v4.0
 17730                                  
 17731                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17732                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17733                                  ;
 17734                                  ;	DOS_DUP
 17735                                  ;
 17736                                  ;	Modification history:
 17737                                  ;
 17738                                  ;	  Created: ARR 30 March 1983
 17739                                  
 17740                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17741                                  ;---------------------------------------------------------------------------
 17742                                  ; Procedure Name : DOS_DUP
 17743                                  ;
 17744                                  ; Inputs:
 17745                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17746                                  ;		(a non net SFT is OK, in this case the ref
 17747                                  ;		 count is simply incremented)
 17748                                  ; Function:
 17749                                  ;	Signal to the devices that a logical open is occurring
 17750                                  ; Returns:
 17751                                  ;	ES:DI point to SFT
 17752                                  ;    Carry clear
 17753                                  ;	SFT ref_count is incremented
 17754                                  ; Registers modified: None.
 17755                                  ; NOTE:
 17756                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17757                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17758                                  ;	that time.
 17759                                  ;---------------------------------------------------------------------------
 17760                                  
 17761                                  DOS_DUP:
 17762                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17763                                  
 17764                                  	; MSDOS 6.0
 17765 000029A1 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17766 000029A6 26C43E[9E05]            	les	di,[es:THISSFT]
 17767                                  
 17768                                  	;Entry	Dos_Dup_Direct
 17769                                  DOS_Dup_Direct:
 17770 000029AB E899E8                  	call	IsSFTNet
 17771 000029AE 7503                    	JNZ	short DO_INC
 17772 000029B0 E80B1B                  	call	DEV_OPEN_SFT
 17773                                  DO_INC:
 17774                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17775 000029B3 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17776                                  					;   we're in big trouble anyway)
 17777 000029B6 C3                      	retn
 17778                                  
 17779                                  ;============================================================================
 17780                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17781                                  ;============================================================================
 17782                                  ; 08/08/2018 - Retro DOS v3.0
 17783                                  ; 18/05/2019 - Retro DOS v4.0
 17784                                  
 17785                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17786                                  ;NAME	DOS_CREATE
 17787                                  ;----------------------------------------------------------------------------
 17788                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17789                                  ;
 17790                                  ;	DOS_CREATE
 17791                                  ;	DOS_CREATE_NEW
 17792                                  ;	SET_MKND_ERR
 17793                                  ;	SET_Media_ID
 17794                                  ;	SET_EXT_Mode
 17795                                  ;
 17796                                  ;	Revision history:
 17797                                  ;
 17798                                  ;	    A000 version 4.00	  Jan. 1988
 17799                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17800                                  
 17801                                  ;Installed = TRUE
 17802                                  
 17803                                  ;	i_need	THISSFT,DWORD
 17804                                  ;	i_need	THISCDS,DWORD
 17805                                  ;	I_need	EXTERR,WORD
 17806                                  ;	I_Need	ExtErr_locus,BYTE
 17807                                  ;	I_need	JShare,DWORD
 17808                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17809                                  ;	I_need	SATTRIB,BYTE
 17810                                  ;	I_need	CALLVIDM,DWORD
 17811                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17812                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17813                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17814                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17815                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17816                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17817                                  
 17818                                  ;***	DOS_CREATE - Create a File
 17819                                  ;----------------------------------------------------------------------------
 17820                                  ;	DOS_Create is called to create the specified file, truncating
 17821                                  ;	the old one if it exists.
 17822                                  ;
 17823                                  ;	ENTRY	AX is Attribute to create
 17824                                  ;		(ds) = DOSDATA
 17825                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17826                                  ;			terminated)
 17827                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17828                                  ;			( = -1 if current dir not involved, else
 17829                                  ;			 Points to first char after last "/" of current dir part)
 17830                                  ;		[THISCDS] Points to CDS being used
 17831                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17832                                  ;		[THISSFT] Points to SFT to fill in if file created
 17833                                  ;			(sf_mode field set so that FCB may be detected)
 17834                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17835                                  ;
 17836                                  ;	EXIT	sf_ref_count is NOT altered
 17837                                  ;		CARRY CLEAR
 17838                                  ;		    THISSFT filled in.
 17839                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17840                                  ;		CARRY SET
 17841                                  ;		    AX is error code
 17842                                  ;			error_path_not_found
 17843                                  ;				Bad path (not in curr dir part if present)
 17844                                  ;			error_bad_curr_dir
 17845                                  ;				Bad path in current directory part of path
 17846                                  ;			error_access_denied
 17847                                  ;				Attempt to re-create read only file , or
 17848                                  ;				create a second volume id or create a dir
 17849                                  ;			error_sharing_violation
 17850                                  ;				The sharing mode was correct but not allowed
 17851                                  ;				generates an INT 24
 17852                                  ;	USES	all but DS
 17853                                  ;----------------------------------------------------------------------------
 17854                                  
 17855                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17856                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17857                                  
 17858                                  DOS_CREATE:
 17859                                  	; 18/05/2019 - Retro DOS v4.0
 17860                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17861                                  
 17862                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17863                                  ;hkn; this point.
 17864                                  
 17865 000029B7 30E4                    	XOR	AH,AH		; Truncate is OK
 17866                                  
 17867                                  ;	Enter here from Dos_Create_New
 17868                                  ;
 17869                                  ;	(ah) = 0 iff truncate OK
 17870                                  
 17871                                  Create_inter:
 17872 000029B9 A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17873                                  				; Mask out any meaningless bits
 17874 000029BB 7511                    	JNZ	short AttErr
 17875 000029BD A808                    	TEST	AL,attr_volume_id
 17876 000029BF 7407                    	JZ	short NoReset
 17877                                  	
 17878                                  	; MSDOS 6.0
 17879                                  	; 16/12/2022
 17880 000029C1 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17881                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17882                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17883                                  	
 17884 000029C6 B008                    	MOV	AL,attr_volume_id ; 8
 17885                                  NoReset:
 17886 000029C8 0C20                    	OR	AL,attr_archive ; File changed  ; 20h
 17887 000029CA A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17888 000029CC 740A                    	JZ	short ATT_OK
 17889                                  AttErr:
 17890 000029CE B80500                  	MOV	AX,5		; Attribute problem
 17891 000029D1 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17892 000029D6 EB62                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17893                                  				   ;	attr_device to be set.
 17894                                  ATT_OK:
 17895 000029D8 C43E[9E05]              	LES	DI,[THISSFT]
 17896 000029DC 06                      	PUSH	ES
 17897 000029DD C436[A205]              	LES	SI,[THISCDS]
 17898 000029E1 83FEFF                  	CMP	SI,-1
 17899 000029E4 751B                    	JNE	short TEST_RE_NET
 17900                                  
 17901                                  ;	No CDS, it must be redirected.
 17902                                  
 17903 000029E6 07                      	POP	ES
 17904                                  
 17905                                  	; MSDOS 6.0
 17906                                  ;Extended open hooks
 17907                                  	;test	byte [EXTOPEN_ON],1
 17908 000029E7 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17909 000029EC 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17910                                  IFS_extopen:				    ;AN000;EO.
 17911 000029EE 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17912                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17913 000029EF B82E11                  	mov	ax,112Eh
 17914                                  NOEXTOP2:	; 01/02/2024 (PCDOS 7.1 IBMDOS.COM)
 17915 000029F2 CD2F                    	INT	2FH			    ;AN000;EO.
 17916 000029F4 5B                      	POP	BX			    ;AN000;EO. trash bx
 17917 000029F5 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17918 000029FA C3                      	retn				    ;AN000;EO.
 17919                                  NOEXTOP:				    ;AN000;
 17920                                  ;Extended open hooks
 17921                                  
 17922                                  ;IF NOT Installed
 17923                                  ;	transfer NET_SEQ_CREATE
 17924                                  ;ELSE
 17925 000029FB 50                      	PUSH	AX
 17926                                  
 17927                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17928                                  	;INT	2FH
 17929                                  
 17930 000029FC B81811                  	mov	ax,1118h
 17931                                  	; 01/02/2024
 17932                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17933                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17934                                  			; SDA first filename pointer -> fully-qualified name of file
 17935                                  			; STACK: WORD file creation mode???
 17936                                  
 17937                                  	;POP	BX			; BX is trashed anyway
 17938                                  	;retn
 17939 000029FF EBF1                    	jmp	short NOEXTOP2 ; 01/02/2024
 17940                                  ;ENDIF
 17941                                  
 17942                                  ;	We have a CDS. See if it's network
 17943                                  
 17944                                  TEST_RE_NET:
 17945                                  	;;test	word [es:si+43h],8000h
 17946                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17947                                  	; 07/12/2022
 17948                                  	;test	byte [es:si+44h],80h
 17949                                  	; 17/12/2022
 17950 00002A01 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17951 00002A06 07                      	POP	ES
 17952 00002A07 7417                    	JZ	short LOCAL_CREATE
 17953                                  
 17954                                  	; MSDOS 6.0
 17955 00002A09 E8BD00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17956 00002A0C 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17957                                  	;;or	word [es:di+2],2
 17958                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17959                                  	; 17/12/2022
 17960 00002A0E 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17961                                  
 17962                                  ;Extended open hooks
 17963                                  dochk:
 17964 00002A13 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17965 00002A18 75D4                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17966                                  ;Extended open hooks
 17967                                  
 17968                                  ;IF NOT Installed
 17969                                  ;	transfer NET_CREATE
 17970                                  ;ELSE
 17971 00002A1A 50                      	PUSH	AX
 17972                                  	
 17973                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17974                                  	;INT	2FH
 17975                                  	
 17976 00002A1B B81711                  	mov	ax,1117h
 17977                                  	
 17978                                  	; 01/02/2024
 17979                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17980                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17981                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17982                                  			; SDA CDS pointer -> current directory
 17983                                  			; Return: CF set on error
 17984                                  
 17985                                  	;POP	BX			; BX is trashed anyway
 17986                                  ;nomore:
 17987                                  	;retn
 17988 00002A1E EBD2                    	jmp	short NOEXTOP2 ; 01/02/2024
 17989                                  ;ENDIF
 17990                                  
 17991                                  ;**	It's a local create. We have a local CDS for it.
 17992                                  
 17993                                  LOCAL_CREATE:
 17994                                  	; MSDOS 6.0
 17995 00002A20 E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17996 00002A23 7205                    	JC	short setdone	;AN000;EO.
 17997                                  	
 17998                                  	; MSDOS 3.3 & MSDOS 6.0
 17999                                  	; 17/12/2022
 18000                                  	;;or	word [es:di+2],2
 18001                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 18002                                  	;or	byte [es:di+2],2
 18003 00002A25 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 18004                                  setdone:
 18005 00002A2A E8BAE8                  	call	ECritDisk
 18006 00002A2D E8331E                  	call	MakeNode
 18007 00002A30 7317                    	JNC	short Create_ok
 18008 00002A32 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 18009 00002A37 E8C8E8                  	call	LCritDisk
 18010                                  
 18011                                  	;entry	SET_MKND_ERR
 18012                                  SET_MKND_ERR:
 18013                                  
 18014                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 18015                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 18016                                  
 18017                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 18018 00002A3A BB[412A]                	MOV     BX,CRTERRTAB
 18019                                  	;XLAT  ; MSDOS 3.3
 18020                                  	; 18/05/2019 - Retro DOS v4.0
 18021 00002A3D 2E                      	CS
 18022 00002A3E D7                      	XLAT
 18023                                  CreatBadRet:
 18024 00002A3F F9                      	STC
 18025 00002A40 C3                      	retn
 18026                                  
 18027                                  ; 13/05/2019 - Retro DOS v4.0
 18028                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 18029                                  ; ---------------------------------------------------------------------------
 18030                                  
 18031                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 18032                                  
 18033                                  ; 17/07/2018 - Retro DOS v3.0
 18034                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 18035                                  
 18036                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 18037                                  ;	db	0,5,52h,50h,3,5,20h
 18038                                  
 18039                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 18040                                  ;	db	0,5,52h,50h,3,5,20h,2
 18041                                  
 18042                                  ; 08/08/2018
 18043                                  
 18044                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 18045 00002A41 00                      	DB	0			; none
 18046 00002A42 05                      	DB	error_access_denied	; MakeNode error 1
 18047 00002A43 52                      	DB	error_cannot_make	; MakeNode error 2
 18048 00002A44 50                      	DB	error_file_exists	; MakeNode error 3
 18049 00002A45 03                      	DB	error_path_not_found	; MakeNode error 4
 18050 00002A46 05                      	DB	error_access_denied	; MakeNode error 5
 18051 00002A47 20                      	DB	error_sharing_violation ; MakeNode error 6
 18052                                  	; MSDOS 6.0
 18053 00002A48 02                      	DB	error_file_not_found	; MakeNode error 7
 18054                                  
 18055                                  ; ---------------------------------------------------------------------------
 18056                                  
 18057                                  ; We have just created a new file. This results in the truncation of old
 18058                                  ; files. We must inform the sharer to slash all the open SFT's for this
 18059                                  ; file to the current size.
 18060                                  
 18061                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 18062                                  ; drive number to force a Build BPB after Media Check.
 18063                                  
 18064                                  ;;; FASTOPEN 8/29/86
 18065                                  Create_ok:
 18066 00002A49 E8F4FB                  	call	FastOpen_Delete
 18067                                  ;;; FASTOPEN 8/29/86
 18068 00002A4C A0[6D05]                	mov	al,[SATTRIB]
 18069 00002A4F A808                    	test	al,attr_volume_id
 18070 00002A51 741C                    	jz	short NoVolLabel
 18071 00002A53 C43E[A205]              	LES	DI,[THISCDS]
 18072                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 18073 00002A57 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 18074 00002A5A 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 18075 00002A5D 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 18076                                  	
 18077                                  	; 18/05/2019 - Retro DOS v4.0
 18078                                  
 18079                                  	; MSDOS 6.0
 18080 00002A61 B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 18081 00002A63 E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 18082                                  	
 18083 00002A66 E87EE8                  	call	ECritDisk
 18084 00002A69 E8272B                  	call	FATREAD_CDS		; force a media check
 18085 00002A6C E893E8                  	call	LCritDisk
 18086                                  
 18087                                  NoVolLabel:
 18088 00002A6F B80200                  	MOV	ax,2
 18089 00002A72 C43E[9E05]              	LES	DI,[THISSFT]
 18090                                  ;if installed
 18091                                  	;call	JShare + 14 * 4
 18092 00002A76 FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 18093                                  ;else
 18094                                  ;	Call	ShSU
 18095                                  ;endif
 18096 00002A7A E885E8                  	call	LCritDisk
 18097 00002A7D E94901                  	jmp	SET_SFT_MODE
 18098                                  
 18099                                  ;---------------------------------------------------------------------------
 18100                                  ; Procedure Name : Dos_Create_New
 18101                                  ;
 18102                                  ; Inputs:
 18103                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18104                                  ;		terminated)
 18105                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18106                                  ;		( = -1 if current dir not involved, else
 18107                                  ;		 Points to first char after last "/" of current dir part)
 18108                                  ;	[THISCDS] Points to CDS being used
 18109                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18110                                  ;	[THISSFT] Points to SFT to fill in if file created
 18111                                  ;		(sf_mode field set so that FCB may be detected)
 18112                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18113                                  ;	AX is Attribute to create
 18114                                  ; Function:
 18115                                  ;	Try to create the specified file truncating an old one that exists
 18116                                  ; Outputs:
 18117                                  ;	sf_ref_count is NOT altered
 18118                                  ;	CARRY CLEAR
 18119                                  ;	    THISSFT filled in.
 18120                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 18121                                  ;	CARRY SET
 18122                                  ;	    AX is error code
 18123                                  ;		error_path_not_found
 18124                                  ;			Bad path (not in curr dir part if present)
 18125                                  ;		error_bad_curr_dir
 18126                                  ;			Bad path in current directory part of path
 18127                                  ;		error_access_denied
 18128                                  ;			Create a second volume id or create a dir
 18129                                  ;		error_file_exists
 18130                                  ;			Already a file by this name
 18131                                  ; DS preserved, others destroyed
 18132                                  ;---------------------------------------------------------------------------
 18133                                  
 18134                                  DOS_Create_New:
 18135 00002A80 B401                    	MOV	AH,1		; Truncate is NOT OK
 18136 00002A82 E934FF                  	JMP	Create_inter
 18137                                  
 18138                                  ; MSDOS 6.0
 18139                                  ;---------------------------------------------------------------------------
 18140                                  ; Procedure Name : Set_Media_ID
 18141                                  ;
 18142                                  ; Inputs:
 18143                                  ;	NAME1= Volume ID
 18144                                  ;	BH= 0, delete volume id
 18145                                  ;	    1, set new volume id
 18146                                  ;	DS= DOSGROUP
 18147                                  ; Function:
 18148                                  ;	Set Volume ID to DOS 4.00 Boot record.
 18149                                  ; Outputs:
 18150                                  ;	CARRY CLEAR
 18151                                  ;	    volume id set
 18152                                  ;	CARRY SET
 18153                                  ;	    AX is error code
 18154                                  ;---------------------------------------------------------------------------
 18155                                  
 18156                                  	; 18/05/2019 - Retro DOS v4.0
 18157                                  Set_Media_ID:
 18158 00002A85 50                      	PUSH	AX		;AN000;;>32mb
 18159 00002A86 06                      	PUSH	ES		;AN000;;>32mb
 18160 00002A87 57                      	PUSH	DI		;AN000;;>32mb
 18161                                  
 18162 00002A88 FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 18163 00002A8A 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 18164 00002A8C B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 18165 00002A8E B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 18166                                  
 18167                                  ;hkn; PACKET_TEMP is in DOSDATA
 18168 00002A91 BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 18169                                  
 18170 00002A94 53                      	PUSH	BX		;AN000;;>32mb
 18171 00002A95 52                      	PUSH	DX		;AN000;;>32mb
 18172 00002A96 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18173                                  
 18174                                  	;invoke	$IOCTL		;AN000;;>32mb
 18175 00002A98 E86BF7                  	call	_$IOCTL	
 18176                                  
 18177 00002A9B 5A                      	POP	DX		;AN000;;>32mb
 18178 00002A9C 5B                      	POP	BX		;AN000;;>32mb
 18179 00002A9D 7224                    	JC	short geterr	;AN000;;>32mb
 18180                                  
 18181 00002A9F 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 18182 00002AA1 7405                    	JZ	short NoName	;AN000;>32mb yes
 18183                                  
 18184                                  ;hkn; NAME1 is in DOSDATA
 18185 00002AA3 BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 18186                                  
 18187 00002AA6 EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 18188                                  NoName: 			;AN000;
 18189                                  
 18190                                  ;hkn; NO_NAME_ID is in DOSDATA
 18191 00002AA8 BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 18192                                  
 18193                                  doset:				;AN000;
 18194 00002AAB 89D7                    	MOV	DI,DX		;AN000;;>32mb
 18195                                  	;add	di,6
 18196 00002AAD 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 18197                                  
 18198                                  ;hkn; ES & DS must point to SS
 18199                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 18200 00002AB0 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 18201                                  
 18202 00002AB1 1F                      	POP	DS		;AN000;;>32mb
 18203                                  
 18204                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 18205 00002AB2 16                      	PUSH	SS		;AN000;;>32mb
 18206                                  
 18207 00002AB3 07                      	POP	ES		;AN000;;>32mb
 18208 00002AB4 B90B00                  	MOV	CX,11		;AN000;;>32mb
 18209 00002AB7 F3A4                    	REP	MOVSB		;AN000;;>32mb
 18210 00002AB9 B94608                  	MOV	CX,0846H	;AN001;;>32mb
 18211 00002ABC B00D                    	MOV	AL,0DH		;AN000;;>32mb
 18212 00002ABE 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18213                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 18214 00002AC0 E843F7                  	call	_$IOCTL	
 18215                                  geterr: 			;AN000;
 18216                                  ;hkn;	PUSH	CS		;AN000;>32mb
 18217 00002AC3 16                      	PUSH	SS		;AN000;>32mb
 18218                                  
 18219 00002AC4 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 18220                                  
 18221 00002AC5 5F                      	POP	DI		;AN000;;>32mb
 18222 00002AC6 07                      	POP	ES		;AN000;;>32mb
 18223 00002AC7 58                      	POP	AX		;AN000;;>32mb
 18224 00002AC8 C3                      	retn			;AN000;>32mb
 18225                                  
 18226                                  ; MSDOS 6.0
 18227                                  ;---------------------------------------------------------------------------
 18228                                  ; Procedure Name : Set_EXT_mode
 18229                                  ;
 18230                                  ; Inputs:
 18231                                  ;	[EXTOPEN_ON]= flag for extended open
 18232                                  ;	SAVE_BX= mode specified in Extended Open
 18233                                  ; Function:
 18234                                  ;	Set mode in ThisSFT
 18235                                  ; Outputs:
 18236                                  ;	carry set,mode is set if from Extended Open
 18237                                  ;	carry clear, mode not set yet
 18238                                  ;---------------------------------------------------------------------------
 18239                                  
 18240                                  ; 13/05/2019 - Retro DOS v4.0
 18241                                  
 18242                                  Set_EXT_mode:
 18243                                  
 18244                                  ;hkn; SS override
 18245 00002AC9 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 18246 00002ACF 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 18247 00002AD1 50                      	PUSH	AX			    ;AN000;EO.
 18248                                  
 18249                                  ;hkn; SS override
 18250 00002AD2 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 18251                                  	;or	[es:di+2],ax
 18252 00002AD6 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 18253 00002ADA 58                      	POP	AX			    ;AN000;EO.
 18254 00002ADB F9                      	STC				    ;AN000;EO.
 18255                                  NOTEX:					    ;AN000;
 18256 00002ADC C3                      	retn				    ;AN000;EO.
 18257                                  
 18258                                  ;============================================================================
 18259                                  ; OPEN.ASM, MSDOS 6.0, 1991
 18260                                  ;============================================================================
 18261                                  ; 08/08/2018 - Retro DOS v3.0
 18262                                  ; 18/05/2019 - Retro DOS v4.0
 18263                                  
 18264                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 18265                                  ;	NAME	DOS_OPEN
 18266                                  
 18267                                  ;**	OPEN.ASM - File Open
 18268                                  ;----------------------------------------------------------------------------
 18269                                  ;	Low level routines for openning a file from a file spec.
 18270                                  ;	Also misc routines for sharing errors
 18271                                  ;
 18272                                  ;	DOS_Open
 18273                                  ;	Check_Access_AX
 18274                                  ;	SHARE_ERROR
 18275                                  ;	SET_SFT_MODE
 18276                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 18277                                  ;
 18278                                  ;	Revision history:
 18279                                  ;
 18280                                  ;	    Created: ARR 30 March 1983
 18281                                  ;	    A000	version 4.00   Jan. 1988
 18282                                  ;
 18283                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 18284                                  ; 	       remote extended opens and not save_cx.
 18285                                  ;
 18286                                  ;	M035 - if open made from exec then we must set the appropriate bits
 18287                                  ;	       on the stack before calling off to the redir.
 18288                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 18289                                  ;	       to handle open from exec. In this case set the appropriate bit
 18290                                  ;	       else do not.
 18291                                  ;----------------------------------------------------------------------------	
 18292                                  
 18293                                  ;Installed = TRUE
 18294                                  
 18295                                  ;	i_need	NoSetDir,BYTE
 18296                                  ;	i_need	THISSFT,DWORD
 18297                                  ;	i_need	THISCDS,DWORD
 18298                                  ;	i_need	CURBUF,DWORD
 18299                                  ;	i_need	CurrentPDB,WORD
 18300                                  ;	i_need	CURR_DIR_END,WORD
 18301                                  ;	I_need	RetryCount,WORD
 18302                                  ;	I_need	Open_Access,BYTE
 18303                                  ;	I_need	fSharing,BYTE
 18304                                  ;	i_need	JShare,DWORD
 18305                                  ;	I_need	FastOpenFlg,byte
 18306                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 18307                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 18308                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 18309                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 18310                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 18311                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 18312                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 18313                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 18314                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 18315                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 18316                                  ;	I_need	SAVE_BX,WORD			  ;M034
 18317                                  ;
 18318                                  ;	I_need	DOS_FLAG,BYTE
 18319                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 18320                                  
 18321                                  ;Break	<DOS_Open - internal file access>
 18322                                  ;---------------------------------------------------------------------------
 18323                                  ; Procedure Name : DOS_Open
 18324                                  ;
 18325                                  ; Inputs:
 18326                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18327                                  ;		terminated)
 18328                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18329                                  ;		( = -1 if current dir not involved, else
 18330                                  ;		 Points to first char after last "/" of current dir part)
 18331                                  ;	[THISCDS] Points to CDS being used
 18332                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18333                                  ;	[THISSFT] Points to SFT to fill in if file found
 18334                                  ;		(sf_mode field set so that FCB may be detected)
 18335                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18336                                  ;	AX is Access and Sharing mode
 18337                                  ;	  High NIBBLE of AL (Sharing Mode)
 18338                                  ;		sharing_compat	   file is opened in compatibility mode
 18339                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18340                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18341                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18342                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18343                                  ;	  Low NIBBLE of AL (Access Mode)
 18344                                  ;		open_for_read	file is opened for reading
 18345                                  ;		open_for_write	file is opened for writing
 18346                                  ;		open_for_both	file is opened for both reading and writing.
 18347                                  ;
 18348                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 18349                                  ;		(not checked)
 18350                                  ; Function:
 18351                                  ;	Try to open the specified file
 18352                                  ; Outputs:
 18353                                  ;	sf_ref_count is NOT altered
 18354                                  ;	CARRY CLEAR
 18355                                  ;	    THISSFT filled in.
 18356                                  ;	CARRY SET
 18357                                  ;	    AX is error code
 18358                                  ;		error_file_not_found
 18359                                  ;			Last element of path not found
 18360                                  ;		error_path_not_found
 18361                                  ;			Bad path (not in curr dir part if present)
 18362                                  ;		error_bad_curr_dir
 18363                                  ;			Bad path in current directory part of path
 18364                                  ;		error_invalid_access
 18365                                  ;			Bad sharing mode or bad access mode or bad combination
 18366                                  ;		error_access_denied
 18367                                  ;			Attempt to open read only file for writting, or
 18368                                  ;			open a directory
 18369                                  ;		error_sharing_violation
 18370                                  ;			The sharing mode was correct but not allowed
 18371                                  ;			generates an INT 24 on compatibility mode SFTs
 18372                                  ; DS preserved, others destroyed
 18373                                  ;----------------------------------------------------------------------------
 18374                                  
 18375                                  ; 18/05/2019 - Retro DOS v4.0
 18376                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 18377                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18378                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 18379                                  
 18380                                  DOS_OPEN:
 18381                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 18382                                  
 18383 00002ADD C606[4C03]00            	MOV	byte [NoSetDir],0
 18384 00002AE2 E83301                  	CALL	Check_Access_AX
 18385 00002AE5 722B                    	JC	short do_ret_label	    ; retc
 18386                                  
 18387 00002AE7 C43E[9E05]              	LES	DI,[THISSFT]
 18388 00002AEB 30E4                    	XOR	AH,AH
 18389                                  
 18390                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 18391                                  
 18392 00002AED 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 18393 00002AF1 06                      	PUSH	ES
 18394 00002AF2 C436[A205]              	LES	SI,[THISCDS]
 18395                                  	; 18/08/2018
 18396 00002AF6 83FEFF                  	CMP	SI,-1
 18397 00002AF9 7530                    	JNZ	short TEST_RE_NET1
 18398 00002AFB 07                      	POP	ES
 18399                                  
 18400                                  	; MSDOS 6.0
 18401                                  ;Extended open hooks
 18402 00002AFC F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 18403 00002B01 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 18404                                  _IFS_extopen:									;AN000;
 18405 00002B03 A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 18406                                  					    ; with which call was made. This
 18407                                  					    ; has the open access bits. 
 18408                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 18409                                  	
 18410 00002B06 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 18411                                  	;mov	ax,112Eh
 18412                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 18413 00002B07 B82E11                  	mov	ax,(MultNET*256)+46 
 18414 00002B0A CD2F                    	INT	2FH			    ;FT.				;AN000;
 18415 00002B0C 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 18416 00002B0D C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 18417                                  
 18418                                  do_ret_label:
 18419 00002B12 C3                      	retn				    ;FT.				;AN000;
 18420                                  _NOEXTOP:
 18421                                  ;Extended open hooks
 18422                                  	;
 18423                                  ;IF NOT Installed
 18424                                  	;transfer NET_SEQ_OPEN
 18425                                  ;ELSE
 18426                                  	
 18427                                  do_net_int2f:
 18428 00002B13 F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 18429 00002B18 7409                    	jz	short not_exec_open	; N: just do net open
 18430                                  					; Y: check to see if redir is aware
 18431                                  					;    of this 
 18432                                  	
 18433                                  					; M042 - start
 18434                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 18435 00002B1A F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 18436                                  					; Q: does this redir know how to 
 18437                                  					;    this
 18438 00002B1F 7402                    	jz	short not_exec_open	; N: just do net open
 18439                                  					; Y: set bit 3 of access byte and 
 18440                                  					;    set sharing mode to DENY_WRITE
 18441                                  					; M042 - end
 18442                                  	
 18443                                  	; NOTE: This specific mode has not been set for the code assembled
 18444                                  	; under the "NOT Installed" conditional. Currently Installed is 
 18445                                  	; always one.
 18446                                  					; M035 - set the bits on the stack
 18447                                  	;mov	al,23h
 18448 00002B21 B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 18449                                  	
 18450                                  not_exec_open:
 18451                                  	; MSDOS 3.3 & MSDOS 6.0
 18452 00002B23 50                      	PUSH	AX
 18453                                  
 18454                                  	;MOV	AX,(MultNET SHL 8) OR 22
 18455                                  	;INT	2FH
 18456                                  
 18457 00002B24 B81611                  	mov     ax,1116h
 18458 00002B27 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 18459                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 18460                                  			; SDA first filename pointer -> fully-qualified name of file to open
 18461                                  			; STACK: WORD file open mode
 18462                                  			; Return: CF set on error
 18463                                  
 18464 00002B29 5B                      	POP	BX			; clean stack
 18465                                  ;do_ret_label: ; 09/08/2018
 18466 00002B2A C3                      	retn
 18467                                  ;ENDIF
 18468                                  
 18469                                  TEST_RE_NET1:
 18470                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 18471                                  	; 17/12/2022
 18472 00002B2B 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 18473 00002B30 07                      	POP	ES
 18474                                  	; 18/05/2019
 18475 00002B31 7409                    	JZ	short LOCAL_OPEN
 18476                                  
 18477                                  ;Extended open hooks
 18478                                  	; MSDOS 6.0
 18479 00002B33 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 18480 00002B38 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 18481                                  ;Extended open hooks
 18482                                  
 18483                                  ;IF NOT Installed
 18484                                  ;	transfer NET_OPEN
 18485                                  ;ELSE
 18486 00002B3A EBD7                    	jmp	short do_net_int2f
 18487                                  ;ENDIF
 18488                                  
 18489                                  LOCAL_OPEN:
 18490                                  	; MSDOS 3.3 & MSDOS 6.0
 18491 00002B3C E8A8E7                  	call	ECritDisk
 18492                                  
 18493                                  ; DOS 3.3 FastOPen 6/16/86
 18494                                  
 18495                                  	;or	byte [FastOpenFlg],5
 18496 00002B3F 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 18497                                  
 18498 00002B44 E8D212                  	call	GETPATH
 18499                                  
 18500                                  ; DOS 3.3 FastOPen 6/16/86
 18501                                  
 18502 00002B47 731D                    	JNC	short Open_found
 18503 00002B49 7511                    	JNZ	short bad_path2
 18504 00002B4B 08C9                    	OR	CL,CL
 18505 00002B4D 740D                    	JZ	short bad_path2
 18506                                  OpenFNF:
 18507 00002B4F B80200                  	MOV	AX,error_file_not_found	; 2
 18508                                  OpenBadRet:
 18509                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 18510                                  	; 12/08/2018
 18511                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 18512                                  	; MSDOS 6.0
 18513 00002B52 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 18514 00002B58 F9                      	STC
 18515                                  	;call	LCritDisk
 18516                                  	; 16/12/2022
 18517 00002B59 E9A6E7                  	jmp	LCritDisk
 18518                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 18519                                  	;retn 	; 08/09/2018
 18520                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18521                                  	;jmp	Clear_FastOpen
 18522                                  
 18523                                  bad_path2:
 18524 00002B5C B80300                  	MOV	AX,error_path_not_found	; 3
 18525 00002B5F EBF1                    	JMP	short OpenBadRet
 18526                                  
 18527                                  Open_Bad_Access:
 18528 00002B61 B80500                  	MOV	AX,error_access_denied	; 5
 18529 00002B64 EBEC                    	JMP	short OpenBadRet
 18530                                  
 18531                                  Open_found:
 18532 00002B66 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 18533 00002B68 08E4                    	OR	AH,AH
 18534 00002B6A 783E                    	JS	short open_ok		; Devices don't have attributes
 18535 00002B6C 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 18536                                  	;mov	al,[es:bx+0Bh]
 18537 00002B70 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 18538 00002B74 A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 18539 00002B76 75E9                    	JNZ	short Open_Bad_Access
 18540 00002B78 A801                    	TEST	AL,attr_read_only	; check write on read only
 18541 00002B7A 742E                    	JZ	short open_ok
 18542                                  
 18543                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 18544                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 18545                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 18546                                  ; processing until the actual write operation:
 18547                                  ;
 18548                                  ; If FCB, then we change the mode to be read_only.
 18549                                  ; If net_FCB, then we change the mode to be read_only.
 18550                                  ; If not open for read then error.
 18551                                  
 18552 00002B7C 1E                      	push	ds
 18553 00002B7D 56                      	push	si
 18554 00002B7E C536[9E05]              	LDS	SI,[THISSFT]
 18555                                  	;mov	cx,[si+2]
 18556 00002B82 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 18557                                  	; 17/12/2022
 18558                                  	;test	ch,80h
 18559 00002B85 F6C580                  	test	ch,sf_isFCB>>8
 18560                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 18561 00002B88 750A                    	JNZ	short ResetAccess	; yes, reset the access
 18562 00002B8A 88CA                    	MOV	DL,CL
 18563 00002B8C 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 18564 00002B8F 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 18565 00002B92 7508                    	JNZ	short NormalOpen	; no
 18566                                  ResetAccess:
 18567                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 18568                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 18569                                  	; 16/12/2022
 18570 00002B94 80E1F0                  	and	cl,0F0h ; 18/05/2019
 18571                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 18572 00002B97 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18573 00002B9A EB0C                    	JMP	SHORT FillSFT
 18574                                  
 18575                                  ; The SFT is normal. See if the requested access is open_for_read
 18576                                  
 18577                                  NormalOpen:
 18578 00002B9C 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18579 00002B9F 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18580 00002BA2 7404                    	JZ	short FillSFT
 18581 00002BA4 5E                      	pop	si
 18582 00002BA5 1F                      	pop	ds
 18583 00002BA6 EBB9                    	JMP	short Open_Bad_Access
 18584                                  ;
 18585                                  ; All done, restore registers and fill the SFT.
 18586                                  ;
 18587                                  FillSFT:
 18588 00002BA8 5E                      	pop	si
 18589 00002BA9 1F                      	pop	ds
 18590                                  open_ok:
 18591 00002BAA E8711E                  	call	DOOPEN			; Fill in SFT
 18592                                  
 18593                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18594                                  	; 18/05/2019
 18595                                  	;and	byte [ss:FastOpenFlag],80h
 18596 00002BAD 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18597                                  	; 12/08/2018
 18598                                  	;and	byte [FastOpenFlg],Fast_yes	
 18599                                  
 18600                                  	; MSDOS 6.0
 18601 00002BB3 E84300                  	CALL	DO_SHARE_CHECK
 18602 00002BB6 7303                    	JNC	short SHARE_OK
 18603                                  	;call	LCritDisk
 18604                                  	; 16/12/2022
 18605 00002BB8 E947E7                  	jmp	LCritDisk
 18606                                  	;;JMP	short Clear_FastOpen
 18607                                  	;retn	; 18/05/2019
 18608                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18609                                  	;jmp	short Clear_FastOpen	
 18610                                  
 18611                                  	; MSDOS 3.3
 18612                                  ;DO_SHARE_CHECK:
 18613                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18614                                  ;OpenShareRetry:
 18615                                  ;	push	cx			; Save number left to do
 18616                                  ;	call	SHARE_CHECK		; Final Check
 18617                                  ;	pop	cx			; CX = # left
 18618                                  ;	JNC	short SHARE_OK		; No problem with access
 18619                                  ;	call	Idle
 18620                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18621                                  ;OpenShareFail:
 18622                                  ;	LES	DI,[THISSFT]
 18623                                  ;	call	SHARE_ERROR
 18624                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18625                                  	
 18626                                  	;12/08/2018
 18627                                  	;mov	byte [ss:FastOpenFlg],0
 18628                                  	;08/09/2018
 18629                                  	;mov	byte [FastOpenFlg],0
 18630                                  	;call	LCritDisk
 18631                                  	;JMP	short Clear_FastOpen
 18632                                  	;retn
 18633                                  
 18634                                  SHARE_OK:
 18635                                  	; MSDOS 3.3 & MSDOS 6.0
 18636 00002BBB B80300                  	MOV	AX,3
 18637 00002BBE C43E[9E05]              	LES	DI,[THISSFT]
 18638                                  ;if installed
 18639                                  	;call	JShare + 14 * 4
 18640 00002BC2 FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18641                                  ;else
 18642                                  ;	Call	ShSU
 18643                                  ;endif
 18644 00002BC6 E839E7                  	call	LCritDisk
 18645                                  	
 18646                                  	;FallThru Set_SFT_Mode
 18647                                  
 18648                                  ;----------------------------------------------------------------------------
 18649                                  ; Procedure Name : SET_SFT_MODE
 18650                                  ;
 18651                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18652                                  ;
 18653                                  ;   Inputs:
 18654                                  ;	ThisSFT points to SFT
 18655                                  ;
 18656                                  ;   Outputs:
 18657                                  ;	Carry clear
 18658                                  ;   Registers modified: AX.
 18659                                  ;---------------------------------------------------------------------------
 18660                                  
 18661                                  ;hkn; called from create. DS already set up to DOSDATA.
 18662                                  
 18663                                  SET_SFT_MODE:
 18664 00002BC9 C43E[9E05]              	LES	DI,[THISSFT]
 18665 00002BCD E8EE18                  	call	DEV_OPEN_SFT
 18666                                  	;test	word [es:di+2],8000h
 18667                                  	; 17/12/2022
 18668                                  	;test	byte [es:di+3],80h
 18669 00002BD0 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18670                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18671 00002BD5 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18672 00002BD7 A1[3003]                	MOV	AX,[CurrentPDB]
 18673                                  	;mov	[es:di+31h],ax
 18674 00002BDA 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18675                                  
 18676                                  Clear_FastOpen:
 18677 00002BDE C3                      	retn			       ;;;;; DOS 3.3
 18678                                  
 18679                                  ;----------------------------------------------------------------------------
 18680                                  ; Procedure Name : SHARE_ERROR
 18681                                  ;
 18682                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18683                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18684                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18685                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18686                                  ;---------------------------------------------------------------------------
 18687                                  
 18688                                  SHARE_ERROR:
 18689                                  	; 17/12/2022
 18690                                  	;test	byte [es:di+3],80h
 18691 00002BDF 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18692                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18693 00002BE4 7509                    	JNZ	short _HARD_ERR
 18694 00002BE6 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18695 00002BEA 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18696                                  	;CMP	CL,SHARING_COMPAT ; 0
 18697                                  	;JNE	short _NO_HARD_ERR
 18698                                  	; 21/09/2023
 18699 00002BED 7505                    	jnz	short _NO_HARD_ERR
 18700                                  _HARD_ERR:
 18701 00002BEF E8AD45                  	call	SHARE_VIOLATION
 18702                                  	;retnc				; User wants retry
 18703 00002BF2 73EA                    	jnc	short Clear_FastOpen
 18704                                  _NO_HARD_ERR:
 18705 00002BF4 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18706 00002BF7 F9                      	STC
 18707 00002BF8 C3                      	retn
 18708                                  
 18709                                  ; MSDOS 6.0
 18710                                  ;----------------------------------------------------------------------------
 18711                                  ; Procedure Name : DO_SHARE_CHECK
 18712                                  ;
 18713                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18714                                  ; Functions: check file sharing mode is valid
 18715                                  ; Output: carry set, error
 18716                                  ;	  carry clear, share ok
 18717                                  ;----------------------------------------------------------------------------
 18718                                  
 18719                                  	; 18/05/2019 - Retro DOS v4.0
 18720                                  DO_SHARE_CHECK:
 18721 00002BF9 E8EBE6                  	call	ECritDisk		; enter critical section
 18722                                  OPN_RETRY:
 18723 00002BFC 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18724                                  OpenShareRetry:
 18725 00002C00 51                      	push	cx			; Save number left to do
 18726 00002C01 E89645                  	call	SHARE_CHECK		; Final Check
 18727 00002C04 59                      	pop	cx			; CX = # left
 18728 00002C05 730E                    	JNC	short Share_Ok2		; No problem with access
 18729 00002C07 E8DFE5                  	call	Idle
 18730 00002C0A E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18731                                  OpenShareFail:
 18732 00002C0C C43E[9E05]              	LES	DI,[THISSFT]
 18733 00002C10 E8CCFF                  	call	SHARE_ERROR
 18734 00002C13 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18735                                  Share_Ok2:
 18736                                  	;call	LCritDisk		; leave critical section
 18737                                  	;retn
 18738                                  	; 18/12/2022
 18739 00002C15 E9EAE6                  	jmp	LCritDisk
 18740                                  
 18741                                  ;-----------------------------------------------------------------------------
 18742                                  ; Procedure Name : Check_Access
 18743                                  ;
 18744                                  ; Inputs:
 18745                                  ;	AX is mode
 18746                                  ;	  High NIBBLE of AL (Sharing Mode)
 18747                                  ;		sharing_compat	   file is opened in compatibility mode
 18748                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18749                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18750                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18751                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18752                                  ;	  Low NIBBLE of AL (Access Mode)
 18753                                  ;		open_for_read	file is opened for reading
 18754                                  ;		open_for_write	file is opened for writing
 18755                                  ;		open_for_both	file is opened for both reading and writing.
 18756                                  ; Function:
 18757                                  ;	Check this access mode for correctness
 18758                                  ; Outputs:
 18759                                  ;	[open_access] = AL input
 18760                                  ;	Carry Clear
 18761                                  ;		Mode is correct
 18762                                  ;		AX unchanged
 18763                                  ;	Carry Set
 18764                                  ;		Mode is bad
 18765                                  ;		AX = error_invalid_access
 18766                                  ; No other registers effected
 18767                                  ;----------------------------------------------------------------------------
 18768                                  
 18769                                  Check_Access_AX:
 18770 00002C18 A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18771 00002C1B 53                      	PUSH	BX
 18772                                  
 18773                                  ;	If sharing, then test for special sharing mode for FCBs
 18774                                  
 18775 00002C1C 88C3                    	MOV	BL,AL
 18776 00002C1E 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18777 00002C21 803E[7205]FF            	CMP	byte [FSHARING],-1
 18778 00002C26 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18779 00002C28 80FB70                  	CMP	BL,SHARING_NET_FCB
 18780 00002C2B 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18781                                  CheckShareMode:
 18782 00002C2D 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18783 00002C30 770D                    	JA	short Make_Bad_Access
 18784                                  CheckAccessMode:
 18785 00002C32 88C3                    	MOV	BL,AL
 18786 00002C34 80E30F                  	AND	BL,access_mask
 18787 00002C37 80FB02                  	CMP	BL,2
 18788 00002C3A 7703                    	JA	short Make_Bad_Access
 18789 00002C3C 5B                      	POP	BX
 18790 00002C3D F8                      	CLC
 18791 00002C3E C3                      	retn
 18792                                  
 18793                                  Make_Bad_Access:
 18794 00002C3F B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18795 00002C42 5B                      	POP	BX
 18796 00002C43 F9                      	STC
 18797 00002C44 C3                      	retn
 18798                                  
 18799                                  ;============================================================================
 18800                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18801                                  ;============================================================================
 18802                                  ; 08/08/2018 - Retro DOS v3.0
 18803                                  ; 18/05/2019 - Retro DOS v4.0
 18804                                  
 18805                                  ;**	Low level routine for returning disk drive information from a local
 18806                                  ;	  or NET device
 18807                                  ;
 18808                                  ;	DISK_INFO
 18809                                  ;
 18810                                  ;	  Modification history:
 18811                                  ;
 18812                                  ;		Created: ARR 30 March 1983
 18813                                  
 18814                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18815                                  ;---------------------------------------------------------------------------
 18816                                  ; Procedure Name : DISK_INFO
 18817                                  ;
 18818                                  ; Inputs:
 18819                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18820                                  ;		(It MAY NOT be NUL, error not detected)
 18821                                  ; Function:
 18822                                  ;	Get Interesting Drive Information
 18823                                  ; Returns:
 18824                                  ;	DX = Number of free allocation units
 18825                                  ;	BX = Total Number of allocation units on disk
 18826                                  ;	CX = Sector size
 18827                                  ;	AL = Sectors per allocation unit
 18828                                  ;	AH = FAT ID BYTE
 18829                                  ;	Carry set if error (currently user FAILed to I 24)
 18830                                  ; Segs except ES preserved, others destroyed
 18831                                  ;----------------------------------------------------------------------------
 18832                                  
 18833                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18834                                  ;hkn; DOSDATA. 
 18835                                  
 18836                                  DISK_INFO:
 18837                                  	; 08/08/2018 - Retro DOS v3.0
 18838                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18839                                  
 18840 00002C45 E8E6E5                  	call	TestNet
 18841 00002C48 7306                    	JNC	short LOCAL_DSK_INFO
 18842                                  
 18843                                  ;IF NOT Installed
 18844                                  ;	transfer NET_DISK_INFO
 18845                                  ;ELSE
 18846                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18847                                  	;INT	2FH
 18848                                  	;return
 18849                                  
 18850 00002C4A B80C11                  	mov     ax,110Ch
 18851 00002C4D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18852                                  			; ES:DI -> current directory
 18853                                  			; Return: AL = sectors per cluster, BX = total clusters
 18854                                  			; CX = bytes per sector, DX = number of available clusters
 18855 00002C4F C3                      	retn
 18856                                  ;ENDIF
 18857                                  
 18858                                  LOCAL_DSK_INFO:
 18859 00002C50 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18860 00002C55 E88FE6                  	call	ECritDisk
 18861 00002C58 E83829                  	call	FATREAD_CDS		; perform media check.
 18862 00002C5B 7241                    	JC	short CRIT_LEAVE
 18863 00002C5D BB0200                  	MOV	BX,2
 18864 00002C60 E89A27                  	call	UNPACK			; Get first FAT sector into CURBUF
 18865 00002C63 7239                    	JC	short CRIT_LEAVE
 18866 00002C65 C536[E205]              	LDS	SI,[CURBUF]
 18867                                  	;mov	ah,[si+20]
 18868 00002C69 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18869                                  
 18870                                  ;hkn; SS is DOSDATA
 18871 00002C6C 16                      	push	ss
 18872 00002C6D 1F                      	pop	ds
 18873                                  	;mov	cx,[es:bp+0Dh]
 18874 00002C6E 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18875                                  
 18876                                  ; Examine the current free count. If it indicates that we have an invalid
 18877                                  ; count, do the expensive calculation.
 18878                                  
 18879                                  	;mov	dx,[es:bp+1Fh]
 18880 00002C72 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18881 00002C76 83FAFF                  	CMP	DX,-1			; is it valid?
 18882 00002C79 7404                    	JZ	short DoScan
 18883                                  
 18884                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18885                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18886                                  ; the count.
 18887                                  
 18888 00002C7B 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18889 00002C7D 7222                    	JB	short GotVal		; yes, trust it.
 18890                                  DoScan:
 18891 00002C7F 31D2                    	XOR	DX,DX
 18892 00002C81 49                      	DEC	CX
 18893                                  SCANFREE:
 18894 00002C82 E87827                  	call	UNPACK
 18895 00002C85 7217                    	JC	short CRIT_LEAVE
 18896 00002C87 7501                    	JNZ	short NOTFREECLUS
 18897 00002C89 42                      	INC	DX			; A free one
 18898                                  NOTFREECLUS:
 18899 00002C8A 43                      	INC	BX			; Next cluster
 18900 00002C8B E2F5                    	LOOP	SCANFREE
 18901 00002C8D 4B                      	DEC	BX			; BX was next cluster. Convert to
 18902                                  ReturnVals:
 18903 00002C8E 4B                      	DEC	BX			; count
 18904                                  	;mov	al,[es:bp+4]
 18905 00002C8F 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18906 00002C93 FEC0                    	INC	AL			; Sectors/cluster
 18907                                  	;mov	cx,[es:bp+2]
 18908 00002C95 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18909                                  	;mov	[es:bp+1Fh],dx
 18910 00002C99 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18911 00002C9D F8                      	CLC
 18912                                  CRIT_LEAVE:
 18913                                  	;call	LCritDisk
 18914                                  	;retn
 18915                                  	; 17/12/2022
 18916 00002C9E E961E6                  	jmp	LCritDisk
 18917                                  
 18918                                  ; We have correctly computed everything previously. Load up registers for
 18919                                  ; return.
 18920                                  
 18921                                  GotVal: 
 18922 00002CA1 89CB                    	MOV	BX,CX			; get cluster count
 18923 00002CA3 EBE9                    	JMP	short ReturnVals
 18924                                  
 18925                                  ;============================================================================
 18926                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18927                                  ;============================================================================
 18928                                  ; 22/07/2018 - Retro DOS v3.0
 18929                                  
 18930                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18931                                  ;	NAME	DOS_SEARCH
 18932                                  
 18933                                  ;**	Low level routines for doing local and NET directory searches
 18934                                  ;
 18935                                  ;	DOS_SEARCH_FIRST
 18936                                  ;	DOS_SEARCH_NEXT
 18937                                  ;	RENAME_NEXT
 18938                                  ;
 18939                                  ;	Revision history:
 18940                                  ;
 18941                                  ;	    Created: ARR 30 March 1983
 18942                                  ;	    A000	version 4.00  Jan. 1988
 18943                                  ;	    A001	PTM 3564 -- search for fastopen
 18944                                  
 18945                                  ;Installed = TRUE
 18946                                  
 18947                                  ;--------------------------------------------------------------------------
 18948                                  ;
 18949                                  ; Procedure Name : DOS_SEARCH_FIRST
 18950                                  ;
 18951                                  ; Inputs:
 18952                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18953                                  ;		terminated)
 18954                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18955                                  ;		( = -1 if current dir not involved, else
 18956                                  ;		 Points to first char after last "/" of current dir part)
 18957                                  ;	[THISCDS] Points to CDS being used
 18958                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18959                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18960                                  ;	[DMAADD] Points to 53 byte buffer
 18961                                  ; Function:
 18962                                  ;	Initiate a search for the given file spec
 18963                                  ; Outputs:
 18964                                  ;	CARRY CLEAR
 18965                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18966                                  ;
 18967                                  ;	LOCAL
 18968                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18969                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18970                                  ;	    11 byte search name with Meta chars in it
 18971                                  ;	    Search Attribute Byte, attribute of search
 18972                                  ;	    WORD LastEnt value
 18973                                  ;	    WORD DirStart
 18974                                  ;	    4 byte pad
 18975                                  ;	    32 bytes of the directory entry found
 18976                                  ;	NET
 18977                                  ;	    21 bytes First byte has high bit set
 18978                                  ;	    32 bytes of the directory entry found
 18979                                  ;
 18980                                  ;	CARRY SET
 18981                                  ;	    AX = error code
 18982                                  ;		error_no_more_files
 18983                                  ;			No match for this file
 18984                                  ;		error_path_not_found
 18985                                  ;			Bad path (not in curr dir part if present)
 18986                                  ;		error_bad_curr_dir
 18987                                  ;			Bad path in current directory part of path
 18988                                  ; DS preserved, others destroyed
 18989                                  ;---------------------------------------------------------------------------
 18990                                  
 18991                                  ; 24/01/2024
 18992                                  %if 1
 18993                                  	; 17/05/2019 - Retro DOS v4.0
 18994                                  GET_FAST_SEARCH:
 18995                                  	; 22/07/2018
 18996                                  	; MSDOS 6.0
 18997                                  	; 17/12/2022
 18998 00002CA5 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 18999                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 19000                                  					;FO.trigger fastopen ;AN000;
 19001                                  	;call	DOS_SEARCH_FIRST
 19002                                  	;retn
 19003                                  	; 24/01/2024
 19004                                  	; 17/12/2022
 19005                                  	;jmp	DOS_SEARCH_FIRST
 19006                                  %endif
 19007                                  
 19008                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19009                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 19010                                  
 19011                                  DOS_SEARCH_FIRST:
 19012                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 19013                                  
 19014 00002CAB C43E[A205]              	LES	DI,[THISCDS]
 19015 00002CAF 83FFFF                  	CMP	DI,-1
 19016 00002CB2 7506                    	JNZ	short TEST_RE_NET2
 19017                                  
 19018                                  ;IF NOT Installed
 19019                                  ;	transfer NET_SEQ_SEARCH_FIRST
 19020                                  ;ELSE
 19021                                  	;mov	ax,1119h
 19022 00002CB4 B81911                  	MOV	AX,(MultNET<<8)|25
 19023 00002CB7 CD2F                    	INT	2Fh
 19024 00002CB9 C3                      	retn
 19025                                  ;ENDIF
 19026                                  
 19027                                  TEST_RE_NET2:
 19028                                  	;test	word [es:di+43h],8000h
 19029                                  	; 17/12/2022
 19030                                  	;test	byte [es:di+44h],80h
 19031                                  	; 28/12/2022
 19032 00002CBA 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 19033                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 19034 00002CBF 7406                    	JZ	short LOCAL_SEARCH_FIRST
 19035                                  
 19036                                  ;IF NOT Installed
 19037                                  ;	transfer NET_SEARCH_FIRST
 19038                                  ;ELSE
 19039                                  	;mov	ax,111Bh
 19040 00002CC1 B81B11                  	MOV	AX,(MultNET<<8)|27
 19041 00002CC4 CD2F                    	INT	2FH
 19042 00002CC6 C3                      	retn
 19043                                  ;ENDIF
 19044                                  	; 18/05/2019 - Retro DOS v4.0
 19045                                  LOCAL_SEARCH_FIRST:
 19046 00002CC7 E81DE6                  	call	ECritDisk
 19047                                  	; MSDOS 6.0
 19048                                  	;;test	word [DOS34_FLAG],400h
 19049                                  	; 17/12/2022
 19050                                  	;test	byte [DOS34_FLAG+1],04h
 19051 00002CCA F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 19052                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 19053 00002CCF 7405                    	JZ	short NOFN			;AN000;
 19054                                  	;or	byte [FastOpenFlg],1
 19055 00002CD1 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 19056                                  NOFN:						;AN000;
 19057 00002CD6 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 19058                                  
 19059                                  ; 03/02/2024
 19060                                  %if 0
 19061                                  	; MSDOS 6.0
 19062                                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 19063                                  	JNC	short norm_GETPATH	;AN000;;FO. no
 19064                                  %else
 19065                                  	; 03/02/2024
 19066 00002CDB 16                      	push	ss
 19067 00002CDC 1F                      	pop	ds			;AN000;;FO. ds:si -> final path
 19068 00002CDD 8B36[B205]              	mov	si,[WFP_START]		;AN000;;FO.
 19069                                  getnext:				;AN000;
 19070 00002CE1 AC                      	lodsb				;AN000;;FO. get char
 19071 00002CE2 08C0                    	or	al,al			;AN000;;FO. is it null
 19072 00002CE4 7409                    	jz	short NO_Question	;AN000;;FO. yes
 19073 00002CE6 3C3F                    	cmp	al,'?'                  ;AN000;;FO. is '?'
 19074 00002CE8 75F7                    	jne	short getnext 		;AN000;;FO. no
 19075                                  %endif
 19076                                  	;and	byte [FastOpenFlg],80h
 19077 00002CEA 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19078                                  NO_Question:	; 03/02/2024
 19079                                  norm_GETPATH:
 19080 00002CEF E82711                  	call	GETPATH
 19081                                  	; BX = offset NAME1
 19082                                  ;_getdone:
 19083 00002CF2 7318                    	JNC	short find_check_dev
 19084 00002CF4 7511                    	JNZ	short bad_path3
 19085 00002CF6 08C9                    	OR	CL,CL
 19086 00002CF8 740D                    	JZ	short bad_path3
 19087                                  find_no_more:
 19088                                  	;mov	ax,12h
 19089 00002CFA B81200                  	MOV	AX,error_no_more_files
 19090                                  BadBye:
 19091                                  	; MSDOS 6.0
 19092 00002CFD 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 19093                                  
 19094 00002D03 F9                      	STC
 19095                                  	;call	LCritDisk
 19096                                  	;retn
 19097                                  	; 18/12/2022
 19098 00002D04 E9FBE5                  	jmp	LCritDisk
 19099                                  
 19100                                  bad_path3:
 19101                                  	;mov	ax,3
 19102 00002D07 B80300                  	MOV	AX,error_path_not_found
 19103 00002D0A EBF1                    	JMP	short BadBye
 19104                                  
 19105                                  find_check_dev:
 19106 00002D0C 08E4                    	OR	AH,AH
 19107 00002D0E 790A                    	JNS	short found_entry
 19108 00002D10 C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 19109 00002D16 FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 19110                                  found_entry:
 19111                                  
 19112                                  ; We set the physical drive byte here Instead of after found_it; Doing
 19113                                  ; a search-next may not have wfp_start set correctly
 19114                                  
 19115 00002D1A C43E[2C03]              	LES	DI,[DMAADD]
 19116 00002D1E 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 19117 00002D22 AC                      	LODSB
 19118 00002D23 2C40                    	SUB	AL,'A'-1                ; logical drive
 19119 00002D25 AA                      	STOSB				; High bit not set (local)
 19120                                  found_it:
 19121 00002D26 C43E[2C03]              	LES	DI,[DMAADD]
 19122 00002D2A 47                      	INC	DI
 19123                                  
 19124                                  	; MSDOS 6.0
 19125 00002D2B 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 19126                                  	;test	byte [FastOpenFlg],10h
 19127 00002D2C F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 19128 00002D31 7408                    	JZ	short notfast			  ;FO.;AN001;
 19129 00002D33 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 19130 00002D35 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 19131 00002D39 EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 19132                                  
 19133                                  notfast:
 19134 00002D3B BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 19135                                  movmov:
 19136                                  ; Special E5 code
 19137 00002D3E A4                      	MOVSB
 19138 00002D3F 26807DFF05              	CMP	BYTE [ES:DI-1],5
 19139 00002D44 7505                    	JNZ	short NOTKANJB
 19140 00002D46 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 19141                                  NOTKANJB:
 19142                                  	;MOV	CX,10
 19143                                  	;REP	MOVSB
 19144                                  	; 03/02/2024
 19145 00002D4B B90500                  	mov	cx,5
 19146 00002D4E F3A5                    	rep	movsw
 19147                                  
 19148                                  	; 08/09/2018
 19149 00002D50 1F                      	POP	DS			;FO.;AN001; restore ds
 19150                                  
 19151 00002D51 A0[6B05]                	MOV	AL,[ATTRIB]
 19152 00002D54 AA                      	STOSB
 19153 00002D55 50                      	PUSH	AX			; Save AH device info
 19154 00002D56 A1[4803]                	MOV	AX,[LASTENT]
 19155 00002D59 AB                      	STOSW
 19156 00002D5A A1[C205]                	MOV	AX,[DIRSTART]
 19157 00002D5D AB                      	STOSW
 19158                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 19159 00002D5E 83C704                  	ADD	DI,4
 19160 00002D61 58                      	POP	AX			; Recover AH device info
 19161 00002D62 08E4                    	OR	AH,AH
 19162 00002D64 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 19163 00002D66 833E[E205]FF            	CMP	WORD [CURBUF],-1
 19164 00002D6B 7510                    	JNZ	short OKSTORE
 19165                                  
 19166                                  	; MSDOS 6.0
 19167 00002D6D F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 19168                                  					;AN000;;FO. from fastopen and is good
 19169 00002D72 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 19170                                  
 19171                                  	; The user has specified the root directory itself, rather than some
 19172                                  	; contents of it. We can't "find" that.
 19173                                  
 19174 00002D74 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 19175                                  					;   stuffing a -1 at Lastent
 19176 00002D7A E97DFF                  	JMP	find_no_more
 19177                                  
 19178                                  OKSTORE:
 19179 00002D7D 8E1E[E405]              	MOV	DS,[CURBUF+2]
 19180                                  DOSREL:
 19181                                  	; BX = offset NAME1 (from GETPATH)
 19182 00002D81 89DE                    	MOV	SI,BX			; SI-> start of entry
 19183                                  
 19184                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 19185                                  
 19186                                  	;;mov	cx,32
 19187                                  	;MOV	CX,dir_entry.size
 19188                                  	; 03/02/2024
 19189 00002D83 B91000                  	mov	cx,dir_entry.size>>1
 19190                                  ;;;;; 7/29/86
 19191 00002D86 89F8                    	MOV	AX,DI			; save the 1st byte addr
 19192                                  	;REP	MOVSB
 19193 00002D88 F3A5                    	rep	movsw
 19194                                  	;
 19195 00002D8A 89C7                    	MOV	DI,AX			; restore 1st byte addr
 19196 00002D8C 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 19197 00002D90 7504                    	JNZ	short NO05
 19198 00002D92 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 19199                                  NO05:
 19200                                  
 19201                                  ;;;;; 7/29/86
 19202                                  
 19203                                  ;hkn; FastOpenflg is in DOSDATA use SS
 19204                                  	; 16/12/2022
 19205                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19206                                  	; MSDOS 6.0
 19207                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19208                                  	; 18/05/2019 - Retro DOS v4.0
 19209 00002D96 16                      	push	ss
 19210 00002D97 1F                      	pop	ds
 19211                                  	; 16/12/2022
 19212 00002D98 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 19213                                  
 19214                                  ;hkn; SS is DOSDATA
 19215                                  	;push	ss
 19216                                  	;pop	ds
 19217                                  	
 19218                                  	; 27/06/2024
 19219                                  	; cf=0
 19220                                  	;CLC
 19221                                  	
 19222                                  	;call	LCritDisk
 19223                                  	;retn
 19224                                  	; 16/12/2022
 19225 00002D9D E962E5                  	jmp	LCritDisk
 19226                                  
 19227                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 19228                                  ;----------------------------------------------------------------------------
 19229                                  ;
 19230                                  ; Procedure Name : DOS_SEARCH_NEXT
 19231                                  ;
 19232                                  ; Inputs:
 19233                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 19234                                  ;	    (only first 21 bytes must have valid information)
 19235                                  ; Function:
 19236                                  ;	Look for subsequent matches
 19237                                  ; Outputs:
 19238                                  ;	CARRY CLEAR
 19239                                  ;	    The 53 bytes at DMAADD are updated for next call
 19240                                  ;		(see DOS_SEARCH_FIRST)
 19241                                  ;	CARRY SET
 19242                                  ;	    AX = error code
 19243                                  ;		error_no_more_files
 19244                                  ;			No more files to find
 19245                                  ; DS preserved, others destroyed
 19246                                  ;---------------------------------------------------------------------------
 19247                                  
 19248                                  ;hkn; called from search.asm. DS already set up at this point.
 19249                                  
 19250                                  DOS_SEARCH_NEXT:
 19251 00002DA0 C43E[2C03]              	LES	DI,[DMAADD]
 19252 00002DA4 268A05                  	MOV	AL,[ES:DI]
 19253 00002DA7 A880                    	TEST	AL,80H			; Test for NET
 19254 00002DA9 7406                    	JZ	short LOCAL_SEARCH_NEXT
 19255                                  ;IF NOT Installed
 19256                                  ;	transfer NET_SEARCH_NEXT
 19257                                  ;ELSE
 19258                                  	;mov	ax,111Ch
 19259 00002DAB B81C11                  	MOV	AX,(MultNET<<8)|28
 19260 00002DAE CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 19261                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 19262                                  		     ; Return: CF set on error, AX = DOS error code
 19263                                  		     ; CF clear if successful
 19264 00002DB0 C3                      	retn
 19265                                  ;ENDIF
 19266                                  
 19267                                  LOCAL_SEARCH_NEXT:
 19268                                  	;AL is drive A=1
 19269                                  	;mov	byte [EXTERR_LOCUS],2
 19270 00002DB1 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19271 00002DB6 E82EE5                  	call	ECritDisk
 19272                                  
 19273                                  ;hkn; DummyCDS is in DOSDATA
 19274 00002DB9 C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 19275                                  ;hkn; Segment address is DOSDATA - use ds
 19276                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 19277 00002DBF 8C1E[A405]              	mov	[THISCDS+2],DS
 19278                                  
 19279 00002DC3 0440                    	ADD	AL,'A'-1
 19280 00002DC5 E8A53A                  	call	InitCDS
 19281                                  
 19282                                  ;	call	GETTHISDRV		; Set CDS pointer
 19283                                  
 19284 00002DC8 7246                    	JC	short No_files		; Bogus drive letter
 19285 00002DCA C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 19286                                  	;les	bp,[es:di+45h]
 19287 00002DCE 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 19288 00002DD2 E857D8                  	call	GOTDPB			; [THISDPB] = ES:BP
 19289                                  
 19290                                  	; 16/12/2022
 19291 00002DD5 268A4600                	mov	al,[ES:BP]
 19292                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19293                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 19294 00002DD9 A2[7605]                	mov	[THISDRV],AL
 19295                                  	;mov	word [CREATING],0E500h
 19296 00002DDC C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 19297 00002DE2 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 19298 00002DE7 C536[2C03]              	LDS	SI,[DMAADD]
 19299 00002DEB AC                      	LODSB				; Drive Byte
 19300                                  
 19301                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 19302                                  RENAME_NEXT:
 19303                                  	;context ES
 19304 00002DEC 16                      	push	ss
 19305 00002DED 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 19306                                  
 19307                                  ;hkn; NAME1 is in DOSDATA
 19308 00002DEE BF[4B05]                	MOV	DI,NAME1
 19309                                  
 19310 00002DF1 B90B00                  	MOV	CX,11
 19311 00002DF4 F3A4                    	REP	MOVSB			; Search name
 19312 00002DF6 AC                      	LODSB				; Attribute
 19313                                  
 19314                                  ;hkn; SS override
 19315 00002DF7 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19316 00002DFB AD                      	LODSW				; LastEnt
 19317 00002DFC 09C0                    	OR	AX,AX
 19318                                  	; 03/02/2024
 19319                                  	;JNS	short cont_load
 19320 00002DFE 7810                    	js	short No_files
 19321                                  ;No_files:
 19322                                  	;JMP	find_no_more
 19323                                  
 19324                                  cont_load:
 19325 00002E00 50                      	PUSH	AX			; Save LastEnt
 19326 00002E01 AD                      	LODSW				; DirStart
 19327 00002E02 89C3                    	MOV	BX,AX
 19328                                  
 19329                                  ;hkn; SS is DOSDATA
 19330                                  	;context DS
 19331 00002E04 16                      	push	ss
 19332 00002E05 1F                      	pop	ds
 19333 00002E06 C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 19334                                  	;invoke	SetDirSrch
 19335 00002E0A E8AF0F                  	call	SETDIRSRCH
 19336 00002E0D 7304                    	JNC	short SEARCH_GOON
 19337 00002E0F 58                      	POP	AX			; Clean stack
 19338                                  	;JMP	short No_files
 19339                                  	; 03/02/2024
 19340                                  No_files:
 19341 00002E10 E9E7FE                  	JMP	find_no_more
 19342                                  
 19343                                  SEARCH_GOON:
 19344 00002E13 E87B12                  	call	STARTSRCH
 19345 00002E16 58                      	POP	AX
 19346 00002E17 E8750F                  	call	GETENT
 19347 00002E1A 72F4                    	JC	short No_files
 19348 00002E1C E8AD0E                  	call	NEXTENT
 19349 00002E1F 72EF                    	JC	short No_files
 19350 00002E21 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 19351 00002E23 E900FF                  	JMP	found_it ; 10/08/2018
 19352                                  
 19353                                  ; MSDOS 6.0
 19354                                  ;---------------------------------------------------------------------------
 19355                                  ;
 19356                                  ; Procedure Name : CHECK_QUESTION
 19357                                  ;
 19358                                  ; Input: [WFP_START]= pointer to final path
 19359                                  ; Function: check '?' char
 19360                                  ; Output: carry clear, if no '?'
 19361                                  ;	 carry set, if '?' exists
 19362                                  ;---------------------------------------------------------------------------
 19363                                  
 19364                                  ; 03/02/2024
 19365                                  %if 0
 19366                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19367                                  CHECK_QUESTION:
 19368                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 19369                                  ;hkn;	PUSH	CS			;AN000;;FO.
 19370                                  	push	ss
 19371                                  	POP	DS			;AN000;;FO. ds:si -> final path
 19372                                  	; 16/12/2022
 19373                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19374                                  	MOV	SI,[WFP_START]		;AN000;;FO.
 19375                                  	;mov	si,[ss:WFP_START]
 19376                                  getnext:				;AN000;
 19377                                  	LODSB				;AN000;;FO. get char
 19378                                  	OR	AL,AL			;AN000;;FO. is it null
 19379                                  	JZ	short NO_Question	;AN000;;FO. yes
 19380                                  	CMP	AL,'?'                  ;AN000;;FO. is '?'
 19381                                  	JNZ	short getnext 		;AN000;;FO. no
 19382                                  	STC				;AN000;;FO.
 19383                                  NO_Question:				;AN000;
 19384                                  	retn				;AN000;;FO.
 19385                                  %endif
 19386                                  
 19387                                  ;============================================================================
 19388                                  ; ABORT.ASM, MSDOS 6.0, 1991
 19389                                  ;============================================================================
 19390                                  ; 23/07/2018 - Retro DOS v3.0
 19391                                  ; 18/05/2019 - Retro DOS v4.0
 19392                                  
 19393                                  ;**
 19394                                  ;
 19395                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 19396                                  ;  If process has NET resources a close all is sent out over the net.
 19397                                  ;
 19398                                  ;   DOS_ABORT
 19399                                  ;
 19400                                  ;   Modification history:
 19401                                  ;
 19402                                  ;       Created: ARR 30 March 1983
 19403                                  ;
 19404                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 19405                                  ;				being terminated only if it is busy.
 19406                                  ;
 19407                                  
 19408                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 19409                                  ;--------------------------------------------------------------------------
 19410                                  ;
 19411                                  ; Procedure Name : DOS_ABORT
 19412                                  ;
 19413                                  ; Inputs:
 19414                                  ;       [CurrentPDB] set to PID of process aborting
 19415                                  ; Function:
 19416                                  ;       Close all files and free all SFTs for this PID
 19417                                  ; Returns:
 19418                                  ;       None
 19419                                  ; All destroyed except stack
 19420                                  ;---------------------------------------------------------------------------
 19421                                  
 19422                                  DOS_ABORT:
 19423 00002E26 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 19424 00002E2B 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 19425                                  reset_free_jfn:
 19426 00002E30 89CB                    	MOV     BX,CX
 19427 00002E32 51                      	PUSH    CX
 19428 00002E33 4B                      	DEC     BX                      ; get jfn (start with last one)
 19429                                  
 19430 00002E34 E87B37                  	CALL	_$CLOSE
 19431 00002E37 59                      	POP     CX
 19432 00002E38 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 19433                                  
 19434                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 19435                                  ; are running in the no-sharing no-network environment, we are simulating the
 19436                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 19437                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 19438                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 19439                                  ;
 19440                                  ; If sharing is loaded, then the following call to close process will
 19441                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 19442                                  ;
 19443                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 19444                                  ; known network resources. These resources are then responsible for cleaning
 19445                                  ; up after this process.
 19446                                  ;
 19447                                  ; Sleazy, eh?
 19448                                  
 19449                                  	;context DS			; SS is DOSDATA
 19450 00002E3A 16                      	push	ss
 19451 00002E3B 1F                      	pop	ds  ; 09/09/2018
 19452                                  
 19453                                  	;CallInstall Net_Abort, MultNET, 29
 19454 00002E3C B81D11                  	mov	ax,111Dh
 19455 00002E3F CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 19456                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 19457                                  			; DS???, SS = DOS CS
 19458                                  ;if installed
 19459 00002E41 FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 19460                                  ;else
 19461                                  ;	call 	MFTCloseP
 19462                                  ;endif
 19463                                  
 19464                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 19465                                  ; counts.
 19466                                  					; SS override
 19467 00002E45 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 19468                                  	;mov	cx,[es:di+4]
 19469 00002E4A 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 19470 00002E4E E317                    	jcxz    FCBScanDone
 19471                                  	;lea	di,[di+6]
 19472 00002E50 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 19473 00002E53 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19474                                  FCBTest:
 19475                                  	;cmp	[es:di+31h],ax
 19476 00002E57 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 19477 00002E5B 7505                    	jnz	short FCBNext		; no, skip it
 19478 00002E5D 26C7050000              	mov	word [es:di],0
 19479                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 19480                                  FCBNext:
 19481 00002E62 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 19482 00002E65 E2F0                    	loop    FCBTest
 19483                                  FCBScanDone:
 19484                                  
 19485                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 19486                                  
 19487 00002E67 31DB                    	XOR     BX,BX
 19488                                  Scan:
 19489 00002E69 53                      	push    bx
 19490 00002E6A E8C136                  	call	SFFromSFN
 19491 00002E6D 5B                      	pop     bx
 19492                                  	;jnc	short Scan1
 19493                                  	;retn
 19494                                  
 19495                                  	; 18/12/2022
 19496                                  	;jc	short NO_Question ; retn
 19497                                  	; 03/02/2024
 19498 00002E6E 7234                    	jc	short RET2
 19499                                  
 19500                                  ;M038
 19501                                  ; Do what the comment above says, check for busy state
 19502                                  
 19503                                  Scan1:
 19504                                  	;cmp	word [es:di],0
 19505                                  	;jz	short scan_next  ; MSDOS 3.3
 19506                                  	; MSDOS 6.0
 19507 00002E70 26833DFF                	cmp	word [es:di],sf_busy ; -1
 19508                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 19509                                  				; Is Sft busy? ;M038
 19510 00002E74 7519                    	jnz	short scan_next
 19511                                  ;
 19512                                  ; we have a SFT that is busy. See if it is for the current process
 19513                                  ;
 19514 00002E76 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19515                                  	;cmp	[es:di+31h],ax
 19516 00002E7A 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 19517 00002E7E 750F                    	jnz	short scan_next
 19518 00002E80 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 19519                                  	;cmp	[es:di+2Fh],ax
 19520 00002E84 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 19521 00002E88 7505                    	jnz	short scan_next
 19522                                  
 19523                                  ; This SFT is labelled as ours.
 19524                                  
 19525 00002E8A 26C7050000              	mov	word [es:di],0
 19526                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 19527                                  scan_next:
 19528 00002E8F 43                      	inc     bx
 19529 00002E90 EBD7                    	jmp     short Scan
 19530                                  
 19531                                  ;============================================================================
 19532                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 19533                                  ;============================================================================
 19534                                  ; 23/07/2018 - Retro DOS v3.0
 19535                                  ; 18/05/2019 - Retro DOS v4.0
 19536                                  
 19537                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 19538                                  ;
 19539                                  ;	DOS_CLOSE
 19540                                  ;	DOS_COMMIT
 19541                                  ;	FREE_SFT
 19542                                  ;	SetSFTTimes
 19543                                  ;
 19544                                  ;	Revision history:
 19545                                  ;
 19546                                  ;	   AN000  version 4.00	Jan. 1988
 19547                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 19548                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 19549                                  
 19550                                  ;Installed = TRUE
 19551                                  
 19552                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 19553                                  ;---------------------------------------------------------------------------
 19554                                  ;
 19555                                  ; Procedure Name : DOS_CLOSE
 19556                                  ;
 19557                                  ; Inputs:
 19558                                  ;	[THISSFT] set to the SFT for the file being used
 19559                                  ; Function:
 19560                                  ;	Close the indicated file via the SFT
 19561                                  ; Returns:
 19562                                  ;	sf_ref_count decremented otherwise
 19563                                  ;	ES:DI point to SFT
 19564                                  ;	Carry set if error
 19565                                  ;	    AX has error code
 19566                                  ; DS preserved, others destroyed
 19567                                  ;---------------------------------------------------------------------------
 19568                                  
 19569                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS already set up.
 19570                                  
 19571                                  ; 18/05/2019 - Retro DOS v4.0
 19572                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 19573                                  
 19574                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19575                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 19576                                  
 19577                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 19578                                  
 19579                                  DOS_CLOSE:
 19580 00002E92 C43E[9E05]              	LES	DI,[THISSFT]
 19581                                  	;mov	bx,[ES:DI+5]
 19582 00002E96 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19583                                  
 19584                                  ; Network closes are handled entirely by the net code.
 19585                                  
 19586                                  	;;test	bx,8000h
 19587                                  	;TEST	BX,sf_isnet
 19588                                  	; 17/12/2022
 19589                                  	;test	bh,80h
 19590 00002E9A F6C780                  	test	bh,(sf_isnet>>8)
 19591 00002E9D 7406                    	JZ	short LocalClose
 19592                                  
 19593                                  	;CallInstall Net_Close,MultNET,6
 19594 00002E9F B80611                  	mov     ax,1106h
 19595 00002EA2 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 19596                                  			; ES:DI -> SFT
 19597                                  			; SFT DPB field -> DPB of drive containing file
 19598                                  			; Return: CF set on error, AX = DOS error code
 19599                                  			; CF clear if successful
 19600                                  RET2:		; 03/02/2024
 19601 00002EA4 C3                      	retn
 19602                                  
 19603                                  ; All closes release the sharing information.
 19604                                  ; No commit releases sharing information
 19605                                  ;
 19606                                  ; All closes decrement the ref count.
 19607                                  ; No commit decrements the ref count.
 19608                                  
 19609                                  LocalClose:
 19610 00002EA5 E83FE4                  	call	ECritDisk
 19611 00002EA8 E85701                  	CALL	SetSFTTimes
 19612 00002EAB E8D800                  	CALL	FREE_SFT		; dec ref count or mark as busy
 19613                                  
 19614                                  ;hkn; SS is DOSDATA
 19615                                  	;Context DS
 19616 00002EAE 16                      	push	ss
 19617 00002EAF 1F                      	pop	ds
 19618                                  
 19619 00002EB0 50                      	push	ax
 19620 00002EB1 53                      	push	bx
 19621 00002EB2 E81043                  	call	ShareEnd
 19622 00002EB5 5B                      	pop	bx
 19623 00002EB6 58                      	pop	ax
 19624                                  
 19625                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 19626                                  
 19627                                  CloseEntry:
 19628 00002EB7 50                      	PUSH	AX
 19629                                  
 19630                                  ; File clean or device does not get stamped nor disk looked at.
 19631                                  
 19632                                  	;test	bx,0C0h
 19633                                  	; 17/12/2022
 19634 00002EB8 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19635                                  	;TEST	BX,devid_file_clean+devid_device
 19636 00002EBB 7403                    	JZ	short rdir
 19637                                  	; 14/11/2022
 19638 00002EBD E9B400                  	JMP	FREE_SFT_OK		; either clean or device
 19639                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19640                                  
 19641                                  ; Retrieve the directory entry for the file
 19642                                  
 19643                                  rdir:
 19644 00002EC0 E8D000                  	CALL	DirFromSFT
 19645                                  	;mov	al,5
 19646 00002EC3 B005                    	MOV	AL,error_access_denied
 19647 00002EC5 7303                    	JNC	short clook
 19648                                  	; 14/11/2022
 19649 00002EC7 E9AB00                  	JMP	CloseFinish		; pretend the close worked.
 19650                                  	;jc	short CloseFinish ; 24/07/2019
 19651                                  clook:
 19652                                  
 19653                                  ; ES:DI points to entry
 19654                                  ; DS:SI points to SFT
 19655                                  ; ES:BX points to buffer header
 19656                                  
 19657 00002ECA 57                      	push	di
 19658 00002ECB 56                      	push	si
 19659                                  	;lea	si,[si+20h]
 19660 00002ECC 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19661                                  
 19662                                  ; ES:DI point to directory entry
 19663                                  ; DS:SI point to unpacked name
 19664                                  
 19665 00002ECF E810E3                  	call	XCHGP
 19666                                  
 19667                                  ; ES:DI point to unpacked name
 19668                                  ; DS:SI point to directory entry
 19669                                  
 19670 00002ED2 E8550E                  	call	MetaCompare
 19671 00002ED5 E80AE3                  	call	XCHGP
 19672 00002ED8 5E                      	pop	si
 19673 00002ED9 5F                      	pop	di
 19674 00002EDA 740C                    	JZ	short CLOSE_GO		; Name OK
 19675                                  Bye:	
 19676 00002EDC 89F7                    	MOV	DI,SI
 19677 00002EDE 1E                      	PUSH	DS
 19678 00002EDF 07                      	POP	ES			; ES:DI points to SFT
 19679 00002EE0 16                      	PUSH	SS
 19680 00002EE1 1F                      	POP	DS
 19681 00002EE2 F9                      	STC
 19682                                  	;mov	al,2
 19683 00002EE3 B002                    	MOV	AL,error_file_not_found
 19684 00002EE5 E98D00                  	JMP	CloseFinish ; 24/07/2019
 19685                                  
 19686                                  	; 18/05/2019 - Retro DOS v4.0
 19687                                  CLOSE_GO:
 19688                                  	; 03/02/2024
 19689                                  	;mov	al,[si+4]
 19690 00002EE8 8A4404                  	mov	al,[si+SF_ENTRY.sf_attr]
 19691                                  	
 19692                                  	; MSDOS 6.0
 19693                                  	;test	word [si+2],8000h
 19694                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19695                                  	; 17/12/2022
 19696                                  	;test	byte [si+3],80h
 19697 00002EEB F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19698 00002EEF 740A                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19699                                  	; MSDOS 3.3 & MSDOS 6.0
 19700                                  	;mov	ch,[es:di+0Bh]
 19701 00002EF1 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19702                                  
 19703                                  	; 03/02/2024
 19704                                  	;;mov	al,[si+4]
 19705                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr]
 19706                                  
 19707                                  ;hkn; SS override
 19708 00002EF5 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19709                                  	; MSDOS 3.3
 19710                                  	;;call	MatchAttributes
 19711                                  	;;JNZ	short Bye		; attributes do not match
 19712                                  	; 18/05/2019
 19713 00002EF9 EB04                    	JMP	SHORT setattr		;FT.
 19714                                  nofcb:
 19715                                  	; 03/02/2024
 19716                                  	; MSDOS 6.0
 19717                                  	;;mov	al,[si+4]
 19718                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19719                                  
 19720 00002EFB 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19721                                  setattr:
 19722                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19723                                  	;or	byte [es:di+0Bh],20h
 19724 00002EFF 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19725                                  	; MSDOS 6.0
 19726                                  	;mov	ax,[es:di+1Ah]
 19727 00002F04 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19728                                  					;F.O. save old first cluster
 19729                                  ;hkn; SS override
 19730 00002F08 36A3[BE0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19731                                  
 19732                                  ; 03/02/2024
 19733                                  %if 0
 19734                                  	;mov	ax,[si+0Bh]
 19735                                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19736                                  	;mov	[es:di+1Ah],ax
 19737                                  	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19738                                  	;mov	ax,[si+11h]
 19739                                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19740                                  	;mov	[es:di+1Ch],ax
 19741                                  	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19742                                  	;mov	ax,[si+13h]
 19743                                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19744                                  	;mov	[es:di+1Eh],ax
 19745                                  	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19746                                  	;mov	ax,[si+0Fh]
 19747                                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19748                                  	;mov	[es:di+18h],ax
 19749                                  	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19750                                  	;mov	ax,[si+0Dh]
 19751                                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19752                                  	;mov	[es:di+16h],ax
 19753                                  	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19754                                  %else
 19755                                  	; 03/02/2024 - Retro DOS v4.1
 19756 00002F0C 56                      	push	si
 19757 00002F0D 83C60B                  	add	si,0Bh
 19758 00002F10 AD                      	lodsw	; [si+SF_ENTRY.sf_firclus]
 19759                                  	;mov	[es:di+1Ah],ax
 19760 00002F11 2689451A                	mov	[es:di+dir_entry.dir_first],ax	; Set first cluster
 19761 00002F15 AD                      	lodsw	; [si+SF_ENTRY.sf_time]
 19762 00002F16 26894516                	mov	[es:di+dir_entry.dir_time],ax	; Set time
 19763 00002F1A AD                      	lodsw	; [si+SF_ENTRY.sf_date]
 19764 00002F1B 26894518                	mov	[es:di+dir_entry.dir_date],ax	; Set date
 19765 00002F1F AD                      	lodsw	; [si+SF_ENTRY.sf_size]
 19766 00002F20 2689451C                	mov	[es:di+dir_entry.dir_size_l],ax	; Set size
 19767 00002F24 AD                      	lodsw	; [si+SF_ENTRY.sf_size+2]
 19768 00002F25 2689451E                	mov	[es:di+dir_entry.dir_size_h],ax
 19769 00002F29 5E                      	pop	si
 19770                                  %endif
 19771                                  
 19772                                  	; MSDOS 6.0
 19773                                  ;; File Tagging
 19774 00002F2A 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty
 19775                                  				  ;LB. if already dirty		    ;AN000;
 19776 00002F2F 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19777                                  	; 02/06/2019
 19778 00002F31 E8D42A                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19779                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19780                                  	;or	byte [es:bx+5],40h
 19781 00002F34 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19782                                  yesdirty4:
 19783 00002F39 1E                      	push	ds
 19784 00002F3A 56                      	push	si
 19785                                  	; MSDOS 6.0
 19786                                  	;mov	cx,[si+0Bh]
 19787                                  	; 07/12/2022
 19788 00002F3B 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19789                                  ;hkn; SS override
 19790 00002F3E 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19791                                  	; MSDOS 3.3 
 19792                                  	;push	ss
 19793                                  	;pop	ds
 19794                                  	;MOV	AL,[THISDRV]
 19795                                  ;;; 10/1/86  update fastopen cache
 19796                                  	; MSDOS 3.3 & MSDOS 6.0
 19797 00002F42 52                      	PUSH	DX
 19798 00002F43 B400                    	MOV	AH,0			; dir entry update
 19799 00002F45 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19800                                  	; MSDOS 6.0
 19801 00002F47 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19802 00002F49 750C                    	JNZ	short do_update2	;AN005; no, do update
 19803 00002F4B B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19804                                  	; 27/06/2024
 19805                                  	;;;
 19806                                  	;;mov	di,[si+1Bh]
 19807                                  	;MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19808                                  	;;mov	cx,[si+1Dh]
 19809                                  	;MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19810 00002F4D C57C1B                  	lds	di,[si+SF_ENTRY.sf_dirsec]
 19811 00002F50 8CD9                      	mov	cx,ds
 19812                                  	;;;
 19813                                  	;mov	dh,[si+1Fh]
 19814 00002F52 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19815 00002F55 EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19816                                  
 19817                                  do_update2:				;AN011;F.O.
 19818                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19819                                  	; 
 19820 00002F57 363B0E[BE0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19821 00002F5C 7407                    	JZ	short do_update		;AN011;F.O. yes
 19822 00002F5E B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19823 00002F60 368B0E[BE0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19824                                  do_update:				;AN005;
 19825                                  ;hkn; SS is DOSDATA
 19826                                  	;Context DS
 19827 00002F65 16                      	push	ss
 19828 00002F66 1F                      	pop	ds
 19829                                  	; MSDOS 3.3 & MSDOS 6.0
 19830 00002F67 E8FEF6                  	call	FastOpen_Update 	; invoke fastopen
 19831 00002F6A 5A                      	POP	DX
 19832                                  
 19833                                  ;;; 10/1/86  update fastopen cache
 19834 00002F6B E89829                  	call	FLUSHBUF		; flush all relevant buffers
 19835 00002F6E 5F                      	pop	di
 19836 00002F6F 07                      	pop	es
 19837                                  	;mov	al,5
 19838 00002F70 B005                    	MOV	AL,error_access_denied
 19839 00002F72 7201                    	JC	short CloseFinish
 19840                                  FREE_SFT_OK:
 19841 00002F74 F8                      	CLC				; signal no error.
 19842                                  CloseFinish:
 19843                                  
 19844                                  ; Indicate to the device that the SFT is being closed.
 19845                                  
 19846                                  ;;;; 7/21/86
 19847 00002F75 9C                      	PUSHF				; save flag from DirFromSFT
 19848 00002F76 E84D15                  	call	DEV_CLOSE_SFT
 19849 00002F79 9D                      	POPF
 19850                                  ;;;; 7/21/86
 19851                                  ;
 19852                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19853                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19854                                  ; going to be moving from busy to free.
 19855                                  ;
 19856 00002F7A 59                      	POP	CX			; get old ref count
 19857 00002F7B 9C                      	PUSHF
 19858                                  	; 03/02/2024
 19859                                  	;DEC	CX			; if cx != 1
 19860                                  	;JNZ	short NoFree		; then do NOT free SFT
 19861 00002F7C E203                    	loop	NoFree ; PCDOS 7.1 IBMDOS.COM
 19862                                  
 19863 00002F7E 26890D                  	mov	[es:di],cx ; 0
 19864                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19865                                  NoFree:
 19866 00002F81 E87EE3                  	call	LCritDisk
 19867 00002F84 9D                      	POPF
 19868 00002F85 C3                      	retn
 19869                                  
 19870                                  ;---------------------------------------------------------------------------
 19871                                  ;
 19872                                  ; Procedure Name : FREE_SFT
 19873                                  ;
 19874                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19875                                  ; Flags preserved. Return old ref count in AX
 19876                                  ;
 19877                                  ; Note that busy is indicated by the SFT ref count being -1.
 19878                                  ;
 19879                                  ;---------------------------------------------------------------------------
 19880                                  
 19881                                  FREE_SFT:
 19882 00002F86 9C                      	PUSHF		; Save carry state
 19883 00002F87 268B05                  	mov	ax,[es:di]
 19884                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19885 00002F8A 48                      	DEC	AX
 19886 00002F8B 7501                    	JNZ	short SetCount
 19887 00002F8D 48                      	DEC	AX
 19888                                  SetCount:
 19889 00002F8E 268705                  	xchg	ax,[es:di]
 19890                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19891 00002F91 9D                      	POPF
 19892 00002F92 C3                      	retn
 19893                                  
 19894                                  	; 18/05/2019 - Retro DOS v4.0
 19895                                  
 19896                                  ;----------------------------------------------------------------------------
 19897                                  ;
 19898                                  ; Procedure Name : DirFromSFT
 19899                                  ;
 19900                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19901                                  ;
 19902                                  ;   Inputs:	ES:DI point to SFT
 19903                                  ;		DS = DOSDATA
 19904                                  ;   Outputs:
 19905                                  ;		EXTERR_LOCUS = errLOC_Disk
 19906                                  ;		CurBuf points to buffer
 19907                                  ;		Carry Clear -> operation OK
 19908                                  ;		    ES:DI point to entry
 19909                                  ;		    ES:BX point to buffer
 19910                                  ;		    DS:SI point to SFT
 19911                                  ;		Carry SET   -> operation failed
 19912                                  ;		    registers trashified
 19913                                  ;   Registers modified: ALL
 19914                                  ;----------------------------------------------------------------------------
 19915                                  
 19916                                  DirFromSFT:
 19917                                  	;mov	byte [EXTERR_LOCUS],2
 19918 00002F93 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19919 00002F98 06                      	push	es
 19920 00002F99 57                      	push	di
 19921                                  	; MSDOS 3.3
 19922                                  	;;mov	dx,[es:di+1Dh]
 19923                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19924                                  	; MSDOS 6.0
 19925                                  	;mov	dx,[es:[di+1Dh]
 19926 00002F9A 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19927 00002F9E 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19928                                  	; 04/02/2024
 19929 00002FA2 52                      	push	dx
 19930                                  	;mov	dx,[es:di+1Bh]
 19931 00002FA3 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19932                                  	; 04/02/2024
 19933                                  	; 19/05/2019
 19934                                  	;PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19935                                  	; MSDOS 3.3 & MSDOS 6.0
 19936 00002FA7 52                      	PUSH	DX
 19937 00002FA8 E8D825                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19938                                  					; [THISDPB] set
 19939 00002FAB 5A                      	POP	DX
 19940 00002FAC 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19941 00002FB0 721E                    	JC	short PopDone
 19942                                  	; 22/09/2023
 19943                                  	;XOR	AL,AL	; *		; Pre read
 19944                                  	;;mov	byte [ALLOWED],18h
 19945                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19946                                  	;call	GETBUFFR
 19947                                  	; 22/09/2023
 19948 00002FB2 E84D28                  	call	GETBUFFER ; * 		; Pre read
 19949 00002FB5 7219                    	JC	short PopDone
 19950 00002FB7 5E                      	pop	si
 19951 00002FB8 1F                      	pop	ds			; Get back SFT pointer
 19952                                  
 19953                                  ;hkn; SS override
 19954 00002FB9 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19955                                  	;or	byte [es:di+5],4
 19956 00002FBE 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19957 00002FC3 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19958                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19959                                  	;lea	di,[di+20] ; MSDOS 6.0
 19960 00002FC5 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19961                                  	;mov	al,32
 19962 00002FC8 B020                    	MOV	AL,dir_entry.size
 19963                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19964 00002FCA F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19965 00002FCD 01C7                    	ADD	DI,AX			; Point at the entry
 19966 00002FCF C3                      	retn				; carry is clear
 19967                                  PopDone:
 19968 00002FD0 5F                      	pop	di
 19969 00002FD1 07                      	pop	es
 19970                                  PopDone_retn:
 19971 00002FD2 C3                      	retn
 19972                                  
 19973                                  ;----------------------------------------------------------------------------
 19974                                  ;
 19975                                  ;**	DOS_Commit - UPdate Directory Entries
 19976                                  ;
 19977                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19978                                  ;		(DS) = DOSGROUP
 19979                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19980                                  ;	USES	all but DS
 19981                                  ;
 19982                                  ;----------------------------------------------------------------------------
 19983                                  
 19984                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19985                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19986                                  
 19987                                  DOS_COMMIT:
 19988                                  	;hkn; called from srvcall. DS already set up.
 19989 00002FD3 C43E[9E05]              	LES	DI,[THISSFT]
 19990                                  	;mov	bx,[es:di+5]
 19991 00002FD7 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19992                                  	;test	bx,0C0h
 19993                                  	; 17/12/2022
 19994 00002FDB F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19995                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19996 00002FDE 75F2                    	jnz	short PopDone_retn
 19997                                  	;test	bx,8000h
 19998                                  	; 17/12/2022
 19999                                  	;test	bh,80h
 20000 00002FE0 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 20001                                  	;TEST	BX,sf_isnet ; 8000h
 20002 00002FE3 7406                    	JZ	short LOCAL_COMMIT
 20003                                  
 20004                                  ;IF NOT Installed
 20005                                  ;	transfer NET_COMMIT
 20006                                  ;ELSE
 20007                                  	;mov	ax,1107h
 20008 00002FE5 B80711                  	MOV	AX,(MultNET<<8)|7
 20009 00002FE8 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 20010                                  			; ES:DI -> SFT
 20011                                  			; SFT DPB field -> DPB of drive containing file
 20012                                  			; Return: CF set on error, AX = DOS error code
 20013                                  			; CF clear if successful
 20014                                  localcommit_retn: ; 18/12/2022	
 20015 00002FEA C3                      	retn
 20016                                  ;ENDIF
 20017                                  
 20018                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 20019                                  ; There are three ways we can do this. One is to enter a critical section to
 20020                                  ; protect a potential free. The second is to increment the ref count to mask
 20021                                  ; the close decrementing.
 20022                                  ;
 20023                                  ; The proper way is to let the caller's of close decide if a decrement should
 20024                                  ; be done. We do this by providing another entry into close after the
 20025                                  ; decrement and after the share information release.
 20026                                  
 20027                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 20028                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 20029                                  
 20030                                  LOCAL_COMMIT:
 20031 00002FEB E8F9E2                  	call	ECritDisk
 20032                                  	; MSDOS 6.0
 20033 00002FEE E8F6E2                  	call	ECritDisk	;PTM.
 20034 00002FF1 E80E00                  	call	SetSFTTimes
 20035 00002FF4 B8FFFF                  	MOV	AX,-1
 20036 00002FF7 E8BDFE                  	call	CloseEntry
 20037                                  	; MSDOS 6.0
 20038 00002FFA 9C                      	PUSHF			;PTM.				;AN000;
 20039 00002FFB E8C014                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 20040 00002FFE 9D                      	POPF			;PTM.				;AN000;
 20041                                  	;call	LCritDisk	;PTM.				;AN000;
 20042                                  	; 18/12/2022
 20043 00002FFF E900E3                  	jmp	LCritDisk
 20044                                  ;localcommit_retn:
 20045                                  ;	retn
 20046                                  
 20047                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 20048                                  ;----------------------------------------------------------------------------
 20049                                  ;
 20050                                  ; Procedure Name : SetSFTTimes
 20051                                  ;
 20052                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 20053                                  ;   Reflect these times in other SFT's for the same file.
 20054                                  ;
 20055                                  ;   Inputs:	ES:DI point to SFT
 20056                                  ;		BX = sf_flags set apprpriately
 20057                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 20058                                  ;   Registers modified: All except ES:DI, BX, AX
 20059                                  ;
 20060                                  ;----------------------------------------------------------------------------
 20061                                  
 20062                                  	; 04/02/2024 - Retro DOS v4.1
 20063                                  
 20064                                  SetSFTTimes:
 20065                                  
 20066                                  ; 04/02/2024
 20067                                  %if 0
 20068                                  ;	File clean or device does not get stamped nor disk looked at.
 20069                                  	
 20070                                  	;test	bx,0C0h
 20071                                  	; 17/12/2022
 20072                                  	test	bl,devid_file_clean+devid_device
 20073                                  	;TEST	BX,devid_file_clean+devid_device
 20074                                  	;retnz				; clean or device => no timestamp
 20075                                  	jnz	short localcommit_retn
 20076                                  
 20077                                  ;	file and dirty. See if date is good
 20078                                  
 20079                                  	;test	bx,4000h
 20080                                  	; 17/12/2022
 20081                                  	;test	bh,40h
 20082                                  	test	bh,(sf_close_nodate>>8)
 20083                                  	;TEST	BX,sf_close_nodate
 20084                                  	;retnz				; nodate => no timestamp
 20085                                  	jnz	short localcommit_retn
 20086                                  %else
 20087                                  	; 04/02/2024
 20088                                  	; (PCDOS 7.1 IBMDOS.COM)
 20089                                  	;test	bx,40C0h
 20090 00003002 F7C3C040                	test	bx,sf_close_nodate+devid_file_clean+devid_device
 20091 00003006 75E2                    	jnz	short localcommit_retn
 20092                                  %endif
 20093                                  
 20094 00003008 50                      	push	ax
 20095 00003009 53                      	push	bx
 20096 0000300A E8D8DA                  	call	DATE16			; Date/Time to AX/DX
 20097                                  	;mov	[es:di+0Fh],ax
 20098 0000300D 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 20099                                  	;mov	[es:di+0Dh],dx
 20100 00003011 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 20101 00003015 31C0                    	XOR	AX,AX
 20102                                  ;if installed
 20103                                  	;call	JShare + 14 * 4
 20104 00003017 FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 20105                                  ;else
 20106                                  ;	call	ShSU
 20107                                  ;endif
 20108 0000301B 5B                      	pop	bx
 20109 0000301C 58                      	pop	ax
 20110 0000301D C3                      	retn
 20111                                  
 20112                                  ;============================================================================
 20113                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 20114                                  ;============================================================================
 20115                                  ; 23/07/2018 - Retro DOS v3.0
 20116                                  ; 18/05/2019 - Retro DOS v4.0
 20117                                  
 20118                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 20119                                  
 20120                                  ;TITLE DIRCALL - Directory manipulation internal calls
 20121                                  ;NAME  DIRCALL
 20122                                  
 20123                                  ;**	Low level directory manipulation routines for making removing and
 20124                                  ;	  verifying local or NET directories
 20125                                  ;
 20126                                  ;	DOS_MKDIR
 20127                                  ;	DOS_CHDIR
 20128                                  ;	DOS_RMDIR
 20129                                  ;
 20130                                  ;	Modification history:
 20131                                  ;
 20132                                  ;		Created: ARR 30 March 1983
 20133                                  
 20134                                  ;BREAK <DOS_MkDir - Make a directory entry>
 20135                                  ;---------------------------------------------------------------------------
 20136                                  ;
 20137                                  ; Procedure Name : DOS_MkDir
 20138                                  ;
 20139                                  ; Inputs:
 20140                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20141                                  ;		terminated)
 20142                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20143                                  ;		( = -1 if current dir not involved, else
 20144                                  ;		 Points to first char after last "/" of current dir part)
 20145                                  ;	[THISCDS] Points to CDS being used
 20146                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20147                                  ; Function:
 20148                                  ;	Make a new directory
 20149                                  ; Returns:
 20150                                  ;	Carry Clear
 20151                                  ;		No error
 20152                                  ;	Carry Set
 20153                                  ;	    AX is error code
 20154                                  ;		error_path_not_found
 20155                                  ;			Bad path (not in curr dir part if present)
 20156                                  ;		error_bad_curr_dir
 20157                                  ;			Bad path in current directory part of path
 20158                                  ;		error_access_denied
 20159                                  ;			Already exists, device name
 20160                                  ; DS preserved, Others destroyed
 20161                                  ;---------------------------------------------------------------------------
 20162                                  
 20163                                  ;hkn; called from path.asm. DS already set up.
 20164                                  
 20165                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20166                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 20167                                  
 20168                                  ; 04/02/2024 - Retro DOS v4.1
 20169                                  
 20170                                  DOS_MKDIR:
 20171 0000301E E80DE2                  	call	TestNet
 20172 00003021 7313                    	JNC	short LOCAL_MKDIR
 20173                                  
 20174                                  ;IF NOT Installed
 20175                                  ;	transfer NET_MKDIR
 20176                                  ;ELSE
 20177                                  	;mov	ax,1103h
 20178 00003023 B80311                  	MOV	AX,(MultNET<<8)|3
 20179 00003026 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 20180                                  			; SS = DOS CS
 20181                                  			; SDA first filename pointer -> fully-qualified directory name
 20182                                  			; SDA CDS pointer -> current directory
 20183                                  			; Return: CF set on error, AX = DOS error code
 20184                                  			; CF clear if successful
 20185 00003028 C3                      	retn
 20186                                  ;ENDIF
 20187                                  
 20188                                  NODEACCERRJ:
 20189                                  	;mov	ax,5
 20190 00003029 B80500                  	MOV	AX,error_access_denied
 20191                                  _BadRet:
 20192 0000302C F9                      	STC
 20193                                  	;call	LCritDisk
 20194                                  	;retn
 20195                                  	; 18/12/2022
 20196 0000302D E9D2E2                  	jmp	LCritDisk
 20197                                  
 20198                                  PATHNFJ:
 20199 00003030 E8CFE2                  	call	LCritDisk
 20200 00003033 E904FA                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 20201                                  
 20202                                  LOCAL_MKDIR:
 20203 00003036 E8AEE2                  	call	ECritDisk
 20204                                  
 20205                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 20206                                  
 20207 00003039 8C16[A005]              	MOV	[THISSFT+2],SS
 20208                                  
 20209                                  ;hkn; DOSDATA
 20210 0000303D C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 20211                                  
 20212                                  ;  NOTE: Need WORD PTR because MASM takes type of
 20213                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 20214                                  
 20215                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 20216 00003043 C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 20217                                  				; make sure SHARER won't complain.
 20218                                  	;mov	al,10h
 20219 00003049 B010                    	MOV	AL,attr_directory
 20220 0000304B E81518                  	call	MakeNode
 20221 0000304E 72E0                    	JC	short PATHNFJ
 20222 00003050 83F803                  	CMP	AX,3
 20223 00003053 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 20224 00003055 C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 20225 00003059 C53E[E205]              	LDS	DI,[CURBUF]
 20226 0000305D 29FE                    	SUB	SI,DI
 20227 0000305F 56                      	PUSH	SI		; Pointer to dir_first
 20228                                  
 20229                                  ; 04/02/2024
 20230                                  %if 0
 20231                                  	; MSDOS 6.0
 20232                                  	;push	word [DI+8]
 20233                                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 20234                                  	; MSDOS 3.3 & MSDOS 6.0
 20235                                  	;push	word [di+6]
 20236                                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 20237                                  %else
 20238                                  	; 04/02/2024
 20239                                  	; (PCDOS 7.1 IBMDOS.COM)
 20240 00003060 C54506                  	lds	ax,[di+BUFFINFO.buf_sector] ; Sector of new node
 20241 00003063 1E                      	push	ds
 20242 00003064 50                      	push	ax
 20243                                  %endif
 20244                                  
 20245 00003065 16                      	push	ss
 20246 00003066 1F                      	pop	ds
 20247                                  
 20248                                  	; 04/02/2024
 20249                                  	;PUSH	word [DIRSTART]	; Parent for .. entry
 20250 00003067 31C0                    	XOR	AX,AX
 20251                                  	;MOV	[DIRSTART],AX	; Null directory
 20252 00003069 8706[C205]              	xchg	ax,[DIRSTART]
 20253 0000306D 50                      	push	ax
 20254                                  
 20255 0000306E E83017                  	call	NEWDIR
 20256 00003071 726F                    	JC	short NODEEXISTSPOPDEL ; No room
 20257 00003073 E8190D                  	call	GETENT		; First entry
 20258 00003076 726A                    	JC	short NODEEXISTSPOPDEL ; Screw up
 20259 00003078 C43E[E205]              	LES	DI,[CURBUF]
 20260                                  
 20261                                  	; MSDOS 6.0
 20262 0000307C 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 20263                                  				 ;LB. if already dirty		    ;AN000;
 20264 00003081 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 20265 00003083 E88229                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 20266                                  	
 20267                                  	; MSDOS 3.3 & MSDOS 6.0
 20268                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 20269 00003086 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 20270                                  yesdirty5:
 20271                                  	;;add	di,16 ; MSDOS 3.3
 20272                                  	;add	di,20 ; MSDOS 6.0
 20273 0000308B 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 20274 0000308E B82E20                  	MOV	AX,202EH	; ". "
 20275 00003091 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 20276 00003095 E8A817                  	call	SETDOTENT
 20277 00003098 B82E2E                  	MOV	AX,2E2EH	; ".."
 20278 0000309B 5A                      	POP	DX		; Parent
 20279 0000309C E8A117                  	call	SETDOTENT
 20280 0000309F C42E[8A05]              	LES	BP,[THISDPB]
 20281                                  	; 22/09/2023
 20282                                  	;;mov	byte [ALLOWED],18h
 20283                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20284 000030A3 5A                      	POP	DX		; Entry sector
 20285                                  	; MSDOS 6.0
 20286 000030A4 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 20287                                  
 20288                                  	;XOR	AL,AL ; *	; Pre read
 20289                                  	;call	GETBUFFR
 20290                                  	; 22/09/2023
 20291 000030A8 E85727                  	call	GETBUFFER ; *	 ;Pre read
 20292 000030AB 725B                    	JC	short NODEEXISTSP
 20293 000030AD 8B16[C205]              	MOV	DX,[DIRSTART]
 20294 000030B1 C53E[E205]              	LDS	DI,[CURBUF]
 20295                                  	;or	byte [di+5],4
 20296 000030B5 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20297 000030B9 5E                      	POP	SI		; dir_first pointer
 20298 000030BA 01FE                    	ADD	SI,DI
 20299 000030BC 8914                    	MOV	[SI],DX
 20300 000030BE 31D2                    	XOR	DX,DX
 20301 000030C0 895402                  	MOV	[SI+2],DX	; Zero size
 20302 000030C3 895404                  	MOV	[SI+4],DX
 20303                                  DIRUP:
 20304                                  	; MSDOS 6.0
 20305 000030C6 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 20306                                  	;			 ;LB. if already dirty 		   ;AN000;
 20307 000030CA 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 20308 000030CC E83929                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 20309                                  	
 20310                                  	; MSDOS 3.3 & MSDOS 6.0
 20311                                  	;or	byte [di+5],40h
 20312 000030CF 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 20313                                  yesdirty6:
 20314 000030D3 16                      	push	ss
 20315 000030D4 1F                      	pop	ds
 20316 000030D5 268A4600                	mov	al,[es:bp]
 20317                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 20318 000030D9 E82A28                  	call	FLUSHBUF
 20319                                  	;mov	ax,5
 20320 000030DC B80500                  	MOV	AX,error_access_denied
 20321                                  	;call	LCritDisk
 20322                                  	;retn
 20323                                  	; 18/12/2022
 20324 000030DF E920E2                  	jmp	LCritDisk
 20325                                  
 20326                                  NODEEXISTSPOPDEL:
 20327 000030E2 5A                      	POP	DX		; Parent
 20328 000030E3 5A                      	POP	DX		; Entry sector
 20329                                  	; MSDOS 6.0 
 20330 000030E4 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 20331 000030E8 C42E[8A05]              	LES	BP,[THISDPB]
 20332                                  	; 22/09/2023
 20333                                  	;;mov	byte [ALLOWED],18h
 20334                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20335                                  	;XOR	AL,AL ; *	; Pre read
 20336                                  	;call	GETBUFFR
 20337                                  	; 22/09/2023
 20338 000030EC E81327                  	call	GETBUFFER ; *	; Pre read
 20339 000030EF 7217                    	JC	short NODEEXISTSP
 20340 000030F1 C53E[E205]              	LDS	DI,[CURBUF]
 20341                                  	;or	byte [di+5],4
 20342 000030F5 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20343 000030F9 5E                      	POP	SI		; dir_first pointer
 20344 000030FA 01FE                    	ADD	SI,DI
 20345                                  	;sub	si,1Ah ; 26
 20346 000030FC 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 20347 000030FF C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 20348 00003102 E8C1FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 20349                                  NODEEXISTS:
 20350 00003105 E921FF                  	JMP	NODEACCERRJ ; 10/08/2018
 20351                                  
 20352                                  NODEEXISTSP:
 20353 00003108 5E                      	POP	SI		; Clean stack
 20354 00003109 EBFA                    	JMP	short NODEEXISTS
 20355                                  
 20356                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20357                                  
 20358                                  ;BREAK <DOS_ChDir -- Verify a directory>
 20359                                  ;----------------------------------------------------------------------------
 20360                                  ;
 20361                                  ; Procedure Name : DOS_ChDir
 20362                                  ;
 20363                                  ; Inputs:
 20364                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20365                                  ;		terminated)
 20366                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20367                                  ;		( = -1 if current dir not involved, else
 20368                                  ;		 Points to first char after last "/" of current dir part)
 20369                                  ;	[THISCDS] Points to CDS being used May not be NUL
 20370                                  ; Function:
 20371                                  ;	Validate the path for potential new current directory
 20372                                  ; Returns:
 20373                                  ;	NOTE:
 20374                                  ;	    [SATTRIB] is modified by this call
 20375                                  ;	Carry Clear
 20376                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 20377                                  ;		Caller must NOT set ID fields on a NET CDS.
 20378                                  ;	Carry Set
 20379                                  ;	    AX is error code
 20380                                  ;		error_path_not_found
 20381                                  ;			Bad path
 20382                                  ;		error_access_denied
 20383                                  ;			device or file name
 20384                                  ; DS preserved, Others destroyed
 20385                                  ;----------------------------------------------------------------------------
 20386                                  
 20387                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 20388                                  
 20389                                  ; 18/05/2019 - Retro DOS v4.0
 20390                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 20391                                  
 20392                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20393                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 20394                                  
 20395                                  DOS_CHDIR:
 20396 0000310B E820E1                  	call	TestNet
 20397 0000310E 7306                    	JNC	short LOCAL_CHDIR
 20398                                  
 20399                                  ;IF NOT Installed
 20400                                  ;	transfer NET_CHDIR
 20401                                  ;ELSE
 20402                                  	;mov	ax,1105h
 20403 00003110 B80511                  	MOV	AX,(MultNET<<8)|5
 20404 00003113 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 20405                                  			; SS = DOS CS
 20406                                  			; SDA first filename pointer -> fully-qualified directory name
 20407                                  			; SDA CDS pointer -> current directory
 20408                                  			; Return: CF set on error, AX = DOS error code
 20409                                  			; CF clear if successful
 20410 00003115 C3                      	retn
 20411                                  ;ENDIF
 20412                                  
 20413                                  LOCAL_CHDIR:
 20414 00003116 E8CEE1                  	call	ECritDisk
 20415                                  	; MSDOS 6.0
 20416                                  	;;test	word [es:di+43h],2000h
 20417                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 20418                                  	; 17/12/2022
 20419                                  	;test	byte [es:di+44h],20h
 20420 00003119 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 20421 0000311E 7406                    	JZ	short nojoin		   ;PTM.
 20422                                  	;mov	word [es:di+49h], 0FFFFh
 20423 00003120 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 20424                                  nojoin:
 20425                                  	; MSDOS 3.3 & MSDOS 6.0
 20426 00003126 C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 20427                                  	;mov	byte [SATTRIB],16h
 20428 0000312B C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20429                                  				; Dir calls can find these
 20430                                  ; DOS 3.3  6/24/86 FastOpen
 20431 00003130 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 20432 00003135 E8E10C                  	call	GETPATH
 20433                                  	
 20434                                  	; 04/02/2024
 20435                                  	;PUSHF						;AN000;
 20436 00003138 9F                      	lahf						
 20437 00003139 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 20438                                  	;POPF						;AN000;
 20439 0000313E 9E                      	sahf
 20440                                  
 20441                                  ; DOS 3.3  6/24/86 FastOpen
 20442                                  
 20443                                  	; MSDOS 3.3
 20444                                  	;mov	byte [FastOpenFlg],0
 20445                                  	
 20446                                  	;mov	ax,3
 20447 0000313F B80300                  	MOV	AX,error_path_not_found
 20448 00003142 7206                    	JC	short ChDirDone
 20449 00003144 7539                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20450 00003146 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 20451                                  	; 27/06/2024
 20452                                  	;CLC
 20453                                  ChDirDone:
 20454                                  	;call	LCritDisk
 20455                                  	;retn
 20456                                  	; 18/12/2022
 20457 0000314A E9B5E1                  	jmp	LCritDisk
 20458                                  
 20459                                  ;BREAK <DOS_RmDir -- Remove a directory>
 20460                                  ;----------------------------------------------------------------------------
 20461                                  ;
 20462                                  ; Procedure Name : DOS_RmDir
 20463                                  ;
 20464                                  ; Inputs:
 20465                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20466                                  ;		terminated)
 20467                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20468                                  ;		( = -1 if current dir not involved, else
 20469                                  ;		 Points to first char after last "/" of current dir part)
 20470                                  ;	[THISCDS] Points to CDS being used
 20471                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20472                                  ; Function:
 20473                                  ;	Remove a directory
 20474                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 20475                                  ; Returns:
 20476                                  ;	NOTE:
 20477                                  ;	    [SATTRIB] is modified by this call
 20478                                  ;	Carry Clear
 20479                                  ;		No error
 20480                                  ;	Carry Set
 20481                                  ;	    AX is error code
 20482                                  ;		error_path_not_found
 20483                                  ;			Bad path (not in curr dir part if present)
 20484                                  ;		error_bad_curr_dir
 20485                                  ;			Bad path in current directory part of path
 20486                                  ;		error_access_denied
 20487                                  ;			device or file name, root directory
 20488                                  ;			Bad directory ('.' '..' messed up)
 20489                                  ; DS preserved, Others destroyed
 20490                                  ;----------------------------------------------------------------------------
 20491                                  
 20492                                  ;hkn; called from path.asm. DS already set up.
 20493                                  
 20494                                  ; 18/05/2019 - Retro DOS v4.0
 20495                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 20496                                  
 20497                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20498                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 20499                                  
 20500                                  DOS_RMDIR:
 20501 0000314D E8DEE0                  	call	TestNet
 20502 00003150 7306                    	JNC	short LOCAL_RMDIR
 20503                                  
 20504                                  ;IF NOT Installed
 20505                                  ;	transfer NET_RMDIR
 20506                                  ;ELSE
 20507                                  	;mov	ax,1101h
 20508 00003152 B80111                  	MOV	AX,(MultNET<<8)|1
 20509 00003155 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 20510                                  			; SS = DOS CS
 20511                                  			; SDA first filename pointer -> fully-qualified directory name
 20512                                  			; SDA CDS pointer -> current directory
 20513                                  			; Return: CF set on error, AX = DOS error code
 20514                                  			; CF clear if successful
 20515 00003157 C3                      	retn
 20516                                  ;ENDIF
 20517                                  
 20518                                  LOCAL_RMDIR:
 20519 00003158 E88CE1                  	call	ECritDisk
 20520 0000315B C606[4C03]00            	MOV	byte [NoSetDir],0
 20521                                  	;mov	byte [SATTRIB],16h
 20522 00003160 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20523                                  					; Dir calls can find these
 20524 00003165 E8B10C                  	call	GETPATH
 20525 00003168 720C                    	JC	short NOPATH		; Path not found
 20526 0000316A 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20527 0000316C 8B3E[C205]              	MOV	DI,[DIRSTART]
 20528 00003170 09FF                    	OR	DI,DI			; Root ?
 20529 00003172 750E                    	JNZ	short rmdir_get_buf	; No
 20530 00003174 EB09                    	JMP	SHORT NOTDIRPATH
 20531                                  
 20532                                  NOPATH:
 20533                                  	;mov	ax,3
 20534 00003176 B80300                  	MOV	AX,error_path_not_found
 20535 00003179 E9B0FE                  	JMP	_BadRet
 20536                                  
 20537                                  NOTDIRPATHPOP:
 20538 0000317C 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 20539 0000317D 58                      	POP	AX
 20540                                  NOTDIRPATHPOP2:
 20541 0000317E 58                      	POP	AX
 20542                                  NOTDIRPATH:
 20543 0000317F E9A7FE                  	JMP	NODEACCERRJ
 20544                                  
 20545                                  rmdir_get_buf:
 20546 00003182 C53E[E205]              	LDS	DI,[CURBUF]
 20547 00003186 29FB                    	SUB	BX,DI		; Compute true offset
 20548 00003188 53                      	PUSH	BX		; Save entry pointer
 20549                                  	
 20550                                  	; MSDOS 6.0
 20551                                  	;push	word [di+8]
 20552 00003189 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 20553                                  	
 20554                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20555                                  	;push	word [di+6]
 20556 0000318C FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 20557                                  
 20558                                  ;hkn; SS is DOSDATA
 20559                                  	;context DS
 20560 0000318F 16                      	push	ss
 20561 00003190 1F                      	pop	ds
 20562                                  	;context ES
 20563 00003191 16                      	push	ss
 20564 00003192 07                      	pop	es
 20565                                  
 20566                                  ;hkn; NAME1 is in DOSDATA
 20567 00003193 BF[4B05]                	MOV	DI,NAME1
 20568                                  	;MOV	AL,'?' ; 3Fh
 20569                                  	;MOV	CX,11
 20570                                  	;REP	STOSB
 20571                                  	;XOR	AL,AL
 20572                                  	;STOSB				; Nul terminate it
 20573                                  	; 27/06/2024
 20574 00003196 B83F00                  	mov	ax,3Fh
 20575 00003199 B90A00                  	mov	cx,10
 20576 0000319C F3AA                    	rep	stosb	; al = "?"
 20577 0000319E AB                      	stosw		; ah = 0
 20578                                  	;
 20579 0000319F E8EF0E                  	call	STARTSRCH		; Set search
 20580 000031A2 E8E70B                  	call	GETENTRY		; Get start of directory
 20581 000031A5 72D5                    	JC	short NOTDIRPATHPOP	; Screw up
 20582 000031A7 8E1E[E405]              	MOV	DS,[CURBUF+2]
 20583 000031AB 89DE                    	MOV	SI,BX
 20584 000031AD AD                      	LODSW
 20585                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 20586 000031AE 3D2E20                  	cmp	ax,202Eh ; ". "
 20587 000031B1 75C9                    	JNZ	short NOTDIRPATHPOP	; Nope
 20588                                  	;add	si,30
 20589 000031B3 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 20590 000031B6 AD                      	LODSW
 20591                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 20592                                  	;cmp	ax, '..'
 20593 000031B7 3D2E2E                  	cmp	ax,2E2Eh
 20594 000031BA 75C0                    	JNZ	short NOTDIRPATHPOP	; Nope
 20595                                  
 20596                                  ;hkn; SS is DOSDATA
 20597                                  	;context DS
 20598 000031BC 16                      	push	ss
 20599 000031BD 1F                      	pop	ds
 20600 000031BE C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 20601 000031C4 E8C50B                  	call	GETENTRY		; Get next entry
 20602 000031C7 72B3                    	JC	short NOTDIRPATHPOP	; Screw up
 20603                                  	;mov	byte [ATTRIB],16h
 20604 000031C9 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 20605 000031CE E8C50A                  	call	SRCH			; Do a search
 20606 000031D1 73A9                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 20607 000031D3 803E[4A03]00            	CMP	byte [FAILERR],0
 20608 000031D8 75A2                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 20609 000031DA C42E[8A05]              	LES	BP,[THISDPB]
 20610 000031DE 8B1E[C205]              	MOV	BX,[DIRSTART]
 20611 000031E2 E8A61B                  	call	RELEASE 		; Release data in sub dir
 20612 000031E5 7295                    	JC	short NOTDIRPATHPOP	; Screw up
 20613 000031E7 5A                      	POP	DX			; Sector # of entry
 20614 000031E8 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 20615                                  	; 22/09/2023
 20616                                  	;;mov	byte [ALLOWED],18h
 20617                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20618                                  	;XOR	AL,AL ; *		; Pre read
 20619                                  	;call	GETBUFFR		; Get sector back
 20620 000031EC E81326                  	call	GETBUFFER ; *		; Pre Read
 20621 000031EF 728D                    	JC	short NOTDIRPATHPOP2	; Screw up
 20622 000031F1 C53E[E205]              	LDS	DI,[CURBUF]
 20623                                  	;or	byte [di+5],4
 20624 000031F5 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20625 000031F9 5B                      	POP	BX			; Pointer to start of entry
 20626 000031FA 01FB                    	ADD	BX,DI			; Corrected
 20627 000031FC C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 20628                                  
 20629                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20630 000031FF 1E                      	PUSH	DS
 20631                                  
 20632                                  ;hkn; SS is DOSDATA
 20633                                  	;context DS
 20634 00003200 16                      	push	ss
 20635 00003201 1F                      	pop	ds
 20636                                  
 20637                                  	; MSDOS 6.0
 20638 00003202 E83BF4                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 20639                                  
 20640                                  ;	; MSDOS 3.3
 20641                                  ;_FastOpen_Delete:
 20642                                  ;	push	ax
 20643                                  ;	mov	si,[WFP_START]
 20644                                  ;	mov	bx,FastTable
 20645                                  ;	;mov	al,3  ; FONC_delete
 20646                                  ;	mov	al,FONC_delete
 20647                                  ;	call	far [BX+2]  ; FastTable+2
 20648                                  ;	pop	ax
 20649                                  
 20650 00003205 1F                      	POP	DS
 20651                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20652                                  
 20653 00003206 E9BDFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 20654                                  
 20655                                  ;============================================================================
 20656                                  ; DISK.ASM, MSDOS 6.0, 1991
 20657                                  ;============================================================================
 20658                                  ; 23/07/2018 - Retro DOS v3.0 
 20659                                  ; 04/05/2019 - Retro DOS v4.0
 20660                                  
 20661                                  ;	TITLE	DISK - Disk utility routines
 20662                                  ;	NAME	Disk
 20663                                  
 20664                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 20665                                  ;
 20666                                  ;	SWAPCON
 20667                                  ;	SWAPBACK
 20668                                  ;	DOS_READ
 20669                                  ;	DOS_WRITE
 20670                                  ;	get_io_sft
 20671                                  ;	DirRead
 20672                                  ;	FIRSTCLUSTER
 20673                                  ;	SET_BUF_AS_DIR
 20674                                  ;	FATSecRd
 20675                                  ;	DREAD
 20676                                  ;	CHECK_WRITE_LOCK
 20677                                  ;	CHECK_READ_LOCK
 20678                                  ;
 20679                                  ;	Revision history:
 20680                                  ;
 20681                                  ;		A000   version 4.00  Jan. 1988
 20682                                  ;
 20683                                  ;----------------------------------------------------------------------------
 20684                                  ;
 20685                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 20686                                  ;		error happens, DOS retries the entire block assuming that
 20687                                  ;		zero characters were transferred. Modified the code to take
 20688                                  ;		into account the number of characters transfered before
 20689                                  ;		retrying the operation.
 20690                                  ;
 20691                                  ;----------------------------------------------------------------------------
 20692                                  ;
 20693                                  
 20694                                  ;Installed = TRUE
 20695                                  
 20696                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 20697                                  
 20698                                  ; **** Drivers for file input from devices ****
 20699                                  ;----------------------------------------------------------------------------
 20700                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 20701                                  ;   of handles 0 and 1
 20702                                  ;
 20703                                  ;   Inputs:	DS is DOSDATA
 20704                                  ;   Outputs:	CONSWAP is set to false.
 20705                                  ;   Registers modified: none
 20706                                  ;----------------------------------------------------------------------------
 20707                                  
 20708                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 20709                                  
 20710                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 20711                                  ; 04/05/2019 - Retro DOS v4.0
 20712                                  
 20713                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 20714                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20715                                  
 20716                                  SWAPBACK:
 20717 00003209 C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 20718 0000320E C3                      	retn
 20719                                  
 20720                                  ;----------------------------------------------------------------------------
 20721                                  ;
 20722                                  ; Procedure Name : SWAPCON
 20723                                  ;
 20724                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20725                                  ;
 20726                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20727                                  ;		DS is DOSDATA
 20728                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20729                                  ;   Registers modified: none
 20730                                  ;--------------------------------------------------------------------------
 20731                                  
 20732                                  SWAPCON:
 20733                                  	; MSDOS 3.3
 20734                                  	;push	es
 20735                                  	;push	di
 20736                                  	;mov	byte [CONSWAP],1
 20737                                  	;les	di,[THISSFT]
 20738                                  	;mov	word [CONSFT],di
 20739                                  	;mov	word [CONSFT+2],es
 20740                                  	;pop	di
 20741                                  	;pop	es
 20742                                  	;retn
 20743                                  
 20744                                  	; MSDOS 6.0
 20745 0000320F C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20746 00003214 50                      	push	ax
 20747 00003215 A1[9E05]                	mov	ax,[THISSFT]
 20748 00003218 A3[E605]                	mov	[CONSFT],ax
 20749 0000321B A1[A005]                	mov	ax,[THISSFT+2]
 20750 0000321E A3[E805]                	mov	[CONSFT+2],ax
 20751 00003221 58                      	pop	ax
 20752 00003222 C3                      	retn
 20753                                  
 20754                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20755                                  ; 04/05/2019 - Retro DOS v4.0
 20756                                  
 20757                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20758                                  ;-----------------------------------------------------------------------------
 20759                                  ;
 20760                                  ; Inputs:
 20761                                  ;	ThisSFT set to the SFT for the file being used
 20762                                  ;	[DMAADD] contains transfer address
 20763                                  ;	CX = No. of bytes to read
 20764                                  ;	DS = DOSDATA
 20765                                  ; Function:
 20766                                  ;	Perform read operation
 20767                                  ; Outputs:
 20768                                  ;    Carry clear
 20769                                  ;	SFT Position and cluster pointers updated
 20770                                  ;	CX = No. of bytes read
 20771                                  ;	ES:DI point to SFT
 20772                                  ;    Carry set
 20773                                  ;	AX is error code
 20774                                  ;	CX = 0
 20775                                  ;	ES:DI point to SFT
 20776                                  ; DS preserved, all other registers destroyed
 20777                                  ;
 20778                                  ;-----------------------------------------------------------------------------
 20779                                  
 20780                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20781                                  
 20782                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20783                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20784                                  
 20785                                  DOS_READ:
 20786 00003223 C43E[9E05]              	LES	DI,[THISSFT]
 20787                                  
 20788                                  ; Verify that the sft has been opened in a mode that allows reading.
 20789                                  
 20790                                  	;mov	al,[es:di+2]
 20791 00003227 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20792                                  	;and	al,0Fh
 20793 0000322B 240F                    	AND	AL,access_mask
 20794                                  	;cmp	al,1
 20795 0000322D 3C01                    	CMP	AL,open_for_write
 20796 0000322F 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20797 00003231 E9CE05                  	jmp	SET_ACC_ERR
 20798                                  
 20799                                  READ_NO_MODE:
 20800 00003234 E8B304                  	call	SETUP
 20801 00003237 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20802 00003239 E80BE0                  	call	IsSFTNet
 20803 0000323C 7408                    	JZ	short LOCAL_READ
 20804                                  
 20805                                  ;IF NOT Installed
 20806                                  ;	transfer NET_READ
 20807                                  ;ELSE
 20808                                  	;mov	ax,1108h
 20809 0000323E B80811                  	MOV	AX,(MultNET<<8)|8
 20810 00003241 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20811                                  			; ES:DI -> SFT
 20812                                  			; SFT DPB field -> DPB of drive containing file
 20813                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20814                                  			; Return: CF set on error, CX = bytes read
 20815 00003243 C3                      	retn
 20816                                  ;ENDIF
 20817                                  
 20818                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20819                                  ; except return immediately.
 20820                                  
 20821                                  NoIORet:
 20822 00003244 F8                      	CLC
 20823 00003245 C3                      	retn
 20824                                  
 20825                                  LOCAL_READ:
 20826                                  	;test	word [es:di+5],80h
 20827                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20828 00003246 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20829 0000324B 750E                    	JNZ	short READDEV
 20830                                  
 20831                                  	;mov	byte [EXTERR_LOCUS],2
 20832 0000324D C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20833 00003252 E892E0                  	call	ECritDisk
 20834 00003255 E86D05                  	call	DISKREAD
 20835                                  
 20836                                  critexit:
 20837                                  	;call	LCritDisk
 20838                                  	;retn
 20839                                  	; 16/12/2022
 20840 00003258 E9A7E0                  	jmp	LCritDisk
 20841                                  
 20842                                  ; We are reading from a device. Examine the status of the device to see if we
 20843                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20844                                  ; null device, we can safely indicate no transfer.
 20845                                  
 20846                                  READDEV:
 20847                                  	;mov	byte [EXTERR_LOCUS],4
 20848 0000325B C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20849                                  	;mov	bl,[es:di+5]
 20850 00003260 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20851 00003264 C43E[2C03]              	LES	DI,[DMAADD]
 20852                                  	;test	bl,40h
 20853 00003268 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20854 0000326B 7407                    	JZ	short ENDRDDEVJ3
 20855                                  	;test	bl,4
 20856 0000326D F6C304                  	test	BL,devid_device_null	; NUL device?
 20857 00003270 7405                    	JZ	short TESTRAW 		; NO
 20858 00003272 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20859                                  ENDRDDEVJ3:
 20860                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20861                                  	;JMP	short ENDRDDEVJ2
 20862                                  	; 16/12/2022
 20863 00003274 E93F01                  	jmp	ENDRDDEV ; 04/05/2019
 20864                                  
 20865                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20866                                  ; bizarre std_con_string_input.
 20867                                  
 20868                                  TESTRAW:
 20869                                  	;test	bl,20h
 20870 00003277 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20871 0000327A 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20872                                  	;test	bl,1
 20873 0000327C F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20874 0000327F 7458                    	JZ	short NOTRDCON
 20875 00003281 E96701                  	JMP	READCON
 20876                                  
 20877                                  DVRDRAW:
 20878 00003284 06                      	PUSH	ES
 20879 00003285 1F                      	POP	DS			; Xaddr to DS:DI
 20880                                  
 20881                                  	; 04/05/2019 - Retro DOS v4.0
 20882                                  
 20883                                  	; MSDOS 6.0
 20884                                  ;SR;
 20885                                  ;Check for win386 presence -- if present, do polled read of characters
 20886                                  
 20887 00003286 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20888 0000328C 7408                    	jz	short ReadRawRetry	;not present
 20889 0000328E F6C301                  	test	bl,devid_device_con_in	;is it console device
 20890 00003291 7403                    	jz	short ReadRawRetry	;no, do normal read
 20891 00003293 E9A800                  	jmp	do_polling		;yes, do win386 polling loop
 20892                                  
 20893                                  ReadRawRetry:
 20894                                  
 20895                                  ; 07/02/2024
 20896                                  %if 0
 20897                                  	MOV	BX,DI			; DS:BX transfer addr
 20898                                  	; 06/02/2024 ; *
 20899                                  	;XOR	AX,AX			; Media Byte, unit = 0
 20900                                  	;;MOV	DX,AX			; Start at 0
 20901                                  	;; 06/02/2024
 20902                                  	;cwd
 20903                                  	;call	SETREAD
 20904                                  	; 06/02/2024 ; *
 20905                                  	call	SETREAD_X
 20906                                  %else
 20907 00003296 E81913                  	call	SETREAD_XJ
 20908                                  %endif
 20909                                  
 20910 00003299 1E                      	PUSH	DS			; Save Seg part of Xaddr
 20911                                  
 20912                                  ;hkn; SS override
 20913 0000329A 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20914 0000329F E89A12                  	call	DEVIOCALL
 20915 000032A2 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20916 000032A4 B486                    	MOV	AH,86H			; Read error
 20917                                  
 20918                                  ;hkn; SS override
 20919 000032A6 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20920                                  	; MSDOS 3.3
 20921                                  	;test	di,8000h
 20922                                  	;jz	short CRDROK
 20923                                  	; MSDOS 6.0
 20924 000032AB 09FF                    	or	di,di
 20925 000032AD 7920                    	jns	short CRDROK		; no errors
 20926                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20927 000032AF E8E21E                  	call	CHARHARD
 20928                                  
 20929                                  ; 06/02/2024 - Retrro DOS v5.0
 20930                                  %if 0
 20931                                  	MOV	DI,DX			; DS:DI is Xaddr
 20932                                  	; 04/05/2019
 20933                                  	; MSDOS 6.0
 20934                                  	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20935                                  	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20936                                  %else
 20937 000032B2 368B3E[6C03]            	mov	di,[ss:CALLSCNT]
 20938 000032B7 29F9                    	sub	cx,di			; update transfer count
 20939 000032B9 01D7                    	add	di,dx			; update pointer
 20940                                  %endif
 20941                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20942 000032BB 08C0                    	OR	AL,AL
 20943 000032BD 7410                    	JZ	short CRDROK		; Ignore
 20944 000032BF 3C03                    	CMP	AL,3
 20945 000032C1 7403                    	JZ	short CRDFERR 		; fail.
 20946 000032C3 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20947 000032C4 EBD0                    	JMP	short ReadRawRetry	; Retry
 20948                                  
 20949                                  ; We have encountered a device-driver error. We have informed the user of it
 20950                                  ; and he has said for us to fail the system call.
 20951                                  
 20952                                  CRDFERR:
 20953 000032C6 5F                      	POP	DI			; Clean stack
 20954                                  DEVIOFERR:
 20955                                  
 20956                                  ;hkn; SS override
 20957 000032C7 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20958 000032CC E93105                  	jmp	SET_ACC_ERR_DS
 20959                                  
 20960                                  CRDROK:
 20961 000032CF 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20962 000032D0 89D7                    	MOV	DI,DX
 20963                                  
 20964                                  ;hkn; SS override
 20965 000032D2 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20966                                  	;JMP	SHORT ENDRDDEVJ3
 20967                                  	; 16/12/2022
 20968 000032D7 EB63                    	jmp	short ENDRDDEVJ2
 20969                                  
 20970                                  ; We are going to do a cooked read on some character device. There is a
 20971                                  ; problem here, what does the data look like? Is it a terminal device, line
 20972                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20973                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20974                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20975                                  ; included in data). this "simulates" the way con works in cooked mode
 20976                                  ; reading one line at a time. With file data, however, the lines will look
 20977                                  ; like, LF line CR. This is a little weird.
 20978                                  
 20979                                  NOTRDCON:
 20980                                  	;MOV	AX,ES
 20981                                  	;MOV	DS,AX
 20982                                  	; 07/02/2024
 20983 000032D9 06                      	push	es
 20984 000032DA 1F                      	pop	ds
 20985                                  
 20986                                  ; 07/02/2024
 20987                                  %if 0
 20988                                  	MOV	BX,DI
 20989                                  	; 06/02/2024 ; *
 20990                                  	;;XOR	DX,DX
 20991                                  	;;MOV	AX,DX
 20992                                  	;; 06/02/2024
 20993                                  	;xor	ax,ax
 20994                                  	;cwd
 20995                                  	PUSH	CX
 20996                                  	MOV	CX,1
 20997                                  	;call	SETREAD
 20998                                  	; 06/02/2024 ; *
 20999                                  	call	SETREAD_X
 21000                                  	POP	CX
 21001                                  %else
 21002 000032DB 51                      	push	cx
 21003 000032DC B90100                  	mov	cx,1
 21004 000032DF E8D012                  	call	SETREAD_XJ
 21005 000032E2 59                      	pop	cx
 21006                                  %endif
 21007                                  
 21008                                  ;hkn; SS override
 21009 000032E3 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21010                                  	;lds	si,[si+7]
 21011 000032E8 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 21012                                  DVRDLP:
 21013 000032EB E88B1C                  	call	DSKSTATCHK
 21014 000032EE E84E12                  	call	DEVIOCALL2
 21015 000032F1 57                      	PUSH	DI			; Save "count" done
 21016 000032F2 B486                    	MOV	AH,86H
 21017                                  
 21018                                  ;hkn; SS override
 21019 000032F4 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21020                                  	
 21021                                  	; MSDOS 3.3
 21022                                  	;test	di,8000h
 21023                                  	;jz	short CRDOK
 21024                                  	; MSDOS 6.0
 21025 000032F9 09FF                    	or	di,di
 21026 000032FB 7917                    	jns	short CRDOK
 21027                                  	
 21028 000032FD E8941E                  	call	CHARHARD
 21029 00003300 5F                      	POP	DI
 21030                                  
 21031                                  ;hkn; SS override
 21032 00003301 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 21033 00003308 3C01                    	CMP	AL,1
 21034 0000330A 74DF                    	JZ	short DVRDLP		; Retry
 21035 0000330C 3C03                    	CMP	AL,3
 21036 0000330E 74B7                    	JZ	short DEVIOFERR		; FAIL
 21037 00003310 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 21038 00003312 EB12                    	JMP	SHORT DVRDIGN
 21039                                  
 21040                                  CRDOK:
 21041 00003314 5F                      	POP	DI
 21042                                  
 21043                                  ;hkn; SS override
 21044 00003315 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 21045                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 21046 0000331B 751F                    	JNZ	short ENDRDDEVJ2
 21047                                  	; 16/12/2022
 21048                                  	;jnz	short ENDRDDEV ; 24/07/2019
 21049                                  
 21050 0000331D 1E                      	PUSH	DS
 21051                                  
 21052                                  ;hkn; SS override
 21053 0000331E 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21054 00003323 8A05                    	MOV	AL,[DI]			; Get the character we just read
 21055 00003325 1F                      	POP	DS
 21056                                  DVRDIGN:
 21057                                  
 21058                                  ;hkn; SS override
 21059 00003326 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 21060 0000332B 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21061 00003332 47                      	INC	DI			; Next character
 21062 00003333 3C1A                    	CMP	AL,1Ah			; ^Z?
 21063                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 21064 00003335 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 21065                                  	; 16/12/2022
 21066                                  	;jz	short ENDRDDEV ; 24/07/2019	
 21067 00003337 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 21068 00003339 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 21069 0000333B 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 21070                                  					;  AX=FFFF which is not likely
 21071                                  ENDRDDEVJ2:
 21072                                  	; 16/12/2022
 21073                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 21074                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21075 0000333C EB78                    	jmp	ENDRDDEV
 21076                                  
 21077                                  	; 04/05/2019
 21078                                  
 21079                                  	; MSDOS 6.0
 21080                                  ;SR;
 21081                                  ;Polling code for raw read on CON when WIN386 is present
 21082                                  ;
 21083                                  ;At this point -- ds:di is transfer address
 21084                                  ;		  cx is count
 21085                                  
 21086                                  do_polling:
 21087                                  
 21088                                  ; 07/02/2024
 21089                                  %if 0
 21090                                  	mov	bx,di			;ds:bx is Xfer address
 21091                                  	; 06/02/2024 ; *
 21092                                  	;xor	ax,ax
 21093                                  	;;mov	dx,ax
 21094                                  	;; 06/02/2024
 21095                                  	;cwd
 21096                                  	;call	SETREAD			;prepare device packet
 21097                                  	; 06/02/2024 ; *
 21098                                  	call	SETREAD_X
 21099                                  %else
 21100 0000333E E87112                  	call	SETREAD_XJ
 21101                                  %endif
 21102                                  
 21103                                  do_io:
 21104                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 21105                                  
 21106 00003341 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 21107 00003346 1E                      	push	ds
 21108 00003347 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 21109 0000334C E8ED11                  	call	DEVIOCALL		;call device driver
 21110 0000334F 1F                      	pop	ds
 21111                                  	
 21112                                  	;test	word [es:bx+3],8000h
 21113                                  	; 16/12/2022
 21114                                  	;test	byte [es:bx+4],80h
 21115 00003350 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 21116                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 21117 00003355 7413                    	jz	short check_busy	;no
 21118                                  
 21119 00003357 1E                      	push	ds
 21120 00003358 89FA                    	mov	dx,di
 21121                                  
 21122                                  invoke_charhard:	; 07/02/2024
 21123                                  	;invoke charhard		;invoke int 24h handler
 21124 0000335A E8371E                  	call	CHARHARD
 21125 0000335D 89D7                    	mov	di,dx
 21126 0000335F 08C0                    	or	al,al
 21127 00003361 744D                    	jz	short pop_done_read	;ignore by user, assume read done
 21128 00003363 3C03                    	cmp	al,3
 21129 00003365 7438                    	jz	short devrderr		;user asked to fail
 21130 00003367 1F                      	pop	ds
 21131 00003368 EBD7                    	jmp	short do_io		;user asked to retry
 21132                                  
 21133                                  check_busy:
 21134                                  	;test	word [es:bx+3],200h
 21135                                  	; 16/12/2022
 21136 0000336A 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 21137                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 21138 0000336F 7537                    	jnz	short no_char		;yes, no character available
 21139                                  
 21140                                  ;Character is available. Read in 1 character at a time until all characters
 21141                                  ;are read in or no character is available
 21142                                  
 21143 00003371 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 21144 00003376 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 21145 0000337C 1E                      	push	ds
 21146 0000337D 36C536[9E05]            	lds	si,[ss:THISSFT]
 21147 00003382 E8B711                  	call	DEVIOCALL
 21148                                  
 21149 00003385 89FA                    	mov	dx,di
 21150 00003387 B486                    	mov	ah,86h
 21151                                  	;mov	di,[es:bx+3]
 21152 00003389 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 21153 0000338D F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 21154                                  	;jz	short next_char		;no,read next character
 21155                                  	; 07/02/2024
 21156 00003391 75C7                    	jnz	short invoke_charhard
 21157                                  
 21158                                  ; 07/02/2024
 21159                                  %if 0
 21160                                  	;invoke	charhard		;invoke int 24h handler
 21161                                  	call	CHARHARD
 21162                                  	mov	di,dx			;restore di
 21163                                  	or	al,al			;
 21164                                  	jz	short pop_done_read	;ignore by user,assume read is done
 21165                                  	cmp	al,3
 21166                                  	jz	short devrderr		;user issued a 'fail',indicate error
 21167                                  	pop	ds
 21168                                  	jmp	short do_io		;user issued a retry
 21169                                  %endif
 21170                                  
 21171                                  next_char:
 21172 00003393 1F                      	pop	ds
 21173 00003394 89D7                    	mov	di,dx
 21174 00003396 49                      	dec	cx			;decrement count
 21175                                  	;jcxz	done_read		;all characters read in
 21176                                  	; 07/02/2024
 21177 00003397 7418                    	jz	short done_read
 21178 00003399 26FF470E                	inc	word [es:bx+14]		;update transfer address
 21179 0000339D EBA2                    	jmp	short do_io		;read next character in
 21180                                  
 21181                                  devrderr:
 21182 0000339F 5F                      	pop	di			;discard segment address
 21183 000033A0 36C43E[9E05]            	les	di,[ss:THISSFT]
 21184                                  	;transfer SET_ACC_ERR_DS	;indicate error
 21185 000033A5 E95804                  	jmp     SET_ACC_ERR_DS
 21186                                  
 21187                                  no_char:
 21188                                  ;Since no character is available, we let win386 switch the VM out
 21189                                  
 21190 000033A8 50                      	push	ax
 21191 000033A9 B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 21192 000033AB CD2A                    	int	2Ah			;indicate idle to WIN386
 21193                                  
 21194                                  ;When control returns from WIN386, we continue the raw read
 21195                                  
 21196 000033AD 58                      	pop	ax
 21197 000033AE EB91                    	jmp	short do_io	; 27/06/2024
 21198                                  
 21199                                  pop_done_read:
 21200 000033B0 1F                      	pop	ds
 21201                                  done_read:
 21202 000033B1 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 21203                                  
 21204                                  	; 16/12/2022
 21205                                  
 21206                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21207                                  	;jmp	ENDRDDEV ; 04/05/2019
 21208                                  
 21209                                  	; 04/05/2019 - Retro DOS v4.0
 21210                                  ENDRDDEV:
 21211 000033B6 16                      	push	ss
 21212 000033B7 1F                      	pop	ds
 21213 000033B8 EB1F                    	jmp	short endrddev1
 21214                                  
 21215                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21216                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21217                                  
 21218                                  TRANBUF:
 21219 000033BA AC                      	LODSB
 21220 000033BB AA                      	STOSB
 21221 000033BC 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 21222 000033BE 7503                    	JNZ	short NORMCH
 21223 000033C0 C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 21224                                  NORMCH:
 21225 000033C3 3C0A                    	CMP	AL,c_LF ; 0Ah
 21226 000033C5 E0F3                    	LOOPNZ	TRANBUF
 21227 000033C7 7507                    	JNZ	short ENDRDCON
 21228 000033C9 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 21229 000033CB E869E2                  	call	OUTT		; Transmit linefeed
 21230 000033CE 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 21231                                  ENDRDCON:
 21232                                  ;hkn; SS is DOSDATA
 21233 000033D0 16                      	push	ss
 21234 000033D1 1F                      	pop	ds
 21235 000033D2 E834FE                  	CALL	SWAPBACK
 21236 000033D5 8936[2200]              	MOV	[CONTPOS],SI
 21237                                  
 21238                                  	; 16/12/2022
 21239                                  ;ENDRDDEV:
 21240                                  ;;hkn; SS is DOSDATA
 21241                                  ;	push	ss
 21242                                  ;	pop	ds
 21243                                  endrddev1:	; 04/05/2019
 21244 000033D9 893E[B805]              	MOV	[NEXTADD],DI
 21245 000033DD 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21246 000033DF C43E[9E05]              	LES	DI,[THISSFT]
 21247                                  	;and	byte [es:di+5],0BFh
 21248 000033E3 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF
 21249                                  				; Mark as no more data available
 21250                                  SETSFTC:
 21251                                  	; 31/07/2019
 21252                                  	;call	SETSFT
 21253                                  	;retn
 21254 000033E8 E9A904                  	jmp	SETSFT
 21255                                  
 21256                                  ; 16/12/2022
 21257                                  %if 0
 21258                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21259                                  ENDRDDEV:
 21260                                  ;hkn; SS is DOSDATA
 21261                                  	push	ss
 21262                                  	pop	ds
 21263                                  	MOV	[NEXTADD],DI
 21264                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21265                                  	LES	DI,[THISSFT]
 21266                                  	;and	byte [es:di+5],0BFh
 21267                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF
 21268                                  				; Mark as no more data available
 21269                                  SETSFTC:
 21270                                  	;call	SETSFT
 21271                                  	;retn
 21272                                  	jmp	SETSFT	
 21273                                  %endif
 21274                                  
 21275                                  READCON:
 21276 000033EB E821FE                  	CALL	SWAPCON
 21277 000033EE 8B36[2200]              	MOV	SI,[CONTPOS]
 21278 000033F2 09F6                    	OR	SI,SI
 21279 000033F4 75C4                    	JNZ	short TRANBUF
 21280 000033F6 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 21281 000033FB 7406                    	JZ	short GETBUF
 21282 000033FD C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 21283                                  GETBUF:
 21284 00003403 51                      	PUSH	CX
 21285 00003404 06                      	PUSH	ES
 21286 00003405 57                      	PUSH	DI
 21287                                  
 21288                                  ;hkn; CONBUF is in DOSDATA
 21289 00003406 BA[7B02]                	MOV	DX,CONBUF
 21290                                  
 21291 00003409 E8A9DF                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 21292 0000340C 5F                      	POP	DI
 21293 0000340D 07                      	POP	ES
 21294 0000340E 59                      	POP	CX
 21295                                  
 21296                                  ;hkn; CONBUF is in DOSDATA
 21297 0000340F BE[7D02]                	MOV	SI,CONBUF+2
 21298                                  
 21299 00003412 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 21300 00003415 75A3                    	JNZ	short TRANBUF
 21301 00003417 B01A                    	MOV	AL,1AH
 21302 00003419 AA                      	STOSB
 21303 0000341A 4F                      	DEC	DI
 21304 0000341B B00A                    	MOV	AL,c_LF
 21305 0000341D E817E2                  	call	OUTT		; Send linefeed
 21306 00003420 31F6                    	XOR	SI,SI
 21307 00003422 EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 21308                                  
 21309                                  ; 24/07/2018 - Retro DOS v3.0
 21310                                  
 21311                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 21312                                  ;---------------------------------------------------------------------------
 21313                                  ;
 21314                                  ; Procedure Name : DOS_WRITE
 21315                                  ;
 21316                                  ; Inputs:
 21317                                  ;	ThisSFT set to the SFT for the file being used
 21318                                  ;	[DMAADD] contains transfer address
 21319                                  ;	CX = No. of bytes to write
 21320                                  ; Function:
 21321                                  ;	Perform write operation
 21322                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 21323                                  ;		to current sf_position
 21324                                  ; Outputs:
 21325                                  ;    Carry clear
 21326                                  ;	SFT Position and cluster pointers updated
 21327                                  ;	CX = No. of bytes written
 21328                                  ;	ES:DI point to SFT
 21329                                  ;    Carry set
 21330                                  ;	AX is error code
 21331                                  ;	CX = 0
 21332                                  ;	ES:DI point to SFT
 21333                                  ; DS preserved, all other registers destroyed
 21334                                  ;---------------------------------------------------------------------------
 21335                                  
 21336                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 21337                                  ;hkn; point to DOSDATA.
 21338                                  
 21339                                  ; 04/05/2019 - Retro DOS v4.0
 21340                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 21341                                  
 21342                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21343                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 21344                                  
 21345                                  DOS_WRITE:
 21346 00003424 C43E[9E05]              	LES	DI,[THISSFT]
 21347                                  	;mov	al,[ES:DI+2]
 21348 00003428 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 21349                                  	;and	al,0Fh
 21350 0000342C 240F                    	AND	AL,access_mask
 21351                                  	;cmp	al,0
 21352 0000342E 3C00                    	CMP	AL,open_for_read
 21353 00003430 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 21354                                  BadMode:
 21355 00003432 E9CD03                  	jmp	SET_ACC_ERR
 21356                                  
 21357                                  ; NOTE: The following check for writting to a Read Only File is performed
 21358                                  ;	    ONLY on FCBs!!!!
 21359                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 21360                                  ;	    of a read only file which can then be written to.
 21361                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 21362                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 21363                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 21364                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 21365                                  ;	    to a read-only file.
 21366                                  
 21367                                  Check_FCB_RO:
 21368                                  	;;test	word [es:di+2],8000h
 21369                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21370                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 21371                                  	
 21372                                  	;test	byte [es:di+3],80h
 21373 00003435 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21374 0000343A 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 21375                                  
 21376                                  	;test	byte [es:di+4],1
 21377 0000343C 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 21378 00003441 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 21379                                  WRITE_NO_MODE:
 21380 00003443 E8A402                  	call	SETUP
 21381 00003446 E8FEDD                  	call	IsSFTNet
 21382 00003449 7406                    	JZ	short LOCAL_WRITE
 21383                                  
 21384                                  ;IF NOT Installed
 21385                                  ;	transfer NET_WRITE
 21386                                  ;ELSE
 21387                                  	;mov	ax,1109h
 21388 0000344B B80911                  	MOV	AX,(MultNET<<8)|9
 21389 0000344E CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 21390                                  			; ES:DI -> SFT
 21391                                  			; SFT DPB field -> DPB of drive containing file
 21392                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 21393                                  			; Return: CF set on error, CX = bytes written
 21394 00003450 C3                      	retn
 21395                                  ;ENDIF
 21396                                  
 21397                                  LOCAL_WRITE:
 21398                                  	;;test	word [es:di+5],80h
 21399                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 21400                                  	;jnz	short WRTDEV
 21401                                  
 21402                                  	;test	byte [es:di+5],80h
 21403 00003451 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 21404 00003456 756D                    	jnz	short WRTDEV
 21405                                  
 21406                                  	;mov	byte [EXTERR_LOCUS],2
 21407 00003458 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 21408 0000345D E887DE                  	call	ECritDisk
 21409                                  
 21410 00003460 E8E104                  	call	DISKWRITE
 21411                                  
 21412                                  	; 04/05/2019 - Retro DOS v4.0
 21413                                  
 21414                                  	; MSDOS 6.0
 21415                                  ; Extended Open
 21416 00003463 7210                    	JC	short nocommit
 21417                                  	
 21418 00003465 C43E[9E05]              	LES	DI,[THISSFT]
 21419                                  	
 21420                                  	;;test	word [ES:DI+2],4000h
 21421                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 21422                                  	;JZ	short nocommit
 21423                                  	
 21424                                  	;test	byte [ES:DI+3],40h
 21425 00003469 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 21426 0000346E 7405                    	JZ	short nocommit
 21427                                  	
 21428 00003470 51                      	PUSH	CX
 21429 00003471 E85FFB                  	call	DOS_COMMIT
 21430 00003474 59                      	POP	CX
 21431                                  nocommit:
 21432                                  ; Extended Open
 21433                                  	;call	LCritDisk
 21434                                  	;retn
 21435                                  	; 18/12/2022
 21436 00003475 E98ADE                  	jmp	LCritDisk
 21437                                  
 21438                                  DVWRTRAW:
 21439 00003478 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 21440 0000347A E87611                  	call	SETWRITE
 21441 0000347D 1E                      	PUSH	DS			; Save seg of transfer
 21442                                  
 21443                                  ;hkn; SS override
 21444 0000347E 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21445 00003483 E8B610                  	call	DEVIOCALL		; DS:SI -> DEVICE
 21446                                  
 21447 00003486 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 21448 00003488 B487                    	MOV	AH,87H
 21449                                  
 21450                                  ;hkn; SS override
 21451 0000348A 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21452                                  
 21453                                  	; MSDOS 3.3
 21454                                  	;test	di,8000h
 21455                                  	;jz	short CWRTROK
 21456                                  
 21457                                  	; MSDOS 6.0
 21458 0000348F 09FF                    	or	di,di
 21459 00003491 791F                    	jns	short CWRTROK
 21460                                  	
 21461                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21462 00003493 E8FE1C                  	call	CHARHARD
 21463                                  
 21464                                  	; 04/05/2019  - Retro DOS v4.0
 21465                                  
 21466                                  	; MSDOS 6.0
 21467                                  	;sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 21468                                  	; 08/02/2024
 21469 00003496 368B3E[6C03]            	mov	di,[ss:CALLSCNT]
 21470 0000349B 29F9                    	sub	cx,di
 21471 0000349D 89D3                    	mov	bx,dx			; number of chars xferred	M065
 21472                                  	;add	bx,[ss:CALLSCNT]	;				M065
 21473 0000349F 01FB                    	add	bx,di
 21474 000034A1 89DF                    	mov	di,bx			;				M065
 21475                                  	
 21476                                  	; MSDOS 3.3
 21477                                  	;MOV	BX,DX			; Recall transfer addr		M065
 21478                                  
 21479                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21480 000034A3 08C0                    	OR	AL,AL
 21481 000034A5 740B                    	JZ	short CWRTROK 		; Ignore
 21482 000034A7 3C03                    	CMP	AL,3
 21483 000034A9 7403                    	JZ	short CWRFERR
 21484 000034AB 1F                      	POP	DS			; Recover saved seg of transfer
 21485 000034AC EBCA                    	JMP	short DVWRTRAW		; Try again
 21486                                  CWRFERR:
 21487 000034AE 58                      	POP	AX			; Chuck saved seg of transfer
 21488 000034AF E914FE                  	JMP	CRDFERR 		; Will pop one more stack element
 21489                                  CWRTROK:
 21490 000034B2 58                      	POP	AX			; Chuck saved seg of transfer
 21491 000034B3 1F                      	POP	DS
 21492 000034B4 A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 21493                                  ENDWRDEV:
 21494 000034B7 C43E[9E05]              	LES	DI,[THISSFT]
 21495 000034BB 89C1                    	MOV	CX,AX
 21496                                  	;call	ADDREC
 21497                                  	;retn
 21498                                  	; 16/12/2022
 21499                                  	; 10/06/2019
 21500 000034BD E9F503                  	jmp	ADDREC
 21501                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21502                                  	;call	ADDREC
 21503                                  	;retn
 21504                                  	
 21505                                  WRTNUL:
 21506 000034C0 89CA                    	MOV	DX,CX			; Entire transfer done
 21507                                  WRTCOOKJ:
 21508 000034C2 E98D00                  	JMP	WRTCOOKDONE
 21509                                  WRTDEV:
 21510                                  	;mov	byte [EXTERR_LOCUS],4
 21511 000034C5 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 21512                                  	;or	byte [es:di+5],40h
 21513 000034CA 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 21514                                  					; Reset EOF for input
 21515                                  	;mov	bl,[es:di+5]
 21516 000034CF 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 21517 000034D3 31C0                    	XOR	AX,AX
 21518 000034D5 E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 21519 000034D7 1E                      	PUSH	DS
 21520 000034D8 88D8                    	MOV	AL,BL
 21521 000034DA C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 21522 000034DE 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 21523 000034E0 31D2                    	XOR	DX,DX			; Set starting point
 21524                                  	;test	al,20h
 21525 000034E2 A820                    	test	AL,devid_device_raw	; Raw?
 21526                                  	;JZ	short TEST_DEV_CON
 21527                                  	;JMP	DVWRTRAW
 21528                                  	; 16/12/2022
 21529 000034E4 7592                    	jnz	short DVWRTRAW
 21530                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21531                                  	;JZ	short TEST_DEV_CON
 21532                                  	;JMP	short DVWRTRAW
 21533                                  
 21534                                  TEST_DEV_CON:
 21535                                  	;test	al,2
 21536 000034E6 A802                    	test	AL,devid_device_con_out ; Console output device?
 21537 000034E8 756E                    	jnz	short WRITECON
 21538                                  	;test	al,4
 21539 000034EA A804                    	test	AL,devid_device_null
 21540 000034EC 75D2                    	JNZ	short WRTNUL
 21541 000034EE 89D0                    	MOV	AX,DX
 21542 000034F0 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 21543 000034F3 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 21544 000034F5 51                      	PUSH	CX
 21545 000034F6 B90100                  	MOV	CX,1
 21546 000034F9 E8F710                  	call	SETWRITE
 21547 000034FC 59                      	POP	CX
 21548                                  
 21549                                  ;hkn; SS override
 21550 000034FD 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21551                                  ;
 21552                                  ;SR; Removed X25 support from here
 21553                                  ;
 21554                                  	;lds	si,[si+7]
 21555 00003502 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 21556                                  DVWRTLP:
 21557 00003505 E8711A                  	call	DSKSTATCHK
 21558 00003508 E83410                  	call	DEVIOCALL2
 21559 0000350B 57                      	PUSH	DI
 21560 0000350C B487                    	MOV	AH,87H
 21561                                  
 21562                                  ;hkn; SS override
 21563 0000350E 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21564                                  	
 21565                                  	; MSDOS 3.3
 21566                                  	;test	di,8000h
 21567                                  	;jz	short CWROK
 21568                                  
 21569                                  	; MSDOS 6.0
 21570 00003513 09FF                    	or	di,di
 21571 00003515 7916                    	jns	short CWROK
 21572                                  	
 21573                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21574 00003517 E87A1C                  	call	CHARHARD
 21575 0000351A 5F                      	POP	DI
 21576                                  
 21577                                  ;hkn; SS override
 21578 0000351B 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 21579 00003522 3C01                    	CMP	AL,1
 21580 00003524 74DF                    	JZ	short DVWRTLP 	; Retry
 21581 00003526 08C0                    	OR	AL,AL
 21582 00003528 740C                    	JZ	short DVWRTIGN	; Ignore
 21583                                  	; 10/08/2018
 21584 0000352A E999FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 21585                                  CWROK:
 21586 0000352D 5F                      	POP	DI
 21587                                  
 21588                                  ;hkn; SS override
 21589 0000352E 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 21590 00003534 741C                    	JZ	short WRTCOOKDONE
 21591                                  DVWRTIGN:
 21592 00003536 42                      	INC	DX
 21593                                  
 21594                                  ;hkn; SS override for CALLXAD
 21595 00003537 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 21596 0000353C 47                      	INC	DI
 21597 0000353D 1E                      	PUSH	DS
 21598 0000353E 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21599 00003543 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 21600 00003546 1F                      	POP	DS
 21601 00003547 7409                    	JZ	short WRTCOOKDONE
 21602                                  
 21603                                  ;hkn; SS override
 21604 00003549 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21605 00003550 E2B3                    	LOOP	DVWRTLP
 21606                                  WRTCOOKDONE:
 21607 00003552 89D0                    	MOV	AX,DX
 21608 00003554 1F                      	POP	DS
 21609 00003555 E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 21610                                  
 21611                                  WRITECON:
 21612 00003558 1E                      	PUSH	DS
 21613                                  
 21614                                  ;hkn; SS is DOSDATA
 21615 00003559 16                      	push	ss
 21616 0000355A 1F                      	pop	ds
 21617 0000355B E8B1FC                  	CALL	SWAPCON
 21618 0000355E 1F                      	POP	DS
 21619 0000355F 89DE                    	MOV	SI,BX
 21620 00003561 51                      	PUSH	CX
 21621                                  WRCONLP:
 21622 00003562 AC                      	LODSB
 21623 00003563 3C1A                    	CMP	AL,1Ah		; ^Z?
 21624 00003565 7405                    	JZ	short CONEOF
 21625 00003567 E8CDE0                  	call	OUTT
 21626 0000356A E2F6                    	LOOP	WRCONLP
 21627                                  CONEOF:
 21628 0000356C 58                      	POP	AX			; Count
 21629 0000356D 1F                      	POP	DS
 21630 0000356E 29C8                    	SUB	AX,CX			; Amount actually written
 21631 00003570 E896FC                  	CALL	SWAPBACK
 21632 00003573 E941FF                  	JMP	ENDWRDEV
 21633                                  
 21634                                  ;---------------------------------------------------------------------------
 21635                                  ;
 21636                                  ; Procedure Name : get_io_sft
 21637                                  ;
 21638                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 21639                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 21640                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 21641                                  ;
 21642                                  ;---------------------------------------------------------------------------
 21643                                  
 21644                                  ; 04/05/2019 - Retro DOS v4.0
 21645                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 21646                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21647                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 21648                                  
 21649                                  GET_IO_SFT:
 21650                                  	;test	byte [SS:CONSWAP],0FFh
 21651 00003576 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 21652 0000357C 7512                    	JNZ	short GetRedir
 21653                                  GetNormal:
 21654 0000357E 16                      	push	ss
 21655 0000357F 1F                      	pop	ds
 21656 00003580 06                      	PUSH	ES
 21657 00003581 57                      	PUSH	DI
 21658 00003582 E8932F                  	call	SFFromHandle
 21659 00003585 7206                    	JC	short RET44P
 21660 00003587 8CC6                    	MOV	SI,ES
 21661 00003589 8EDE                    	MOV	DS,SI
 21662 0000358B 89FE                    	MOV	SI,DI
 21663                                  RET44P:
 21664 0000358D 5F                      	POP	DI
 21665 0000358E 07                      	POP	ES
 21666 0000358F C3                      	retn
 21667                                  GetRedir:
 21668 00003590 83FB01                  	CMP	BX,1
 21669 00003593 77E9                    	JA	short GetNormal
 21670 00003595 36C536[E605]            	LDS	SI,[SS:CONSFT]
 21671 0000359A F8                      	CLC
 21672                                  get_io_sft_retn:
 21673 0000359B C3                      	retn
 21674                                  
 21675                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 21676                                  ;---------------------------------------------------------------------------
 21677                                  ;
 21678                                  ; Procedure Name : DIRREAD
 21679                                  ;
 21680                                  ; Inputs:
 21681                                  ;	AX = Directory block number (relative to first block of directory)
 21682                                  ;	ES:BP = Base of drive parameters
 21683                                  ;	[DIRSEC] = First sector of first cluster of directory
 21684                                  ;	[CLUSNUM] = Next cluster
 21685                                  ;	[CLUSFAC] = Sectors/Cluster
 21686                                  ; Function:
 21687                                  ;	Read the directory block into [CURBUF].
 21688                                  ; Outputs:
 21689                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 21690                                  ;	[SECCLUSPOS] Set
 21691                                  ;	ES:BP unchanged
 21692                                  ;	[CURBUF] Points to Buffer with dir sector
 21693                                  ;	Carry set if error (user said FAIL to I 24)
 21694                                  ; DS preserved, all other registers destroyed.
 21695                                  ;---------------------------------------------------------------------------
 21696                                  
 21697                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 21698                                  
 21699                                  DIRREAD:
 21700                                  
 21701                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 21702                                  ; the same as what is in the DPB! In the case of the root directory, we have
 21703                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 21704                                  ; by DIRStart = 0.
 21705                                  
 21706 0000359C 31D2                    	XOR	DX,DX
 21707                                  	;CMP	word [DIRSTART],0
 21708                                  	; 21/09/2023
 21709 0000359E 3916[C205]              	cmp	[DIRSTART],dx ; 0
 21710 000035A2 7503                    	jnz	short SubDir
 21711 000035A4 92                      	XCHG	AX,DX
 21712 000035A5 EB0C                    	JMP	short DoRead
 21713                                  
 21714                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 21715                                  
 21716                                  SubDir:
 21717 000035A7 88C2                    	MOV	DL,AL
 21718                                  	;and	dl,[es:bp+4]
 21719 000035A9 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 21720                                  
 21721                                  ;	(DX) = sector-in-cluster
 21722                                  
 21723                                  	;mov	cl,[es:bp+5]
 21724 000035AD 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21725 000035B1 D3E8                    	SHR	AX,CL
 21726                                  
 21727                                  ;	(DX) = position in cluster
 21728                                  ;	(AX) = number of clusters to skip
 21729                                  
 21730                                  DoRead:
 21731 000035B3 8816[7305]              	MOV	[SECCLUSPOS],DL
 21732 000035B7 89C1                    	MOV	CX,AX
 21733 000035B9 88D4                    	MOV	AH,DL
 21734                                  
 21735                                  ;	(CX) = number of clusters to skip.
 21736                                  ;	(AH) = remainder
 21737                                  
 21738                                  	; 04/05/2019 - Retro DOS v4.0
 21739                                  
 21740                                  	; MSDOS 6.0
 21741                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 21742                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 21743                                  	;MOV	DX,[DIRSEC]
 21744                                  	;ADD	DL,AH
 21745                                  	;ADC	DH,0
 21746                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 21747                                  	; 21/09/2023
 21748 000035BB 31DB                    	xor	bx,bx ; 0
 21749 000035BD 8B16[BE05]              	mov	dx,[DIRSEC]
 21750 000035C1 00E2                    	add	dl,ah
 21751 000035C3 10DE                    	adc	dh,bl ; 0
 21752 000035C5 131E[C005]              	adc	bx,[DIRSEC+2]
 21753 000035C9 891E[0706]              	mov	[HIGH_SECTOR],bx
 21754                                  
 21755 000035CD 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21756 000035D1 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21757 000035D5 E319                    	JCXZ	FIRSTCLUSTER
 21758                                  SKPCLLP:
 21759 000035D7 E8231E                  	call	UNPACK
 21760 000035DA 72BF                    	jc	short get_io_sft_retn
 21761 000035DC 87DF                    	XCHG	BX,DI
 21762 000035DE E8051E                  	call	IsEOF			; test for eof based on fat size
 21763 000035E1 7302                    	JAE	short HAVESKIPPED
 21764 000035E3 E2F2                    	LOOP	SKPCLLP
 21765                                  HAVESKIPPED:
 21766 000035E5 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21767 000035E9 89FA                    	MOV	DX,DI
 21768 000035EB 88E3                    	MOV	BL,AH
 21769 000035ED E8CB16                  	call	FIGREC
 21770                                  
 21771                                  	;entry	FIRSTCLUSTER
 21772                                  
 21773                                  FIRSTCLUSTER:
 21774                                  	; 22/09/2023
 21775                                  	;;mov	byte [ALLOWED],18h
 21776                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 21777                                  	;XOR	AL,AL ; *	; Indicate pre-read
 21778                                  	;call	GETBUFFR
 21779 000035F0 E80F22                  	call	GETBUFFER ; *	; pre-read
 21780 000035F3 72A6                    	jc	short get_io_sft_retn
 21781                                  
 21782                                  	;entry	SET_BUF_AS_DIR
 21783                                  
 21784                                  SET_BUF_AS_DIR:
 21785                                  
 21786                                  ;	Set the type of CURBUF to be a directory sector.
 21787                                  ;	Only flags are modified.
 21788                                  
 21789 000035F5 1E                      	PUSH	DS
 21790 000035F6 56                      	PUSH	SI
 21791 000035F7 C536[E205]              	LDS	SI,[CURBUF]
 21792                                  	;or	byte [si+5],4
 21793 000035FB 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21794 000035FF 5E                      	POP	SI
 21795 00003600 1F                      	POP	DS
 21796                                  dirread_retn:
 21797 00003601 C3                      	retn
 21798                                  
 21799                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21800                                  ;----------------------------------------------------------------------------
 21801                                  ;
 21802                                  ; Procedure Name : FATSECRD
 21803                                  ; Inputs:
 21804                                  ;	Same as DREAD
 21805                                  ;	DS:BX = Transfer address
 21806                                  ;	CX = Number of sectors
 21807                                  ;	DX = Absolute record number
 21808                                  ;	ES:BP = Base of drive parameters
 21809                                  ; Function:
 21810                                  ;	Calls BIOS to perform FAT read.
 21811                                  ; Outputs:
 21812                                  ;	Same as DREAD
 21813                                  ;---------------------------------------------------------------------------
 21814                                  
 21815                                  	; 04/05/2019 - Retro DOS v4.0
 21816                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21817                                  
 21818                                  FATSECRD:
 21819                                  ;hkn; SS override
 21820                                  	;mov	byte [ss:ALLOWED],18h
 21821 00003602 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21822 00003608 89CF                    	MOV	DI,CX
 21823                                  	;mov	cl,[es:bp+8]
 21824 0000360A 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21825                                  	; MSDOS 3.3
 21826                                  	;;mov	al,[es:bp+0Fh]
 21827                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE]
 21828                                  	;XOR	AH,AH
 21829                                  	; MSDOS 6.0
 21830                                  	;mov	ax,[es:bp+0Fh]
 21831 0000360E 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21832 00003612 30ED                    	XOR	CH,CH
 21833 00003614 52                      	PUSH	DX
 21834                                  NXTFAT:
 21835                                  	; MSDOS 6.0
 21836                                  ;hkn; SS override
 21837 00003615 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21838 0000361C 51                      	PUSH	CX			;32mb
 21839 0000361D 50                      	PUSH	AX
 21840 0000361E 89F9                    	MOV	CX,DI
 21841 00003620 E85B00                  	call	DSKREAD
 21842 00003623 58                      	POP	AX
 21843 00003624 59                      	POP	CX
 21844 00003625 7420                    	JZ	short RET41P		; Carry clear
 21845 00003627 01C2                    	ADD	DX,AX
 21846 00003629 E2EA                    	LOOP	NXTFAT
 21847 0000362B 5A                      	POP	DX
 21848 0000362C 89F9                    	MOV	CX,DI
 21849                                  
 21850                                  ; NOTE FALL THROUGH
 21851                                  
 21852                                  ;Break	<DREAD -- DO A DISK READ>
 21853                                  ;---------------------------------------------------------------------------
 21854                                  ;
 21855                                  ; Procedure Name : DREAD
 21856                                  ;
 21857                                  ; Inputs:
 21858                                  ;	DS:BX = Transfer address
 21859                                  ;	CX = Number of sectors
 21860                                  ;	DX = Absolute record number	      (LOW)
 21861                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21862                                  ;	ES:BP = Base of drive parameters
 21863                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21864                                  ; Function:
 21865                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21866                                  ;	errors, will call HARDERRRW for further action.
 21867                                  ; Outputs:
 21868                                  ;	Carry set if error (currently user FAILED to INT 24)
 21869                                  ; DS,ES:BP preserved. All other registers destroyed.
 21870                                  ;---------------------------------------------------------------------------
 21871                                  
 21872                                  	;entry	DREAD
 21873                                  DREAD:
 21874 0000362E E84D00                  	call	DSKREAD
 21875 00003631 74CE                    	jz	short dirread_retn	; Carry clear
 21876                                  ;hkn; SS override
 21877 00003633 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21878 00003639 E89500                  	call	HARDERRRW
 21879 0000363C 3C01                    	CMP	AL,1			; Check for retry
 21880 0000363E 74EE                    	JZ	short DREAD
 21881                                  
 21882                                  fail_ignore:	; 09/02/2024
 21883 00003640 3C03                    	CMP	AL,3			; Check for FAIL
 21884 00003642 F8                      	CLC
 21885 00003643 7501                    	JNZ	short NO_CAR		; Ignore
 21886 00003645 F9                      	STC
 21887                                  NO_CAR:
 21888 00003646 C3                      	retn
 21889                                  RET41P: 
 21890 00003647 5A                      	POP	DX
 21891 00003648 C3                      	retn
 21892                                  
 21893                                  ; 24/07/2018 - Retro DOS v3.0
 21894                                  
 21895                                  ;Break	<CHECK_WRITE_LOCK>
 21896                                  ;---------------------------------------------------------------------------
 21897                                  ;
 21898                                  ; Procedure Name : CHECK_WRITE_LOCK
 21899                                  ;
 21900                                  ; Inputs:
 21901                                  ;	output of SETUP
 21902                                  ;	ES:DI -> SFT
 21903                                  ; Function:
 21904                                  ;	check write lock
 21905                                  ; Outputs:
 21906                                  ;	Carry set if error
 21907                                  ;	Carry clear if ok
 21908                                  ;
 21909                                  ;----------------------------------------------------------------------------
 21910                                  
 21911                                  	; 04/05/2019 - Retro DOS v4.0
 21912                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21913                                  
 21914                                  CHECK_WRITE_LOCK:
 21915                                  	; MSDOS 6.0
 21916                                  	;test	byte [es:di+4],8
 21917 00003649 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21918                                  	;JZ	short write_cont			     ;no
 21919                                  	;;call	SET_ACC_ERR_DS
 21920                                  	;;retn
 21921                                  	;;jnz	SET_ACC_ERR_DS
 21922                                  	; 19/08/2018
 21923                                  	;jz	short write_cont
 21924                                  	;jmp	SET_ACC_ERR_DS
 21925                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21926 0000364E 7403                    	JZ	short write_cont
 21927                                  	;call	SET_ACC_ERR_DS
 21928                                  	;retn
 21929                                  	; 16/12/2022
 21930 00003650 E9AD01                  	jmp	SET_ACC_ERR_DS
 21931                                  
 21932                                  write_cont:				;
 21933 00003653 51                      	PUSH	CX			;save reg
 21934 00003654 09C9                    	OR	CX,CX			;
 21935 00003656 7501                    	JNZ	short Not_Truncate	;
 21936 00003658 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21937                                  Not_Truncate:				;
 21938 00003659 B080                    	MOV	AL,80H			;check write access
 21939 0000365B E8F33A                  	call	LOCK_CHECK		;check lock
 21940 0000365E 59                      	POP	CX			;restore reg
 21941 0000365F 7305                    	JNC	short WRITE_OK		;lock ok
 21942 00003661 E85A01                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21943 00003664 73ED                    	JNC	short write_cont	;retry
 21944                                  WRITE_OK:				;
 21945 00003666 C3                      	retn				;
 21946                                  
 21947                                  ;Break	<CHECK_READ_LOCK>
 21948                                  ;---------------------------------------------------------------------------
 21949                                  ;
 21950                                  ; Procedure Name : CHECK_READ_LOC
 21951                                  ;
 21952                                  ; Inputs:
 21953                                  ;	ES:DI -> SFT
 21954                                  ;	output of SETUP
 21955                                  ; Function:
 21956                                  ;	check read lock
 21957                                  ; Outputs:
 21958                                  ;	Carry set if error
 21959                                  ;	Carry clear if ok
 21960                                  ;----------------------------------------------------------------------------
 21961                                  
 21962                                  CHECK_READ_LOCK:
 21963                                  	; MSDOS 6.0
 21964                                  	;test	byte [es:di+4],8
 21965 00003667 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21966                                  	;JZ	short do_retry			   	     ; no
 21967                                  	;;call	SET_ACC_ERR
 21968                                  	;;retn
 21969                                  	;;jnz	SET_ACC_ERR
 21970                                  	; 16/12/2022
 21971                                  	; 28/07/2019
 21972 0000366C 7403                    	jz	short do_retry
 21973 0000366E E99101                  	jmp	SET_ACC_ERR
 21974                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21975                                  	;JZ	short do_retry
 21976                                  	;call	SET_ACC_ERR
 21977                                  	;retn
 21978                                  do_retry:				;
 21979 00003671 30C0                    	xor	al,al			;check read access
 21980 00003673 E8DB3A                  	call	LOCK_CHECK		;check lock
 21981 00003676 7305                    	JNC	short READLOCK_OK 	;lock ok
 21982 00003678 E82301                  	call	READ_LOCK_VIOLATION	;issue I24
 21983 0000367B 73F4                    	JNC	short do_retry		;retry
 21984                                  READLOCK_OK:				;
 21985                                  dw_ret_label:	; 09/02/2024
 21986 0000367D C3                      	retn				;
 21987                                  
 21988                                  ;============================================================================
 21989                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21990                                  ;============================================================================
 21991                                  ; 24/07/2018 - Retro DOS v3.0
 21992                                  ; 04/05/2019 - Retro DOS v4.0
 21993                                  
 21994                                  ;	TITLE	DISK2 - Disk utility routines
 21995                                  ;	NAME	Disk2
 21996                                  
 21997                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21998                                  ;
 21999                                  ;	DskRead
 22000                                  ;	DWRITE
 22001                                  ;	DSKWRITE
 22002                                  ;	HarderrRW
 22003                                  ;	SETUP
 22004                                  ;	BREAKDOWN
 22005                                  ;	READ_LOCK_VIOLATION
 22006                                  ;	WRITE_LOCK_VIOLATION
 22007                                  ;	DISKREAD
 22008                                  ;	SET_ACC_ERR_DS
 22009                                  ;	SET_ACC_ERR
 22010                                  ;	SETSFT
 22011                                  ;	SETCLUS
 22012                                  ;	AddRec
 22013                                  ;
 22014                                  ;	Revision history:
 22015                                  ;
 22016                                  ;		AN000 version 4.00 Jan. 1988
 22017                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 22018                                  
 22019                                  ; 04/05/2019 - Retro DOS v4.0
 22020                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 22021                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22022                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 22023                                  
 22024                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 22025                                  ;---------------------------------------------------------------------------
 22026                                  ;
 22027                                  ; Procedure Name : DSKREAD
 22028                                  ;
 22029                                  ; Inputs:
 22030                                  ;	DS:BX = Transfer addr
 22031                                  ;	CX = Number of sectors
 22032                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22033                                  ;	DX = Absolute record number	       (LOW)
 22034                                  ;	ES:BP = Base of drive parameters
 22035                                  ; Function:
 22036                                  ;	Call BIOS to perform disk read
 22037                                  ; Outputs:
 22038                                  ;	DI = CX on entry
 22039                                  ;	CX = Number of sectors unsuccessfully transfered
 22040                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 22041                                  ;	Zero set if OK (from BIOS) (carry clear)
 22042                                  ;	Zero clear if error (carry clear)
 22043                                  ; SI Destroyed, others preserved
 22044                                  ;---------------------------------------------------------------------------
 22045                                  
 22046                                  DSKREAD:
 22047 0000367E 51                      	PUSH	CX
 22048                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 22049 0000367F 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 22050                                  	;mov	al,[es:bp+1]
 22051 00003683 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 22052 00003687 53                      	PUSH	BX
 22053 00003688 06                      	PUSH	ES
 22054 00003689 E8340F                  	call	SETREAD
 22055 0000368C EB22                    	JMP	short DODSKOP
 22056                                  
 22057                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 22058                                  ;--------------------------------------------------------------------------
 22059                                  ;
 22060                                  ; Procedure Name : DWRITE
 22061                                  ;
 22062                                  ; Inputs:
 22063                                  ;	DS:BX = Transfer address
 22064                                  ;	CX = Number of sectors
 22065                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22066                                  ;	DX = Absolute record number	       (LOW)
 22067                                  ;	ES:BP = Base of drive parameters
 22068                                  ;	[ALLOWED] must be set in case HARDERR called
 22069                                  ; Function:
 22070                                  ;	Calls BIOS to perform disk write. If BIOS reports
 22071                                  ;	errors, will call HARDERRRW for further action.
 22072                                  ; Output:
 22073                                  ;	Carry set if error (currently, user FAILed to I 24)
 22074                                  ; BP preserved. All other registers destroyed.
 22075                                  ;----------------------------------------------------------------------------
 22076                                  
 22077                                  	;entry	DWRITE
 22078                                  DWRITE:
 22079 0000368E E81100                  	CALL	DSKWRITE
 22080 00003691 74EA                    	jz	short dw_ret_label	; Carry clear (retz)
 22081                                  
 22082                                  ;hkn; SS override
 22083 00003693 36C606[7505]01          	MOV	BYTE [SS:READOP],1	; Write
 22084 00003699 E83500                  	call	HARDERRRW
 22085 0000369C 3C01                    	CMP	AL,1			; Check for retry
 22086 0000369E 74EE                    	JZ	short DWRITE
 22087                                  
 22088                                  ; 09/02/2024
 22089                                  %if 0
 22090                                  	CMP	AL,3			; Check for FAIL
 22091                                  	CLC
 22092                                  	JNZ	short NO_CAR2 		; Ignore
 22093                                  	STC
 22094                                  NO_CAR2:
 22095                                  dw_ret_label:
 22096                                  	retn
 22097                                  %else
 22098                                  	; 09/02/2024 - Retro DOS v4.1
 22099 000036A0 EB9E                    	jmp	short fail_ignore
 22100                                  %endif
 22101                                  
 22102                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 22103                                  ;---------------------------------------------------------------------------
 22104                                  ;
 22105                                  ; Procedure Name : DSKWRITE
 22106                                  ;
 22107                                  ; Inputs:
 22108                                  ;	DS:BX = Transfer addr
 22109                                  ;	CX = Number of sectors
 22110                                  ;	DX = Absolute record number	       (LOW)
 22111                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22112                                  ;	ES:BP = Base of drive parameters
 22113                                  ; Function:
 22114                                  ;	Call BIOS to perform disk read
 22115                                  ; Outputs:
 22116                                  ;	DI = CX on entry
 22117                                  ;	CX = Number of sectors unsuccessfully transfered
 22118                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 22119                                  ;	Zero set if OK (from BIOS) (carry clear)
 22120                                  ;	Zero clear if error (carry clear)
 22121                                  ; SI Destroyed, others preserved
 22122                                  ;
 22123                                  ;----------------------------------------------------------------------------
 22124                                  
 22125                                  	;entry	DSKWRITE
 22126                                  DSKWRITE:
 22127 000036A2 51                      	PUSH	CX
 22128                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 22129 000036A3 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 22130                                  	;mov	al,[es:bp+1]
 22131 000036A7 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 22132 000036AB 53                      	PUSH	BX
 22133 000036AC 06                      	PUSH	ES
 22134 000036AD E8430F                  	call	SETWRITE
 22135                                  DODSKOP:
 22136 000036B0 8CD9                    	MOV	CX,DS		; Save DS
 22137 000036B2 1F                      	POP	DS		; DS:BP points to DPB
 22138 000036B3 1E                      	PUSH	DS
 22139                                  
 22140                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 22141 000036B4 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 22142 000036B8 E8840E                  	call	DEVIOCALL2
 22143                                  
 22144 000036BB 8ED9                    	MOV	DS,CX		; Restore DS
 22145 000036BD 07                      	POP	ES		; Restore ES
 22146 000036BE 5B                      	POP	BX
 22147                                  
 22148                                  ;hkn; SS override
 22149 000036BF 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 22150 000036C4 5F                      	POP	DI
 22151 000036C5 29F9                    	SUB	CX,DI
 22152 000036C7 F7D9                    	NEG	CX		; Number of sectors not transferred
 22153                                  
 22154                                  ;hkn; SS override
 22155 000036C9 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 22156                                  	;test	ax,8000h
 22157                                  	; 17/12/2022
 22158                                  	;test	ah,80h
 22159 000036CD F6C480                  	test	ah,(STERR>>8)
 22160                                  	;test	AX,STERR
 22161 000036D0 C3                      	retn
 22162                                  
 22163                                  ;Break	<HardErrRW - map extended errors and call harderr>
 22164                                  ;---------------------------------------------------------------------------
 22165                                  ;
 22166                                  ; Procedure Name : HardErrRW
 22167                                  ;
 22168                                  ; Inputs:
 22169                                  ;	AX is error code from read or write
 22170                                  ;	Other registers set as per HARDERR
 22171                                  ; Function:
 22172                                  ;	Checks the error code for special extended
 22173                                  ;	errors and maps them if needed. Then invokes
 22174                                  ;	Harderr
 22175                                  ; Outputs:
 22176                                  ;	Of HARDERR
 22177                                  ; AX may be modified prior to call to HARDERR.
 22178                                  ; No other registers altered.
 22179                                  ;
 22180                                  ;---------------------------------------------------------------------------
 22181                                  
 22182                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22183                                  HARDERRRW:
 22184                                  	;cmp	al,0Fh
 22185 000036D1 3C0F                    	CMP	AL,error_I24_wrong_disk
 22186 000036D3 7512                    	JNZ	short DO_ERR				; Nothing to do
 22187                                  
 22188                                  	; MSDOS 3.3
 22189                                  	;push	ds
 22190                                  	;push	si
 22191                                  	;lds	si,[ss:CALLVIDRW]
 22192                                  	;mov	[ss:EXTERRPT+2], ds
 22193                                  	;mov	[ss:EXTERRPT], si
 22194                                  	;pop	si
 22195                                  	;pop	ds
 22196                                  
 22197                                  	; MSDOS 6.0
 22198 000036D5 50                      	push	ax
 22199 000036D6 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 22200 000036DA 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 22201 000036DE 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 22202 000036E2 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 22203 000036E6 58                      	pop	ax
 22204                                  DO_ERR:
 22205                                  	;;call	HARDERR
 22206                                  	;;retn
 22207                                  	; 16/12/2022
 22208                                  	; 10/06/2019
 22209 000036E7 E9DB1A                  	jmp	HARDERR	
 22210                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22211                                  	;call	HARDERR
 22212                                  	;retn
 22213                                  
 22214                                  ; 24/07/2018 - Retro DOS v3.0
 22215                                  
 22216                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 22217                                  ;----------------------------------------------------------------------------
 22218                                  ;
 22219                                  ; Procedure Name : SETUP
 22220                                  ;
 22221                                  ; Inputs:
 22222                                  ;	ES:DI point to SFT (value also in THISSFT)
 22223                                  ;	DMAAdd contains transfer address
 22224                                  ;	CX = Byte count
 22225                                  ;	DS = DOSDATA
 22226                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 22227                                  ;		2nd of caller of caller.
 22228                                  ; Outputs:
 22229                                  ;	    CX = byte count
 22230                                  ;	    [THISDPB] = Base of drive parameters if file
 22231                                  ;		      = Pointer to device header if device or NET
 22232                                  ;	    ES:DI Points to SFT
 22233                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 22234                                  ;	    [TRANS] = 0 (No transfers yet)
 22235                                  ;	    BytPos = Byte position in file
 22236                                  ;
 22237                                  ;	The following fields are relevant to local files (not devices) only:
 22238                                  ;
 22239                                  ;	    SecPos = Position of first sector (local files only)
 22240                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 22241                                  ;	    [CLUSNUM] = First cluster (local files only)
 22242                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 22243                                  ;	    [THISDRV] = Physical unit number (local files only)
 22244                                  ;
 22245                                  ;      RETURNS ONE LEVEL UP WITH:
 22246                                  ;	   CX = 0
 22247                                  ;	   CARRY = Clear
 22248                                  ;	IF AN ERROR IS DETECTED
 22249                                  ; All other registers destroyed
 22250                                  ;----------------------------------------------------------------------------
 22251                                  
 22252                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 22253                                  
 22254                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 22255                                  
 22256                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22257                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 22258                                  
 22259                                  SETUP:
 22260                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 22261                                  
 22262                                  	;lds 	si,[es:di+7]
 22263 000036EA 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 22264                                  
 22265                                  ;hkn; SS override
 22266 000036EE 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 22267                                  
 22268                                  ;hkn; SS is DOSDATA
 22269 000036F3 16                      	push	ss
 22270 000036F4 1F                      	pop	ds
 22271                                  
 22272 000036F5 8936[8A05]              	MOV	[THISDPB],SI
 22273                                  
 22274 000036F9 8B1E[2C03]              	MOV	BX,[DMAADD]
 22275 000036FD 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 22276 00003701 C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 22277                                  	;mov	ax,[es:di+15h]
 22278 00003706 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 22279                                  	;mov	dx,[es:di+17h]
 22280 0000370A 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 22281 0000370E 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 22282 00003712 A3[CE05]                	MOV	[BYTPOS],AX
 22283                                  	;test	word [es:di+5],8080h
 22284 00003715 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 22285 0000371B 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 22286 0000371D 06                      	PUSH	ES
 22287 0000371E C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 22288                                  
 22289                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22290                                  	;;mov	bl,[es:bp+0]
 22291                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 22292                                  	; 05/12/2022
 22293 00003722 268A5E00                	mov	bl,[es:bp]
 22294                                  	
 22295 00003726 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 22296                                  	;mov	bx,[es:bp+2]
 22297 0000372A 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 22298                                  
 22299                                  	;; MSDOS 3.3
 22300                                  	;cmp	dx,bx
 22301                                  	;jnb	short EOFERR
 22302                                  	;div	bx
 22303                                  	;mov	[SECPOS],ax
 22304                                  	;mov	[BYTSECPOS],dx
 22305                                  	;mov	dx,ax
 22306                                  	;;and	al,[es:bp+4]
 22307                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 22308                                  	;mov	[SECCLUSPOS],al
 22309                                  	;mov	ax,cx
 22310                                  	;;mov	cl,[es:bp+5]
 22311                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22312                                  	;shr	dx,cl
 22313                                  	;mov	[CLUSNUM],dx
 22314                                  	;pop	es
 22315                                  	;mov	cx,ax
 22316                                  
 22317                                  	; 04/05/2019 - Retro DOS v4.0
 22318                                  
 22319                                  	; MSDOS 6.0
 22320                                  ;M039: Optimized this section.
 22321 0000372E 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 22322 0000372F E81A05                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 22323 00003732 8916[CC05]              	MOV	[BYTSECPOS],DX
 22324 00003736 A3[C405]                	MOV	[SECPOS],AX
 22325 00003739 890E[C605]              	MOV	[SECPOS+2],CX
 22326 0000373D 89CA                    	MOV	DX,CX
 22327                                  
 22328 0000373F 89C3                    	MOV	BX,AX
 22329                                  	;and	bl,[es:bp+4]
 22330 00003741 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 22331 00003745 881E[7305]              	MOV	[SECCLUSPOS],BL
 22332                                  
 22333 00003749 E82705                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 22334 0000374C 59                      	POP	CX			;CX = byte count.
 22335 0000374D 751F                    	JNZ	short EOFERR		;cluster number above 64k
 22336                                  	;cmp	ax,[es:bp+0Dh]
 22337 0000374F 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 22338 00003753 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 22339                                  
 22340 00003755 A3[BC05]                	MOV	[CLUSNUM],AX
 22341 00003758 07                      	POP	ES			; ES:DI point to SFT
 22342                                  ;M039
 22343                                  
 22344                                  NOSETSTUFF:
 22345 00003759 89C8                    	MOV	AX,CX		; AX = Byte count.
 22346 0000375B 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 22347 0000375F 730C                    	JNC	short setup_OK	; Must be less than 64
 22348 00003761 A1[2C03]                	MOV	AX,[DMAADD]
 22349 00003764 F7D8                    	NEG	AX		; Amount of room left in segment (know
 22350                                  				;    less than 64K since max value of CX
 22351                                  				;    is FFFF).
 22352 00003766 7501                    	JNZ	short NoDec
 22353 00003768 48                      	DEC	AX
 22354                                  NoDec:
 22355 00003769 89C1                    	MOV	CX,AX		; Can do this much
 22356 0000376B E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 22357                                  setup_OK:
 22358 0000376D C3                      	retn
 22359                                  
 22360                                  EOFERR:
 22361 0000376E 07                      	POP	ES		; ES:DI point to SFT
 22362 0000376F 31C9                    	XOR	CX,CX		; No bytes read
 22363                                  ;;;;;;;;;;; 7/18/86
 22364                                  	; MSDOS 3.3
 22365                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 22366                                  ;;;;;;;;;;;
 22367                                  NOROOM:
 22368 00003771 5B                      	POP	BX		; Kill return address
 22369 00003772 F8                      	CLC
 22370 00003773 C3                      	retn			; RETURN TO CALLER OF CALLER
 22371                                  
 22372                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 22373                                  ;---------------------------------------------------------------------------
 22374                                  ;
 22375                                  ; Procedure Name : BREAKDOWN
 22376                                  ;
 22377                                  ; Inputs:
 22378                                  ;	CX = Length of disk transfer in bytes
 22379                                  ;	ES:BP = Base of drive parameters
 22380                                  ;	[BYTSECPOS] = Byte position within first sector
 22381                                  ;	DS = DOSDATA
 22382                                  ; Outputs:
 22383                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 22384                                  ;	[SECCNT] = No. of whole sectors to transfer
 22385                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 22386                                  ; AX, BX, DX destroyed. No other registers affected.
 22387                                  ;---------------------------------------------------------------------------
 22388                                  
 22389                                  BREAKDOWN:
 22390 00003774 A1[CC05]                	MOV	AX,[BYTSECPOS]
 22391 00003777 89CB                    	MOV	BX,CX
 22392 00003779 09C0                    	OR	AX,AX
 22393 0000377B 740E                    	JZ	short SAVFIR	; Partial first sector?
 22394                                  	;sub	ax,[es:bp+2]
 22395 0000377D 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 22396 00003781 F7D8                    	NEG	AX		; Max number of bytes left in first sector
 22397 00003783 29C3                    	SUB	BX,AX		; Subtract from total length
 22398 00003785 7304                    	JAE	short SAVFIR
 22399 00003787 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 22400 00003789 31DB                    	XOR	BX,BX		; And no bytes are left
 22401                                  SAVFIR:
 22402 0000378B A3[D205]                	MOV	[BYTCNT1],AX
 22403 0000378E 89D8                    	MOV	AX,BX
 22404 00003790 31D2                    	XOR	DX,DX
 22405                                  	;div	word [ES:BP+2]
 22406 00003792 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 22407 00003796 A3[D605]                	MOV	[SECCNT],AX
 22408 00003799 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 22409                                  	; MSDOS 3.3
 22410                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 22411                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 22412                                  	;CMP	AX,1
 22413                                  	;retnz
 22414                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 22415                                  	;MOV	[BYTCNT2],AX
 22416                                  	;MOV	[SECCNT],DX	; DX = 0
 22417                                  _RET45:
 22418 0000379D C3                      	retn
 22419                                  
 22420                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 22421                                  
 22422                                  ;----------------------------------------------------------------------------
 22423                                  ;
 22424                                  ; Procedure Name : READ_LOCK_VIOLATION
 22425                                  ;
 22426                                  ; ES:DI points to SFT. This entry used by NET_READ
 22427                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 22428                                  ; Else do retrys.
 22429                                  ; ES:DI,DS,CX preserved
 22430                                  ;
 22431                                  ;----------------------------------------------------------------------------
 22432                                  
 22433                                  READ_LOCK_VIOLATION:
 22434 0000379E C606[7505]00            	MOV	byte [READOP],0
 22435                                  ERR_ON_CHECK:
 22436                                  	;;test	word [es:di+2],8000h
 22437                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 22438                                  	;JNZ	short HARD_ERR
 22439                                  
 22440                                  	; 04/05/2019
 22441                                  	;test	byte [es:di+3],80h
 22442 000037A3 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 22443 000037A8 7508                    	JNZ	short HARD_ERR
 22444                                  
 22445                                  	;PUSH	CX
 22446                                  	;;mov	cl,[es:di+2]
 22447                                  	;MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 22448                                  	;;and	cl,0F0h
 22449                                  	;AND	CL,SHARING_MASK
 22450                                  	;;cmp	cl,0
 22451                                  	;CMP	CL,SHARING_COMPAT
 22452                                  	;POP	CX
 22453                                  	;JNE	short NO_HARD_ERR
 22454                                  	; 21/09/2023
 22455 000037AA 268A4502                	mov	al,[ES:DI+SF_ENTRY.sf_mode]
 22456 000037AE 24F0                    	and	al,SHARING_MASK
 22457                                  	;cmp	al,SHARING_COMPAT
 22458                                  	;jne	short NO_HARD_ERR
 22459 000037B0 7505                    	jnz	short NO_HARD_ERR
 22460                                  HARD_ERR:
 22461 000037B2 E8B239                  	call	LOCK_VIOLATION
 22462 000037B5 73E6                    	jnc	short _RET45		; User wants Retrys
 22463                                  NO_HARD_ERR:
 22464 000037B7 31C9                    	XOR	CX,CX			;No bytes transferred
 22465                                  	;mov	ax,21h
 22466 000037B9 B82100                  	MOV	AX,error_lock_violation
 22467 000037BC F9                      	STC
 22468                                  RET3:		; 06/02/2024
 22469 000037BD C3                      	retn
 22470                                  
 22471                                  ;----------------------------------------------------------------------------
 22472                                  ;
 22473                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 22474                                  ;
 22475                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 22476                                  ; This entry used by NET_WRITE
 22477                                  ;
 22478                                  ;----------------------------------------------------------------------------
 22479                                  
 22480                                  WRITE_LOCK_VIOLATION:
 22481 000037BE C606[7505]01            	MOV	byte [READOP],1
 22482 000037C3 EBDE                    	JMP	short ERR_ON_CHECK
 22483                                  
 22484                                  ; 04/05/2019 - Retro DOS v4.0
 22485                                  
 22486                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 22487                                  
 22488                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 22489                                  ;----------------------------------------------------------------------------
 22490                                  ;
 22491                                  ; Procedure Name : DISKREAD
 22492                                  ;
 22493                                  ; Inputs:
 22494                                  ;	Outputs of SETUP
 22495                                  ; Function:
 22496                                  ;	Perform disk read
 22497                                  ; Outputs:
 22498                                  ;    Carry clear
 22499                                  ;	CX = No. of bytes read
 22500                                  ;	ES:DI point to SFT
 22501                                  ;	SFT offset and cluster pointers updated
 22502                                  ;    Carry set
 22503                                  ;	CX = 0
 22504                                  ;	ES:DI point to SFT
 22505                                  ;	AX has error code
 22506                                  ;----------------------------------------------------------------------------
 22507                                  
 22508                                  ;hkn; called from disk.asm. DS already set up.
 22509                                  
 22510                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22511                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 22512                                  
 22513                                  DISKREAD:
 22514                                  	;mov	ax,[es:di+11h]
 22515 000037C5 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 22516                                  	;mov	bx,[es:di+13h]
 22517 000037C9 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 22518 000037CD 2B06[CE05]              	SUB	AX,[BYTPOS]
 22519 000037D1 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 22520 000037D5 721F                    	JB	short RDERR		;Read starts past EOF
 22521 000037D7 750A                    	JNZ	short ENUF		;More than 64k to EOF
 22522 000037D9 09C0                    	OR	AX,AX
 22523 000037DB 7419                    	JZ	short RDERR		;Read starts at EOF
 22524 000037DD 39C8                    	CMP	AX,CX
 22525 000037DF 7302                    	JAE	short ENUF		;I/O fits
 22526 000037E1 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 22527                                  ENUF:
 22528                                  	; MSDOS 3.3
 22529                                  	;test	byte [es:di+4],8
 22530                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22531                                  	;jnz	short SET_ACC_ERR
 22532                                  	;call	LOCK_CHECK
 22533                                  	;jnb	short _READ_OK
 22534                                  	;call	READ_LOCK_VIOLATION
 22535                                  	;jnb	short ENUF
 22536                                  	;retn
 22537                                  
 22538                                  	; MSDOS 6.0
 22539 000037E3 E881FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 22540                                  	;JNC	short _READ_OK 		; There are no locks
 22541                                  	;retn
 22542                                  	; 06/02/2024
 22543 000037E6 72D5                    	jc	short RET3
 22544                                  
 22545                                  _READ_OK:
 22546 000037E8 C42E[8A05]              	LES	BP,[THISDPB]
 22547 000037EC E885FF                  	CALL	BREAKDOWN
 22548                                  
 22549                                  ; 10/02/2024
 22550                                  %if 0
 22551                                  	MOV	CX,[CLUSNUM] ; *
 22552                                  	call	FNDCLUS
 22553                                       	; MSDOS 6.0			;M022 conditional removed here
 22554                                  	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 22555                                  					; migrated from 330a - HKN
 22556                                  %else
 22557                                  	; 10/02/2024 - Retro DOS v4.1
 22558 000037EF E82C13                  	call	FNDCLUS_X ; *
 22559 000037F2 720E                    	jc	short SET_ACC_ERR ; ds=ss
 22560                                  %endif
 22561                                  	;OR	CX,CX
 22562                                  	;JZ	short SKIPERR
 22563                                  	; 06/02/2024
 22564 000037F4 E313                    	jcxz	SKIPERR
 22565                                  
 22566                                  RDERR:
 22567 000037F6 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 22568 000037F8 E91802                  	jmp	WRTERR22
 22569                                  
 22570                                  ;RDLASTJ: 
 22571                                  	;JMP	RDLAST                  ;M039
 22572                                  
 22573                                  SETSFTJ2: 
 22574 000037FB E99600                  	JMP	SETSFT
 22575                                  
 22576                                  CANOT_READ:
 22577                                  	; MSDOS 3.3
 22578                                  	;POP	CX		;M039.
 22579                                  	; MSDOS 3.3 & MSDOS 6.0
 22580 000037FE 59                      	POP	CX              ;Clean stack.
 22581 000037FF 5B                      	POP	BX
 22582                                  
 22583                                  	;entry	SET_ACC_ERR_DS
 22584                                  SET_ACC_ERR_DS:
 22585                                  
 22586                                  ;hkn; SS is DOSDATA
 22587                                  	;Context DS
 22588 00003800 16                      	push	ss
 22589 00003801 1F                      	pop	ds
 22590                                  
 22591                                  	;entry	SET_ACC_ERR
 22592                                  SET_ACC_ERR:
 22593 00003802 31C9                    	XOR	CX,CX
 22594                                  	;mov	ax,5
 22595 00003804 B80500                  	MOV	AX,error_access_denied
 22596 00003807 F9                      	STC
 22597 00003808 C3                      	retn
 22598                                  
 22599                                  SKIPERR:
 22600 00003809 8916[BA05]              	MOV	[LASTPOS],DX
 22601 0000380D 891E[BC05]              	MOV	[CLUSNUM],BX
 22602 00003811 833E[D205]00            	CMP	word [BYTCNT1],0
 22603 00003816 7405                    	JZ	short RDMID
 22604                                  
 22605 00003818 E87D13                  	call	BUFRD
 22606                                  	;JC	short SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 22607                                  	; 10/02/2024
 22608                                  	; ds=ss
 22609 0000381B 72E5                    	jc	short SET_ACC_ERR
 22610                                  
 22611                                  RDMID:
 22612 0000381D 833E[D605]00            	CMP	word [SECCNT],0
 22613                                  	;JZ	RDLAST ; 10/08/2018
 22614 00003822 7453                    	jz	short RDLAST
 22615                                  
 22616 00003824 E80514                  	call	NEXTSEC
 22617 00003827 72D2                    	JC	short SETSFTJ2
 22618                                  
 22619 00003829 C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 22620                                  ONSEC:
 22621 0000382E 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 22622 00003832 8B0E[D605]              	MOV	CX,[SECCNT]
 22623 00003836 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 22624                                  RDLP:
 22625 0000383A E82014                  	call	OPTIMIZE
 22626                                  	;JC	short SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 22627                                  	; 10/02/2024
 22628                                  	; ds=ss
 22629 0000383D 72C3                    	jc	short SET_ACC_ERR
 22630                                  
 22631 0000383F 57                      	PUSH	DI                      ;DI = Next physical cluster.
 22632 00003840 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 22633 00003841 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 22634                                  	;mov	byte [ALLOWED],38h
 22635 00003842 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22636 00003847 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 22637                                  
 22638 0000384B 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 22639 0000384C 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 22640                                  
 22641                                  	; 04/05/2019 - Retro DOS v4.0
 22642                                  
 22643                                  	; MSDOS 6.0
 22644 0000384D E8A521                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 22645                                  
 22646                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22647 00003850 E8DBFD                  	call	DREAD
 22648                                  
 22649                                  	; 10/02/2024
 22650                                  	; ds<>ss
 22651                                  
 22652                                  	; MSDOS 3.3 
 22653                                  	;pop	bx
 22654                                  	;pop	dx
 22655                                  	;jc	short CANOT_READ
 22656                                  	;add	bx,dx	; (bx = Extent end)
 22657                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 22658                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 22659                                  	;call	SETVISIT
 22660                                  	; ->***
 22661                                  ;M039
 22662                                  	; MSDOS 6.0 
 22663 00003853 59                      	pop	cx
 22664 00003854 5A                      	pop	dx
 22665 00003855 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 22666 0000385A 72A2                    	jc	short CANOT_READ
 22667                                  
 22668 0000385C 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 22669                                  
 22670                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22671                                  ;            sectors, also termed an "Extent".)
 22672                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22673                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22674                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22675                                  ;
 22676                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 22677                                  ;	buffers must be "read" into the transfer memory block, so that the
 22678                                  ;       transfer memory reflects the most recent data.
 22679                                  
 22680 00003861 E85E00                  	call	DskRdBufScan
 22681                                  
 22682                                  	;Context DS
 22683 00003864 16                      	push	ss
 22684 00003865 1F                      	pop	ds
 22685                                          
 22686 00003866 59                      	pop	cx
 22687 00003867 5B                              pop	bx
 22688                                  
 22689                                  ;       CX = # of sector remaining.
 22690                                  ;       BX = Next physical cluster.
 22691                                  
 22692                                  ;M039
 22693                                  
 22694                                  ;;;;;;;;
 22695                                  ;	; 25/07/2018 - Retro DOS v3.0
 22696                                  ;	; ***->
 22697                                  ;	; MSDOS 3.3
 22698                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 22699                                  ;bufq:
 22700                                  ;;	DX = Extent start.
 22701                                  ;;	BX = Extent end.
 22702                                  ;;	 AL = Drive #.
 22703                                  ;;     DS:DI-> 1st buffer in queue.
 22704                                  ;
 22705                                  ;	;or	byte [di+5],20h
 22706                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22707                                  ;	;cmp	al,[di+4]	
 22708                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 22709                                  ;	jnz	short bufq3
 22710                                  ;	;cmp	[di+6],dx
 22711                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 22712                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 22713                                  ;	;cmp	[di+6],bx
 22714                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 22715                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 22716                                  ;	
 22717                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 22718                                  ;
 22719                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 22720                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 22721                                  ;;      as MRU (Most Recently Used).
 22722                                  ;
 22723                                  ;	;test	byte [di+5],40h
 22724                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 22725                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 22726                                  ;	pop	ax ; transfer address
 22727                                  ;	push	ax
 22728                                  ;	push	di
 22729                                  ;	push	dx
 22730                                  ;	;sub	dx,[di+6]
 22731                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 22732                                  ;	neg	dx
 22733                                  ;
 22734                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 22735                                  ;;           block.
 22736                                  ;
 22737                                  ;	mov	si,di
 22738                                  ;	mov	di,ax
 22739                                  ;	mov	ax,dx
 22740                                  ;	;mov	cx,[es:bp+6]	
 22741                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 22742                                  ;	mul	cx
 22743                                  ;	add	di,ax
 22744                                  ;
 22745                                  ;	lea	si,[si+16]
 22746                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 22747                                  ;	shr	cx,1
 22748                                  ;	push	es
 22749                                  ;	mov	es,[SS:DMAADD+2]
 22750                                  ;
 22751                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22752                                  ;;      DS:SI-> Buffer sector data.
 22753                                  ;;      ES:DI-> Destination within Transfer memory block.
 22754                                  ;
 22755                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 22756                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22757                                  ;	;rep	movsb                   ;Copy last byte.
 22758                                  ;	jnc	short bufq1
 22759                                  ;	movsb
 22760                                  ;bufq1:
 22761                                  ;	pop	es
 22762                                  ;	pop	dx
 22763                                  ;	pop	di
 22764                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 22765                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 22766                                  ;bufq2:
 22767                                  ;	call	SCANPLACE
 22768                                  ;bufq3:
 22769                                  ;	call	SKIPVISIT
 22770                                  ;	jnz	short bufq
 22771                                  ;	
 22772                                  ;	push	ss
 22773                                  ;	pop	ds
 22774                                  ;	pop	cx
 22775                                  ;	pop	cx
 22776                                  ;	pop	bx	
 22777                                  ;bufq4:
 22778                                  ;;;;;;;
 22779 00003868 E30D                    	JCXZ	RDLAST
 22780                                  
 22781 0000386A E8791B                  	call	IsEOF			; test for eof on fat size
 22782 0000386D 7325                    	JAE	short SETSFT
 22783                                  
 22784 0000386F B200                    	MOV	DL,0
 22785 00003871 FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 22786 00003875 EBC3                    	JMP	short RDLP ; 19/05/2019
 22787                                  
 22788                                  RDLAST:
 22789 00003877 A1[D405]                	MOV	AX,[BYTCNT2]
 22790 0000387A 09C0                    	OR	AX,AX
 22791 0000387C 7416                    	JZ	short SETSFT
 22792 0000387E A3[D205]                	MOV	[BYTCNT1],AX
 22793                                  
 22794 00003881 E8A813                  	call	NEXTSEC
 22795 00003884 720E                    	JC	short SETSFT
 22796                                  
 22797 00003886 C706[CC05]0000          	MOV	word [BYTSECPOS],0
 22798 0000388C E80913                  	call	BUFRD
 22799                                  	; 10/08/2018
 22800 0000388F 7303                    	JNC	short SETSFT
 22801                                  	;JMP	SET_ACC_ERR_DS
 22802                                  	; 10/02/2024
 22803                                  	; ds=ss
 22804 00003891 E96EFF                  	jmp	SET_ACC_ERR
 22805                                  
 22806                                  ;------------------------------------------------------------------------------
 22807                                  ;
 22808                                  ; Procedure Name : SETSFT
 22809                                  ; Inputs:
 22810                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 22811                                  ;		and set cluster fields
 22812                                  ; Function:
 22813                                  ;	Update [THISSFT] based on the transfer
 22814                                  ; Outputs:
 22815                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 22816                                  ;	ES:DI points to [THISSFT]
 22817                                  ;	CX No. of bytes transferred
 22818                                  ;	Carry clear
 22819                                  ;
 22820                                  ;----------------------------------------------------------------------------
 22821                                  
 22822                                  	;entry	SETSFT
 22823                                  
 22824                                  ; 26/07/2018 - Retro DOS v3.0
 22825                                  SETSFT:
 22826 00003894 C43E[9E05]              	LES	DI,[THISSFT]
 22827                                  
 22828                                  ; Same as SETSFT except ES:DI already points to SFT
 22829                                  	;entry	SETCLUS
 22830                                  SETCLUS:	
 22831 00003898 8B0E[B805]              	MOV	CX,[NEXTADD]
 22832 0000389C 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22833                                  	;;test	word [es:di+5],80h
 22834                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22835                                  	;JNZ	short ADDREC		; don't set clusters if device
 22836                                  
 22837                                  	; 04/05/2019 - Retro DOS v4.0
 22838                                  	;test	byte [es:di+5],80h
 22839 000038A0 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22840 000038A5 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22841                                  
 22842 000038A7 A1[BC05]                	MOV	AX,[CLUSNUM]
 22843                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22844                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22845 000038AA 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22846 000038AE A1[BA05]                	MOV	AX,[LASTPOS]
 22847                                  	;mov	[es:di+19h],ax
 22848 000038B1 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22849                                  
 22850                                  ;----------------------------------------------------------------------------
 22851                                  ;
 22852                                  ; Procedure : AddRec
 22853                                  ; Inputs:
 22854                                  ;	ES:DI points to SFT
 22855                                  ;	CX is No. Bytes transferred
 22856                                  ; Function:
 22857                                  ;	Update the SFT offset based on the transfer
 22858                                  ; Outputs:
 22859                                  ;	sf_position updated to point to first byte after transfer
 22860                                  ;	ES:DI points to SFT
 22861                                  ;	CX No. of bytes transferred
 22862                                  ;	Carry clear
 22863                                  ;----------------------------------------------------------------------------
 22864                                  
 22865                                  	;entry	AddRec
 22866                                  ADDREC:
 22867 000038B5 E309                    	JCXZ	RET28		; If no records read,  don't change position
 22868                                  	;add	[es:di+15h],cx
 22869 000038B7 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22870                                  	;adc	word [es:di+17h], 0
 22871 000038BB 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22872                                  RET28:	
 22873 000038C0 F8                      	CLC
 22874 000038C1 C3                      	retn
 22875                                  
 22876                                  ; 25/07/2018
 22877                                  ; MSDOS 6.0
 22878                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22879                                  ;----------------------------------------------------------------------------
 22880                                  ;
 22881                                  ; Procedure Name : DskRdBufScan
 22882                                  ;
 22883                                  ; Inputs:
 22884                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22885                                  ;            sectors, also termed an "Extent".)
 22886                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22887                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22888                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22889                                  ;
 22890                                  ; Function:
 22891                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22892                                  ;	"read" into the transfer memory block, so that the transfer memory
 22893                                  ;	reflects the most recent data.
 22894                                  ;
 22895                                  ; Outputs:
 22896                                  ;       Transfer memory updated as required.
 22897                                  ;
 22898                                  ; Uses:
 22899                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22900                                  ;       SS override for all global variables.
 22901                                  ;
 22902                                  ; Notes:
 22903                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22904                                  ;	than the FIRST.
 22905                                  ;----------------------------------------------------------------------------
 22906                                  ;M039: Created
 22907                                  
 22908                                  ; 04/05/2019 - Retro DOS v4.0
 22909                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22910                                  
 22911                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22912                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22913                                  
 22914                                  ;procedure DskRdBufScan,NEAR
 22915                                  ;
 22916                                  ;ASSUME  DS:NOTHING
 22917                                  
 22918                                  DskRdBufScan:
 22919 000038C2 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22920 000038C8 743C                    	je	short bufx		     ; -no, skip all work.
 22921                                  
 22922 000038CA 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22923 000038CF 89DE                    	mov     si,bx
 22924 000038D1 01D1                    	add     cx,dx
 22925 000038D3 83D600                  	adc     si,0
 22926                                  
 22927 000038D6 E8B71E                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22928                                  	;mov	ax,[di+2]
 22929 000038D9 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22930 000038DC 36A3[BB0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22931                                  		
 22932                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22933                                  	;;mov	al,[es:bp+0]
 22934                                  	;mov	al,[es:bp+DPB.DRIVE]
 22935                                  	; 15/12/2022
 22936 000038E0 268A4600                	mov	al,[es:bp]
 22937                                  
 22938                                  ;       BX:DX = Extent start.
 22939                                  ;       SI:CX = Extent end + 1.
 22940                                  ;          AL = Drive #.
 22941                                  ;       DS:DI-> 1st buffer in queue.
 22942                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22943                                  
 22944                                  bufq:	
 22945                                  	;cmp	al,[di+4]
 22946 000038E4 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22947 000038E7 7514                    	jne	short bufq1        	;  -no, jump.
 22948                                  
 22949                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22950                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22951                                  
 22952                                  	;cmp	bx,[di+8]
 22953 000038E9 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22954 000038EC 7503                    	jne	short bufq01
 22955                                  	;cmp	dx,[di+6]
 22956 000038EE 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22957                                  bufq01:
 22958 000038F1 770A                    	ja	short bufq1
 22959                                  
 22960                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22961                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22962                                  
 22963                                  	;cmp	si,[di+8]
 22964 000038F3 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22965 000038F6 7503                    	jne	short bufq02
 22966                                  	;cmp	cx,[di+6]
 22967 000038F8 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22968                                  bufq02:
 22969 000038FB 770A                    	ja	short bufq2
 22970                                  bufq1:	
 22971 000038FD 363B3E[BB0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22972 00003902 8B3D                    	mov	di,[di]
 22973                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22974 00003904 75DE                    	jne	short bufq		; -no, do next buffer
 22975                                  bufx:
 22976 00003906 C3                      	retn				;Exit.
 22977                                  
 22978                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22979                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22980                                  ;       as MRU (Most Recently Used).
 22981                                  
 22982                                  bufq2:	
 22983 00003907 50                      	push	ax
 22984                                  	;test	byte [di+5],40h
 22985 00003908 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22986 0000390C 7428                    	jz	short bufq3                    ; -no, jump.
 22987                                  
 22988                                  ;       SaveReg <cx,dx,si,di,es>
 22989 0000390E 51                      	push	cx
 22990 0000390F 52                      	push	dx
 22991 00003910 56                      	push	si
 22992 00003911 57                      	push	di
 22993 00003912 06                      	push	es
 22994                                  
 22995 00003913 89D0                    	mov     ax,dx
 22996                                  	;sub	ax,[di+6]
 22997 00003915 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22998 00003918 F7D8                    	neg	ax
 22999                                  
 23000                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 23001                                  ;            block. (Note: the upper word of the sector # may be ignored
 23002                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 23003                                  ;            is imposed by the input parameters of the disk read operation.)
 23004                                  
 23005                                  	;lea	si,[di+20]
 23006 0000391A 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 23007                                  	;mov	cx,[es:bp+2]
 23008 0000391D 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 23009 00003921 F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 23010                                  	;mov	di,[ss:TEMP_VAR]
 23011                                  	; 09/02/2024
 23012 00003923 36C43E[0C06]            	les	di,[ss:TEMP_VAR]
 23013 00003928 01C7                    	add	di,ax
 23014                                  	;mov	es,[ss:TEMP_VAR2]
 23015 0000392A D1E9                    	shr	cx,1
 23016                                  
 23017                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 23018                                  ;       DS:SI-> Buffer sector data.
 23019                                  ;       ES:DI-> Destination within Transfer memory block.
 23020                                  
 23021 0000392C F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 23022                                  	;; 04/05/2019
 23023                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 23024                                  	;;rep	movsb                   ;Copy last byte.
 23025                                  	;jnc	short bufq03	
 23026                                  	;movsb
 23027                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23028                                  	;adc	cx,0
 23029                                  	;rep	movsb
 23030                                  	; 22/09/2023
 23031 0000392E 7301                    	jnc	short bufq03
 23032 00003930 A4                      	movsb
 23033                                  bufq03:
 23034                                  	;RestoreReg <es,di,si,dx,cx>
 23035 00003931 07                      	pop	es
 23036 00003932 5F                      	pop	di
 23037 00003933 5E                      	pop	si
 23038 00003934 5A                      	pop	dx
 23039 00003935 59                      	pop	cx
 23040                                  
 23041                                  ;       DS:DI -> current buffer.
 23042                                  bufq3:	
 23043 00003936 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 23044                                          ;invoke SCANPLACE
 23045 00003938 E8671E                  	call	SCANPLACE
 23046 0000393B 363B06[BB0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 23047 00003940 58                      	pop	ax
 23048                                  	;jne	short bufq		; -no, jump.
 23049                                  	;;jmp	short bufx		; -yes, exit.
 23050                                  	;; 12/06/2019
 23051                                  	;retn
 23052                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 23053 00003941 75A1                    	jne	short bufq
 23054                                  	;jmp	short bufx
 23055                                  	; 09/02/2024
 23056 00003943 C3                      	retn	; Exit
 23057                                  
 23058                                  ;EndProc DskRdBufScan
 23059                                  
 23060                                  ;============================================================================
 23061                                  ; DISK3.ASM, MSDOS 6.0, 1991
 23062                                  ;============================================================================
 23063                                  ; 04/05/2019 - Retro DOS v4.0
 23064                                  ; 24/07/2018 - Retro DOS v3.0
 23065                                  
 23066                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 23067                                  ;----------------------------------------------------------------------------
 23068                                  ;
 23069                                  ; Procedure Name : DISKWRITE
 23070                                  ;
 23071                                  ; Inputs:
 23072                                  ;       Outputs of SETUP
 23073                                  ; Function:
 23074                                  ;       Perform disk write
 23075                                  ; Outputs:
 23076                                  ;    Carry clear
 23077                                  ;       CX = No. of bytes written
 23078                                  ;       ES:DI point to SFT
 23079                                  ;       SFT offset and cluster pointers updated
 23080                                  ;    Carry set
 23081                                  ;       CX = 0
 23082                                  ;       ES:DI point to SFT
 23083                                  ;       AX has error code
 23084                                  ;----------------------------------------------------------------------------
 23085                                  
 23086                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 23087                                  
 23088                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 23089                                  
 23090                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23091                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 23092                                  
 23093                                  DISKWRITE:
 23094                                  	; MSDOS 3.3
 23095                                  	; IBMDOS.COM - Offset 436Dh
 23096                                  	;;test	byte [es:di+4],8
 23097                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 23098                                  	;jz	short write_cont
 23099                                  	;jmp	SET_ACC_ERR_DS
 23100                                  ;write_cont:
 23101                                  	;push	cx
 23102                                  	;or	cx,cx
 23103                                  	;jnz	short Not_Truncate
 23104                                  	;;mov	cx,-1
 23105                                  	;dec	cx
 23106                                  ;Not_Truncate:
 23107                                  	;call	LOCK_CHECK
 23108                                  	;pop	cx
 23109                                  	;jnb	short _WRITE_OK
 23110                                  	;call	WRITE_LOCK_VIOLATION
 23111                                  	;jnb	short DISKWRITE
 23112                                  	;retn
 23113                                  
 23114                                  	; MSDOS 6.0
 23115 00003944 E802FD                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 23116                                  	; 19/08/2018
 23117 00003947 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 23118 00003949 C3                      	retn
 23119                                  
 23120                                  WRTEOFJ:
 23121 0000394A E9D101                  	JMP     WRTEOF
 23122                                  
 23123                                  _WRITE_OK:
 23124                                   	; 27/07/2018
 23125                                  	; IBMDOS.COM - Offset 438Eh
 23126                                  	
 23127                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23128                                  	;and	word [es:di+5],0BFBFh
 23129 0000394D 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 23130                                  				; Mark file as dirty, clear no date on close
 23131                                  ; 10/02/2024
 23132                                  %if 0
 23133                                  	; 04/05/2019 - Retro DOS v4.0
 23134                                  
 23135                                  	; MSDOS 6.0
 23136                                  	;mov 	ax,[es:di+11h]
 23137                                  	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 23138                                          MOV	[TEMP_VAR],AX                           ;M039
 23139                                  	;mov	ax,[es:di+13h]
 23140                                  	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 23141                                          MOV	[TEMP_VAR2],AX                          ;M039
 23142                                  %else
 23143                                  	; 10/02/2024 (PCDOS 7.1 IBMDOS COM)
 23144                                  	;les	ax,[es:di+11h]
 23145 00003953 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size]
 23146 00003957 8C06[0E06]              	mov	[TEMP_VAR2],es
 23147 0000395B A3[0C06]                	mov	[TEMP_VAR],ax
 23148                                  %endif
 23149                                  
 23150                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 23151                                  
 23152                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23153 0000395E C42E[8A05]              	LES     BP,[THISDPB]
 23154                                  
 23155 00003962 E80FFE                  	call	BREAKDOWN
 23156                                  
 23157 00003965 A1[CE05]                	MOV     AX,[BYTPOS]
 23158 00003968 8B16[D005]              	MOV     DX,[BYTPOS+2]
 23159 0000396C E3DC                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 23160 0000396E 01C8                    	ADD     AX,CX
 23161 00003970 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 23162                                  
 23163                                  	;mov	bx,[es:bp+2]
 23164 00003973 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 23165                                  
 23166                                  	; MSDOS 3.3
 23167                                  	;cmp	dx,bx
 23168                                  	;jnb	short WRTERR33
 23169                                  	;div	bx
 23170                                  	;mov	bx,ax
 23171                                  	;OR	DX,DX
 23172                                  	;JNZ	short CALCLUS
 23173                                  	;dec	ax
 23174                                  ;CALCLUS:
 23175                                  	; MSDOS 3.3
 23176                                  	;mov	cl,[es:bp+5]
 23177                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 23178                                  	;shr	ax,cl
 23179                                  	;push	ax
 23180                                  	;push	dx
 23181                                  	;push	es
 23182                                  	;les	di,[THISSFT]
 23183                                  	;;mov	ax,[es:di+11h]
 23184                                  	;;mov	dx,[es:di+13h]
 23185                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 23186                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 23187                                  	;pop	es
 23188                                  	;;DX:AX = current file size (in bytes).
 23189                                  	;;div	word [es:bp+2]
 23190                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23191                                  	;mov	cx,ax
 23192                                  	;or	dx,dx
 23193                                  	;jz	short NORND
 23194                                  	;inc	ax
 23195                                  ;NORND:
 23196                                  	; MSDOS 6.0
 23197 00003977 E8D202                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 23198 0000397A 89C6                    	MOV	SI,AX
 23199 0000397C 890E[0706]                      MOV	[HIGH_SECTOR],CX
 23200                                  
 23201                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 23202                                  
 23203 00003980 09D2                    	OR	DX,DX
 23204 00003982 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 23205 00003983 89CA                    	MOV	DX,CX			;M039
 23206 00003985 7506                    	JNZ	short CALCLUS
 23207 00003987 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 23208 0000398A 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 23209                                  
 23210                                  CALCLUS:
 23211                                  	; MSDOS 6.0
 23212 0000398D E8E302                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 23213 00003990 5A                      	POP	DX
 23214                                  
 23215                                  ;       AX = Last cluster to write.
 23216                                  ;       DX = # of bytes in last sector to write (the "tail").
 23217                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 23218                                  
 23219 00003991 50                      	PUSH	AX
 23220 00003992 52                      	PUSH	DX
 23221                                  ;M039
 23222 00003993 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 23223 00003997 A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 23224 0000399A E8AF02                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 23225 0000399D 890E[0E06]              	mov	[TEMP_VAR2],cx
 23226 000039A1 890E[CA05]              	mov	[VALSEC+2],cx
 23227 000039A5 89C1                    	mov	cx,ax
 23228 000039A7 89F3                    	mov	bx,si
 23229                                  
 23230                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 23231                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 23232                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 23233                                  ;                     DX = # of bytes in last sector of current file.
 23234                                  ;M039
 23235 000039A9 09D2                    	OR	DX,DX
 23236 000039AB 7407                    	JZ	short NORND
 23237                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 23238                                  	;ADC	word [VALSEC+2],0
 23239                                  	; 22/09/2023
 23240 000039AD 40                      	inc	ax  ; 0FFFFh -> 0
 23241 000039AE 7504                    	jnz	short NORND
 23242 000039B0 FF06[CA05]              	inc	word [VALSEC+2]
 23243                                  NORND:		
 23244                                  	; MSDOS 3.3 & MSDOS 6.0
 23245 000039B4 A3[C805]                	MOV     [VALSEC],AX
 23246                                  
 23247                                  ;       [VALSEC] = Last sector of current file.
 23248                                  
 23249 000039B7 31C0                    	XOR     AX,AX
 23250 000039B9 A3[DE05]                	MOV     [GROWCNT],AX
 23251 000039BC A3[E005]                	MOV     [GROWCNT+2],AX
 23252 000039BF 58                      	POP     AX
 23253                                  
 23254                                  	; MSDOS 6.0
 23255 000039C0 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 23256 000039C4 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 23257 000039C8 7263                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 23258 000039CA 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 23259 000039CC 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 23260 000039CE 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 23261 000039D2 EB08                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 23262                                  lowsec:
 23263                                  	;MOV	DI,0			;F.C. >32mb
 23264                                  	; 22/09/2023
 23265 000039D4 31FF                    	xor	di,di
 23266                                  	; MSDOS 3.3 & MSDOS 6.0
 23267 000039D6 29CB                    	SUB	BX,CX			; Number of full sectors
 23268 000039D8 7253                    	JB	short NOGROW
 23269 000039DA 7444                    	JZ	short TESTTAIL
 23270                                  yesgrow:
 23271                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23272 000039DC 89D1                    	MOV     CX,DX
 23273 000039DE 93                      	XCHG    AX,BX
 23274                                  	;mul	word [es:bp+2]
 23275 000039DF 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 23276                                  	
 23277                                  	; MSDOS 6.0
 23278 000039E3 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb save dx		;AN000;
 23279 000039E7 A3[0E06]                	MOV	[TEMP_VAR2],AX		;M039; F.C. >32mb save ax	;AN000;
 23280 000039EA 89F8                    	MOV	AX,DI			;F.C. >32mb			;AN000;
 23281                                  	;mul	word [es:bp+2]
 23282 000039EC 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 23283                                  	
 23284 000039F0 0306[0706]              	ADD	AX,[HIGH_SECTOR]	;F.C. >32mb add lower value	;AN000;
 23285 000039F4 89C2                    	MOV	DX,AX			;F.C. >32mb DX:AX is the result of ;AN000;
 23286 000039F6 A1[0E06]                	MOV	AX,[TEMP_VAR2]		;M039; F.C. >32mb a 32 bit multiply ;AN000;
 23287                                  
 23288                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23289 000039F9 29C8                    	SUB     AX,CX			; Take off current "tail"
 23290 000039FB 83DA00                  	SBB     DX,0			; 32-bit extension
 23291 000039FE 01D8                    	ADD     AX,BX			; Add on new "tail"
 23292 00003A00 83D200                  	ADC     DX,0			; ripple tim's head off
 23293 00003A03 EB21                    	JMP     SHORT SETGRW
 23294                                  
 23295                                  HAVSTART:
 23296                                  	;int 3
 23297 00003A05 89C1                    	MOV     CX,AX
 23298 00003A07 E83811                  	call	SKPCLP
 23299                                  	;JCXZ	DOWRTJ
 23300                                  	; 16/12/2022
 23301 00003A0A E353                    	jcxz	DOWRT
 23302                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23303                                  	;jcxz	DOWRTJ
 23304                                  
 23305 00003A0C E8D012                  	call	ALLOCATE
 23306                                  	;JNC	short DOWRTJ
 23307                                  	; 16/12/2022
 23308 00003A0F 734E                    	jnc	short DOWRT
 23309                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23310                                  	;jnc	short DOWRTJ
 23311                                  
 23312                                  	;entry   WRTERR
 23313                                  WRTERR:
 23314 00003A11 B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort	;AN000;
 23315                                  
 23316                                  	;entry WRTERR22
 23317                                  WRTERR22:
 23318 00003A13 A0[7605]                	MOV     AL,[THISDRV]		;MS.				;AN000;
 23319                                  
 23320                                  	; 27/07/2018
 23321                                  WRTERR33:
 23322                                  	;MOV	CX,0			;No bytes transferred
 23323 00003A16 31C9                    	XOR     CX,CX
 23324                                  
 23325 00003A18 C43E[9E05]              	LES     DI,[THISSFT]
 23326                                  	;CLC ; 19/05/2019
 23327                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23328                                  	; 16/12/2022
 23329                                  	;clc
 23330 00003A1C C3                      	retn
 23331                                  
 23332                                  	; 16/12/2022
 23333                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23334                                  ;DOWRTJ:
 23335                                  	;JMP	short DOWRT
 23336                                  
 23337                                  ACC_ERRWJ:
 23338                                  	; 10/08/2018
 23339                                  	;JMP	SET_ACC_ERRW
 23340                                  	; 16/12/2022
 23341                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 23342                                  	; 10/02/2024
 23343                                  	; ds=ss
 23344 00003A1D E9E2FD                  	jmp	SET_ACC_ERR
 23345                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23346                                  	;;jmp	SET_ACC_ERRW	
 23347                                  
 23348                                  TESTTAIL:
 23349 00003A20 29D0                    	SUB     AX,DX
 23350 00003A22 7609                    	JBE	short NOGROW
 23351 00003A24 31D2                    	XOR     DX,DX
 23352                                  SETGRW:
 23353 00003A26 A3[DE05]                	MOV	[GROWCNT],AX
 23354 00003A29 8916[E005]              	MOV	[GROWCNT+2],DX
 23355                                  NOGROW:
 23356 00003A2D 58                      	POP     AX
 23357                                  
 23358                                  ; 10/02/2024
 23359                                  %if 0
 23360                                  	MOV     CX,[CLUSNUM] ; *+ ; First cluster accessed
 23361                                  	call	FNDCLUS
 23362                                  %else
 23363                                  	; 10/02/2024 - Retro DOS v4.1
 23364 00003A2E E8ED10                  	call	FNDCLUS_X ; *+
 23365                                  %endif
 23366 00003A31 72EA                    	JC	short ACC_ERRWJ ; ds=ss ; 10/02/2024
 23367                                  
 23368 00003A33 891E[BC05]              	MOV     [CLUSNUM],BX
 23369 00003A37 8916[BA05]              	MOV     [LASTPOS],DX
 23370                                  
 23371 00003A3B 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 23372 00003A3D 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 23373 00003A3F E3C4                    	JCXZ    HAVSTART        ; See if no more data
 23374 00003A41 51                      	PUSH    CX              ; No. of clusters short of first
 23375 00003A42 89C1                    	MOV     CX,AX
 23376 00003A44 E89812                  	call	ALLOCATE
 23377 00003A47 59                      	POP     CX
 23378 00003A48 72C7                    	JC	short WRTERR
 23379 00003A4A 8B16[BA05]              	MOV     DX,[LASTPOS]
 23380 00003A4E 42                      	INC     DX
 23381 00003A4F 49                      	DEC     CX
 23382 00003A50 7405                    	JZ	short NOSKIP
 23383 00003A52 E8ED10                  	call	SKPCLP
 23384 00003A55 72C6                    	JC	short ACC_ERRWJ ; ds=ss ; 10/02/2024
 23385                                  NOSKIP:
 23386 00003A57 891E[BC05]              	MOV     [CLUSNUM],BX
 23387 00003A5B 8916[BA05]              	MOV     [LASTPOS],DX
 23388                                  DOWRT:
 23389 00003A5F 833E[D205]00            	CMP     word [BYTCNT1],0
 23390 00003A64 7405                    	JZ	short WRTMID
 23391                                  	; 09/02/2024
 23392                                  	;MOV	BX,[CLUSNUM]	 ; (not used in 'BUFWRT') ; 09/02/2024
 23393 00003A66 E86811                  	call	BUFWRT
 23394 00003A69 72B2                    	JC	short ACC_ERRWJ
 23395                                  WRTMID:
 23396 00003A6B A1[D605]                	MOV     AX,[SECCNT]
 23397 00003A6E 09C0                    	OR      AX,AX
 23398                                  	; 20/11/2022
 23399 00003A70 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 23400 00003A72 0106[C405]              	ADD     [SECPOS],AX
 23401                                  	; 19/05/2019
 23402                                  	; MSDOS 6.0
 23403 00003A76 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 23404 00003A7B E8AE11                  	call	NEXTSEC
 23405                                  	; 16/12/2022
 23406 00003A7E 729D                    	JC	short ACC_ERRWJ
 23407                                  	;JC	short SET_ACC_ERRW	;M039
 23408 00003A80 C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 23409 00003A85 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 23410 00003A89 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 23411 00003A8D 8B0E[D605]              	MOV     CX,[SECCNT]
 23412                                  WRTLP:
 23413 00003A91 E8C911                  	call	OPTIMIZE
 23414 00003A94 7248                    	JC	short SET_ACC_ERRW
 23415                                  	; 16/12/2022
 23416                                  	;JC	short ACC_ERRWJ
 23417                                  
 23418                                  ;M039
 23419                                  ;       DI = Next physical cluster.
 23420                                  ;       AX = # sectors remaining.
 23421                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 23422                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23423                                  ;	     sectors, also termed an "Extent".)
 23424                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23425                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23426                                  ;
 23427                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23428                                  ;	are in Extent; they are being over-written.
 23429                                  
 23430 00003A96 57                      	push    di
 23431 00003A97 50                      	push    ax
 23432                                  
 23433                                  	; MSDOS 3.3
 23434                                  	; IBMDOS.COM (1987) - Offset 4497h
 23435                                  	;push	dx
 23436                                  	;push	bx
 23437                                  	;mov	al,[es:bp]
 23438                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 23439                                  	;mov	bx,cx
 23440                                  	;add	bx,dx	; (bx = Extent end)
 23441                                  
 23442                                  ;	DX = Extent start.
 23443                                  ;	BX = Extent end.
 23444                                  ;	AL = Drive #.
 23445                                  
 23446                                  	;call	SETVISIT
 23447                                  
 23448                                  ;wbufq1:
 23449                                  	;;or	byte [di+5],20h
 23450                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 23451                                  	;;cmp	al,[di+4]	
 23452                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 23453                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 23454                                  	;;cmp	[di+6],dx
 23455                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 23456                                  	;jb	short wbufq2
 23457                                  	;;cmp	[di+6],bx
 23458                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 23459                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 23460                                  
 23461                                  	;; Buffer sector is in the Extent
 23462                                  
 23463                                  	;;mov	word [di+4],20FFh
 23464                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 23465                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 23466                                  	;				; .buf_flags, AH = 0, reset/clear
 23467                                  	;call	SCANPLACE
 23468                                  ;wbufq2:
 23469                                  	;call	SKIPVISIT
 23470                                  	;jnz	short wbufq1
 23471                                  	;pop	bx
 23472                                  	;pop	dx
 23473                                  
 23474                                          ; MSDOS 6.0
 23475 00003A98 E82B01                  	call	DskWrtBufPurge		;DS trashed.
 23476                                  
 23477                                  ;ASSUME DS:NOTHING
 23478                                  ;M039
 23479                                  	; MSDOS 3.3 & MSDOS 6.0
 23480                                  ;hkn; SS override for DMAADD and ALLOWED
 23481 00003A9B 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 23482                                  	;mov	byte [ss:ALLOWED],38h
 23483 00003AA0 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 23484                                  
 23485                                  ;	put logic from DWRITE in-line here so we can modify it
 23486                                  ;	for DISK FULL conditions.
 23487                                  
 23488                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23489                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 23490                                  
 23491                                  	; 16/12/2022
 23492                                  	; MSDOS 3.3 (& MSDOS 5.0)
 23493                                  	;call	DWRITE
 23494                                  
 23495                                  ;DWRITE_OKAY:
 23496                                  
 23497                                  	; 16/12/2022
 23498                                  	; MSDOS 5.0 (& MSDOS 3.3)
 23499                                  	;pop	cx
 23500                                  	;pop	bx
 23501                                  	;push	ss
 23502                                  	;pop	ds
 23503                                  	;jc	short SET_ACC_ERRW
 23504                                  	;jcxz	WRTLAST
 23505                                  	;mov	dl,0
 23506                                  	;inc	word [LASTPOS]
 23507                                  	;jmp	short WRTLP
 23508                                  
 23509                                  	; 16/12/2022
 23510                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23511                                  DWRITE_LUP:
 23512                                  	; 23/07/2019 - Retro DOS v3.2
 23513                                  
 23514                                  	; MSDOS 6.0
 23515 00003AA6 E8F9FB                  	call	DSKWRITE
 23516 00003AA9 7417                    	jz	short DWRITE_OKAY
 23517                                  
 23518                                  ;;	int	3
 23519                                  
 23520 00003AAB 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 23521 00003AAD 7423                    	jz	short DWRITE_DISK_FULL
 23522                                  
 23523                                  	; 16/12/2022
 23524                                  
 23525                                  ;;hkn; SS override
 23526 00003AAF 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 23527 00003AB5 E819FC                  	call	HARDERRRW
 23528 00003AB8 3C01                    	CMP	AL,1		; Check for retry
 23529 00003ABA 74EA                    	JZ	short DWRITE_LUP
 23530                                  
 23531                                  	; 16/12/2022
 23532                                  	; 23/07/2019
 23533                                  	;POP	CX ; *4*
 23534                                  	;POP	BX ; *5*
 23535                                  	;
 23536                                  	;push	ss
 23537                                  	;pop	ds
 23538                                  	;
 23539                                  
 23540                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23541                                  
 23542                                  	; 16/12/2022
 23543 00003ABC 3C03                    	CMP	AL,3		; Check for FAIL
 23544 00003ABE F8                      	CLC
 23545 00003ABF 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 23546 00003AC1 F9                      	STC
 23547                                  
 23548                                  DWRITE_OKAY:
 23549                                  	; 16/12/2022
 23550                                  	; 23/07/2019
 23551                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23552 00003AC2 59                      	POP	CX ; *4*
 23553 00003AC3 5B                      	POP	BX ; *5*
 23554                                  
 23555                                  ;       CX = # sectors remaining.
 23556                                  ;       BX = Next physical cluster.
 23557                                  
 23558                                  ;hkn; SS override
 23559                                          ;Context DS
 23560                                  	; 16/12/2022
 23561                                  	;push	ss
 23562                                  	;pop	ds
 23563                                  
 23564                                  	; 10/02/2024
 23565                                  	; 16/12/2022
 23566                                  	;jc	short SET_ACC_ERRW
 23567                                  
 23568                                  	; 16/12/2022
 23569 00003AC4 16                      	push	ss
 23570 00003AC5 1F                      	pop	ds
 23571                                  
 23572                                  	; 10/02/2024
 23573 00003AC6 7216                    	jc	short SET_ACC_ERRW
 23574                                  
 23575 00003AC8 E317                    	JCXZ    WRTLAST
 23576                                  
 23577                                  	; 10/02/2024
 23578 00003ACA B200                    	MOV	DL,0
 23579                                  	;xor	dl,dl ; 23/07/2019
 23580 00003ACC FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 23581 00003AD0 EBBF                    	JMP     short WRTLP
 23582                                  
 23583                                  	; 23/07/2019 - Retro DOS v3.2
 23584                                  	; 09/08/2018
 23585                                  	; MSDOS 6.0
 23586                                  DWRITE_DISK_FULL:
 23587                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 23588                                  	; 16/12/2022
 23589 00003AD2 16                      	push	ss
 23590 00003AD3 1F                      	pop	ds
 23591 00003AD4 59                      	pop	cx		; unjunk stack
 23592 00003AD5 5B                      	pop	bx
 23593 00003AD6 C606[0B06]01            	mov	byte [DISK_FULL],1
 23594                                  	;stc
 23595 00003ADB E933FF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 23596                                  
 23597                                  	; 16/12/2022
 23598                                  SET_ACC_ERRW:
 23599                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 23600                                  	; 10/02/2024
 23601                                  	; ds=ss
 23602 00003ADE E921FD                  	jmp	SET_ACC_ERR
 23603                                  
 23604                                  WRTLAST:
 23605 00003AE1 A1[D405]                	MOV     AX,[BYTCNT2]
 23606 00003AE4 09C0                    	OR      AX,AX
 23607 00003AE6 7413                    	JZ	short FINWRT
 23608 00003AE8 A3[D205]                	MOV     [BYTCNT1],AX
 23609 00003AEB E83E11                  	call	NEXTSEC
 23610 00003AEE 72EE                    	JC	short SET_ACC_ERRW
 23611 00003AF0 C706[CC05]0000          	MOV     word [BYTSECPOS],0
 23612 00003AF6 E8D810                  	call	BUFWRT
 23613 00003AF9 72E3                    	JC	short SET_ACC_ERRW
 23614                                  FINWRT:
 23615 00003AFB C43E[9E05]              	LES     DI,[THISSFT]
 23616 00003AFF A1[DE05]                	MOV     AX,[GROWCNT]
 23617 00003B02 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 23618 00003B06 09C0                    	OR      AX,AX
 23619 00003B08 7502                    	JNZ	short UPDATE_size
 23620 00003B0A E30F                    	JCXZ    SAMSIZ
 23621                                  UPDATE_size:
 23622                                  	;add	[es:di+11h],ax
 23623 00003B0C 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 23624                                  	;adc	[es:di+13h],cx
 23625 00003B10 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 23626                                  
 23627                                  ; Make sure that all other SFT's see this growth also.
 23628                                  
 23629 00003B14 B80100                  	MOV     AX,1
 23630                                  ;if installed
 23631                                  	;Call	JShare + 14 * 4
 23632 00003B17 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23633                                  ;else
 23634                                  ;	Call    ShSU
 23635                                  ;endif
 23636                                  
 23637                                  SAMSIZ:
 23638 00003B1B E97AFD                  	jmp	SETCLUS	; ES:DI already points to SFT
 23639                                  
 23640                                  	; 16/12/2022
 23641                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23642                                  ;SET_ACC_ERRW:
 23643                                  	;jmp	SET_ACC_ERR_DS
 23644                                  
 23645                                  WRTEOF:
 23646 00003B1E 89C1                    	MOV     CX,AX
 23647 00003B20 09D1                    	OR      CX,DX
 23648 00003B22 746A                    	JZ	short KILLFIL
 23649 00003B24 83E801                  	SUB     AX,1
 23650 00003B27 83DA00                  	SBB     DX,0
 23651                                  
 23652                                  	; MSDOS 3.3
 23653                                  	;;div	word [es:bp+2]
 23654                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23655                                  	;;mov	cl,[es:bp+5]
 23656                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23657                                  	;shr	ax,cl
 23658                                  
 23659                                  	; MSDOS 6.0
 23660 00003B2A 53                      	PUSH	BX
 23661                                  	;mov	bx,[es:bp+2]
 23662 00003B2B 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 23663 00003B2F E81A01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 23664 00003B32 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 23665 00003B33 89CA                    	MOV	DX,CX			      ;M039
 23666 00003B35 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 23667 00003B39 E83701                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 23668                                  
 23669 00003B3C 89C1                    	MOV     CX,AX
 23670 00003B3E E8E10F                  	call	FNDCLUS
 23671                                  SET_ACC_ERRWJ2:
 23672 00003B41 729B                    	JC	short SET_ACC_ERRW
 23673                                  
 23674 00003B43 E324                    	JCXZ    RELFILE
 23675 00003B45 E89711                  	call	ALLOCATE
 23676                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 23677                                  	; 16/12/2022
 23678 00003B48 7303                    	jnc	short UPDATE
 23679 00003B4A E9C4FE                  	JMP	WRTERR
 23680                                  UPDATE:
 23681 00003B4D C43E[9E05]              	LES	DI,[THISSFT]
 23682 00003B51 A1[CE05]                	MOV	AX,[BYTPOS]
 23683                                  	;mov	[es:di+11h],ax
 23684 00003B54 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 23685 00003B58 A1[D005]                	MOV	AX,[BYTPOS+2]
 23686                                  	;mov	[es:di+13h],ax
 23687 00003B5B 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 23688                                  ;
 23689                                  ; Make sure that all other SFT's see this growth also.
 23690                                  ;
 23691 00003B5F B80200                  	MOV     AX,2
 23692                                  ;if installed
 23693                                  	;Call	JShare + 14 * 4
 23694 00003B62 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23695                                  ;else
 23696                                  ;	Call    ShSU
 23697                                  ;endif
 23698 00003B66 31C9                    	XOR     CX,CX ; 0
 23699                                  	;jmp	ADDREC
 23700                                  	; 08/02/2024
 23701 00003B68 C3                      	retn
 23702                                  
 23703                                  	; 16/12/2022
 23704                                  ;WRTERRJ: 
 23705                                  	;JMP	WRTERR
 23706                                  
 23707                                  ;;;;;;;;;;;;;;;; 7/18/86
 23708                                  ;;;;;;;;;;;;;;;;
 23709                                  
 23710                                  RELFILE:
 23711                                  	; MSDOS 6.0
 23712 00003B69 06                      	PUSH	ES			;AN002; BL Reset Lstclus and cluspos to
 23713 00003B6A C43E[9E05]              	LES	DI,[THISSFT]		;AN002; BL beginning of file if current
 23714                                  	;cmp	dx,[es:di+19h]
 23715 00003B6E 263B5519                	CMP	DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 23716 00003B72 730E                    	JAE	short SKIPRESET			;AN002; BL
 23717                                  	;mov	[es:di+19h],0
 23718 00003B74 26C745190000            	MOV	word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 23719                                  	;mov	dx,[es:di+0Bh]
 23720 00003B7A 268B550B                	MOV	DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 23721                                  	;mov	[es:di+35h],dx
 23722 00003B7E 26895535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 23723                                  SKIPRESET:					;AN002; BL
 23724 00003B82 07                      	POP	ES                    		;AN002; BL
 23725                                  ;
 23726 00003B83 BAFFFF                  	MOV	DX,0FFFFH
 23727 00003B86 E80412                  	call	RELBLKS
 23728                                  	; 16/12/2022
 23729                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23730 00003B89 73C2                    	jnc	short UPDATE
 23731                                  SET_ACC_ERRWJ:
 23732                                  	;JC	short SET_ACC_ERRWJ2
 23733                                  	;JMP	SHORT UPDATE
 23734                                  	; 16/12/2022
 23735                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss
 23736                                  	; 10/02/2024
 23737                                  	; ds=ss
 23738 00003B8B E974FC                  	jmp	SET_ACC_ERR
 23739                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23740                                  	;JC	short SET_ACC_ERRWJ2
 23741                                  	;JMP	SHORT UPDATE
 23742                                  
 23743                                  KILLFIL:
 23744 00003B8E 31DB                    	XOR	BX,BX
 23745 00003B90 06                      	PUSH	ES
 23746 00003B91 C43E[9E05]              	LES	DI,[THISSFT]
 23747                                  	;mov	[es:di+19h],bx
 23748 00003B95 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 23749                                  	;mov	[es:di+35h],bx ; 04/05/2019
 23750 00003B99 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 23751                                  	;xchg	bx,[es:di+0Bh]
 23752 00003B9D 26875D0B                	XCHG	BX,[ES:DI+SF_ENTRY.sf_firclus]
 23753 00003BA1 07                      	POP	ES
 23754                                  
 23755 00003BA2 09DB                    	OR	BX,BX
 23756                                  	;JZ	short UPDATEJ
 23757                                  	; 16/12/2022
 23758 00003BA4 74A7                    	jz	short UPDATE
 23759                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23760                                  	;jz	short UPDATEJ
 23761                                  
 23762                                  ;; 10/23/86 FastOpen update
 23763 00003BA6 06                      	PUSH	ES			; since first cluster # is 0
 23764 00003BA7 55                      	PUSH	BP			; we must delete the old cache entry
 23765 00003BA8 50                      	PUSH	AX
 23766 00003BA9 51                      	PUSH	CX
 23767 00003BAA 52                      	PUSH	DX
 23768 00003BAB C42E[8A05]              	LES	BP,[THISDPB]		; get current DPB
 23769                                  	; 15/12/2022
 23770 00003BAF 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 23771                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23772                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 23773 00003BB3 89D9                    	MOV	CX,BX			; first cluster #
 23774 00003BB5 B402                    	MOV	AH,2			; delete cache entry by drive:firclus
 23775 00003BB7 E8AEEA                  	call	FastOpen_Update		; call fastopen
 23776 00003BBA 5A                      	POP	DX
 23777 00003BBB 59                      	POP	CX
 23778 00003BBC 58                      	POP	AX
 23779 00003BBD 5D                      	POP	BP
 23780 00003BBE 07                      	POP	ES
 23781                                  ;; 10/23/86 FastOpen update
 23782                                  
 23783 00003BBF E8C911                  	call	RELEASE
 23784 00003BC2 72C7                    	JC	short SET_ACC_ERRWJ
 23785                                  UPDATEJ:
 23786                                  	; 20/11/2022
 23787 00003BC4 EB87                    	JMP	short UPDATE ; 10/08/2018
 23788                                  
 23789                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 23790                                  ;----------------------------------------------------------------------------
 23791                                  ;
 23792                                  ; Procedure Name : DskWrtBufPurge
 23793                                  ;
 23794                                  ; Inputs:
 23795                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23796                                  ;	     sectors, also termed an "Extent".)
 23797                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23798                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23799                                  ;
 23800                                  ; Function:
 23801                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23802                                  ;	are in Extent; they are being over-written.
 23803                                  ;
 23804                                  ; Outputs:
 23805                                  ;       (Same as Input.)
 23806                                  ; Uses:
 23807                                  ;       All registers except DS,AX,SI,DI preserved.
 23808                                  ;       SS override for all global variables.
 23809                                  ;----------------------------------------------------------------------------
 23810                                  ;M039: Created
 23811                                  
 23812                                  ;procedure   DskWrtBufPurge,NEAR
 23813                                  ;
 23814                                  ;ASSUME  DS:NOTHING
 23815                                  
 23816                                  ; 04/05/2019 - Retro DOS v4.0
 23817                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 23818                                  
 23819                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23820                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 23821                                  
 23822                                  DskWrtBufPurge:
 23823                                  	;SaveReg <bx,cx>
 23824 00003BC6 53                      	push	bx
 23825 00003BC7 51                      	push	cx
 23826                                  
 23827 00003BC8 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 23828 00003BCD 89DE                    	mov	si,bx
 23829 00003BCF 01D1                    	add	cx,dx
 23830 00003BD1 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 23831                                  
 23832                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23833                                  	;;mov	al,[es:bp+0]
 23834                                  	;mov	al,[es:bp+DPB.DRIVE]
 23835                                  	; 15/12/2022
 23836 00003BD4 268A4600                	mov	al,[es:bp]
 23837                                  
 23838                                  ;	BX:DX = Extent start.
 23839                                  ;	SI:CX = Extent end + 1.
 23840                                  ;	AL = Drive #
 23841                                  
 23842 00003BD8 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 23843 00003BDE 7431                    	je	short nosc		; -no, jump.
 23844                                  
 23845                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 23846                                  ;	invalidate the entire SC. (This is an optimization; we really only
 23847                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 23848                                  
 23849 00003BE0 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 23850 00003BE5 752A                    	jne	short nosc		; -no, jump.
 23851                                  
 23852 00003BE7 50                      	push    ax
 23853 00003BE8 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 23854 00003BEC 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 23855                                  
 23856                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 23857                                  	;jbe	short sc5		; -yes, jump.
 23858                                  
 23859 00003BF1 39FE                    	cmp	si,di
 23860 00003BF3 7502                    	jne	short sc01
 23861 00003BF5 39C1                    	cmp	cx,ax
 23862                                  sc01: 
 23863 00003BF7 7617                    	jbe	short sc5
 23864                                  
 23865 00003BF9 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 23866 00003BFE 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 23867                                  	
 23868                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 23869                                  	;jae	short sc5		; -yes, jump.
 23870                                  
 23871 00003C01 39FB                    	cmp	bx,di
 23872 00003C03 7502                    	jne	short sc02
 23873 00003C05 39C2                    	cmp	dx,ax
 23874                                  sc02:
 23875 00003C07 7307                    	jnb	short sc5
 23876                                  
 23877 00003C09 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 23878                                  sc5:	
 23879 00003C10 58                      	pop     ax
 23880                                  
 23881                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23882                                  ;	written.
 23883                                  
 23884                                  nosc:	
 23885 00003C11 E87C1B                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23886                                  
 23887                                  _bufq:	
 23888                                  	;cmpo	al,[di+4]
 23889 00003C14 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23890 00003C17 7527                    	jne	short bufq5		; -no, jump.
 23891                                  
 23892                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23893                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23894                                  
 23895                                  	;cmp	bx,[di+8]
 23896 00003C19 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23897 00003C1C 7503                    	jne	short bufq04
 23898                                  	;cmp	dx,[di+6]
 23899 00003C1E 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23900                                  bufq04:
 23901 00003C21 771D                    	ja	short bufq5
 23902                                  
 23903                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23904                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23905                                  
 23906                                  	;cmp	si,[di+8]
 23907 00003C23 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23908 00003C26 7503                    	jne	short bufq05
 23909                                  	;cmp	cx,[di+6]
 23910 00003C28 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23911                                  bufq05:
 23912 00003C2B 7613                    	jbe	short bufq5
 23913                                  
 23914                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23915                                  
 23916                                  	;test	byte [di+5],40h
 23917 00003C2D F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23918 00003C31 7403                    	jz	short bufq4		; -no, jump.
 23919 00003C33 E8D81D                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23920                                  bufq4:
 23921                                  	;mov	word [di+4],20FFh
 23922 00003C36 C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23923                                  
 23924 00003C3B E8641B                  	call	SCANPLACE
 23925 00003C3E EB02                    	jmp     short bufq6
 23926                                  bufq5: 
 23927 00003C40 8B3D                    	mov     di,[di]
 23928                                  	;mov	di,[di+BUFFINFO.buf_next]
 23929                                  bufq6: 
 23930 00003C42 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23931 00003C47 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23932                                  	
 23933                                  	;RestoreReg <cx,bx>
 23934 00003C49 59                      	pop	cx
 23935 00003C4A 5B                      	pop	bx
 23936 00003C4B C3                      	retn
 23937                                  
 23938                                  ;EndProc DskWrtBufPurge
 23939                                  
 23940                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23941                                  ;----------------------------------------------------------------------------
 23942                                  ;
 23943                                  ; Procedure Name : DIV32
 23944                                  ;
 23945                                  ; Inputs:
 23946                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23947                                  ; Function:
 23948                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23949                                  ; Outputs:
 23950                                  ;       CX:AX = quotient , DX= remainder
 23951                                  ; Uses:
 23952                                  ;       All registers except AX,CX,DX preserved.
 23953                                  ;----------------------------------------------------------------------------
 23954                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23955                                  
 23956                                  ; 04/05/2019 - Retro DOS v4.0
 23957                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23958                                  
 23959                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23960                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23961                                  
 23962                                  DIV32:
 23963 00003C4C 81FB0002                	cmp	bx,512
 23964 00003C50 7515                    	jne	short div5
 23965                                  
 23966 00003C52 89D1                    	mov	cx,dx
 23967 00003C54 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23968 00003C56 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23969 00003C5A 88E0                    	mov	al,ah
 23970 00003C5C 88CC                    	mov	ah,cl
 23971 00003C5E 88E9                    	mov	cl,ch
 23972 00003C60 30ED                    	xor	ch,ch
 23973 00003C62 D1E9                    	shr	cx,1
 23974 00003C64 D1D8                    	rcr	ax,1
 23975 00003C66 C3                      	retn
 23976                                  div5:	
 23977 00003C67 89C1                    	mov	cx,ax
 23978 00003C69 89D0                    	mov	ax,dx
 23979 00003C6B 31D2                    	xor	dx,dx
 23980 00003C6D F7F3                    	div	bx              ; 0:AX/BX
 23981 00003C6F 91                      	xchg	cx,ax
 23982 00003C70 F7F3                    	div	bx              ; DX:AX/BX
 23983 00003C72 C3                      	retn
 23984                                  
 23985                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23986                                  ;----------------------------------------------------------------------------
 23987                                  ;
 23988                                  ; Procedure Name : SHR32
 23989                                  ;
 23990                                  ; Inputs:
 23991                                  ;	DX:AX = 32 bit sector number
 23992                                  ; Function:
 23993                                  ;       Perform 32 bit shift right
 23994                                  ; Outputs:
 23995                                  ;	AX = cluster number
 23996                                  ;	ZF = 1 if no error
 23997                                  ;	   = 0 if error (cluster number > 64k)
 23998                                  ; Uses:
 23999                                  ;       DX,CX
 24000                                  ;---------------------------------------------------------------------------
 24001                                  ; M017	- SHR32 rewritten for better performance
 24002                                  ; M039	- Additional optimization
 24003                                  
 24004                                  ; 04/05/2019 - Retro DOS v4.0
 24005                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 24006                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24007                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS)
 24008                                  SHR32:
 24009                                  	;mov	cl,[es:bp+5]
 24010 00003C73 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 24011 00003C77 30ED                    	xor	ch,ch	    ;ZF=1
 24012 00003C79 E306                    	jcxz	norota
 24013                                  
 24014                                  rotashft2:
 24015 00003C7B D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 24016 00003C7D D1D8                    	rcr	ax,1	    ;ZF not affected.
 24017 00003C7F E2FA                    	loop	rotashft2
 24018                                  norota:
 24019 00003C81 C3                      	retn
 24020                                  
 24021                                  ;============================================================================
 24022                                  ; DIR.ASM, MSDOS 6.0, 1991
 24023                                  ;============================================================================
 24024                                  ; 27/07/2018 - Retro DOS v3.0
 24025                                  ; 19/05/2019 - Retro DOS v4.0
 24026                                  
 24027                                  ;	TITLE	DIR - Directory and path cracking
 24028                                  ;	NAME	Dir
 24029                                  
 24030                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 24031                                  ;---------------------------------------------------------------------------
 24032                                  ;
 24033                                  ; Procedure Name : FINDENTRY,SEARCH
 24034                                  ;
 24035                                  ; Inputs:
 24036                                  ;	[THISDPB] set
 24037                                  ;	[SECCLUSPOS] = 0
 24038                                  ;	[DIRSEC] = Starting directory sector number
 24039                                  ;	[CLUSNUM] = Next cluster of directory
 24040                                  ;	[CLUSFAC] = Sectors/Cluster
 24041                                  ;	[NAME1] = Name to look for
 24042                                  ; Function:
 24043                                  ;	Find file name in disk directory.
 24044                                  ;	"?" matches any character.
 24045                                  ; Outputs:
 24046                                  ;	Carry set if name not found
 24047                                  ;	ELSE
 24048                                  ;	Zero set if attributes match (always except when creating)
 24049                                  ;	AH = Device ID (bit 7 set if not disk)
 24050                                  ;	[THISDPB] = Base of drive parameters
 24051                                  ;	DS = DOSGROUP
 24052                                  ;	ES = DOSGROUP
 24053                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 24054                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 24055                                  ;	[CURBUF] has directory record with match
 24056                                  ;	[NAME1] has file name
 24057                                  ;	[LASTENT] is entry number of the entry
 24058                                  ; All other registers destroyed.
 24059                                  ;----------------------------------------------------------------------------
 24060                                  
 24061                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 24062                                  ;hkn; this point.
 24063                                  
 24064                                  SEARCH:
 24065                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24066                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 24067                                  
 24068                                  	; 19/05/2019 - Retro DOS v4.0
 24069                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 24070                                  
 24071                                  	; 27/07/2018 - Retro DOS v3.0
 24072                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 24073                                  	; 15/03/2018 - Retro DOS v2.0
 24074                                  
 24075                                  	; 24/01/2024
 24076                                  
 24077                                  	;entry	FindEntry
 24078                                  FINDENTRY:
 24079 00003C82 E80C04                  	call	STARTSRCH
 24080 00003C85 A0[6B05]                	MOV	AL,[ATTRIB]
 24081                                  	;and	al,9Eh
 24082 00003C88 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 24083                                  	;cmp	al,8
 24084 00003C8A 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 24085 00003C8C 7503                    	JNZ	short NOTVOLSRCH	; No
 24086 00003C8E E86601                  	CALL	SETROOTSRCH		; Yes force search of root
 24087                                  NOTVOLSRCH:
 24088 00003C91 E8F800                  	CALL	GETENTRY
 24089                                  	;JNC	short SRCH
 24090                                  	;JMP	SETESRET
 24091                                  	; 24/01/2024
 24092 00003C94 723F                    	jc	short SETESRET
 24093                                  
 24094                                  	;entry	Srch
 24095                                  SRCH:
 24096 00003C96 1E                      	PUSH	DS
 24097 00003C97 8E1E[E405]              	MOV	DS,[CURBUF+2]
 24098                                  
 24099                                  ;	(DS:BX) = directory entry address
 24100                                  
 24101 00003C9B 8A27                    	mov	ah,[BX]
 24102                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 24103 00003C9D 08E4                    	OR	AH,AH			; End of directory?
 24104 00003C9F 7437                    	JZ	short FREE
 24105                                  
 24106                                  ;hkn; SS override
 24107 00003CA1 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 24108 00003CA6 7430                    	JZ	short FREE
 24109                                  	;test	byte [bx+0Bh],8
 24110 00003CA8 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 24111                                  					; Volume ID file?
 24112 00003CAC 7405                    	JZ	short CHKFNAM 		; NO
 24113                                  
 24114                                  ;hkn; SS override
 24115 00003CAE 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 24116                                  CHKFNAM:
 24117                                  ;	Context ES
 24118 00003CB3 8CD6                    	MOV	SI,SS
 24119 00003CB5 8EC6                    	MOV	ES,SI
 24120 00003CB7 89DE                    	MOV	SI,BX
 24121                                  
 24122                                  ;hkn; NAME1 is in DOSDATA
 24123 00003CB9 BF[4B05]                	MOV	DI,NAME1
 24124                                  ;;;;; 7/29/86
 24125                                  
 24126                                  ;hkn; SS override for NAME1
 24127                                  	;CMP	BYTE [SS:NAME1],0E5H	; special char check
 24128                                  	;JNZ	short NO_E5
 24129                                  	;MOV	BYTE [SS:NAME1],05H
 24130                                  	; 22/09/2023
 24131 00003CBC 26803DE5                	cmp	byte [es:di],0E5h
 24132 00003CC0 7504                    	jnz	short NO_E5
 24133 00003CC2 26C60505                	mov	byte [es:di],05h
 24134                                  NO_E5:
 24135                                  ;;;;; 7/29/86
 24136 00003CC6 E86100                  	CALL	MetaCompare
 24137 00003CC9 7429                    	JZ	short FOUND
 24138 00003CCB 1F                      	POP	DS
 24139                                  
 24140                                  	;entry	NEXTENT
 24141                                  NEXTENT:
 24142 00003CCC C42E[8A05]              	LES	BP,[THISDPB]
 24143 00003CD0 E86600                  	CALL	NEXTENTRY
 24144 00003CD3 73C1                    	JNC	short SRCH
 24145                                  	;JMP	SHORT SETESRET
 24146                                  	; 24/01/2024
 24147                                  SETESRET:
 24148 00003CD5 16                      	PUSH	SS
 24149 00003CD6 07                      	POP	ES
 24150 00003CD7 C3                      	retn
 24151                                  FREE:
 24152 00003CD8 1F                      	POP	DS
 24153 00003CD9 8B0E[4803]              	MOV	CX,[LASTENT]
 24154 00003CDD 3B0E[D805]              	CMP	CX,[ENTFREE]
 24155 00003CE1 7304                    	JAE	short TSTALL
 24156 00003CE3 890E[D805]              	MOV	[ENTFREE],CX
 24157                                  TSTALL:
 24158 00003CE7 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 24159                                  NEXTENTJ:
 24160 00003CEB 74DF                    	je	short NEXTENT 		; No - continue search
 24161 00003CED 890E[DA05]              	MOV	[ENTLAST],CX
 24162 00003CF1 F9                      	STC
 24163 00003CF2 EBE1                    	JMP	SHORT SETESRET
 24164                                  
 24165                                  FOUND:
 24166                                  ; We have a file with a matching name. We must now consider the attributes:
 24167                                  ; ATTRIB	Action
 24168                                  ; ------	------
 24169                                  ; Volume_ID	Is Volume_ID in test?
 24170                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 24171                                  ;		If create then Is ATTRIB equal to test?
 24172                                  
 24173 00003CF4 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 24174 00003CF6 1F                      	POP	DS
 24175 00003CF7 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 24176                                  	;and	ah,9Eh
 24177 00003CFB 80E4DE                  	AND	AH,~attr_ignore
 24178                                  	;lea	si,[si+15]
 24179 00003CFE 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 24180                                  					; point to first cluster field
 24181                                  	;test	ch,8
 24182 00003D01 F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 24183 00003D04 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 24184                                  	;test	ah,8
 24185 00003D06 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 24186                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 24187                                  	; 16/12/2022
 24188 00003D09 74C1                    	jz	short NEXTENT ; 19/05/2019
 24189                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24190                                  	;JZ	short NEXTENTJ
 24191 00003D0B 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 24192 00003D0D EB11                    	JMP	SHORT RETFF		; Found Volume ID
 24193                                  check_one_volume_id:
 24194                                  	;CMP	ah,8
 24195 00003D0F 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 24196                                  	;JZ	short NEXTENTJ		; Yes, continue search
 24197                                  	; 16/12/2022
 24198 00003D12 74B8                    	je	short NEXTENT ; 19/05/2019
 24199                                  	;JZ	short NEXTENTJ
 24200 00003D14 E88E03                  	CALL	MatchAttributes
 24201 00003D17 7407                    	JZ	SHORT RETFF
 24202 00003D19 F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 24203                                  	; 16/12/2022
 24204                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 24205 00003D1E 74AC                    	jz	short NEXTENT ; 19/05/2019
 24206                                  RETFF:
 24207 00003D20 C42E[8A05]              	LES	BP,[THISDPB]
 24208                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24209                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 24210                                  	; 15/12/2022
 24211 00003D24 268A6600                	MOV	AH,[ES:BP]
 24212                                  ;SETESRET:
 24213                                  	;PUSH	SS
 24214                                  	;POP	ES
 24215                                  	;retn
 24216                                  	; 24/01/2024
 24217 00003D28 EBAB                    	jmp	short SETESRET	
 24218                                  
 24219                                  ;----------------------------------------------------------------------------
 24220                                  ;
 24221                                  ; Procedure Name : MetaCompare
 24222                                  ;
 24223                                  ; Inputs:
 24224                                  ;	DS:SI -> 11 character FCB style name NO '?'
 24225                                  ;	    Typically this is a directory entry. It MUST be in upper case
 24226                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 24227                                  ;	    Typically this is a FCB or SFT. It MUST be in upper case
 24228                                  ; Function:
 24229                                  ;	Compare FCB style names allowing for ? match to any char
 24230                                  ; Outputs:
 24231                                  ;	Zero if match else NZ
 24232                                  ; Destroys CX,SI,DI all others preserved
 24233                                  ;----------------------------------------------------------------------------
 24234                                  
 24235                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24236                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 24237                                  
 24238                                  MetaCompare:
 24239 00003D2A B90B00                  	MOV	CX,11
 24240                                  WILDCRD:
 24241 00003D2D F3A6                    	REPE	CMPSB
 24242 00003D2F 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 24243                                  CHECK_META:
 24244 00003D31 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 24245 00003D36 74F5                    	JZ	short WILDCRD
 24246                                  MetaRet:
 24247 00003D38 C3                       	retn				; Zero set, Match
 24248                                  
 24249                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 24250                                  ;----------------------------------------------------------------------------
 24251                                  ;
 24252                                  ; Procedure Name : NEXTENTRY
 24253                                  ;
 24254                                  ; Inputs:
 24255                                  ;	Same as outputs of GETENTRY, above
 24256                                  ; Function:
 24257                                  ;	Update BX, and [LASTENT] for next directory entry.
 24258                                  ;	Carry set if no more.
 24259                                  ;----------------------------------------------------------------------------
 24260                                  
 24261                                  NEXTENTRY:
 24262                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24263                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 24264                                  
 24265                                  	; 19/05/2019 - Retro DOS v4.0
 24266                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 24267                                  
 24268                                  	; 27/07/2018 - Retro DOS v3.0
 24269                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 24270                                  	; 15/03/2018 - Retro DOS v2.0
 24271                                  
 24272 00003D39 A1[4803]                	MOV	AX,[LASTENT]
 24273 00003D3C 3B06[DA05]              	CMP	AX,[ENTLAST]
 24274 00003D40 7422                    	JZ	short NONE
 24275 00003D42 40                      	INC	AX
 24276                                  	;ADD	BX,32
 24277 00003D43 8D5F20                  	LEA	BX,[BX+32]
 24278 00003D46 39D3                    	CMP	BX,DX
 24279                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 24280                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 24281                                  	; 16/12/2022
 24282 00003D48 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 24283 00003D4A 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 24284 00003D4E FEC3                    	INC	BL
 24285 00003D50 3A1E[7705]              	CMP	BL,[CLUSFAC]
 24286 00003D54 7215                    	JB	short SAMECLUS
 24287 00003D56 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 24288 00003D5A E88916                  	call	IsEOF
 24289 00003D5D 7305                    	JAE	short NONE
 24290                                  	; 23/07/2019
 24291 00003D5F 83FB02                  	CMP	BX,2
 24292                                  	;JB	short NONE
 24293                                  	;JMP	short GETENT
 24294                                  	; 16/12/2022
 24295 00003D62 732B                    	jnb	short GETENT
 24296                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24297                                  	;JB	short NONE
 24298                                  	;JMP	short GETENT
 24299                                  NONE:
 24300 00003D64 F9                      	STC
 24301 00003D65 C3                      	retn
 24302                                  HAVIT:
 24303 00003D66 A3[4803]                	MOV	[LASTENT],AX
 24304 00003D69 F8                      	CLC
 24305                                  nextentry_retn:
 24306 00003D6A C3                      	retn
 24307                                  
 24308                                  SAMECLUS:
 24309 00003D6B 881E[7305]              	MOV	[SECCLUSPOS],BL
 24310 00003D6F A3[4803]                	MOV	[LASTENT],AX
 24311 00003D72 1E                      	PUSH	DS
 24312 00003D73 C53E[E205]              	LDS	DI,[CURBUF]
 24313                                  	; 19/05/2019
 24314                                  	; MSDOS 6.0
 24315                                  	;;mov	dx,[di+8]
 24316                                  	; 23/09/2023
 24317                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 24318                                  ;hkn; SS override
 24319                                  	;MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 24320                                  
 24321                                  ; 14/02/2024
 24322                                  %if 0
 24323                                  	; 23/09/2023
 24324                                  	mov	si,[di+BUFFINFO.buf_sector+2]
 24325                                  	
 24326                                  	;mov	dx,[di+6]
 24327                                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 24328                                  
 24329                                  	;inc	dx ; MSDOS 3.3
 24330                                  	; MSDOS 6.0
 24331                                  	;ADD	DX,1				;AN000; >32mb
 24332                                  	;ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 24333                                  	; 23/09/2023
 24334                                  	inc	dx
 24335                                  	jnz	short nextexntry_fc
 24336                                  	inc	si
 24337                                  	;inc	word [SS:HIGH_SECTOR]
 24338                                  nextexntry_fc:
 24339                                  	; 23/09/2023
 24340                                  	mov	[SS:HIGH_SECTOR],si
 24341                                  	; MSDOS 3.3 & MSDOS 6.0
 24342                                  	POP	DS
 24343                                  %else
 24344                                  	; 14/02/2024 - Retro DOS v5.0
 24345 00003D77 C55506                  	lds	dx,[di+BUFFINFO.buf_sector]
 24346 00003D7A 8CDE                    	mov	si,ds
 24347 00003D7C 1F                      	pop	ds
 24348 00003D7D 42                      	inc	dx
 24349 00003D7E 7501                    	jnz	short nextexntry_fc
 24350 00003D80 46                      	inc	si
 24351                                  nextexntry_fc:
 24352 00003D81 8936[0706]              	mov	[HIGH_SECTOR],si
 24353                                  %endif
 24354                                  
 24355 00003D85 E868F8                  	call	FIRSTCLUSTER
 24356 00003D88 31DB                    	XOR	BX,BX
 24357 00003D8A EB21                    	JMP	short SETENTRY
 24358                                  
 24359                                  ;----------------------------------------------------------------------------
 24360                                  ;
 24361                                  ; Procedure Name : GETENTRY
 24362                                  ;
 24363                                  ; Inputs:
 24364                                  ;	[LASTENT] has directory entry
 24365                                  ;	ES:BP points to drive parameters
 24366                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 24367                                  ; Function:
 24368                                  ;	Locates directory entry in preparation for search
 24369                                  ;	GETENT provides entry for passing desired entry in AX
 24370                                  ; Outputs:
 24371                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 24372                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 24373                                  ;	[LASTENT] = New directory entry number
 24374                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 24375                                  ;	Carry set if error (currently user FAILed to I 24)
 24376                                  ;----------------------------------------------------------------------------
 24377                                  
 24378                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24379                                  GETENTRY:
 24380                                  	; 27/07/2018 - Retro DOS v3.0
 24381 00003D8C A1[4803]                	MOV	AX,[LASTENT]
 24382                                  
 24383                                  	;entry	GETENT
 24384                                  GETENT:
 24385 00003D8F A3[4803]                	MOV	[LASTENT],AX
 24386                                  ;
 24387                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 24388                                  ; directory.
 24389                                  ;
 24390 00003D92 B105                    	mov	cl,5			; shift left by 5 = mult by 32
 24391 00003D94 D3C0                    	rol	ax,cl			; keep hight order bits
 24392 00003D96 89C2                    	mov	dx,ax
 24393                                  	; 19/05/2019 - Retro DOS v4.0
 24394                                  	;and	ax,0FFE0h
 24395                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24396                                  	;and	ax,~(32-1)		; mask off high order bits
 24397                                  	; 16/12/2022
 24398 00003D98 24E0                    	and	al,0E0h ; ~31
 24399 00003D9A 83E21F                  	and	dx,1Fh
 24400                                  	;and	dx,32-1			; mask off low order bits
 24401                                  ;
 24402                                  ; DX:AX contain the byte offset of the required directory entry from the
 24403                                  ; beginning of the directory. Convert this to a sector number. Round the
 24404                                  ; sector size down to a multiple of 32.
 24405                                  ;
 24406                                  	;mov	bx,[es:bp+2]
 24407 00003D9D 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 24408 00003DA1 80E3E0                  	and	bl,0E0h
 24409                                  	;AND	BL,255-31		; Must be multiple of 32
 24410 00003DA4 F7F3                    	DIV	BX
 24411                                  	; 14/02/2024
 24412                                  	;MOV	BX,DX			; Position within sector
 24413                                  				; NOTE: This BX value is not used in DIRREAD
 24414                                  				; Erdogan Tan - 14/02/2024
 24415                                  	;PUSH	BX
 24416 00003DA6 52                      	push	dx
 24417                                  	;
 24418 00003DA7 E8F2F7                  	call	DIRREAD
 24419 00003DAA 5B                      	POP	BX
 24420                                  	;retc
 24421 00003DAB 72BD                    	jc	short nextentry_retn
 24422                                  SETENTRY:
 24423 00003DAD 8B16[E205]              	MOV	DX,[CURBUF]
 24424                                  	;add	dx,16 ; MSDOS 3.3
 24425                                  	;add	dx,20 ; MSDOS 6.0 
 24426 00003DB1 83C214                  	ADD	DX,BUFINSIZ
 24427 00003DB4 01D3                    	ADD	BX,DX
 24428                                  	;add	dx,[es:bp+2]
 24429 00003DB6 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 24430                                  	; 29/12/2022
 24431                                  	; MSDOS 6.21 MSDOS.SYS contains a 'CLC' here, at DOSCODE:7E15h
 24432 00003DBA F8                      	clc
 24433 00003DBB C3                      	retn
 24434                                  
 24435                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 24436                                  ;----------------------------------------------------------------------------
 24437                                  ;
 24438                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 24439                                  ;
 24440                                  ; Inputs:
 24441                                  ;	BX cluster number of start of directory
 24442                                  ;	ES:BP Points to DPB
 24443                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 24444                                  ; Function:
 24445                                  ;	Set up a directory search
 24446                                  ; Outputs:
 24447                                  ;	[DIRSTART] = BX
 24448                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 24449                                  ;	Carry set if error (currently user FAILed to I 24)
 24450                                  ; destroys AX,DX,BX
 24451                                  ;----------------------------------------------------------------------------
 24452                                  
 24453                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24454                                  SETDIRSRCH:
 24455 00003DBC 09DB                    	OR	BX,BX
 24456 00003DBE 7437                    	JZ	short SETROOTSRCH
 24457 00003DC0 891E[C205]              	MOV	[DIRSTART],BX
 24458                                  	;mov	al,[es:bp+4]
 24459 00003DC4 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 24460 00003DC8 FEC0                    	INC	AL
 24461 00003DCA A2[7705]                	MOV	[CLUSFAC],AL
 24462                                  
 24463                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24464                                  	;SAVE	<SI>
 24465 00003DCD 56                      	push	si
 24466                                  	;test	byte [FastOpenFlg],2
 24467 00003DCE F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24468 00003DD3 7507                    	JNZ	short UNP_OK
 24469                                  
 24470                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24471                                  	;invoke	UNPACK
 24472 00003DD5 E82516                  	call	UNPACK
 24473 00003DD8 7302                    	JNC	short UNP_OK
 24474                                  	;RESTORE <SI>
 24475 00003DDA 5E                      	pop	si
 24476                                  	;return
 24477 00003DDB C3                      	retn
 24478                                  
 24479                                  UNP_OK:
 24480 00003DDC 893E[BC05]              	MOV	[CLUSNUM],DI
 24481 00003DE0 89DA                    	MOV	DX,BX
 24482 00003DE2 30DB                    	XOR	BL,BL
 24483 00003DE4 881E[7305]              	MOV	[SECCLUSPOS],BL
 24484                                  	;invoke	FIGREC
 24485 00003DE8 E8D00E                  	call	FIGREC
 24486                                  	;RESTORE <SI>
 24487 00003DEB 5E                      	pop	si
 24488                                  	
 24489                                  	; 19/05/2019 - Retro DOS v4.0
 24490                                  
 24491                                  	; MSDOS 6.0
 24492                                  	;PUSH	DX			   ;AN000; >32mb
 24493                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 24494                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 24495                                  	;POP	DX			   ;AN000; >32mb
 24496                                  
 24497                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24498                                  	;push	dx
 24499                                  	;mov	dx,[HIGH_SECTOR]
 24500                                  	;mov	[DIRSEC+2],dx
 24501                                  	;pop	dx
 24502                                  	;MOV	[DIRSEC],dx
 24503                                  	; 16/12/2022
 24504 00003DEC A1[0706]                	mov	ax,[HIGH_SECTOR]
 24505 00003DEF A3[C005]                	mov	[DIRSEC+2],AX
 24506 00003DF2 8916[BE05]              	MOV	[DIRSEC],DX
 24507                                  
 24508                                  	; 16/12/2022
 24509                                  	; cf=0 (at the return of FIGREC)
 24510                                  	;CLC
 24511 00003DF6 C3                      	retn
 24512                                  
 24513                                  	;entry	SETROOTSRCH
 24514                                  SETROOTSRCH:
 24515 00003DF7 31C0                    	XOR	AX,AX
 24516 00003DF9 A3[C205]                	MOV	[DIRSTART],AX
 24517                                  	; 22/09/2023
 24518 00003DFC A3[C005]                	mov	[DIRSEC+2],ax ; 0
 24519 00003DFF A2[7305]                	MOV	[SECCLUSPOS],AL
 24520 00003E02 48                      	DEC	AX
 24521 00003E03 A3[BC05]                	MOV	[CLUSNUM],AX
 24522                                  	;mov	ax,[es:bp+0Bh]
 24523 00003E06 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 24524                                  	; 19/05/2019
 24525                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 24526                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 24527 00003E0A 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 24528 00003E0E 29D0                    	SUB	AX,DX
 24529 00003E10 A2[7705]                	MOV	[CLUSFAC],AL
 24530 00003E13 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 24531                                  	; 22/09/2023
 24532                                  	; MSDOS 6.0
 24533                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 24534 00003E17 F8                      	CLC
 24535 00003E18 C3                      	retn
 24536                                  
 24537                                  ;============================================================================
 24538                                  ; DIR2.ASM, MSDOS 6.0, 1991
 24539                                  ;============================================================================
 24540                                  ; 27/07/2018 - Retro DOS v3.0
 24541                                  ; 19/05/2019 - Retro DOS v4.0 
 24542                                  
 24543                                  ;	TITLE	DIR2 - Directory and path cracking
 24544                                  ;	NAME	Dir2
 24545                                  
 24546                                  ;Break	<GETPATH -- PARSE A WFP>
 24547                                  ;----------------------------------------------------------------------------
 24548                                  ;
 24549                                  ; Procedure Name : GETPATH
 24550                                  ;
 24551                                  ; Inputs:
 24552                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 24553                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 24554                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24555                                  ;		( = -1 if current dir not involved, else
 24556                                  ;		 Points to first char after last "/" of current dir part)
 24557                                  ;	[THISCDS] Points to CDS being used
 24558                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 24559                                  ;	[NoSetDir] set
 24560                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 24561                                  ; Function:
 24562                                  ;	Crack the path
 24563                                  ; Outputs:
 24564                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 24565                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 24566                                  ;	ID1 field of [THISCDS] updated appropriately
 24567                                  ;	[ATTRIB] = [SATTRIB]
 24568                                  ;	ES:BP Points to DPB
 24569                                  ;	Carry set if bad path
 24570                                  ;	   SI Points to path element causing failure
 24571                                  ;	   Zero set
 24572                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24573                                  ;	      start a search on the last directory
 24574                                  ;	      CL is zero if there is a bad name in the path
 24575                                  ;	      CL is non-zero if the name was simply not found
 24576                                  ;		 [ENTFREE] may have free spot in directory
 24577                                  ;		 [NAME1] is the name.
 24578                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24579                                  ;	   Zero reset
 24580                                  ;	      File in middle of path or bad name in path or attribute mismatch
 24581                                  ;		or path too long or malformed path
 24582                                  ;	ELSE
 24583                                  ;	   [CurBuf] = -1 if root directory
 24584                                  ;	   [CURBUF] contains directory record with match
 24585                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24586                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 24587                                  ;	   AH = device ID
 24588                                  ;	      bit 7 of AH set if device SI and BX
 24589                                  ;	      will point DOSGROUP relative The firclus
 24590                                  ;	      field of the device entry contains the device pointer
 24591                                  ;	   [NAME1] Has name looked for
 24592                                  ;	   If last element is a directory zero is set and:
 24593                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24594                                  ;	      are set up to start a search on it.
 24595                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24596                                  ;	      like that for a file (except for zero flag)
 24597                                  ;	   If last element is a file zero is reset
 24598                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24599                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24600                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24601                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24602                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24603                                  ; DS preserved, Others destroyed
 24604                                  ;---------------------------------------------------------------------------
 24605                                  
 24606                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 24607                                  ;hkn; DS already set up at this point.
 24608                                  
 24609                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24610                                  GETPATH:
 24611                                  	;mov	word [CREATING],0E500h
 24612 00003E19 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 24613                                  
 24614                                  ; Same as GetPath only CREATING and DELALL already set
 24615                                  
 24616                                  	;entry	GetPathNoSet
 24617                                  GetPathNoSet:
 24618                                  	;mov	byte [EXTERR_LOCUS],2	
 24619 00003E1F C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 24620 00003E24 C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 24621                                  
 24622                                  ; See if the input indicates a device that has already been detected. If so,
 24623                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 24624                                  
 24625 00003E2A 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 24626                                  	;cmp	word [DI+1],5C3Ah
 24627                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 24628 00003E2E 817D013A5C              	cmp	word [DI+1],':\'
 24629 00003E33 7437                    	JZ	short CrackIt
 24630                                  
 24631                                  ; Let ChkDev find it in the device list
 24632                                  
 24633 00003E35 83C703                  	ADD	DI,3
 24634                                  	; 18/08/2018
 24635                                  	;MOV	SI,DI			; let CHKDEV see the original name
 24636                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24637                                  	; 16/12/2022
 24638                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 24639 00003E38 E89E00                  	CALL	CHKDEV
 24640 00003E3B 722D                    	JC	short InternalError
 24641                                  
 24642                                  Build_devJ:
 24643 00003E3D A0[6D05]                	MOV	AL,[SATTRIB]
 24644 00003E40 A2[6B05]                	MOV	[ATTRIB],AL
 24645                                  	;mov	byte [EXTERR_LOCUS],1
 24646 00003E43 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 24647                                  					; "finding" a char device
 24648                                  					; set LOCUS to Unknown. This makes
 24649                                  					; certain idiotic problems reported
 24650                                  					; by a certain 3 letter OEM go away.
 24651                                  
 24652                                  ; Take name in name1 and pack it back into where wfp_start points. This
 24653                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 24654                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 24655                                  ; wfp into the share set.
 24656                                  ;
 24657                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 24658                                  ; non-space seen +1.  This position is kept in DX.
 24659                                  
 24660                                  ;hkn; SS is DOSDATA
 24661 00003E48 16                      	push	ss
 24662 00003E49 07                      	pop	es
 24663                                  
 24664                                  ;hkn; NAME1 is in DOSDATA
 24665 00003E4A BE[4B05]                	mov	si,NAME1
 24666 00003E4D 8B3E[B205]              	mov	di,[WFP_START]
 24667 00003E51 89FA                    	mov	dx,di
 24668 00003E53 B90800                  	mov	cx,8			; 8 chars in device name
 24669                                  MoveLoop:
 24670 00003E56 AC                      	lodsb
 24671 00003E57 AA                      	stosb
 24672 00003E58 3C20                    	cmp	al," "
 24673 00003E5A 7402                    	jz	short NoSave
 24674                                  
 24675 00003E5C 89FA                    	mov	dx,di
 24676                                  NoSave:
 24677 00003E5E E2F6                    	loop	MoveLoop
 24678                                  
 24679                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 24680                                  ; at this point.
 24681                                  
 24682 00003E60 89D7                    	mov	di,dx
 24683                                  	;mov	byte [di],0		; end of string
 24684                                  	; 15/02/2024
 24685 00003E62 880D                    	mov	[di],cl ; 0
 24686 00003E64 E8A902                  	call	Build_device_ent	; Clears carry sets zero
 24687 00003E67 FEC0                    	INC	AL			; reset zero
 24688 00003E69 C3                      	retn
 24689                                  
 24690                                  InternalError:
 24691                                  InternalError_loop:
 24692 00003E6A EBFE                    	JMP	short InternalError_loop ; freeze
 24693                                  
 24694                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 24695                                  
 24696                                  CrackIt:
 24697                                  ; 15/02/2024
 24698                                  %if 0
 24699                                  	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 24700                                  	CMP	SI,-1			; valid?
 24701                                  	JNZ	short LOOK_SING		; Yes, use it.
 24702                                  	LEA	SI,[DI+3]		; skip D:\.
 24703                                  LOOK_SING:
 24704                                  %endif
 24705                                  	;mov	byte [ATTRIB],16h
 24706 00003E6C C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 24707                                  					; Attributes to search through Dirs
 24708 00003E71 C43E[A205]              	LES	DI,[THISCDS]
 24709 00003E75 B8FFFF                  	MOV	AX,-1
 24710                                  	;mov	bx,[es:di+73]
 24711 00003E78 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 24712 00003E7C 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 24713                                  
 24714                                  ; AX = -1
 24715                                  ; BX = cluster number of current directory. THis number is -1 if the media
 24716                                  ;      has been uncertainly changed.
 24717                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 24718                                  ;      may be -1 if no current directory part has been used.
 24719                                  
 24720 00003E80 39C6                    	CMP	SI,AX			; if Current directory is not part
 24721 00003E82 743B                    	JZ	short NO_CURR_D		; then we must crack from root
 24722 00003E84 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 24723                                  
 24724                                  ; DOS 3.3  6/25/86
 24725 00003E86 7437                    	JZ	short NO_CURR_D		; no, crack from the root
 24726                                  	;test	byte [FastOpenFlg],1
 24727 00003E88 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 24728 00003E8D 743D                    	JZ	short GOT_SEARCH_CLUSTER	; no
 24729 00003E8F 06                      	PUSH	ES			; save registers
 24730 00003E90 57                      	PUSH	DI
 24731 00003E91 51                      	PUSH	CX
 24732 00003E92 FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 24733 00003E95 56                      	PUSH	SI
 24734 00003E96 53                      	PUSH	BX
 24735                                  
 24736 00003E97 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 24737 00003E9B 8B36[B205]              	MOV	SI,[WFP_START]
 24738                                  
 24739                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 24740 00003E9F BB[300D]                	MOV	BX,FastOpenTable
 24741 00003EA2 BF[460D]                	MOV	DI,Dir_Info_Buff
 24742 00003EA5 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24743                                  	;mov	al,1
 24744 00003EA8 B001                    	MOV	AL,FONC_Look_up
 24745 00003EAA 1E                      	PUSH	DS
 24746 00003EAB 07                      	POP	ES
 24747                                  	;call	far [BX+2]
 24748 00003EAC FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 24749 00003EAF 7203                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 24750                                  					; Go to Got_Srch_cluster
 24751                                  	; 29/12/2022
 24752                                  	;CMP	BYTE [SI],0		;fastopen has current dir info?
 24753                                  	;JE	short GO_Chk_end	;yes. Go to got_search_cluster
 24754                                  	;stc
 24755                                  	;jmp	short GO_Chk_end	;Go to No_Curr_D
 24756                                  
 24757 00003EB1 803C01                  	cmp	byte [si],1
 24758                                  GO_Chk_end1:	; 29/12/2022
 24759 00003EB4 F5                      	cmc 
 24760                                  	; [si] = 0 -> cf = 0
 24761                                  	; [si] > 0 -> cf = 1
 24762                                  
 24763                                  ;GO_Chk_end1:
 24764                                  	; 29/12/2022
 24765                                  	;clc
 24766                                  
 24767                                  GO_Chk_end:				; restore registers
 24768 00003EB5 5B                      	POP	BX
 24769 00003EB6 5E                      	POP	SI
 24770 00003EB7 8F44FF                  	POP	word [SI-1]
 24771 00003EBA 59                      	POP	CX
 24772 00003EBB 5F                      	POP	DI
 24773 00003EBC 07                      	POP	ES
 24774 00003EBD 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 24775                                  
 24776                                  ; DOS 3.3  6/25/86
 24777                                  ;
 24778                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 24779                                  ; of path and go crack from root.
 24780                                  
 24781                                  NO_CURR_D:
 24782 00003EBF 8B36[B205]              	MOV	SI,[WFP_START]
 24783                                  	;LEA	SI,[SI+3]		; Skip "d:/"
 24784                                  	; 15/02/2024
 24785 00003EC3 83C603                  	add	si,3
 24786 00003EC6 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24787 00003ECA EB37                    	JMP	short ROOTPATH
 24788                                  
 24789                                  ; We are able to crack from the current directory part. Go set up for search
 24790                                  ; of specified cluster.
 24791                                  
 24792                                  GOT_SEARCH_CLUSTER:
 24793 00003ECC C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24794 00003ED0 E8E9FE                  	call	SETDIRSRCH
 24795                                  	;JC	short SETFERR
 24796                                  	;JMP	short FINDPATH
 24797                                  	; 16/12/2022
 24798 00003ED3 733F                    	jnc	short FINDPATH ; 17/08/2018
 24799                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24800                                  	;JC	short SETFERR
 24801                                  	;JMP	short FINDPATH
 24802                                  SETFERR:
 24803 00003ED5 30C9                    	XOR	CL,CL			; set zero
 24804 00003ED7 F9                      	STC
 24805 00003ED8 C3                      	retn
 24806                                  
 24807                                  ;---------------------------------------------------------------------------
 24808                                  ;
 24809                                  ; Procedure Name : ChkDev
 24810                                  ;
 24811                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 24812                                  ;   device.
 24813                                  ; Blasts CX,SI,DI,AX,BX
 24814                                  ;---------------------------------------------------------------------------
 24815                                  
 24816                                  CHKDEV:
 24817 00003ED9 89FE                    	MOV	SI,DI
 24818                                  	;MOV	DI,SS
 24819                                  	;MOV	ES,DI
 24820                                  	; 27/06/2024
 24821 00003EDB 16                      	push	ss
 24822 00003EDC 07                      	pop	es
 24823                                  
 24824 00003EDD BF[4B05]                	MOV	DI,NAME1
 24825 00003EE0 B90900                  	MOV	CX,9
 24826                                  TESTLOOP:
 24827 00003EE3 E82410                  	call	GETLET
 24828                                  
 24829 00003EE6 3C2E                    	CMP	AL,'.'
 24830 00003EE8 740E                    	JZ	short TESTDEVICE
 24831 00003EEA E87310                  	call	PATHCHRCMP
 24832 00003EED 7407                    	JZ	short NOTDEV
 24833 00003EEF 08C0                    	OR	AL,AL
 24834 00003EF1 7405                    	JZ	short TESTDEVICE
 24835                                  
 24836 00003EF3 AA                      	STOSB
 24837 00003EF4 E2ED                    	LOOP	TESTLOOP
 24838                                  NOTDEV:
 24839 00003EF6 F9                      	STC
 24840 00003EF7 C3                      	retn
 24841                                  
 24842                                  TESTDEVICE:
 24843                                  	;ADD	CX,2
 24844                                  	; 24/09/2023
 24845 00003EF8 41                      	inc	cx
 24846 00003EF9 41                      	inc	cx
 24847 00003EFA B020                    	MOV	AL,' '
 24848 00003EFC F3AA                    	REP	STOSB
 24849                                  	;MOV	AX,SS
 24850                                  	;MOV	DS,AX
 24851                                  	; 27/06/2024
 24852 00003EFE 16                      	push	ss
 24853 00003EFF 1F                      	pop	ds
 24854                                  	;call	DEVNAME
 24855                                  	;retn
 24856                                  	; 18/12/2022
 24857 00003F00 E9AF01                  	jmp	DEVNAME
 24858                                  
 24859                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 24860                                  ;----------------------------------------------------------------------------
 24861                                  ;
 24862                                  ; Procedure Name : ROOTPATH,FINDPATH
 24863                                  ;
 24864                                  ; Inputs:
 24865                                  ;	Same as FINDPATH but,
 24866                                  ;	SI Points to asciz string of path which is assumed to start at
 24867                                  ;		the root (no leading '/').
 24868                                  ; Function:
 24869                                  ;	Search from root for path
 24870                                  ; Outputs:
 24871                                  ;	Same as FINDPATH but:
 24872                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 24873                                  ;	[NoSetDir] is ignored.
 24874                                  ;----------------------------------------------------------------------------
 24875                                  
 24876                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24877                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 24878                                  
 24879                                  ROOTPATH:
 24880 00003F03 E8F1FE                  	call	SETROOTSRCH
 24881 00003F06 803C00                  	CMP	BYTE [SI],0
 24882 00003F09 7509                    	JNZ	short FINDPATH
 24883                                  
 24884                                  ; Root dir specified
 24885 00003F0B A0[6D05]                	MOV	AL,[SATTRIB]
 24886 00003F0E A2[6B05]                	MOV	[ATTRIB],AL
 24887 00003F11 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 24888                                  					; (dir), clears carry.
 24889 00003F13 C3                      	retn
 24890                                  
 24891                                  ; Inputs:
 24892                                  ;	[ATTRIB] Set to get through directories
 24893                                  ;	[SATTRIB] Set to find last element
 24894                                  ;	ES:BP Points to DPB
 24895                                  ;	SI Points to asciz string of path (no leading '/').
 24896                                  ;	[SECCLUSPOS] = 0
 24897                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 24898                                  ;	[CLUSNUM] = Cluster # of next cluster
 24899                                  ;	[CLUSFAC] = Sectors per cluster
 24900                                  ;	[NoSetDir] set
 24901                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24902                                  ;		( = -1 if current dir not involved, else
 24903                                  ;		 Points to first char after last "/" of current dir part)
 24904                                  ;	[THISCDS] Points to CDS being used
 24905                                  ;	[CREATING] and [DELALL] set
 24906                                  ; Function:
 24907                                  ;	Parse path name
 24908                                  ; Outputs:
 24909                                  ;	ID1 field of [THISCDS] updated appropriately
 24910                                  ;	[ATTRIB] = [SATTRIB]
 24911                                  ;	ES:BP Points to DPB
 24912                                  ;	[THISDPB] = ES:BP
 24913                                  ;	Carry set if bad path
 24914                                  ;	   SI Points to path element causing failure
 24915                                  ;	   Zero set
 24916                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24917                                  ;	      start a search on the last directory
 24918                                  ;	      CL is zero if there is a bad name in the path
 24919                                  ;	      CL is non-zero if the name was simply not found
 24920                                  ;		 [ENTFREE] may have free spot in directory
 24921                                  ;		 [NAME1] is the name.
 24922                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24923                                  ;	   Zero reset
 24924                                  ;	      File in middle of path or bad name in path
 24925                                  ;		or path too long or malformed path
 24926                                  ;	ELSE
 24927                                  ;	   [CURBUF] contains directory record with match
 24928                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24929                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 24930                                  ;	   [NAME1] Has name looked for
 24931                                  ;	   AH = device ID
 24932                                  ;	      bit 7 of AH set if device SI and BX
 24933                                  ;	      will point DOSGROUP relative The firclus
 24934                                  ;	      field of the device entry contains the device pointer
 24935                                  ;	   If last element is a directory zero is set and:
 24936                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24937                                  ;	      are set up to start a search on it,
 24938                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24939                                  ;	      like that for a file (except for zero flag)
 24940                                  ;	   If last element is a file zero is reset
 24941                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24942                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24943                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24944                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24945                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24946                                  ; Destroys all other registers
 24947                                  
 24948                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24949                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 24950                                  
 24951                                      	;entry	FINDPATH
 24952                                  FINDPATH:
 24953 00003F14 06                      	PUSH	ES			; Save ES:BP
 24954 00003F15 56                      	PUSH	SI
 24955 00003F16 89F7                    	MOV	DI,SI
 24956 00003F18 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 24957 00003F1C 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 24958 00003F21 740E                    	JZ	short NOIDS		; No current dir part
 24959 00003F23 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24960 00003F27 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24961 00003F29 C43E[A205]              	LES	DI,[THISCDS]
 24962                                  	;mov	[es:di+73],cx
 24963 00003F2D 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory cluster
 24964                                  NOIDS:
 24965                                  
 24966                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24967                                  ; character in the string. CX,DI may be destroyed.
 24968                                  ;
 24969                                  ;	invoke	NAMETRANS
 24970                                  ;	MOV	CL,AL
 24971                                  ;
 24972                                  ; The above is the slow method. The name has *already* been munged by
 24973                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24974                                  ; the name until ., \ or 0 is hit.
 24975                                  
 24976                                  	;MOV	AX,SS
 24977                                  	;MOV	ES,AX
 24978                                  	; 15/02/2024 - Retro DOS v4.1
 24979 00003F31 16                      	push	ss
 24980 00003F32 07                      	pop	es
 24981                                  
 24982                                  ;hkn; Name1 is in DOSDATA
 24983 00003F33 BF[4B05]                	MOV	DI,NAME1
 24984 00003F36 B82020                  	MOV	AX,'  ' ; 2020h
 24985 00003F39 AA                      	STOSB
 24986 00003F3A AB                      	STOSW
 24987 00003F3B AB                      	STOSW
 24988 00003F3C AB                      	STOSW
 24989 00003F3D AB                      	STOSW
 24990 00003F3E AB                      	STOSW
 24991                                  
 24992                                  ;hkn; Name1 is in DOSDATA
 24993 00003F3F BF[4B05]                	MOV	DI,NAME1
 24994 00003F42 30E4                    	XOR	AH,AH			; bits for CL
 24995                                  GetNam:
 24996                                  	; 19/05/2019 - Retro DOS v4.0
 24997                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24998                                  
 24999                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25000                                  	; 16/12/2022
 25001                                  	;inc	cl ; not required !
 25002                                  	
 25003 00003F44 AC                      	LODSB
 25004 00003F45 3C2E                    	CMP	AL,'.'	; 2Eh
 25005 00003F47 7412                    	JZ	short _SetExt
 25006 00003F49 08C0                    	OR	AL,AL
 25007 00003F4B 7424                    	JZ	short _GetDone
 25008 00003F4D 3C5C                    	CMP	AL,'\'	; 5Ch
 25009 00003F4F 7420                    	JZ	short _GetDone
 25010 00003F51 3C3F                    	CMP	AL,'?'	; 3Fh
 25011 00003F53 7503                    	JNZ	short StoNam
 25012 00003F55 80CC01                  	OR	AH,1
 25013                                  StoNam: 
 25014 00003F58 AA                      	STOSB
 25015 00003F59 EBE9                    	JMP	short GetNam
 25016                                  _SetExt:
 25017 00003F5B BF[5305]                	MOV	DI,NAME1+8
 25018                                  GetExt:
 25019 00003F5E AC                      	LODSB
 25020 00003F5F 08C0                    	OR	AL,AL
 25021 00003F61 740E                    	JZ	short _GetDone
 25022 00003F63 3C5C                    	CMP	AL,'\'
 25023 00003F65 740A                    	JZ	short _GetDone
 25024 00003F67 3C3F                    	CMP	AL,'?'
 25025 00003F69 7503                    	JNZ	short StoExt
 25026 00003F6B 80CC01                  	OR	AH,1
 25027                                  StoExt: 
 25028 00003F6E AA                      	STOSB
 25029 00003F6F EBED                    	JMP	short GetExt
 25030                                  _GetDone:
 25031 00003F71 4E                      	DEC	SI
 25032 00003F72 88E1                    	MOV	CL,AH  ; 0 or 1 ; 29/12/2022
 25033 00003F74 80C980                  	OR	CL,80H
 25034 00003F77 5F                      	POP	DI			; Start of this element
 25035 00003F78 07                      	POP	ES			; Restore ES:BP
 25036 00003F79 39FE                    	CMP	SI,DI
 25037 00003F7B 7503                    	JNZ	short check_device
 25038 00003F7D E9DD00                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 25039                                  check_device:
 25040 00003F80 56                      	PUSH	SI			; Start of next element
 25041                                  	;MOV	AL,[SI]
 25042                                  	; 15/02/2024
 25043 00003F81 08C0                    	OR	AL,AL
 25044                                  	; 23/09/2023
 25045                                  	;cmp	byte [si],0
 25046 00003F83 7508                    	JNZ	short NOT_LAST
 25047                                  
 25048                                  ; for last element of the path switch to the correct search attributes
 25049                                  
 25050 00003F85 8A3E[6D05]              	MOV	BH,[SATTRIB]
 25051 00003F89 883E[6B05]              	MOV	[ATTRIB],BH
 25052                                  
 25053                                  NOT_LAST:
 25054                                  
 25055                                  ; check name1 to see if we have a device...
 25056                                  
 25057 00003F8D 06                      	PUSH	ES			; Save ES:BP
 25058                                  
 25059                                  ;hkn; SS is DOSDATA
 25060                                  	;context ES
 25061 00003F8E 16                      	push	ss
 25062 00003F8F 07                      	pop	es
 25063 00003F90 E81F01                  	call	DEVNAME 		; blast BX
 25064 00003F93 07                      	POP	ES			; Restore ES:BP
 25065 00003F94 7208                    	JC	short FindFile		; Not a device
 25066 00003F96 08C0                    	OR	AL,AL			; Test next char again
 25067                                  	;JZ	short GO_BDEV
 25068                                  	;JMP	FILEINPATH		; Device name in middle of path
 25069                                  	; 27/06/2024
 25070 00003F98 752D                    	jnz	short FILEINPATH_j
 25071                                  
 25072                                  GO_BDEV:
 25073 00003F9A 5E                      	POP	SI			; Points to NUL at end of path
 25074 00003F9B E99FFE                  	JMP	Build_devJ
 25075                                  
 25076                                  FindFile:
 25077                                  ;;;; 7/28/86
 25078 00003F9E 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 25079 00003FA3 7505                    	JNZ	short NOE5		; no
 25080 00003FA5 C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 25081                                  NOE5:
 25082                                  ;;;; 7/28/86
 25083 00003FAA 57                      	PUSH	DI			; Start of this element
 25084 00003FAB 06                      	PUSH	ES			; Save ES:BP
 25085 00003FAC 51                      	PUSH	CX			; CL return from NameTrans
 25086                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25087                                  
 25088 00003FAD E88A02                  	CALL	LookupPath		; call fastopen to get dir entry
 25089 00003FB0 7303                    	JNC	short DIR_FOUND		; found dir entry
 25090                                  
 25091                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25092 00003FB2 E8CDFC                  	call	FINDENTRY
 25093                                  DIR_FOUND:
 25094 00003FB5 59                      	POP	CX
 25095 00003FB6 07                      	POP	ES
 25096 00003FB7 5F                      	POP	DI
 25097 00003FB8 7303                    	JNC	short LOAD_BUF
 25098 00003FBA E9C500                  	JMP	BADPATHPOP
 25099                                  
 25100                                  LOAD_BUF:
 25101 00003FBD C53E[E205]              	LDS	DI,[CURBUF]
 25102                                  	;test	byte [bx+0Bh],10h
 25103 00003FC1 F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 25104 00003FC5 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 25105                                  FILEINPATH_j:	; 27/06/2024
 25106 00003FC7 E99700                  	JMP	FILEINPATH		; Error or end of path
 25107                                  
 25108                                  ; if we are not setting the directory, then check for end of string
 25109                                  
 25110                                  GO_NEXT:
 25111                                  ;hkn; SS override
 25112 00003FCA 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 25113 00003FD0 7423                    	JZ	short SetDir
 25114 00003FD2 89FA                    	MOV	DX,DI			; Save pointer to entry
 25115 00003FD4 8CD9                    	MOV	CX,DS
 25116                                  
 25117                                  ;hkn; SS is DOSDATA
 25118                                  	;context DS
 25119 00003FD6 16                      	push	ss
 25120 00003FD7 1F                      	pop	ds
 25121 00003FD8 5F                      	POP	DI			; Start of next element
 25122                                  	; 19/05/2019 - Retro DOS v4.0
 25123                                  	; MSDOS 6.0
 25124 00003FD9 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25125 00003FDE 740B                    	JZ	short _nofast			; the FastOpen
 25126 00003FE0 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 25127 00003FE5 7404                    	JZ	short _nofast			; no
 25128 00003FE7 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 25129                                  _nofast:
 25130 00003FEB 803D00                  	CMP	BYTE [DI],0
 25131                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 25132                                  	;;JMP	_SETRET  ; retn		; Got it
 25133                                  	;retn	; 05/09/2018
 25134                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25135                                  	;jmp	_SETRET
 25136                                  	; 16/12/2022
 25137 00003FEE 7421                    	jz	short _SETRET
 25138                                  
 25139                                  NEXT_ONE:
 25140 00003FF0 57                      	PUSH	DI			; Put start of next element back on stack
 25141 00003FF1 89D7                    	MOV	DI,DX
 25142 00003FF3 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 25143                                  SetDir:
 25144 00003FF5 8B14                    	MOV	DX,[SI] 		; Dir_first
 25145                                  
 25146                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25147 00003FF7 1E                      	PUSH	DS		      ; save [curbuf+2]
 25148                                  ;hkn; SS is DOSDATA
 25149 00003FF8 16                      	push	ss
 25150 00003FF9 1F                      	pop	ds		      ; set DS Dosgroup
 25151                                  	;test	byte [FastOpenFlg],2
 25152 00003FFA F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 25153 00003FFF 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 25154 00004001 89D3                    	MOV	BX,DX		      ; not found
 25155 00004003 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 25156 00004007 50                      	PUSH	AX		      ; save device id (AH)
 25157 00004008 E8B1FD                  	call	SETDIRSRCH
 25158 0000400B 58                      	POP	AX		      ; restore device id (AH)
 25159 0000400C 83C402                  	ADD	SP,2		      ; pop ds in stack
 25160 0000400F EB36                    	JMP	short FAST_OPEN_SKIP
 25161                                  
 25162                                  	; 16/12/2022
 25163                                  _SETRET:
 25164 00004011 C3                      	retn
 25165                                  
 25166                                  DO_NORMAL:
 25167 00004012 1F                      	POP	DS			; DS = [curbuf + 2]
 25168                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25169                                  
 25170 00004013 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 25171 00004015 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 25172 00004017 53                      	PUSH	BX
 25173 00004018 50                      	PUSH	AX
 25174 00004019 56                      	PUSH	SI
 25175 0000401A 51                      	PUSH	CX
 25176                                  
 25177                                  ; 16/02/2024
 25178                                  %if 0
 25179                                  	;push	word [di+6]
 25180                                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 25181                                  	; 19/05/2019
 25182                                  	; MSDOS 6.0
 25183                                  	;push	word [di+8]
 25184                                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 25185                                  %else	
 25186                                  	; 16/02/2024
 25187                                  	;lds	bx,[di+6]
 25188 0000401B C55D06                  	lds	bx,[di+BUFFINFO.buf_sector]
 25189 0000401E 53                      	push	bx
 25190 0000401F 1E                      	push	ds
 25191                                  %endif
 25192                                  
 25193 00004020 89D3                    	MOV	BX,DX
 25194                                  
 25195                                  ;hkn; SS is DOSDATA
 25196                                  	;context DS
 25197 00004022 16                      	push	ss
 25198 00004023 1F                      	pop	ds
 25199                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 25200 00004024 E895FD                  	call	SETDIRSRCH		; the entry sector buffer
 25201                                  	; 19/05/2019
 25202                                  	; MSDOS 6.0
 25203 00004027 8F06[0706]              	POP	word [HIGH_SECTOR]
 25204 0000402B 5A                      	POP	DX
 25205 0000402C 7203                    	JC	short SKIP_GETB
 25206                                  	; 22/09/2023
 25207                                  	;;mov	byte [ALLOWED],18h
 25208                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 25209                                  	;XOR	AL,AL ; *
 25210                                  	;;invoke GETBUFFR		; Get the entry buffer back
 25211                                  	;call	GETBUFFR
 25212 0000402E E8D117                  	call	GETBUFFER ; * ; pre-read
 25213                                  SKIP_GETB:
 25214 00004031 59                      	POP	CX
 25215 00004032 5E                      	POP	SI
 25216 00004033 58                      	POP	AX
 25217 00004034 5B                      	POP	BX
 25218 00004035 7305                    	JNC	short SET_THE_BUF
 25219 00004037 5F                      	POP	DI			; Start of next element
 25220 00004038 89FE                    	MOV	SI,DI			; Point with SI
 25221 0000403A EB21                    	JMP	SHORT _BADPATH
 25222                                  
 25223                                  SET_THE_BUF:
 25224 0000403C E8B6F5                  	call	SET_BUF_AS_DIR
 25225 0000403F 8B3E[E205]              	MOV	DI,[CURBUF]
 25226 00004043 01FE                    	ADD	SI,DI			; Get the offsets back
 25227 00004045 01FB                    	ADD	BX,DI
 25228                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 25229                                  FAST_OPEN_SKIP:
 25230 00004047 5F                      	POP	DI			; Start of next element
 25231 00004048 E89302                  	CALL	InsertPath		; insert dir entry info
 25232                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 25233 0000404B 8A05                    	MOV	AL,[DI]
 25234 0000404D 08C0                    	OR	AL,AL
 25235 0000404F 74C0                    	JZ	short _SETRET		; At end
 25236 00004051 47                      	INC	DI			; Skip over "/"
 25237 00004052 89FE                    	MOV	SI,DI			; Point with SI
 25238 00004054 E8090F                  	call	PATHCHRCMP
 25239 00004057 7503                    	JNZ	short find_bad_name	; oops
 25240 00004059 E9B8FE                  	JMP	FINDPATH		; Next element
 25241                                  
 25242                                  find_bad_name:
 25243 0000405C 4E                      	DEC	SI			; Undo above INC to get failure point
 25244                                  _BADPATH:
 25245 0000405D 30C9                    	XOR	CL,CL			; Set zero
 25246 0000405F EB28                    	JMP	SHORT BADPRET
 25247                                  
 25248                                  FILEINPATH:
 25249 00004061 5F                      	POP	DI			; Start of next element
 25250                                  
 25251                                  ;hkn; SS is DOSDATA
 25252                                  	;context DS			; Got to from one place with DS gone
 25253 00004062 16                      	push	ss
 25254 00004063 1F                      	pop	ds
 25255                                  
 25256                                  ; DOS 3.3 FastOpen
 25257                                  	;test	byte [FastOpenFlg],1
 25258 00004064 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 25259 00004069 740B                    	JZ	short NO_FAST		; device info to fastopen
 25260                                  	;test	byte [FastOpenFlg],2
 25261 0000406B F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 25262 00004070 7404                    	JZ	short NO_FAST
 25263 00004072 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 25264                                  					 ; success
 25265                                  NO_FAST:
 25266                                  ; DOS 3.3 FastOpen
 25267 00004076 8A05                    	MOV	AL,[DI]
 25268 00004078 08C0                    	OR	AL,AL
 25269                                  	;JZ	short INCRET
 25270                                  	;MOV	SI,DI			; Path too long
 25271                                  	;JMP	SHORT BADPRET
 25272                                  	; 27/06/2024
 25273 0000407A 750B                    	jnz 	short BADPRET_X
 25274                                  
 25275                                  INCRET:
 25276                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25277                                  
 25278 0000407C E85F02                  	CALL   InsertPath		; insert dir entry info
 25279                                  
 25280                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25281 0000407F FEC0                    	INC	AL			; Reset zero
 25282                                  	; 16/12/2022	
 25283                                  ;_SETRET:
 25284 00004081 C3                      	retn
 25285                                  
 25286                                  BADPATHPOP:
 25287 00004082 5E                      	POP	SI			; Start of next element
 25288 00004083 8A04                    	MOV	AL,[SI]
 25289                                  	; 27/06/2024
 25290                                  	;MOV	SI,DI			; Start of bad element
 25291 00004085 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 25292                                  BADPRET_X:	; 27/06/2024
 25293 00004087 89FE                    	mov	si,di
 25294                                  BADPRET:
 25295 00004089 A0[6D05]                	MOV	AL,[SATTRIB]
 25296 0000408C A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 25297 0000408F F9                      	STC
 25298 00004090 C3                      	retn
 25299                                  
 25300                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 25301                                  ;---------------------------------------------------------------------------
 25302                                  ;
 25303                                  ; Procedure Name : STARTSRCH
 25304                                  ;
 25305                                  ; Inputs:
 25306                                  ;	[THISDPB] Set
 25307                                  ; Function:
 25308                                  ;	Set up a search for GETENTRY and NEXTENTRY
 25309                                  ; Outputs:
 25310                                  ;	ES:BP = Drive parameters
 25311                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 25312                                  ; Destroys ES,BP,AX
 25313                                  ;--------------------------------------------------------------------------
 25314                                  
 25315                                  STARTSRCH:
 25316 00004091 C42E[8A05]              	LES	BP,[THISDPB]
 25317 00004095 31C0                    	XOR	AX,AX
 25318 00004097 A3[4803]                	MOV	[LASTENT],AX
 25319 0000409A A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 25320 0000409D 48                      	DEC	AX
 25321 0000409E A3[D805]                	MOV	[ENTFREE],AX
 25322 000040A1 A3[DA05]                	MOV	[ENTLAST],AX
 25323 000040A4 C3                      	retn
 25324                                  
 25325                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 25326                                  ;----------------------------------------------------------------------------
 25327                                  ; Procedure Name : MatchAttributes
 25328                                  ;
 25329                                  ; Input:    [Attrib] = attribute to search for
 25330                                  ;	    CH = found attribute
 25331                                  ; Output:   JZ <match>
 25332                                  ;	    JNZ <nomatch>
 25333                                  ; Registers modified: noneski
 25334                                  ;----------------------------------------------------------------------------
 25335                                  
 25336                                  MatchAttributes:
 25337 000040A5 50                      	PUSH	AX
 25338                                  
 25339                                  ;hkn; SS override
 25340 000040A6 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 25341 000040AA F6D0                    	NOT	AL			; AL <- SearchSet'
 25342 000040AC 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 25343                                  	;and	al,16h
 25344 000040AE 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 25345                                  ;
 25346                                  ; the result is non-zero if an attribute is not in the search set
 25347                                  ; and in the found set and in the important set. This means that we do not
 25348                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 25349                                  ;
 25350 000040B0 58                      	POP	AX
 25351 000040B1 C3                      	retn
 25352                                  
 25353                                  ; 19/05/2019 - Retro DOS v4.0
 25354                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 25355                                  
 25356                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25357                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 25358                                  
 25359                                  ;Break <DevName - Look for name of device>
 25360                                  ;---------------------------------------------------------------------------
 25361                                  ;
 25362                                  ; Procedure Name : DevName
 25363                                  ;
 25364                                  ; Inputs:
 25365                                  ;	DS,ES:DOSDATA
 25366                                  ;	Filename in NAME1
 25367                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 25368                                  ; Function:
 25369                                  ;	Determine if file is in list of I/O drivers
 25370                                  ; Outputs:
 25371                                  ;	Carry set if not a device
 25372                                  ;	ELSE
 25373                                  ;	Zero flag set
 25374                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 25375                                  ;	     bits 0-4 set from low byte of attribute word
 25376                                  ;	DEVPT = DWORD pointer to Device header of device
 25377                                  ; BX destroyed, others preserved
 25378                                  ;---------------------------------------------------------------------------
 25379                                  
 25380                                  DEVNAME:
 25381                                  	; 28/07/2018 - Retro DOS v3.0
 25382                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 25383                                  
 25384 000040B2 56                      	PUSH	SI
 25385 000040B3 57                      	PUSH	DI
 25386 000040B4 51                      	PUSH	CX
 25387 000040B5 50                      	PUSH	AX
 25388                                  
 25389                                  ; E5 special code
 25390 000040B6 FF36[4B05]              	PUSH	WORD [NAME1]
 25391 000040BA 803E[4B05]05            	CMP	byte [NAME1],5
 25392 000040BF 7505                    	JNZ	short NOKTR
 25393 000040C1 C606[4B05]E5            	MOV	byte [NAME1],0E5h
 25394                                  NOKTR:
 25395                                  	;test	byte [ATTRIB],8
 25396 000040C6 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 25397                                  					; If looking for VOL id don't find devs
 25398 000040CB 7520                    	JNZ	short RET31
 25399                                  
 25400                                  ;hkn; NULDEV is in DOSDATA
 25401 000040CD BE[4800]                	MOV	SI,NULDEV
 25402                                  LOOKIO:
 25403                                  	; 21/11/2022
 25404                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 25405                                  	; 17/12/2022
 25406                                  	;test	byte [si+5],80h
 25407 000040D0 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25408                                  	;;test	word [si+4],8000h
 25409                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25410 000040D4 7410                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 25411 000040D6 89F0                    	MOV	AX,SI
 25412                                  	;add	si,10
 25413 000040D8 83C60A                  	ADD	SI,SYSDEV.NAME
 25414                                  
 25415                                  ;hkn; NAME1 is in DOSDATA
 25416 000040DB BF[4B05]                	MOV	DI,NAME1
 25417 000040DE B90400                  	MOV	CX,4			; All devices are 8 letters
 25418 000040E1 F3A7                    	REPE	CMPSW			; Check for name in list
 25419                                  	;MOV	SI,AX
 25420                                  	; 27/06/2024
 25421 000040E3 96                      	xchg	ax,si
 25422 000040E4 7415                    	JZ	short IOCHK		; Found it?
 25423                                  SKIPDEV:
 25424 000040E6 C534                    	LDS	SI,[SI]			; Get address of next device
 25425 000040E8 83FEFF                  	CMP	SI,-1			; At end of list?
 25426 000040EB 75E3                    	JNZ	short LOOKIO
 25427                                  RET31:	
 25428 000040ED F9                      	STC				; Not found
 25429                                  RETNV:	
 25430 000040EE 8CD1                    	MOV	CX,SS
 25431 000040F0 8ED9                    	MOV	DS,CX
 25432                                  
 25433 000040F2 8F06[4B05]              	POP	WORD [NAME1]
 25434 000040F6 58                      	POP	AX
 25435 000040F7 59                      	POP	CX
 25436 000040F8 5F                      	POP	DI
 25437 000040F9 5E                      	POP	SI
 25438 000040FA C3                      	RETN
 25439                                  
 25440                                  IOCHK:
 25441                                  ;hkn; SS override for DEVPT
 25442 000040FB 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 25443                                  	;mov	bh,[si+4]
 25444 00004100 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 25445 00004103 80CFC0                  	OR	BH,0C0h
 25446 00004106 80E7DF                  	and	bh,0DFh
 25447                                  	;AND	BH,~(020h)		; Clears Carry
 25448 00004109 368936[9A05]            	MOV	[SS:DEVPT],SI
 25449 0000410E EBDE                    	JMP	short RETNV
 25450                                  
 25451                                  ;BREAK <Build_device_ent - Make a Directory entry>
 25452                                  ;---------------------------------------------------------------------------
 25453                                  ; Procedure Name : Build_device_ent
 25454                                  ;
 25455                                  ; Inputs:
 25456                                  ;	[NAME1] has name
 25457                                  ;	BH is attribute field (supplied by DEVNAME)
 25458                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 25459                                  ; Function:
 25460                                  ;	Build a directory entry for a device at DEVFCB
 25461                                  ; Outputs:
 25462                                  ;	BX points to DEVFCB
 25463                                  ;	SI points to dir_first field
 25464                                  ;	AH = input BH
 25465                                  ;	AL = 0
 25466                                  ;	dir_first = DEVPT
 25467                                  ;	Zero Set, Carry Clear
 25468                                  ; DS,ES,BP preserved, others destroyed
 25469                                  ;--------------------------------------------------------------------------
 25470                                  
 25471                                  Build_device_ent:
 25472 00004110 B82020                  	MOV	AX,"  " ; 2020h
 25473                                  
 25474                                  ;hkn; DEVFCB is in DOSDATA
 25475 00004113 BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 25476                                  
 25477                                  ;	Fill dir_ext  BUGBUG - use ERRNZs for this stuff!
 25478                                  
 25479 00004116 AB                      	STOSW
 25480 00004117 AA                      	STOSB				; Blank out extent field
 25481                                  	;mov	al,40h
 25482 00004118 B040                    	MOV	AL,attr_device
 25483                                  
 25484                                  ;	Fill Dir_attr
 25485                                  
 25486 0000411A AA                      	STOSB				; Set attribute field
 25487 0000411B 31C0                    	XOR	AX,AX
 25488 0000411D B90A00                  	MOV	CX,10
 25489                                  
 25490                                  ; Fill dir_pad
 25491                                  
 25492 00004120 F3AB                    	REP	STOSW			; Fill rest with zeros
 25493 00004122 E8C0C9                  	call	DATE16
 25494                                  
 25495                                  ;hkn; DEVFCB is in DOSDATA
 25496 00004125 BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 25497 00004128 92                      	XCHG	AX,DX
 25498                                  
 25499                                  ; Fill dir_time
 25500                                  
 25501 00004129 AB                      	STOSW
 25502 0000412A 92                      	XCHG	AX,DX
 25503                                  
 25504                                  ; Fill dir_date
 25505                                  
 25506 0000412B AB                      	STOSW
 25507 0000412C 89FE                    	MOV	SI,DI			; SI points to dir_first field
 25508 0000412E A1[9A05]                	MOV	AX,[DEVPT]
 25509                                  
 25510                                  ; Fill dir_first
 25511                                  
 25512 00004131 AB                      	STOSW				; Dir_first points to device
 25513 00004132 A1[9C05]                	MOV	AX,[DEVPT+2]
 25514                                  ;
 25515                                  ; Fill dir_size_l
 25516                                  ;
 25517 00004135 AB                      	STOSW
 25518 00004136 88FC                    	MOV	AH,BH			; Put device atts in AH
 25519                                  
 25520                                  ;hkn; DEVFCB is in DOSDATA
 25521 00004138 BB[4B05]                	MOV	BX,DEVFCB
 25522 0000413B 30C0                    	XOR	AL,AL			; Set zero, clear carry
 25523 0000413D C3                      	retn
 25524                                  
 25525                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 25526                                  ;----------------------------------------------------------------------------
 25527                                  ;
 25528                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 25529                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 25530                                  ;   If invalid, reset original CDS to root.
 25531                                  ;
 25532                                  ;   Inputs:	ThisCDS points to CDS of interest
 25533                                  ;		SS:DI points to temp buffer
 25534                                  ;   Outputs:	The current directory string is validated on the appropriate
 25535                                  ;		    drive
 25536                                  ;		ThisDPB changed
 25537                                  ;		ES:DI point to CDS
 25538                                  ;		Carry set if error (currently user FAILed to I 24)
 25539                                  ;   Registers modified: all
 25540                                  ;----------------------------------------------------------------------------
 25541                                  
 25542                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25543                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 25544                                  
 25545                                  ValidateCDS:
 25546                                  	; 19/05/2019 - Retro DOS v4.0
 25547                                  	; 28/07/2018 - Retro DOS v3.0
 25548                                  
 25549                                     %define  Temp	[bp-2]	; word
 25550                                     %define  SaveCDS	[bp-6]	; dword
 25551                                     %define  SaveCDSL	[bp-6]	; word
 25552                                     %define  SaveCDSH	[bp-4]	; word
 25553                                  
 25554                                  	;Enter
 25555 0000413E 55                      	push	bp
 25556 0000413F 89E5                    	mov	bp,sp
 25557 00004141 83EC06                  	sub	sp,6
 25558                                  
 25559 00004144 897EFE                  	MOV	Temp,DI
 25560                                  
 25561                                  ;hkn; SS override
 25562 00004147 36C536[A205]            	LDS	SI,[SS:THISCDS]
 25563 0000414C 8976FA                  	MOV	SaveCDSL,SI
 25564 0000414F 8C5EFC                  	MOV	SaveCDSH,DS
 25565                                  	;EnterCrit critDisk
 25566 00004152 E892D1                  	call	ECritDisk
 25567                                  	; 21/11/2022
 25568                                  	;test	byte [SI+curdir.flags+1],80h
 25569                                  	;test	word [si+67],8000h
 25570                                  	; 17/12/2022
 25571                                  	;test	byte [SI+68],80h
 25572 00004155 F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 25573                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 25574 00004159 7403                    	JZ	short _DoSplice
 25575 0000415B E98D00                  	JMP	FatFail
 25576                                  _DoSplice:
 25577 0000415E 30D2                    	XOR	DL,DL
 25578 00004160 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 25579                                  
 25580                                  ;hkn; SS is DOSDATA
 25581                                  	;Context ES
 25582 00004165 16                      	push	ss
 25583 00004166 07                      	pop	es
 25584                                  	;Invoke	FStrcpy
 25585 00004167 E85BD0                  	call	FStrCpy
 25586 0000416A 8B76FE                  	MOV	SI,Temp
 25587                                  
 25588                                  ;hkn; SS is DOSDATA
 25589                                  	;Context DS
 25590 0000416D 16                      	push	ss
 25591 0000416E 1F                      	pop	ds	
 25592                                  	;Invoke	Splice
 25593 0000416F E8132B                  	call	Splice
 25594                                  
 25595                                   ;hkn; SS is DOSDATA
 25596                                  	;Context DS			;   FatReadCDS (ThisCDS);
 25597 00004172 16                      	push	ss
 25598 00004173 1F                      	pop	ds
 25599 00004174 8816[4C03]              	MOV	[NoSetDir],DL
 25600 00004178 C43E[A205]              	LES	DI,[THISCDS]
 25601                                  	;SAVE	<BP>
 25602 0000417C 55                      	push	bp
 25603                                  	;Invoke	FATREAD_CDS
 25604 0000417D E81314                  	call	FATREAD_CDS	
 25605                                  	;RESTORE <BP>
 25606 00004180 5D                      	pop	bp
 25607 00004181 7268                    	JC	short FatFail
 25608                                  
 25609 00004183 C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 25610                                  	;cmp	word [si+73],-1
 25611 00004187 837C49FF                	CMP	word [SI+curdir.ID],-1
 25612 0000418B 7550                    	JNZ	short RestoreCDS
 25613                                  
 25614                                  ;hkn; SS is DOSDATA
 25615                                  	;Context ES
 25616 0000418D 16                      	push	ss
 25617 0000418E 07                      	pop	es
 25618                                  
 25619                                  ;hkn; SS override
 25620                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 25621 0000418F 36FF36[B205]            	push	word [SS:WFP_START]
 25622                                  	;cmp	si,[bp-6]
 25623 00004194 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 25624 00004197 750B                    	JNZ	short DoChdir
 25625                                  	;mov	di,[bp-2]
 25626 00004199 8B7EFE                  	MOV	DI,Temp
 25627                                  
 25628                                  ;hkn; SS override
 25629 0000419C 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 25630                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 25631 000041A1 E821D0                  	call	FStrCpy
 25632                                  DoChdir:
 25633                                  ;hkn; SS is DOSDATA
 25634                                  	;Context DS
 25635 000041A4 16                      	push	ss
 25636 000041A5 1F                      	pop	ds
 25637                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 25638 000041A6 FF36[6D05]              	push	word [SATTRIB]
 25639 000041AA 55                      	push	bp
 25640                                  	;Invoke	DOS_ChDir
 25641 000041AB E85DEF                  	call	DOS_CHDIR
 25642                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 25643 000041AE 5D                      	pop	bp
 25644 000041AF 5B                      	pop	bx
 25645 000041B0 8F06[B205]              	pop	word [WFP_START]
 25646 000041B4 881E[6D05]              	MOV	[SATTRIB],BL
 25647 000041B8 C576FA                  	LDS	SI,SaveCDS
 25648 000041BB 730F                    	JNC	short SetCluster	;	if (c == -1) {
 25649                                  
 25650                                  ;hkn; SS override for THISCDS
 25651 000041BD 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 25652 000041C2 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 25653 000041C7 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 25654 000041C9 884C03                  	MOV	[SI+3],CL		;	    }
 25655                                  SetCluster:
 25656                                  	; 16/02/2024
 25657                                  	;;mov	word [si+73],0FFFFh
 25658                                  	;MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 25659                                  	;
 25660 000041CC 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 25661                                  	; 21/11/2022
 25662                                  	;test	byte [si+curdir.flags+1],20h
 25663                                  	; 19/05/2019
 25664                                  	; MSDOS 6.0
 25665                                  	; 17/12/2022
 25666                                  	;test	byte [si+68],20h
 25667 000041D1 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 25668                                  	;;test	word [si+67],2000h
 25669                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 25670 000041D5 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 25671 000041D7 B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 25672                                  _setdirclus:
 25673                                  	;mov	[si+73],cx
 25674 000041DA 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 25675                                  RestoreCDS:
 25676 000041DD C47EFA                  	LES	DI,SaveCDS
 25677 000041E0 36893E[A205]            	MOV	[SS:THISCDS],DI
 25678 000041E5 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 25679 000041EA F8                      	CLC
 25680                                  FatFail:
 25681                                  	;LeaveCrit critDisk
 25682 000041EB E814D1                  	call	LCritDisk
 25683                                  
 25684                                  	;les	di,[bp-6]
 25685 000041EE C47EFA                  	LES	DI,SaveCDS
 25686                                  	;Leave
 25687 000041F1 89EC                    	mov	sp,bp
 25688 000041F3 5D                      	pop	bp
 25689 000041F4 C3                      	retn
 25690                                  
 25691                                  ; 28/07/2018 - Retro DOS v3.0
 25692                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 25693                                  
 25694                                  ;Break	<CheckThisDevice - Check for being a device>
 25695                                  ;---------------------------------------------------------------------------
 25696                                  ;
 25697                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 25698                                  ;   device specified. We will return carry if there is a device present. 
 25699                                  ;   The forms of devices we will recognize are:
 25700                                  ;
 25701                                  ;	[path]device
 25702                                  ;
 25703                                  ;   Note that the drive letter has *already* been removed. All other forms
 25704                                  ;   are not considered to be devices. If such a device is found we change
 25705                                  ;   the source pointer to point to the device component.
 25706                                  ;
 25707                                  ;   Inputs:	ES is DOSDATA
 25708                                  ;		DS:SI contains name
 25709                                  ;   Outputs:	ES is DOSDATA
 25710                                  ;		DS:SI point to name or device
 25711                                  ;		Carry flag set if device was found
 25712                                  ;		Carry flag reset otherwise
 25713                                  ;   Registers Modified: all except ES:DI, DS
 25714                                  ;----------------------------------------------------------------------------
 25715                                  
 25716                                  CheckThisDevice:
 25717 000041F5 57                      	push	di
 25718 000041F6 56                      	push	si
 25719 000041F7 89F7                    	MOV	DI,SI
 25720                                  
 25721                                  ; Check for presence of \dev\ (Dam multiplan!)
 25722                                  
 25723 000041F9 8A04                    	MOV	AL,[SI]
 25724 000041FB E8620D                  	call	PATHCHRCMP		; is it a path char?
 25725 000041FE 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 25726 00004200 46                      	INC	SI			; simulate LODSB
 25727                                  
 25728                                  ; We have the leading path separator. Look for DEV part.
 25729                                  
 25730 00004201 AD                      	LODSW
 25731 00004202 0D2020                  	OR	AX,2020h
 25732 00004205 3D6465                  	cmp	ax,"de"
 25733                                  	;CMP	AX,"e"<< 8 + "d"
 25734 00004208 752D                    	JNZ	short NotDevice		; not "de", assume not device
 25735 0000420A AC                      	LODSB
 25736 0000420B 0C20                    	OR	AL,20h
 25737 0000420D 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 25738 0000420F 7526                    	JNZ	short NotDevice
 25739 00004211 AC                      	LODSB
 25740 00004212 E84B0D                  	call	PATHCHRCMP		; do we have the last path separator?
 25741 00004215 7520                    	JNZ	short NotDevice		; no. go for it.
 25742                                  
 25743                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 25744                                  ; SI and DevName may destroy DS.
 25745                                  
 25746                                  ParseDev:
 25747 00004217 1E                      	push	ds
 25748 00004218 56                      	push	si			; preserve the source pointer
 25749 00004219 E8860C                  	call	NameTrans		; advance DS:SI
 25750 0000421C 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 25751 0000421F F9                      	STC				; simulate a Carry return from DevName
 25752 00004220 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 25753                                  
 25754                                  ;hkn; SS is DOSDATA
 25755 00004222 16                      	push	ss
 25756 00004223 1F                      	pop	ds
 25757                                  
 25758                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 25759                                  ;
 25760                                  ; SR;
 25761                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 25762                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 25763                                  ; old call set the volume attribute bit.
 25764                                  
 25765 00004224 A0[6D05]                	mov	al,[SATTRIB]
 25766 00004227 A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 25767                                  
 25768                                  ; M026 - end
 25769                                  
 25770 0000422A E885FE                  	call	DEVNAME
 25771                                  
 25772                                  SkipSearch:
 25773 0000422D 5E                      	pop	si
 25774 0000422E 1F                      	pop	ds
 25775                                  
 25776                                  ; SI points to the beginning of the potential device. If we have a device
 25777                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 25778                                  ; original value. At this point Carry set indicates FILE.
 25779                                  
 25780                                  CheckReturn:
 25781 0000422F 5F                      	pop	di			; get original SI
 25782 00004230 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 25783 00004232 89FE                    	MOV	SI,DI
 25784                                  Check_Done:
 25785 00004234 5F                      	pop	di
 25786 00004235 F5                      	CMC				; invert carry. Carry => device
 25787 00004236 C3                      	retn
 25788                                  NotDevice:
 25789 00004237 F9                      	STC
 25790 00004238 EBF5                    	JMP	short CheckReturn
 25791                                  
 25792                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 25793                                  ;-----------------------------------------------------------------------------
 25794                                  ;
 25795                                  ; Procedure Name : LookupPath
 25796                                  ;
 25797                                  ; Output  DS:SI -> path name,
 25798                                  ;	  ES:DI -> dir entry info buffer
 25799                                  ;	  ES:CX -> extended dir info buffer
 25800                                  ;
 25801                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 25802                                  ;			     FastOpen, DS:SI points to char just one after
 25803                                  ;			     the last char of path name which is fully or
 25804                                  ;			     partially found in FastOPen
 25805                                  ;	  carry flag set : FastOpen not in memory or path name not found
 25806                                  ;
 25807                                  ;----------------------------------------------------------------------------
 25808                                  
 25809                                  LookupPath:
 25810                                  ;	PUSH	AX
 25811                                  
 25812                                  ;hkn; SS override
 25813                                  	;test	byte [ss:FastOpenFlg],1
 25814 0000423A 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 25815 00004240 7503                    	JNZ	short FASTINST			    ; and this routine is
 25816                                  NOLOOK:
 25817 00004242 E99700                  	JMP	NOLOOKUP			    ; executed once
 25818                                  
 25819                                  FASTINST:
 25820                                  ;hkn; SS override
 25821                                  	;test	byte [ss:FastOpenFlg],8
 25822 00004245 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 25823 0000424B 75F5                    	JNZ	short NOLOOK			    ; yes
 25824                                  
 25825 0000424D BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 25826                                  
 25827                                  ;hkn; SS override
 25828 00004250 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 25829 00004255 BF[460D]                	MOV	DI,Dir_Info_Buff
 25830 00004258 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 25831 0000425B B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 25832 0000425D 1E                      	PUSH	DS
 25833 0000425E 07                      	POP	ES
 25834                                  
 25835                                  ;hkn; SS override
 25836                                  	;call	far [bx+2]
 25837 0000425F FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 25838 00004262 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 25839                                  
 25840 00004264 8D5CFE                  	LEA	BX,[SI-2]
 25841                                  
 25842                                  ;hkn; SS override
 25843 00004267 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 25844 0000426C 745D                    	JZ	short NOTFOUND			    ; no
 25845                                  
 25846                                  	; 19/05/2019 - Retro DOS v4.0
 25847                                  
 25848                                  	; MSDOS 6.0				    ; fully or partially found
 25849 0000426E 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 25850 00004271 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 25851 00004273 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 25852                                  
 25853                                  ;hkn; SS override for attrib/sattrib
 25854 00004274 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 25855 00004279 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 25856 0000427E 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 25857                                  	;mov	ch,[es:di+0Bh]
 25858 00004283 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 25859 00004287 E81BFE                  	call	MatchAttributes 		    ;AN000;FO.;
 25860                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 25861 0000428A 59                      	POP	CX				    ;AN000;FO.;
 25862 0000428B 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 25863                                  parfnd:
 25864                                  
 25865                                  ;hkn; SS override
 25866 0000428D 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 25867 00004292 89CB                    	MOV	BX,CX
 25868                                  	; MSDOS 6.0
 25869                                  	;mov	ax,[bx+7]
 25870 00004294 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 25871                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 25872 00004297 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 25873 0000429B 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 25874 0000429E 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 25875                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25876                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 25877                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 25878 000042A2 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 25879 000042A5 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 25880                                  
 25881 000042A9 06                      	PUSH	ES				    ; save ES
 25882                                  ;hkn; SS override
 25883 000042AA 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 25884 000042AF 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 25885                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 25886 000042B2 07                      	POP	ES				    ; pop ES
 25887                                  ;SR;
 25888                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 25889                                  ;indicate it is not a root dir
 25890                                  
 25891 000042B3 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 25892 000042BA 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 25893 000042BF 89FB                    	MOV	BX,DI				    ; start of entry
 25894                                  	;lea	si,[di+1Ah]
 25895 000042C1 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 25896                                  						    ; dir_first field in the
 25897                                  						    ; dir entry
 25898                                  ;hkn; SS override for FastOpenFlg
 25899                                  	;or	byte [ss:FastOpenFlg],12h ; 29/12/2022
 25900 000042C4 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 25901                                  ;	POP	AX
 25902 000042CA C3                      	RETN
 25903                                  NOTFOUND:
 25904 000042CB 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 25905 000042CE 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 25906 000042D0 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 25907                                  Partial_Success:
 25908                                  	;and	byte [SS:FastOpenFlg],0FBh
 25909 000042D6 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 25910                                  NOLOOKUP:
 25911                                  ;	POP	AX
 25912 000042DC F9                      	STC
 25913 000042DD C3                      	RETN
 25914                                  
 25915                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 25916                                  ;-----------------------------------------------------------------------------
 25917                                  ;
 25918                                  ; Procedure Name : InsertPath
 25919                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 25920                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 25921                                  ;	  DS = DOSDATA
 25922                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 25923                                  ;
 25924                                  ;-----------------------------------------------------------------------------
 25925                                  
 25926                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25927                                  
 25928                                  InsertPath:
 25929 000042DE 9C                      	PUSHF
 25930                                  ;hkn; SS override for FastOpenFlag
 25931                                  	;test	byte [SS:FastOpenFlg], 1
 25932 000042DF 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25933 000042E5 7476                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 25934                                  	;test	byte [ss:FastOpenFlg],2
 25935 000042E7 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 25936 000042ED 740D                    	JZ	short INSERT_DIR_INFO		; no
 25937                                  	;and	byte [ss:FastOpenFlg],0FDh
 25938 000042EF 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 25939 000042F5 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 25940 000042FA EB5B                    	JMP	short GET_NEXT2
 25941                                  
 25942                                  INSERT_DIR_INFO:				; save registers
 25943 000042FC 1E                      	PUSH	DS
 25944 000042FD 06                      	PUSH	ES
 25945 000042FE 53                      	PUSH	BX
 25946 000042FF 56                      	PUSH	SI
 25947 00004300 57                      	PUSH	DI
 25948 00004301 51                      	PUSH	CX
 25949 00004302 50                      	PUSH	AX
 25950                                  
 25951                                  ;hkn; SS override
 25952 00004303 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 25953 00004308 BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 25954                                  
 25955                                  ; 21/02/2024
 25956                                  %if 0
 25957                                  	;mov	ax,[di+6]
 25958                                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 25959                                  	; MSDOS 6.0
 25960                                  	;mov	[ss:si+1],ax
 25961                                  	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 25962                                  	; 19/05/2019 - Retro DOS v4.0
 25963                                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 25964                                  
 25965                                  ;hkn; SS is DOSDATA
 25966                                  	push	ss
 25967                                  	pop	ds
 25968                                  	; MSDOS 3.3
 25969                                  	;;mov	[si+1],ax
 25970                                  	;MOV	[SI+FEI.dirsec],AX
 25971                                  	; MSDOS 6.0
 25972                                  	;mov	[si+3],ax
 25973                                  	MOV	[SI+FEI.dirsec+2],AX		;AN000;>32mb save high dir sector
 25974                                  %else
 25975                                  	;lds	ax,[di+6]
 25976 0000430B C54506                  	lds	ax,[di+BUFFINFO.buf_sector]	; get directory sector
 25977                                  	;mov	[ss:si+1],ax
 25978                                  	; 27/06/2024
 25979                                  	;mov	[ss:si+FEI.dirsec],ax
 25980                                  	;
 25981                                  	;mov	[ss:si+3],ax
 25982 0000430E 368C5C03                	mov	[ss:si+FEI.dirsec+2],ds
 25983 00004312 16                      	push	ss
 25984 00004313 1F                      	pop	ds
 25985                                  	; 27/06/2024
 25986 00004314 894401                  	mov	[si+FEI.dirsec],ax
 25987                                  %endif
 25988                                  
 25989                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25990 00004317 A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 25991                                  	;mov	[si+5],ax ; MSDOS 6.0
 25992                                  	;;mov	[si+3],ax ; MSDOS 3.3
 25993 0000431A 894405                  	MOV	[SI+FEI.clusnum],AX
 25994                                  	; MSDOS 6.0
 25995 0000431D A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 25996                                  	;mov	[si+7],ax
 25997 00004320 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 25998 00004323 A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 25999                                  	;mov	[si+9],ax
 26000 00004326 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 26001                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26002 00004329 89D8                    	MOV	AX,BX
 26003                                  	;;add	di,16  ; MSDOS 3.3
 26004                                  	;add	di,20  ; MSDOS 6.0
 26005 0000432B 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 26006 0000432E 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 26007                                  	;mov	cl,32
 26008 00004330 B120                    	MOV	CL,dir_entry.size
 26009 00004332 F6F1                    	DIV	CL
 26010                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 26011 00004334 8804                    	mov	[si],al
 26012                                  
 26013 00004336 1E                      	PUSH	DS
 26014 00004337 07                      	POP	ES
 26015                                  
 26016 00004338 8E1E[E405]              	MOV	DS,[CURBUF+2]
 26017 0000433C 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 26018                                  	;cmp	word [di+1Ah],0
 26019 0000433E 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 26020                                  					; never insert info when file is empty
 26021 00004342 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 26022                                  
 26023 00004344 56                      	PUSH	SI			; ES:BX -> extended info
 26024 00004345 5B                      	POP	BX
 26025                                  
 26026                                  	;mov	al,2
 26027 00004346 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 26028 00004348 BE[300D]                	MOV	SI,FastOpenTable
 26029                                  	;call	far [es:si+2]	 ; call dword ptr es:[si+2] ; 29/12/2022
 26030                                  	; 07/12/2022
 26031 0000434B 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 26032                                  
 26033 0000434F F8                      	CLC
 26034                                  SKIP_INSERT:
 26035 00004350 58                      	POP	AX
 26036 00004351 59                      	POP	CX			; restore registers
 26037 00004352 5F                      	POP	DI
 26038 00004353 5E                      	POP	SI
 26039 00004354 5B                      	POP	BX
 26040 00004355 07                      	POP	ES
 26041 00004356 1F                      	POP	DS
 26042                                  GET_NEXT2:
 26043                                  	;or	[ss:FastOpenFlg],8
 26044 00004357 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 26045                                  					; we got dir info from fastopen so
 26046                                  GET_NEXT_ELEMENT:
 26047 0000435D 9D                      	POPF
 26048 0000435E C3                      	RETN
 26049                                  
 26050                                  ;============================================================================
 26051                                  ; DEV.ASM (MSDOS 6.0, 1991)
 26052                                  ;============================================================================
 26053                                  ; 17/07/2018 - Retro DOS v3.0
 26054                                  ; 30/04/2019 - Retro DOS v4.0
 26055                                  
 26056                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 26057                                  
 26058                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 26059                                  
 26060                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 26061                                  
 26062                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 26063                                  ;DEV001s:
 26064                                  ;		length of packets
 26065 0000435F 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 26066                                  ;LenTab: db	22,14,22,13,15,14
 26067                                  
 26068                                  ;	Error Function
 26069                                  
 26070                                  CmdTab:
 26071 00004365 8604                    	DB	86h, DEVRD	; 0 input
 26072 00004367 8605                    	DB	86h, DEVRDND	; 1 input status
 26073 00004369 8708                    	DB	87h, DEVWRT	; 2 output
 26074 0000436B 870A                    	DB	87h, DEVOST	; 3 output status
 26075 0000436D 8607                    	DB	86h, DEVIFL	; 4 input flush
 26076 0000436F 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 26077                                  
 26078                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 26079                                  
 26080                                  ;CmdTab:
 26081                                  ;	db	86h, 4
 26082                                  ;	db	86h, 5
 26083                                  ;	db	87h, 8
 26084                                  ;	db	87h, 10
 26085                                  ;	db	86h, 7
 26086                                  ;	db	86h, 5
 26087                                  
 26088                                  ;DEV001E:
 26089                                  
 26090                                  ; 30/04/2019 - Retro DOS v4.0
 26091                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 26092                                  
 26093                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 26094                                  ;----------------------------------------------------------------------------
 26095                                  ;
 26096                                  ; Procedure Name : IOFUNC
 26097                                  ;
 26098                                  ; Inputs:
 26099                                  ;	DS:SI Points to SFT
 26100                                  ;	AH is function code
 26101                                  ;		= 0 Input
 26102                                  ;		= 1 Input Status
 26103                                  ;		= 2 Output
 26104                                  ;		= 3 Output Status
 26105                                  ;		= 4 Flush
 26106                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 26107                                  ;				   present.
 26108                                  ;	AL = character if output
 26109                                  ; Function:
 26110                                  ;	Perform indicated I/O to device or file
 26111                                  ; Outputs:
 26112                                  ;	AL is character if input
 26113                                  ;	If a status call
 26114                                  ;		zero set if not ready
 26115                                  ;		zero reset if ready (character in AL for input status)
 26116                                  ; For regular files:
 26117                                  ;	Input Status
 26118                                  ;		Gets character but restores position
 26119                                  ;		Zero set on EOF
 26120                                  ;	Input
 26121                                  ;		Gets character advances position
 26122                                  ;		Returns ^Z on EOF
 26123                                  ;	Output Status
 26124                                  ;		Always ready
 26125                                  ; AX altered, all other registers preserved
 26126                                  ;----------------------------------------------------------------------------
 26127                                  
 26128                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26129                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 26130                                  
 26131                                  IOFUNC:
 26132 00004371 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 26133                                  					; DEVIOBUF
 26134 00004376 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 26135 0000437D 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 26136 00004384 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 26137                                  	;test	byte [si+6],80h
 26138                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 26139 00004388 F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 26140 0000438C 7403                    	JZ	short IOTO22		;AN000;
 26141 0000438E E9A400                  	JMP	IOTOFILE		;AN000;
 26142                                  IOTO22:
 26143                                  	;test	word [si+5],80h
 26144                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 26145 00004391 F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 26146 00004395 7503                    	JNZ	short IOTO33		;AN000;
 26147 00004397 E99B00                  	JMP	IOTOFILE		;AN000;
 26148                                  IOTO33:
 26149 0000439A 06                      	push	es ; * (MSDOS 6.21)
 26150 0000439B E8C8C0                  	call	save_world
 26151 0000439E 8CDA                    	MOV	DX,DS
 26152 000043A0 8CD3                    	MOV	BX,SS
 26153 000043A2 8EDB                    	MOV	DS,BX
 26154 000043A4 8EC3                    	MOV	ES,BX
 26155 000043A6 31DB                    	XOR	BX,BX
 26156 000043A8 80FC05                  	cmp	ah,5		    ; system wait enabled?
 26157 000043AB 7503                    	jnz	short _no_sys_wait
 26158                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26159                                  	; 16/12/2022
 26160 000043AD 80CF04                  	or	bh,04h
 26161                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 26162                                  				    ; It is up to device driver to carry out
 26163                                  				    ; appropriate action.
 26164                                  _no_sys_wait:
 26165 000043B0 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 26166 000043B4 31DB                    	XOR	BX,BX
 26167 000043B6 881E[8903]              	MOV	[IOMED],BL
 26168                                  
 26169 000043BA 88E3                    	MOV	BL,AH		 	; get function
 26170 000043BC 2E8AA7[5F43]            	MOV	AH,[cs:BX+LenTab]
 26171 000043C1 D1E3                    	SHL	BX,1
 26172 000043C3 2E8B8F[6543]            	MOV	CX,[cs:BX+CmdTab]
 26173 000043C8 BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 26174 000043CB 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 26175 000043CF 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 26176                                  
 26177 000043D3 8EDA                    	MOV	DS,DX
 26178 000043D5 E86401                  	CALL	DEVIOCALL
 26179 000043D8 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 26180 000043DD 21FF                    	and	di,di
 26181 000043DF 7833                    	js	short DevErr
 26182                                  OKDevIO:
 26183 000043E1 8CD0                    	MOV	AX,SS
 26184 000043E3 8ED8                    	MOV	DS,AX
 26185                                  
 26186                                  	;cmp	ch,5
 26187 000043E5 80FD05                  	CMP	CH,DEVRDND
 26188 000043E8 7506                    	JNZ	short DNODRD
 26189 000043EA A0[8903]                	MOV	AL,[IORCHR]
 26190 000043ED A2[BC03]                	MOV	[DEVIOBUF],AL
 26191                                  
 26192                                  DNODRD: 
 26193 000043F0 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 26194 000043F4 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 26195                                  	;and	ah,2
 26196 000043F6 80E402                  	AND	AH,STBUI>>8
 26197                                  
 26198                                  QuickReturn:				;AN000; 2/13/KK
 26199 000043F9 E853C0                  	call	restore_world
 26200 000043FC 07                      	pop	es ; * (MSDOS 6.21)
 26201                                  
 26202                                  	; SR;
 26203                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 26204                                  	; IoStatFail = -1 (set after return from the I24)
 26205                                  
 26206                                  	; MSDOS 6.0
 26207 000043FD 9C                      	pushf
 26208 000043FE 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 26209 00004402 98                      	cbw				;sign extend to word
 26210                                  	;cmp	ax,-1
 26211                                  	; 27/06/2024
 26212 00004403 3CFF                    	cmp	al,0FFh ; -1
 26213 00004405 7507                    	jne	short not_fail_ret
 26214 00004407 36FE06[8300]            	inc	byte [ss:IoStatFail]
 26215 0000440C 9D                      	popf
 26216 0000440D C3                      	retn
 26217                                  
 26218                                  not_fail_ret:
 26219 0000440E 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 26220 00004412 9D                      	popf
 26221 00004413 C3                      	retn
 26222                                  
 26223                                  DevErr:
 26224 00004414 88CC                    	MOV	AH,CL
 26225 00004416 E87B0D                  	call	CHARHARD
 26226 00004419 3C01                    	CMP	AL,1
 26227 0000441B 7507                    	JNZ	short NO_RETRY
 26228 0000441D E82FC0                  	call	restore_world
 26229                                  	; 12/05/2019
 26230 00004420 07                      	pop	es ; * (MSDOS 6.21)		
 26231 00004421 E94DFF                  	JMP	IOFUNC	; 10/08/2018
 26232                                  
 26233                                  NO_RETRY:
 26234                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 26235                                  	; ready so that DOS doesn't get caught in a status loop when user 
 26236                                  	; simply wants to ignore the error.
 26237                                  	;
 26238                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 26239                                  	; should be checked by the caller on return
 26240                                  
 26241                                  					; SS override
 26242 00004424 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 26243                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 26244                                  
 26245                                  	; SR;
 26246                                  	; Check if user failed
 26247                                  
 26248                                  	; MSDOS 6.0
 26249 0000442A 3C03                    	cmp	al,3
 26250 0000442C 7505                    	jnz	short not_fail
 26251 0000442E 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 26252                                  not_fail:
 26253 00004433 EBAC                    	JMP	short OKDevIO
 26254                                  
 26255                                  IOTOFILE:
 26256 00004435 08E4                    	OR	AH,AH
 26257 00004437 7421                    	JZ	short IOIN
 26258 00004439 FECC                    	DEC	AH
 26259 0000443B 7405                    	JZ	short IOIST
 26260 0000443D FECC                    	DEC	AH
 26261 0000443F 7411                    	JZ	short IOUT
 26262                                  IOUT_retn:	; 18/12/2022
 26263 00004441 C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 26264                                  IOIST:
 26265                                  	;push	word [si+15h]
 26266 00004442 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 26267                                  	;push	word [si+17h]
 26268 00004445 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 26269 00004448 E80F00                  	CALL	IOIN
 26270                                  	;pop	word [si+17h]
 26271 0000444B 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 26272                                  	;pop	word [si+15h]
 26273 0000444E 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 26274 00004451 C3                      	retn
 26275                                  IOUT:
 26276 00004452 E82500                  	CALL	SETXADDR
 26277 00004455 E8CCEF                  	call	DOS_WRITE
 26278                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 26279                                  	; 18/12/2022
 26280 00004458 EB4F                    	jmp	RESTXADDR
 26281                                  ;IOUT_retn:
 26282                                  	;retn			; come crying to me when things don't
 26283                                  				; work ARR
 26284                                  IOIN:
 26285 0000445A E81D00                  	CALL	SETXADDR
 26286                                  					; SS override for DOS34_FLAG
 26287                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 26288                                  	;or	word [ss:DOS34_FLAG],40h
 26289                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26290                                  	; 16/12/2022
 26291 0000445D 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 26292 00004463 E8BDED                  	CALL	DOS_READ
 26293                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 26294                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 26295                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26296                                  	; 16/12/2022
 26297 00004466 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 26298 0000446C 09C9                    	OR	CX,CX			; Check EOF
 26299 0000446E E83800                  	CALL	RESTXADDR
 26300                                  					; SS override
 26301 00004471 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 26302 00004475 75CA                    	jnz	short IOUT_retn	
 26303 00004477 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 26304 00004479 C3                      	retn
 26305                                  
 26306                                  SETXADDR:
 26307                                  					; SS override
 26308 0000447A 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 26309                                  
 26310 0000447F 06                      	push	es ; * (MSDOS 6.21)
 26311                                  
 26312 00004480 E8E3BF                  	call	save_world
 26313                                  					; SS override for DMAADD and THISSFT
 26314                                  	; 24/09/2023
 26315                                  	;PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 26316                                  	;PUSH	WORD [SS:DMAADD+2]
 26317 00004483 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 26318                                  
 26319                                  ; 22/02/2024
 26320                                  %if 0
 26321                                  	push	ss
 26322                                  	pop	ds
 26323                                  
 26324                                  	; 24/09/2023
 26325                                  	push	word [DMAADD]
 26326                                  	push	word [DMAADD+2]
 26327                                  
 26328                                  	MOV	[THISSFT],SI		; Finish setting SFT pointer
 26329                                  	MOV	CX,[IOXAD+2]
 26330                                  	MOV	[DMAADD+2],CX
 26331                                  	MOV	CX,[IOXAD]
 26332                                  	MOV	[DMAADD],CX		; Set byte trans addr
 26333                                  %else
 26334                                  	; 22/02/2024 - Retro DOS v4.1
 26335                                  	; PCDOS 7.1 IBMDOS.COM
 26336                                  	
 26337 00004488 36C50E[2C03]            	lds	cx,[ss:DMAADD]		; Save Disk transfer address
 26338 0000448D 51                      	push	cx
 26339 0000448E 1E                      	push	ds
 26340 0000448F 36C50E[8A03]            	lds	cx,[ss:IOXAD]		; Set byte trans address
 26341 00004494 368C1E[2E03]            	mov	[ss:DMAADD+2],ds
 26342 00004499 16                      	push	ss
 26343 0000449A 1F                      	pop	ds
 26344 0000449B 890E[2C03]              	mov	[DMAADD],cx
 26345 0000449F 8936[9E05]              	mov	[THISSFT],si
 26346                                  %endif
 26347 000044A3 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 26348 000044A7 EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 26349                                  
 26350                                  RESTXADDR:
 26351 000044A9 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 26352 000044AD 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 26353 000044B1 8F06[2C03]              	POP	WORD [DMAADD]
 26354                                  
 26355 000044B5 E897BF                  	call	restore_world
 26356                                  
 26357 000044B8 07                      	pop	es ; * (MSDOS 6.21)
 26358                                  					; SS override
 26359                                  RESTRET:
 26360 000044B9 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 26361                                  
 26362                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 26363                                  ; 21/11/2022
 26364                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 26365                                  
 26366                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 26367                                  
 26368                                  ;----------------------------------------------------------------------------
 26369                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 26370                                  ;
 26371                                  ;	Dev_Open_SFT issues an open call to the device associated with
 26372                                  ;	the SFT.
 26373                                  ;
 26374                                  ;	ENTRY	(ES:DI) = SFT
 26375                                  ;	EXIT	none
 26376                                  ;	USES	all
 26377                                  ;----------------------------------------------------------------------------
 26378                                  
 26379                                  DEV_OPEN_SFT:
 26380 000044BE 06                      	push	es ; * (MSDOS 6.21)
 26381 000044BF E8A4BF                  	call	save_world
 26382                                  	;mov	al,0Dh	
 26383 000044C2 B00D                    	MOV	AL,DEVOPN
 26384 000044C4 EB06                    	JMP	SHORT DO_OPCLS
 26385                                  
 26386                                  ;----------------------------------------------------------------------------
 26387                                  ; Procedure Name : DEV_CLOSE_SFT
 26388                                  ;
 26389                                  ; Inputs:
 26390                                  ;	ES:DI Points to SFT
 26391                                  ; Function:
 26392                                  ;	Issue a CLOSE call to the correct device
 26393                                  ; Outputs:
 26394                                  ;	None
 26395                                  ; ALL preserved
 26396                                  ;----------------------------------------------------------------------------
 26397                                  
 26398                                  DEV_CLOSE_SFT:
 26399 000044C6 06                      	push	es ; * (MSDOS 6.21)
 26400 000044C7 E89CBF                  	call	save_world
 26401                                  	;mov	al,0Eh	
 26402 000044CA B00E                    	MOV	AL,DEVCLS
 26403                                  
 26404                                  	; Main entry for device open and close. AL contains the function 
 26405                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 26406                                  	; open/close to block devices. This allows networks to function but 
 26407                                  	; does NOT hang up with bogus change-line code.
 26408                                  
 26409                                  	;entry	DO_OPCLS
 26410                                  DO_OPCLS:
 26411                                  	; Is the SFT for the net? If so, no action necessary.
 26412                                  
 26413                                  	; MSDOS 6.0
 26414                                  	;test	word [es:di+5],8000h
 26415                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 26416 000044CC 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 26417 000044D1 7564                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 26418 000044D3 30E4                    	XOR	AH,AH			; Unit
 26419                                  	;test	byte [es:di+5],80h
 26420 000044D5 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26421                                  	;les	di,[es:di+7]
 26422 000044DA 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 26423 000044DE 7511                    	JNZ	short GOT_DEV_ADDR
 26424                                  
 26425                                  	; We are about to call device open/close on a block driver. If no 
 26426                                  	; sharing then just short circuit to done.
 26427                                  	
 26428                                  	; MSDOS 6.0
 26429                                  					; SS override
 26430 000044E0 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 26431 000044E6 764F                    	JBE	short OPCLS_DONE	;AN010; yes
 26432                                  
 26433                                  ; 22/02/2024
 26434                                  %if 0
 26435                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26436                                  	;mov	ah,[es:di+1]
 26437                                  	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 26438                                  	mov	cl,[es:di]
 26439                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 26440                                  %else
 26441                                  	; 22/02/2024 - Retro DOS v4.1
 26442                                  	; (PCDOS 7.1 IBMDOS.COM)
 26443                                  	;mov	cx,[es:di+DPB.DRIVE]
 26444 000044E8 268B0D                  	mov	cx,[es:di]
 26445 000044EB 88EC                    	mov	ah,ch			; AH = unit
 26446                                  					; CL = drive
 26447                                  %endif
 26448                                  
 26449                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 26450                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 26451 000044ED 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 26452                                  GOT_DEV_ADDR:				; ES:DI -> device
 26453                                  	;test	word [es:di+4],800h
 26454                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 26455 000044F1 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 26456 000044F6 743F                    	JZ	short OPCLS_DONE	; Device can't
 26457 000044F8 06                      	PUSH	ES
 26458 000044F9 1F                      	POP	DS
 26459 000044FA 89FE                    	MOV	SI,DI			; DS:SI -> device
 26460                                  
 26461                                  OPCLS_RETRY:
 26462                                  	;Context ES
 26463 000044FC 16                      	push	ss
 26464 000044FD 07                      	pop	es
 26465                                  					; DEVCALL is in DOSDATA
 26466 000044FE BF[5A03]                	MOV	DI,DEVCALL
 26467                                  
 26468 00004501 89FB                    	MOV	BX,DI
 26469 00004503 50                      	PUSH	AX
 26470                                  	;mov	al,13
 26471 00004504 B00D                    	MOV	AL,DOPCLHL
 26472 00004506 AA                      	STOSB				; Length
 26473 00004507 58                      	POP	AX
 26474                                  
 26475 00004508 86E0                    	XCHG	AH,AL
 26476                                  	;STOSB				; Unit
 26477                                  	; 22/02/2024 (PCDOS 7.1 IBMDOS.COM)
 26478 0000450A AB                      	stosw				; Unit, Command
 26479 0000450B 86E0                    	XCHG	AH,AL
 26480                                  	;STOSB				; Command
 26481                                  
 26482 0000450D 26C7050000              	MOV	WORD [ES:DI],0		; Status
 26483 00004512 50                      	PUSH	AX			; Save Unit,Command
 26484                                  	;invoke	DEVIOCALL2
 26485 00004513 E82900                  	call	DEVIOCALL2
 26486                                  
 26487                                  	;mov	di,[es:bx+3]
 26488 00004516 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 26489                                  	;test	di,8000h
 26490                                  	;jz	short OPCLS_DONEP	
 26491 0000451A 21FF                    	and	di,di
 26492 0000451C 7918                    	jns	short OPCLS_DONEP	; No error
 26493                                  	; 21/11/2022
 26494                                  	;test	word [si+4],8000h
 26495                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 26496                                  	;test	word [si+5],80h
 26497 0000451E F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 26498 00004522 7404                    	JZ	short BLKDEV
 26499 00004524 B486                    	MOV	AH,86H			; Read error in data, Char dev
 26500 00004526 EB04                    	JMP	SHORT HRDERR
 26501                                  BLKDEV:
 26502 00004528 88C8                    	MOV	AL,CL			; Drive # in AL
 26503 0000452A B406                    	MOV	AH,6			; Read error in data, Blk dev
 26504                                  HRDERR:
 26505                                  	;invoke	CHARHARD
 26506 0000452C E8650C                  	call	CHARHARD
 26507 0000452F 3C01                    	cmp	al,1
 26508 00004531 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 26509                                  					;  Note that FAIL is essentually IGNORED
 26510 00004533 58                      	POP	AX			; Get back Unit, Command
 26511 00004534 EBC6                    	JMP	short OPCLS_RETRY
 26512                                  OPCLS_DONEP:
 26513 00004536 58                      	POP	AX			; Clean stack
 26514                                  OPCLS_DONE:
 26515 00004537 E815BF                  	call	restore_world
 26516 0000453A 07                      	pop	es ; * (MSDOS 6.21)
 26517 0000453B C3                      	retn
 26518                                  
 26519                                  ; 30/04/2019 - Retro DOS v4.0
 26520                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 26521                                  
 26522                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26523                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 26524                                  
 26525                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 26526                                  ;----------------------------------------------------------------------------
 26527                                  ;**	DevIoCall  - Call Device
 26528                                  ;
 26529                                  ;	ENTRY	DS:SI Points to device SFT
 26530                                  ;		ES:BX Points to request data
 26531                                  ;	EXIT	DS:SI -> Device driver
 26532                                  ;	USES	DS:SI,AX
 26533                                  ;----------------------------------------------------------------------------
 26534                                  ;**	DevIoCall2 - Call Device
 26535                                  ;
 26536                                  ;	ENTRY	DS:SI Points to DPB
 26537                                  ;		ES:BX Points to request data
 26538                                  ;	EXIT	DS:SI -> Device driver
 26539                                  ;	USES	DS:SI,AX
 26540                                  ;----------------------------------------------------------------------------
 26541                                  
 26542                                  DEVIOCALL:
 26543                                  					; SS override for CALLSSEC, 
 26544                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 26545 0000453C C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 26546                                  
 26547                                  	;entry	DEVIOCALL2
 26548                                  DEVIOCALL2:
 26549                                  	;EnterCrit critDevice
 26550 0000453F E8DACD                  	call	ECritDevice
 26551                                  
 26552                                  	; MSDOS 6.0
 26553                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 26554                                  	;test	byte [si+5],80h
 26555 00004542 F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 26556 00004546 7545                    	jnz	short chardev2		;AN000; >32mb no
 26557                                  
 26558                                  	; 16/12/2022
 26559                                  	; 22/11/2022
 26560 00004548 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 26561 0000454C 3C04                    	cmp	al,DEVRD	; 4
 26562 0000454E 7408                    	je	short chkext	
 26563 00004550 3C08                    	cmp	al,DEVWRT	; 8
 26564 00004552 7404                    	je	short chkext
 26565 00004554 3C09                    	cmp	al,DEVWRTV	; 9
 26566 00004556 7535                    	jne	short chardev2
 26567                                  
 26568                                  	; 16/12/2022
 26569                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26570                                  	;;cmp	byte [es:bx+2],4
 26571                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 26572                                  	;JZ	short chkext		;AN000; >32mb   yes
 26573                                  	;;cmp	byte [es:bx+2],8
 26574                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 26575                                  	;JZ	short chkext		;AN000; >32mb   yes
 26576                                  	;;cmp	byte [es:bx+2],9
 26577                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 26578                                  	;				;AN000; >32mb write/verify ?
 26579                                  	;JNZ	short chardev2		;AN000; >32mb no
 26580                                  chkext:
 26581 00004558 E8A400                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 26582 0000455B 7252                    	JC	short dev_exit		;AN000;LB. done
 26583                                  
 26584                                  	;test	byte [si+4],2
 26585 0000455D F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 26586 00004561 741A                    	JZ	short chksector		;AN000;>32mb   no
 26587 00004563 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 26588                                  
 26589                                  	;MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 26590                                  	;MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 26591                                  	; 22/02/2024
 26592 00004567 B8FFFF                  	mov	ax,-1 ; 0FFFFh
 26593 0000456A 368706[6E03]            	xchg    ax,[ss:CALLSSEC]
 26594                                  
 26595 0000456F 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 26596 00004573 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 26597 00004577 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 26598 0000457B EB10                    	JMP	short chardev2		;AN000; >32mb
 26599                                  chksector:				;AN000; >32mb
 26600 0000457D 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 26601 00004583 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 26602                                  	;mov	word [es:bx+3],8107h
 26603 00004585 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 26604                                  					;AN000; >32mb
 26605 0000458B EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 26606                                  
 26607                                  chardev2:				;AN000;
 26608                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 26609                                  	; preserved
 26610                                  
 26611                                  	;mov	ax,[si+6]
 26612 0000458D 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 26613 00004590 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26614 00004594 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 26615 00004599 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26616                                  
 26617                                  	;mov	ax,[si+8]
 26618 0000459E 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 26619 000045A1 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26620 000045A5 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26621                                  
 26622                                  	; MSDOS 6.0
 26623 000045AA E84801                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 26624 000045AD 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 26625                                  
 26626                                  dev_exit:
 26627                                  	;LeaveCrit critDevice
 26628                                  	;call	LCritDevice
 26629                                  	;retn
 26630                                  	; 18/12/2022
 26631 000045AF E985CD                  	jmp	LCritDevice
 26632                                  
 26633                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 26634                                  ; 22/11/2022
 26635                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 26636                                  
 26637                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 26638                                  ;---------------------------------------------------------------------------
 26639                                  ;
 26640                                  ; Procedure Name : SETREAD, SETWRITE
 26641                                  ;
 26642                                  ; Inputs:
 26643                                  ;	DS:BX = Transfer Address
 26644                                  ;	CX = Record Count
 26645                                  ;	DX = Starting Record
 26646                                  ;	AH = Media Byte
 26647                                  ;	AL = Unit Code
 26648                                  ; Function:
 26649                                  ;	Set up the device call header at DEVCALL
 26650                                  ; Output:
 26651                                  ;	ES:BX Points to DEVCALL
 26652                                  ; No other registers effected
 26653                                  ;
 26654                                  ;---------------------------------------------------------------------------
 26655                                  
 26656                                  SETREAD_XJ:
 26657                                  	;;;
 26658                                  	; 07/02/2024 - Retro DOS v4.1
 26659 000045B2 89FB                    	mov	bx,di
 26660 000045B4 EB07                    	jmp	short SETREAD_X
 26661                                  	;;;
 26662                                  
 26663                                  SETREAD_XT:
 26664                                  	;;;
 26665                                  	; 07/02/2024 - Retro DOS v4.1
 26666 000045B6 BB[B603]                	mov	bx,TIMEBUF
 26667 000045B9 53                      	push	bx
 26668                                  SETREAD_XTC:
 26669 000045BA B90600                  	mov	cx,6
 26670                                  	;;;
 26671                                  SETREAD_X:
 26672                                  	;;;
 26673                                  	; 06/02/2024 - Retro DOS v4.1
 26674 000045BD 31C0                    	xor	ax,ax
 26675                                  	;mov	dx,ax ; 0
 26676 000045BF 99                      	cwd
 26677                                  	;;;
 26678                                  
 26679                                  ; ------------------------------------
 26680                                  
 26681                                  SETREAD:
 26682 000045C0 57                      	PUSH	DI
 26683 000045C1 51                      	PUSH	CX
 26684 000045C2 50                      	PUSH	AX
 26685 000045C3 B104                    	MOV	CL,DEVRD ; mov cl,4
 26686                                  SETCALLHEAD:
 26687 000045C5 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 26688 000045C7 16                      	PUSH	SS
 26689 000045C8 07                      	POP	ES
 26690                                  					; DEVCALL is in DOSDATA
 26691 000045C9 BF[5A03]                	MOV	DI,DEVCALL
 26692                                  
 26693 000045CC AA                      	STOSB				; length
 26694 000045CD 58                      	POP	AX			; 
 26695 000045CE AA                      	STOSB				; Unit
 26696 000045CF 50                      	PUSH	AX
 26697 000045D0 88C8                    	MOV	AL,CL
 26698 000045D2 AA                      	STOSB				; Command code
 26699 000045D3 31C0                    	XOR	AX,AX
 26700 000045D5 AB                      	STOSW				; Status
 26701 000045D6 83C708                  	ADD	DI,8			; Skip link fields
 26702 000045D9 58                      	POP	AX
 26703 000045DA 86E0                    	XCHG	AH,AL
 26704 000045DC AA                      	STOSB				; Media byte
 26705 000045DD 86C4                    	XCHG	AL,AH
 26706 000045DF 50                      	PUSH	AX
 26707 000045E0 89D8                    	MOV	AX,BX
 26708 000045E2 AB                      	STOSW
 26709                                  
 26710 000045E3 8CD8                    	MOV	AX,DS
 26711 000045E5 AB                      	STOSW				; Transfer addr
 26712                                  
 26713 000045E6 59                      	POP	CX			; Real AX
 26714 000045E7 58                      	POP	AX			; Real CX
 26715 000045E8 AB                      	STOSW				; Count
 26716                                  
 26717 000045E9 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 26718 000045EA AB                      	STOSW				; Start
 26719 000045EB 91                      	XCHG	AX,CX
 26720 000045EC 87D1                    	XCHG	DX,CX
 26721 000045EE 5F                      	POP	DI
 26722                                  					; DEVCALL is in DOSDATA
 26723 000045EF BB[5A03]                	MOV	BX,DEVCALL
 26724 000045F2 C3                      	retn
 26725                                  
 26726                                  	;entry	SETWRITE
 26727                                  SETWRITE:
 26728                                  
 26729                                  ; Inputs:
 26730                                  ;	DS:BX = Transfer Address
 26731                                  ;	CX = Record Count
 26732                                  ;	DX = Starting Record
 26733                                  ;	AH = Media Byte
 26734                                  ;	AL = Unit Code
 26735                                  ; Function:
 26736                                  ;	Set up the device call header at DEVCALL
 26737                                  ; Output:
 26738                                  ;	ES:BX Points to DEVCALL
 26739                                  ; No other registers effected
 26740                                  
 26741 000045F3 57                      	PUSH	DI
 26742 000045F4 51                      	PUSH	CX
 26743 000045F5 50                      	PUSH	AX
 26744 000045F6 B108                    	MOV	CL,DEVWRT ; mov cl,8
 26745 000045F8 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 26746 000045FD EBC6                    	JMP	SHORT SETCALLHEAD
 26747                                  
 26748                                  ; 30/04/2019 - Retro DOS v4.0
 26749                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 26750                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26751                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 26752                                  
 26753                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 26754                                  ;---------------------------------------------------------------------------
 26755                                  ;
 26756                                  ; Procedure Name : RW_SC
 26757                                  ;
 26758                                  ; Inputs:
 26759                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 26760                                  ;	 [SC_STATUS]= SC validity status
 26761                                  ;	 [SEQ_SECTOR]= last sector read
 26762                                  ; Function:
 26763                                  ;	Read from or write through secondary cache
 26764                                  ; Output:
 26765                                  ;	ES:BX Points to DEVCALL
 26766                                  ;	carry clear, I/O is not done
 26767                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 26768                                  ;	carry set, I/O is done
 26769                                  ;
 26770                                  ;----------------------------------------------------------------------------
 26771                                  
 26772                                  RW_SC:
 26773                                  	; SS override for all variables used.
 26774                                  	
 26775 000045FF 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 26776 00004605 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 26777 00004607 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 26778 0000460D 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 26779 0000460F 51                      	PUSH	CX			    ;AN000;LB.
 26780 00004610 52                      	PUSH	DX			    ;AN000;LB. yes
 26781 00004611 1E                      	PUSH	DS			    ;AN000;LB. save registers
 26782 00004612 56                      	PUSH	SI			    ;AN000;LB.
 26783 00004613 06                      	PUSH	ES			    ;AN000;LB.
 26784 00004614 57                      	PUSH	DI			    ;AN000;LB.
 26785                                  
 26786 00004615 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 26787 0000461A 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 26788 00004620 7408                    	JZ	short doread		    ;AN000;LB. yes
 26789 00004622 E8BE00                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 26790 00004625 E98B00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 26791                                  scexit4:				    ;AN000;
 26792 00004628 F8                      	CLC				    ;AN000;LB. I/O not done yet
 26793 00004629 C3                      	retn				    ;AN000;LB.
 26794                                  doread: 				    ;AN000;
 26795 0000462A E82001                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 26796 0000462D 720A                    	JC	short readSC		    ;AN000;LB.
 26797 0000462F 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 26798 00004636 F9                      	STC				    ;AN000;LB. set carry
 26799 00004637 EB68                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 26800                                  readSC: 				    ;AN000;
 26801 00004639 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 26802 0000463D 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 26803 00004642 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 26804 00004647 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 26805                                  	; 24/09/2023
 26806                                  	;CMP	AX,0			    ;AN000;LB. greater than 64K
 26807 0000464C 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 26808                                  chklow: 						
 26809 0000464E 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 26810 00004651 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 26811 00004653 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 26812 0000465A 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 26813 0000465E 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 26814                                  readsr:
 26815 00004662 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 26816 00004666 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 26817 0000466A 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 26818 0000466E 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 26819                                  
 26820 00004672 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 26821 00004676 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 26822 0000467A 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26823 0000467E 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 26824 00004682 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 26825 00004688 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 26826 0000468C 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 26827 00004690 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 26828 00004694 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 26829 00004698 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 26830 0000469C 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 26831                                  saveseq2:				    ;AN000;
 26832 000046A0 F8                      	CLC				    ;AN000;LB. clear carry
 26833                                  saveseq:				    ;AN000;	
 26834 000046A1 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 26835 000046A5 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 26836 000046A9 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 26837 000046AD 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 26838 000046B1 EB01                    	JMP	short scexit 		    ;AN000;LB.	
 26839                                  scexit2:				    ;AN000;LB.
 26840 000046B3 F8                      	CLC				    ;AN000;LB.	clear carry
 26841                                  scexit: 				    ;AN000;		
 26842 000046B4 5F                      	POP	DI			    ;AN000;LB.
 26843 000046B5 07                      	POP	ES			    ;AN000;LB. restore registers
 26844 000046B6 5E                      	POP	SI			    ;AN000;LB.
 26845 000046B7 1F                      	POP	DS			    ;AN000;LB.
 26846 000046B8 5A                      	POP	DX			    ;AN000;LB.
 26847 000046B9 59                      	POP	CX			    ;AN000;LB.
 26848 000046BA C3                      	retn				    ;AN000;LB.
 26849                                  
 26850                                  ;Break	<IN_SC -- check if in secondary cache>
 26851                                  ;--------------------------------------------------------------------------
 26852                                  ;
 26853                                  ; Procedure Name : IN_SC
 26854                                  ;
 26855                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26856                                  ;	   [CURSC_DRIVE]= current SC drive
 26857                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26858                                  ;	   [SC_CACHE_COUNT]= SC count
 26859                                  ;	   [HIGH_SECTOR]:DX= sector number
 26860                                  ; Function:
 26861                                  ;	Check if the sector is in secondary cache
 26862                                  ; Output:
 26863                                  ;	carry clear, in SC
 26864                                  ;	   CX= the index in the secondary cache
 26865                                  ;	carry set, not in SC
 26866                                  ;
 26867                                  ;---------------------------------------------------------------------------
 26868                                  
 26869                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26870                                  IN_SC:
 26871                                  	; SS override for all variables used
 26872 000046BB 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 26873 000046BF 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 26874 000046C4 751B                    	JNZ	short outrange2		    ;AN000;;LB. no
 26875 000046C6 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 26876 000046CA 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 26877 000046CC 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 26878 000046D1 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 26879                                  	; 24/09/2023
 26880                                  	;CMP	AX,0			    ;AN000;;LB. greater than 64K
 26881 000046D6 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 26882 000046D8 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 26883 000046DD 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 26884 000046DF F8                      	CLC				    ;AN000;;LB. clear carry
 26885                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 26886                                  	; 16/12/2022
 26887 000046E0 C3                      	retn	; 30/04/2019
 26888                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26889                                  	;jmp	short inexit
 26890                                  
 26891                                  outrange2:				    ;AN000;;LB. set carry
 26892 000046E1 F9                      	STC				    ;AN000;;LB.
 26893                                  inexit: 				    ;AN000;;LB.
 26894 000046E2 C3                      	retn				    ;AN000;;LB.
 26895                                  
 26896                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 26897                                  ;---------------------------------------------------------------------------
 26898                                  ;
 26899                                  ; Procedure Name : Invalidate_Sc
 26900                                  ;
 26901                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26902                                  ;	   [CURSC_DRIVE]= current SC drive
 26903                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26904                                  ;	   [SC_CACHE_COUNT]= SC count
 26905                                  ;	   [SC_STATUS]= SC status word
 26906                                  ;	   [HIGH_SECTOR]:DX= sector number
 26907                                  ;
 26908                                  ; Function:
 26909                                  ;	invalidate secondary cache if in there
 26910                                  ; Output:
 26911                                  ;	[SC_STATUS] is updated
 26912                                  ;---------------------------------------------------------------------------
 26913                                  
 26914                                  INVALIDATE_SC:
 26915                                  	; SS override for all variables used
 26916                                  
 26917 000046E3 E8D5FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 26918 000046E6 720C                    	JC	short outrange		    ;AN000;;LB. no
 26919 000046E8 B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 26920 000046EB D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 26921 000046ED F7D0                    	NOT	AX			    ;AN000;;LB.
 26922 000046EF 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 26923                                  outrange:				    ;AN000;;LB.
 26924 000046F4 C3                      	retn				    ;AN000;;LB.
 26925                                  
 26926                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 26927                                  ; 22/11/2022
 26928                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 26929                                  
 26930                                  ;Break	<VIRREAD- virtually read data into buffer>
 26931                                  ;--------------------------------------------------------------------------
 26932                                  ;
 26933                                  ; Procedure Name : SC_FLAG
 26934                                  ;
 26935                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 26936                                  ;		     1, continuous sectors were read into SC
 26937                                  ; Function:
 26938                                  ;	   Move data from SC to buffer
 26939                                  ; Output:
 26940                                  ;	 carry clear, data is moved to buffer
 26941                                  ;	 carry set, bad sector or exceeds maximum sector
 26942                                  ;	   SC_FLAG =0
 26943                                  ;	   CALLSCNT=1
 26944                                  ;	   SC_STATUS= -1 if succeeded
 26945                                  ;     
 26946                                  ;		       0 if failed
 26947                                  ;--------------------------------------------------------------------------
 26948                                  
 26949                                  VIRREAD:
 26950                                  	; SS override for all variables used
 26951                                  
 26952 000046F5 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 26953 000046FB 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 26954 000046FD 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 26955 00004701 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 26956 00004705 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 26957 00004709 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 26958 0000470D 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 26959 00004713 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 26960                                  
 26961                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 26962 0000471A 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 26963 00004720 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 26964 00004722 1E                      	PUSH	DS			    ;AN000;;LB.
 26965 00004723 56                      	PUSH	SI			    ;AN000;;LB.
 26966 00004724 06                      	PUSH	ES			    ;AN000;;LB.
 26967 00004725 57                      	PUSH	DI			    ;AN000;;LB.
 26968 00004726 52                      	PUSH	DX			    ;AN000;;LB.
 26969 00004727 51                      	PUSH	CX			    ;AN000;;LB.
 26970 00004728 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 26971 0000472A E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buf
 26972 0000472D 59                      	POP	CX
 26973 0000472E 5A                      	POP	DX			    ;AN000;;LB.
 26974 0000472F 5F                      	POP	DI			    ;AN000;;LB.
 26975 00004730 07                      	POP	ES			    ;AN000;;LB.
 26976 00004731 5E                      	POP	SI			    ;AN000;;LB.
 26977 00004732 1F                      	POP	DS			    ;AN000;;LB.
 26978 00004733 EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 26979                                  scerror:				    ;AN000;
 26980 00004735 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 26981 0000473C 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 26982 00004743 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 26983 00004749 F9                      	STC				    ;AN000;;LB. carry set
 26984 0000474A C3                      	retn				    ;AN000;;LB.
 26985                                  sc2end: 				    ;AN000;
 26986 0000474B F8                      	CLC				    ;AN000;;LB. carry clear
 26987 0000474C C3                      	retn				    ;AN000;;LB.
 26988                                  
 26989                                  ; 30/04/2019 - Retro  DOS v4.0
 26990                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 26991                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26992                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 26993                                  
 26994                                  ;Break	<SC2BUF- move data from SC to buffer>
 26995                                  ;----------------------------------------------------------------------------
 26996                                  ;
 26997                                  ; Procedure Name : SC2BUF
 26998                                  ;
 26999                                  ; Inputs:  [SC_STATUS] = SC validity status
 27000                                  ;	   [SC_SECTOR_SIZE] = request sector size
 27001                                  ;	   [SC_CACHE_PTR] = pointer to SC
 27002                                  ; Function:
 27003                                  ;	   Move data from SC to buffer
 27004                                  ; Output:
 27005                                  ;	   carry clear, in SC  and data is moved
 27006                                  ;	   carry set, not in SC and data is not moved
 27007                                  ;---------------------------------------------------------------------------
 27008                                  
 27009                                  SC2BUF:
 27010                                  	; SS override for all variables used
 27011 0000474D E86BFF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 27012                                  	;JC	short noSC		    ;AN000;LB. no
 27013                                  	; 24/09/2023
 27014 00004750 723D                    	jc	short sexit
 27015 00004752 B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 27016 00004755 D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 27017 00004757 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 27018 0000475C 7430                    	JZ	short noSC		    ;AN000;LB. invalid
 27019                                  ;entry SC2BUF2
 27020                                  SC2BUF2:				    ;AN000;
 27021                                  	;MOV	AX,CX			    ;AN000;LB. times index with
 27022                                  	;MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 27023                                  	; 24/09/2023
 27024 0000475E 36A1[AD0D]              	mov	ax,[ss:SC_SECTOR_SIZE]
 27025 00004762 91                      	xchg	ax,cx ; cx = [ss:SC_SECTOR_SIZE]
 27026 00004763 F7E1                    	mul	cx
 27027 00004765 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 27028 0000476A 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 27029 0000476F 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 27030 00004771 89C6                    	MOV	SI,AX			    ;AN000;LB.
 27031 00004773 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 27032 00004778 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 27033                                  	; 24/09/2023
 27034                                  	;MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 27035 0000477D D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 27036                                  ;entry MOVWORDS
 27037                                  MOVWORDS:				    ;AN000;
 27038 0000477F 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 27039 00004785 7403                    	JZ	short nodd		    ;AN000;LB. no
 27040 00004787 D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 27041 00004789 66                      	DB	66H			    ;AN000;LB. use double word move
 27042                                  nodd:
 27043 0000478A F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 27044 0000478C F8                      	CLC				    ;AN000;LB. clear carry
 27045 0000478D C3                      	retn				    ;AN000;LB. exit
 27046                                  noSC:					    ;AN000;
 27047 0000478E F9                      	STC				    ;AN000;LB. set carry
 27048                                  sexit:					    ;AN000;
 27049 0000478F C3                      	retn				    ;AN000;LB.
 27050                                  
 27051                                  ;============================================================================
 27052                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 27053                                  ;============================================================================
 27054                                  ; 29/07/2018 - Retro DOS v3.0
 27055                                  ; 19/05/2019 - Retro DOS v4.0
 27056                                  
 27057                                  ;	TITLE	MKNODE - Node maker
 27058                                  ;	NAME	MKNODE
 27059                                  
 27060                                  ;**	MKNODE.ASM
 27061                                  ;----------------------------------------------------------------------------
 27062                                  ;	Low level routines for making a new local file system node
 27063                                  ;	and filling in an SFT from a directory entry
 27064                                  ;
 27065                                  ;	BUILDDIR
 27066                                  ;	SETDOTENT
 27067                                  ;	MakeNode
 27068                                  ;	NEWENTRY
 27069                                  ;	FREEENT
 27070                                  ;	NEWDIR
 27071                                  ;	DOOPEN
 27072                                  ;	RENAME_MAKE
 27073                                  ;	CHECK_VIRT_OPEN
 27074                                  ;
 27075                                  ;	Revision history:
 27076                                  ;
 27077                                  ;	 AN000	version 4.0  Jan. 1988
 27078                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 27079                                  
 27080                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 27081                                  ;----------------------------------------------------------------------------
 27082                                  ;
 27083                                  ; Procedure Name : BUILDDIR,NEWDIR
 27084                                  ;
 27085                                  ; Inputs:
 27086                                  ;       ES:BP Points to DPB
 27087                                  ;       [THISSFT] Set if using NEWDIR entry point
 27088                                  ;               (used by ALLOCATE)
 27089                                  ;       [LASTENT] current last valid entry number in directory if no free
 27090                                  ;               entries
 27091                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 27092                                  ; Function:
 27093                                  ;       Grow directory if no free entries and not root
 27094                                  ; Outputs:
 27095                                  ;       CARRY SET IF FAILURE
 27096                                  ;       ELSE
 27097                                  ;          AX entry number of new entry
 27098                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 27099                                  ;               AX = first entry of new dir
 27100                                  ;       GETENT should be called to set [LASTENT]
 27101                                  ;
 27102                                  ;----------------------------------------------------------------------------
 27103                                  
 27104                                  ; 19/05/2019 - Retro DOS v4.0
 27105                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 27106                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27107                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 27108                                  
 27109                                  BUILDDIR:
 27110                                  	; 29/07/2018 - Retro DOS v3.0
 27111                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 27112                                  
 27113 00004790 A1[D805]                        MOV     AX,[ENTFREE]
 27114 00004793 83F8FF                          CMP     AX,-1 ; 0FFFFh
 27115                                  	;JZ	short CHECK_IF_ROOT
 27116                                          ;CLC
 27117                                          ;retn
 27118                                  	; 24/09/2023
 27119 00004796 7507                    	jne	short builddir_cmc_retn  ; cf=1 (will be 0)
 27120                                  
 27121                                  CHECK_IF_ROOT:
 27122 00004798 833E[C205]00                    CMP     word [DIRSTART],0
 27123 0000479D 7502                            JNZ	short NEWDIR
 27124                                          ;STC
 27125                                  	; 24/09/2023
 27126                                  	; [DIRSTART]=0, cf=0, zf=1 (cf will be 1 after cmc instruction)
 27127                                  builddir_cmc_retn:
 27128                                  	; 24/09/2023
 27129 0000479F F5                      	cmc	; cf=1 <-> cf=0
 27130                                  builddir_retn:
 27131 000047A0 C3                              retn				; Can't grow root
 27132                                  
 27133                                  	;entry   NEWDIR
 27134                                  NEWDIR: 
 27135 000047A1 8B1E[C205]              	MOV     BX,[DIRSTART]
 27136 000047A5 09DB                            OR      BX,BX
 27137 000047A7 7405                            JZ	short NULLDIR
 27138 000047A9 E81A06                  	call	GETEOF
 27139 000047AC 72F2                            jc	short builddir_retn	; Screw up
 27140                                  NULLDIR:
 27141 000047AE B90100                          MOV     CX,1
 27142 000047B1 E82B05                  	call	ALLOCATE
 27143 000047B4 72EA                            jc	short builddir_retn
 27144 000047B6 8B16[C205]                      MOV     DX,[DIRSTART]
 27145 000047BA 09D2                            OR      DX,DX
 27146 000047BC 750D                            JNZ	short ADDINGDIR
 27147 000047BE E8FBF5                  	call	SETDIRSRCH
 27148 000047C1 72DD                            jc	short builddir_retn
 27149 000047C3 C706[4803]FFFF                  MOV     word [LASTENT],-1
 27150 000047C9 EB29                            JMP     SHORT GOTDIRREC
 27151                                  ADDINGDIR:
 27152 000047CB 53                              PUSH    BX
 27153 000047CC 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 27154 000047D0 E8130C                          call	IsEOF
 27155 000047D3 5B                              POP     BX
 27156 000047D4 7217                            JB	short NOTFIRSTGROW
 27157                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 27158 000047D6 891E[BC05]                      MOV     [CLUSNUM],BX
 27159                                  	; 24/09/2023
 27160                                  	;PUSH	CX ; (not necessary)
 27161 000047DA 50                      	PUSH	AX
 27162 000047DB 55                      	PUSH	BP
 27163 000047DC B401                            MOV     AH,1			; CLUSNUM update
 27164                                  	; 15/12/2022
 27165 000047DE 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 27166                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27167                                  	;;mov	dl,[es:bp+0]
 27168                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 27169 000047E2 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 27170 000047E6 89DD                            MOV     BP,BX 			; CLUSNUM
 27171 000047E8 E87DDE                  	call	FastOpen_Update
 27172 000047EB 5D                              POP     BP
 27173 000047EC 58                              POP     AX
 27174                                  	; 24/09/2023
 27175                                          ;POP	CX
 27176                                  
 27177                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 27178                                  NOTFIRSTGROW:
 27179 000047ED 89DA                            MOV     DX,BX
 27180 000047EF 30DB                            XOR     BL,BL
 27181 000047F1 E8C704                  	call	FIGREC
 27182                                  GOTDIRREC:
 27183                                  	;mov	cl,[es:bp+4]
 27184 000047F4 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 27185                                  	;INC	CL
 27186                                  	; 27/06/2024
 27187 000047F8 41                      	inc	cx
 27188 000047F9 30ED                            XOR     CH,CH
 27189                                  ZERODIR:
 27190 000047FB 51                              PUSH    CX
 27191                                  	; 22/09/2023
 27192                                  	;;mov	byte [ALLOWED],18h
 27193                                          ;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 27194 000047FC B0FF                            MOV     AL,0FFH
 27195                                          ;call	GETBUFFR
 27196 000047FE E80310                          call	GETBUFFRD ; *
 27197 00004801 7302                    	JNC	short GET_SSIZE
 27198 00004803 59                              POP     CX
 27199 00004804 C3                              retn
 27200                                  
 27201                                  GET_SSIZE:
 27202                                  	;mov	cx,[es:bp+2]
 27203 00004805 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 27204 00004809 06                              PUSH    ES
 27205 0000480A C43E[E205]                      LES     DI,[CURBUF]
 27206                                  	;or	byte [es:di+5],4
 27207 0000480E 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 27208 00004813 57                              PUSH    DI
 27209                                  	;;add	di,16	; MSDOS 3.3
 27210                                  	;add	di,20	; MSDOS 6.0	
 27211 00004814 83C714                          ADD     DI,BUFINSIZ
 27212 00004817 31C0                            XOR     AX,AX
 27213 00004819 D1E9                            SHR     CX,1
 27214 0000481B F3AB                            REP     STOSW
 27215 0000481D 7301                            JNC	short EVENZ
 27216 0000481F AA                              STOSB
 27217                                  EVENZ:
 27218 00004820 5F                              POP     DI
 27219                                  
 27220                                  	; MSDOS 6.0
 27221 00004821 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 27222                                  					;LB. if already dirty		  ;AN000;
 27223 00004826 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 27224 00004828 E8DD11                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 27225                                          
 27226                                  	;or	byte [es:di+5],40h
 27227 0000482B 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 27228                                  yesdirty7:
 27229 00004830 07                              POP	ES
 27230 00004831 59                              POP	CX
 27231                                  
 27232                                  	; 19/05/2019 - Retro DOS v4.0
 27233                                  
 27234                                  	; MSDOS 3.3
 27235                                  	;INC	DX
 27236                                  
 27237                                  	; MSDOS 6.0
 27238                                  	; 24/09/2023
 27239                                  	;add	dx,1
 27240                                  	;;adc	word [HIGH_SECTOR],0
 27241                                  	;; 24/09/2023
 27242                                  	;; ax=0
 27243                                  	;adc	[HIGH_SECTOR],ax ; 0
 27244                                  	; 24/09/2023
 27245 00004832 42                      	inc	dx
 27246 00004833 7504                    	jnz	short loop_zerodir
 27247 00004835 FF06[0706]              	inc	word [HIGH_SECTOR]
 27248                                  loop_zerodir:
 27249 00004839 E2C0                            LOOP    ZERODIR
 27250                                  
 27251 0000483B A1[4803]                        MOV     AX,[LASTENT]
 27252 0000483E 40                              INC     AX
 27253                                  	; 24/09/2023
 27254                                  	; cf=0
 27255                                  	;CLC
 27256 0000483F C3                              retn
 27257                                  
 27258                                  ;--------------------------------------------------------------------------
 27259                                  ;
 27260                                  ; Procedure Name : SETDOTENT
 27261                                  ;
 27262                                  ; set up a . or .. directory entry for a directory.
 27263                                  ;
 27264                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 27265                                  ;               AX contains ". " or ".."
 27266                                  ;               DX contains first cluster of entry
 27267                                  ;
 27268                                  ;----------------------------------------------------------------------------
 27269                                  
 27270                                  SETDOTENT:
 27271                                  ;	Fill in name field
 27272 00004840 AB                      	STOSW
 27273 00004841 B90400                  	MOV	CX,4
 27274 00004844 B82020                  	MOV	AX,"  " ; 2020h
 27275 00004847 F3AB                    	REP	STOSW
 27276 00004849 AA                      	STOSB
 27277                                  
 27278                                  ;	Set up attribute
 27279                                  	;mov	al, 10h
 27280 0000484A B010                    	MOV	AL,attr_directory
 27281 0000484C AA                      	STOSB
 27282                                  
 27283                                  ;	Initialize time and date of creation
 27284 0000484D 83C70A                  	ADD	DI,10
 27285 00004850 8B36[9E05]              	MOV	SI,[THISSFT]
 27286                                  	;mov	ax,[si+0Dh]
 27287 00004854 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 27288 00004857 AB                      	STOSW
 27289                                  	;mov	ax,[si+0Fh]
 27290 00004858 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 27291 0000485B AB                      	STOSW
 27292                                  
 27293                                  ;	Set up first cluster field
 27294 0000485C 89D0                    	MOV	AX,DX
 27295 0000485E AB                      	STOSW
 27296                                  
 27297                                  ;	0 file size
 27298                                  	;XOR	AX,AX
 27299 0000485F 91                      	xchg	ax,cx ; 23/02/2024
 27300 00004860 AB                      	STOSW
 27301 00004861 AB                      	STOSW
 27302 00004862 C3                      	retn
 27303                                  
 27304                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 27305                                  ;---------------------------------------------------------------------------
 27306                                  ;
 27307                                  ; Procedure Name : MakeNode
 27308                                  ;
 27309                                  ; Inputs:
 27310                                  ;       AL - attribute to create
 27311                                  ;       AH = 0 if it is ok to truncate a file already by this name
 27312                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 27313                                  ;               (AH ignored on dirs and devices)
 27314                                  ;
 27315                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 27316                                  ;               a name already existant is ALWAYS an error in these cases.
 27317                                  ;
 27318                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 27319                                  ;               terminated)
 27320                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 27321                                  ;               ( = -1 if current dir not involved, else
 27322                                  ;                Points to first char after last "/" of current dir part)
 27323                                  ;       [THISCDS] Points to CDS being used
 27324                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 27325                                  ; Function:
 27326                                  ;       Make a new node
 27327                                  ; Outputs:
 27328                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 27329                                  ;       CARRY SET IF ERROR
 27330                                  ;          AX = 1 A node by this name exists and is a directory
 27331                                  ;          AX = 2 A new node could not be created
 27332                                  ;          AX = 3 A node by this name exists and is a disk file
 27333                                  ;               (AH was NZ on input)
 27334                                  ;          AX = 4 Bad Path
 27335                                  ;               SI return from GetPath maintained
 27336                                  ;          AX = 5 Attribute mismatch
 27337                                  ;          AX = 6 Sharing Violation
 27338                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 27339                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 27340                                  ;       ELSE
 27341                                  ;          AX = 0 Disk Node
 27342                                  ;          AX = 3 Device Node (error in some cases)
 27343                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 27344                                  ;               containing new node.
 27345                                  ;          [CURBUF+2]:BX Points to entry
 27346                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 27347                                  ;          [THISSFT] is filled in
 27348                                  ;               sf_mode = unchanged.
 27349                                  ;          Attribute byte in entry is input AL
 27350                                  ; DS preserved, others destroyed
 27351                                  ;
 27352                                  ;-------------------------------------------------------------------------
 27353                                  
 27354                                  ; 19/05/2019 - Retro DOS v4.0
 27355                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 27356                                  
 27357                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27358                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 27359                                  
 27360                                  ; 23/02/2024 - Retro DOS v4.1 (Modified MSDOS 5.0 MSDOS.SYS)
 27361                                  ; DOSCODE:8925h (MSDOS 6.22, MSDOS.SYS)
 27362                                  ; DOSCODE:951Ah (PCDOS 7.1, IBMDOS.COM)
 27363                                  
 27364                                  MakeNode:
 27365                                  	;mov	word [CREATING],0E5FFh
 27366 00004863 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 27367 00004869 50                      	PUSH	AX 		; Save AH value
 27368 0000486A C606[4C03]00            	MOV	byte [NoSetDir],0
 27369 0000486F A2[6D05]                	MOV	[SATTRIB],AL
 27370 00004872 E8AAF5                  	call	GetPathNoSet
 27371 00004875 88CA                    	MOV	DL,CL		; Save CL info
 27372                                  	;MOV	CX,AX		; Device ID to CH
 27373                                  	; 23/02/2024
 27374 00004877 91                      	xchg	ax,cx
 27375 00004878 58                      	POP	AX		; Get back AH
 27376 00004879 732D                    	JNC	short make_exists ; File existed
 27377 0000487B 7505                    	JNZ	short make_err_4 ; Path bad
 27378 0000487D 80FA80                  	CMP	DL,80h		; Check "CL" return from GETPATH
 27379 00004880 7405                    	JZ	short make_type	; Name simply not found, and no metas
 27380                                  make_err_4:
 27381 00004882 B004                    	MOV	AL,4		; case 1 bad path
 27382                                  make_err_ret:
 27383                                  	;XOR	AH,AH
 27384                                  	; 23/02/2024
 27385 00004884 98                      	cbw
 27386 00004885 F9                      	STC
 27387                                  ;make_retn:	; 22/11/2022
 27388 00004886 C3                      	retn
 27389                                  
 27390                                  	;entry	RENAME_MAKE	; Used by DOS_RENAME to "copy" a node
 27391                                  RENAME_MAKE:
 27392                                  make_type:
 27393                                  ;Extended Open hooks
 27394                                  	; MSDOS 6.0
 27395                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 27396 00004887 F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 27397 0000488C 7411                    	JZ	short make_type2	;FT. no				;AN000;
 27398 0000488E 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 27399                                  					;FT. set for extended open ;AN000;
 27400                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 27401 00004893 F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 27402 00004898 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 27403 0000489A F9                      	STC				;FT. set carry			;AN000;
 27404 0000489B B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 27405                                  	; 22/11/2022
 27406                                  make_retn:
 27407                                  	;return
 27408 0000489E C3                      	retn				;FT.				;AN000;
 27409                                  
 27410                                  ;	Extended Open hooks
 27411                                  
 27412                                  make_type2:
 27413 0000489F C43E[9E05]              	LES	DI,[THISSFT]
 27414 000048A3 31C0                    	XOR	AX,AX		; nothing exists Disk Node
 27415 000048A5 F9                      	STC			; Not found
 27416 000048A6 EB59                    	JMP	short make_new
 27417                                  
 27418                                  ; The node exists. It may be either a device, directory or file:
 27419                                  ;   Zero set => directory
 27420                                  ;   High bit of CH on => device
 27421                                  ;   else => file
 27422                                  
 27423                                  make_exists:
 27424 000048A8 7447                    	JZ	short make_exists_dir
 27425 000048AA B003                    	MOV	AL,3		; file exists type 3  (error or device node)
 27426                                  	;test	byte [ATTRIB],18h
 27427 000048AC F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 27428 000048B1 753A                    	JNZ	short make_err_ret_5
 27429                                  				; Cannot already exist as Disk or Device Node
 27430                                  				;  if making DIR or Volume ID
 27431 000048B3 08ED                    	OR	CH,CH
 27432 000048B5 781A                    	JS	short make_share ; No further checks on attributes if device
 27433 000048B7 08E4                    	OR	AH,AH
 27434 000048B9 75C9                    	JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 27435 000048BB 51                      	PUSH	CX		; Save device ID
 27436 000048BC 8E06[E405]              	MOV	ES,[CURBUF+2]
 27437                                  	;mov	ch,[es:bx+0Bh]
 27438 000048C0 268A6F0B                	MOV	CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 27439                                  	;test	ch,1
 27440 000048C4 F6C501                  	test	CH,attr_read_only
 27441 000048C7 7523                    	JNZ	short make_err_ret_5P ; Cannot create on read only files
 27442 000048C9 E8D9F7                  	call	MatchAttributes
 27443 000048CC 59                      	POP	CX		; Devid back in CH
 27444 000048CD 751E                    	JNZ	short make_err_ret_5 ; Attributes not ok
 27445 000048CF 30C0                    	XOR	AL,AL		; AL = 0, Disk Node
 27446                                  
 27447                                  make_share:
 27448                                  	;XOR	AH,AH
 27449                                  	; 23/02/2024
 27450 000048D1 98                      	cbw
 27451 000048D2 50                      	PUSH	AX		; Save Disk or Device node
 27452 000048D3 51                      	PUSH	CX		; Save Device ID
 27453 000048D4 88EC                    	MOV	AH,CH		; Device ID to AH
 27454 000048D6 E84501                  	CALL	DOOPEN		; Fill in SFT for share check
 27455 000048D9 C43E[9E05]              	LES	DI,[THISSFT]
 27456 000048DD 56                      	push	si
 27457 000048DE 53                      	push	bx		; Save CURBUF pointers
 27458 000048DF E8E828                  	call	ShareEnter
 27459 000048E2 735A                    	jnc	short MakeEndShare
 27460                                  
 27461                                  ; User failed request.
 27462 000048E4 5B                      	pop	bx
 27463 000048E5 5E                      	pop	si
 27464 000048E6 59                      	pop	cx
 27465 000048E7 58                      	pop	ax
 27466                                  
 27467                                  Make_Share_ret:
 27468 000048E8 B006                    	MOV	AL,6
 27469 000048EA EB98                    	JMP	short make_err_ret
 27470                                  
 27471                                  make_err_ret_5P:
 27472 000048EC 59                      	POP	CX		; Get back device ID
 27473                                  make_err_ret_5:
 27474 000048ED B005                    	MOV     AL,5		; Attribute mismatch
 27475                                          ; 22/11/2022
 27476 000048EF EB93                    	JMP	short make_err_ret
 27477                                  
 27478                                  make_exists_dir:
 27479 000048F1 B001                    	MOV	AL,1		; exists as directory, always an error
 27480                                  	; 22/11/2022
 27481 000048F3 EB8F                    	JMP	short make_err_ret
 27482                                  
 27483                                  make_save:
 27484 000048F5 50                      	PUSH	AX		; Save whether Disk or File
 27485 000048F6 89C8                    	MOV	AX,CX		; Device ID to AH
 27486 000048F8 E87400                  	CALL	NEWENTRY
 27487 000048FB 58                      	POP	AX		; 0 if Disk, 3 if File
 27488 000048FC 73A0                    	jnc	short make_retn
 27489 000048FE B002                    	MOV	AL,2		; create failed case 2
 27490                                  make_save_retn:
 27491 00004900 C3                      	retn
 27492                                  
 27493                                  make_new:
 27494 00004901 E8F1FF                  	call	make_save
 27495 00004904 72FA                    	jc	short make_save_retn	; case 2 fail
 27496                                  	;test	byte [ATTRIB],10h
 27497 00004906 F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 27498 0000490B 75F3                    	jnz	short make_save_retn	; Don't "open" directories,
 27499                                  					; so don't tell the sharer about them
 27500 0000490D 50                      	push	ax
 27501 0000490E 53                      	push	bx
 27502 0000490F 56                      	push	si
 27503 00004910 E8B728                  	call	ShareEnter
 27504 00004913 5E                      	pop	si
 27505 00004914 5B                      	pop	bx
 27506 00004915 58                      	pop	ax
 27507 00004916 73E8                    	jnc	short make_save_retn
 27508                                  
 27509                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 27510                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 27511                                  ; possible: delete the newly created directory entry and return share_error.
 27512                                  
 27513 00004918 50                      	PUSH	AX
 27514 00004919 C43E[E205]              	LES	DI,[CURBUF]
 27515                                  	;mov	byte [es:bx],0E5h
 27516 0000491D 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 27517                                  	
 27518                                  	; MSDOS 6.0
 27519                                  	;test	byte [es:di+5],40h
 27520 00004921 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 27521                                  					;LB. if already dirty		  ;AN000;
 27522 00004926 7508                    	JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 27523                                  	; 22/11/2022
 27524 00004928 E8DD10                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27525                                  	;or	byte [es:di+5],40h
 27526 0000492B 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 27527                                  yesdirty8:
 27528 00004930 C42E[8A05]              	LES	BP,[THISDPB]
 27529                                  	; 15/12/2022
 27530 00004934 268A4600                	mov	al,[ES:BP]
 27531                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27532                                  	;;mov	al,[es:bp+0]
 27533                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 27534 00004938 E8CB0F                  	call	FLUSHBUF		; write out buffer.
 27535 0000493B 58                      	POP	AX
 27536 0000493C EBAA                    	jmp	short Make_Share_ret
 27537                                  
 27538                                  ; We have found an existing file. We have also entered it into the share set.
 27539                                  ; At this point we need to call newentry to correctly address the problem of
 27540                                  ; getting rid of old data (create an existing file) or creating a new
 27541                                  ; directory entry (create a new file). Unfortunately, this operation may
 27542                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 27543                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 27544                                  ; the share set now, do the operation and then reassert the share access.
 27545                                  ;
 27546                                  ; We are allowed to do this! There is no window! After all, we are in
 27547                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 27548                                  
 27549                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27550                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 27551                                  
 27552                                  MakeEndShare:
 27553 0000493E C43E[9E05]              	LES	DI,[THISSFT]		; grab SFT
 27554 00004942 31C0                    	XOR	AX,AX
 27555 00004944 E8A0C9                  	call	ECritSFT
 27556 00004947 268705                  	xchg	AX,[ES:DI]
 27557                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 27558 0000494A 50                      	push	ax
 27559 0000494B 57                      	push	di
 27560 0000494C 06                      	push	es
 27561 0000494D 9C                      	PUSHF
 27562 0000494E E87428                  	call	ShareEnd		; remove sharing
 27563 00004951 9D                      	POPF
 27564 00004952 07                      	pop	es
 27565 00004953 5F                      	pop	di
 27566 00004954 268F05                  	pop	word [ES:DI]
 27567                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 27568 00004957 E8A8C9                  	call	LCritSFT
 27569                                  	; 22/11/2022
 27570                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 27571 0000495A 5B                      	pop	bx
 27572 0000495B 5E                      	pop	si
 27573 0000495C 59                      	pop	cx
 27574 0000495D 58                      	pop	ax
 27575 0000495E E894FF                  	CALL	make_save
 27576                                  
 27577                                  ; If the user failed, we do not reenter into the sharing set.
 27578                                  
 27579 00004961 729D                    	jc	short make_save_retn	; bye if error
 27580 00004963 50                      	push	ax
 27581 00004964 53                      	push	bx
 27582 00004965 56                      	push	si
 27583 00004966 9C                      	PUSHF
 27584 00004967 E86028                  	call	ShareEnter
 27585 0000496A 9D                      	POPF
 27586 0000496B 5E                      	pop	si
 27587 0000496C 5B                      	pop	bx
 27588 0000496D 58                      	pop	ax
 27589                                  
 27590                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 27591                                  
 27592                                  makeendshare_retn:
 27593 0000496E C3                      	retn
 27594                                  
 27595                                  ;---------------------------------------------------------------------------
 27596                                  ;
 27597                                  ; Procedure Name : NEWENTRY
 27598                                  ;
 27599                                  ; Inputs:
 27600                                  ;	  [THISSFT] set
 27601                                  ;	  [THISDPB] set
 27602                                  ;	  [LASTENT] current last valid entry number in directory if no free
 27603                                  ;		  entries
 27604                                  ;	  [VOLID] set if a volume ID was found during search
 27605                                  ;	Attrib Contains attributes for new file
 27606                                  ;	  [DIRSTART] Points to first cluster of dir (0 means root)
 27607                                  ;	  CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 27608                                  ;		  NC means file existed (device)
 27609                                  ;		  C  means file did not exist
 27610                                  ;	  AH = Device ID byte
 27611                                  ;	  If FILE
 27612                                  ;	  [CURBUF+2]:BX points to start of directory entry
 27613                                  ;	  [CURBUF+2]:SI points to dir_first of directory entry
 27614                                  ;	  If device
 27615                                  ;	  DS:BX points to start of "fake" directory entry
 27616                                  ;	  DS:SI points to dir_first of "fake" directory entry
 27617                                  ;		  (has DWORD pointer to device header)
 27618                                  ; Function:
 27619                                  ;	  Make a new directory entry
 27620                                  ;	  If an old one existed it is truncated first
 27621                                  ; Outputs:
 27622                                  ;	  Carry set if error
 27623                                  ;		  Can't grow dir, atts didn't match, attempt to make 2nd
 27624                                  ;		  vol ID, user FAILed to I 24
 27625                                  ;	  else
 27626                                  ;		  outputs of DOOPEN
 27627                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 27628                                  ;
 27629                                  ;----------------------------------------------------------------------------
 27630                                  
 27631                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27632                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 27633                                  
 27634                                  NEWENTRY:
 27635 0000496F C42E[8A05]              	LES	BP,[THISDPB]
 27636 00004973 7315                    	JNC	short EXISTENT
 27637 00004975 803E[4A03]00            	CMP	byte [FAILERR],0
 27638                                  	;STC
 27639                                  	;jnz	short makeendshare_retn	; User FAILed, node might exist
 27640                                  	; 24/09/2023
 27641 0000497A 750C                    	jnz	short ERRRET3
 27642 0000497C E811FE                  	CALL	BUILDDIR	; Try to build dir
 27643 0000497F 72ED                    	jc	short makeendshare_retn	; Failed
 27644 00004981 E80BF4                  	call	GETENT		; Point at that free entry
 27645 00004984 72E8                    	jc	short makeendshare_retn	; Failed
 27646 00004986 EB0E                    	JMP	SHORT FREESPOT
 27647                                  
 27648                                  ERRRET3:
 27649 00004988 F9                      	STC
 27650                                  newentry_retn:
 27651 00004989 C3                      	retn
 27652                                  
 27653                                  EXISTENT:
 27654 0000498A 08E4                    	OR	AH,AH		; Check if file is I/O device
 27655 0000498C 7903                    	JNS	short NOT_DEV1
 27656 0000498E E98D00                  	JMP	DOOPEN		; If so, proceed with open
 27657                                  
 27658                                  NOT_DEV1:
 27659 00004991 E82801                  	call	FREEENT	; Free cluster chain
 27660 00004994 72F3                    	jc	short newentry_retn ; Failed
 27661                                  FREESPOT:
 27662                                  	;test	byte [ATTRIB],8
 27663 00004996 F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 27664 0000499B 7407                    	JZ	short NOTVOLID
 27665 0000499D 803E[7B05]00            	CMP	BYTE [VOLID],0
 27666 000049A2 75E4                    	JNZ	short ERRRET3	; Can't create a second volume ID
 27667                                  NOTVOLID:
 27668 000049A4 8E06[E405]              	MOV	ES,[CURBUF+2]
 27669 000049A8 89DF                    	MOV	DI,BX
 27670                                  
 27671 000049AA BE[4B05]                	MOV	SI,NAME1
 27672                                  
 27673 000049AD B90500                  	MOV	CX,5
 27674 000049B0 F3A5                    	REP	MOVSW
 27675 000049B2 A4                      	MOVSB			; Move name into dir entry
 27676 000049B3 A0[6B05]                	MOV	AL,[ATTRIB]
 27677 000049B6 AA                      	STOSB			; Attributes
 27678                                  
 27679                                  ;; File Tagging for Create DOS 4.00
 27680 000049B7 B105                    	MOV	CL,5		;FT. assume normal FBUGBUG	;AN000;
 27681                                  ;; File Tagging for Create DOS 4.00
 27682                                  
 27683 000049B9 31C0                    	XOR	AX,AX
 27684 000049BB F3AB                    	REP	STOSW		; Zero pad
 27685 000049BD E825C1                  	call	DATE16
 27686 000049C0 92                      	XCHG	AX,DX
 27687 000049C1 AB                      	STOSW			; dir_time
 27688 000049C2 92                      	XCHG	AX,DX
 27689 000049C3 AB                      	STOSW			; dir_date
 27690 000049C4 31C0                    	XOR	AX,AX
 27691 000049C6 57                      	PUSH	DI		; Correct SI input value
 27692                                  				; (recomputed for new buffer)
 27693 000049C7 AB                      	STOSW			; Zero dir_first and size
 27694 000049C8 AB                      	STOSW
 27695 000049C9 AB                      	STOSW
 27696                                  updnxt:
 27697 000049CA 8B36[E205]              	MOV	SI,[CURBUF]
 27698                                  
 27699                                  	; 19/05/2019 - Retro DOS v4.0
 27700                                  
 27701                                  	; MSDOS 6.0
 27702 000049CE 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27703                                  				;LB. if already dirty		  ;AN000;
 27704 000049D3 7508                    	JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 27705 000049D5 E83010                  	call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 27706                                  	
 27707                                  	;or	byte [es:si+5],40h
 27708 000049D8 26804C0540              	OR	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27709                                  yesdirty9:
 27710 000049DD C42E[8A05]              	LES	BP,[THISDPB]
 27711                                  	; 15/12/2022
 27712 000049E1 268A4600                	MOV	AL,[ES:BP]
 27713                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27714                                  	;;mov	al,[es:bp+0]
 27715                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 27716 000049E5 50                      	PUSH	AX
 27717 000049E6 53                      	PUSH	BX
 27718                                  
 27719                                  ; If we have a file, we need to increment the open ref. count so that
 27720                                  ; we have some protection against invalid media changes if an Int 24
 27721                                  ; error occurs.
 27722                                  ; Do nothing for a device.
 27723                                  
 27724 000049E7 06                      	push	es
 27725 000049E8 57                      	push	di
 27726 000049E9 C43E[9E05]              	LES	DI,[THISSFT]
 27727                                  	;test	word [es:di+5],80h
 27728                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 27729 000049ED 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 27730 000049F2 751A                    	jnz	short GotADevice
 27731 000049F4 1E                      	push	ds
 27732 000049F5 53                      	push	bx
 27733 000049F6 C51E[8A05]              	LDS	BX,[THISDPB]
 27734                                  	;mov	[es:di+7],bx
 27735 000049FA 26895D07                	MOV	[ES:DI+SF_ENTRY.sf_devptr],BX
 27736 000049FE 8CDB                    	MOV	BX,DS
 27737                                  	;mov	[es:di+9],bx
 27738 00004A00 26895D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],BX
 27739 00004A04 5B                      	pop	bx
 27740 00004A05 1F                      	pop	ds ; need to use DS for segment later on
 27741                                  
 27742 00004A06 E8B5FA                  	call	DEV_OPEN_SFT	; increment ref. count
 27743 00004A09 C606[A20A]01            	mov	byte [VIRTUAL_OPEN],1; set flag
 27744                                  
 27745                                  GotADevice:
 27746 00004A0E 5F                      	pop	di
 27747 00004A0F 07                      	pop	es
 27748                                  
 27749 00004A10 E8F30E                  	call	FLUSHBUF
 27750                                  
 27751 00004A13 E8EC00                  	Call	CHECK_VIRT_OPEN	; decrement ref. count	;AN000;
 27752                                  
 27753 00004A16 5B                      	POP	BX
 27754 00004A17 58                      	POP	AX
 27755 00004A18 5E                      	POP	SI		; Get SI input back
 27756 00004A19 88C4                    	MOV	AH,AL		; Get I/O driver number back
 27757 00004A1B 7301                    	jnc	short DOOPEN	
 27758 00004A1D C3                      	retn			; Failed
 27759                                  	
 27760                                  ;NOTE FALL THROUGH
 27761                                  
 27762                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 27763                                  
 27764                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27765                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 27766                                  
 27767                                  ; DOOPEN
 27768                                  ;----------------------------------------------------------------------------
 27769                                  ;
 27770                                  ; Inputs:
 27771                                  ;	  [THISDPB] points to DPB if file
 27772                                  ;	  [THISSFT] points to SFT being used
 27773                                  ;	  AH = Device ID byte
 27774                                  ;	  If FILE
 27775                                  ;	  [CURBUF+2]:BX points to start of directory entry
 27776                                  ;	  [CURBUF+2]:SI points to dir_first of directory entry
 27777                                  ;	  If device
 27778                                  ;	  DS:BX points to start of "fake" directory entry
 27779                                  ;	  DS:SI points to dir_first of "fake" directory entry
 27780                                  ;		  (has DWORD pointer to device header)
 27781                                  ; Function:
 27782                                  ;	  Fill in SFT from dir entry
 27783                                  ; Outputs:
 27784                                  ;	  CARRY CLEAR
 27785                                  ;	  sf_ref_count and sf_mode fields not altered
 27786                                  ;	  sf_flags high byte = 0
 27787                                  ;	  sf_flags low byte = AH except
 27788                                  ;	  sf_flags Bit 6 set (not dirty or not EOF)
 27789                                  ;	  sf_attr sf_date sf_time sf_name set from entry
 27790                                  ;	  sf_position = 0
 27791                                  ;	  If device
 27792                                  ;	  sf_devptr = dword at dir_first (pointer to device header)
 27793                                  ;	  sf_size = 0
 27794                                  ;	  If file
 27795                                  ;	  sf_firclus sf_size set from entry
 27796                                  ;	  sf_devptr = [THISDPB]
 27797                                  ;	  sf_cluspos = 0
 27798                                  ;	  sf_lstclus = sf_firclus
 27799                                  ;	  sf_dirsec sf_dirpos set
 27800                                  ; DS,SI,BX preserved, others destroyed
 27801                                  ;
 27802                                  ;----------------------------------------------------------------------------
 27803                                  
 27804                                  	;entry	DOOPEN
 27805                                  DOOPEN:
 27806                                  ;	Generate and store attribute
 27807                                  
 27808 00004A1E 88E6                    	MOV	DH,AH	  	; AH to different place
 27809 00004A20 C43E[9E05]              	LES	DI,[THISSFT]
 27810                                  	;add	di,4
 27811 00004A24 83C704                  	ADD	DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 27812                                  	; 24/09/2023
 27813 00004A27 31C0                    	xor	ax,ax
 27814                                  	;XOR	AL,AL		; Assume it's a device, devices have an
 27815                                  				;  attribute of 0 (for R/O testing etc).
 27816 00004A29 08F6                    	OR	DH,DH		; See if our assumption good.
 27817 00004A2B 7807                    	JS	short DEV_SFT1	; If device DS=DOSGROUP
 27818 00004A2D 8E1E[E405]              	MOV	DS,[CURBUF+2]
 27819                                  	;mov	al,[BX+0Bh]
 27820 00004A31 8A470B                  	MOV	AL,[BX+dir_entry.dir_attr]
 27821                                  				; If file, get attrib from dir entry
 27822                                  DEV_SFT1:
 27823 00004A34 AA                      	STOSB			; sf_attr, ES:DI -> sf_flags
 27824                                  
 27825                                  ;	Generate and store flags word
 27826                                  
 27827                                  	; 24/09/2023
 27828                                  	;XOR	AX,AX
 27829                                  	; ah=0
 27830 00004A35 88F0                    	MOV	AL,DH
 27831                                  	;or	al,40h
 27832 00004A37 0C40                    	OR	AL,devid_file_clean
 27833 00004A39 AB                      	STOSW			; sf_flags, ES:DI -> sf_devptr
 27834                                  
 27835                                  ;	Generate and store device pointer
 27836                                  
 27837 00004A3A 1E                      	PUSH	DS
 27838                                  	;lds	ax,[bx+1Ah]
 27839 00004A3B C5471A                  	LDS	AX,[BX+dir_entry.dir_first] ; Assume device
 27840 00004A3E 08F6                    	OR	DH,DH
 27841 00004A40 7805                    	JS	short DEV_SFT2
 27842                                  
 27843                                  ;hkn; SS override
 27844 00004A42 36C506[8A05]            	LDS	AX,[SS:THISDPB]	; Was file
 27845                                  DEV_SFT2:
 27846 00004A47 AB                      	STOSW			; store offset
 27847 00004A48 8CD8                    	MOV	AX,DS
 27848 00004A4A 1F                      	POP	DS
 27849 00004A4B AB                      	STOSW			; store segment
 27850                                  				; ES:DI -> sf_firclus
 27851                                  
 27852                                  ;	Generate pointer to, generate and store first cluster
 27853                                  ;	(irrelevant for devices)
 27854                                  
 27855 00004A4C 56                      	PUSH	SI		; Save pointer to dir_first
 27856 00004A4D A5                      	MOVSW			; dir_first -> sf_firclus
 27857                                  				; DS:SI -> dir_size_l, ES:DI -> sf_time
 27858                                  
 27859                                  ;	Copy time/date of last modification
 27860                                  
 27861                                  	;sub	si,6
 27862 00004A4E 83EE06                  	SUB	SI,dir_entry.dir_size_l - dir_entry.dir_time 
 27863                                  				; DS:SI->dir_time
 27864 00004A51 A5                      	MOVSW			; dir_time -> sf_time
 27865                                  				; DS:SI -> dir_date, ES:DI -> sf_date
 27866 00004A52 A5                      	MOVSW			; dir_date -> sf_date
 27867                                  				; DS:SI -> dir_first, ES:DI -> sf_size
 27868                                  
 27869                                  ;	Generate and store file size (0 for devices)
 27870                                  
 27871 00004A53 AD                      	LODSW			; skip dir_first, DS:SI -> dir_size_l
 27872 00004A54 AD                      	LODSW			; dir_size_l in AX, DS:SI -> dir_size_h
 27873                                  	;MOV	CX,AX		; dir_size_l in CX
 27874                                  	; 23/02/2024
 27875 00004A55 91                      	xchg	ax,cx
 27876 00004A56 AD                      	LODSW			; dir_size_h (size AX:CX), DS:SI -> ????
 27877 00004A57 08F6                    	OR	DH,DH
 27878 00004A59 7904                    	JNS	short FILE_SFT1
 27879 00004A5B 31C0                    	XOR	AX,AX
 27880 00004A5D 89C1                    	MOV	CX,AX		; Devices are open ended
 27881                                  FILE_SFT1:
 27882 00004A5F 91                      	XCHG	AX,CX
 27883 00004A60 AB                      	STOSW			; Low word of sf_size
 27884 00004A61 91                      	XCHG	AX,CX
 27885 00004A62 AB                      	STOSW			; High word of sf_size
 27886                                  				; ES:DI -> sf_position
 27887                                  ; Initialize position to 0
 27888                                  
 27889 00004A63 31C0                    	XOR	AX,AX
 27890 00004A65 AB                      	STOSW
 27891 00004A66 AB                      	STOSW			; sf_position
 27892                                  				; ES:DI -> sf_cluspos
 27893                                  
 27894                                  ; Generate cluster optimizations for files
 27895                                  
 27896 00004A67 08F6                    	OR	DH,DH
 27897 00004A69 7843                    	JS	short DEV_SFT3
 27898 00004A6B AB                      	STOSW			; sf_cluspos ; 19h
 27899                                  	;mov	ax,[bx+1Ah]
 27900 00004A6C 8B471A                  	MOV	AX,[BX+dir_entry.dir_first]
 27901                                  	; 19/05/2019
 27902                                  	; MSDOS 3.3
 27903                                  	;STOSW			; sf_lstclus ; 1Bh
 27904                                  	; MSDOS 6.0
 27905 00004A6F 57                      	PUSH	DI		;AN004; save dirsec offset
 27906                                  	;sub	di,1Bh
 27907 00004A70 83EF1B                  	SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 27908                                  	;mov	[es:di+35h],ax
 27909 00004A73 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 27910 00004A77 5F                      	POP	DI		;AN004; restore dirsec offset
 27911                                  
 27912                                  ; DOS 3.3  FastOpen  6/13/86
 27913                                  
 27914 00004A78 1E                      	PUSH	DS
 27915                                  
 27916                                  ;hkn; SS is DOSDATA
 27917 00004A79 16                      	push	ss
 27918 00004A7A 1F                      	pop	ds
 27919                                  	;test	byte [FastOpenFlg],4
 27920 00004A7B F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 27921 00004A80 7411                    	JZ	short Not_FastOpen
 27922                                  
 27923                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 27924 00004A82 BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 27925                                  
 27926                                  	;mov	ax,[si+1]
 27927 00004A85 8B4401                  	MOV	AX,[SI+FEI.dirsec]
 27928 00004A88 AB                      	STOSW		  	; sf_dirsec
 27929                                  	; MSDOS 6.0
 27930                                  	;mov	ax,[si+3]
 27931 00004A89 8B4403                  	MOV	AX,[SI+FEI.dirsec+2]
 27932                                  		;;; changed for >32mb
 27933 00004A8C AB                      	STOSW		  	; sf_dirsec
 27934                                  	; 19/08//2018
 27935 00004A8D 8A04                    	mov	al,[SI]
 27936                                  	;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 27937 00004A8F AA                      	STOSB		  	; sf_dirpos
 27938 00004A90 1F                      	POP	DS
 27939                                  	;JMP	short Next_Name
 27940                                  	; 24/09/2023
 27941 00004A91 EB1E                    	jmp	short FILE_SFT2	; cf=0 (after 'test' instruction)
 27942                                  
 27943                                  ; DOS 3.3  FastOpen  6/13/86
 27944                                  
 27945                                  Not_FastOpen:
 27946                                  	;POP	DS		; normal path
 27947                                  
 27948                                  ;hkn; SS override
 27949                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 27950                                  	; 16/12/2022
 27951                                  	; 28/07/2019
 27952 00004A93 8B36[E205]              	mov	si,[CURBUF]
 27953 00004A97 1F                      	pop	ds
 27954                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27955                                  	;pop	ds
 27956                                  	;mov	si,[ss:CURBUF]
 27957                                  	
 27958                                  	;mov	ax,[si+6]
 27959 00004A98 8B4406                  	MOV	AX,[SI+BUFFINFO.buf_sector]	;F.C. >32mb ;AN000;
 27960 00004A9B AB                      	STOSW		  	; sf_dirsec	;F.C. >32mb ;AN000;
 27961                                  	; 19/05/2019	
 27962                                  	; MSDOS 6.0
 27963                                  	;mov	ax,[si+8]
 27964 00004A9C 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 27965 00004A9F AB                      	STOSW		  	; sf_dirsec	;F.C. >32mb ;AN000;
 27966                                  	
 27967 00004AA0 89D8                    	MOV	AX,BX
 27968                                  	;;add	si,16	; MSDOS 3.3
 27969                                  	;add	si,20	; MSDOS 6.0
 27970 00004AA2 83C614                  	ADD	SI,BUFINSIZ	; DS:SI-> start of data in buffer
 27971 00004AA5 29F0                    	SUB	AX,SI		; AX = BX relative to start of sector
 27972                                  	;mov	cl,32
 27973 00004AA7 B120                    	MOV	CL,dir_entry.size
 27974 00004AA9 F6F1                    	DIV	CL
 27975 00004AAB AA                      	STOSB		  	; sf_dirpos
 27976                                  Next_Name:
 27977 00004AAC EB03                    	JMP	SHORT FILE_SFT2
 27978                                  
 27979                                  	; 24/09/2023
 27980                                  	; cf=0 (after 'or' instruction)
 27981                                  DEV_SFT3:
 27982                                  	;add	di,7
 27983 00004AAE 83C707                  	ADD	DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 27984                                  FILE_SFT2:
 27985                                  
 27986                                  ; Copy in the object's name
 27987                                  
 27988 00004AB1 89DE                    	MOV	SI,BX		; DS:SI points to dir_name
 27989 00004AB3 B90B00                  	MOV	CX,11
 27990 00004AB6 F3A4                    	REP	MOVSB		; sf_name
 27991 00004AB8 5E                      	POP	SI		; recover DS:SI -> dir_first
 27992                                  
 27993                                  ;hkn; SS is DOSDATA
 27994 00004AB9 16                      	push	ss
 27995 00004ABA 1F                      	pop	ds
 27996                                  	; 24/09/2023
 27997                                  	; cf=0
 27998                                  	;CLC
 27999 00004ABB C3                      	retn
 28000                                  
 28001                                  ;---------------------------------------------------------------------------
 28002                                  ;
 28003                                  ; Procedure Name : FREEENT
 28004                                  ;
 28005                                  ; Inputs:
 28006                                  ;	  ES:BP -> DPB
 28007                                  ;	  [CURBUF] Set
 28008                                  ;	  [CURBUF+2]:BX points to directory entry
 28009                                  ;	  [CURBUF+2]:SI points to above dir_first
 28010                                  ; Function:
 28011                                  ;	  Free the cluster chain for the entry if present
 28012                                  ; Outputs:
 28013                                  ;	  Carry set if error (currently user FAILed to I 24)
 28014                                  ;	  (NOTE dir_firclus and dir_size_l/h are wrong)
 28015                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 28016                                  ;---------------------------------------------------------------------------
 28017                                  
 28018                                  	; 24/02/2024 - Retro DOS v4.1
 28019                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28020                                  FREEENT:
 28021 00004ABC 1E                      	PUSH	DS
 28022 00004ABD C53E[E205]              	LDS	DI,[CURBUF]
 28023 00004AC1 8B0C                    	MOV	CX,[SI]		; Get pointer to clusters
 28024                                  	; 19/05/2019 - Retro DOS v4.0
 28025                                  	; MSDOS 6.0
 28026 00004AC3 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb  ;AN000;
 28027                                  ;hkn; SS override
 28028 00004AC6 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	      ;F.C. >32mb  ;AN000;
 28029 00004ACB 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]
 28030 00004ACE 1F                      	POP	DS
 28031 00004ACF 83F902                  	CMP	CX,2
 28032 00004AD2 722C                    	JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 28033                                  	;cmp	cx,[es:bp+0Dh]
 28034 00004AD4 263B4E0D                	CMP	CX,[ES:BP+DPB.MAX_CLUSTER]
 28035                                  	;JA	short RET1	; Treat like zero length file (firclus mucked)
 28036 00004AD8 7715                    	ja	short freeent_retn ; 24/02/2024
 28037 00004ADA 29FB                    	SUB	BX,DI
 28038 00004ADC 53                      	PUSH	BX		; Save offset
 28039 00004ADD FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 28040 00004AE1 52                      	PUSH	DX		; Save sector number
 28041 00004AE2 89CB                    	MOV	BX,CX
 28042 00004AE4 E8A402                  	call	RELEASE		; Free any data allocated
 28043 00004AE7 5A                      	POP	DX
 28044 00004AE8 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 28045 00004AEC 7302                    	JNC	short GET_BUF_BACK
 28046 00004AEE 5B                      	POP	BX
 28047                                  freeent_retn:
 28048 00004AEF C3                      	retn			; Screw up
 28049                                  
 28050                                  GET_BUF_BACK:
 28051                                  	; 22/09/2023
 28052                                  	;;mov	byte [ALLOWED],18h
 28053                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 28054                                  	;XOR	AL,AL ; *
 28055                                  	;call	GETBUFFR	; Get sector back
 28056 00004AF0 E80F0D                  	call	GETBUFFER ; *	; pre read
 28057                                  
 28058 00004AF3 5B                      	POP	BX		; Get offset back
 28059 00004AF4 72F9                    	jc	short freeent_retn
 28060 00004AF6 E8FCEA                  	call	SET_BUF_AS_DIR
 28061 00004AF9 031E[E205]              	ADD	BX,[CURBUF]	; Correct it for new buffer
 28062                                  
 28063                                  	;MOV	SI,BX
 28064                                  	;;add	si,1Ah
 28065                                  	;ADD	SI,dir_entry.dir_first	; Get corrected SI
 28066                                  	; 24/02/2024 - Retro DOS v4.1
 28067                                  	;lea	si,[bx+1Ah]
 28068 00004AFD 8D771A                  	lea	si,[bx+dir_entry.dir_first]
 28069                                  RET1:
 28070 00004B00 F8                      	CLC
 28071 00004B01 C3                      	retn
 28072                                  
 28073                                  ;---------------------------------------------------------------------------
 28074                                  ;
 28075                                  ; Procedure Name : CHECK_VIRT_OPEN
 28076                                  ;
 28077                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 28078                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 28079                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 28080                                  ; flag [VIRTUAL_OPEN].
 28081                                  ; No registers affected (including flags).
 28082                                  ; On input, [THISSFT] points to current SFT.
 28083                                  ;
 28084                                  ;---------------------------------------------------------------------------
 28085                                  
 28086                                  CHECK_VIRT_OPEN:
 28087 00004B02 50                      	PUSH	AX
 28088 00004B03 9F                      	lahf			; preserve flags
 28089 00004B04 803E[A20A]00            	CMP	byte [VIRTUAL_OPEN],0
 28090 00004B09 7410                    	JZ	short ALL_CLOSED
 28091 00004B0B C606[A20A]00            	mov	byte [VIRTUAL_OPEN],0 ; reset flag
 28092 00004B10 06                      	push	es
 28093 00004B11 57                      	push	di
 28094 00004B12 C43E[9E05]              	LES	DI,[THISSFT]
 28095 00004B16 E8ADF9                  	call	DEV_CLOSE_SFT
 28096 00004B19 5F                      	pop	di
 28097 00004B1A 07                      	pop	es
 28098                                  
 28099                                  ALL_CLOSED:
 28100 00004B1B 9E                      	sahf			; restore flags
 28101 00004B1C 58                      	POP	AX
 28102 00004B1D C3                      	retn
 28103                                  
 28104                                  ;============================================================================
 28105                                  ; ROM.ASM, MSDOS 6.0, 1991
 28106                                  ;============================================================================
 28107                                  ; 29/07/2018 - Retro DOS v3.0
 28108                                  ; 20/05/2019 - Retro DOS v4.0
 28109                                  
 28110                                  ;	TITLE	ROM - Miscellaneous routines
 28111                                  ;	NAME	ROM
 28112                                  
 28113                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 28114                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 28115                                  ;
 28116                                  ;	SKPCLP
 28117                                  ;	FNDCLUS
 28118                                  ;	BUFSEC
 28119                                  ;	BUFRD
 28120                                  ;	BUFWRT
 28121                                  ;	NEXTSEC
 28122                                  ;	OPTIMIZE
 28123                                  ;	FIGREC
 28124                                  ;	ALLOCATE
 28125                                  ;	RESTFATBYT
 28126                                  ;	RELEASE
 28127                                  ;	RELBLKS
 28128                                  ;	GETEOF
 28129                                  ;
 28130                                  ;	Modification history:
 28131                                  ;
 28132                                  ;		Created: ARR 30 March 1983
 28133                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 28134                                  
 28135                                  ;Break   <FNDCLUS -- Skip over allocation units>
 28136                                  ;--------------------------------------------------------------------------
 28137                                  ;
 28138                                  ; Procedure Name : FNDCLUS
 28139                                  ;
 28140                                  ; Inputs:
 28141                                  ;       CX = No. of clusters to skip
 28142                                  ;       ES:BP = Base of drive parameters
 28143                                  ;       [THISSFT] point to SFT
 28144                                  ; Outputs:
 28145                                  ;       BX = Last cluster skipped to
 28146                                  ;       CX = No. of clusters remaining (0 unless EOF)
 28147                                  ;       DX = Position of last cluster
 28148                                  ;       Carry set if error (currently user FAILed to I 24)
 28149                                  ; DI destroyed. No other registers affected.
 28150                                  ;--------------------------------------------------------------------------
 28151                                  
 28152                                  	; 10/02/2024 - Retro DOS v4.1
 28153                                  FNDCLUS_X:
 28154 00004B1E 8B0E[BC05]              	mov	cx,[CLUSNUM]
 28155                                  
 28156                                  ; 20/05/2019 - Retro DOS v4.0
 28157                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 28158                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28159                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 28160                                  
 28161                                  FNDCLUS:
 28162 00004B22 06                      	PUSH	ES
 28163 00004B23 C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 28164                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 28165                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 28166 00004B27 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 28167                                  	;mov	dx,[es:di+19h]
 28168 00004B2B 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 28169 00004B2F 09DB                    	OR	BX,BX
 28170 00004B31 7424                    	JZ	short NOCLUS
 28171                                  
 28172 00004B33 29D1                            SUB     CX,DX
 28173 00004B35 7308                            JNB	short FINDIT
 28174                                  
 28175 00004B37 01D1                            ADD     CX,DX
 28176 00004B39 31D2                            XOR     DX,DX
 28177                                  	;mov	bx,[es:di+0Bh]
 28178 00004B3B 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 28179                                  FINDIT:
 28180 00004B3F 07                              POP	ES
 28181 00004B40 E313                    	JCXZ	RET9
 28182                                  
 28183                                  	;entry	SKPCLP
 28184                                  SKPCLP:
 28185 00004B42 E8B808                  	call	UNPACK
 28186 00004B45 7214                            jc	short fndclus_retn	; retc
 28187                                  
 28188                                  	; 09/09/2018
 28189                                  
 28190                                  	; MSDOS 3.3
 28191                                  	;push	bx
 28192                                  	;mov	bx,di
 28193                                  	;call	IsEOF
 28194                                  	;pop	bx	
 28195                                  	;jae	short RET9
 28196                                  
 28197                                  	; 20/05/2019 - Retro DOS v4.0
 28198                                  
 28199                                  	; MSDOS 6.0
 28200 00004B47 87DF                    	xchg	bx,di
 28201 00004B49 E89A08                  	call	IsEOF
 28202 00004B4C 87DF                    	xchg	bx,di
 28203 00004B4E 7305                    	jae	short RET9
 28204                                  
 28205 00004B50 87DF                            XCHG    BX,DI
 28206 00004B52 42                              INC     DX
 28207                                  
 28208 00004B53 E2ED                    	LOOP	SKPCLP			; RMFS
 28209                                  RET9:	
 28210 00004B55 F8                      	CLC
 28211 00004B56 C3                              retn
 28212                                  NOCLUS:
 28213 00004B57 07                              POP	ES
 28214 00004B58 41                              INC	CX
 28215 00004B59 4A                              DEC	DX
 28216 00004B5A F8                              CLC
 28217                                  
 28218                                  fndclus_retn:
 28219 00004B5B C3                              retn
 28220                                  
 28221                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 28222                                  ;--------------------------------------------------------------------------
 28223                                  ;
 28224                                  ; Procedure Name : BUFSEC
 28225                                  ;
 28226                                  ; Inputs:
 28227                                  ;       AH = priority of buffer
 28228                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 28229                                  ;       ES:BP = Base of drive parameters
 28230                                  ;       [CLUSNUM] = Physical cluster number
 28231                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 28232                                  ;       [BYTCNT1] = Size of transfer
 28233                                  ; Function:
 28234                                  ;       Insure specified sector is in buffer, flushing buffer before
 28235                                  ;       read if necessary.
 28236                                  ; Outputs:
 28237                                  ;       ES:DI = Pointer to buffer
 28238                                  ;       SI = Pointer to transfer address
 28239                                  ;       CX = Number of bytes
 28240                                  ;       [NEXTADD] updated
 28241                                  ;       [TRANS] set to indicate a transfer will occur
 28242                                  ;       Carry set if error (user FAILed to I 24)
 28243                                  ;--------------------------------------------------------------------------
 28244                                  
 28245                                  BUFSEC:
 28246 00004B5C 8B16[BC05]              	MOV	DX,[CLUSNUM]
 28247 00004B60 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 28248                                  	;mov	byte [ALLOWED],38h
 28249 00004B64 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 28250 00004B69 E84F01                  	CALL	FIGREC
 28251 00004B6C E89A0C                  	call	GETBUFFR
 28252 00004B6F 72EA                    	jc	short fndclus_retn
 28253                                  
 28254 00004B71 C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 28255 00004B76 8B36[B805]              	MOV	SI,[NEXTADD]
 28256 00004B7A 89F7                    	MOV	DI,SI
 28257 00004B7C 8B0E[D205]              	MOV	CX,[BYTCNT1]
 28258 00004B80 01CF                    	ADD	DI,CX
 28259 00004B82 893E[B805]              	MOV	[NEXTADD],DI
 28260 00004B86 C43E[E205]              	LES	DI,[CURBUF]
 28261                                  	;or	byte [es:di+5],8
 28262 00004B8A 26804D0508              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 28263                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 28264                                  	;lea	di,[di+20] ; MSDOS 6.0
 28265 00004B8F 8D7D14                  	LEA	DI,[DI+BUFINSIZ]        ; Point to buffer
 28266 00004B92 033E[CC05]              	ADD	DI,[BYTSECPOS]
 28267 00004B96 F8                      	CLC
 28268 00004B97 C3                      	retn
 28269                                  
 28270                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 28271                                  
 28272                                  ;---------------------------------------------------------------------------
 28273                                  ;
 28274                                  ; Procedure Name : BUFRD
 28275                                  ;
 28276                                  ; Do a partial sector read via one of the system buffers
 28277                                  ; ES:BP Points to DPB
 28278                                  ; Carry set if error (currently user FAILed to I 24)
 28279                                  ;
 28280                                  ; DS - set to DOSDATA
 28281                                  ;
 28282                                  ;----------------------------------------------------------------------------
 28283                                  
 28284                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28285                                  	; 20/05/2019 - Retro DOS v4.0
 28286                                  BUFRD:
 28287 00004B98 06                      	PUSH	ES
 28288 00004B99 31C0                    	xor	ax,ax			; pre-read sector
 28289 00004B9B E8BEFF                  	CALL	BUFSEC
 28290 00004B9E 7303                    	JNC	short BUF_OK ; ds=ss
 28291                                  
 28292                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 28293 00004BA0 07                      	POP	ES
 28294 00004BA1 EB2D                    	JMP	SHORT RBUFPLACED ; ds=ss ; 25/02/2024 - Retro DOS v4.1
 28295                                  
 28296                                  BUF_OK:
 28297 00004BA3 8CC3                    	MOV	BX,ES
 28298 00004BA5 8E06[2E03]              	MOV	ES,[DMAADD+2]
 28299 00004BA9 8EDB                    	MOV	DS,BX
 28300 00004BAB 87FE                    	XCHG	DI,SI
 28301 00004BAD D1E9                    	SHR	CX,1
 28302                                  ;M039
 28303                                  	; MSDOS 3.3
 28304                                  	;JNC	short EVENRD
 28305                                  	;MOVSB
 28306                                  ;EVENRD:
 28307                                  	;REP	MOVSW
 28308                                  
 28309                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 28310                                  ;       DS:SI-> Source within Buffer.
 28311                                  ;       ES:DI-> Destination within Transfer memory block.
 28312                                  
 28313                                  	; MSDOS 6.0
 28314 00004BAF F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 28315                                  	;adc	cx,0			;CX=1 if odd # of bytes, else CX=0.
 28316                                  	;rep	movsb			;Copy last byte.
 28317                                  	; 16/12/2022
 28318 00004BB1 7301                    	jnc	short EVENRD ; **** 20/05/2019
 28319 00004BB3 A4                      	movsb ; ****
 28320                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28321                                  	;adc	cx,0
 28322                                  	;rep	movsb
 28323                                  ;M039
 28324                                  EVENRD: ; ****
 28325 00004BB4 07                      	POP	ES
 28326                                  ;hkn; SS override
 28327 00004BB5 36C53E[E205]            	LDS	DI,[SS:CURBUF]
 28328                                  	;;lea	bx,[di+16]
 28329                                  	;lea	bx,[di+20] ; MSDOS 6.0
 28330 00004BBA 8D5D14                  	LEA	BX,[DI+BUFINSIZ]
 28331 00004BBD 29DE                    	SUB	SI,BX			; Position in buffer
 28332 00004BBF E8E70B                  	call	PLACEBUF
 28333                                  	;cmp	si,[es:bp+2]
 28334 00004BC2 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 28335 00004BC6 7205                    	JB	short RBUFPLACEDC ; ds<>ss ; No, leave buf where it is
 28336                                  ;M039
 28337                                  	; MSDOS 3.3
 28338                                  	;call	PLACEHEAD 		; Make it prime candidate for chucking
 28339                                  					;  even though it is MRU.
 28340                                  	; MSDOS 6.0
 28341 00004BC8 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 28342                                  ;M039					; chucking even though it is MRU.
 28343                                  
 28344                                  RBUFPLACEDC:
 28345 00004BCD F8                      	CLC
 28346                                  ;RBUFPLACED:
 28347 00004BCE 16                      	push	ss
 28348 00004BCF 1F                      	pop	ds
 28349                                  RBUFPLACED:	; 25/02/2024 (ds=ss)
 28350 00004BD0 C3                      	retn
 28351                                  
 28352                                  ;----------------------------------------------------------------------------
 28353                                  ;
 28354                                  ; Procedure : BUFWRT
 28355                                  ;
 28356                                  ; Do a partial sector write via one of the system buffers
 28357                                  ; ES:BP Points to DPB
 28358                                  ; Carry set if error (currently user FAILed to I 24)
 28359                                  ;
 28360                                  ; DS - set to DOSDATA
 28361                                  ;
 28362                                  ;----------------------------------------------------------------------------
 28363                                  
 28364                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28365                                  	; 20/05/2019 - Retro DOS v4.0
 28366                                  BUFWRT:
 28367                                  	;MOV	AX,[SECPOS]
 28368                                  	; MSDOS 6.0
 28369                                  	;ADD	AX,1			; Set for next sector
 28370                                  	;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 28371                                  	;ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 28372                                  	; 24/09/2023
 28373 00004BD1 FF06[C405]              	inc	word [SECPOS]
 28374 00004BD5 7504                    	jnz	short bufw_secpos
 28375 00004BD7 FF06[C605]              	inc	word [SECPOS+2]
 28376                                  bufw_secpos:
 28377 00004BDB A1[C605]                	MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 28378 00004BDE 3B06[CA05]              	CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 28379 00004BE2 B001                    	MOV	AL,1			;F.C. >32mb	;AN000;
 28380 00004BE4 770F                    	JA	short NOREAD		;F.C. >32mb	;AN000;
 28381 00004BE6 720B                    	JB	short _doread		;F.C. >32mb	;AN000;
 28382 00004BE8 A1[C405]                	MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 28383                                  
 28384                                  	; MSDOS 3.3
 28385                                  	;INC	AX
 28386                                  	;MOV	[SECPOS],AX ; 09/09/2018
 28387                                  
 28388                                  	; 20/05/2019
 28389                                  	; MSDOS 3.3 & MSDOS 6.0
 28390 00004BEB 3B06[C805]              	CMP	AX,[VALSEC]		; Has sector been written before?
 28391 00004BEF B001                    	MOV	AL,1
 28392 00004BF1 7702                    	JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 28393                                  _doread:
 28394 00004BF3 30C0                    	XOR	AL,AL
 28395                                  NOREAD:
 28396 00004BF5 06                      	PUSH	ES
 28397 00004BF6 E863FF                  	CALL	BUFSEC
 28398 00004BF9 72A5                    	JC	short BUF_IO_FAIL
 28399 00004BFB 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 28400 00004BFF D1E9                    	SHR	CX,1
 28401                                  ;M039
 28402                                  	; MSDOS 3.3
 28403                                  	;JNC	short EVENWRT ; 09/09/2018
 28404                                  	;MOVSB
 28405                                  ;EVENWRT:
 28406                                  	;REP	MOVSW
 28407                                  
 28408                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 28409                                  ;	DS:SI-> Source within Transfer memory block.
 28410                                  ;	ES:DI-> Destination within Buffer.
 28411                                  
 28412                                  	; MSDOS 6.0
 28413 00004C01 F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 28414                                  	;adc	cx,0			;CX=1 if odd # of bytes, else CX=0.
 28415                                  	;rep	movsb		  	;Copy last byte.
 28416                                  	; 16/12/2022
 28417 00004C03 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 28418 00004C05 A4                      	movsb ; ****
 28419                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28420                                  	;adc	cx,0
 28421                                  	;rep	movsb
 28422                                  ;M039
 28423                                  EVENWRT: ; ****
 28424 00004C06 07                      	POP	ES
 28425                                  
 28426                                  ;hkn; SS override
 28427 00004C07 36C51E[E205]            	LDS	BX,[SS:CURBUF]
 28428                                  
 28429                                  	; MSDOS 6.0
 28430 00004C0C F6470540                	TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28431                                  					;LB. if already dirty		 ;AN000;
 28432 00004C10 7507                    	JNZ	short yesdirty10	;LB. don't increment dirty count ;AN000;
 28433 00004C12 E8F30D                  	call	INC_DIRTY_COUNT		;LB.				 ;AN000;
 28434                                  	
 28435                                  	;or	byte [bx+5],40h
 28436 00004C15 804F0540                	OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28437                                  yesdirty10:
 28438                                  	;;lea	si,[bx+16]
 28439                                  	;lea	si,[bx+20] ; MSDOS 6.0
 28440 00004C19 8D7714                  	LEA	SI,[BX+BUFINSIZ]
 28441 00004C1C 29F7                    	SUB	DI,SI		  	; Position in buffer
 28442                                  ;M039
 28443                                  	; MSDOS 3.3
 28444                                  	;MOV	SI,DI
 28445                                  	;MOV	DI,BX
 28446                                  	;call	PLACEBUF
 28447                                  	;;cmp	si,[es:bp+2]
 28448                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28449                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 28450                                  	;call	PLACEHEAD		; Make it prime candidate for chucking
 28451                                  					;  even though it is MRU.
 28452                                  	; 10/02/2024
 28453 00004C1E 16                      	push	ss
 28454 00004C1F 1F                      	pop	ds
 28455                                  
 28456                                  	; MSDOS 6.0
 28457                                  	;cmp	di,[es:bp+2]
 28458 00004C20 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28459 00004C24 7204                    	JB	short WBUFPLACED	; No, leave buf where it is
 28460                                  
 28461                                  	; 10/02/2024
 28462                                  	;MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 28463                                  					; chucking even though it is MRU.
 28464 00004C26 891E[6D00]              	mov	[BufferQueue],bx
 28465                                  ;M039
 28466                                  
 28467                                  WBUFPLACED:
 28468 00004C2A F8                      	CLC
 28469                                  	; 10/02/2024
 28470                                  	;push	ss
 28471                                  	;pop	ds
 28472 00004C2B C3                      	retn
 28473                                  
 28474                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 28475                                  ;---------------------------------------------------------------------------
 28476                                  ;
 28477                                  ; Procedure Name : NEXTSEC
 28478                                  ;
 28479                                  ; Compute the next sector to read or write
 28480                                  ; ES:BP Points to DPB
 28481                                  ;
 28482                                  ;---------------------------------------------------------------------------
 28483                                  
 28484                                  NEXTSEC:
 28485 00004C2C F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 28486                                  	;JZ	short CLRET
 28487                                  	; 29/02/2024
 28488 00004C31 7427                    	jz	short CLRET2
 28489                                  
 28490 00004C33 A0[7305]                	MOV	AL,[SECCLUSPOS]
 28491 00004C36 FEC0                    	INC	AL
 28492                                  	;cmp	al,[es:bp+4]
 28493 00004C38 263A4604                	CMP	AL,[ES:BP+DPB.CLUSTER_MASK]
 28494 00004C3C 7618                    	JBE	short SAVPOS
 28495                                  
 28496 00004C3E 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 28497 00004C42 E8A107                  	call	IsEOF
 28498 00004C45 7314                    	JAE	short NONEXT
 28499                                  
 28500 00004C47 E8B307                  	call	UNPACK
 28501                                  	;JC	short NONEXT
 28502                                  	; 26/02/2024
 28503 00004C4A 7210                    	jc	short NONEXT2
 28504                                  clusgot:
 28505 00004C4C 893E[BC05]              	MOV	[CLUSNUM],DI
 28506 00004C50 FF06[BA05]              	INC	word [LASTPOS]
 28507 00004C54 B000                    	MOV	AL,0
 28508                                  SAVPOS:
 28509 00004C56 A2[7305]                	MOV	[SECCLUSPOS],AL
 28510                                  CLRET:
 28511 00004C59 F8                              CLC
 28512                                  CLRET2:		; 29/02/2024
 28513 00004C5A C3                      	retn
 28514                                  NONEXT:
 28515 00004C5B F9                      	STC
 28516                                  NONEXT2:	; 26/02/2024
 28517 00004C5C C3                      	retn
 28518                                  
 28519                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 28520                                  ;----------------------------------------------------------------------------
 28521                                  ;
 28522                                  ; Procedure Name : OPTIMIZE
 28523                                  ;
 28524                                  ; Inputs:
 28525                                  ;	  BX = Physical cluster
 28526                                  ;	  CX = No. of records
 28527                                  ;	  DL = sector within cluster
 28528                                  ;	  ES:BP = Base of drive parameters
 28529                                  ;	  [NEXTADD] = transfer address
 28530                                  ; Outputs:
 28531                                  ;	  AX = No. of records remaining
 28532                                  ;	  BX = Transfer address
 28533                                  ;	  CX = No. or records to be transferred
 28534                                  ;	  DX = Physical sector address (LOW)
 28535                                  ;	  [HIGH_SECTOR] = Physical sector address (HIGH)
 28536                                  ;	  DI = Next cluster
 28537                                  ;	  [CLUSNUM] = Last cluster accessed
 28538                                  ;	  [NEXTADD] updated
 28539                                  ;	  Carry set if error (currently user FAILed to I 24)
 28540                                  ; ES:BP unchanged. Note that segment of transfer not set.
 28541                                  ;
 28542                                  ;---------------------------------------------------------------------------
 28543                                  
 28544                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28545                                  OPTIMIZE:
 28546 00004C5D 52                      	PUSH	DX
 28547 00004C5E 53                      	PUSH	BX
 28548                                  	;mov	al,[es:bp+4]
 28549 00004C5F 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 28550 00004C63 FEC0                    	INC	AL		; Number of sectors per cluster
 28551 00004C65 88C4                    	MOV	AH,AL
 28552 00004C67 28D0                    	SUB	AL,DL		; AL = Num of sectors left in first cluster
 28553 00004C69 89CA                    	MOV	DX,CX
 28554                                  	;MOV	CX,0
 28555                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28556                                  	; 16/12/2022
 28557 00004C6B 31C9                    	xor	cx,cx	; sub cx,cx
 28558                                  OPTCLUS:
 28559                                  ; AL has number of sectors available in current cluster
 28560                                  ; AH has number of sectors available in next cluster
 28561                                  ; BX has current physical cluster
 28562                                  ; CX has number of sequential sectors found so far
 28563                                  ; DX has number of sectors left to transfer
 28564                                  ; ES:BP Points to DPB
 28565                                  ; ES:SI has FAT pointer
 28566                                  
 28567                                  do_norm3:
 28568 00004C6D E88D07                  	call	UNPACK
 28569 00004C70 7236                    	JC	short OP_ERR
 28570                                  clusgot2:
 28571 00004C72 00C1                    	ADD	CL,AL
 28572 00004C74 80D500                  	ADC	CH,0
 28573 00004C77 39D1                    	CMP	CX,DX
 28574 00004C79 7332                    	JAE	short BLKDON
 28575 00004C7B 88E0                    	MOV	AL,AH
 28576 00004C7D 43                      	INC	BX
 28577 00004C7E 39DF                    	CMP	DI,BX
 28578 00004C80 74EB                    	JZ	short OPTCLUS
 28579 00004C82 4B                      	DEC	BX
 28580                                  FINCLUS:
 28581 00004C83 891E[BC05]              	MOV	[CLUSNUM],BX	; Last cluster accessed
 28582 00004C87 29CA                    	SUB	DX,CX		; Number of sectors still needed
 28583 00004C89 52                      	PUSH	DX
 28584 00004C8A 89C8                    	MOV	AX,CX
 28585                                  	;mul	word[ES:BP+2]
 28586 00004C8C 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 28587                                  				; Number of sectors times sector size
 28588 00004C90 8B36[B805]              	MOV	SI,[NEXTADD]
 28589 00004C94 01F0                    	ADD	AX,SI		; Adjust by size of transfer
 28590 00004C96 A3[B805]                	MOV	[NEXTADD],AX
 28591 00004C99 58                      	POP	AX		; Number of sectors still needed
 28592 00004C9A 5A                      	POP	DX		; Starting cluster
 28593 00004C9B 29D3                    	SUB	BX,DX		; Number of new clusters accessed
 28594 00004C9D 011E[BA05]              	ADD	[LASTPOS],BX
 28595 00004CA1 5B                      	POP	BX		; BL = sector position within cluster
 28596 00004CA2 E81600                  	call	FIGREC
 28597 00004CA5 89F3                    	MOV	BX,SI
 28598                                  	; 24/09/2023
 28599                                  	; cf=0 (at the return of FIGREC)
 28600                                  	;CLC
 28601 00004CA7 C3                      	retn
 28602                                  OP_ERR:
 28603 00004CA8 83C404                  	ADD	SP,4
 28604 00004CAB F9                      	STC
 28605 00004CAC C3                      	retn
 28606                                  BLKDON:
 28607 00004CAD 29D1                    	SUB	CX,DX	  	; Number of sectors in cluster we don't want
 28608 00004CAF 28CC                    	SUB	AH,CL	  	; Number of sectors in cluster we accepted
 28609 00004CB1 FECC                    	DEC	AH		; Adjust to mean position within cluster
 28610 00004CB3 8826[7305]              	MOV	[SECCLUSPOS],AH
 28611 00004CB7 89D1                    	MOV	CX,DX		; Anyway, make the total equal to the request
 28612 00004CB9 EBC8                    	JMP	SHORT FINCLUS
 28613                                  
 28614                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 28615                                  ;---------------------------------------------------------------------------
 28616                                  ;
 28617                                  ; Procedure Name : FIGREC
 28618                                  ;
 28619                                  ; Inputs:
 28620                                  ;	  DX = Physical cluster number
 28621                                  ;	  BL = Sector position within cluster
 28622                                  ;	  ES:BP = Base of drive parameters
 28623                                  ; Outputs:
 28624                                  ;	  DX = physical sector number (LOW)
 28625                                  ;	  [HIGH_SECTOR] Physical sector address (HIGH)
 28626                                  ; No other registers affected.
 28627                                  ;
 28628                                  ;---------------------------------------------------------------------------
 28629                                  
 28630                                  	; 10/06/2019
 28631                                  	; 20/05/2019 - Retro DOS v4.0
 28632                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 28633                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28634                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)
 28635                                  
 28636                                  	; 27/02/2024 - Retro DOS v4.1
 28637                                  	; (ds=ss)
 28638                                  FIGREC:
 28639 00004CBB 51                      	PUSH	CX
 28640                                  	;
 28641                                  	; 27/02/2024
 28642 00004CBC 31C9                    	xor	cx,cx
 28643 00004CBE 890E[0706]              	mov	[HIGH_SECTOR],cx ;0
 28644                                  	;
 28645                                  	;mov	cl,[es:bp+5]
 28646 00004CC2 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 28647 00004CC6 4A                      	DEC	DX
 28648 00004CC7 4A                      	DEC	DX
 28649                                  
 28650                                  	; MSDOS 3.3
 28651                                  	;SHL	DX,CL
 28652                                  
 28653                                  ;hkn; SS override HIGH_SECTOR
 28654                                  	; MSDOS 6.0
 28655                                  	;MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 28656                                  	; 27/02/2024
 28657                                  	;mov	word [HIGH_SECTOR],0
 28658                                  	; 24/09/2023
 28659                                  	;;xor	ch,ch				;F.C. >32mb
 28660                                  	;OR	CL,CL				;F.C. >32mb
 28661                                  	;JZ	short noshift			;F.C. >32mb
 28662                                  	; 27/02/2024
 28663 00004CC8 E309                    	jcxz	noshift
 28664                                  	; 27/02/2024
 28665                                  	;;XOR	CH,CH				;F.C. >32mb
 28666                                  rotleft:					;F.C. >32mb
 28667 00004CCA F8                      	CLC					;F.C. >32mb
 28668 00004CCB D1D2                    	RCL	DX,1				;F.C. >32mb
 28669                                  	; 10/06/2019
 28670                                  	;RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 28671                                  	; 27/02/2024
 28672 00004CCD D116[0706]              	rcl	word [HIGH_SECTOR],1
 28673 00004CD1 E2F7                    	LOOP	rotleft				;F.C. >32mb
 28674                                  noshift:
 28675                                  	; MSDOS 3.3 & MSDOS 6.0
 28676 00004CD3 08DA                    	OR	DL,BL
 28677                                  	;add	dx,[es:bp+0Bh]
 28678 00004CD5 2603560B                	ADD	DX,[ES:BP+DPB.FIRST_SECTOR]
 28679                                  	; MSDOS 6.0
 28680                                  	; 10/06/2019
 28681                                  	;ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 28682                                  	; 24/09/2023
 28683                                  	; cx=0
 28684                                  	;ADC	word [ss:HIGH_SECTOR],cx ; 0
 28685                                  	; 27/02/2024
 28686 00004CD9 110E[0706]              	adc	word [HIGH_SECTOR],cx ; 0
 28687                                  
 28688                                  	; MSDOS 3.3 & MSDOS 6.0
 28689 00004CDD 59                      	POP	CX
 28690                                  figrec_retn:
 28691 00004CDE C3                      	retn
 28692                                  
 28693                                  ; 20/05/2019 - Retro DOS v4.0
 28694                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 28695                                  
 28696                                  ; 30/07/2018 - Retro DOS v3.0
 28697                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 28698                                  
 28699                                  ;Break   <ALLOCATE -- Assign disk space>
 28700                                  ;---------------------------------------------------------------------------
 28701                                  ;
 28702                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 28703                                  ;
 28704                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 28705                                  ;   FAT-chained onto the end of the existing file.
 28706                                  ;
 28707                                  ;   The DPB contains the cluster # of the last free cluster allocated
 28708                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 28709                                  ;   numbered clusters, looking for the necessary free blocks.
 28710                                  ;
 28711                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 28712                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 28713                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 28714                                  ;
 28715                                  ;       If we get to the end of the disk without satisfaction:
 28716                                  ;
 28717                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 28718                                  ;               return (insufficient_disk_space)
 28719                                  ;           ELSE
 28720                                  ;               dpb_next_free = 2; start scan over from the beginning.
 28721                                  ;
 28722                                  ;   Note that there is no multitasking interlock. There is no race when
 28723                                  ;   examining the entrys in an in-core FAT block since there will be no
 28724                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 28725                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 28726                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 28727                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 28728                                  ;   satisfied. We can't allow another activation to think this cluster is
 28729                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 28730                                  ;   allocated.
 28731                                  ;
 28732                                  ;   Note that when we run out of space this algorithem will scan from
 28733                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 28734                                  ;   redundantly scanning the later part of the disk. This only happens when
 28735                                  ;   we run out of space, so sue me.
 28736                                  ;
 28737                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28738                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28739                                  ;                                                                          ;
 28740                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 28741                                  ;   explanation:
 28742                                  ;
 28743                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 28744                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 28745                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 28746                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 28747                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 28748                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 28749                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 28750                                  ;   the
 28751                                  ;           LOOP   findfre         ; alloc more if needed
 28752                                  ;   instruction when the first cluster is allocated to the nul file. The
 28753                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 28754                                  ;
 28755                                  ;   This method is obviously useless (because it is non-reentrant) for
 28756                                  ;   multitasking, and will have to be changed. Storing the required value on
 28757                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 28758                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 28759                                  ;   problems with INT 24 well.
 28760                                  ;
 28761                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28762                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28763                                  ;                                                                          ;
 28764                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 28765                                  ;               CX = No. of clusters to allocate
 28766                                  ;               ES:BP = Base of drive parameters
 28767                                  ;               [THISSFT] = Points to SFT
 28768                                  ;
 28769                                  ;       EXIT    'C' set if insufficient space
 28770                                  ;                 [FAILERR] can be tested to see the reason for failure
 28771                                  ;                 CX = max. no. of clusters that could be added to file
 28772                                  ;               'C' clear if space allocated
 28773                                  ;                 BX = First cluster allocated
 28774                                  ;                 FAT is fully updated
 28775                                  ;                 sf_FIRCLUS field of SFT set if file was null
 28776                                  ;
 28777                                  ;       USES    ALL but SI, BP
 28778                                  
 28779                                  ;callmagic  proc near
 28780                                  ;       push    ds                             ;push segment of routine 
 28781                                  ;       push    Offset MagicPatch              ;push offset for routine
 28782                                  ;       retf                                   ;simulate jmp far
 28783                                  ;                                              ;far return address is on
 28784                                  ;                                              ;stack, so far return from
 28785                                  ;                                              ;call will return this routine
 28786                                  ;callmagic  endp
 28787                                  
 28788                                  ALLOCATE:
 28789                                  	; 10/09/2018
 28790                                  ;BEGIN MAGICDRV MODIFICATIONS
 28791                                  ;
 28792                                  ;7/5/92 scottq
 28793                                  ;
 28794                                  ;This is the disk compression patch location which allows
 28795                                  ;the disk compression software to fail allocations if the
 28796                                  ;FAT would allows allocation, but the free space for compressed
 28797                                  ;data would not.
 28798                                  ;        
 28799                                  ;;;	call    far ptr MAGICPATCH
 28800                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 28801                                  ;;; but we do know the segment and offset of the routine
 28802                                  ;;; so simulate a far call to dosdata:magicpatch
 28803                                  ;;; note dosassume above, so DS -> dosdata
 28804                                  
 28805                                  	; MSDOS 6.0
 28806                                          ;clc				;clear carry so we fall through
 28807                                  	;				;if no patch is present
 28808                                  	;push	cs			;push segment for far return
 28809                                          ;call	callmagic		;this is a near call
 28810                                          ;jnc	short Regular_Allocate_Path
 28811                                  	;jmp	Disk_Full_Return
 28812                                  
 28813                                  ;Regular_Allocate_Path:
 28814                                  	; 20/05/2019 - Retro DOS v4.0
 28815                                  ;END MAGICDRV MODIFICATIONS
 28816                                  
 28817                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28818                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 28819                                  
 28820 00004CDF 53                              PUSH    BX                      ; save (bx)
 28821 00004CE0 31DB                            XOR     BX,BX
 28822 00004CE2 E81807                  	call	UNPACK
 28823 00004CE5 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 28824 00004CE9 5B                              POP     BX
 28825 00004CEA 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 28826                                  
 28827 00004CEC 51                              PUSH    CX
 28828 00004CED 53                              PUSH    BX
 28829                                  
 28830 00004CEE 89DA                            MOV     DX,BX
 28831                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 28832                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 28833 00004CF0 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 28834 00004CF4 83FB02                          cmp     bx,2
 28835 00004CF7 7709                            ja	short FINDFRE
 28836                                  
 28837                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 28838                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 28839                                  
 28840                                  ads1:
 28841                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 28842                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 28843 00004CF9 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 28844 00004CFF BB0100                          mov     bx,1                    ; Counter next instruction so first
 28845                                                                          ;       cluster examined is 2
 28846                                  
 28847                                  ;   Scanning both forwards and backwards for a free cluster
 28848                                  ;
 28849                                  ;       (BX) = forwards scan pointer
 28850                                  ;       (CX) = clusters remaining to be allocated
 28851                                  ;       (DX) = current last cluster in file
 28852                                  ;       (TOS) = last cluster of file
 28853                                  
 28854                                  FINDFRE:
 28855 00004D02 43                              INC     BX
 28856                                  	;cmp	bx,[es:bp+0Dh]
 28857 00004D03 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 28858 00004D07 7757                    	ja	short ads7	; at end of disk
 28859 00004D09 E8F106                          call	UNPACK          ; check out this cluster
 28860 00004D0C 722F                            jc	short ads4	; FAT error             [INTERR?]
 28861 00004D0E 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 28862                                  
 28863                                  ;   Have found a free cluster. Chain it to the file
 28864                                  ;
 28865                                  ;       (BX) = found free cluster #
 28866                                  ;       (DX) = current last cluster in file
 28867                                  
 28868                                  	;;mov	[es:bp+1Ch],bx
 28869                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 28870 00004D10 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 28871 00004D14 92                              xchg    ax,dx           ; save (dx) in ax
 28872 00004D15 BA0100                          mov     dx,1            ; mark this free guy as "1"
 28873 00004D18 E83607                  	call	PACK            ; set special "temporary" mark
 28874 00004D1B 7220                            jc	short ads4	; FAT error             [INTERR?]
 28875                                  	;;cmp	word [es:bp+1Eh],-1
 28876                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28877 00004D1D 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28878 00004D22 7404                            JZ	short NO_ALLOC	; No
 28879                                  	;;dec	word [es:bp+1Eh]
 28880                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 28881 00004D24 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 28882                                  NO_ALLOC:
 28883 00004D28 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 28884 00004D29 87DA                            XCHG    BX,DX
 28885 00004D2B 89D0                            MOV     AX,DX
 28886 00004D2D E82107                  	call	PACK            ; link free cluster onto file
 28887                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 28888                                                                  ;    cluster 0 with FIRCLUS value.
 28889 00004D30 720B                            jc	short ads4	; FAT error [INTERR?]
 28890 00004D32 93                              xchg    BX,AX           ; (BX) = last one we looked at
 28891 00004D33 89DA                            mov     dx,bx           ; (dx) = current end of file
 28892 00004D35 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 28893                                  
 28894                                  ;   We've successfully extended the file. Clean up and exit
 28895                                  ;
 28896                                  ;       (BX) = last cluster in file
 28897                                  
 28898 00004D37 BAFFFF                          MOV     DX,0FFFFH
 28899 00004D3A E81407                  	call	PACK            ; mark last cluster EOF
 28900                                  
 28901                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 28902                                  ;   2 whole bytes. Hope its worth it...
 28903                                  ;
 28904                                  ;       'C' set if error
 28905                                  ;       calling (BX) and (CX) pushed on stack
 28906                                  
 28907                                  ads4:   
 28908 00004D3D 5B                      	POP     BX
 28909 00004D3E 59                              POP     CX              ; Don't need this stuff since we're successful
 28910 00004D3F 729D                            jc	short figrec_retn
 28911 00004D41 E8B906                          call	UNPACK          ; Get first cluster allocated for return
 28912                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 28913 00004D44 7298                            jc	short figrec_retn
 28914 00004D46 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 28915 00004D49 7293                            jc	short figrec_retn
 28916 00004D4B 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 28917 00004D4D 09FF                            OR      DI,DI           ; clear 'C'
 28918 00004D4F 758D                    	jnz	short figrec_retn ; we were extending an existing file
 28919                                  
 28920                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 28921                                  ;   info
 28922                                  dofastk:
 28923                                  	; 20/05/2019
 28924                                  	; MSDOS 6.0
 28925                                  	;push	dx ; * MSDOS 6.0
 28926                                  	;;mov	dl,[es:bp+0]
 28927                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 28928                                  	;mov	dl,[es:bp]
 28929                                  
 28930                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28931                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 28932                                  	
 28933                                  	; 16/12/2022
 28934                                  	;push	dx ; *
 28935                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 28936                                  	; 15/12/2022
 28937                                  	;mov	dl,[es:bp]
 28938                                  	
 28939                                  	; MSDOS 3.3 & MSDOS 6.0
 28940 00004D51 06                      	PUSH	ES
 28941 00004D52 C43E[9E05]              	LES     DI,[THISSFT]
 28942                                  	;mov	[es:di+0Bh],bx
 28943 00004D56 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 28944                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 28945                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 28946 00004D5A 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 28947 00004D5E 07                      	POP	ES
 28948                                  	;retn
 28949                                  
 28950                                  	;pop	dx ; * MSDOS 6.0
 28951                                  
 28952                                  	; 16/12/2022
 28953                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28954                                  	;pop	dx ; *
 28955                                  
 28956 00004D5F C3                      	retn	
 28957                                  
 28958                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 28959                                  ;   of the disk...
 28960                                  
 28961                                  ads7:   
 28962 00004D60 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 28963 00004D65 7592                    	jnz	short ads1	; start scan from front of disk
 28964                                  
 28965                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 28966                                  ;   the space back to the free list and tell the caller how much he could have
 28967                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 28968                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 28969                                  ;
 28970                                  ;       (CX) = clusters remaining to be allocated
 28971                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 28972                                  ;       (TOS+1) = # of clusters wanted to allocate
 28973                                  
 28974 00004D67 5B                              POP     BX              ; (BX) = last cluster of file
 28975 00004D68 BAFFFF                          MOV     DX,0FFFFH
 28976 00004D6B E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 28977 00004D6E 58                              POP     AX              ; No. of clusters requested
 28978                                                                  ; Don't "retc". We are setting Carry anyway,
 28979                                                                  ;   Alloc failed, so proceed with return CX
 28980                                                                  ;   setup.
 28981 00004D6F 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 28982 00004D71 E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 28983                                                                  ;   Alloc failed.
 28984                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 28985                                          ; MSDOS 6.0
 28986 00004D74 C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 28987 00004D79 F9                              STC
 28988 00004D7A C3                              retn
 28989                                  
 28990                                  ;-----------------------------------------------------------------------
 28991                                  ;
 28992                                  ; Procedure Name : RESTFATBYT
 28993                                  ;
 28994                                  ; SEE ALLOCATE CAVEAT
 28995                                  ;       Carry set if error (currently user FAILed to I 24)
 28996                                  ;-----------------------------------------------------------------------
 28997                                  
 28998                                  RESTFATBYT:
 28999 00004D7B 53                              PUSH    BX
 29000 00004D7C 52                              PUSH    DX
 29001 00004D7D 57                              PUSH    DI
 29002 00004D7E 31DB                            XOR     BX,BX
 29003 00004D80 8B16[9605]                      MOV     DX,[FATBYT]
 29004 00004D84 E8CA06                  	call	PACK
 29005 00004D87 5F                              POP     DI
 29006 00004D88 5A                              POP     DX
 29007 00004D89 5B                              POP     BX
 29008                                  ; 16/12/2022
 29009                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29010                                  ;RELEASE_flush:
 29011 00004D8A C3                      	retn
 29012                                  
 29013                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 29014                                  ;---------------------------------------------------------------------------
 29015                                  ;
 29016                                  ; Procedure Name : RELEASE
 29017                                  ;
 29018                                  ; Inputs:
 29019                                  ;       BX = Cluster in file
 29020                                  ;       ES:BP = Base of drive parameters
 29021                                  ; Function:
 29022                                  ;       Frees cluster chain starting with [BX]
 29023                                  ;       Carry set if error (currently user FAILed to I 24)
 29024                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 29025                                  ;
 29026                                  ;-----------------------------------------------------------------------------
 29027                                  
 29028                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29029                                  	; 20/05/2019 - Retro DOS v4.0
 29030                                  RELEASE:
 29031 00004D8B 31D2                            XOR     DX,DX
 29032                                  
 29033                                  	;entry	RELBLKS
 29034                                  RELBLKS:
 29035                                  
 29036                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 29037                                  ;   and free the rest in the chain.
 29038                                  
 29039 00004D8D E86D06                  	call	UNPACK
 29040 00004D90 7224                    	jc	short RELEASE_flush
 29041 00004D92 7422                    	jz	short RELEASE_flush
 29042 00004D94 89F8                            MOV     AX,DI
 29043 00004D96 52                              PUSH    DX
 29044 00004D97 E8B706                  	call	PACK
 29045 00004D9A 5A                              POP     DX
 29046 00004D9B 7219                    	jc	short RELEASE_flush
 29047 00004D9D 09D2                            OR      DX,DX
 29048 00004D9F 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 29049                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 29050                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 29051 00004DA1 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 29052 00004DA6 7404                            JZ	short NO_DEALLOC	; No
 29053 00004DA8 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 29054                                  NO_DEALLOC:
 29055 00004DAC 89C3                            MOV     BX,AX
 29056 00004DAE 48                              dec     ax              ; check for "1"
 29057 00004DAF 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 29058 00004DB1 E83206                  	call	IsEOF
 29059 00004DB4 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 29060                                  
 29061                                  	; 16/12/2022
 29062                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29063                                  ;%if 0
 29064                                  RELEASE_flush:
 29065                                  	; MSDOS 6.0
 29066 00004DB6 268A4600                	mov	al,[es:bp]
 29067                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29068 00004DBA 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 29069 00004DBB 51                      	push	cx		;  them to be preserved.
 29070 00004DBC 06                      	push	es
 29071 00004DBD 55                      	push	bp
 29072 00004DBE E8450B                  	call	FLUSHBUF	; commit buffers for this drive
 29073 00004DC1 5D                      	pop	bp
 29074 00004DC2 07                      	pop	es
 29075 00004DC3 59                      	pop	cx
 29076 00004DC4 5E                      	pop	si
 29077                                  ;%endif
 29078                                  RET12:
 29079 00004DC5 C3                      	retn
 29080                                  
 29081                                  ;Break	<GETEOF -- Find the end of a file>
 29082                                  ;------------------------------------------------------------------------
 29083                                  ;
 29084                                  ; Procedure Name : GETEOF
 29085                                  ;
 29086                                  ; Inputs:
 29087                                  ;       ES:BP Points to DPB
 29088                                  ;       BX = Cluster in a file
 29089                                  ;       DS = CS
 29090                                  ; Outputs:
 29091                                  ;       BX = Last cluster in the file
 29092                                  ;       Carry set if error (currently user FAILed to I 24)
 29093                                  ; DI destroyed. No other registers affected.
 29094                                  ;
 29095                                  ;--------------------------------------------------------------------------
 29096                                  
 29097                                  GETEOF:
 29098 00004DC6 E83406                  	call	UNPACK
 29099 00004DC9 72FA                            jc	short RET12
 29100 00004DCB 53                              PUSH    BX
 29101 00004DCC 89FB                            MOV     BX,DI
 29102 00004DCE E81506                  	call	IsEOF
 29103 00004DD1 5B                              POP     BX
 29104 00004DD2 73F1                            JAE     short RET12
 29105 00004DD4 89FB                            MOV     BX,DI
 29106 00004DD6 EBEE                            JMP     short GETEOF
 29107                                  
 29108                                  ;============================================================================
 29109                                  ; FCB.ASM, MSDOS 6.0, 1991
 29110                                  ;============================================================================
 29111                                  ; 30/07/2018 - Retro DOS v3.0
 29112                                  ; 20/05/2019 - Retro DOS v4.0
 29113                                  
 29114                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 29115                                  ;	NAME	FCB
 29116                                  
 29117                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 29118                                  ;		  filename characters
 29119                                  ;
 29120                                  ;	MakeFcb
 29121                                  ;	NameTrans
 29122                                  ;	PATHCHRCMP
 29123                                  ;	GetLet
 29124                                  ;	UCase
 29125                                  ;	GetLet3
 29126                                  ;	GetCharType
 29127                                  ;	TESTKANJ
 29128                                  ;	NORMSCAN
 29129                                  ;	DELIM
 29130                                  ;
 29131                                  ;	Revision history:
 29132                                  ;
 29133                                  ;		A000  version 4.00  Jan. 1988
 29134                                  ;	
 29135                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 29136                                  
 29137                                  TableLook	EQU	-1
 29138                                  
 29139                                  SCANSEPARATOR	EQU	1
 29140                                  DRVBIT		EQU	2
 29141                                  NAMBIT		EQU	4
 29142                                  EXTBIT		EQU	8
 29143                                  
 29144                                  ;----------------------------------------------------------------------------
 29145                                  ;
 29146                                  ; Procedure : MakeFcb
 29147                                  ;
 29148                                  ;----------------------------------------------------------------------------
 29149                                  
 29150                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29151                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 29152                                  
 29153                                  	; 29/02/2024 - Retro DOS v4.1
 29154                                  MAKEFCB:
 29155                                  ;hkn; SS override
 29156                                  	;MOV	BYTE [SS:SpaceFlag],0
 29157 00004DD8 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 29158                                  	; 29/02/2024
 29159 00004DDA 368816[4E03]            	mov	[ss:SpaceFlag],dl ; 0
 29160                                  	;test	al,2
 29161 00004DDF A802                    	test	AL,DRVBIT	; Use current drive field if default?
 29162 00004DE1 7503                    	JNZ	short DEFDRV
 29163                                  	;MOV	BYTE [ES:DI],0	; No - use default drive
 29164                                  	; 29/02/2024
 29165 00004DE3 268815                  	mov	[es:di],dl ; 0
 29166                                  DEFDRV:
 29167 00004DE6 47                      	INC	DI
 29168 00004DE7 B90800                  	MOV	CX,8
 29169                                  	;test	al,4
 29170 00004DEA A804                    	test	AL,NAMBIT	; Use current name fields as default?
 29171 00004DEC 93                      	XCHG	AX,BX		; Save bits in BX
 29172 00004DED B020                    	MOV	AL," "
 29173 00004DEF 7404                    	JZ	short FILLB	; If not, go fill with blanks
 29174 00004DF1 01CF                    	ADD	DI,CX
 29175 00004DF3 31C9                    	XOR	CX,CX		; Don't fill any
 29176                                  FILLB:
 29177 00004DF5 F3AA                    	REP	STOSB
 29178 00004DF7 B103                    	MOV	CL,3
 29179 00004DF9 F6C308                  	test	BL,EXTBIT	; Use current extension as default
 29180 00004DFC 7404                    	JZ	short FILLB2
 29181 00004DFE 01CF                    	ADD	DI,CX
 29182 00004E00 31C9                    	XOR	CX,CX
 29183                                  FILLB2:
 29184 00004E02 F3AA                    	REP	STOSB
 29185 00004E04 91                      	XCHG	AX,CX		; Put zero in AX
 29186 00004E05 AB                      	STOSW
 29187 00004E06 AB                      	STOSW			; Initialize two words after to zero
 29188 00004E07 83EF10                  	SUB	DI,16		; Point back at start
 29189                                  	;test	bl,1
 29190 00004E0A F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 29191 00004E0D 7409                    	JZ	short SKPSPC
 29192 00004E0F E88800                  	CALL	SCANB		; Peel off blanks and tabs
 29193 00004E12 E81E01                  	CALL	DELIM		; Is it a one-time-only delimiter?
 29194 00004E15 7504                    	JNZ	short NOSCAN
 29195 00004E17 46                      	INC	SI		; Skip over the delimiter
 29196                                  SKPSPC:
 29197 00004E18 E87F00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 29198                                  NOSCAN:
 29199 00004E1B E8EC00                  	CALL	GETLET
 29200 00004E1E 761E                    	JBE	short NODRV	; Quit if termination character
 29201 00004E20 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 29202 00004E23 7519                    	JNZ	short NODRV
 29203 00004E25 46                      	INC	SI		; Skip over colon
 29204 00004E26 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 29205 00004E28 760F                    	JBE	short BADDRV	; Drive letter out of range
 29206                                  
 29207 00004E2A 50                      	PUSH	AX
 29208 00004E2B E8E01A                  	call	GetVisDrv
 29209 00004E2E 58                      	POP	AX
 29210 00004E2F 730A                    	JNC	short HAVDRV
 29211                                  
 29212                                  	; 20/05/2019 - Retro DOS v4.0
 29213                                  	; MSDOS 6.0
 29214                                  ;hkn; SS override
 29215 00004E31 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 29216                                  					; if not FAT drive ;AN000;
 29217 00004E37 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 29218                                  BADDRV:
 29219 00004E39 B2FF                    	MOV	DL,-1
 29220                                  HAVDRV:
 29221 00004E3B AA                      	STOSB			; Put drive specifier in first byte
 29222 00004E3C 46                      	INC	SI
 29223 00004E3D 4F                      	DEC	DI		; Counteract next two instructions
 29224                                  NODRV:
 29225 00004E3E 4E                      	DEC	SI		; Back up
 29226 00004E3F 47                      	INC	DI		; Skip drive byte
 29227                                  
 29228                                  	;entry	NORMSCAN
 29229                                  NORMSCAN:
 29230 00004E40 B90800                  	MOV	CX,8
 29231 00004E43 E82200                  	CALL	GETWORD 	; Get 8-letter file name
 29232 00004E46 803C2E                  	CMP	BYTE [SI],"."
 29233 00004E49 7510                    	JNZ	short NODOT
 29234 00004E4B 46                      	INC	SI		; Skip over dot if present
 29235                                  
 29236                                  	; 24/09/2023
 29237                                  	;mov	cx,3
 29238 00004E4C B103                    	mov	cl,3	; ch=0
 29239                                  
 29240                                  	; MSDOS 6.0
 29241                                  ;hkn; SS override
 29242                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 29243                                  	; 10/06/2019
 29244 00004E4E 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 29245 00004E54 7402                    	JZ	short VOLOK				;AN000;
 29246 00004E56 A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 29247                                  	; 24/09/2023
 29248                                  	;MOV	CX,2					;AN000;
 29249 00004E57 49                      	dec	cx  ; cx=2
 29250                                  	;JMP	SHORT contvol				;AN000;
 29251                                  VOLOK:
 29252                                  	;MOV	CX,3		; Get 3-letter extension
 29253                                  contvol:
 29254 00004E58 E81300                  	CALL	MUSTGETWORD
 29255                                  NODOT:
 29256 00004E5B 88D0                    	MOV	AL,DL
 29257                                  
 29258                                  	; MSDOS 6.0
 29259                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 29260                                  	; 18/12/2022
 29261 00004E5D 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 29262                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 29263                                  
 29264 00004E63 C3                      	retn
 29265                                  
 29266                                  NONAM:
 29267 00004E64 01CF                    	ADD	DI,CX
 29268 00004E66 4E                      	DEC	SI
 29269 00004E67 C3                      	retn
 29270                                  
 29271                                  GETWORD:
 29272 00004E68 E89F00                  	CALL	GETLET		
 29273 00004E6B 76F7                    	JBE	short NONAM	; Exit if invalid character
 29274 00004E6D 4E                      	DEC	SI
 29275                                  
 29276                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 29277                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 29278                                  
 29279                                  MUSTGETWORD:
 29280 00004E6E E89900                  	CALL	GETLET
 29281                                  
 29282                                  ;	If spaceFlag is set then we allow spaces in a pathname
 29283                                  
 29284                                  ;IF NOT TABLELOOK
 29285                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 29286                                  ;ENDIF
 29287 00004E71 750C                    	JNZ	short MustCheckCX
 29288                                  
 29289                                  ;hkn; SS override
 29290 00004E73 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 29291 00004E79 7419                    	JZ	short FILLNAM
 29292 00004E7B 3C20                    	CMP	AL," "
 29293 00004E7D 7515                    	JNZ	short FILLNAM
 29294                                  
 29295                                  MustCheckCX:
 29296 00004E7F E3ED                    	JCXZ	MUSTGETWORD
 29297 00004E81 49                      	DEC	CX
 29298 00004E82 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 29299 00004E84 7504                    	JNZ	short NOSTAR
 29300 00004E86 B03F                    	MOV	AL,"?"
 29301 00004E88 F3AA                    	REP	STOSB
 29302                                  NOSTAR:
 29303 00004E8A AA                      	STOSB
 29304 00004E8B 3C3F                    	CMP	AL,"?"
 29305 00004E8D 75DF                    	JNZ	short MUSTGETWORD
 29306 00004E8F 80CA01                  	OR	DL,1		; Flag ambiguous file name
 29307 00004E92 EBDA                    	JMP	short MUSTGETWORD
 29308                                  FILLNAM:
 29309 00004E94 B020                    	MOV	AL," "
 29310 00004E96 F3AA                    	REP	STOSB
 29311 00004E98 4E                      	DEC	SI
 29312 00004E99 C3                      	retn
 29313                                  
 29314                                  SCANB:
 29315 00004E9A AC                      	LODSB
 29316 00004E9B E89D00                  	CALL	SPCHK
 29317 00004E9E 74FA                    	JZ	short SCANB
 29318 00004EA0 4E                      	DEC	SI
 29319                                  scanb_retn:
 29320 00004EA1 C3                      	retn
 29321                                  
 29322                                  ;----------------------------------------------------------------------------
 29323                                  ;
 29324                                  ; Procedure Name : NameTrans
 29325                                  ;
 29326                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 29327                                  ; allow spaces in pathnames
 29328                                  ;
 29329                                  ;   Inputs:	DS:SI points to start of path element
 29330                                  ;   Outputs:	Name1 has unpacked name, uppercased
 29331                                  ;		ES = DOSGroup
 29332                                  ;		DS:SI advanced after name
 29333                                  ;   Registers modified: DI,AX,DX,CX
 29334                                  ;
 29335                                  ;----------------------------------------------------------------------------
 29336                                  
 29337                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29338                                  	; 20/05/2019 - Retro DOS v4.0
 29339                                  
 29340                                  	; 29/02/2024 - Retro DOS v4.1
 29341                                  
 29342                                  NameTrans:
 29343                                  ;hkn; SS override
 29344 00004EA2 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 29345 00004EA8 16                      	push	ss
 29346 00004EA9 07                      	pop	es
 29347                                  
 29348                                  ;hkn; NAME1 is in DOSDATA
 29349 00004EAA BF[4B05]                	MOV	DI,NAME1
 29350 00004EAD 57                      	PUSH	DI
 29351                                  
 29352                                  ; 29/02/2024
 29353                                  %if 0
 29354                                  	MOV	AX,'  '	; 2020h
 29355                                  	MOV	CX,5
 29356                                  	STOSB
 29357                                  	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 29358                                  	XOR	AL,AL		; Set stuff for NORMSCAN
 29359                                  	MOV	DL,AL
 29360                                  %else
 29361                                  	; 29/02/2024
 29362                                  	; (PCDOS 7.1 IBMDOS.COM)
 29363 00004EAE B020                    	mov     al,20h ; ' '
 29364 00004EB0 B90B00                  	mov     cx,11
 29365 00004EB3 F3AA                    	rep stosb               ; Fill "FCB" at NAME1 with spaces
 29366 00004EB5 91                      	xchg    ax,cx
 29367 00004EB6 99                      	cwd
 29368                                  %endif
 29369                                  
 29370 00004EB7 AA                      	STOSB
 29371 00004EB8 5F                      	POP	DI
 29372                                  
 29373 00004EB9 E884FF                  	CALL	NORMSCAN
 29374                                  
 29375                                  ;hkn; SS override for NAME1
 29376 00004EBC 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 29377 00004EC2 75DD                    	jnz	short scanb_retn
 29378 00004EC4 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 29379 00004ECA C3                      	retn
 29380                                  
 29381                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 29382                                  ;============================================================================
 29383                                  
 29384                                  ; 20/05/2019 - Retro DOS v4.0
 29385                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29386                                  
 29387                                  ;If TableLook
 29388                                  
 29389                                  ;hkn; Table	SEGMENT
 29390                                  ;	PUBLIC	CharType
 29391                                  ;----------------------------------------------------------------------------
 29392                                  
 29393                                  ; Character type table for file name scanning
 29394                                  ; Table provides a mapping of characters to validity bits.
 29395                                  ; Four bits are provided for each character. Values 7Dh and above
 29396                                  ; have all bits set, so that part of the table is chopped off, and
 29397                                  ; the translation routine is responsible for screening these values.
 29398                                  ; The bit values are defined in DOSSYM.INC
 29399                                  
 29400                                  ;	      ; ^A and NUL
 29401                                  ;CharType:
 29402                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29403                                  ;	      ; ^C and ^B
 29404                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29405                                  ;	      ; ^E and ^D
 29406                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29407                                  ;	      ; ^G and ^F
 29408                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29409                                  ;	      ; TAB and BS
 29410                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29411                                  ;	      ; ^K and ^J
 29412                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29413                                  ;	      ; ^M and ^L
 29414                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29415                                  ;	      ; ^O and ^N
 29416                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29417                                  ;	      ; ^Q and ^P
 29418                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29419                                  ;	      ; ^S and ^R
 29420                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29421                                  ;	      ; ^U and ^T
 29422                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29423                                  ;	      ; ^W and ^V
 29424                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29425                                  ;	      ; ^Y and ^X
 29426                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29427                                  ;	      ; ESC and ^Z
 29428                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29429                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29431                                  ;	      ; ^_ and ^^
 29432                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29433                                  ;	      ; ! and SPACE
 29434                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 29435                                  ;	      ; # and "
 29436                                  ;	 db   LOW (NOT FFCB+FCHK)
 29437                                  ;	      ; $ - )
 29438                                  ;	 db   3 dup (0FFh)
 29439                                  ;	      ; + and *
 29440                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 29441                                  ;	      ; - and '
 29442                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 29443                                  ;	      ; / and .
 29444                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 29445                                  ;	      ; 0 - 9
 29446                                  ;	 db   5 dup (0FFh)
 29447                                  ;	      ; ; and :
 29448                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29449                                  ;	      ; = and <
 29450                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29451                                  ;	      ; ? and >
 29452                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29453                                  ;	      ; A - Z
 29454                                  ;	 db   13 dup (0FFh)
 29455                                  ;	      ; \ and [
 29456                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 29457                                  ;	      ; ^ and ]
 29458                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29459                                  ;	      ; _ - {
 29460                                  ;	 db   15 dup (0FFh)
 29461                                  ;	      ; } and |
 29462                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29463                                  
 29464                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 29465                                  ;					; character in the table
 29466                                  
 29467                                  ;FCHK	equ 1		; normal name char, no chks needed
 29468                                  ;FDELIM	equ 2		; is a delimiter
 29469                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 29470                                  ;FFCB	equ 8		; is valid in an FCB
 29471                                  
 29472                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29473                                  ;----------------------------------------------------------------------------
 29474                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 29475                                  
 29476                                  CharType: ; 63 bytes
 29477 00004ECB 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 29478 00004ED3 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 29479 00004EDB F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 29480 00004EE3 FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 29481 00004EEB FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 29482 00004EF3 FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 29483 00004EFB FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 29484 00004F03 FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 29485                                  
 29486                                  CharType_last equ ($ - CharType) * 2
 29487                                  
 29488                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 29489                                  ;----------------------------------------------------------------------------
 29490                                  ;CharType:
 29491                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29492                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29493                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29494                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29495                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 29496                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 29497                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29498                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 29499                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29500                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29501                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29502                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 29503                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29504                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29505                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29506                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 29507                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29508                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29509                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29510                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29511                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29512                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29513                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29514                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29515                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29516                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29517                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29518                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29519                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29520                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29521                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29522                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29523                                  
 29524                                  ;hkn; Table	ENDS
 29525                                  
 29526                                  ;ENDIF
 29527                                  
 29528                                  ; 20/05/2019 - Retro DOS v4.0
 29529                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 29530                                  
 29531                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29532                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 29533                                  
 29534                                  ;----------------------------------------------------------------------------
 29535                                  ;
 29536                                  ; Procedure Names : GetLet, UCase, GetLet3
 29537                                  ;
 29538                                  ; These routines take a character, convert it to upper case, and check
 29539                                  ; for delimiters.  Three different entry points:
 29540                                  ;	GetLet -  DS:[SI] = character to convert
 29541                                  ;	UCase  -  AL = character to convert
 29542                                  ;	GetLet3 - AL = character
 29543                                  ;		  [BX] = translation table to use
 29544                                  ;
 29545                                  ;	Exit (in all cases) : AL = upper case character
 29546                                  ;			      CY set if char is control char other than TAB
 29547                                  ;			      ZF set if char is a delimiter
 29548                                  ;	Uses : AX, flags
 29549                                  ;
 29550                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 29551                                  ; inline version.  Return with carry set is only possible in the inline
 29552                                  ; version. The table lookup version is the one in use.
 29553                                  ;
 29554                                  ;----------------------------------------------------------------------------
 29555                                  
 29556                                  ; This entry point has character at [SI]
 29557                                  
 29558                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 29559                                  GETLET:	
 29560 00004F0A AC                      	LODSB
 29561                                  
 29562                                  ; This entry point has character in AL
 29563                                  
 29564                                  	;entry	UCase
 29565                                  UCase:	
 29566                                  	; 09/08/2018
 29567                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 29568                                  _UCase:
 29569 00004F0B 53                      	PUSH	BX
 29570 00004F0C BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 29571                                  
 29572                                  ; Convert the character in AL to upper case
 29573                                  
 29574                                  gl_0:
 29575 00004F0F 3C61                    	CMP	AL,"a"
 29576 00004F11 7214                    	JB	short gl_2	; Already upper case, go check type
 29577 00004F13 3C7A                    	CMP	AL,"z"
 29578 00004F15 7702                    	JA	short gl_1
 29579 00004F17 2C20                    	SUB	AL,20H		; Convert to upper case
 29580                                  
 29581                                  ; Map European character to upper case
 29582                                  
 29583                                  gl_1:
 29584 00004F19 3C80                    	CMP	AL,80H
 29585 00004F1B 720A                    	JB	short gl_2	; Not EuroChar, go check type
 29586 00004F1D 2C80                    	SUB	AL,80H		; translate to upper case with this index
 29587                                  
 29588                                  	; M048 - Start 
 29589                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 29590                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 29591                                  	; preserve it.
 29592                                  
 29593                                  	; 09/08/2018 - Retro DOS v3.0
 29594                                  	; MSDOS 3.3
 29595                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 29596                                  	;CS	XLAT
 29597                                  
 29598                                  	; 20/05/2019 - Retro DOS v4.0
 29599                                  
 29600                                  	; MSDOS 6.0
 29601 00004F1F 1E                      	push	ds
 29602                                  	;getdseg <ds>
 29603 00004F20 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29604 00004F25 D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 29605 00004F26 1F                      	pop	ds
 29606                                  
 29607                                  	; M048 - End
 29608                                  
 29609                                  ; Now check the type
 29610                                  
 29611                                  ;If TableLook
 29612                                  gl_2:
 29613                                  	; 20/05/2019 - Retro DOS v4.0
 29614 00004F27 50                      	PUSH	AX
 29615                                  
 29616                                  	; MSDOS 3.3
 29617                                  	;mov	bx,CharType
 29618                                  	;; 09/08/2018
 29619                                  	;;xlat	byte [cs:bx]
 29620                                  	;cs	xlat	
 29621                                  	
 29622                                  	; MSDOS 6.0
 29623 00004F28 E81800                  	CALL	GetCharType	; returns type flags in AL
 29624                                  	
 29625                                  	;test	al,1	
 29626 00004F2B A801                    	TEST	AL,FCHK 	; test for normal character
 29627 00004F2D 58                      	POP	AX
 29628 00004F2E 5B                      	POP	BX
 29629 00004F2F C3                      	RETN
 29630                                  
 29631                                  ; This entry has character in AL and lookup table in BX
 29632                                  
 29633                                  	; MSDOS 6.0
 29634                                  ;	;entry GetLet3
 29635                                  GETLET3: ; 10/08/2018
 29636 00004F30 53                      	PUSH	BX
 29637 00004F31 EBDC                    	JMP	short gl_0
 29638                                  ;ELSE
 29639                                  ;
 29640                                  ;gl_2:
 29641                                  ;	POP	BX
 29642                                  ;	CMP	AL,"."
 29643                                  ;	retz
 29644                                  ;	CMP	AL,'"'
 29645                                  ;	retz
 29646                                  ;	CALL	PATHCHRCMP
 29647                                  ;	retz
 29648                                  ;	CMP	AL,"["
 29649                                  ;	retz
 29650                                  ;	CMP	AL,"]"
 29651                                  ;	retz
 29652                                  ;ENDIF
 29653                                  
 29654                                  ;---------------------------------------------------------------------
 29655                                  ;
 29656                                  ; DELIM - check if character is a delimiter
 29657                                  ;	Entry : AX = character to check
 29658                                  ;	Exit  : ZF set if character is not a delimiter
 29659                                  ;	Uses  : Flags
 29660                                  ;
 29661                                  ;--------------------------------------------------------------------
 29662                                  
 29663                                  	;entry	DELIM
 29664                                  DELIM:
 29665                                  ;IF TableLook
 29666                                  	; 20/05/2019 - Retro DOS v4.0
 29667 00004F33 50                      	PUSH	AX
 29668                                  
 29669                                  	; MSDOS 3.3
 29670                                  	;push	bx
 29671                                  	;mov	bx,CharType
 29672                                  	;;09/08/2018
 29673                                  	;;xlat	byte [cs:bx]
 29674                                  	;cs	xlat
 29675                                  	;pop	bx
 29676                                  
 29677                                  	; MSDOS 6.0
 29678 00004F34 E80C00                  	CALL	GetCharType
 29679                                  	
 29680                                  	;test	al,2
 29681 00004F37 A802                    	TEST	AL,FDELIM
 29682 00004F39 58                      	POP	AX
 29683 00004F3A C3                      	RETN
 29684                                  ;ELSE
 29685                                  ;	CMP	AL,":"
 29686                                  ;	retz
 29687                                  ;
 29688                                  ;	CMP	AL,"<"
 29689                                  ;	retz
 29690                                  ;	CMP	AL,"|"
 29691                                  ;	retz
 29692                                  ;	CMP	AL,">"
 29693                                  ;	retz
 29694                                  ;
 29695                                  ;	CMP	AL,"+"
 29696                                  ;	retz
 29697                                  ;	CMP	AL,"="
 29698                                  ;	retz
 29699                                  ;	CMP	AL,";"
 29700                                  ;	retz
 29701                                  ;	CMP	AL,","
 29702                                  ;	retz
 29703                                  ;ENDIF
 29704                                  
 29705                                  ;-------------------------------------------------------------------------
 29706                                  ;
 29707                                  ;  SPCHK - checks to see if a character is a space or equivalent
 29708                                  ;	Entry : AL = character to check
 29709                                  ;	Exit  : ZF set if character is a space
 29710                                  ;	Uses  : flags
 29711                                  ;
 29712                                  ;-------------------------------------------------------------------------
 29713                                  
 29714                                  	;entry SPCHK
 29715                                  SPCHK:
 29716                                  ;IF TableLook
 29717                                  	; 20/05/2019 - Retro DOS v4.0
 29718 00004F3B 50                      	PUSH	AX
 29719                                  
 29720                                  	; MSDOS 3.3
 29721                                  	;push	bx
 29722                                  	;mov	bx,CharType
 29723                                  	;; 09/08/2018
 29724                                  	;;xlat	byte [cs:bx]
 29725                                  	;cs	xlat
 29726                                  	;pop	bx
 29727                                  
 29728                                  	; MSDOS 6.0
 29729 00004F3C E80400                  	CALL	GetCharType
 29730                                  	
 29731                                  	;test	al,4
 29732 00004F3F A804                    	TEST	AL,FSPCHK
 29733 00004F41 58                      	POP	AX
 29734 00004F42 C3                      	RETN
 29735                                  ;ELSE
 29736                                  ;	CMP	AL,9		; Filter out tabs too
 29737                                  ;	retz
 29738                                  ;; WARNING! " " MUST be the last compare
 29739                                  ;	CMP	AL," "
 29740                                  ;	return
 29741                                  ;ENDIF
 29742                                  
 29743                                  ;-------------------------------------------------------------------------
 29744                                  ;
 29745                                  ;  GetCharType - return flag bits indicating character type
 29746                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 29747                                  ;	defined above at label CharType.
 29748                                  ;
 29749                                  ;	Entry : AL = character to return type flags for
 29750                                  ;	Exit  : AL = type flags
 29751                                  ;	Uses  : AL, flags
 29752                                  ;
 29753                                  ;-------------------------------------------------------------------------
 29754                                  
 29755                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29756                                  
 29757                                  	; 20/05/2019 - Retro DOS v4.0
 29758                                  	; MSDOS 6.0
 29759                                  GetCharType:
 29760                                  	;cmp	al,7Eh
 29761 00004F43 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 29762 00004F45 7316                    	jae	short gct_90		; return standard value
 29763                                  
 29764 00004F47 53                      	push	bx
 29765 00004F48 BB[CB4E]                	mov	bx,CharType		; load lookup table
 29766 00004F4B D0E8                    	shr	al,1			; adjust for half-byte table entry size
 29767                                  	;xlat	cs:[bx] 		; get flags
 29768 00004F4D 2ED7                    	cs	xlat	
 29769 00004F4F 5B                      	pop	bx
 29770                                  
 29771                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 29772                                  ; we have to shift the flags down to the low nibble
 29773                                  
 29774 00004F50 7308                    	jnc	short gct_80		; carry clear, no shift needed
 29775                                  
 29776 00004F52 D0E8                    	shr	al,1			; we want high nibble, shift it down
 29777 00004F54 D0E8                    	shr	al,1
 29778 00004F56 D0E8                    	shr	al,1
 29779 00004F58 D0E8                    	shr	al,1
 29780                                  gct_80:
 29781 00004F5A 240F                    	and	al,0Fh			; clear the unused nibble
 29782 00004F5C C3                      	retn
 29783                                  gct_90:
 29784 00004F5D B00F                    	mov	al,0Fh			; set all flags
 29785 00004F5F C3                      	retn
 29786                                  
 29787                                  ;----------------------------------------------------------------------------
 29788                                  ;
 29789                                  ; Procedure : PATHCHRCMP
 29790                                  ;
 29791                                  ;----------------------------------------------------------------------------
 29792                                  
 29793                                  PATHCHRCMP:
 29794 00004F60 3C2F                    	CMP	AL,'/'
 29795 00004F62 7606                    	JBE	short PathRet
 29796 00004F64 3C5C                    	CMP	AL,'\'
 29797 00004F66 C3                      	retn
 29798                                  GotFor:
 29799 00004F67 B05C                    	MOV	AL,'\'
 29800 00004F69 C3                      	retn
 29801                                  PathRet:
 29802 00004F6A 74FB                    	JZ	short GotFor
 29803 00004F6C C3                      	retn
 29804                                  
 29805                                  ;============================================================================
 29806                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 29807                                  ;============================================================================
 29808                                  ; 30/07/2018 - Retro DOS v3.0
 29809                                  ; 29/04/2019 - Retro DOS v4.0
 29810                                  
 29811                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 29812                                  
 29813                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 29814                                  
 29815                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 29816                                  ;	NAME	IBMCTRLC
 29817                                  
 29818                                  ;**	Low level routines for detecting special characters on CON input,
 29819                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 29820                                  ;	process termination code, and the INT 0 divide overflow handler.
 29821                                  ;
 29822                                  ;	FATAL
 29823                                  ;	FATAL1
 29824                                  ;	reset_environment
 29825                                  ;	DSKSTATCHK
 29826                                  ;	SPOOLINT
 29827                                  ;	STATCHK
 29828                                  ;	CNTCHAND
 29829                                  ;	DIVOV
 29830                                  ;	CHARHARD
 29831                                  ;	HardErr
 29832                                  ;
 29833                                  ;	Revision history:
 29834                                  ;
 29835                                  ;	    AN000	version 4.0   Jan 1988
 29836                                  ;	    A002	PTM    -- dir >lpt3 hangs
 29837                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 29838                                  ;
 29839                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 29840                                  ;	      flags register. In order to return to user normally DOS used to
 29841                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 29842                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 29843                                  ;
 29844                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 29845                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 29846                                  ;	      charhard.
 29847                                  
 29848                                  ; 29/04/2019 - Retro DOS v4.0
 29849                                  	; MSDOS 6.0
 29850                                  ;		public	LowInt23Addr		
 29851                                  LowInt23Addr: ;	LABEL	DWORD
 29852 00004F6D [E710]0000              	DW	LowInt23, 0
 29853                                  
 29854                                  ;		public	LowInt24Addr
 29855                                  LowInt24Addr: ;	LABEL	DWORD
 29856 00004F71 [FB10]0000              	DW	LowInt24, 0
 29857                                  
 29858                                  ;		public	LowInt28Addr
 29859                                  LowInt28Addr: ;	LABEL	DWORD
 29860 00004F75 [0F11]0000              	DW	LowInt28, 0
 29861                                  
 29862                                  ;Break	<Checks for ^C in CON I/O>
 29863                                  
 29864                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29865                                  ; 05/05/2019 - Retro DOS v4.0
 29866                                  
 29867                                  ;---------------------------------------------------------------------------
 29868                                  ;
 29869                                  ; Procedure Name : DSKSTATCHK
 29870                                  ;
 29871                                  ; Check for ^C if only one level in
 29872                                  ;
 29873                                  ;---------------------------------------------------------------------------
 29874                                  
 29875                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 29876                                  
 29877                                  	; 29/02/2024 - Retro DOS v4.1
 29878                                  
 29879                                  DSKSTATCHK:        
 29880                                  	;CMP	BYTE [INDOS],1
 29881 00004F79 36803E[2103]01          	CMP	BYTE [SS:INDOS],1 ; 15/03/2018
 29882                                  	;retnz			; Do NOTHING
 29883                                  	; 16/12/2022
 29884 00004F7F 7537                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018
 29885                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29886                                  	;jz	short _RET37 ; dskstatchk1
 29887                                  	;retn
 29888                                  ;_RET37:
 29889                                  ;dskstatchk1:
 29890 00004F81 51                      	PUSH    CX
 29891 00004F82 06                      	PUSH    ES
 29892 00004F83 53                      	PUSH    BX
 29893 00004F84 1E                      	PUSH    DS
 29894 00004F85 56                      	PUSH    SI
 29895                                          
 29896                                  	;PUSH	CS
 29897                                  	;POP	ES
 29898                                  	;PUSH	CS
 29899                                  	;POP	DS
 29900                                  
 29901 00004F86 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 29902 00004F88 8EC3                    	MOV	ES,BX		; for deviocall2
 29903 00004F8A 8EDB                    	MOV	DS,BX
 29904                                  
 29905                                  	; 16/12/2022
 29906                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29907                                  
 29908                                  	; 05/05/2019
 29909                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 29910                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 29911                                  	;mov	word [ss:DSKSTST],0
 29912                                  
 29913                                  	; 16/12/2022
 29914                                  	; 25/06/2019
 29915 00004F8C C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 29916 00004F91 C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 29917 00004F96 C706[9503]0000          	mov	word [DSKSTST],0
 29918                                  
 29919 00004F9C BB[9203]                        MOV     BX,DSKSTCALL
 29920                                  
 29921                                  	;LDS	SI,[ss:BCON]
 29922                                          ; 25/062019
 29923 00004F9F C536[3200]              	lds	si,[BCON]
 29924                                  
 29925                                  ; 16/12/2022
 29926                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29927                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 29928                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 29929                                  ;	mov	word [ss:DSKSTST],0
 29930                                  ;	mov	bx,DSKSTCALL
 29931                                  ;	lds	si,[ss:BCON]
 29932                                  
 29933 00004FA3 E899F5                  	CALL	DEVIOCALL2
 29934                                  
 29935                                  	; 29/02/2024
 29936 00004FA6 1E                      	push	ds ; *
 29937 00004FA7 16                      	push	ss
 29938 00004FA8 1F                      	pop	ds
 29939                                  
 29940                                   	; 15/03/2018
 29941                                  	;;test	word [ss:DSKSTST],200h
 29942                                          ;TEST	WORD [SS:DSKSTST],STBUI
 29943                                  	; 05/05/2019
 29944                                  	;test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 29945                                  	; 29/02/2024
 29946 00004FA9 F606[9603]02            	test	byte [DSKSTST+1],(STBUI>>8) ; 2
 29947 00004FAE 7409                    	jz	short _GotCh		; No characters available
 29948                                  
 29949 00004FB0 30C0                    	XOR	AL,AL			; Set zero
 29950                                  RET36:
 29951                                  	; 29/02/2024
 29952 00004FB2 5E                      	pop	si ; *
 29953                                  	;
 29954 00004FB3 5E                      	POP	SI
 29955 00004FB4 1F                      	POP	DS
 29956 00004FB5 5B                      	POP	BX
 29957 00004FB6 07                      	POP	ES
 29958 00004FB7 59                      	POP	CX
 29959                                  	; 16/12/2022
 29960                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29961                                  _RET37:
 29962 00004FB8 C3                      	RETN
 29963                                  
 29964                                  _GotCh:
 29965                                  
 29966                                  ; 29/02/2024
 29967                                  %if 0
 29968                                  	MOV	AL,[SS:DSKCHRET]	; SS override
 29969                                  
 29970                                  	CMP	AL,"C"-"@" ; cmp al,3
 29971                                  	JNZ	SHORT RET36
 29972                                  	MOV	BYTE [SS:DSKSTCOM],DEVRD
 29973                                  	MOV	BYTE [SS:DSKSTCALL],DRDWRHL
 29974                                  	MOV	[SS:DSKCHRET],CL
 29975                                  	; 09/09/2018
 29976                                  	MOV	word [SS:DSKSTST],0
 29977                                  	MOV	word [SS:DSKSTCNT],1
 29978                                  %else
 29979                                  	; 29/02/2024
 29980 00004FB9 A0[9F03]                	mov	al,[DSKCHRET]
 29981                                  
 29982 00004FBC 3C03                    	cmp	al,"C"-"@" ; cmp al,3
 29983 00004FBE 75F2                    	jnz	short RET36
 29984                                  
 29985 00004FC0 C606[9403]04            	mov	byte [DSKSTCOM],DEVRD
 29986 00004FC5 C606[9203]16            	mov	byte [DSKSTCALL],DRDWRHL
 29987 00004FCA 880E[9F03]              	mov	[DSKCHRET],cl
 29988 00004FCE C706[9503]0000          	mov	word [DSKSTST],0
 29989 00004FD4 C706[A403]0100          	mov	word [DSKSTCNT],1
 29990 00004FDA 1F                      	pop	ds ; *
 29991                                  %endif
 29992                                  	
 29993 00004FDB E861F5                  	CALL	DEVIOCALL2              ; Eat the ^C
 29994                                  
 29995 00004FDE 5E                              POP     SI
 29996 00004FDF 1F                              POP     DS
 29997 00004FE0 5B                              POP     BX                      ; Clean stack
 29998 00004FE1 07                              POP     ES
 29999 00004FE2 59                              POP     CX
 30000 00004FE3 E9CF00                          JMP	CNTCHAND ; 10/08/2018
 30001                                  
 30002                                  	; 05/05/2019
 30003                                  NOSTOP:
 30004                                  	; MSDOS 6.0
 30005 00004FE6 3C10                    	CMP	AL,"P"-"@"
 30006 00004FE8 7509                    	JNZ	short check_next
 30007                                  				    	; SS override
 30008 00004FEA 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 30009 00004FF0 7405                    	JZ	short INCHKJ		; no
 30010                                  check_end:	; 24/09/2023
 30011 00004FF2 C3                      	retn
 30012                                  check_next:
 30013                                  	;IF	NOT TOGLPRN
 30014                                  	;CMP	AL,"N"-"@"
 30015                                  	;JZ	short INCHKJ
 30016                                  	;ENDIF
 30017                                  
 30018 00004FF3 3C03                    	CMP	AL,"C"-"@"
 30019                                  	; 24/09/2023
 30020                                  	;JZ	short INCHKJ
 30021                                  ;check_end:
 30022                                  	;retn
 30023 00004FF5 75FB                    	jnz	short check_end
 30024                                  
 30025                                  	; 24/09/2023
 30026                                  	; 08/09/2018
 30027                                  INCHKJ:	; 10/08/2018
 30028 00004FF7 E9A500                  	jmp	INCHK
 30029                                  
 30030                                  	; MSDOS 3.3
 30031                                          ;CMP	AL,"P"-"@"  ; cmp al,16
 30032                                          ;JZ	short INCHKJ
 30033                                  
 30034                                  	; 15/04/2018
 30035                                          ;;IF	NOT TOGLPRN
 30036                                          ;CMP	AL,"N"-"@"
 30037                                          ;JZ	SHORT INCHKJ
 30038                                          ;;ENDIF
 30039                                  	
 30040                                  	;CMP	AL,"C"-"@"  ; cmp al,3
 30041                                          ;JZ	short INCHKJ
 30042                                  	;RETN
 30043                                  
 30044                                  ;	; 08/09/2018
 30045                                  ;INCHKJ:; 10/08/2018
 30046                                  ;	JMP	INCHK
 30047                                  
 30048                                  ;----------------------------------------------------------------------------
 30049                                  ;
 30050                                  ; Procedure Name : SpoolInt
 30051                                  ;
 30052                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 30053                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 30054                                  ; the middle of an INT 24.
 30055                                  ;
 30056                                  ;----------------------------------------------------------------------------
 30057                                  
 30058                                  SPOOLINT:
 30059 00004FFA 9C                      	PUSHF
 30060                                  	; 15/03/2018
 30061 00004FFB 36803E[5803]00          	CMP	BYTE [SS:IDLEINT],0	; SS override
 30062 00005001 7423                    	JZ	SHORT POPFRET
 30063 00005003 36803E[2003]00          	CMP	BYTE [SS:ERRORMODE],0
 30064 00005009 751B                    	JNZ	SHORT POPFRET		; No spool ints in error mode
 30065                                  
 30066                                  	; 30/07/2018
 30067                                  
 30068                                  	; Note that we are going to allow an external program to issue system 
 30069                                  	; calls at this time. We MUST preserve IdleInt across this.
 30070                                  
 30071 0000500B 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 30072                                  
 30073                                  	; 05/05/2019 - Retro DOS v4.0
 30074                                   
 30075                                  	; MSDOS 6.0
 30076 00005010 36803E[1112]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 30077 00005016 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 30078 00005018 CD28                    	INT	int_spooler  ; int 28h	; N: Execute user int 28 handler
 30079 0000501A EB05                    	jmp	short spool_ret_addr
 30080                                  
 30081                                  do_low_int28:
 30082                                  	;call	far [ss:LowInt28Addr]
 30083 0000501C 2EFF1E[754F]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 30084                                  
 30085                                  spool_ret_addr:
 30086                                  	;INT	int_spooler		; INT 28h
 30087                                  
 30088 00005021 368F06[5803]            	POP	WORD [SS:IDLEINT]
 30089                                  POPFRET:
 30090 00005026 9D                      	POPF
 30091                                  _RET18:  
 30092 00005027 C3                      	RETN
 30093                                  
 30094                                  ; 05/05/2019 - Retro DOS v4.0
 30095                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 30096                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30097                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 30098                                  
 30099                                  ;----------------------------------------------------------------------------
 30100                                  ;
 30101                                  ; Procedure Name : STATCHK
 30102                                  ;
 30103                                  ;----------------------------------------------------------------------------
 30104                                  
 30105                                  STATCHK:
 30106 00005028 E84EFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 30107                                                                          ; input redirection
 30108 0000502B 53                              PUSH    BX
 30109 0000502C 31DB                            XOR     BX,BX
 30110 0000502E E845E5                          CALL	GET_IO_SFT
 30111 00005031 5B                              POP     BX
 30112 00005032 72F3                            JC      SHORT _RET18
 30113                                  
 30114 00005034 B401                            MOV     AH,1
 30115 00005036 E838F3                          CALL	IOFUNC
 30116 00005039 74BF                            JZ      SHORT SPOOLINT
 30117 0000503B 3C13                            CMP     AL,'S'-'@'
 30118 0000503D 75A7                            JNZ     SHORT NOSTOP
 30119                                  
 30120                                  	; 05/05/2019
 30121                                  	; MSDOS 6.0			; SS override
 30122 0000503F 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 30123 00005045 75AB                    	JNZ	short check_end		; AN000; yes
 30124                                  
 30125 00005047 30E4                            XOR     AH,AH
 30126 00005049 E825F3                          CALL	IOFUNC                  ; Eat Cntrl-S
 30127 0000504C EB4A                            JMP     SHORT PAUSOSTRT
 30128                                  PRINTOFF:
 30129                                  PRINTON:
 30130 0000504E 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 30131                                  
 30132                                  	; 30/07/2018 - Retro DOS v3.0
 30133 00005053 53                      	PUSH	BX
 30134 00005054 BB0400                  	MOV	BX,4
 30135 00005057 E81CE5                  	call	GET_IO_SFT
 30136 0000505A 5B                      	POP	BX
 30137 0000505B 72CA                    	jc	short _RET18
 30138 0000505D 06                      	PUSH	ES
 30139 0000505E 57                      	PUSH	DI
 30140 0000505F 1E                      	PUSH	DS
 30141 00005060 07                      	POP	ES
 30142 00005061 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 30143                                  	;test	word [es:di+5],800h
 30144                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 30145                                  	; 05/05/2019
 30146 00005063 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 30147 00005068 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 30148                                  
 30149                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 30150                                  					; See if allowed
 30151 0000506A 50                      	push	ax
 30152 0000506B B82611                  	mov	ax,1126h
 30153 0000506E CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 30154                                  			; Return: CF set on error, AX = error code
 30155                                  			; STACK unchanged
 30156 00005070 58                      	pop	ax
 30157                                  
 30158 00005071 730F                    	JNC	short NORM_PR 		; Echo is OK
 30159                                  
 30160                                  					; SS override
 30161 00005073 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 30162                                  
 30163                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 30164                                  
 30165 00005079 50                      	push    ax
 30166 0000507A B82411                  	mov     ax,1124h
 30167 0000507D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 30168                                  			; ES:DI -> SFT, SS = DOS CS
 30169 0000507F 58                      	pop     ax
 30170                                  
 30171 00005080 EB10                    	JMP	SHORT RETP6
 30172                                  NORM_PR:
 30173 00005082 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 30174 00005088 7505                    	JNZ	short PRNOPN
 30175 0000508A E839F4                  	call	DEV_CLOSE_SFT
 30176 0000508D EB03                    	JMP	SHORT RETP6
 30177                                  PRNOPN:
 30178 0000508F E82CF4                  	call	DEV_OPEN_SFT
 30179                                  RETP6:
 30180 00005092 5F                      	POP	DI
 30181 00005093 07                      	POP	ES
 30182                                  STATCHK_RETN:
 30183 00005094 C3                              RETN
 30184                                  PAUSOLP:
 30185 00005095 E862FF                          CALL    SPOOLINT
 30186                                  PAUSOSTRT:
 30187 00005098 B401                            MOV     AH,1
 30188 0000509A E8D4F2                          CALL	IOFUNC
 30189 0000509D 74F6                            JZ      SHORT PAUSOLP
 30190                                  INCHK:
 30191 0000509F 53                              PUSH    BX
 30192 000050A0 31DB                            XOR     BX,BX
 30193 000050A2 E8D1E4                          CALL	GET_IO_SFT
 30194 000050A5 5B                              POP     BX
 30195 000050A6 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 30196 000050A8 30E4                            XOR     AH,AH
 30197 000050AA E8C4F2                          CALL	IOFUNC
 30198                                  	; 30/07/2018
 30199                                  	; MSDOS 3.3
 30200                                          ;CMP	AL,'P'-'@' ;cmp al,16
 30201                                          ;JNZ	SHORT NOPRINT
 30202                                  
 30203                                  	;cmp	byte [SS:SCAN_FLAG],0
 30204                                  	;JZ	SHORT PRINTON	
 30205                                  	;mov	byte [ss:SCAN_FLAG],0
 30206                                  
 30207                                  	; 05/05/2019
 30208                                  	; MSDOS 6.0
 30209 000050AD 3C10                    	CMP	AL,"P"-"@"
 30210                                  	;;;;  7/14/86	ALT_Q key fix
 30211 000050AF 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 30212                                  ;NOPRINT:	
 30213                                  	;IF	NOT TOGLPRN
 30214                                  	;CMP	AL,"N"-"@"
 30215                                  	;JZ	short PRINTOFF
 30216                                  	;ENDIF
 30217 000050B1 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 30218                                  	;retnz
 30219 000050B3 75DF                    	jnz	short STATCHK_RETN
 30220                                  
 30221                                  	; !! NOTE: FALL THROUGH !!
 30222                                  
 30223                                  ;---------------------------------------------------------------------------
 30224                                  ;
 30225                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 30226                                  ;
 30227                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 30228                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 30229                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 30230                                  ; processing to continue; 2) the original interrupt return address to the code
 30231                                  ; that performed the function call in the first place. If the user CTRL-C
 30232                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 30233                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 30234                                  ; is simulated.
 30235                                  ;
 30236                                  ;---------------------------------------------------------------------------
 30237                                  
 30238                                  CNTCHAND:
 30239                                  	; MSDOS 6.0			; SS override
 30240                                  					; AN002; from RAWOUT
 30241                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 30242                                  	;JNZ	short around_deadlock 	; AN002;
 30243                                  
 30244                                  	; 05/05/2019 - Retro DOS v4.0
 30245                                  	; (MSDOS 6.21 MSDOS.SYS DOSCODE:91C4h, 29/12/2022)
 30246 000050B5 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 30247 000050BB 7508                    	JNZ	short around_deadlock 	; AN002;
 30248                                  
 30249 000050BD B003                            MOV     AL,3			; Display "^C"
 30250 000050BF E809C6                          CALL	BUFOUT
 30251 000050C2 E8A7C4                          CALL	CRLF
 30252                                  around_deadlock:
 30253 000050C5 16                              PUSH    SS
 30254 000050C6 1F                              POP     DS
 30255 000050C7 803E[5703]00                    CMP     BYTE [CONSWAP],0
 30256 000050CC 7403                            JZ      SHORT NOSWAP
 30257 000050CE E838E1                          CALL	SWAPBACK
 30258                                  NOSWAP:
 30259 000050D1 FA                      	CLI				; Prepare to play with stack
 30260 000050D2 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 30261 000050D6 8B26[8405]              	MOV	SP,[USER_SP]
 30262 000050DA E872B3                          CALL	restore_world       ; User registers now restored
 30263                                  
 30264                                  	; 30/07/2018 - Retro DOS v3.0 
 30265                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 30266                                          ; 14/03/2018 - Retro DOS v2.0
 30267                                  	;MOV	BYTE [CS:INDOS],0	
 30268                                          ;MOV	BYTE [CS:ERRORMODE],0
 30269                                          ;MOV	[CS:ConC_Spsave],SP
 30270                                  	;clc	;30/07/2018
 30271                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 30272                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 30273                                  			; Return: return via RETF 2 with CF set
 30274                                  			; DOS will abort program with errorlevel 0
 30275                                  			; else
 30276                                  			; interrupted DOS call continues
 30277                                  
 30278                                  	; 05/05/2019 - Retro DOS v4.0
 30279                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 30280                                  
 30281                                  	; CS was used to address these variables. We have to use DOSDATA
 30282                                  	
 30283 000050DD 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 30284                                  			; (pop es, after 'call restore_world')	
 30285 000050DE 1E                      	push	ds
 30286                                  	;getdseg <ds>			; ds -> dosdata
 30287 000050DF 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30288 000050E4 C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 30289 000050E9 C606[2003]00            	mov	byte [ERRORMODE],0
 30290 000050EE 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 30291                                  	; User SP has changed because of push. Adjust for it
 30292 000050F2 8306[3203]02            	add	word [ConC_Spsave],2
 30293                                  
 30294 000050F7 803E[1112]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 30295 000050FC 1F                       	pop	ds	; restore ds
 30296 000050FD 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 30297 000050FF F8                      	CLC				
 30298 00005100 CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 30299 00005102 EB06                    	jmp	short ctrlc_ret_addr
 30300                                  
 30301                                  	; 05/05/2019
 30302                                  do_low_int23:
 30303 00005104 F8                      	clc
 30304 00005105 2EFF1E[6D4F]            	call	far [cs:LowInt23Addr]	
 30305                                  
 30306                                  	; 30/07/2018 
 30307                                  
 30308                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 30309                                  
 30310                                  ; The user has returned to us. The circumstances we allow are:
 30311                                  ;
 30312                                  ;   IRET	We retry the operation by redispatching the system call
 30313                                  ;   CLC/RETF	POP the stack and retry
 30314                                  ;   ... 	Exit the current process with ^C exit
 30315                                  ;
 30316                                  ; User's may RETURN to us and leave interrupts on. 
 30317                                  ; Turn 'em off just to be sure
 30318                                  
 30319                                  ctrlc_ret_addr: ; 05/05/2019
 30320                                  
 30321 0000510A FA                      	CLI
 30322                                  
 30323                                  	; MSDOS 3.3 
 30324                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 30325                                  	;PUSHF				; and the flags (maybe new call)
 30326                                  	;POP	AX
 30327                                  
 30328                                  	; 05/05/2019
 30329                                  	; MSDOS 6.0
 30330                                  
 30331                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 30332                                  
 30333 0000510B 50                      	push	ax
 30334 0000510C 8CD8                    	mov	ax,ds
 30335                                  	;getdseg <ds>			; ds -> dosdata
 30336 0000510E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30337 00005113 A3[0A0D]                	mov	[TEMPSEG],ax
 30338 00005116 58                      	pop	ax
 30339 00005117 A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 30340 0000511A 9C                      	pushf				; and the flags (maybe new call)
 30341 0000511B 58                      	pop	ax
 30342                                  
 30343                                  ; See if the input stack is identical to the output stack
 30344                                  
 30345                                  	; MSDOS 3.3
 30346                                  	;CMP	SP,[CS:ConC_Spsave]
 30347                                  	;JNZ	SHORT ctrlc_try_new	; current SP not the same as saved SP
 30348                                  
 30349                                  	; MSDOS 6.0
 30350 0000511C 3B26[3203]              	CMP	SP,[ConC_Spsave]
 30351 00005120 750A                    	JNZ	SHORT ctrlc_try_new	; current SP not the same as saved SP
 30352                                  
 30353                                  ; Repeat the operation by redispatching the system call.
 30354                                  
 30355                                  ctrlc_repeat:
 30356                                  	; MSDOS 3.3
 30357                                  	;MOV	AX,[CS:USER_IN_AX]
 30358                                  	; 05/05/2019
 30359                                  	; MSDOS 6.0
 30360 00005122 A1[3A03]                	mov	ax,[USER_IN_AX]
 30361 00005125 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 30362                                  	; MSDOS 3.3 & MSDOS 6.0 
 30363                                  	;transfer COMMAND
 30364                                  COMMANDJ:
 30365 00005129 E9DBB1                  	JMP	COMMAND
 30366                                  
 30367                                  ; The current SP is NOT the same as the input SP. Presume that he 
 30368                                  ; RETF'd leaving some flags on the stack and examine the input
 30369                                  
 30370                                  ctrlc_try_new:
 30371                                  	; 29/02/2024
 30372                                  	;ADD	SP,2			; pop those flags
 30373                                  	;
 30374                                  	;;test	ax,1
 30375                                  	;TEST	AX,f_Carry		; did he return with carry?
 30376 0000512C A801                    	test	al,f_Carry ; test al,1
 30377                                  	;
 30378                                  	; 29/02/2024
 30379 0000512E 58                      	pop	ax  ; (PCDOS 7.1 IBMDOS.COM)
 30380                                  	;
 30381 0000512F 74F1                    	JZ	short ctrlc_repeat	; no carry set, just retry
 30382                                  
 30383                                  	; MSDOS 6.0
 30384 00005131 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 30385                                  
 30386                                  	; Well...  time to abort the user.  
 30387                                  	; Signal a ^C exit and use the EXIT system call..
 30388                                  
 30389                                  ctrlc_abort:
 30390                                  	; MSDOS 3.3
 30391                                          ;;MOV	AX,(EXIT SHL 8) + 0
 30392                                          ;MOV	AX,(EXIT*256) + 0 ; 4C00h
 30393                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 30394                                          ;transfer COMMAND	    ; give up by faking $EXIT
 30395                                  	;;JMP	SHORT COMMANDJ
 30396                                  	;JMP	COMMAND
 30397                                  
 30398                                  	; 05/05/2019 - Retro DOS v4.0
 30399                                  	; MSDOS 6.0
 30400 00005135 B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 30401 00005138 1E                      	push	ds
 30402                                  	;getdseg <ds>			; ds -> dosdata
 30403 00005139 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 30404 0000513E C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 30405 00005143 1F                      	pop	ds
 30406                                  	;transfer COMMAND		; give up by faking $EXIT
 30407 00005144 EBE3                    	JMP	SHORT COMMANDJ
 30408                                  	;JMP	COMMAND
 30409                                  
 30410                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 30411                                  ;----------------------------------------------------------------------------
 30412                                  ;
 30413                                  ; Procedure Name : DIVOV
 30414                                  ;
 30415                                  ; Default handler for division overflow trap
 30416                                  ;
 30417                                  ;----------------------------------------------------------------------------
 30418                                  
 30419                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30420                                  DIVOV: 
 30421                                  	; 05/05/2019 - Retro DOS v4.0
 30422                                  	; 30/07/2018
 30423                                  	; 07/07/2018 - Retro DOS v3.0
 30424 00005146 BE[9C09]                	mov	si,DIVMES
 30425 00005149 2E8B1E[AF09]            	mov	bx,[cs:DivMesLen]
 30426                                  	;mov	ax,cs
 30427                                  	;mov	ss,ax
 30428                                  	; 05/05/2019
 30429                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 30430 0000514E 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 30431 00005153 BC[A007]                	mov     sp,AUXSTACK
 30432                                  	;call	RealDivOv ; MSDOS 3.3
 30433 00005156 E80200                  	call	_OUTMES ; MSDOS 6.0
 30434 00005159 EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 30435                                  
 30436                                  ; 30/07/2018
 30437                                  
 30438                                  ; MSDOS 6.0
 30439                                  ;---------------------------------------------------------------------------
 30440                                  ;
 30441                                  ; Procedure Name : OutMes
 30442                                  ;
 30443                                  ;
 30444                                  ; OutMes: perform message output
 30445                                  ; Inputs:   SS:SI points to message
 30446                                  ;	    BX has message length
 30447                                  ; Outputs:  message to BCON
 30448                                  ;
 30449                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30450                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30451                                  ;NB. This procedure is called only from DIVOV. -SR
 30452                                  ;
 30453                                  ;---------------------------------------------------------------------------
 30454                                  
 30455                                  ;MSDOS 3.3
 30456                                  ;---------------------------------------------------------------------------
 30457                                  ; RealDivOv: perform actual divide overflow stuff.
 30458                                  ; Inputs:   none
 30459                                  ; Outputs:  message to BCON
 30460                                  ;---------------------------------------------------------------------------
 30461                                  
 30462                                  	; 05/05/2019 - Retro DOS v4.0
 30463                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 30464                                  
 30465                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30466                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 30467                                  
 30468                                  ;---------------------------------------------------------------------------
 30469                                  ;
 30470                                  ; Procedure Name : OutMes
 30471                                  ;
 30472                                  ; OutMes: perform message output
 30473                                  ; Inputs:   SS:SI points to message
 30474                                  ;	    BX has message length
 30475                                  ; Outputs:  message to BCON
 30476                                  ;
 30477                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30478                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30479                                  ;NB. This procedure is called only from DIVOV. -SR
 30480                                  ;
 30481                                  ;---------------------------------------------------------------------------
 30482                                  
 30483                                  	; 30/07/2018
 30484                                  	; MSDOS 6.0
 30485                                  _OUTMES:
 30486                                  	; MSDOS 3.3
 30487                                  ;RealDivOv:
 30488                                  	; 07/07/2018 - Retro DOS v3.0
 30489                                          ;Context ES
 30490 0000515B 16                      	push	ss ; 05/05/2019
 30491                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 30492 0000515C 07                      	POP	ES
 30493                                          ;Context DS
 30494 0000515D 16                      	push	ss ; 05/05/2019	
 30495                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 30496 0000515E 1F                      	POP	DS
 30497 0000515F C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 30498 00005164 C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 30499 00005169 C706[9503]0000                  MOV     WORD [DSKSTST],0
 30500                                  	; BX = [DivMesLen] = 19
 30501 0000516F 891E[A403]                      MOV     [DSKSTCNT],BX
 30502 00005173 BB[9203]                        MOV     BX,DSKSTCALL
 30503 00005176 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 30504                                  	; 08/09/2018
 30505                                  	;mov	[DEVIOBUF_PTR],si
 30506                                  	; MSDOS 6.0
 30507                                  					; CS is used for string, fill in 
 30508                                  					; segment address
 30509                                  	;mov	[DOSSEG_INIT],cs ; 29/02/2024 
 30510 0000517A 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 30511                                  
 30512 0000517E C536[3200]                      LDS     SI,[BCON]
 30513 00005182 E8BAF3                          CALL	DEVIOCALL2
 30514                                  
 30515                                  	;; 14/03/2018
 30516                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 30517                                  	;; 08/09/2018
 30518                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 30519                                          ;MOV	WORD [CS:DSKSTCNT],1
 30520                                          
 30521                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30522                                  
 30523                                  	; ES still points to DOSDATA. ES is
 30524                                  					; not destroyed by deviocall2. So use
 30525                                  					; ES override.
 30526                                  
 30527 00005185 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 30528 0000518C 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 30529                                  
 30530 00005193 C3                      	RETN
 30531                                  
 30532                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 30533                                  ;---------------------------------------------------------------------------
 30534                                  ;
 30535                                  ; Procedure Name : CHARHARD
 30536                                  ;
 30537                                  ;
 30538                                  ; Character device error handler
 30539                                  ; Same function as HARDERR
 30540                                  ;
 30541                                  ;---------------------------------------------------------------------------
 30542                                  
 30543                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30544                                  CHARHARD:
 30545                                  	; 05/05/2019 - Retro DOS v4.0
 30546                                  	; 30/07/2018
 30547                                  	; 08/07/2018 - Retro DOS v3.0
 30548                                  
 30549                                  	; MSDOS 6.0
 30550                                  		   			; M024 - start
 30551 00005194 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 30552                                  	;jne	short @f		; Y: allow fail
 30553 0000519A 750B                    	jne	short chard1
 30554                                  
 30555 0000519C 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 30556                                  
 30557 0000519F 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 30558 000051A5 7503                    	jnz	short ctrlp		; Y: 
 30559                                  ;@@:
 30560                                  chard1:					; M024 - end
 30561                                  	; MSDOS 6.0 & MSDOS 3.3
 30562                                  
 30563                                  ; Character device error handler
 30564                                  ; Same function as HARDERR
 30565                                  
 30566                                  	;or	ah,38h
 30567 000051A7 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 30568                                  ctrlp:			; SS override for Allowed and EXITHOLD
 30569 000051AA 368826[4B03]            	mov	[SS:ALLOWED],ah
 30570                                  
 30571                                  	; 15/03/2018
 30572 000051AF 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 30573 000051B4 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 30574 000051B9 56                              PUSH    SI
 30575                                  	;and	di,0FFh
 30576 000051BA 81E7FF00                        AND     DI,STECODE
 30577 000051BE 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 30578 000051C0 E86400                          CALL    FATALC
 30579 000051C3 5E                              POP     SI
 30580                                  	;return
 30581 000051C4 C3                              RETN
 30582                                  
 30583                                  ;---------------------------------------------------------------------------
 30584                                  ;
 30585                                  ; Procedure Name : HardErr
 30586                                  ;
 30587                                  ; Hard disk error handler. Entry conditions:
 30588                                  ;	DS:BX = Original disk transfer address
 30589                                  ;	DX = Original logical sector number
 30590                                  ;	CX = Number of sectors to go (first one gave the error)
 30591                                  ;	AX = Hardware error code
 30592                                  ;	DI = Original sector transfer count	
 30593                                  ;	ES:BP = Base of drive parameters
 30594                                  ;	[READOP] = 0 for read, 1 for write
 30595                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 30596                                  ; Output:
 30597                                  ;	[FAILERR] will be set if user responded FAIL
 30598                                  ;
 30599                                  ;--------------------------------------------------------------------------
 30600                                  
 30601                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30602                                  HARDERR:
 30603                                  	; 05/05/2019 - Retro DOS v4.0
 30604                                  	; 30/07/2018
 30605                                  	; 08/07/2018 - Retro DOS v3.0
 30606 000051C5 97                      	XCHG    AX,DI			; Error code in DI, count in AX
 30607                                  	;and	di,0FFh
 30608 000051C6 81E7FF00                	AND	DI,STECODE		; And off status bits
 30609                                  	;CMP	DI,WRECODE		; Write Protect Error?
 30610                                  	;cmp	di,0
 30611 000051CA 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 30612 000051CD 750A                    	JNZ	short NOSETWRPERR
 30613 000051CF 50                      	PUSH    AX
 30614                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30615                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30616                                  	;;MOV	AL,[ES:BP+0]
 30617                                  	; 15/12/2022
 30618 000051D0 268A4600                	mov	al,[ES:BP]
 30619                                  		; 15/03/2018
 30620 000051D4 36A2[2203]              	MOV	[SS:WPERR],AL		; Flag drive with WP error
 30621 000051D8 58                      	POP	AX
 30622                                  NOSETWRPERR:
 30623 000051D9 29C8                    	SUB	AX,CX		  ; Number of sectors successfully transferred
 30624 000051DB 01C2                    	ADD	DX,AX		  ; First sector number to retry
 30625 000051DD 52                      	PUSH    DX
 30626                                  	; 08/07/2018
 30627                                  	;MUL	word [ES:BP+2] 		; Number of bytes transferred
 30628 000051DE 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 30629 000051E2 5A                      	POP	DX
 30630 000051E3 01C3                    	ADD	BX,AX			; First address for retry
 30631 000051E5 30E4                    	XOR	AH,AH			; Flag disk section in error
 30632                                  	;CMP	DX,[ES:BP+6] 		; In reserved area?
 30633 000051E7 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 30634 000051EB 721A                    	JB	SHORT ERRINT
 30635 000051ED FEC4                    	INC	AH			; Flag for FAT
 30636                                  	;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 30637                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019
 30638 000051EF 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 30639 000051F3 7308                    	JAE	short TESTDIR		; No
 30640                                  		; Err in FAT must force recomp of freespace
 30641                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 30642                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 30643 000051F5 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 30644 000051FB EB0A                    	JMP	SHORT ERRINT
 30645                                  TESTDIR:
 30646 000051FD FEC4                    	INC	AH
 30647                                  	;CMP	DX,[ES:BP+0BH]		; In directory?
 30648 000051FF 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR]
 30649 00005203 7202                    	JB	SHORT ERRINT
 30650 00005205 FEC4                    	INC	AH			; Must be in data area
 30651                                  ERRINT:
 30652 00005207 D0E4                    	SHL	AH,1			; Make room for read/write bit
 30653 00005209 360A26[7505]            	OR	AH,[SS:READOP] ; 15/03/2018
 30654                                  
 30655                                  	; 15/08/2018
 30656                                  					; SS override for allowed and EXITHOLD
 30657 0000520E 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 30658                                  
 30659                                  	;entry   FATAL
 30660                                  FATAL:
 30661                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30662                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30663                                  	;;MOV	AL,[ES:BP+0]		; Get drive number
 30664                                  	; 15/12/2022
 30665 00005213 268A4600                	MOV	AL,[ES:BP]
 30666                                  
 30667                                  	;entry   FATAL1
 30668                                  FATAL1:  
 30669                                  	; 15/03/2018	
 30670 00005217 368C06[8205]            	MOV	[SS:EXITHOLD+2],ES
 30671 0000521C 36892E[8005]            	MOV	[SS:EXITHOLD],BP	; The only things we preserve
 30672                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 30673                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 30674 00005221 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 30675 00005225 8CC5                    	MOV	BP,ES		  ; BP:SI points to the device involved
 30676                                  
 30677                                  	; DI has the INT-24-style extended error. We now map the error code
 30678                                  	; for this into the normalized get extended error set by using the
 30679                                  	; ErrMap24 table as a translate table. Note that we translate ONLY
 30680                                  	; the device returned codes and leave all others beyond the look up
 30681                                  	; table alone.
 30682                                  
 30683                                  	; 08/07/2018 - Retro DOS v3.0
 30684                                  FATALC:
 30685 00005227 E89501                  	call	SET_I24_EXTENDED_ERROR
 30686                                  	;cmp	di,0Ch
 30687 0000522A 83FF0C                  	CMP	DI,error_I24_gen_failure
 30688 0000522D 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 30689 0000522F BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 30690                                  					;  Only come via GetExtendedError
 30691                                  ;** ----------------------------------------------------------------
 30692                                  ;
 30693                                  ; Entry point used by REDIRector on Network I 24 errors.
 30694                                  ;
 30695                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 30696                                  ;
 30697                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 30698                                  ;	EXITHOLD set for restore of ES:BP.
 30699                                  ; ------------------------------------------------------------------
 30700                                  	;entry	NET_I24_ENTRY
 30701                                  NET_I24_ENTRY:
 30702                                  GOT_RIGHT_CODE:
 30703 00005232 36803E[2003]00          	CMP	BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 30704 00005238 7404                    	JZ	SHORT NoSetFail
 30705 0000523A B003                    	MOV	AL,3
 30706 0000523C EB6C                    	JMP	short FailRet
 30707                                  NoSetFail:
 30708 0000523E 368926[8805]            	MOV	[SS:CONTSTK],SP		; SS override
 30709 00005243 16                      	PUSH	SS
 30710 00005244 07                      	POP	ES
 30711                                      
 30712                                  	; Wango!!! We may need to free some user state info... In 
 30713                                  	; particular, we may have locked down a JFN for a user and he may
 30714                                  	; NEVER return to us. Thus,we need to free it here and then
 30715                                  	; reallocate it when we come back.
 30716                                  
 30717 00005245 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 30718 0000524B 740C                    	JZ	short _NoFree
 30719 0000524D 1E                      	push	ds
 30720 0000524E 56                      	push	si
 30721 0000524F 36C536[AE05]            	LDS	SI,[SS:PJFN]
 30722 00005254 C604FF                  	MOV	BYTE [SI],0FFH
 30723 00005257 5E                      	pop	si
 30724 00005258 1F                      	pop	ds
 30725                                  
 30726                                  _NoFree:
 30727 00005259 FA                      	CLI
 30728                                  					; Prepare to play with stack
 30729 0000525A 36FE06[2003]            	INC	BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 30730 0000525F 36FE0E[2103]            	DEC	BYTE [SS:INDOS]		; INT 24 handler might not return
 30731                                  
 30732                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30733                                  
 30734                                  	;; Extended Open hooks
 30735                                  					; AN000;IFS.I24 error disabled
 30736                                  	;test	byte [ss:EXTOPEN_ON],2
 30737 00005264 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF
 30738 0000526A 7404                    	JZ	short i24yes		; AN000;IFS.no
 30739                                  faili24:				; AN000;
 30740 0000526C B003                    	MOV	AL,3			; AN000;IFS.fake fail
 30741 0000526E EB29                    	JMP	short passi24 		; AN000;IFS.exit
 30742                                  i24yes: 				; AN000;
 30743                                  	;; Extended Open hooks
 30744                                  
 30745 00005270 368E16[8605]            	MOV	SS,[SS:USER_SS]
 30746 00005275 268B26[8405]            	MOV	SP,[ES:USER_SP]	; User stack pointer restored
 30747                                  
 30748                                  	;;int	24h	
 30749                                  	;IN	int_fatal_abort		; Fatal error interrupt vector,
 30750                                  					; must preserve ES
 30751                                  	; 05/05/2019
 30752 0000527A 26803E[1112]00          	cmp	byte [es:DosHasHMA],0	; Q: is dos running in HMA (M021)
 30753 00005280 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 30754 00005282 CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 30755                                  					; must preserve ES
 30756 00005284 EB05                    	jmp	short criterr_ret_addr
 30757                                  
 30758                                  do_low_int24:
 30759                                  	; 05/05/2019
 30760                                  	; MSDOS 6.0
 30761 00005286 2EFF1E[714F]            	call    far [cs:LowInt24Addr]
 30762                                  criterr_ret_addr:
 30763 0000528B 268926[8405]            	MOV	[ES:USER_SP],SP	; restore our stack
 30764 00005290 268C16[8605]            	MOV	[ES:USER_SS],SS
 30765 00005295 8CC5                    	MOV	BP,ES
 30766 00005297 8ED5                    	MOV	SS,BP
 30767                                  passi24:
 30768 00005299 368B26[8805]            	MOV	SP,[SS:CONTSTK]
 30769 0000529E 36FE06[2103]            	INC	BYTE [SS:INDOS]		; Back in the DOS
 30770 000052A3 36C606[2003]00          	MOV	BYTE [SS:ERRORMODE],0	; Back from INT 24
 30771 000052A9 FB                      	STI
 30772                                  FailRet:
 30773 000052AA 36C42E[8005]            	LES	BP,[SS:EXITHOLD]
 30774                                  	
 30775                                  	; 08/07/2018
 30776                                  
 30777                                  	; Triage the user's reply.
 30778                                  
 30779 000052AF 3C01                    	CMP	AL,1
 30780 000052B1 723D                    	JB	short CheckIgnore	; 0 => ignore
 30781 000052B3 7445                    	JZ	short CheckRetry	; 1 => retry
 30782 000052B5 3C03                    	CMP	AL,3			; 3 => fail
 30783 000052B7 7549                    	JNZ	short DoAbort 		; 2, invalid => abort
 30784                                  
 30785                                  	; The reply was fail. See if we are allowed to fail.
 30786                                  
 30787                                  					; SS override for ALLOWED, EXTOPEN_ON,
 30788                                  					; ALLOWED, FAILERR, WPERR, SFN, pJFN
 30789                                  	;test	byte [ss:ALLOWED],8
 30790 000052B9 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 30791 000052BF 7441                    	jz	short DoAbort		; No, do abort
 30792                                  DoFail:
 30793 000052C1 B003                    	MOV	AL,3			; just in case...
 30794                                  					; AN000;EO. I24 error disabled
 30795                                  	; 05/05/2019
 30796                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 30797 000052C3 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 30798 000052C9 7505                    	jnz	short CleanUp 		; AN000;EO. no
 30799                                  	
 30800 000052CB 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 30801                                  CleanUp:
 30802 000052D0 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 30803 000052D6 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 30804                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30805                                  	;jnz	short CleanUp2
 30806                                  	;retn
 30807                                  	; 17/12/2022
 30808 000052DC 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 30809                                  CleanUp2:
 30810 000052DE 1E                      	push	ds
 30811 000052DF 56                      	push	si
 30812 000052E0 50                      	push	ax
 30813 000052E1 36A1[AA05]              	MOV	AX,[ss:SFN]
 30814 000052E5 36C536[AE05]            	LDS	SI,[ss:PJFN]
 30815 000052EA 8804                    	MOV	[SI],AL
 30816 000052EC 58                      	pop	ax
 30817 000052ED 5E                      	pop	si
 30818 000052EE 1F                      	pop	ds
 30819                                  Cleanup_retn:
 30820 000052EF C3                      	retn
 30821                                  
 30822                                  	; The reply was IGNORE. See if we are allowed to ignore.
 30823                                  
 30824                                  CheckIgnore:
 30825                                  	;test	byte [ss:ALLOWED],20h
 30826 000052F0 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 30827                                  CheckRI:	; 29/02/2024
 30828 000052F6 74C9                    	jz	short DoFail			; No, do fail
 30829 000052F8 EBD6                    	jmp	short CleanUp
 30830                                  
 30831                                  	; The reply was RETRY. See if we are allowed to retry.
 30832                                  
 30833                                  CheckRetry:
 30834                                  	;test	byte [ss:ALLOWED],10h
 30835 000052FA 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 30836                                  	;jz	short DoFail			; No, do fail
 30837                                  	;JMP	short CleanUp
 30838                                  	; 29/02/2024 (PCDOS 7.1 IBMDOS.COM)
 30839 00005300 EBF4                    	jmp	short CheckRI
 30840                                  
 30841                                  	; The reply was ABORT.
 30842                                  DoAbort:
 30843 00005302 16                      	push	ss
 30844 00005303 1F                      	pop	ds
 30845                                  
 30846 00005304 803E[5703]00            	CMP	byte [CONSWAP],0
 30847 00005309 7403                    	JZ	short NOSWAP2
 30848 0000530B E8FBDE                  	call	SWAPBACK
 30849                                  NOSWAP2:
 30850                                  	; See if we are to truly abort. If we are in the process of aborting, 
 30851                                  	; turn this abort into a fail.
 30852                                  
 30853                                  	;test	[fAborting],0FFh
 30854                                  	;jnz	short DoFail
 30855                                  
 30856 0000530E 803E[5903]00            	cmp	byte [fAborting],0
 30857 00005313 75AC                    	JNZ	short DoFail
 30858                                  
 30859                                  	; Set return code
 30860                                  
 30861 00005315 C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 30862 0000531A 30C0                    	XOR	AL,AL
 30863                                  
 30864                                  	; we are truly aborting the process. Go restore information from 
 30865                                  	; the PDB as necessary.
 30866                                  
 30867 0000531C E9700D                  	jmp	exit_inner
 30868                                  
 30869                                  ;** --------------------------------------------------------------------------
 30870                                  ;
 30871                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 30872                                  ; different, then an old-style return is performed. If they are the same,
 30873                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 30874                                  ; the source of the terminate addresses.
 30875                                  ;
 30876                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 30877                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 30878                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 30879                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 30880                                  ; flag that will indicate that if any abort code is seen, we just continue the
 30881                                  ; operation. In essence, we dis-allow the abort response.
 30882                                  ;
 30883                                  ; output:   none.
 30884                                  ; ----------------------------------------------------------------------------
 30885                                  
 30886                                  	;entry	reset_environment
 30887                                  	
 30888                                  reset_environment:
 30889                                  	; 30/07/2018 - Retro DOS v3.0
 30890                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 30891                                  
 30892                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 30893                                  
 30894 0000531F 1E                      	PUSH	DS			; save PDB of process
 30895                                  
 30896                                  	; There are no critical sections in force. Although we may enter
 30897                                  	; here with critical sections locked down, they are no longer 
 30898                                  	; relevant. We may safely free all allocated resources.
 30899                                  
 30900 00005320 B482                    	MOV	AH,82h
 30901                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 30902                                  	;int	2Ah 	
 30903 00005322 CD2A                    	INT	int_IBM
 30904                                  
 30905                                  					; SS override
 30906 00005324 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 30907                                  
 30908                                  					; DOS 4.00 doesn't need it
 30909                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 30910                                  					; Allow REDIR to clear some stuff
 30911                                  					; On process exit.
 30912 0000532A B82211                  	mov	ax, 1122h
 30913 0000532D CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 30914                                  			; SS = DOS CS
 30915                                  	;mov	al,22h	
 30916 0000532F B022                    	MOV	AL,int_terminate
 30917 00005331 E843BB                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 30918                                  
 30919 00005334 59                      	POP	CX			; get ThisPDB
 30920 00005335 06                      	push	es
 30921 00005336 53                      	push	bx			; save return address
 30922                                  
 30923 00005337 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 30924 0000533C 8EDB                    	MOV	DS,BX
 30925 0000533E A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 30926                                  
 30927                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 30928                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper
 30929                                  	; is not Exit_keep_process
 30930                                  	
 30931 00005341 39D8                    	CMP	AX,BX
 30932 00005343 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 30933 00005345 39CB                    	CMP	BX,CX
 30934 00005347 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 30935 00005349 50                      	PUSH	AX			; save parent
 30936                                  
 30937                                  					; SS override
 30938                                  	;cmp	byte [SS:EXIT_TYPE],3
 30939 0000534A 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 30940 00005350 7406                    	JZ	short reset_to_parent 	; keeping this process
 30941                                  
 30942                                  	; We are truly removing a process. Free all allocation blocks
 30943                                  	; belonging to this PDB
 30944                                  
 30945                                  	;invoke	arena_free_process
 30946 00005352 E8720D                  	call	arena_free_process
 30947                                  
 30948                                  	; Kill off remainder of this process. Close file handles and signal
 30949                                  	; to relevant network folks that this process is dead. Remember that
 30950                                  	; CurrentPDB is STILL the current process!
 30951                                  
 30952                                  	;invoke	DOS_ABORT
 30953 00005355 E8CEDA                  	call	DOS_ABORT
 30954                                  
 30955                                  reset_to_parent:
 30956                                  					; SS override
 30957 00005358 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 30958                                  
 30959                                  reset_return:				; come here for normal return
 30960                                  	;Context DS			; DS is used to refer to DOSDATA
 30961 0000535D 16                      	push	ss
 30962 0000535E 1F                      	pop	ds	
 30963                                  
 30964 0000535F B0FF                    	MOV	AL,-1
 30965                                  
 30966                                  	; make sure that everything is clean In this case ignore any errors,
 30967                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 30968                                  
 30969                                  	;EnterCrit critDisk
 30970 00005361 E883BF                  	call	ECritDisk
 30971                                  	;invoke	FLUSHBUF
 30972 00005364 E89F05                  	call	FLUSHBUF
 30973                                  	;LeaveCrit critDisk
 30974 00005367 E898BF                  	call	LCritDisk
 30975                                  
 30976                                  	; Decrement open ref. count if we had done a virtual open earlier.
 30977                                  
 30978 0000536A E895F7                  	call	CHECK_VIRT_OPEN
 30979 0000536D FA                      	CLI
 30980 0000536E C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 30981 00005373 C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 30982 00005378 C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 30983 0000537D 8F06[8005]              	POP	WORD [EXITHOLD]
 30984 00005381 8F06[8205]              	POP	WORD [EXITHOLD+2]
 30985                                  
 30986                                  	; Snake into multitasking... Get stack from CurrentPDB person
 30987                                  
 30988 00005385 8E1E[3003]              	MOV	DS,[CurrentPDB]
 30989 00005389 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 30990 0000538D 8B262E00                	MOV	SP,[PDB.USER_STACK]
 30991                                  
 30992 00005391 E8BBB0                  	call	restore_world
 30993                                  
 30994                                  	; 05/05/2019
 30995 00005394 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 30996                                  
 30997                                  	; MSDOS 6.0
 30998 00005395 50                      	push	ax			; set up ds, but save ds in TEMPSEG
 30999 00005396 8CD8                    	mov	ax,ds			; and not on stack.
 31000                                  	;getdseg <ds>			; ds -> dosdata
 31001 00005398 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 31002 0000539D A3[0A0D]                	mov	[TEMPSEG],ax
 31003 000053A0 58                      	pop	ax
 31004                                  					; set up ds to DOSDATA
 31005                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 31006 000053A1 A3[8405]                	mov	[USER_SP],ax
 31007                                  
 31008 000053A4 58                      	POP	AX			; suck off CS:IP of interrupt...
 31009 000053A5 58                      	POP	AX
 31010 000053A6 58                      	POP	AX
 31011                                  
 31012                                  ; M011 : BEGIN
 31013                                  
 31014                                  	; MSDOS 3.3
 31015                                  ;	MOV	AX,0F202h	; STI
 31016                                  
 31017                                  	; MSDOS 6.0
 31018 000053A7 9F                      	LAHF
 31019 000053A8 86E0                    	XCHG	AH,AL
 31020 000053AA 2402                    	AND	AL,2
 31021 000053AC B4F2                    	MOV	AH,0F2h
 31022                                  
 31023                                  ; M011 : END
 31024                                  
 31025                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31026 000053AE 50                      	PUSH	AX
 31027                                   
 31028                                  	;PUSH	word [CS:EXITHOLD+2]
 31029                                  	;PUSH	word [CS:EXITHOLD]
 31030                                  	
 31031                                  	; MSDOS 6.0
 31032 000053AF FF36[8205]              	PUSH	word [EXITHOLD+2]
 31033 000053B3 FF36[8005]              	PUSH	word [EXITHOLD]
 31034                                  
 31035                                  	;MOV	AX,[CS:USER_SP]
 31036                                  
 31037                                  	; MSDOS 6.0
 31038 000053B7 A1[8405]                	MOV	AX,[USER_SP]
 31039 000053BA 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 31040                                  
 31041 000053BE CF                      	IRET			; Long return back to user terminate address
 31042                                  
 31043                                  ;---------------------------------------------------------------------------
 31044                                  ;
 31045                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 31046                                  ;
 31047                                  ; This routine handles extended error codes.
 31048                                  ; Input : DI = error code from device
 31049                                  ; Output: All EXTERR fields are set
 31050                                  ;
 31051                                  ;--------------------------------------------------------------------------
 31052                                  
 31053                                  SET_I24_EXTENDED_ERROR:
 31054 000053BF 50                      	PUSH	AX
 31055                                  					; ErrMap24End is in DOSDATA
 31056 000053C0 B8[BB0E]                	MOV	AX,ErrMap24End
 31057 000053C3 2D[AB0E]                	SUB	AX,ErrMap24
 31058                                  					; Change to dosdata to access
 31059                                  					; ErrMap24 and EXTERR -SR
 31060                                  	; 05/05/2019 - Retro DOS v4.0
 31061                                  	
 31062                                  	; MSDOS 6.0
 31063 000053C6 1E                      	push	ds
 31064                                  	;getdseg <ds>			; ds ->dosdata
 31065 000053C7 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 31066                                  
 31067                                  	; AX is the index of the first unavailable error. Do not translate
 31068                                  	; if greater or equal to AX.
 31069                                  
 31070 000053CC 39C7                    	CMP	DI,AX
 31071 000053CE 89F8                    	MOV	AX,DI
 31072 000053D0 7306                    	JAE	short NoTrans
 31073                                  
 31074                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 31075 000053D2 8A85[AB0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 31076 000053D6 30E4                    	XOR	AH,AH
 31077                                  NoTrans:
 31078                                  	;MOV	[CS:EXTERR],AX
 31079 000053D8 A3[2403]                	mov	[EXTERR],AX
 31080 000053DB 1F                      	pop	ds
 31081                                  	;assume	ds:nothing
 31082 000053DC 58                      	POP	AX
 31083                                  
 31084                                  	; Now Extended error is set correctly. Translate it to get correct
 31085                                  	; error locus class and recommended action.
 31086                                  
 31087 000053DD 56                      	PUSH	SI
 31088                                  					; ERR_TABLE_24 is in DOSCODE 
 31089 000053DE BE[5B0E]                	MOV	SI,ERR_TABLE_24
 31090 000053E1 E894B2                  	call	CAL_LK			; Set other extended error fields
 31091 000053E4 5E                      	POP	SI
 31092 000053E5 C3                      	retn
 31093                                  
 31094                                  ;============================================================================
 31095                                  ; FAT.ASM, MSDOS 6.0, 1991
 31096                                  ;============================================================================
 31097                                  ; 30/07/2018 - Retro DOS v3.0
 31098                                  ; 20/05/2019 - Retro DOS v4.0
 31099                                  
 31100                                  ;	TITLE	FAT - FAT maintenance routines
 31101                                  ;	NAME	FAT
 31102                                  
 31103                                  ;**	FAT.ASM
 31104                                  ;----------------------------------------------------------------------------
 31105                                  ;	Low level local device routines for performing disk change sequence,
 31106                                  ;	setting cluster validity, and manipulating the FAT
 31107                                  ;
 31108                                  ;	IsEof
 31109                                  ;	UNPACK
 31110                                  ;	PACK
 31111                                  ;	MAPCLUSTER
 31112                                  ;	FATREAD_SFT
 31113                                  ;	FATREAD_CDS
 31114                                  ;	FAT_operation
 31115                                  ;
 31116                                  ;	Revision history:
 31117                                  ;
 31118                                  ;	  AN000  version Jan. 1988
 31119                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 31120                                  ;
 31121                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 31122                                  ;	       from CL0FATENTRY rather than disk.
 31123                                  
 31124                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 31125                                  
 31126                                  ;Break <IsEOF - check the quantity in BX for EOF>
 31127                                  ;----------------------------------------------------------------------------
 31128                                  ;
 31129                                  ; Procedure Name : IsEOF
 31130                                  ;
 31131                                  ; IsEOF - check the fat value in BX for eof.
 31132                                  ;
 31133                                  ;   Inputs:	ES:BP point to DPB
 31134                                  ;		BX has fat value
 31135                                  ;   Outputs:	JAE eof
 31136                                  ;   Registers modified: none
 31137                                  ;
 31138                                  ;---------------------------------------------------------------------------
 31139                                  
 31140                                  IsEOF:
 31141                                  	;cmp	word [es:bp+0Dh],0FF6h
 31142 000053E6 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 31143 000053EC 730B                    	JAE	short EOF16			; yes, check for eof there
 31144                                  
 31145                                  ;J.K. 8/27/86
 31146                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 31147                                  ;of any media that has "F0"(Other) as a MediaByte.
 31148                                  ;Hopely, this does not create any side effect for those who may use any value
 31149                                  ;other than "FF8-FFF" as an EOF for their own file.
 31150                                  
 31151 000053EE 81FBF00F                	cmp	bx,0FF0h
 31152 000053F2 7404                    	je	short IsEOF_other
 31153                                  
 31154 000053F4 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 31155                                  IsEOF_other:
 31156 000053F8 C3                      	retn
 31157                                  EOF16:
 31158 000053F9 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 31159 000053FC C3                      	retn
 31160                                  
 31161                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 31162                                  
 31163                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 31164                                  ;---------------------------------------------------------------------------
 31165                                  ;
 31166                                  ; Procedur Name : UNPACK
 31167                                  ;
 31168                                  ; Inputs:
 31169                                  ;	BX = Cluster number (may be full 16-bit quantity)
 31170                                  ;	ES:BP = Base of drive parameters
 31171                                  ; Outputs:
 31172                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 31173                                  ;	Zero set means DI=0 (free cluster)
 31174                                  ;	Carry set means error (currently user FAILed to I 24)
 31175                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 31176                                  ;
 31177                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 31178                                  ;
 31179                                  ;----------------------------------------------------------------------------
 31180                                  	
 31181                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31182                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 31183                                  
 31184                                  	; 20/05/2019 - Retro DOS v4.0
 31185                                  UNPACK:
 31186                                  	; MSDOS 6.0			; M014 - Start
 31187 000053FD 09DB                    	or	bx,bx			; Q: are we unpacking cluster 0
 31188 000053FF 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 31189 00005401 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 31190 00005405 09FF                    	or	di,di 			; return z if di=0
 31191 00005407 C3                      	retn				; done
 31192                                  up_cont:				; M014 - End
 31193                                  	; MSDOS 3.3 & MSDOS 6.0
 31194                                  	;cmp	bx,[es:bp+0Dh]
 31195 00005408 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 31196 0000540C 7726                    	JA	short HURTFAT
 31197 0000540E E8D600                  	CALL	MAPCLUSTER
 31198 00005411 721E                    	jc	short _DoContext
 31199 00005413 8B3D                    	MOV	DI,[DI]
 31200 00005415 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 31201 00005417 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 31202 0000541B 81FEF60F                	CMP	SI,4096-10
 31203 0000541F 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 31204 00005421 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 31205 00005423 EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 31206                                  High12:
 31207 00005425 D1EF                    	SHR	DI,1
 31208 00005427 D1EF                    	SHR	DI,1
 31209 00005429 D1EF                    	SHR	DI,1
 31210 0000542B D1EF                    	SHR	DI,1
 31211                                  Unpack12:
 31212 0000542D 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 31213                                  _DoContext:
 31214 00005431 16                      	PUSH	SS
 31215 00005432 1F                      	POP	DS
 31216 00005433 C3                      	retn
 31217                                  HURTFAT:
 31218                                  	;;mov	word [es:bp+1Eh],0FFFFh
 31219                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 31220 00005434 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 31221 0000543A 50                      	PUSH	AX
 31222 0000543B B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 31223                                  
 31224                                  ;hkn; SS override
 31225 0000543D 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 31226                                  ;
 31227                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 31228                                  ;
 31229 00005443 BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 31230 00005446 E8CAFD                  	call	FATAL
 31231 00005449 3C03                    	CMP	AL,3
 31232 0000544B F8                      	CLC
 31233 0000544C 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 31234 0000544E F9                      	STC				; User said FAIL
 31235                                  OKU_RET:
 31236 0000544F 58                      	POP	AX
 31237                                  hurtfat_retn:
 31238 00005450 C3                      	retn
 31239                                  
 31240                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 31241                                  
 31242                                  ;Break	<PACK -- PACK FAT ENTRIES>
 31243                                  ;----------------------------------------------------------------------------
 31244                                  ;
 31245                                  ; Procedure Name : PACK
 31246                                  ;
 31247                                  ; Inputs:
 31248                                  ;	BX = Cluster number
 31249                                  ;	DX = Data
 31250                                  ;	ES:BP = Pointer to drive DPB
 31251                                  ; Outputs:
 31252                                  ;	The data is stored in the FAT at the given cluster.
 31253                                  ;	SI,DX,DI all destroyed
 31254                                  ;	Carry set means error (currently user FAILed to I 24)
 31255                                  ;	No other registers affected
 31256                                  ;
 31257                                  ; NOTE: if BX = 0 then data in DX is stored in CL0FATENTRY.
 31258                                  ;
 31259                                  ;---------------------------------------------------------------------------
 31260                                  
 31261                                  	; 02/01/2024
 31262                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31263                                  	; 20/05/2019 - Retro DOS v4.0
 31264                                  PACK:
 31265                                  	; MSDOS 6.0			; M014 - start
 31266 00005451 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 31267 00005453 7505                    	jnz	short p_cont		; N: proceed with normal pack
 31268 00005455 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 31269 00005459 C3                      	retn				; done
 31270                                  p_cont:					; M014 - end
 31271                                  	; MSDOS 3.3 & MSDOS 6.0
 31272 0000545A E88A00                  	CALL	MAPCLUSTER
 31273 0000545D 72D2                    	JC	short _DoContext
 31274 0000545F 8B35                    	MOV	SI,[DI]
 31275 00005461 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 31276 00005463 51                      	PUSH	CX			; move data to upper 12 bits
 31277 00005464 B104                    	MOV	CL,4
 31278 00005466 D3E2                    	SHL	DX,CL
 31279 00005468 59                      	POP	CX
 31280 00005469 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 31281 0000546C EB14                    	JMP	SHORT PACKIN
 31282                                  ALIGNED:
 31283                                  	;cmp	word [es:bp+0Dh],0FF6h
 31284 0000546E 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 31285 00005474 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 31286 00005476 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 31287 0000547A 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 31288 0000547E EB02                    	JMP	SHORT PACKIN		; MZ go store
 31289                                  Pack16:
 31290 00005480 31F6                    	XOR	SI,SI			; MZ no original data
 31291                                  PACKIN:
 31292 00005482 09D6                    	OR	SI,DX
 31293 00005484 8935                    	MOV	[DI],SI
 31294                                  
 31295                                  ;hkn; SS override
 31296 00005486 36C536[E205]            	LDS	SI,[SS:CURBUF]
 31297                                  	; MSDOS 6.0
 31298 0000548B F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 31299                                  					;LB. if already dirty		  ;AN000;
 31300 0000548F 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 31301                                  	; 10/06/2019
 31302 00005491 E87405                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 31303                                  	
 31304                                  	;or	byte [si+5],40h
 31305 00005494 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 31306                                  yesdirty11:				;LB.				;AN000;
 31307                                  ;hkn; SS override
 31308 00005498 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 31309                                  ;hkn; SS is DOSDATA
 31310 0000549E 16                      	push	ss
 31311 0000549F 1F                      	pop	ds
 31312 000054A0 74AE                    	jz	short hurtfat_retn	; Carry clear
 31313 000054A2 50                      	PUSH	AX
 31314 000054A3 53                      	PUSH	BX
 31315 000054A4 51                      	PUSH	CX
 31316 000054A5 A1[8E05]                	MOV	AX,[CLUSSAVE]
 31317 000054A8 8E1E[E405]              	MOV	DS,[CURBUF+2]
 31318                                  	;;add	si,16 ; MSDOS 3.3
 31319                                  	;add	si,20 ; MSDOS 6.0
 31320 000054AC 83C614                  	ADD	SI,BUFINSIZ
 31321 000054AF 8824                    	MOV	[SI],AH
 31322                                  ;hkn; SS is DOSDATA
 31323                                  	;Context DS
 31324 000054B1 16                      	push	ss
 31325 000054B2 1F                      	pop	ds
 31326                                  	
 31327 000054B3 50                      	PUSH	AX
 31328                                  	
 31329                                  	; MSDOS 6.0
 31330 000054B4 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 31331 000054B8 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 31332                                  
 31333                                  	; MSDOS 3.3 & MSDOS 6.0
 31334 000054BC 8B16[9005]              	MOV	DX,[CLUSSEC]
 31335                                  
 31336                                  	;MOV	SI,1	  ; *
 31337                                  	;XOR	AL,AL     ; *
 31338                                  	;call	GETBUFFRB ; *
 31339                                  	; 22/09/2023
 31340 000054C0 E83803                  	call	GETBUFFRA ; *
 31341                                  
 31342 000054C3 58                      	POP	AX
 31343 000054C4 721B                    	JC	short POPP_RET
 31344 000054C6 C53E[E205]              	LDS	DI,[CURBUF]
 31345                                  	
 31346                                  	; MSDOS 6.0
 31347 000054CA F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 31348                                  					;LB. if already dirty		  ;AN000;
 31349 000054CE 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 31350 000054D0 E83505                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 31351                                  	
 31352                                  	;or	byte [di+5],40h
 31353 000054D3 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 31354                                  yesdirty12:
 31355                                  	;;add	di,16
 31356                                  	;add	di,20 ; MSDOS 6.0
 31357                                  	; 02/01/2024
 31358                                  	;ADD	DI,BUFINSIZ
 31359                                  	;DEC	DI
 31360 000054D7 83C713                  	add	di,BUFINSIZ-1 ; 19
 31361                                  
 31362                                  	;add	di,[es:bp+2]
 31363 000054DA 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 31364 000054DE 8805                    	MOV	[DI],AL
 31365 000054E0 F8                      	CLC
 31366                                  POPP_RET:
 31367 000054E1 16                      	PUSH	SS
 31368 000054E2 1F                      	POP	DS
 31369 000054E3 59                      	POP	CX
 31370 000054E4 5B                      	POP	BX
 31371 000054E5 58                      	POP	AX
 31372 000054E6 C3                      	retn
 31373                                  
 31374                                  ; 31/07/2018 - Retro DOS v3.0
 31375                                  
 31376                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 31377                                  ;---------------------------------------------------------------------------
 31378                                  ;
 31379                                  ; Procedure Name : MAPCLUSTER
 31380                                  ;
 31381                                  ; Inputs:
 31382                                  ;	ES:BP Points to DPB
 31383                                  ;	BX Is cluster number
 31384                                  ; Function:
 31385                                  ;	Get a pointer to the cluster
 31386                                  ; Outputs:
 31387                                  ;	DS:DI Points to contents of FAT for given cluster
 31388                                  ;	DS:SI Points to start of buffer
 31389                                  ;	Zero Not set if cluster data is in high 12 bits of word
 31390                                  ;	Zero set if cluster data is in low 12 or 16 bits
 31391                                  ;	Carry set if failed.
 31392                                  ; SI is destroyed.
 31393                                  ;
 31394                                  ;---------------------------------------------------------------------------
 31395                                  
 31396                                  	; 20/05/2019 - Retro DOS v4.0
 31397                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 31398                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31399                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 31400                                  
 31401                                  MAPCLUSTER:
 31402                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 31403 000054E7 C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 31404                                  	;SAVE	<AX,BX,CX,DX>
 31405 000054EC 50                      	push	ax
 31406 000054ED 53                      	push	bx
 31407 000054EE 51                      	push	cx
 31408 000054EF 52                      	push	dx
 31409 000054F0 89D8                    	MOV	AX,BX			; AX = BX
 31410 000054F2 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 31411 000054F8 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 31412 000054FA D1E8                    	SHR	AX,1			; AX = BX/2
 31413                                  Map16:	
 31414                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 31415 000054FC 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 31416                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31417 000054FE 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 31418 00005500 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 31419 00005502 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 31420                                  
 31421                                  ;IF FastDiv
 31422                                  ;
 31423                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 31424                                  ; case and apply a really fast algorithm to get the desired results
 31425                                  ;
 31426                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 31427                                  ; Fast method takes 39+20*4=119
 31428                                  ;
 31429                                  ; This saves a bunch.
 31430                                  
 31431 00005506 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 31432 0000550A 7510                    	jne	short _DoDiv		; 4  for no jump
 31433 0000550C 89C2                    	MOV	DX,AX			; 2  get set for remainder
 31434 0000550E 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 31435 00005512 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 31436                                  	; MDOS 3.3
 31437                                  	;shr	al,1	
 31438                                  	; MDOS 6.0
 31439 00005514 D1EF                    	shr	di,1			; 2
 31440 00005516 D0D8                    	rcr	al,1			; 2
 31441                                  	; MDOS 3.3 (& MSDOS 6.0)
 31442 00005518 30E4                    	xor	ah,ah			; 3
 31443 0000551A EB04                    	jmp	short DivDone		; 16
 31444                                  _DoDiv:
 31445                                  ;ENDIF
 31446                                  	; MSDOS 3.3
 31447                                  	;xor	dx,dx
 31448                                  	; MSDOS 6.0
 31449 0000551C 89FA                    	mov	dx,di			; 2
 31450                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31451 0000551E F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 31452                                  ;IF FastDiv
 31453                                  DivDone:
 31454                                  ;ENDIF
 31455                                  	;add	ax,[es:bp+6]
 31456 00005520 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 31457 00005524 49                      	DEC	CX			; CX is sector size - 1
 31458                                  	;SAVE	<AX,DX,CX>
 31459 00005525 50                      	push	ax
 31460 00005526 52                      	push	dx
 31461 00005527 51                      	push	cx
 31462 00005528 89C2                    	MOV	DX,AX
 31463                                  
 31464                                  	; MSDOS 6.0
 31465                                  	; 22/09/2023
 31466                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb  low sector #
 31467                                  	;
 31468                                  	; MDOS 3.3 (& MSDOS 6.0)
 31469                                  	;XOR	AL,AL	   ; *
 31470                                  	;MOV	SI,1	   ; *
 31471                                  	;;invoke GETBUFFRB ; *
 31472                                  	;call	GETBUFFRB  ; *
 31473                                  	; 22/09/2023
 31474 0000552A E8C802                  	call	GETBUFFRC  ; *!
 31475                                  
 31476                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 31477 0000552D 59                      	pop	cx
 31478 0000552E 58                      	pop	ax
 31479 0000552F 5A                      	pop	dx
 31480 00005530 724C                    	JC	short MAP_POP
 31481                                  
 31482 00005532 C536[E205]              	LDS	SI,[CURBUF]
 31483                                  	;;lea	di,[si+16]
 31484                                  	;lea	di,[si+20] ; MSDOS 6.0
 31485 00005536 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31486 00005539 01C7                    	ADD	DI,AX
 31487 0000553B 39C8                    	CMP	AX,CX
 31488 0000553D 752C                    	JNZ	short MAPRET
 31489 0000553F 8A05                    	MOV	AL,[DI]
 31490                                  	;Context DS		 	;hkn; SS is DOSDATA
 31491 00005541 16                      	push	ss
 31492 00005542 1F                      	pop	ds	
 31493 00005543 FE06[7805]              	INC	BYTE [CLUSSPLIT]
 31494 00005547 A2[8E05]                	MOV	[CLUSSAVE],AL
 31495 0000554A 8916[9005]              	MOV	[CLUSSEC],DX
 31496                                  	; MSDOS 6.0
 31497 0000554E C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb	;AN000;
 31498 00005554 42                      	INC	DX
 31499                                  
 31500                                  	; 22/09/2023
 31501                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb FAT sector <32mb ;AN000;
 31502                                  	;
 31503                                  	; MDOS 3.3 (& MSDOS 6.0)
 31504                                  	;XOR	AL,AL	   ; *
 31505                                  	;MOV	SI,1	   ; *
 31506                                  	;;invoke GETBUFFRB ; *
 31507                                  	;call	GETBUFFRB  ; *
 31508                                  	; 22/09/2023
 31509 00005555 E89D02                  	call	GETBUFFRC  ; *!
 31510 00005558 7224                    	JC	short MAP_POP
 31511                                  
 31512 0000555A C536[E205]              	LDS	SI,[CURBUF]
 31513 0000555E 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31514 00005561 8A05                    	MOV	AL,[DI]
 31515                                  	;Context DS			;hkn; SS is DOSDATA
 31516 00005563 16                      	push	ss
 31517 00005564 1F                      	pop	ds
 31518 00005565 A2[8F05]                	MOV	[CLUSSAVE+1],AL
 31519                                  
 31520                                  ;hkn; CLUSSAVE is in DOSDATA
 31521 00005568 BF[8E05]                	MOV	DI,CLUSSAVE
 31522                                  MAPRET:
 31523                                  	;RESTORE <DX,CX,BX>
 31524 0000556B 5A                      	pop	dx
 31525 0000556C 59                      	pop	cx
 31526 0000556D 5B                      	pop	bx
 31527 0000556E 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 31528 00005570 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 31529 00005576 7302                    	JAE	short MapSet		; MZ no, set flags
 31530 00005578 89D8                    	MOV	AX,BX
 31531                                  MapSet:
 31532 0000557A A801                    	TEST	AL,1			; set zero flag if not on boundary
 31533                                  	;RESTORE <AX>
 31534 0000557C 58                      	pop	ax
 31535 0000557D C3                      	retn
 31536                                  
 31537                                  MAP_POP:
 31538                                  	;RESTORE <DX,CX,BX,AX>
 31539 0000557E 5A                      	pop	dx
 31540 0000557F 59                      	pop	cx
 31541 00005580 5B                      	pop	bx
 31542 00005581 58                      	pop	ax
 31543                                  fatread_sft_retn: ; 17/12/2022
 31544 00005582 C3                      	retn
 31545                                  
 31546                                  ; 20/05/2019 - Retro DOS v4.0
 31547                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 31548                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31549                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 31550                                  
 31551                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 31552                                  ;----------------------------------------------------------------------------
 31553                                  ;
 31554                                  ; Procedure Name : FATREAD_SFT
 31555                                  ;
 31556                                  ; Inputs:
 31557                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 31558                                  ;		giving a NET SFT will produce system crashing results).
 31559                                  ;	DS DOSDATA
 31560                                  ; Function:
 31561                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 31562                                  ;	if disk changed.
 31563                                  ;	In other respects, same as FATREAD_CDS.
 31564                                  ;	(note ES:DI destroyed!)
 31565                                  ; Outputs:
 31566                                  ;	Carry set if error (currently user FAILed to I 24)
 31567                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 31568                                  ;	as far as invalidating curdir_ID is concerned.
 31569                                  ;	Since getting a true disk changed on this call is a screw up
 31570                                  ;	anyway, that's the way it goes.
 31571                                  ;
 31572                                  ;---------------------------------------------------------------------------
 31573                                  
 31574                                  FATREAD_SFT:
 31575 00005583 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 31576                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31577                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31578                                  	; 15/12/2022
 31579 00005587 268A4600                	mov	AL,[ES:BP]
 31580 0000558B A2[7605]                	MOV	[THISDRV],AL
 31581 0000558E E89BB0                  	call	GOTDPB			;Set THISDPB
 31582                                  	;CALL	FAT_GOT_DPB
 31583                                  	; 17/12/2022
 31584 00005591 EB78                    	jmp	FAT_GOT_DPB
 31585                                  ;fatread_sft_retn:
 31586                                  	;retn
 31587                                  
 31588                                  ;----------------------------------------------------------------------------
 31589                                  ;
 31590                                  ; Procedure Name : FATREAD_CDS
 31591                                  ;
 31592                                  ; Inputs:
 31593                                  ;	DS:DOSDATA
 31594                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 31595                                  ;		giving a NET or NUL CDS will produce system crashing results).
 31596                                  ; Function:
 31597                                  ;	If disk may have been changed, media is determined and buffers are
 31598                                  ;	flagged invalid. If not, no action is taken.
 31599                                  ; Outputs:
 31600                                  ;	ES:BP = Drive parameter block
 31601                                  ;	THISDPB = ES:BP
 31602                                  ;	THISDRV set
 31603                                  ;	Carry set if error (currently user FAILed to I 24)
 31604                                  ; DS preserved , all other registers destroyed
 31605                                  ;
 31606                                  ;---------------------------------------------------------------------------
 31607                                  
 31608                                  	; 20/05/2019 - Retro DOS v4.0
 31609                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 31610                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31611                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 31612                                  
 31613                                  FATREAD_CDS:
 31614 00005593 06                      	PUSH	ES
 31615 00005594 57                      	PUSH	DI
 31616                                  	;les	bp,[es:di+45h]
 31617 00005595 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 31618                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31619                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31620                                  	; 15/12/2022
 31621 00005599 268A4600                	mov	AL,[ES:BP]
 31622 0000559D A2[7605]                	MOV	[THISDRV],AL
 31623 000055A0 E889B0                  	call	GOTDPB			;Set THISDPB
 31624 000055A3 E86500                  	CALL	FAT_GOT_DPB
 31625 000055A6 5F                      	POP	DI			;Get back CDS pointer
 31626 000055A7 07                      	POP	ES
 31627 000055A8 72D8                    	jc	short fatread_sft_retn
 31628 000055AA 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 31629                                  
 31630                                  ;	Media changed. We now need to find all CDS structures which use this
 31631                                  ;	DPB and invalidate their ID pointers.
 31632                                  
 31633                                  MED_CHANGE:
 31634 000055AC 31C0                    	XOR	AX,AX
 31635 000055AE 48                      	DEC	AX			; AX = -1
 31636 000055AF 1E                      	PUSH	DS
 31637 000055B0 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 31638 000055B4 30ED                    	XOR	CH,CH			; CX is number of structures
 31639                                  	;lds	si,[es:di+45h]
 31640 000055B6 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 31641                                  
 31642                                  ;hkn; SS override
 31643                                  
 31644                                  ;	Find all CDSs with this DevPtr
 31645                                  ;
 31646                                  ;	(ax) = -1
 31647                                  ;	(ds:si) = DevPtr
 31648                                  
 31649 000055BA 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 31650                                  frcd20: 
 31651                                  	;;test	word [es:di+43h],8000h
 31652                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 31653 000055BF 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 31654 000055C4 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 31655                                  
 31656                                  	; MSDOS 3.3
 31657                                  	;push	es
 31658                                  	;push	di
 31659                                  	;les	di,[es:di+45h]
 31660                                  	;;les	di,[ES:DI+curdir.devptr]
 31661                                  	;call	POINTCOMP
 31662                                  	;pop	di
 31663                                  	;pop	es
 31664                                  	;jnz	short frcd25
 31665                                  
 31666                                  	; MSDOS 6.0
 31667 000055C6 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 31668 000055CA 7512                    	jne	short frcd25		; no match
 31669 000055CC 8CDB                    	mov	bx,ds
 31670 000055CE 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 31671 000055D2 750A                    	jne	short frcd25		; CDS not for this drive
 31672                                  
 31673                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31674                                  	;test	[es:di+49h],ax
 31675 000055D4 26854549                	test	[ES:DI+curdir.ID],AX
 31676 000055D8 7404                    	JZ	short frcd25		; If root (0), leave root
 31677                                  	;mov	[es:di+49h],ax
 31678 000055DA 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 31679                                  frcd25:	
 31680                                  	;;add	di,81  ; MSDOS 3.3
 31681                                  	;add	di,88  ; MSDOS 6.0	 
 31682 000055DE 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 31683 000055E1 E2DC                    	LOOP	frcd20
 31684 000055E3 1F                      	POP	DS
 31685                                  NO_CHANGE:
 31686 000055E4 C42E[8A05]              	LES	BP,[THISDPB]
 31687 000055E8 F8                      	CLC
 31688 000055E9 C3                      	retn
 31689                                  
 31690                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 31691                                  ;----------------------------------------------------------------------------
 31692                                  ;
 31693                                  ; Procedure Name : FAT_operation
 31694                                  ;
 31695                                  ;----------------------------------------------------------------------------
 31696                                  
 31697                                  	; 03/01/2024
 31698                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31699                                  
 31700                                  FAT_operation:
 31701                                  	; 31/07/2018 - Retro DOS v3.0
 31702                                  FATERR:
 31703                                  	;mov	word [es:bp+1Eh],-1
 31704                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 31705 000055EA 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 31706                                  					; Err in FAT must force recomp of freespace
 31707                                  	;and	di,0FFh
 31708 000055F0 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 31709                                  	;mov	byte [ALLOWED],18h
 31710 000055F4 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31711                                  	;mov	ah,1Ah
 31712 000055F9 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 31713 000055FB A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 31714 000055FE E816FC                  	call	FATAL1
 31715 00005601 C42E[8A05]              	LES	BP,[THISDPB]
 31716 00005605 3C03                    	CMP	AL,3
 31717 00005607 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 31718 00005609 F9                      	STC				; User said FAIL
 31719 0000560A C3                      	retn
 31720                                  
 31721                                  FAT_GOT_DPB:
 31722                                  	;Context DS			;hkn; SS is DOSDATA
 31723 0000560B 16                      	push	ss			
 31724 0000560C 1F                      	pop	ds
 31725                                  	;mov	al,0Fh
 31726 0000560D B00F                    	MOV	AL,DMEDHL
 31727                                  	;mov	ah,[es:bp+1]
 31728 0000560F 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 31729 00005613 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 31730 00005616 C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 31731 0000561B C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31732                                  	;;mov	al,[es:bp+16h]
 31733                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 31734 00005621 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31735 00005625 A2[6703]                	MOV	[CALLMED],AL
 31736 00005628 06                      	PUSH	ES
 31737 00005629 1E                      	PUSH	DS
 31738                                  
 31739                                  ;hkn; DEVCALL is in DOSDATA
 31740 0000562A BB[5A03]                	MOV	BX,DEVCALL
 31741                                  	;;lds	si,[es:bp+12h]
 31742                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 31743 0000562D 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 31744 00005631 07                      	POP	ES			; ES:BX Points to call header
 31745 00005632 E80AEF                  	call	DEVIOCALL2
 31746                                  	;Context DS		 	;hkn; SS is DOSDATA
 31747 00005635 16                      	push	ss
 31748 00005636 1F                      	pop	ds
 31749 00005637 07                      	POP	ES			; Restore ES:BP
 31750 00005638 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31751                                  	;test	di,8000h
 31752                                  	;jnz	short FATERR
 31753 0000563C 09FF                    	or	di,di
 31754 0000563E 78AA                    	js	short FATERR		; have error
 31755 00005640 30E4                    	XOR	AH,AH
 31756                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 31757                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 31758 00005642 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 31759 00005646 A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 31760                                  ; See if we had changed volume id by creating one on the diskette
 31761 00005649 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 31762 0000564D 7508                    	jnz	short CHECK_BYT
 31763 0000564F C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 31764 00005654 E9A300                  	jmp	GOGETBPB		; Need to get device driver to read in
 31765                                  					; new volume label.
 31766                                  CHECK_BYT:
 31767 00005657 0A26[6803]              	OR	AH,[CALLRBYT]
 31768                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31769                                  	;JMP	short NEWDSK
 31770                                  	; 17/12/2022
 31771 0000565B 7861                    	js	short NEWDSK
 31772                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31773                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31774                                  	;JMP	short NEWDSK
 31775                                  
 31776                                  CHECK_ZR:
 31777 0000565D 743B                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 31778                                  	; 24/09/2023
 31779                                  	; cf=0 (after 'or' instruction)
 31780                                  	;CLC
 31781 0000565F C3                      	retn				; If Media not changed (NZ)
 31782                                  
 31783                                  DISK_CHNG_ERR:
 31784 00005660 06                      	PUSH	ES
 31785 00005661 55                      	PUSH	BP
 31786                                  	;;les	bp,[es:bp+12h]
 31787                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 31788 00005662 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 31789                                  	;;test	word [es:bp+4],800h
 31790                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 31791 00005666 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 31792 0000566B 5D                      	POP	BP
 31793 0000566C 07                      	POP	ES
 31794                                  	;JZ	short FAIL_OPJ2		; Nope, FAIL
 31795                                  	; 03/03/2024
 31796 0000566D 7443                    	jz	short FAIL_OP
 31797 0000566F 1E                      	PUSH	DS			; Save buffer pointer for ignore
 31798 00005670 57                      	PUSH	DI
 31799 00005671 16                      	push	ss			;hkn; SS is DOSDATA
 31800 00005672 1F                      	pop	ds
 31801                                  	;mov	byte [ALLOWED],18h
 31802 00005673 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31803 00005678 06                      	PUSH	ES
 31804 00005679 C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 31805 0000567D 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 31806 00005681 07                      	POP	ES
 31807 00005682 893E[2803]              	MOV	[EXTERRPT],DI
 31808                                  	;mov	ax,0Fh
 31809 00005686 B80F00                  	MOV	AX,error_I24_wrong_disk
 31810 00005689 C606[7505]01            	MOV	byte [READOP],1		; Write
 31811                                  	;invoke	HARDERR
 31812 0000568E E834FB                  	call	HARDERR
 31813 00005691 5F                      	POP	DI			; Get back buffer for ignore
 31814 00005692 1F                      	POP	DS
 31815 00005693 3C03                    	CMP	AL,3
 31816                                  FAIL_OPJ2:
 31817 00005695 741B                    	JZ	short FAIL_OP
 31818 00005697 E971FF                  	JMP	FAT_GOT_DPB		; Retry
 31819                                  
 31820                                  CHKBUFFDIRT:
 31821                                  	; 20/05/2019 - Retro DOS v4.0
 31822                                  
 31823                                  	; MSDOS 3.3
 31824                                  	;lds	di,[BUFFHEAD]
 31825                                  
 31826                                  	; MSDOS 6.0
 31827                                  	;cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 31828                                  	; 03/03/2024
 31829                                  	; ds=ss
 31830                                  	;;;
 31831 0000569A 833E[7100]00            	cmp	word [DirtyBufferCount],0 ; (Win ME IO.SYS - BIOSCODE:0C7A7h)
 31832                                  	;;;
 31833 0000569F 741D                    	je	short NEWDSK			; no, skip the check
 31834 000056A1 E8EC00                  	call	GETCURHEAD			; get pointer to first buffer
 31835                                  nbuffer:
 31836                                  	;cmp	al,[di+4]
 31837 000056A4 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 31838 000056A7 750C                    	jne	short lfnxt			; no, go for next buffer
 31839                                  	;test   byte [di+5],40h
 31840 000056A9 F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 31841 000056AD 7406                    	jz	short lfnxt			; no, go for next buffer
 31842                                  
 31843                                  FAIL_OP2:	; 03/03/2024
 31844                                  	;Context DS
 31845 000056AF 16                      	push	ss
 31846 000056B0 1F                      	pop	ds
 31847                                  	; 24/09/2023
 31848                                  	; cf=0 (after 'test' instruction)
 31849                                  	;clc
 31850 000056B1 C3                      	retn
 31851                                  
 31852                                  FAIL_OP:					; This label & code is here
 31853                                  	;Context DS				;  for reachability
 31854                                  	;push	ss
 31855                                  	;pop	ds
 31856 000056B2 F9                      	STC
 31857                                  	; 03/03/2024
 31858                                  	;retn
 31859 000056B3 EBFA                    	jmp	short FAIL_OP2 ; cf=1
 31860                                  
 31861                                  lfnxt:
 31862                                  	; 15/08/2018 - Retro DOS v3.0
 31863                                  	; MSDOS 3.3
 31864                                  	;lds	di,[di]
 31865                                  
 31866                                  	; 20/05/2019 - Retro DOS v4.0
 31867 000056B5 8B3D                    	mov	di,[di]
 31868                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 31869                                  	
 31870                                  	; MSDOS 3.3
 31871                                  	;cmp	di,-1
 31872                                  	;jne	short nbuffer
 31873                                  	
 31874                                  	; MSDOS 6.0
 31875 000056B7 36393E[BB0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 31876 000056BC 75E6                    	jne	short nbuffer			; no, check this guy also
 31877                                  
 31878                                  ; If no dirty buffers, assume Media changed
 31879                                  NEWDSK:
 31880                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 31881                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 31882 000056BE 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 31883                                  						;  recompute
 31884                                  	; MSDOS 3.3
 31885                                  	;call	SETVISIT
 31886                                  	; MSDOS 6.0
 31887 000056C4 E8C900                  	call	 GETCURHEAD
 31888                                  nxbuffer:
 31889                                  	; MSDOS 3.3
 31890                                  	;or 	byte [di+5],20h
 31891                                  	; MSDOS 3.3 & MSDOS 6.0
 31892                                  	;cmp	[di+4],al
 31893 000056C7 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 31894 000056CA 7510                    	jne	short lfnxt2
 31895                                  	;test	byte [di+5],40h
 31896 000056CC F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31897 000056D0 758E                    	jnz	short DISK_CHNG_ERR
 31898                                  	;mov	word [di+4],20FFh
 31899 000056D2 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 31900 000056D7 E8C800                  	call	SCANPLACE
 31901                                  	; MSDOS 6.0
 31902 000056DA EB02                    	jmp	short skpbuff
 31903                                  lfnxt2:
 31904 000056DC 8B3D                    	mov	di,[di]
 31905                                  	;mov	di,[di+BUFFINFO.buf_next]
 31906                                  skpbuff:
 31907                                  	; MSDOS 6.0
 31908 000056DE 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 31909 000056E3 75E2                    	jne	short nxbuffer
 31910                                  
 31911 000056E5 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 31912 000056EB 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 31913 000056ED 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 31914 000056F2 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 31915 000056F4 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 31916                                  ;lfnxt2:
 31917                                  	; MSDOS 3.3
 31918                                  	;call	SKIPVISIT
 31919                                  	;jnz	short nxbuffer
 31920                                  GOGETBPB:
 31921                                  	; MSDOS 3.3 & MSDOS 6.0
 31922                                  	;;lds	di,[es:bp+12h]
 31923                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 31924 000056FA 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 31925                                  	; 20/05/2019
 31926                                  	;test	word [di+4],2000h
 31927                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 31928 000056FE F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 31929 00005702 7510                    	JNZ	short GETFREEBUF
 31930                                  	;context DS	    		;hkn; SS is DOSDATA
 31931 00005704 16                      	push	ss
 31932 00005705 1F                      	pop	ds
 31933 00005706 BB0200                  	MOV	BX,2
 31934 00005709 E8F1FC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 31935                                  FAIL_OPJ:
 31936                                  	;JC	short FAIL_OP
 31937                                  	; 03/03/2024
 31938 0000570C 72A1                    	jc	short FAIL_OP2 ; cf=1
 31939 0000570E C53E[E205]              	LDS	DI,[CURBUF]
 31940 00005712 EB13                    	JMP	SHORT GOTGETBUF
 31941                                  
 31942                                  GETFREEBUF:
 31943 00005714 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 31944 00005715 55                      	PUSH	BP
 31945                                  	; MSDOS 3.3
 31946                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 31947                                  	; MSDOS 6.0
 31948 00005716 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 31949                                  ;hkn; SS override
 31950 00005718 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 31951 0000571D E87000                  	call	GETCURHEAD		;LB.			  ;AN000;
 31952                                  	; MSDOS 3.3 & MSDOS 6.0
 31953 00005720 E84B02                  	call	BUFWRITE
 31954 00005723 5D                      	POP	BP
 31955 00005724 07                      	POP	ES
 31956                                  	;;JC	short FAIL_OPJ
 31957                                  	;jc	short FAIL_OP
 31958                                  	; 03/03/2024
 31959 00005725 7288                    	jc	short FAIL_OP2 ; cf=1
 31960                                  
 31961                                  GOTGETBUF:
 31962                                  	;;add	di,16
 31963                                  	;add	di,20 ; MSDOS 6.0
 31964 00005727 83C714                  	ADD	DI,BUFINSIZ
 31965                                  
 31966                                  ;hkn; SS override
 31967 0000572A 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 31968                                  	;Context DS			;hkn; SS is DOSDATA
 31969 0000572F 16                      	push	ss
 31970 00005730 1F                      	pop	ds
 31971 00005731 893E[6803]              	MOV	[CALLXAD],DI
 31972                                  	;mov	al,16h
 31973 00005735 B016                    	MOV	AL,DBPBHL
 31974                                  	;mov	ah,[es:bp+1]
 31975 00005737 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 31976 0000573B A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 31977 0000573E C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 31978 00005743 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31979                                  	;;mov	al,[es:bp+16h]
 31980                                  	;mov	al,[es:bp+17h]
 31981 00005749 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31982 0000574D A2[6703]                	MOV	[CALLMED],AL
 31983 00005750 06                      	PUSH	ES ; **
 31984 00005751 1E                      	PUSH	DS ; *
 31985                                  	;;
 31986                                  ; 03/01/2024
 31987                                  %if 0
 31988                                  	;;push	word [es:bp+14h]
 31989                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 31990                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 31991                                  	;;push	word [es:bp+12h]
 31992                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 31993                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 31994                                  
 31995                                  ;hkn; DEVCALL is in DOSDATA
 31996                                  	MOV	BX,DEVCALL
 31997                                  	POP	SI
 31998                                  	POP	DS			; DS:SI Points to device header
 31999                                  %endif
 32000                                  	; 03/01/2024
 32001 00005752 BB[5A03]                	mov	bx,DEVCALL
 32002                                  	;lds	si,[es:bp+13h]
 32003 00005755 26C57613                	lds	si,[es:bp+DPB.DRIVER_ADDR]
 32004                                  					; DS:SI Points to device header
 32005                                  	;;
 32006 00005759 07                      	POP	ES ; *			; ES:BX Points to call header
 32007                                  	;invoke	DEVIOCALL2
 32008 0000575A E8E2ED                  	call	DEVIOCALL2
 32009 0000575D 07                      	POP	ES ; **			; Restore ES:BP
 32010                                  	;Context DS
 32011 0000575E 16                      	push	ss		 	;hkn; SS is DOSDATA
 32012 0000575F 1F                      	pop	ds
 32013 00005760 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 32014                                  	; MSDOS 3.3
 32015                                  	;test	di,8000h
 32016                                  	;jnz	short FATERRJ
 32017                                  	; MSDOS 6.0
 32018 00005764 09FF                    	or	di,di
 32019 00005766 7825                    	js	short FATERRJ 		; have error
 32020                                  
 32021                                  ; 04/03/2024
 32022                                  %if 0
 32023                                  	;;mov	al,[es:bp+16h]
 32024                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 32025                                  	MOV	AL,[ES:BP+DPB.MEDIA]
 32026                                  %endif
 32027                                  
 32028 00005768 C536[6C03]              	LDS	SI,[CALLBPB]
 32029                                  	;;mov	word [es:bp+1Ch],0
 32030                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 32031 0000576C 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 32032                                  	;invoke	$SETDPB
 32033 00005772 E83EB8                  	call	_$SETDPB
 32034                                  
 32035                                  ;hkn; SS override
 32036 00005775 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 32037                                  	;mov	al,[es:bp+8]
 32038 0000577A 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 32039                                  
 32040                                  	; MSDOS 3.3
 32041                                  	;;mov	ah,[es:bp+0Fh]
 32042                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 32043                                  	;;mov	[DI-8],ax
 32044                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 32045                                  
 32046                                  	; MSDOS 6.0
 32047                                  	;mov	[di-0Ah],al
 32048 0000577E 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 32049                                  						;>32mb		  ;AN000;
 32050                                  	;mov	ax,[es:bp+0Fh]
 32051 00005781 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 32052                                  	;mov	[di-9h],ax			  ;AC000;
 32053 00005785 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 32054                                  					;>32mb Correct buffer info ;AC000;
 32055                                  	;Context DS			;hkn; SS is DOSDATA
 32056 00005788 16                      	push	ss
 32057 00005789 1F                      	pop	ds
 32058 0000578A 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 32059 0000578C C3                      	retn
 32060                                  
 32061                                  FATERRJ: 
 32062 0000578D E95AFE                  	JMP	FATERR
 32063                                  
 32064                                  ;============================================================================
 32065                                  ; STDBUF.ASM
 32066                                  ;============================================================================
 32067                                  ; Retro DOS v2.0 - 12/03/2018
 32068                                  
 32069                                  ;
 32070                                  ; Standard buffer management for MSDOS
 32071                                  ;
 32072                                  
 32073                                  ;.xlist
 32074                                  ;.xcref
 32075                                  ;INCLUDE STDSW.ASM
 32076                                  ;.cref
 32077                                  ;.list
 32078                                  
 32079                                  ;TITLE	STDBUF - MSDOS buffer management
 32080                                  ;NAME	STDBUF
 32081                                  
 32082                                  ;INCLUDE BUF.ASM
 32083                                  
 32084                                  ;============================================================================
 32085                                  ; BUF.ASM
 32086                                  ;============================================================================
 32087                                  ; 31/07/2018 - Retro DOS v3.0
 32088                                  ; Retro DOS v2.0 - 12/03/2018
 32089                                  ;
 32090                                  ; buffer management for MSDOS
 32091                                  ;
 32092                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 32093                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 32094                                  ;
 32095                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 32096                                  ;
 32097                                  ;SETVISIT:
 32098                                  ;	; 31/07/2018 - Retro DOS v3.0
 32099                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 32100                                  ;; Inputs:
 32101                                  ;;      None
 32102                                  ;; Function:
 32103                                  ;;      Set up a scan of I/O buffers
 32104                                  ;; Outputs:
 32105                                  ;;      All visit flags = 0
 32106                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 32107                                  ;;                    may cause a scan to stop in the middle leaving some
 32108                                  ;;                    visit flags set, and some not set.
 32109                                  ;;      DS:DI Points to [BUFFHEAD]
 32110                                  ;; No other registers altered
 32111                                  ;
 32112                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 32113                                  ;	PUSH    AX
 32114                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 32115                                  ;	;mov	al,0DFh
 32116                                  ;	mov	al,~buf_visit
 32117                                  ;SETLOOP:
 32118                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 32119                                  ;	;and	[DI+5],al
 32120                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 32121                                  ;       LDS     DI,[DI]
 32122                                  ;       CMP     DI,-1
 32123                                  ;       JNZ     SHORT SETLOOP
 32124                                  ;       POP     AX ; 09/09/2018
 32125                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 32126                                  ;SVISIT_RETN:
 32127                                  ;       RETN
 32128                                  ;
 32129                                  ;SKIPVISIT:
 32130                                  ;	; 31/07/2018 - Retro DOS v3.0
 32131                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 32132                                  ;
 32133                                  ;; Inputs:
 32134                                  ;;      DS:DI Points to a buffer
 32135                                  ;; Function:
 32136                                  ;;      Skip visited buffers
 32137                                  ;; Outputs:
 32138                                  ;;      DS:DI Points to next unvisited buffer
 32139                                  ;;      Zero is set if skip to LAST buffer
 32140                                  ;; No other registers altered
 32141                                  ;
 32142                                  ;       CMP     DI,-1
 32143                                  ;       ;retz
 32144                                  ;       JZ	SHORT SVISIT_RETN
 32145                                  ;
 32146                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 32147                                  ;       ;;;retnz
 32148                                  ;       ;;JNZ	SHORT SVISIT_RETN
 32149                                  ;
 32150                                  ;	;test	byte [di+5],20h
 32151                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 32152                                  ;	JNZ	short SKIPLOOP
 32153                                  ;	
 32154                                  ;	push	ax
 32155                                  ;	or	al,1
 32156                                  ;	pop	ax
 32157                                  ;	retn	
 32158                                  ;
 32159                                  ;SKIPLOOP:
 32160                                  ;	LDS     DI,[DI]
 32161                                  ;       JMP     SHORT SKIPVISIT
 32162                                  
 32163                                  ;============================================================================
 32164                                  ; BUF.ASM, MSDOS 6.0, 1991
 32165                                  ;============================================================================
 32166                                  ; 31/07/2018 - Retro DOS v3.0
 32167                                  ; 04/05/2019 - Retro DOS v4.0
 32168                                  
 32169                                  ;	TITLE	BUF - MSDOS buffer management
 32170                                  ;	NAME	BUF
 32171                                  
 32172                                  ;**	BUF.ASM - Low level routines for buffer cache management
 32173                                  ;
 32174                                  ;	GETCURHEAD
 32175                                  ;	ScanPlace
 32176                                  ;	PLACEBUF
 32177                                  ;	PLACEHEAD
 32178                                  ;	PointComp
 32179                                  ;	GETBUFFR
 32180                                  ;	GETBUFFRB
 32181                                  ;	FlushBuf
 32182                                  ;	BufWrite
 32183                                  ;	SET_RQ_SC_PARMS
 32184                                  ;
 32185                                  ;	Revision history:
 32186                                  ;
 32187                                  ;		AN000  version 4.00  Jan. 1988
 32188                                  ;		A004   PTM 3765 -- Disk reset failed
 32189                                  ;		M039 DB 10/17/90 - Disk write optimization
 32190                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 32191                                  
 32192                                  ;Break	<GETCURHEAD -- Get current buffer header>
 32193                                  ;----------------------------------------------------------------------------
 32194                                  ; Procedure Name : GetCurHead
 32195                                  ; Inputs:
 32196                                  ;	 No Inputs
 32197                                  ; Function:
 32198                                  ;	Returns the pointer to the first buffer in Queue
 32199                                  ;	and updates FIRST_BUFF_ADDR
 32200                                  ;       and invalidates LASTBUFFER (recency pointer)
 32201                                  ; Outputs:
 32202                                  ;	DS:DI = pointer to the first buffer in Queue
 32203                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 32204                                  ;       LASTBUFFER = -1
 32205                                  ; No other registers altered
 32206                                  ;----------------------------------------------------------------------------
 32207                                  
 32208                                  ; 04/05/2019 - Retro DOS v4.0
 32209                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 32210                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32211                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 32212                                  
 32213                                  GETCURHEAD:
 32214 00005790 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 32215 00005795 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 32216 0000579C 36893E[BB0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 32217 000057A1 C3                      	retn
 32218                                  
 32219                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 32220                                  ;----------------------------------------------------------------------------
 32221                                  ; Procedure Name : ScanPlace
 32222                                  ; Inputs:
 32223                                  ;	Same as PLACEBUF
 32224                                  ; Function:
 32225                                  ;	Save scan location and call PLACEBUF
 32226                                  ; Outputs:
 32227                                  ;	DS:DI Points to saved scan location
 32228                                  ; All registers, except DS:DI, preserved.
 32229                                  ;----------------------------------------------------------------------------
 32230                                  ;M039: Rewritten to preserve registers.
 32231                                  
 32232                                  ;SCANPLACE:
 32233                                  ;	; 31/07/2018 - Retro DOS v3.0
 32234                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 32235                                  ;	push	es
 32236                                  ;	les	si,[di]
 32237                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 32238                                  ;	call	PLACEBUF
 32239                                  ;	push	es
 32240                                  ;	pop	ds
 32241                                  ;	mov	di,si
 32242                                  ;	pop	es
 32243                                  ;scanplace_retn:
 32244                                  ;	retn	
 32245                                  	
 32246                                  	; MSDOS 6.0
 32247                                  SCANPLACE:
 32248 000057A2 FF35                    	push	word [di]
 32249                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 32250 000057A4 E80200                  	call	PLACEBUF
 32251 000057A7 5F                      	pop	di
 32252 000057A8 C3                      	retn
 32253                                  
 32254                                  ;----------------------------------------------------------------------------
 32255                                  ; Procedure Name : PlaceBuf
 32256                                  ; Input:
 32257                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 32258                                  ; Function:
 32259                                  ;	Remove buffer from queue and re-insert it in proper place.
 32260                                  ; NO registers altered
 32261                                  ;----------------------------------------------------------------------------
 32262                                  
 32263                                  ;procedure PLACEBUF,NEAR
 32264                                  
 32265                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32266                                  	; 20/05/2019 - Retro DOS v4.0
 32267                                  PLACEBUF:
 32268                                  	; 31/07/2018 - Retro DOS v3.0
 32269                                  
 32270                                  	; MSDOS 6.0
 32271 000057A9 50                      	push	AX			;Save only regs we modify	;AN000;
 32272 000057AA 53                      	push	BX							;AN000;
 32273                                  	; 23/09/2023
 32274                                  	;push	SI							;AN000;
 32275                                  	
 32276 000057AB 8B05                    	mov	ax,[di]
 32277                                  	;mov	ax,[di+BUFFINFO.buf_next]
 32278 000057AD 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 32279                                  	
 32280 000057B2 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 32281 000057B4 7422                    	je	short nret			;Yes, special case	;AN000;
 32282 000057B6 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 32283 000057B8 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 32284 000057BA 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 32285 000057BE EB18                    	jmp	short nret 			;Continue with repositioning;AN000;
 32286                                  not_first:
 32287                                  	; 23/09/2023
 32288 000057C0 56                      	push	si
 32289                                  	;mov	si,[di+2]
 32290 000057C1 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 32291 000057C4 8904                    	mov	[si],ax
 32292                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 32293 000057C6 96                      	xchg	si,ax
 32294                                  	;mov	[si+2],ax
 32295 000057C7 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 32296                                  	
 32297 000057CA 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 32298 000057CD 893C                    	mov	[si],di
 32299                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 32300 000057CF 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 32301 000057D2 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 32302 000057D5 891D                    	mov	[di],bx
 32303                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 32304                                  	; 23/09/2023
 32305 000057D7 5E                      	pop	si
 32306                                  nret:	
 32307                                  	; 23/09/2023							;AN000;
 32308                                  	;pop	SI							;AN000;
 32309 000057D8 5B                      	pop	BX							;AN000;
 32310 000057D9 58                      	pop	AX							;AN000;
 32311                                  									;AN000;
 32312                                  	;cmp	byte [di+4],0FFh
 32313 000057DA 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 32314 000057DE 7505                            jne	short pbx			; M039: -no, jump.
 32315 000057E0 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 32316                                  pbx:	
 32317 000057E5 C3                      	retn								;AN000;
 32318                                  
 32319                                  	; 31/07/2018 - Retro DOS v3.0
 32320                                  
 32321                                  	; MSDOS 3.3
 32322                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 32323                                  
 32324                                  ;PLACEBUF:
 32325                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 32326                                  ;	
 32327                                  ;       CALL	save_world
 32328                                  ;       LES     CX,[DI]
 32329                                  ;       CMP     CX,-1           	; Buf is LAST?
 32330                                  ;       JZ      SHORT NRET		; Buffer already last
 32331                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 32332                                  ;       PUSH    DS
 32333                                  ;       POP     ES              	; Buf is ES:DI
 32334                                  ;	; 15/03/2018
 32335                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 32336                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 32337                                  ;       JNZ     SHORT BUFLOOP
 32338                                  ;       MOV     [SS:BUFFHEAD],CX
 32339                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 32340                                  ;       JMP     SHORT LOOKEND
 32341                                  ;BUFLOOP:
 32342                                  ;	; 31/07/2018
 32343                                  ;	mov	ax,ds
 32344                                  ;	mov	bx,si
 32345                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 32346                                  ;       LDS     SI,[SI]
 32347                                  ;       CALL    POINTCOMP
 32348                                  ;       jnz	short BUFLOOP
 32349                                  ;	;
 32350                                  ;	mov	ds,ax
 32351                                  ;	mov	si,bx
 32352                                  ;	mov	[SI],cx
 32353                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 32354                                  ;	mov	[SI+2],bp
 32355                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 32356                                  ;LOOKEND:
 32357                                  ;	mov	ax,ds
 32358                                  ;	mov	bx,si
 32359                                  ;       LDS     SI,[SI]
 32360                                  ;       CMP     SI,-1
 32361                                  ;       jnz     short LOOKEND
 32362                                  ;GOTHEEND:
 32363                                  ;       mov	ds,ax
 32364                                  ;	mov	[BX],di
 32365                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 32366                                  ;       MOV     WORD [ES:DI],-1
 32367                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 32368                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 32369                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 32370                                  ;NRET:
 32371                                  ;       CALL	restore_world
 32372                                  ;	
 32373                                  ;	;cmp	byte [di+4],-1
 32374                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 32375                                  ;	jnz     short scanplace_retn
 32376                                  ;	call    PLACEHEAD
 32377                                  ;	retn
 32378                                  
 32379                                  ;EndProc PLACEBUF
 32380                                  
 32381                                  ;M039 - Removed PLACEHEAD.
 32382                                  ;----------------------------------------------------------------------------
 32383                                  ; places buffer at head
 32384                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 32385                                  ;	ONE IN THE LIST!!!!!!!
 32386                                  ; BUGBUG ---- this routine can be removed because it has only
 32387                                  ; BUGBUG ---- one instruction. This routine is called from
 32388                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 32389                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 32390                                  ; BUGBUG ---- But kept as it is for modularity
 32391                                  ;----------------------------------------------------------------------------
 32392                                  ;procedure   PLACEHEAD,NEAR
 32393                                  ;	mov	word ptr [BufferQueue], di
 32394                                  ;	ret
 32395                                  ;EndProc PLACEHEAD
 32396                                  ;M039
 32397                                  
 32398                                  ;----------------------------------------------------------------------------
 32399                                  ; Procedure Name : PLACEHEAD
 32400                                  ;
 32401                                  ; SAME AS PLACEBUF except places buffer at head
 32402                                  ;----------------------------------------------------------------------------
 32403                                  
 32404                                  	; MSDOS 3.3 (Retro DOS v3.0)
 32405                                  	; 05/09/2018
 32406                                  	; MSDOS 2.11 (Retro DOS v2.0)
 32407                                  ;PLACEHEAD:
 32408                                  ;	; 31/07/2018 - Retro DOS v3.0
 32409                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 32410                                  ;
 32411                                  ;       CALL	save_world
 32412                                  ;       PUSH	DS
 32413                                  ;       POP	ES
 32414                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 32415                                  ;       LDS     SI,[SS:BUFFHEAD]
 32416                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 32417                                  ;	CALL    POINTCOMP
 32418                                  ;       JZ      SHORT GOTHEEND2
 32419                                  ;	MOV	[ES:DI],SI
 32420                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 32421                                  ;       MOV	[ES:DI+2],DS
 32422                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 32423                                  ;       MOV	[SS:BUFFHEAD],DI
 32424                                  ;       MOV	[SS:BUFFHEAD+2],ES
 32425                                  ;LOOKEND2:
 32426                                  ;       mov	ax,ds
 32427                                  ;	mov	bx,si
 32428                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 32429                                  ;       LDS     SI,[SI]
 32430                                  ;       CALL    POINTCOMP
 32431                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 32432                                  ;       mov	ds,ax
 32433                                  ;	mov	word [bx],-1
 32434                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 32435                                  ;	mov	word [bx+2],-1
 32436                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 32437                                  ;GOTHEEND2:
 32438                                  ;      	call	restore_world
 32439                                  ;placehead_retn:
 32440                                  ;	retn
 32441                                  
 32442                                  ; 20/05/2019 - Retro DOS v4.0
 32443                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 32444                                  
 32445                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 32446                                  ;----------------------------------------------------------------------------
 32447                                  ;
 32448                                  ; Procedure Name : PointComp
 32449                                  ; Inputs:
 32450                                  ;         DS:SI & ES:DI
 32451                                  ; Function:
 32452                                  ;          Checks for ((SI==DI) && (ES==DS))
 32453                                  ;	   Assumes that pointers are normalized for the
 32454                                  ;	   same segment
 32455                                  ;
 32456                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 32457                                  ; DO NOT USE FOR < or >
 32458                                  ; No Registers altered
 32459                                  ;
 32460                                  ;----------------------------------------------------------------------------
 32461                                  
 32462                                  POINTCOMP:
 32463                                  	; 31/07/2018 - Retro DOS v3.0
 32464                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 32465 000057E6 39FE                    	CMP	SI,DI
 32466 000057E8 750A                    	jnz	short _ret_label	; return if nz
 32467                                  	;jnz	short placehead_retn 
 32468 000057EA 51                      	PUSH	CX
 32469 000057EB 52                      	PUSH	DX
 32470 000057EC 8CD9                    	MOV	CX,DS
 32471 000057EE 8CC2                    	MOV	DX,ES
 32472 000057F0 39D1                    	CMP	CX,DX
 32473 000057F2 5A                      	POP	DX
 32474 000057F3 59                      	POP	CX
 32475                                  _ret_label:
 32476 000057F4 C3                      	retn
 32477                                  
 32478                                  ; 01/08/2018 - Retro DOS v3.0
 32479                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 32480                                  
 32481                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 32482                                  
 32483                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 32484                                  ;----------------------------------------------------------------------------
 32485                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 32486                                  ;	It gets the specified local sector into one of the I/O buffers
 32487                                  ;	and shuffles the queue
 32488                                  ; 
 32489                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32490                                  ;		       ELSE no pre-read
 32491                                  ;		(DX) = Desired physical sector number	      (LOW)
 32492                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32493                                  ;		(ES:BP) = Pointer to drive parameters
 32494                                  ;		ALLOWED set in case of INT 24
 32495                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32496                                  ;		'C' clear if OK
 32497                                  ;		CURBUF Points to the Buffer for the sector
 32498                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32499                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32500                                  ;----------------------------------------------------------------------------
 32501                                  
 32502                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 32503                                  ;----------------------------------------------------------------------------
 32504                                  ;	GetBuffrb reads a sector from the FAT file system's FAT table.
 32505                                  ;	It gets the specified sector into one of the I/O buffers
 32506                                  ;	and shuffles the queue. We need a special entry point so that
 32507                                  ;	we can read the alternate FAT sector if the first read fails, also
 32508                                  ;	so we can mark the buffer as a FAT sector.
 32509                                  ; 
 32510                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32511                                  ;		       ELSE no pre-read
 32512                                  ;		(DX) = Desired physical sector number	     (LOW)
 32513                                  ;		(SI) != 0
 32514                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32515                                  ;		(ES:BP) = Pointer to drive parameters
 32516                                  ;		ALLOWED set in case of INT 24
 32517                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32518                                  ;		'C' clear if OK
 32519                                  ;		CUR ddBUF Points to the Buffer for the sector
 32520                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32521                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32522                                  ;----------------------------------------------------------------------------
 32523                                  
 32524                                  	; 22/09/2023 - RetroDOS v4.1 MSDOS.SYS (optimization)
 32525                                  GETBUFFRC:
 32526 000057F5 C706[0706]0000          	mov	word [HIGH_SECTOR],0
 32527                                  GETBUFFRA:
 32528 000057FB 30C0                    	xor	al,al
 32529 000057FD BE0100                  	mov	si,1
 32530 00005800 EB09                    	jmp	short GETBUFFRB
 32531                                  
 32532                                  	; 22/09/2023
 32533                                  GETBUFFER:
 32534 00005802 30C0                    	xor	al,al
 32535                                  GETBUFFRD:
 32536                                  	;mov	byte [ALLOWED],18h
 32537 00005804 C606[4B03]18            	mov	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 32538                                  
 32539                                  	; 20/05/2019 - Retro DOS v4.0
 32540                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 32541                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32542                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 32543                                  GETBUFFR:
 32544 00005809 31F6                    	XOR	SI,SI
 32545                                  
 32546                                  ;	This entry point is called for FAT buffering with SI != 0
 32547                                  
 32548                                  GETBUFFRB:
 32549 0000580B A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 32550                                  	; 15/12/2022
 32551 0000580E 268A4600                	mov	al,[ES:BP]
 32552                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32553                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 32554 00005812 C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 32555                                  	; MSDOS 6.0
 32556                                  ;hkn; SS override
 32557 00005816 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb	;AN000;
 32558                                  
 32559                                  ;	See if this is the buffer that was most recently returned.
 32560                                  ;	A big performance win if it is.
 32561                                  
 32562 0000581B 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 32563 0000581E 7412                    	je	short getb5			; No
 32564                                  	;cmp	dx,[di+6]
 32565 00005820 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32566 00005823 750D                    	JNZ	short getb5			; Wrong sector
 32567                                  	
 32568                                  	; MSDOS 6.0
 32569                                  	;cmp	cx,[di+8]
 32570 00005825 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb	;AN000;
 32571 00005828 7508                    	JNZ	short getb5			; F.C. >32mb	;AN000;
 32572                                  	
 32573                                  	;cmp	al,[di+4]
 32574 0000582A 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32575                                  	;JZ	getb35				; Just asked for same buffer
 32576 0000582D 7503                    	jnz	short getb5
 32577                                  	;jmp	getb35
 32578                                  	; 17/12/2022
 32579                                  	; 28/07/2019
 32580 0000582F E9C700                  	jmp	getb35x
 32581                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32582                                  	;jmp	getb35
 32583                                  
 32584                                  ;	It's not the buffer most recently returned. See if it's in the
 32585                                  ;	cache.
 32586                                  ;
 32587                                  ;	(cx:dx) = sector #
 32588                                  ;	(al) = drive #
 32589                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32590                                  ;	??? list may be incomplete ???
 32591                                  
 32592                                  getb5:	
 32593                                  	; MSDOS 3.3
 32594                                  	;lds	di,[SS:BUFFHEAD]
 32595                                  	; MSDOS 6.0
 32596 00005832 E85BFF                  	CALL	GETCURHEAD			; get Q Head
 32597                                  getb10:	
 32598                                  	;cmp	dx,[di+6]
 32599 00005835 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32600 00005838 750D                    	jne	short getb12			; wrong sector lo
 32601                                  	
 32602                                  	; MSDOS 6.0
 32603                                  	;cmp	cx,[di+8]
 32604 0000583A 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 32605 0000583D 7508                    	jne	short getb12			; wrong sector hi
 32606                                  	
 32607                                  	;cmp	al,[di+4]
 32608 0000583F 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32609                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 32610 00005842 7503                    	jne	short getb12
 32611 00005844 E98C00                  	jmp	getb25
 32612                                  getb12:	
 32613                                  	; MSDOS 3.3
 32614                                  	;;mov	di,[DI]
 32615                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 32616                                  	;
 32617                                  	; 15/08/2018
 32618                                  	;lds	di,[di]
 32619                                  
 32620                                  	;cmp	di,-1 ; 0FFFFh
 32621                                  	;jne	short getb10
 32622                                  	;lds	di,[SS:BUFFHEAD]
 32623                                  
 32624                                  	; MSDOS 6.0
 32625 00005847 8B3D                    	mov	di,[di]
 32626                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 32627 00005849 363B3E[BB0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 32628 0000584E 75E5                    	jne	short getb10			; no, continue looking
 32629                                  
 32630                                  ;	The requested sector is not available in the buffers. DS:DI now points
 32631                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 32632                                  ;	new sector into it.
 32633                                  ;
 32634                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 32635                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 32636                                  ;	him, we should take LRU. And the above lookup shouldn't be
 32637                                  ;	down a chain, but should be hashed.
 32638                                  ;
 32639                                  ;	(DS:DI) = first buffer in the queue
 32640                                  ;	(CX:DX) = sector # we want
 32641                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32642                                  
 32643                                  	; MSDOS 3.3 & MSDOS 6.0
 32644                                  ;hkn; SS override
 32645 00005850 51                      	PUSH	CX  ; MSDOS 6.0
 32646 00005851 56                      	push	si
 32647 00005852 52                      	push	dx
 32648 00005853 55                      	push	bp
 32649 00005854 06                      	push	es
 32650 00005855 E81601                  	CALL	BUFWRITE			; Write out the dirty buffer
 32651 00005858 07                      	pop	es
 32652 00005859 5D                      	pop	bp
 32653 0000585A 5A                      	pop	dx
 32654 0000585B 5E                      	pop	si
 32655 0000585C 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 32656                                  	;jc	short getbx			; if got hard error
 32657 00005861 7303                    	jnc	short getb13
 32658 00005863 E99D00                  	jmp	getbx
 32659                                  
 32660                                  getb13:
 32661                                  	; MSDOS 6.0
 32662 00005866 E88C01                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 32663                                  
 32664                                  ;	We're ready to read in the buffer, if need be. If the caller
 32665                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 32666                                  
 32667 00005869 30E4                    	XOR	AH,AH				; initial flags
 32668                                  ;hkn; SS override
 32669                                  	;test	byte [ss:PREREAD],0FFh
 32670                                  	;jnz	short getb20
 32671 0000586B 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 32672 00005870 7549                    	JNZ	short getb20			; no, we're done
 32673                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 32674                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32675 00005872 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 32676                                  	;MOV	CX,1
 32677                                  	; 22/09/2023
 32678 00005875 29C9                    	sub	cx,cx ; 0
 32679 00005877 56                      	push	si
 32680 00005878 57                      	push	di
 32681 00005879 52                      	push	dx
 32682                                  	; MSDOS 6.0
 32683 0000587A 06                      	push	es ; ***
 32684                                  
 32685                                  ; Note: As far as I can tell, all disk reads into buffers go through
 32686                                  ;	this point. -mrw 10/88
 32687                                  	
 32688                                  	;cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 32689                                  	; 22/09/2023
 32690 0000587B 36380E[7900]            	cmp	[ss:BuffInHMA],cl ; 0
 32691 00005880 7407                    	jz	short getb14
 32692 00005882 1E                      	push	ds ; **
 32693 00005883 53                      	push	bx ; *
 32694 00005884 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 32695                                  getb14:
 32696                                  ;M039: Eliminated redundant HMA code.
 32697                                  
 32698                                  	; 22/09/2023
 32699 00005889 41                      	inc	cx ; cx = 1
 32700                                  
 32701                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32702 0000588A 09F6                    	OR	SI,SI			; FAT sector ?
 32703 0000588C 7407                    	JZ	short getb15		
 32704                                  
 32705 0000588E E871DD                  	call	FATSECRD
 32706                                  	;mov	ah,2
 32707 00005891 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 32708                                  
 32709 00005893 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 32710                                  
 32711                                  getb15:
 32712 00005895 E896DD                  	call	DREAD			; Buffer is marked free if read barfs
 32713 00005898 B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 32714                                  getb17:
 32715                                  	; 17/12/2022	
 32716                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32717                                  ;%if 0
 32718                                  	; MSDOS 6.0							  ;I001
 32719 0000589A 9C                      	pushf								  ;I001
 32720 0000589B 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 32721 000058A1 7411                    	jz	short not_in_hma	; no				  ;I001
 32722                                  	;mov	cx,[es:bp+2]
 32723 000058A3 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 32724 000058A7 D1E9                    	shr	cx,1							  ;I001
 32725 000058A9 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 32726 000058AA 89DE                    	mov	si,bx							  ;I001
 32727 000058AC 5F                      	pop	di ; *							  ;I001
 32728 000058AD 07                      	pop	es ; **							  ;I001
 32729 000058AE FC                      	cld								  ;I001
 32730 000058AF 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 32731 000058B0 F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 32732 000058B2 06                      	push	es							  ;I001
 32733 000058B3 1F                      	pop	ds							  ;I001
 32734                                  ;%endif
 32735                                  
 32736                                  ; 17/12/2022
 32737                                  %if 0
 32738                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32739                                  	; MSDOS 5.0
 32740                                  	pushf
 32741                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 32742                                  	jz	short not_in_hma	; no
 32743                                  	popf
 32744                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 32745                                  	shr	cx,1
 32746                                  	mov	si,bx
 32747                                  	pop	di ; *
 32748                                  	pop	es ; **
 32749                                  	cld
 32750                                  	rep	movsw
 32751                                  	push	es
 32752                                  	pop	ds
 32753                                  	jmp	short getb19 ; 27/11/2022
 32754                                  %endif
 32755                                  
 32756                                  not_in_hma:								  ;I001
 32757 000058B4 9D                      	popf							 	  ;I001
 32758                                  getb19:
 32759 000058B5 07                      	pop	es ; ***
 32760 000058B6 5A                      	pop	dx
 32761 000058B7 5F                      	pop	di
 32762 000058B8 5E                      	pop	si
 32763 000058B9 7248                    	JC	short getbx
 32764                                  
 32765                                  ;	The buffer has the data setup in it (if we were to read)
 32766                                  ;	Setup the various buffer fields
 32767                                  ;
 32768                                  ;	(ds:di) = buffer address
 32769                                  ;	(es:bp) = DPB address
 32770                                  ;	(HIGH_SECTOR:DX) = sector #
 32771                                  ;	(ah) = BUF_FLAGS value
 32772                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 32773                                  
 32774                                  ;hkn; SS override
 32775                                  getb20:	; MSDOS 6.0
 32776 000058BB 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 32777                                  	;mov	[di+8],cx
 32778 000058C0 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 32779                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 32780                                   	;mov	[di+6],dx
 32781 000058C3 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 32782                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 32783                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 32784 000058C6 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 32785                                  	;;mov	[di+0Ch],es
 32786                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 32787 000058C9 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 32788                                  	; 15/12/2022
 32789 000058CC 268A4600                	mov	al,[es:bp]
 32790                                  	;mov	al,[es:bp+0]
 32791                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 32792                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 32793                                  	;mov	[di+4],ax
 32794 000058D0 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 32795                                  getb25:	
 32796                                  	; MSDOS 3.3
 32797                                  	;mov     ax,1
 32798                                  
 32799                                  	; MSDOS 6.0
 32800                                  	;mov	byte [di+0Ah],1
 32801 000058D3 C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 32802 000058D7 31C0                    	XOR	AX,AX
 32803                                  
 32804                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32805 000058D9 09F6                    	OR	SI,SI				; FAT sector ?
 32806 000058DB 740B                    	JZ	short getb30
 32807                                  
 32808                                  	;mov	al,[es:bp+8]
 32809 000058DD 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 32810                                  	
 32811                                  	; MSDOS 6.0
 32812 000058E1 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 32813                                  	;mov	ax,[es:bp+0Fh]
 32814 000058E4 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 32815                                  						;  sectors
 32816                                  	; MSDOS 3.3
 32817                                  	;;mov	ah,[es:bp+0Fh]
 32818                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 32819                                  
 32820                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 32821                                  ;		is set
 32822                                  
 32823                                  getb30:	
 32824                                  	; MSDOS 6.0
 32825                                  	;mov	[di+0Bh],ax
 32826 000058E8 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 32827                                  
 32828                                  	; MSDOS 3.3
 32829                                  	;;mov	[di+8],ax ; 15/08/2018	
 32830                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 32831                                  
 32832 000058EB E8BBFE                  	CALL	PLACEBUF
 32833                                  
 32834                                  ;hkn; SS override for next 4
 32835                                  getb35: 
 32836                                  	; 17/12/2022
 32837                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32838                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 32839                                  	;MOV	[SS:CURBUF+2],DS
 32840                                  	;MOV	[SS:LastBuffer+2],DS
 32841                                  	;MOV	[SS:CURBUF],DI
 32842                                  	;MOV	[SS:LastBuffer],DI
 32843                                  	;CLC
 32844                                  
 32845                                  	; 17/12/2022
 32846                                  	; 07/12/2022
 32847                                  	; Retro DOS v4.0
 32848 000058EE 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 32849 000058F3 36893E[1E00]            	mov	[ss:LastBuffer],di
 32850 000058F8 F8                      	clc
 32851                                  getb35x: ; 28/07/2019
 32852 000058F9 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 32853 000058FE 36893E[E205]            	MOV	[ss:CURBUF],di
 32854                                  
 32855                                  ;	Return with 'C' set appropriately
 32856                                  ;	(dx) = caller's original value
 32857                                  
 32858                                  getbx:	
 32859 00005903 16                      	push	ss
 32860 00005904 1F                      	pop	ds
 32861                                  	;retn
 32862                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32863                                  getbuffrb_retn:
 32864                                  ;flushbuf_retn:	; 17/12/2022
 32865 00005905 C3                      	retn
 32866                                  
 32867                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 32868                                  ;----------------------------------------------------------------------------
 32869                                  ; Input:
 32870                                  ;	DS = DOSGROUP
 32871                                  ;	AL = Physical unit number local buffers only
 32872                                  ;	   = -1 for all units and all remote buffers
 32873                                  ; Function:
 32874                                  ;	Write out all dirty buffers for unit, and flag them as clean
 32875                                  ;	Carry set if error (user FAILed to I 24)
 32876                                  ;	    Flush operation completed.
 32877                                  ; DS Preserved, all others destroyed (ES too)
 32878                                  ;----------------------------------------------------------------------------
 32879                                  
 32880                                  	; 20/05/2019 - Retro DOS v4.0
 32881                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 32882                                  
 32883                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32884                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 32885                                  FLUSHBUF:
 32886                                  	; MSDOS 3.3
 32887                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 32888                                  	;lds	di,[BUFFHEAD]
 32889                                  
 32890                                  	; MSDOS 6.0
 32891 00005906 E887FE                  	call	GETCURHEAD
 32892                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32893 00005909 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32894 0000590F 7508                    	jnz	short scan_buf_queue
 32895 00005911 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 32896 00005917 7423                    	je	short end_scan
 32897                                  	
 32898                                  scan_buf_queue:
 32899 00005919 E82900                  	call	CHECKFLUSH
 32900                                  	;push	ax  ; MSDOS 3.3
 32901                                  	; MSDOS 6.0
 32902                                  	;mov	ah,[di+4]
 32903 0000591C 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 32904 0000591F 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 32905 00005924 7408                    	je	short free_the_buf
 32906                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32907 00005926 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32908 0000592C 7405                    	jz	short dont_free_the_buf
 32909                                  	; MSDOS 3.3
 32910                                  	;;mov	al,[di+4]
 32911                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 32912                                  	;cmp	[SS:WPERR],al					;hkn;
 32913                                  	; 15/08/2018
 32914                                  	;jne	short dont_free_the_buf	
 32915                                  free_the_buf:
 32916                                  	; MSDOS 6.0 (& MSDOS 3.3)
 32917 0000592E C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 32918                                  dont_free_the_buf:
 32919                                  	;pop	ax  ; MSDOS 3.3 	   	
 32920                                  
 32921                                  	; MSDOS 3.3
 32922                                  	;mov	di,[DI]
 32923                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 32924                                  	;
 32925                                  	; 15/08/2018
 32926                                  	;lds	di,[di]
 32927                                  	;
 32928                                  	;cmp	di,-1 ; 0FFFFh
 32929                                  	;jnz	short scan_buf_queue 
 32930                                  	
 32931                                  	; MSDOS 6.0
 32932 00005933 8B3D                    	mov	di,[di]
 32933                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 32934 00005935 363B3E[BB0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 32935 0000593A 75DD                    	jne	short scan_buf_queue
 32936                                  
 32937                                  end_scan:
 32938 0000593C 16                      	push	ss
 32939 0000593D 1F                      	pop	ds
 32940                                  	; 01/08/2018 - Retro DOS v3.0
 32941                                  	;cmp	byte [FAILERR],0
 32942                                  	;jne	short bad_flush
 32943                                  	;retn
 32944                                  ;bad_flush:
 32945                                  	;stc
 32946                                  	;retn
 32947                                  
 32948                                  	; 17/12/2022
 32949                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32950                                  	; 01/08/2018 - Retro DOS v3.0
 32951 0000593E 803E[4A03]01            	cmp	byte [FAILERR],1
 32952 00005943 F5                      	cmc
 32953                                  flushbuf_retn:
 32954 00005944 C3                      	retn
 32955                                  	
 32956                                  	; 17/12/2022
 32957                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32958                                  	;cmp	byte [FAILERR],0
 32959                                  	;jne	short bad_flush
 32960                                  	;retn
 32961                                  ;bad_flush:
 32962                                  	;stc
 32963                                  	;retn
 32964                                  
 32965                                  ;----------------------------------------------------------------------------
 32966                                  ;
 32967                                  ; Procedure Name : CHECKFLUSH
 32968                                  ;
 32969                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 32970                                  ;	   DS:DI - pointer to buffer
 32971                                  ;
 32972                                  ; Function : Write out a buffer if it is dirty
 32973                                  ;
 32974                                  ; Carry set if problem (currently user FAILed to I 24)
 32975                                  ;
 32976                                  ;----------------------------------------------------------------------------
 32977                                  
 32978                                  CHECKFLUSH:
 32979                                  	; MSDOS 6.0
 32980 00005945 B4FF                    	mov	ah,-1 ; 01/08/2018 Retro DOS v3.0
 32981                                  	;cmp	[di+4],ah
 32982 00005947 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 32983 0000594A 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 32984 0000594C 38C4                    	CMP	AH,AL			; 
 32985 0000594E 7406                    	JZ	short DOBUFFER		; do this buffer
 32986                                  	;cmp	al,[di+4]
 32987 00005950 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32988 00005953 F8                      	CLC
 32989 00005954 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 32990                                  DOBUFFER:
 32991                                  	;test	byte [di+5],40h
 32992 00005956 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 32993 0000595A 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 32994 0000595C 50                      	PUSH	AX
 32995                                  	;push	word [di+4]
 32996 0000595D FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 32997 00005960 E80B00                  	CALL	BUFWRITE
 32998 00005963 58                      	POP	AX
 32999 00005964 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 33000                                  	;and	ah,0BFh
 33001 00005966 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 33002                                  	;mov	[di+4],ax
 33003 00005969 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 33004                                  LEAVE_BUF:
 33005 0000596C 58                      	POP	AX			; Search info
 33006                                  checkflush_retn:
 33007 0000596D C3                      	retn
 33008                                  
 33009                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 33010                                  ;----------------------------------------------------------------------------
 33011                                  ;
 33012                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 33013                                  ;
 33014                                  ;	ENTRY	DS:DI Points to the buffer
 33015                                  ;
 33016                                  ;	EXIT	Buffer marked free
 33017                                  ;		Carry set if error (currently user FAILed to I 24)
 33018                                  ;
 33019                                  ;	USES	All buf DS:DI
 33020                                  ;		HIGH_SECTOR
 33021                                  ;----------------------------------------------------------------------------
 33022                                  
 33023                                  	; 20/05/2019 - Retro DOS v4.0
 33024                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 33025                                  
 33026                                  
 33027                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33028                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 33029                                  
 33030                                  BUFWRITE:
 33031                                  	; 10/09/2018
 33032                                  	; 01/08/2018 - Retro DOS v3.0
 33033                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 33034 0000596E B8FF00                  	MOV	AX,00FFH
 33035                                  	;xchg	ax,[di+4]
 33036 00005971 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 33037 00005974 3CFF                    	CMP	AL,0FFH
 33038 00005976 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 33039                                  	;test	ah,40h
 33040 00005978 F6C440                  	test	AH,buf_dirty
 33041 0000597B 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 33042                                  	; MSDOS 6.0
 33043 0000597D E88E00                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 33044                                  
 33045                                  ;hkn; SS override
 33046 00005980 363A06[2203]            	CMP	AL,[SS:WPERR]
 33047 00005985 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 33048                                  
 33049                                  ;hkn; SS override
 33050                                  	; MSDOS 6.0
 33051 00005987 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 33052                                  	
 33053                                  	; 07/03/2024
 33054                                  	;;;les	bp,[di+10] ; MSDOS 3.3
 33055                                  	;;les	bp,[di+13] ; MSDOS 6.0
 33056                                  	;LES	BP,[DI+BUFFINFO.buf_DPB]
 33057                                  
 33058                                  	;;lea	bx,[di+16]
 33059                                  	;lea	bx,[di+20] ; MSDOS 6.0
 33060 0000598B 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 33061                                  
 33062                                  ; 07/03/2024
 33063                                  %if 0
 33064                                  	;mov	dx,[di+6]
 33065                                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 33066                                  	
 33067                                  	; MSDOS 6.0
 33068                                  	;mov	cx,[di+8]
 33069                                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 33070                                  
 33071                                  ;hkn; SS override
 33072                                  	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 33073                                  %else
 33074                                  	; 07/03/2024 (PCDOS 7.1 IBMDOS.COM)
 33075                                  	;;;
 33076                                  	;les	dx,[di+6]
 33077 0000598E C45506                  	les	dx,[di+BUFFINFO.buf_sector]
 33078 00005991 368C06[0706]            	mov	[ss:HIGH_SECTOR],es
 33079                                  
 33080                                  	;;les	bp,[di+10] ; MSDOS 3.3
 33081                                  	;les	bp,[di+13] ; MSDOS 6.0
 33082 00005996 C46D0D                  	les	bp,[di+BUFFINFO.buf_DPB]
 33083                                  	;;;
 33084                                  %endif
 33085                                  
 33086 00005999 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 33087                                  	; MSDOS 3.3
 33088                                  	;;mov	cx,[DI+8]
 33089                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 33090                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 33091 0000599C 30ED                    	XOR	CH,CH
 33092                                  	;;mov	ah,ch ; MSDOS 3.3
 33093                                  
 33094                                  ;hkn; SS override for ALLOWED
 33095                                  	;mov	byte [SS:ALLOWED],18h
 33096 0000599E 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 33097                                  	;test	byte [di+5],8
 33098                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 33099                                  	;test	ah,8
 33100 000059A4 F6C408                  	test	AH,buf_isDATA
 33101 000059A7 7406                    	JZ	short NO_IGNORE
 33102                                  	;or	byte [SS:ALLOWED],20h
 33103 000059A9 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 33104                                  NO_IGNORE:
 33105                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 33106                                  	; MSDOS 6.0
 33107                                  	;mov	ax,[di+11]
 33108 000059AF 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 33109                                  
 33110 000059B2 57                      	PUSH	DI		; Save buffer pointer
 33111 000059B3 31FF                    	XOR	DI,DI		; Indicate failure
 33112                                  
 33113 000059B5 1E                      	push	ds ; *
 33114 000059B6 53                      	push	bx ; **
 33115                                  WRTAGAIN:
 33116 000059B7 57                      	push	di ; ***
 33117 000059B8 51                      	push	cx ; ****
 33118 000059B9 50                      	push	ax ; *****
 33119                                  	;MOV	CX,1
 33120                                  	; 17/12/2022
 33121                                  	; ch = 0
 33122 000059BA B101                    	mov	cl,1 ; 24/07/2019
 33123                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 33124                                  	;mov	cx,1
 33125 000059BC 53                      	push	bx ; ******
 33126 000059BD 52                      	push	dx ; *******
 33127 000059BE 1E                      	push	ds ; ********
 33128                                  
 33129                                  ; Note: As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 33130                                  
 33131                                  	; MSDOS 6.0
 33132                                  	;cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 33133                                  	; 22/09/2023
 33134 000059BF 36382E[7900]            	cmp	[ss:BuffInHMA],ch ; 0
 33135 000059C4 7418                    	jz	short NBUFFINHMA
 33136 000059C6 51                      	push	cx
 33137 000059C7 06                      	push	es
 33138 000059C8 89DE                    	mov	si,bx
 33139 000059CA 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 33140 000059CE D1E9                    	shr	cx,1
 33141 000059D0 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 33142 000059D5 89FB                    	mov	bx,di
 33143 000059D7 FC                      	cld
 33144 000059D8 F3A5                    	rep	movsw
 33145 000059DA 06                      	push	es
 33146 000059DB 1F                      	pop	ds
 33147 000059DC 07                      	pop	es
 33148 000059DD 59                      	pop	cx
 33149                                  NBUFFINHMA:
 33150 000059DE E8ADDC                  	call	DWRITE		; Write out the dirty buffer
 33151 000059E1 1F                      	pop	ds ; ********
 33152 000059E2 5A                      	pop	dx ; *******
 33153 000059E3 5B                      	pop	bx ; ******
 33154 000059E4 58                      	pop	ax ; *****
 33155 000059E5 59                      	pop	cx ; ****
 33156 000059E6 5F                      	pop	di ; ***
 33157 000059E7 7201                    	JC	short NOSET
 33158 000059E9 47                      	INC	DI		; If at least ONE write succeedes, the operation
 33159                                  NOSET:				;	succeedes.
 33160 000059EA 01C2                    	ADD	DX,AX
 33161 000059EC E2C9                    	LOOP	WRTAGAIN
 33162 000059EE 5B                      	pop	bx ; **
 33163 000059EF 1F                      	pop	ds ; *
 33164                                  	;OR	DI,DI		; Clears carry
 33165                                  	;JNZ	short BWROK	; At least one write worked
 33166                                  	;STC			; DI never got INCed, all writes failed.
 33167                                  	; 22/09/2023
 33168 000059F0 83FF01                  	cmp	di,1
 33169                                  BWROK:	
 33170 000059F3 5F                      	POP	DI
 33171 000059F4 C3                      	retn
 33172                                  
 33173                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 33174                                  ;----------------------------------------------------------------------------
 33175                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 33176                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 33177                                  ;	SC_DRIVE even if SC is disabled to save the testing
 33178                                  ;	code and time
 33179                                  ;
 33180                                  ;	ENTRY	ES:BP = drive parameter block
 33181                                  ;
 33182                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 33183                                  ;		[SC_DRIVE]= drive #
 33184                                  ;
 33185                                  ;	USES	Flags
 33186                                  ;----------------------------------------------------------------------------
 33187                                  
 33188                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33189                                  ; 04/05/2019 - Retro DOS v4.0
 33190                                  
 33191                                  SET_RQ_SC_PARMS:
 33192                                  ;hkn; SS override for all variables used in this procedure.
 33193 000059F5 50                      	push	ax
 33194                                  	;mov	ax,[es:bp+2]
 33195 000059F6 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 33196 000059FA 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 33197                                  	;;mov	al,[es:bp+0]
 33198                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 33199                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 33200                                  	; 15/12/2022
 33201 000059FE 268A4600                	mov	al,[ES:BP]
 33202 00005A02 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 33203 00005A06 58                      	pop	ax
 33204                                  srspx:	
 33205 00005A07 C3                      	retn					;LB. return
 33206                                  
 33207                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 33208                                  ;----------------------------------------------------------------------------
 33209                                  ; Input:
 33210                                  ;	none
 33211                                  ; Function:
 33212                                  ;	increment dirty buffers count
 33213                                  ; Output:
 33214                                  ;	dirty buffers count is incremented
 33215                                  ;
 33216                                  ; All registers preserved
 33217                                  ;----------------------------------------------------------------------------
 33218                                  
 33219                                  INC_DIRTY_COUNT:
 33220                                  ;; BUGBUG  ---- remove this routine
 33221                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 33222 00005A08 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 33223 00005A0D C3                      	retn
 33224                                  
 33225                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 33226                                  ;----------------------------------------------------------------------------
 33227                                  ; Input:
 33228                                  ;	none
 33229                                  ; Function:
 33230                                  ;	decrement dirty buffers count
 33231                                  ; Output:
 33232                                  ;	dirty buffers count is decremented
 33233                                  ;
 33234                                  ; All registers preserved
 33235                                  ;----------------------------------------------------------------------------
 33236                                  
 33237                                  DEC_DIRTY_COUNT:
 33238 00005A0E 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 33239 00005A14 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 33240 00005A16 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 33241                                  					; error condition to underflow here? ;hkn;
 33242                                  ddcx:	
 33243 00005A1B C3                      	retn
 33244                                  
 33245                                  ;============================================================================
 33246                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 33247                                  ;============================================================================
 33248                                  ; 02/08/2018 - Retro DOS v3.0
 33249                                  ; 29/04/2019 - Retro DOS v4.0
 33250                                  
 33251                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 33252                                  
 33253                                  ; Pseudo EXEC system call for DOS
 33254                                  
 33255                                  ;	TITLE	MSPROC - process maintenance
 33256                                  ;	NAME	MSPROC
 33257                                  
 33258                                  ; =========================================================================
 33259                                  ;**	Process related system calls and low level routines for DOS 2.X.
 33260                                  ;	I/O specs are defined in DISPATCH.
 33261                                  ;
 33262                                  ;	$WAIT
 33263                                  ;	$EXEC
 33264                                  ;	$Keep_process
 33265                                  ;	Stay_resident
 33266                                  ;	$EXIT
 33267                                  ;	$ABORT
 33268                                  ;	abort_inner
 33269                                  ;
 33270                                  ;	Modification history:
 33271                                  ;
 33272                                  ;		Created: ARR 30 March 1983
 33273                                  ;		AN000	version 4.0 jan. 1988
 33274                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 33275                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 33276                                  ;
 33277                                  ;		M000	added support for loading programs into UMBs 7/9/90
 33278                                  ;
 33279                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 33280                                  ;		       dossym.inc. 7/30/90
 33281                                  ;		M005 - Support for EXE programs with out STACK segment and 
 33282                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 33283                                  ;		       stack is provided at the end of the program. Note that
 33284                                  ;		       only SP is changed.
 33285                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 33286                                  ;
 33287                                  ;		M028 - 4b04 implementation
 33288                                  ;
 33289                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 33290                                  ;			in memory block >= 64K, sp = 0. If memory block
 33291                                  ;			obtained is <64K, point sp at the end of the memory
 33292                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 33293                                  ;			added for a stack segment which may be needed if it
 33294                                  ;			is loaded in low memory situations.
 33295                                  ;
 33296                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 33297                                  ;
 33298                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 33299                                  ;			a bad environment if it reached 32767 bytes. Changed
 33300                                  ;			to allow 32768 bytes of environment.
 33301                                  ;
 33302                                  ;		M047 - Release the allocated UMB when we failed to load a 
 33303                                  ;		       COM file high. Also ensure that if the biggest block
 33304                                  ;		       into which we load the com file is less than 64K then
 33305                                  ;		       we provide atleast 256 bytes of stack to the user.
 33306                                  ;
 33307                                  ;		M050 - Made Lie table search CASE insensitive
 33308                                  ;
 33309                                  ;		M060 - Removed special version table from the kernal and
 33310                                  ;                      put it in a device drive which puts the address
 33311                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 33312                                  ;		       as a DWORD.
 33313                                  ;
 33314                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 33315                                  ;		       entry do not try to load low if there is no space in
 33316                                  ;		       UMBs.
 33317                                  ;
 33318                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 33319                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 33320                                  ;		       change return address to LeaveDos if AL=5.
 33321                                  ;
 33322                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 33323                                  ;                      controls building a version of MSDOS.SYS that only
 33324                                  ;                      runs programs from a fixed list (defined in the
 33325                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 33326                                  ;                      for details.  This feature is used to build a
 33327                                  ;                      "special" version of DOS that can be handed out to
 33328                                  ;                      OEM/ISV customers as part of a "service" disk.
 33329                                  ;
 33330                                  ; =========================================================================
 33331                                  
 33332                                  ;SAVEXIT  EQU  10
 33333                                  
 33334                                  ;BREAK	<$WAIT - return previous process error code>
 33335                                  ; =========================================================================
 33336                                  ;	$WAIT - Return previous process error code.
 33337                                  ;
 33338                                  ;	Assembler usage:
 33339                                  ;
 33340                                  ;	    MOV     AH, WaitProcess
 33341                                  ;	    INT     int_command
 33342                                  ;
 33343                                  ;	ENTRY	none
 33344                                  ;	EXIT	(ax) = exit code
 33345                                  ;	USES	all
 33346                                  ; =========================================================================
 33347                                  
 33348                                  	; 20/05/2019 - Retro DOS v4.0
 33349                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 33350                                  
 33351                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33352                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 33353                                  _$WAIT:
 33354                                  	; 02/08/2018 - Retro DOS v3.0
 33355                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 33356                                  
 33357 00005A1C 31C0                    	xor	AX,AX
 33358 00005A1E 368706[3403]            	xchg	AX,[ss:exit_code]
 33359 00005A23 E90FAC                  	jmp	SYS_RET_OK
 33360                                  
 33361                                  ; =========================================================================
 33362                                  ;BREAK <$exec - load/go a program>
 33363                                  ;	EXEC.ASM - EXEC System Call
 33364                                  ;
 33365                                  ;
 33366                                  ; Assembler usage:
 33367                                  ;	    lds     DX, Name
 33368                                  ;	    les     BX, Blk
 33369                                  ;	    mov     AH, Exec
 33370                                  ;	    mov     AL, FUNC
 33371                                  ;	    int     INT_COMMAND
 33372                                  ;
 33373                                  ;	AL  Function
 33374                                  ;	--  --------
 33375                                  ;	 0  Load and execute the program.
 33376                                  ;	 1  Load, create the program header but do not
 33377                                  ;	    begin execution.
 33378                                  ;	 3  Load overlay. No header created.
 33379                                  ;
 33380                                  ;	    AL = 0 -> load/execute program
 33381                                  ;
 33382                                  ;	    +---------------------------+
 33383                                  ;	    | WORD segment address of	|
 33384                                  ;	    | environment.		|
 33385                                  ;	    +---------------------------+
 33386                                  ;	    | DWORD pointer to ASCIZ	|
 33387                                  ;	    | command line at 80h	|
 33388                                  ;	    +---------------------------+
 33389                                  ;	    | DWORD pointer to default	|
 33390                                  ;	    | FCB to be passed at 5Ch	|
 33391                                  ;	    +---------------------------+
 33392                                  ;	    | DWORD pointer to default	|
 33393                                  ;	    | FCB to be passed at 6Ch	|
 33394                                  ;	    +---------------------------+
 33395                                  ;
 33396                                  ;	    AL = 1 -> load program
 33397                                  ;
 33398                                  ;	    +---------------------------+
 33399                                  ;	    | WORD segment address of	|
 33400                                  ;	    | environment.		|
 33401                                  ;	    +---------------------------+
 33402                                  ;	    | DWORD pointer to ASCIZ	|
 33403                                  ;	    | command line at 80h	|
 33404                                  ;	    +---------------------------+
 33405                                  ;	    | DWORD pointer to default	|
 33406                                  ;	    | FCB to be passed at 5Ch	|
 33407                                  ;	    +---------------------------+
 33408                                  ;	    | DWORD pointer to default	|
 33409                                  ;	    | FCB to be passed at 6Ch	|
 33410                                  ;	    +---------------------------+
 33411                                  ;	    | DWORD returned value of	|
 33412                                  ;	    | CS:IP			|
 33413                                  ;	    +---------------------------+
 33414                                  ;	    | DWORD returned value of	|
 33415                                  ;	    | SS:IP			|
 33416                                  ;	    +---------------------------+
 33417                                  ;
 33418                                  ;	    AL = 3 -> load overlay
 33419                                  ;
 33420                                  ;	    +---------------------------+
 33421                                  ;	    | WORD segment address where|
 33422                                  ;	    | file will be loaded.	|
 33423                                  ;	    +---------------------------+
 33424                                  ;	    | WORD relocation factor to |
 33425                                  ;	    | be applied to the image.	|
 33426                                  ;	    +---------------------------+
 33427                                  ;
 33428                                  ; Returns:
 33429                                  ;	    AX = error_invalid_function
 33430                                  ;	       = error_bad_format
 33431                                  ;	       = error_bad_environment
 33432                                  ;	       = error_not_enough_memory
 33433                                  ;	       = error_file_not_found
 33434                                  ; =========================================================================
 33435                                  ;
 33436                                  ;   Revision history:
 33437                                  ;
 33438                                  ;	 A000	version 4.00  Jan. 1988
 33439                                  ;
 33440                                  ; =========================================================================
 33441                                  
 33442                                  Exec_Internal_Buffer		EQU	OPENBUF
 33443                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 33444                                  
 33445                                  ; =========================================================================
 33446                                  
 33447                                  ;IF1		; warning message on buffers
 33448                                  ;%out	Please make sure that the following are contiguous and of the
 33449                                  ;%out	following sizes:
 33450                                  ;%out
 33451                                  ;%out	OpenBuf     128
 33452                                  ;%out	RenBuf	    128
 33453                                  ;%out	SearchBuf    53
 33454                                  ;%out	DummyCDS    curdirLen
 33455                                  ;ENDIF
 33456                                  
 33457                                  ; =========================================================================
 33458                                  
 33459                                  ; =========================================================================
 33460                                  ;
 33461                                  ; =========================================================================
 33462                                  
 33463                                  	; 20/05/2019 - Retro DOS v4.0
 33464                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 33465                                  
 33466                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33467                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 33468                                  	
 33469                                  _$EXEC:
 33470                                  	; 02/08/2018 - Retro DOS v3.0
 33471                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 33472                                  
 33473                                  EXEC001S:
 33474                                  	;LocalVar    Exec_Blk		,DWORD
 33475                                  	;LocalVar    Exec_Func		,BYTE
 33476                                  	;LocalVar    Exec_Load_High	,BYTE
 33477                                  	;LocalVar    Exec_FH		,WORD
 33478                                  	;LocalVar    Exec_Rel_Fac	,WORD
 33479                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 33480                                  	;LocalVar    Exec_Environ	,WORD
 33481                                  	;LocalVar    Exec_Size		,WORD
 33482                                  	;LocalVar    Exec_Load_Block	,WORD
 33483                                  	;LocalVar    Exec_DMA		,WORD
 33484                                  	;LocalVar    ExecNameLen 	,WORD
 33485                                  	;LocalVar    ExecName		,DWORD
 33486                                  	;
 33487                                  	;LocalVar    Exec_DMA_Save	,WORD
 33488                                  	;LocalVar    Exec_NoStack	,BYTE
 33489                                  
 33490                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33491                                  	;%define	Exec_Blk	dword [bp-4]
 33492                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 33493                                  	%define		Exec_BlkL	word [bp-4]	
 33494                                  	%define		Exec_BlkH	word [bp-2]
 33495                                  	%define		Exec_Func	byte [bp-5]
 33496                                  	%define		Exec_Load_High	byte [bp-6]
 33497                                  	%define		Exec_FH		word [bp-8]
 33498                                  	%define		Exec_Rel_Fac	word [bp-10]
 33499                                  	%define		Exec_Res_Len_Para word [bp-12]
 33500                                  	%define		Exec_Environ	word [bp-14]
 33501                                  	%define		Exec_Size	word [bp-16]
 33502                                  	%define		Exec_Load_Block	word [bp-18]
 33503                                  	%define		Exec_DMA	word [bp-20]
 33504                                  	%define		ExecNameLen	word [bp-22]
 33505                                  	;%define	ExecName	dword [bp-26]
 33506                                  	%define		ExecName	[bp-26] ; 09/08/2018
 33507                                  	%define		ExecNameL	word [bp-26]	
 33508                                  	%define		ExecNameH	word [bp-24]
 33509                                  	; MSDOS 6.0
 33510                                  	%define		Exec_DMA_Save	word [bp-28]
 33511                                  	%define		Exec_NoStack	byte [bp-29]
 33512                                  	
 33513                                  	; ==================================================================
 33514                                  	; validate function
 33515                                  	; ==================================================================
 33516                                  		      	
 33517                                  	; M068 - Start
 33518                                  	;
 33519                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 33520                                  	; possibility that the count may not be decremented all the way to
 33521                                  	; 0. A typical case is if the program for which we intended to keep 
 33522                                  	; the A20 off for a sufficiently long time (A20OFF_COUNT int 21 
 33523                                  	; calls), exits pre-maturely due to error conditions.
 33524                                  
 33525                                  	; MSDOS 6.0
 33526 00005A26 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 33527                                  
 33528                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 33529                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 33530                                  	; bit set in DOS_FLAG by ExecReady is not cleared in msdisp.asm
 33531                                  
 33532 00005A2C 3C05                    	cmp	al,5			; Q: is this ExecReady call
 33533                                  	;jne	short @f
 33534 00005A2E 7505                    	jne	short Exec_@f		; N: continue
 33535                                  					; Y: change ret addr. to LeaveDos.
 33536 00005A30 59                      	pop	cx			; Note CX is not input to ExecReady
 33537 00005A31 B9[0804]                	mov	cx,LeaveDOS
 33538 00005A34 51                      	push	cx
 33539                                  ;@@:
 33540                                  Exec_@f:
 33541                                  	; M068 - End
 33542                                  	
 33543                                  	;Enter
 33544                                  
 33545 00005A35 55                      	push	bp
 33546 00005A36 89E5                    	mov	bp,sp
 33547                                  	;;sub	sp,26	; MSDOS 3.3
 33548                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 33549                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 33550                                  	; 17/12/2022
 33551                                  	; 20/05/2019
 33552 00005A38 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 33553                                  
 33554                                  	; MSDOS 6.0
 33555 00005A3B 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 33556                                  					; M030
 33557 00005A3D 7614                    	jna	short Exec_Check_2
 33558                                  
 33559                                  	; MSDOS 3.3
 33560                                  	;cmp	AL,3
 33561                                  	;jna	short Exec_Check_2
 33562                                  
 33563                                  Exec_Bad_Fun:
 33564 00005A3F 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 33565                                  					; Extended Error Locus	;smr;SS Override
 33566                                  	;mov	al,1
 33567 00005A45 B001                    	mov	al,error_invalid_function
 33568                                  
 33569                                  Exec_Ret_Err:
 33570                                  	;Leave
 33571 00005A47 89EC                    	mov	sp,bp
 33572 00005A49 5D                      	pop	bp
 33573                                  	;transfer SYS_RET_ERR
 33574 00005A4A E9F1AB                  	jmp	SYS_RET_ERR
 33575                                  
 33576                                  	; MSDOS 6.0
 33577                                  ExecReadyJ:
 33578 00005A4D E89C17                  	call	ExecReady		; M028
 33579 00005A50 E90204                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 33580                                  
 33581                                  Exec_Check_2:
 33582 00005A53 3C02                    	cmp	AL,2			
 33583 00005A55 74E8                    	je	short Exec_Bad_Fun
 33584                                  
 33585                                  	; MSDOS 6.0
 33586 00005A57 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 33587 00005A59 74E4                    	je	short Exec_Bad_Fun
 33588                                  	
 33589 00005A5B 3C05                    	cmp	al,5			; M028 ; M030
 33590 00005A5D 74EE                    	je	short ExecReadyJ	; M028
 33591                                  
 33592                                  	;mov	[bp-4],bx
 33593 00005A5F 895EFC                  	mov	Exec_BlkL,BX		; stash args
 33594                                  	;mov	[bp-2],es
 33595 00005A62 8C46FE                  	mov	Exec_BlkH,ES
 33596                                  	;mov	[bp-5],al
 33597 00005A65 8846FB                  	mov	Exec_Func,AL
 33598                                  	;mov	byte [bp-6],0
 33599 00005A68 C646FA00                	mov	Exec_Load_High,0
 33600                                  
 33601                                  	;mov	[bp-26],dx
 33602 00005A6C 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 33603                                  	;mov	[bp-24],ds
 33604 00005A6F 8C5EE8                  	mov	ExecNameH,DS
 33605 00005A72 89D6                    	mov	SI,DX			; move pointer to convenient place
 33606                                  	;invoke	DStrLen
 33607 00005A74 E865B7                  	call	DStrLen
 33608                                  	;mov	[bp-22],cx
 33609 00005A77 894EEA                  	mov	ExecNameLen,CX		; save length
 33610                                  
 33611                                  	; MSDOS 6.0
 33612 00005A7A 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 33613 00005A7E 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 33614                                  
 33615 00005A82 30C0                    	xor	AL,AL			; open for reading
 33616 00005A84 55                      	push	BP
 33617                                  
 33618                                  	; MSDOS 6.0
 33619                                  	;or	byte [ss:DOS_FLAG],1
 33620 00005A85 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 33621                                  					; the redir that this open call is
 33622                                  					; due to an exec.
 33623                                  
 33624                                  	;invoke	$OPEN			; is the file there?
 33625 00005A8B E8E212                  	call	_$OPEN
 33626                                  
 33627                                  	; MSDOS 6.0
 33628 00005A8E 9C                      	pushf
 33629                                  	; 02/06/2019
 33630                                  	;and	byte [ss:DOS_FLAG],0FEh
 33631 00005A8F 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 33632 00005A95 9D                      	popf
 33633                                  
 33634 00005A96 5D                      	pop	BP
 33635                                  
 33636                                  	; MSDOS 3.3 & MSDOS 6.0
 33637 00005A97 72AE                    	jc	short Exec_Ret_Err
 33638                                  
 33639                                  	;mov	[bp-8],ax
 33640 00005A99 8946F8                  	mov	Exec_FH,AX
 33641 00005A9C 89C3                    	mov	BX,AX
 33642 00005A9E 30C0                    	xor	AL,AL
 33643                                  	;invoke	$Ioctl
 33644 00005AA0 E863C7                  	call	_$IOCTL
 33645 00005AA3 7207                    	jc	short Exec_BombJ
 33646                                  
 33647                                  	;test	dl,80h
 33648 00005AA5 F6C280                  	test	DL,devid_ISDEV
 33649 00005AA8 740A                    	jz	short Exec_Check_Environ
 33650                                  
 33651                                  	;mov	al,2
 33652 00005AAA B002                    	mov	AL,error_file_not_found
 33653                                  Exec_BombJ:
 33654 00005AAC E9C800                  	jmp	Exec_Bomb
 33655                                  
 33656                                  BadEnv:
 33657                                  	;mov	al,0Ah
 33658 00005AAF B00A                    	mov	AL,error_bad_environment
 33659 00005AB1 E9C300                  	jmp	Exec_Bomb
 33660                                  
 33661                                  Exec_Check_Environ:
 33662                                  	;mov	word [bp-18],0
 33663 00005AB4 C746EE0000              	mov	Exec_Load_Block,0
 33664                                  	;mov	word [bp-14],0
 33665 00005AB9 C746F20000              	mov	Exec_Environ,0
 33666                                  					; overlays... no environment
 33667                                  	;test	byte [bp-5],2
 33668 00005ABE F646FB02                	test	Exec_Func,exec_func_overlay
 33669 00005AC2 7552                    	jnz	short Exec_Read_Header
 33670                                  
 33671                                  	;lds	si,[bp-4]
 33672 00005AC4 C576FC                  	lds	SI,Exec_Blk		; get block
 33673 00005AC7 8B04                    	mov	ax,[SI]
 33674                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 33675 00005AC9 09C0                    	or	AX,AX
 33676 00005ACB 750C                    	jnz	short Exec_Scan_Env
 33677                                  
 33678 00005ACD 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 33679                                  	;mov	ax,[44]
 33680 00005AD2 A12C00                  	mov	AX,[PDB.ENVIRON]
 33681                                  
 33682                                  ; MSDOS 6.0
 33683                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 33684                                  ;
 33685                                  ; Exec_environ is being correctly initialized after the environment has been
 33686                                  ; allocated and copied form the parent's env. It must not be initialized here.
 33687                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 33688                                  ; parent's environment.
 33689                                  ;	mov	Exec_Environ,AX
 33690                                  ;
 33691                                  ;----------------------------------------------------------------------------
 33692                                  
 33693                                  	;mov	[bp-14],ax
 33694                                  	;mov	Exec_Environ,ax
 33695                                  
 33696 00005AD5 09C0                    	or	AX,AX
 33697 00005AD7 743D                    	jz	short Exec_Read_Header
 33698                                  
 33699                                  Exec_Scan_Env:
 33700 00005AD9 8EC0                    	mov	ES,AX
 33701 00005ADB 31FF                    	xor	DI,DI
 33702                                  	;mov	cx,7FFFh ; MSDOS 3.3
 33703 00005ADD B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 33704 00005AE0 30C0                    	xor	AL,AL
 33705                                  
 33706                                  Exec_Get_Environ_Len:
 33707 00005AE2 F2AE                    	repnz	scasb			; find that nul byte
 33708 00005AE4 75C9                    	jnz	short BadEnv
 33709                                  
 33710 00005AE6 49                      	dec	CX			; Dec CX for the next nul byte test
 33711 00005AE7 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 33712                                  
 33713 00005AE9 AE                      	scasb				; is there another nul byte?
 33714 00005AEA 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 33715                                  
 33716 00005AEC 57                      	push	DI
 33717                                  	;lea	bx,[DI+11h]
 33718 00005AED 8D5D11                  	lea	BX,[DI+0Fh+2]
 33719                                  	;add	bx,[bp-22]
 33720 00005AF0 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 33721                                  					; remember argv[0] length
 33722                                  					; round up and remember argc
 33723 00005AF3 B104                    	mov	CL,4
 33724 00005AF5 D3EB                    	shr	BX,CL			; number of paragraphs needed
 33725 00005AF7 06                      	push	ES
 33726                                  	;invoke	$Alloc			; can we get the space?
 33727 00005AF8 E83706                  	call	_$ALLOC
 33728 00005AFB 1F                      	pop	DS
 33729 00005AFC 59                      	pop	CX
 33730                                  
 33731                                  	;jnc	short Exec_Save_Environ
 33732                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 33733                                  	; 17/12/2022
 33734 00005AFD 7272                    	jc	short Exec_No_Mem ; 02/06/2019
 33735                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33736                                  	;jnc	short Exec_Save_Environ
 33737                                  	;jmp	SHORT Exec_No_Mem
 33738                                  
 33739                                  Exec_Save_Environ:
 33740 00005AFF 8EC0                    	mov	ES,AX
 33741                                  	;mov	[bp-14],ax
 33742 00005B01 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 33743 00005B04 31F6                    	xor	SI,SI
 33744 00005B06 89F7                    	mov	DI,SI
 33745 00005B08 F3A4                    	rep	movsb			; copy the environment
 33746 00005B0A B80100                  	mov	AX,1
 33747 00005B0D AB                      	stosw
 33748                                  	;lds	si,[bp-26]
 33749 00005B0E C576E6                  	lds	SI,ExecName
 33750                                  	;mov	cx,[bp-22]
 33751 00005B11 8B4EEA                  	mov	CX,ExecNameLen
 33752 00005B14 F3A4                    	rep	movsb
 33753                                  
 33754                                  Exec_Read_Header:
 33755                                  	; We read in the program header into the above data area and
 33756                                  	; determine where in this memory the image will be located.
 33757                                  
 33758                                  	;Context DS
 33759 00005B16 16                      	push	ss
 33760 00005B17 1F                      	pop	ds
 33761                                  	;mov	cx,26
 33762 00005B18 B91A00                  	mov	CX,exec_header_len	; header size
 33763 00005B1B BA[C80F]                	mov	DX,exec_signature
 33764 00005B1E 06                      	push	ES
 33765 00005B1F 1E                      	push	DS
 33766 00005B20 E87704                  	call	ExecRead
 33767 00005B23 1F                      	pop	DS
 33768 00005B24 07                      	pop	ES
 33769 00005B25 724E                    	jc	short Exec_Bad_File
 33770                                  
 33771 00005B27 09C0                    	or	AX,AX
 33772 00005B29 744A                    	jz	short Exec_Bad_File
 33773                                  	;cmp	ax,26
 33774 00005B2B 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 33775 00005B2E 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 33776                                  
 33777 00005B30 F706[D40F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 33778 00005B36 7504                    	jnz	short Exec_Check_Sig
 33779                                  
 33780                                  	;mov	byte [bp-6],0FFh
 33781 00005B38 C646FAFF                	mov	Exec_Load_High,-1
 33782                                  
 33783                                  Exec_Check_Sig:
 33784 00005B3C A1[C80F]                	mov	AX,[exec_signature]	; rms;NSS
 33785                                  	;cmp	ax,5A4Dh ; 'MZ'
 33786 00005B3F 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 33787 00005B42 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33788                                  
 33789                                  	;cmp	ax,4D5Ah ; 'ZM'
 33790 00005B44 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 33791 00005B47 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33792                                  
 33793                                  Exec_Com_Filej:
 33794 00005B49 E9E701                  	jmp	Exec_Com_File
 33795                                  
 33796                                  	; We have the program header... determine memory requirements
 33797                                  
 33798                                  Exec_Save_Start:
 33799 00005B4C A1[CC0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 33800 00005B4F B105                    	mov	CL,5			; convert to paragraphs
 33801 00005B51 D3E0                    	shl	AX,CL
 33802 00005B53 2B06[D00F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 33803                                  	;mov	[bp-12],ax
 33804 00005B57 8946F4                  	mov	Exec_Res_Len_Para,AX
 33805                                  
 33806                                  		; Do we need to allocate memory?
 33807                                  		; Yes if function is not load-overlay
 33808                                  
 33809                                  	;test	byte [bp-5],2
 33810 00005B5A F646FB02                	test	Exec_Func,exec_func_overlay
 33811 00005B5E 7443                    	jz	short Exec_Allocate	; allocation of space
 33812                                  
 33813                                  		; get load address from block
 33814                                  
 33815                                  	;les	di,[bp-4]
 33816 00005B60 C47EFC                  	les	DI,Exec_Blk
 33817                                  
 33818                                  ; 07/03/2024
 33819                                  %if 0
 33820                                  	mov	ax,[es:di]
 33821                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 33822                                  	;mov	[bp-20],ax
 33823                                  	mov	Exec_DMA,AX
 33824                                  
 33825                                  	; 17/12/2022
 33826                                  	;;mov	ax,[es:di+2]
 33827                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 33828                                  	;;mov	[bp-10],ax
 33829                                  	;mov	Exec_Rel_Fac,AX
 33830                                  
 33831                                  	; 17/12/2022
 33832                                  	; 30/11/2022 (!most proper code!)
 33833                                  	;mov	dx,[es:di+2]
 33834                                  	mov	dx,[ES:DI+EXEC3.reloc_fac]
 33835                                  	;mov	[bp-10],dx
 33836                                  	mov	Exec_Rel_Fac,dx
 33837                                  %else
 33838                                  	; 07/03/2024 (PCDOS 7.1 IBMDOS.COM)
 33839                                  	;;;
 33840 00005B63 06                      	push	es
 33841 00005B64 26C405                  	les	ax,[es:di]
 33842                                  	;les	ax,[ES:DI+EXEC3.load_addr]
 33843                                  	;mov	[bp-20],ax
 33844 00005B67 8946EC                  	mov	Exec_DMA,ax
 33845                                  	;mov	[bp-10],es
 33846 00005B6A 8C46F6                  	mov	Exec_Rel_Fac,es
 33847 00005B6D 07                      	pop	es
 33848                                  	;;;
 33849                                  %endif
 33850                                  	; ax = Exec_DMA
 33851 00005B6E E9DE00                  	jmp	Exec_Find_Res
 33852                                  
 33853                                  ; 17/12/2022
 33854                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33855                                  ; 27/09/2023
 33856                                  %if 0
 33857                                  	; 02/06/2019 - Retro DOS v4.0
 33858                                  	;mov	ax,[bp-20]  ; *+*
 33859                                  	mov	AX,Exec_DMA ; *+*
 33860                                  	; 10/08/2018
 33861                                  	jmp	Exec_Find_Res		; M000
 33862                                  %endif
 33863                                  
 33864                                  Exec_No_Mem:
 33865                                  	;mov	al,8
 33866 00005B71 B008                    	mov	AL,error_not_enough_memory
 33867 00005B73 EB02                    	jmp	short Exec_Bomb
 33868                                  
 33869                                  Exec_Bad_File:
 33870                                  	;mov	al,0Bh
 33871 00005B75 B00B                    	mov	AL,error_bad_format
 33872                                  
 33873                                  Exec_Bomb:
 33874                                  	;mov	bx,[bp-8]
 33875 00005B77 8B5EF8                  	mov	BX,Exec_FH
 33876 00005B7A E83604                  	call	Exec_Dealloc
 33877                                  	;LeaveCrit CritMem
 33878 00005B7D E882B7                  	call	LCritMEM
 33879                                  	;save	<AX,BP>
 33880 00005B80 50                      	push	ax
 33881 00005B81 55                      	push	bp
 33882                                  	;invoke	$CLOSE
 33883 00005B82 E82D0A                  	call	_$CLOSE
 33884                                  	;restore <BP,AX>
 33885 00005B85 5D                      	pop	bp
 33886 00005B86 58                      	pop	ax
 33887 00005B87 E9BDFE                  	jmp	Exec_Ret_Err
 33888                                  
 33889                                  Exec_Chk_Mem: 
 33890                                  	
 33891                                  	; 24/09/2023
 33892                                  	; ds = DOSDATA
 33893                                  ; 17/12/2022
 33894                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33895                                  ;%if 0
 33896                                  	; MSDOS 6.0    			; M063 - Start
 33897                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33898                                  	; 10/06/2019
 33899 00005B8A A0[0203]                	mov	al,[AllocMethod]
 33900                                  	;mov	bl,[ss:ALLOCMSAVE]
 33901 00005B8D 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 33902                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 33903 00005B91 881E[0203]              	mov	[AllocMethod],bl
 33904                                  	
 33905 00005B95 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33906 00005B98 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33907                                  	;				; N: continue
 33908                                  	;
 33909 00005B9A A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33910 00005B9C 74D3                    	jz	short Exec_No_Mem	; N: no memory
 33911                                  	; 02/06/2019
 33912                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33913 00005B9E A1[8A00]                	mov	ax,[SAVE_AX]
 33914                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 33915                                  					; M063 - End
 33916 00005BA1 EB2B                    	jmp	short Exec_Norm_Alloc1
 33917                                  ;%endif
 33918                                  
 33919                                  ; 17/12/2022
 33920                                  %if 0
 33921                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33922                                  	; MSDOS 6.0    			; M063 - Start
 33923                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33924                                  	mov	bl,[ss:ALLOCMSAVE]
 33925                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33926                                  
 33927                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33928                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33929                                  	;				; N: continue
 33930                                  	;
 33931                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33932                                  	jz	short Exec_No_Mem	; N: no memory
 33933                                  
 33934                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33935                                  	jmp	short Exec_Norm_Alloc	;    Try again
 33936                                  					; M063 - End
 33937                                  %endif
 33938                                  
 33939                                  Exec_Allocate:
 33940                                  	; 09/09/2018
 33941                                  
 33942                                  	; M005 - START
 33943                                  	; If there is no STACK segment for this exe file and if this
 33944                                  	; not an overlay and the resident size is less than 64K - 
 33945                                  	; 256 bytes we shall add 256 bytes to the programs 
 33946                                  	; resident memory requirement and set Exec_SP to this value.
 33947                                  	
 33948                                  	; 17/12/2022
 33949 00005BA3 29DB                    	sub	bx,bx ; 0	
 33950                                  
 33951                                  	; MSDOS 6.0
 33952                                  	;;mov	byte [bp-29],0
 33953                                  	;mov	Exec_NoStack,0
 33954                                  	; 17/12/2022
 33955 00005BA5 885EE3                  	mov	Exec_NoStack,bl ; 0
 33956 00005BA8 391E[D60F]              	cmp	[exec_SS],bx ; 0
 33957                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 33958 00005BAC 7511                    	jne	short ea1		; Y: continue normal processing
 33959 00005BAE 391E[D80F]              	cmp	[exec_SP],bx ; 0
 33960                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 33961 00005BB2 750B                    	jne	short ea1		; Y: continue normal processing
 33962                                  
 33963                                  	;inc	byte [bp-29]
 33964 00005BB4 FE46E3                  	inc	Exec_NoStack
 33965 00005BB7 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 33966 00005BBA 7303                    	jae	short ea1		; Y: don't set Exec_SP
 33967                                  
 33968 00005BBC 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 33969                                  ea1:
 33970                                  	; M005 - END
 33971                                  
 33972                                  	; MSDOS 6.0			; M000 - start
 33973                                  	; 20/05/2019
 33974                                  	; (ds = ss = DOSDATA)
 33975 00005BBF F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 33976                                  					; Q: is the alloc strat high_first
 33977 00005BC4 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 33978                                  					; Y: set high_only bit
 33979 00005BC6 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 33980                                  					; M000 - end
 33981                                  Exec_Norm_Alloc:
 33982 00005BCB A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd
 33983                                  Exec_Norm_Alloc1:	; 02/06/2019
 33984                                  					; M000: attempt at allocating memory
 33985                                  	; MSDOS 3.3
 33986                                  	;push	ax			; M000
 33987                                  
 33988 00005BCE BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 33989 00005BD1 1E                      	push	DS
 33990                                  	;invoke	$Alloc			; should have carry set and BX has max
 33991 00005BD2 E85D05                  	call	_$ALLOC
 33992 00005BD5 1F                      	pop	DS
 33993                                  
 33994                                  	; MSDOS 6.0
 33995 00005BD6 A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 33996                                  	; MSDOS 3.3
 33997                                  	;pop	ax			; M000
 33998                                  
 33999 00005BD9 83C010                  	add	AX,10h			; room for header
 34000 00005BDC 83FB11                  	cmp	BX,11h			; enough room for a header
 34001                                  	; MSDOS 6.0
 34002 00005BDF 72A9                    	jb	short Exec_Chk_Mem	; M000
 34003                                  	; MSDOS 3.3	
 34004                                  	;jb	short Exec_No_Mem
 34005                                  
 34006 00005BE1 39D8                    	cmp	AX,BX			; is there enough for bare image?
 34007                                  	; MSDOS 6.0
 34008 00005BE3 77A5                    	ja	short Exec_Chk_Mem	; M000
 34009                                  	; MSDOS 3.3
 34010                                  	;ja	short Exec_No_Mem
 34011                                  
 34012                                  	;test	byte [bp-6],0FFh
 34013 00005BE5 F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 34014 00005BE9 7518                    	jnz	short Exec_BX_Max	; use max
 34015                                  
 34016                                  	; 09/09/2018
 34017                                  
 34018 00005BEB 0306[D20F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 34019                                  	; MSDOS 6.0
 34020 00005BEF 7299                    	jc	short Exec_Chk_Mem	; M000
 34021                                  	; MSDOS 3.3
 34022                                  	;jc	short Exec_No_Mem
 34023                                  
 34024 00005BF1 39D8                    	cmp	AX,BX			; enough space?
 34025                                  	; MSDOS 6.0
 34026 00005BF3 7795                    	ja	short Exec_Chk_Mem	; M000: nope...
 34027                                  	; MSDOS 3.3
 34028                                  	;ja	short Exec_No_Mem
 34029                                  
 34030 00005BF5 2B06[D20F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 34031 00005BF9 0306[D40F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 34032 00005BFD 7204                    	jc	short Exec_BX_Max
 34033                                  
 34034 00005BFF 39D8                    	cmp	AX,BX
 34035 00005C01 7602                    	jbe	short Exec_Got_Block
 34036                                  
 34037                                  Exec_BX_Max:
 34038 00005C03 89D8                    	mov	AX,BX
 34039                                  
 34040                                  Exec_Got_Block:
 34041                                  	; 03/08/2018 - Retro DOS v3.0
 34042                                  
 34043 00005C05 1E                      	push	DS
 34044 00005C06 89C3                    	mov	BX,AX
 34045                                  	;mov	[bp-16],bx
 34046 00005C08 895EF0                  	mov	Exec_Size,BX
 34047                                  	;invoke	$Alloc			; get the space
 34048 00005C0B E82405                  	call	_$ALLOC
 34049 00005C0E 1F                      	pop	DS
 34050                                  	; MSDOS 6.0
 34051                                  	;jc	short Exec_Chk_Mem	; M000
 34052                                  	; MSDOS 3.3
 34053                                  	;;jc	short Exec_No_Mem
 34054                                  	; 20/05/2019
 34055 00005C0F 7303                    	jnc	short ea0
 34056 00005C11 E976FF                  	jmp	Exec_Chk_Mem
 34057                                  ea0:
 34058                                  	; MSDOS 6.0
 34059 00005C14 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 34060 00005C18 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 34061                                  
 34062                                  ;M029; Begin changes
 34063                                  ; This code does special handling for programs with no stack segment. If so,
 34064                                  ;check if the current block is larger than 64K. If so, we do not modify
 34065                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 34066                                  ;case Exec_SS is not changed.
 34067                                  
 34068                                  	; MSDOS 6.0
 34069                                  	;cmp	byte [bp-29],0
 34070 00005C1C 807EE300                	cmp	Exec_NoStack,0
 34071                                  	;je	@f
 34072 00005C20 7412                    	je	short ea2
 34073                                  
 34074 00005C22 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 34075                                  	;jae	@f			; Y: Exec_SP = 0
 34076 00005C26 730C                    	jae	short ea2
 34077                                  
 34078                                  ;Make Exec_SP point at the top of the memory block
 34079                                  
 34080 00005C28 B104                    	mov	cl,4
 34081 00005C2A D3E3                    	shl	bx,cl			; get byte offset
 34082 00005C2C 81EB0001                	sub	bx,100h			; take care of PSP
 34083 00005C30 891E[D80F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 34084                                  ea2:
 34085                                  ;@@:
 34086                                  ;M029; end changes
 34087                                  
 34088                                  	;mov	[bp-18],ax
 34089 00005C34 8946EE                  	mov	Exec_Load_Block,AX
 34090 00005C37 83C010                  	add	AX,10h
 34091                                  	;test	byte [bp-6],0FFh
 34092 00005C3A F646FAFF                	test	Exec_Load_High,-1
 34093 00005C3E 7409                    	jz	short Exec_Use_AX	; use ax for load info
 34094                                  
 34095                                  	;add	ax,[bp-16]
 34096 00005C40 0346F0                  	add	AX,Exec_Size		; go to end
 34097                                  	;sub	ax,[bp-12]
 34098 00005C43 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 34099 00005C46 83E810                  	sub	AX,10h			; drop off pdb
 34100                                  
 34101                                  Exec_Use_AX:
 34102                                  	;mov	[bp-10],ax
 34103 00005C49 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 34104                                  	;mov	[bp-20],ax
 34105 00005C4C 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 34106                                  
 34107                                  	; Determine the location in the file of the beginning of
 34108                                  	; the resident
 34109                                  
 34110                                  ; 17/12/2022
 34111                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 34112                                  ;%if 0
 34113                                  
 34114                                  Exec_Find_Res:
 34115                                  	; MSDOS 6.0
 34116                                  	;;mov	dx,[bp-20]
 34117                                  	;mov	DX,Exec_DMA ; *+*
 34118                                  	;;mov	[bp-28],dx
 34119                                  	;mov	Exec_DMA_Save,DX
 34120                                  
 34121                                  	; 17/12/2022
 34122                                  	; AX = Exec_DMA
 34123                                  
 34124                                  	; 02/06/2019 - Retro DOS v4.0
 34125                                  	;mov	[bp-28],ax ; *+*
 34126 00005C4F 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 34127                                  
 34128                                  ;%endif
 34129                                  
 34130                                  ; 17/12/2022
 34131                                  %if 0
 34132                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 34133                                  Exec_Find_Res:
 34134                                  	;mov	dx,[bp-20]
 34135                                  	mov	DX,Exec_DMA ; *+*
 34136                                  	;mov	[bp-28],dx
 34137                                  	mov	Exec_DMA_Save,DX
 34138                                  %endif
 34139                                  
 34140                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34141 00005C52 8B16[D00F]              	mov	DX,[exec_par_dir]
 34142 00005C56 52                      	push	DX
 34143 00005C57 B104                    	mov	CL,4
 34144 00005C59 D3E2                    	shl	DX,CL			; low word of location
 34145 00005C5B 58                      	pop	AX
 34146 00005C5C B10C                    	mov	CL,12
 34147 00005C5E D3E8                    	shr	AX,CL			; high word of location
 34148 00005C60 89C1                    	mov	CX,AX			; CX <- high
 34149                                  
 34150                                  		; Read in the resident image (first, seek to it)
 34151                                  	;mov	bx,[bp-8]
 34152 00005C62 8B5EF8                  	mov	BX,Exec_FH
 34153 00005C65 1E                      	push	DS
 34154 00005C66 30C0                    	xor	AL,AL
 34155                                  	;invoke	$Lseek			; Seek to resident
 34156 00005C68 E8B20A                  	call	_$LSEEK
 34157 00005C6B 1F                      	pop	DS
 34158 00005C6C 7303                    	jnc	short Exec_Big_Read
 34159                                  
 34160 00005C6E E906FF                  	jmp	Exec_Bomb
 34161                                  
 34162                                  Exec_Big_Read:				; Read resident into memory
 34163                                  	;mov	bx,[bp-12]
 34164 00005C71 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 34165 00005C74 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 34166 00005C78 7203                    	jb	short Exec_Read_OK
 34167                                  
 34168 00005C7A BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 34169                                  
 34170                                  Exec_Read_OK:
 34171                                  	;sub	[bp-12],bx
 34172 00005C7D 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 34173 00005C80 53                      	push	BX
 34174 00005C81 B104                    	mov	CL,4
 34175 00005C83 D3E3                    	shl	BX,CL			; Get count in bytes from paras
 34176 00005C85 89D9                    	mov	CX,BX			; Count in correct register
 34177 00005C87 1E                      	push	DS
 34178                                  	;mov	ds,[bp-20]
 34179 00005C88 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 34180                                  
 34181 00005C8B 31D2                    	xor	DX,DX
 34182 00005C8D 51                      	push	CX			; Save our count
 34183 00005C8E E80903                  	call	ExecRead
 34184 00005C91 59                      	pop	CX			; Get old count to verify
 34185 00005C92 1F                      	pop	DS
 34186 00005C93 7248                    	jc	short Exec_Bad_FileJ
 34187                                  
 34188 00005C95 39C1                    	cmp	CX,AX			; Did we read enough?
 34189 00005C97 5B                      	pop	BX			; Get paragraph count back
 34190 00005C98 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 34191                                  
 34192                                  	; The read did not match the request. If we are off by 512
 34193                                  	; bytes or more then the header lied and we have an error.
 34194                                  
 34195 00005C9A 29C1                    	sub	CX,AX
 34196 00005C9C 81F90002                	cmp	CX,512
 34197 00005CA0 733B                    	jae	short Exec_Bad_FileJ
 34198                                  
 34199                                  	; We've read in CX bytes... bump DTA location
 34200                                  
 34201                                  ExecCheckEnd:
 34202                                  	;add	[bp-20],bx
 34203 00005CA2 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 34204                                  	;test	word [bp-12],0FFFFh
 34205 00005CA5 F746F4FFFF              	test	Exec_Res_Len_Para,-1
 34206 00005CAA 75C5                    	jnz	short Exec_Big_Read
 34207                                  
 34208                                  	; The image has now been read in. We must perform relocation
 34209                                  	; to the current location.
 34210                                  
 34211                                  exec_do_reloc:
 34212                                  	;mov	cx,[bp-10]
 34213 00005CAC 8B4EF6                  	mov	CX,Exec_Rel_Fac
 34214 00005CAF A1[D60F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 34215 00005CB2 01C8                    	add	AX,CX			; and relocate him
 34216 00005CB4 A3[C20F]                	mov	[exec_init_SS],AX 	; rms;NSS
 34217                                  
 34218 00005CB7 A1[D80F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 34219 00005CBA A3[C00F]                	mov	[exec_init_SP],AX 	; rms;NSS
 34220                                  
 34221 00005CBD C406[DC0F]              	les	AX,[exec_IP]		; rms;NSS
 34222 00005CC1 A3[C40F]                	mov	[exec_init_IP],AX 	; rms;NSS
 34223 00005CC4 8CC0                    	mov	AX,ES			; rms;NSS
 34224 00005CC6 01C8                    	add	AX,CX			; relocated...
 34225 00005CC8 A3[C60F]                	mov	[exec_init_CS],AX 	; rms;NSS
 34226                                  
 34227 00005CCB 31C9                    	xor	CX,CX
 34228 00005CCD 8B16[E00F]              	mov	DX,[exec_rle_table]	; rms;NSS
 34229                                  	;mov	bx,[bp-8]
 34230 00005CD1 8B5EF8                  	mov	BX,Exec_FH
 34231 00005CD4 1E                      	push	DS
 34232 00005CD5 31C0                    	xor	AX,AX
 34233                                  	;invoke	$Lseek
 34234 00005CD7 E8430A                  	call	_$LSEEK
 34235 00005CDA 1F                      	pop	DS
 34236 00005CDB 7303                    	jnc	short exec_get_entries
 34237                                  
 34238                                  Exec_Bad_FileJ:
 34239 00005CDD E995FE                  	jmp	Exec_Bad_File
 34240                                  
 34241                                  exec_get_entries:
 34242 00005CE0 8B16[CE0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 34243                                  
 34244                                  exec_read_reloc:
 34245 00005CE4 52                      	push	DX
 34246                                  	;mov	dx,OPENBUF
 34247 00005CE5 BA[BE03]                	mov	DX,Exec_Internal_Buffer
 34248                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 34249                                  	;mov	cx,396 ; MSDOS 6.0
 34250 00005CE8 B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 34251 00005CEB 1E                      	push	DS
 34252 00005CEC E8AB02                  	call	ExecRead
 34253 00005CEF 07                      	pop	ES
 34254 00005CF0 5A                      	pop	DX
 34255 00005CF1 72EA                    	jc	short Exec_Bad_FileJ
 34256                                  
 34257                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 34258                                  	;mov	cx,99 ;  MSDOS 6.0
 34259 00005CF3 B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 34260                                  					; Pointer to byte location in header
 34261                                  	;mov	di,OPENBUF
 34262 00005CF6 BF[BE03]                	mov	DI,Exec_Internal_Buffer
 34263                                  	;mov	si,[bp-10]
 34264 00005CF9 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 34265                                  
 34266                                  exec_reloc_one:
 34267 00005CFC 09D2                    	or	DX,DX			; Any more entries?
 34268 00005CFE 7416                    	jz	short Exec_Set_PDBJ
 34269                                  
 34270                                  exec_get_addr:
 34271 00005D00 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 34272 00005D03 8CD8                    	mov	AX,DS			; Relocate address of item
 34273                                  
 34274                                  	; MSDOS 6.0
 34275                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 34276                                  	;add	ax,[bp-28]
 34277 00005D05 0346E4                  	add	AX,Exec_DMA_Save
 34278                                  
 34279 00005D08 8ED8                    	mov	DS,AX
 34280 00005D0A 0137                    	add	[BX],SI
 34281 00005D0C 83C704                  	add	DI,4
 34282 00005D0F 4A                      	dec	DX
 34283 00005D10 E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 34284                                  
 34285                                  	; We've exhausted a single buffer's worth. Read in the next
 34286                                  	; piece of the relocation table.
 34287                                  
 34288 00005D12 06                      	push	ES
 34289 00005D13 1F                      	pop	DS
 34290 00005D14 EBCE                    	jmp	short exec_read_reloc
 34291                                  
 34292                                  Exec_Set_PDBJ:
 34293                                  	; MSDOS 6.0
 34294                                  	
 34295                                  	; We now determine if this is a buggy exe packed file and if
 34296                                  	; so we patch in the right code. Note that fixexepatch will
 34297                                  	; point to a ret if dos loads low. The load segment as
 34298                                  	; determined above will be in exec_dma_save
 34299                                  	
 34300 00005D16 06                      	push	es
 34301 00005D17 50                      	push	ax			; M030
 34302 00005D18 51                      	push	cx			; M030
 34303                                  	;mov	es,[bp-28]
 34304 00005D19 8E46E4                  	mov	es,Exec_DMA_Save
 34305 00005D1C 36A1[C60F]              	mov	ax,[ss:exec_init_CS]	; M030
 34306 00005D20 368B0E[C40F]            	mov	cx,[ss:exec_init_IP]	; M030
 34307 00005D25 36FF16[1212]            	call	word [ss:FixExePatch]
 34308                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34309                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 34310                                  	;call	word [ss:Rational386PatchPtr]
 34311 00005D2A 59                      	pop	cx			; M030
 34312 00005D2B 58                      	pop	ax			; M030
 34313 00005D2C 07                      	pop	es
 34314                                  
 34315 00005D2D E9DD00                  	jmp	Exec_Set_PDB
 34316                                  
 34317                                  Exec_No_Memj:
 34318 00005D30 E93EFE                  	jmp	Exec_No_Mem
 34319                                  
 34320                                  	; we have a .COM file. First, determine if we are merely
 34321                                  	; loading an overlay.
 34322                                  
 34323                                  Exec_Com_File:
 34324                                  	;test	byte [bp-5],2
 34325 00005D33 F646FB02                	test	Exec_Func,exec_func_overlay
 34326 00005D37 742D                    	jz	short Exec_Alloc_Com_File
 34327                                  	;lds	si,[bp-4]
 34328 00005D39 C576FC                  	lds	SI,Exec_Blk		; get arg block
 34329 00005D3C AD                      	lodsw				; get load address
 34330                                  	;mov	[bp-20],ax
 34331 00005D3D 8946EC                  	mov	Exec_DMA,AX
 34332 00005D40 B8FFFF                  	mov	AX,0FFFFh
 34333 00005D43 EB63                    	jmp	short Exec_Read_Block	; read it all!
 34334                                  
 34335                                  Exec_Chk_Com_Mem:			
 34336                                  	; MSDOS 6.0	     		; M063 - Start
 34337 00005D45 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 34338 00005D49 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 34339 00005D4E 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 34340 00005D53 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 34341 00005D56 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 34342                                  					; N: continue
 34343                                  	
 34344 00005D58 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 34345 00005D5A 74D4                    	jz	short Exec_No_Memj	; N: no memory
 34346                                  	
 34347                                  	;mov	ax,[bp-18]
 34348 00005D5C 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated
 34349 00005D5F 31DB                    	xor	bx,bx			; M047: bx => free arena
 34350 00005D61 E86B02                  	call	ChangeOwner		; M047: free this block
 34351                                  	
 34352 00005D64 EB0E                    	jmp	short Exec_Norm_Com_Alloc
 34353                                  					; M063 - End
 34354                                  	
 34355                                  	; We must allocate the max possible size block (ick!)
 34356                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 34357                                  	; size of block.
 34358                                  
 34359                                  Exec_Alloc_Com_File:
 34360                                  	; MSDOS 6.0			; M000 -start
 34361 00005D66 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 34362                                  					; Q: is the alloc strat high_first
 34363 00005D6C 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 34364                                  					; Y: set high_only bit
 34365 00005D6E 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 34366                                  					; M000 - end
 34367                                  Exec_Norm_Com_Alloc:			; M000
 34368                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34369 00005D74 BBFFFF                  	mov	BX,0FFFFh
 34370                                  	;invoke	$Alloc			; largest piece available as error
 34371 00005D77 E8B803                  	call	_$ALLOC
 34372 00005D7A 09DB                    	or	BX,BX
 34373                                  	; MSDOS 6.0
 34374 00005D7C 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 34375                                  	; MSDOS 3.3
 34376                                  	;jz	short Exec_No_Memj
 34377                                  
 34378                                  	;mov	[bp-16],bx
 34379 00005D7E 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 34380 00005D81 53                      	push	BX
 34381                                  	;invoke	$ALLOC			; largest piece available
 34382 00005D82 E8AD03                  	call	_$ALLOC
 34383 00005D85 5B                      	pop	BX			; get size of block...
 34384                                  	;mov	[bp-18],ax
 34385 00005D86 8946EE                  	mov	Exec_Load_Block,AX
 34386                                  
 34387 00005D89 83C010                  	add	AX,10h			; increment for header
 34388                                  	;mov	[bp-20],ax
 34389 00005D8C 8946EC                  	mov	Exec_DMA,AX
 34390                                  
 34391 00005D8F 31C0                    	xor	AX,AX			; presume 64K read...
 34392 00005D91 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 34393 00005D95 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 34394                                  
 34395 00005D97 89D8                    	mov	AX,BX			; convert size to bytes
 34396 00005D99 B104                    	mov	CL,4
 34397 00005D9B D3E0                    	shl	AX,CL
 34398                                  	; 17/12/2022
 34399                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34400                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 34401                                  	; MSDOS 5.0
 34402                                  	;cmp	AX,100h   
 34403                                  	; 02/06/2019 - Retro DOS v4.0
 34404                                  	; MSDOS 6.0
 34405                                          ; 17/12/2022
 34406 00005D9D 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 34407 00005DA0 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 34408                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 34409                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 34410                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 34411                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 34412                                  
 34413                                  					; M047: size of the block is < 64K
 34414 00005DA2 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 34415                                  
 34416                                  Exec_Read_Com:
 34417                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34418 00005DA5 2D0001                  	sub	AX,100h 		; remember size of psp
 34419                                  Exec_Read_Block:
 34420 00005DA8 50                      	push	AX			; save number to read
 34421                                  	;mov	bx,[bp-8]
 34422 00005DA9 8B5EF8                  	mov	BX,Exec_FH		; of com file
 34423 00005DAC 31C9                    	xor	CX,CX			; but seek to 0:0
 34424 00005DAE 31C0                    	xor	AX,AX			; seek relative to beginning
 34425                                  	;mov	DX,CX
 34426                                  	; 08/03/2024
 34427 00005DB0 99                      	cwd
 34428                                  	;invoke	$Lseek			; back to beginning of file
 34429 00005DB1 E86909                  	call	_$LSEEK
 34430 00005DB4 59                      	pop	CX			; number to read
 34431                                  	;mov	ds,[bp-20]
 34432 00005DB5 8E5EEC                  	mov	DS,Exec_DMA
 34433 00005DB8 31D2                    	xor	DX,DX
 34434 00005DBA 51                      	push	CX
 34435 00005DBB E8DC01                  	call	ExecRead
 34436 00005DBE 5E                      	pop	SI			; get number of bytes to read
 34437 00005DBF 7303                    	jnc	short OkRead
 34438 00005DC1 E9B1FD                  	jmp	Exec_Bad_File
 34439                                  
 34440                                  	; 10/09/2018
 34441                                  OkRead:
 34442 00005DC4 39F0                    	cmp	AX,SI			; did we read them all?
 34443                                  	; MSDOS 6.0
 34444                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no
 34445                                  	; MSDOS 3.3
 34446                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 34447 00005DC6 7503                    	jne	short OkRead2
 34448 00005DC8 E97AFF                  	jmp	Exec_Chk_Com_Mem
 34449                                  OkRead2:
 34450                                  	; MSDOS 6.0
 34451 00005DCB 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 34452 00005DD0 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 34453                                  
 34454                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34455                                  	;test	byte [bp-5],2
 34456 00005DD5 F646FB02                	test	Exec_Func,exec_func_overlay
 34457 00005DD9 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 34458                                  
 34459                                  	;mov	ax,[bp-20]
 34460 00005DDB 8B46EC                  	mov	AX,Exec_DMA
 34461 00005DDE 83E810                  	sub	AX,10h
 34462 00005DE1 36A3[C60F]              	mov	[SS:exec_init_CS],AX
 34463 00005DE5 36C706[C40F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 34464                                  
 34465                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 34466                                  	; of 0 on stack.
 34467                                  
 34468 00005DEC 81C6FE00                	add	SI,0FEh 		; make room for stack
 34469                                  
 34470                                  	; MSDOS 6.0
 34471 00005DF0 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 34472 00005DF3 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 34473 00005DF5 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 34474                                  
 34475                                  Exec_St_Ok:
 34476                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34477 00005DF9 368936[C00F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 34478 00005DFE 36A3[C20F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 34479 00005E02 8ED8                    	mov	DS,AX
 34480 00005E04 C7040000                	mov	WORD [SI],0		; 0 for return
 34481                                  
 34482                                  	; MSDOS 6.0
 34483                                  
 34484                                  	; M068
 34485                                  	;
 34486                                  	; We now determine if this is a Copy Protected App. If so the
 34487                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to
 34488                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 34489                                  
 34490 00005E08 36FF16[6100]            	call	word [ss:ChkCopyProt]
 34491                                  
 34492                                  Exec_Set_PDB:
 34493                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34494                                  	;mov	bx,[bp-8]
 34495 00005E0D 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 34496 00005E10 E8A001                  	call	Exec_Dealloc
 34497 00005E13 55                      	push	BP
 34498                                  	;invoke	$Close			; release the jfn
 34499 00005E14 E89B07                  	call	_$CLOSE
 34500 00005E17 5D                      	pop	BP
 34501 00005E18 E88A01                  	call	Exec_Alloc
 34502                                  	;test	byte [bp-5],2
 34503 00005E1B F646FB02                	test	Exec_Func,exec_func_overlay
 34504 00005E1F 743A                    	jz	short Exec_Build_Header
 34505                                  
 34506                                  	; MSDOS 6.0
 34507 00005E21 E8B901                  	call	Scan_Execname
 34508 00005E24 E8CD01                  	call	Scan_Special_Entries
 34509                                  ;SR;
 34510                                  ;The current lie strategy uses the PSP to store the lie version. However,
 34511                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 34512                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 34513                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 34514                                  ;Sysinit and therefore must be a device driver load. We then get the lie
 34515                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 34516                                  ;issues the version check, it gets the lie version until the next overlay
 34517                                  ;call is issued.
 34518                                  
 34519 00005E27 36803E[3F10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 34520 00005E2D 7426                    	je	short norm_ovl		;yes, no special handling
 34521 00005E2F 56                      	push	si
 34522 00005E30 06                      	push	es
 34523 00005E31 36C436[4010]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 34524                                  	 
 34525                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s)
 34526 00005E36 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 34527 00005E3A 7411                    	je	short sysinit_done	;no, Sysinit is finished
 34528                                  	
 34529 00005E3C 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 34530 00005E41 36FF36[BD0E]            	push	word [ss:SPECIAL_VERSION]
 34531 00005E46 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 34532                                  		;;; PDB.VERSION
 34533 00005E4B EB06                    	jmp	short setver_done
 34534                                  sysinit_done:
 34535 00005E4D 36C606[3F10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 34536                                  setver_done:
 34537 00005E53 07                      	pop	es
 34538 00005E54 5E                      	pop	si
 34539                                  norm_ovl:
 34540                                  	;leave
 34541 00005E55 89EC                    	mov	sp,bp
 34542 00005E57 5D                      	pop	bp
 34543                                  
 34544                                  	;transfer SYS_RET_OK		; overlay load -> done
 34545 00005E58 E9DAA7                  	jmp	SYS_RET_OK
 34546                                  
 34547                                  Exec_Build_Header:
 34548                                  	;mov	dx,[bp-18]
 34549 00005E5B 8B56EE                  	mov	DX,Exec_Load_Block
 34550                                  					; assign the space to the process
 34551                                  	;mov	si,1
 34552 00005E5E BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 34553                                  	;mov	ax,[bp-14]
 34554 00005E61 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 34555 00005E64 09C0                    	or	AX,AX
 34556 00005E66 7405                    	jz	short No_Owner		; no environment
 34557                                  
 34558 00005E68 48                      	dec	AX			; point to header
 34559 00005E69 8ED8                    	mov	DS,AX
 34560 00005E6B 8914                    	mov	[SI],DX 		; assign ownership
 34561                                  No_Owner:
 34562                                  	;mov	ax,[bp-18]
 34563                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 34564                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34565                                  	; 17/12/2022
 34566 00005E6D 89D0                    	mov	ax,dx ; 06/06/2019
 34567                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 34568                                  	
 34569 00005E6F 48                      	dec	AX
 34570 00005E70 8ED8                    	mov	DS,AX			; point to header
 34571 00005E72 8914                    	mov	[SI],DX 		; assign ownership
 34572                                  
 34573                                  	; MSDOS 6.0
 34574 00005E74 1E                      	push	DS			;AN000;MS. make ES=DS
 34575 00005E75 07                      	pop	ES			;AN000;MS.
 34576                                  	;mov	di,8
 34577 00005E76 BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 34578 00005E79 E86101                  	call	Scan_Execname		;AN007;MS. parse execname
 34579                                  					;	   ds:si->name, cx=name length
 34580 00005E7C 51                      	push	CX			;AN007;;MS. save for fake version
 34581 00005E7D 56                      	push	SI			;AN007;;MS. save for fake version
 34582                                  
 34583                                  MoveName:				;AN000;
 34584 00005E7E AC                      	lodsb				;AN000;;MS. get char
 34585 00005E7F 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.', may be name.exe
 34586 00005E81 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 34587                                  					;AN000;
 34588 00005E83 AA                      	stosb				;AN000;;MS. move char
 34589                                  					; MSKK bug fix - limit length copied
 34590 00005E84 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 34591 00005E87 7302                    	jae	short Mem_Done		; jump if so
 34592                                  	;
 34593 00005E89 E2F3                    	loop	MoveName		;AN000;;MS. continue
 34594                                  Mem_Done:				;AN000;
 34595 00005E8B 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 34596                                  	;cmp	di,16
 34597 00005E8D 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 34598 00005E90 7301                    	jae	short Fill8		;AN000;MS.
 34599                                  	
 34600 00005E92 AA                      	stosb				;AN000;MS.
 34601                                  	
 34602                                  Fill8:					;AN000;
 34603 00005E93 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 34604 00005E94 59                      	pop	CX			;AN007;MS.
 34605                                  	
 34606 00005E95 E85C01                  	call	Scan_Special_Entries	;AN007;MS.
 34607                                  
 34608                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34609 00005E98 52                      	push	DX
 34610                                  	;mov	si,[bp-16]
 34611 00005E99 8B76F0                  	mov	SI,Exec_Size
 34612 00005E9C 01D6                    	add	SI,DX
 34613                                  	;Invoke	$Dup_PDB		; ES is now PDB
 34614 00005E9E E8D9B1                  	call	_$DUP_PDB
 34615 00005EA1 5A                      	pop	DX
 34616                                  
 34617                                  	;push	word [bp-14]
 34618 00005EA2 FF76F2                  	push	Exec_Environ
 34619                                  	;pop	WORD [ES:2Ch]
 34620 00005EA5 268F062C00              	pop	word [ES:PDB.ENVIRON]
 34621                                  
 34622                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 34623                                  					; version number in PSP
 34624 00005EAA 36FF36[BD0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 34625 00005EAF 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 34626                                  		; PDB.VERSION
 34627                                  
 34628                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 34629                                  	;lds	si,[bp-4]
 34630 00005EB4 C576FC                  	lds	SI,Exec_Blk		; get the block
 34631 00005EB7 1E                      	push	DS			; save its location
 34632 00005EB8 56                      	push	SI
 34633                                  	;lds	si,[si+6]
 34634 00005EB9 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 34635                                  
 34636                                  	; DS points to user space 5C FCB
 34637                                  
 34638 00005EBC B90C00                  	mov	CX,12			; copy drive, name and ext
 34639 00005EBF 51                      	push	CX
 34640 00005EC0 BF5C00                  	mov	DI,5Ch
 34641 00005EC3 8A1C                    	mov	BL,[SI]
 34642 00005EC5 F3A4                    	rep	movsb
 34643                                  
 34644                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 34645                                  
 34646                                  	;xor	AX,AX			; zero extent, etc for CPM
 34647 00005EC7 91                      	xchg	ax,cx	; 08/03/2024
 34648 00005EC8 AB                      	stosw
 34649 00005EC9 AB                      	stosw
 34650                                  
 34651                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 34652                                  
 34653 00005ECA 59                      	pop	CX
 34654 00005ECB 5E                      	pop	SI			; get block
 34655 00005ECC 1F                      	pop	DS
 34656 00005ECD 1E                      	push	DS			; save (again)
 34657 00005ECE 56                      	push	SI
 34658                                  	;lds	si,[si+0Ah]
 34659 00005ECF C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 34660                                  
 34661                                  	; DS points to user space 6C FCB
 34662                                  
 34663 00005ED2 8A3C                    	mov	BH,[SI] 		; do same as above
 34664 00005ED4 F3A4                    	rep	movsb
 34665 00005ED6 AB                      	stosw
 34666 00005ED7 AB                      	stosw
 34667 00005ED8 5E                      	pop	SI			; get block (last time)
 34668 00005ED9 1F                      	pop	DS
 34669                                  	;ld	si,[si+2]
 34670 00005EDA C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 34671                                  
 34672                                  	; DS points to user space 80 command line
 34673                                  
 34674 00005EDD 80C980                  	or	CL,80h
 34675 00005EE0 89CF                    	mov	DI,CX
 34676 00005EE2 F3A4                    	rep	movsb			; Wham!
 34677                                  
 34678                                  	; Process BX into default AX (validity of drive specs on args).
 34679                                  	; We no longer care about DS:SI.
 34680                                  
 34681 00005EE4 FEC9                    	dec	CL			; get 0FFh in CL
 34682 00005EE6 88F8                    	mov	AL,BH
 34683 00005EE8 30FF                    	xor	BH,BH
 34684                                  	;invoke	GetVisDrv
 34685 00005EEA E8210A                  	call	GetVisDrv
 34686 00005EED 7302                    	jnc	short Exec_BL
 34687                                  
 34688 00005EEF 88CF                    	mov	BH,CL
 34689                                  
 34690                                  Exec_BL:
 34691 00005EF1 88D8                    	mov	AL,BL
 34692 00005EF3 30DB                    	xor	BL,BL
 34693                                  	;invoke	GetVisDrv
 34694 00005EF5 E8160A                  	call	GetVisDrv
 34695 00005EF8 7302                    	jnc	short Exec_Set_Return
 34696                                  
 34697 00005EFA 88CB                    	mov	BL,CL
 34698                                  
 34699                                  Exec_Set_Return:
 34700                                  	;invoke	Get_User_Stack			; get his return address
 34701 00005EFC E886A5                  	call	Get_User_Stack
 34702                                  
 34703                                  ; 08/03/2024
 34704                                  %if 0
 34705                                  	;push	word [si+14h]
 34706                                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34707                                  	;push	word [si+12h]
 34708                                  	push	word [SI+user_env.user_IP]
 34709                                  	;push	word [si+14h]
 34710                                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34711                                  	;push	word [si+12h]
 34712                                  	push	word [SI+user_env.user_IP]
 34713                                  	;pop	word [ES:0Ah]
 34714                                  	pop	WORD [ES:PDB.EXIT]
 34715                                  	;pop	word [ES:0Ch]
 34716                                  	pop	WORD [ES:PDB.EXIT+2]
 34717                                  %else
 34718                                  	; 07/03/2024 (PCDOS 7.1 IBMDOS.COM)
 34719                                  	;;;
 34720                                  	;lds	ax,[si+12h]
 34721 00005EFF C54412                  	lds	ax,[SI+user_env.user_IP] ; suck out the CS and IP
 34722 00005F02 1E                      	push	ds              
 34723 00005F03 50                      	push	ax
 34724                                  	;mov	[es:0Ah],ax
 34725 00005F04 26A30A00                	mov	[ES:PDB.EXIT],ax
 34726                                  	;mov	[es:0Ch],ds
 34727 00005F08 268C1E0C00              	mov	[ES:PDB.EXIT+2],ds
 34728                                  	;;;
 34729                                  %endif
 34730                                  	
 34731 00005F0D 31C0                    	xor	AX,AX
 34732 00005F0F 8ED8                    	mov	DS,AX
 34733                                  					; save them where we can get them
 34734                                  					; later when the child exits.
 34735                                  	;pop	word [88h]
 34736 00005F11 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 34737                                  	;pop	word [90h]
 34738 00005F15 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 34739                                  
 34740 00005F19 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 34741 00005F20 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 34742 00005F25 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 34743                                  
 34744                                  	;test	byte [bp-5],1
 34745 00005F2A F646FB01                	test	Exec_Func,exec_func_no_execute
 34746 00005F2E 7427                    	jz	short exec_go
 34747                                  
 34748 00005F30 36C536[C00F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 34749                                  	;les	di,[bp-4]
 34750 00005F35 C47EFC                  	les	DI,Exec_Blk		; and block for return
 34751                                  	;mov	[es:di+10h],ds
 34752 00005F38 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 34753                                  
 34754 00005F3C 4E                      	dec	SI			; 'push' default AX
 34755 00005F3D 4E                      	dec	SI
 34756 00005F3E 891C                    	mov	[SI],BX 		; save default AX reg
 34757                                  	;mov	[es:di+0Eh], si
 34758 00005F40 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 34759                                  
 34760 00005F44 36C506[C40F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 34761                                  	;mov	[es:di+14h],ds
 34762 00005F49 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 34763                                  	;mov	[es:di+12h],ax
 34764 00005F4D 26894512                	mov	[ES:DI+EXEC1.IP],AX
 34765                                  	
 34766                                  	;leave
 34767 00005F51 89EC                    	mov	sp,bp
 34768 00005F53 5D                      	pop	bp	
 34769                                  
 34770                                  	;transfer SYS_RET_OK
 34771 00005F54 E9DEA6                  	jmp	SYS_RET_OK
 34772                                  
 34773                                  exec_go:
 34774 00005F57 36C536[C40F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 34775 00005F5C 36C43E[C00F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 34776 00005F61 8CC0                    	mov	AX,ES
 34777                                  
 34778                                  	; MSDOS 6.0
 34779 00005F63 36803E[1112]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 34780 00005F69 741A                    	je	short Xfer_To_User	; N: transfer control to user
 34781                                  
 34782 00005F6B 1E                      	push	ds			; Y: control must go to low mem stub
 34783                                  		
 34784 00005F6C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 34785                                  					;    control to user 
 34786 00005F71 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 34787                                  					; M004: Set bit to signal int 21
 34788                                  					; ah = 25 & ah= 49. See dossym.inc 
 34789                                  					; under TAG M003 & M009 for 
 34790                                  					; explanation
 34791 00005F76 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 34792                                  					; M068: going to be turned OFF.
 34793                                  	
 34794 00005F7A 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 34795 00005F7C 1F                      	pop	ds
 34796                                  	
 34797 00005F7D 50                      	push	ax			; ret far into the low mem stub
 34798 00005F7E B8[1511]                	mov	ax,disa20_xfer
 34799 00005F81 50                      	push	ax
 34800 00005F82 8CC0                    	mov	AX,ES			; restore ax
 34801 00005F84 CB                      	retf
 34802                                  
 34803                                  Xfer_To_User:
 34804                                  	; DS:SI points to entry point
 34805                                  	; AX:DI points to initial stack
 34806                                  	; DX has PDB pointer
 34807                                  	; BX has initial AX value
 34808                                  
 34809 00005F85 FA                      	cli
 34810                                  	; 15/08/2018
 34811 00005F86 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 34812                                  
 34813 00005F8C 8ED0                    	mov	SS,AX			; set up user's stack
 34814 00005F8E 89FC                    	mov	SP,DI			; and SP
 34815 00005F90 FB                      	sti
 34816                                  
 34817 00005F91 1E                      	push	DS			; fake long call to entry
 34818 00005F92 56                      	push	SI
 34819 00005F93 8EC2                    	mov	ES,DX			; set up proper seg registers
 34820 00005F95 8EDA                    	mov	DS,DX
 34821 00005F97 89D8                    	mov	AX,BX			; set up proper AX
 34822                                  
 34823 00005F99 CB                      	retf
 34824                                  
 34825                                  ; 04/08/2018 - Retro DOS v3.0
 34826                                  
 34827                                  ;----------------------------------------------------------------------------
 34828                                  ;
 34829                                  ;----------------------------------------------------------------------------
 34830                                  
 34831                                  ExecRead:
 34832 00005F9A E81600                  	CALL	Exec_Dealloc
 34833                                  	;mov	bx,[bp-8]
 34834 00005F9D 8B5EF8                  	MOV	bx,Exec_FH
 34835                                  
 34836 00005FA0 55                      	PUSH	BP
 34837 00005FA1 E81707                  	call	_$READ
 34838 00005FA4 5D                      	POP	BP
 34839                                  
 34840                                  	;CALL	Exec_Alloc
 34841                                  	;retn
 34842                                  	; 18/12/2022
 34843                                  	;jmp	short Exec_Alloc
 34844                                  
 34845                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 34846                                  
 34847                                  ;----------------------------------------------------------------------------
 34848                                  ;
 34849                                  ;----------------------------------------------------------------------------
 34850                                  
 34851                                  Exec_Alloc:
 34852 00005FA5 53                      	push	BX
 34853                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34854                                  	; 20/05/2019 - Retro DOS v4.0
 34855                                  	; MSDOS 6.0
 34856 00005FA6 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 34857 00005FAB E81000                  	call	ChangeOwners
 34858 00005FAE E851B3                  	call	LCritMEM
 34859 00005FB1 5B                      	pop	BX
 34860 00005FB2 C3                      	retn
 34861                                  
 34862                                  ;----------------------------------------------------------------------------
 34863                                  ;
 34864                                  ;----------------------------------------------------------------------------
 34865                                  
 34866                                  Exec_Dealloc:
 34867 00005FB3 53                      	push	BX
 34868                                  	;mov	bx,0
 34869 00005FB4 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 34870 00005FB6 E82EB3                  	call	ECritMEM
 34871 00005FB9 E80200                  	call	ChangeOwners
 34872 00005FBC 5B                      	pop	BX
 34873 00005FBD C3                      	retn
 34874                                  
 34875                                  ; 18/12/2022
 34876                                  %if 0
 34877                                  ;----------------------------------------------------------------------------
 34878                                  ;
 34879                                  ;----------------------------------------------------------------------------
 34880                                  
 34881                                  Exec_Alloc:
 34882                                  	push	BX
 34883                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34884                                  	; 20/05/2019 - Retro DOS v4.0
 34885                                  	; MSDOS 6.0
 34886                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 34887                                  	call	ChangeOwners
 34888                                  	call	LCritMEM
 34889                                  	pop	BX
 34890                                  	retn
 34891                                  
 34892                                  %endif
 34893                                  
 34894                                  ;----------------------------------------------------------------------------
 34895                                  ;
 34896                                  ;----------------------------------------------------------------------------
 34897                                  
 34898                                  ChangeOwners:
 34899 00005FBE 9C                      	pushf
 34900 00005FBF 50                      	push	AX
 34901                                  	;mov	ax,[bp-14]
 34902 00005FC0 8B46F2                  	mov	AX,Exec_Environ
 34903 00005FC3 E80900                  	call	ChangeOwner
 34904                                  	;mov	ax,[bp-18]
 34905 00005FC6 8B46EE                  	mov	AX,Exec_Load_Block
 34906 00005FC9 E80300                  	call	ChangeOwner
 34907 00005FCC 58                      	pop	AX
 34908 00005FCD 9D                      	popf
 34909                                  chgown_retn:
 34910 00005FCE C3                      	retn
 34911                                  
 34912                                  ;----------------------------------------------------------------------------
 34913                                  ;
 34914                                  ;----------------------------------------------------------------------------
 34915                                  
 34916                                  ChangeOwner:
 34917 00005FCF 09C0                    	or	AX,AX			; is area allocated?
 34918 00005FD1 74FB                    	jz	short chgown_retn	; no, do nothing
 34919 00005FD3 48                      	dec	AX
 34920 00005FD4 1E                      	push	DS
 34921 00005FD5 8ED8                    	mov	DS,AX
 34922 00005FD7 891E0100                	mov	[ARENA.OWNER],BX
 34923 00005FDB 1F                      	pop	DS
 34924 00005FDC C3                      	retn
 34925                                  
 34926                                  ;----------------------------------------------------------------------------
 34927                                  ;
 34928                                  ;----------------------------------------------------------------------------
 34929                                  
 34930                                  ; 20/05/2019 - Retro DOS v4.0
 34931                                  
 34932                                  	; MSDOS 6.0
 34933                                  Scan_Execname:
 34934 00005FDD C576E6                  	lds	SI,ExecName		; DS:SI points to name
 34935                                  Scan_Execname1:				; M028
 34936                                  Save_Begin:				;
 34937 00005FE0 89F1                    	mov	CX,SI			; CX= starting addr
 34938                                  Scan0:					;
 34939 00005FE2 AC                      	lodsb				; get char
 34940                                  
 34941 00005FE3 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 34942 00005FE5 74F9                    	jz	short Save_Begin	; yes, save si
 34943 00005FE7 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 34944 00005FE9 74F5                    	jz	short Save_Begin	; yes, save si
 34945 00005FEB 3C00                    	cmp	AL,0			; is end of name
 34946 00005FED 75F3                    	jnz	short Scan0		; no, continue scanning
 34947 00005FEF 29CE                    	sub	SI,CX			; get name's length
 34948 00005FF1 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 34949                                  
 34950 00005FF3 C3                      	retn
 34951                                  
 34952                                  ;----------------------------------------------------------------------------
 34953                                  ;
 34954                                  ;----------------------------------------------------------------------------
 34955                                  
 34956                                  ; 20/05/2019 - Retro DOS v4.0
 34957                                  
 34958                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34959                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 34960                                  
 34961                                  	; MSDOS 6.0
 34962                                  
 34963                                  Scan_Special_Entries:
 34964                                  
 34965 00005FF4 49                      	dec	CX			; cx= name length
 34966                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 34967                                  					;reset to current version
 34968                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 34969                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 34970                                  	;mov	word [ss:SPECIAL_VERSION],5
 34971                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 34972                                  
 34973                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 34974 00005FF5 36C706[BD0E]0500        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 34975                                  				; 0005h for Retro DOS v4.1 (MSDOS 5.0)
 34976                                  				; 24/09/2023
 34977                                  				; 1606h for Retro DOS v4.2 (MSDOS 6.22)
 34978                                  ;***	call	Reset_Version
 34979                                  
 34980                                  ;M060	push	SS
 34981                                  ;M060	pop	ES
 34982                                  
 34983 00005FFC 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 34984 00006001 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 34985 00006003 09F8                    	or	AX,DI			;M060; be sure the table exists
 34986 00006005 7427                    	jz	short End_List		;M060; If ZR then no table
 34987                                  
 34988                                  GetEntries:
 34989 00006007 268A05                  	mov	AL,[ES:DI]		; end of list
 34990 0000600A 08C0                    	or	AL,AL
 34991 0000600C 7420                    	jz	short End_List		; yes
 34992                                  
 34993 0000600E 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 34994 00006013 38C8                    	cmp	AL,CL			; same length ?
 34995 00006015 751B                    	jnz	short SkipOne 		; no
 34996                                  
 34997 00006017 47                      	inc	DI			; es:di -> special name
 34998 00006018 51                      	push	CX			; save length and name addr
 34999 00006019 56                      	push	SI
 35000                                  
 35001                                  ; M050 - BEGIN
 35002                                  
 35003 0000601A 50                      	push	ax			; save len
 35004                                  sse_next_char:
 35005 0000601B AC                      	lodsb
 35006 0000601C E8ECEE                  	call	UCase
 35007 0000601F AE                      	scasb
 35008 00006020 750D                    	jne	short Not_Matched
 35009 00006022 E2F7                    	loop	sse_next_char
 35010                                  	
 35011                                  ;	repz	cmpsb			; same name ?
 35012                                  ;	jnz	short Not_Matched	; no
 35013                                  
 35014 00006024 58                      	pop	ax			; take len off the stack
 35015                                  
 35016                                  ; M050 - END
 35017                                  
 35018 00006025 268B05                  	mov	AX,[ES:DI]		; get special version
 35019 00006028 36A3[BD0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 35020                                  
 35021                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 35022                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 35023                                  
 35024 0000602C 5E                      	pop	SI
 35025 0000602D 59                      	pop	CX
 35026                                  	; 18/12/2022
 35027                                  	;jmp	SHORT End_List
 35028                                  
 35029                                  	; 18/12/2022
 35030                                  End_List:
 35031 0000602E C3                      	retn
 35032                                  
 35033                                  Not_Matched:
 35034 0000602F 58                      	pop	ax			; get len from stack ; M050
 35035 00006030 5E                      	pop	SI			; restore si,cx
 35036 00006031 59                      	pop	CX
 35037                                  
 35038                                  SkipOne:
 35039 00006032 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 35040 00006037 30E4                    	xor	AH,AH			; position to next entry
 35041 00006039 01C7                    	add	DI,AX
 35042                                  
 35043 0000603B 83C703                  	add	DI,3			; DI -> next entry length
 35044                                  ;***	add	DI,4			; DI -> next entry length
 35045                                  
 35046 0000603E EBC7                    	jmp	short GetEntries
 35047                                  
 35048                                  	; 18/12/2022
 35049                                  ;End_List:
 35050                                  	;retn
 35051                                  
 35052                                  ; 04/08/2018 - Retro DOS v3.0
 35053                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 633Dh
 35054                                  
 35055                                  ;----------------------------------------------------------------------------
 35056                                  ;SUBTTL Terminate and stay resident handler
 35057                                  ;
 35058                                  ; Input:    DX is an offset from CurrentPDB at which to
 35059                                  ;	    truncate the current block.
 35060                                  ;
 35061                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 35062                                  ;	    paragraphs long. An exit is simulated via resetting CurrentPDB
 35063                                  ;	    and restoring the vectors.
 35064                                  ;
 35065                                  ;----------------------------------------------------------------------------
 35066                                  
 35067                                  	; 20/05/2019 - Retro DOS v4.0
 35068                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 35069                                  
 35070                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35071                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 35072                                  
 35073                                  _$KEEP_PROCESS:
 35074 00006040 50                      	push	AX			; keep exit code around
 35075                                  	;mov	byte [SS:EXIT_TYPE],3
 35076 00006041 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 35077 00006047 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 35078 0000604C 83FA06                  	cmp	DX,6h			; keep enough space around for system
 35079 0000604F 7303                    	jae	short Keep_Shrink	; info
 35080                                  
 35081 00006051 BA0600                  	mov	DX,6h
 35082                                  
 35083                                  Keep_Shrink:
 35084 00006054 89D3                    	mov	BX,DX
 35085 00006056 53                      	push	BX
 35086 00006057 06                      	push	ES
 35087 00006058 E82D02                  	call	_$SETBLOCK		; ignore return codes.
 35088 0000605B 1F                      	pop	DS
 35089 0000605C 5B                      	pop	BX
 35090 0000605D 7207                    	jc	short Keep_Done		; failed on modification
 35091                                  
 35092 0000605F 8CD8                    	mov	AX,DS
 35093 00006061 01D8                    	add	AX,BX
 35094                                  	;mov	[2],ax
 35095 00006063 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 35096                                  
 35097                                  Keep_Done:
 35098 00006066 58                      	pop	AX
 35099 00006067 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 35100                                  
 35101                                  ;----------------------------------------------------------------------------
 35102                                  ;
 35103                                  ;----------------------------------------------------------------------------
 35104                                  
 35105                                  STAY_RESIDENT:
 35106                                  	;mov	ax,3100h
 35107 00006069 B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 35108 0000606C 83C20F                  	add	DX,15
 35109 0000606F D1DA                    	rcr	DX,1
 35110 00006071 B103                    	mov	CL,3
 35111 00006073 D3EA                    	shr	DX,CL
 35112                                  
 35113 00006075 E98FA2                  	jmp	COMMAND
 35114                                  
 35115                                  ;----------------------------------------------------------------------------
 35116                                  ;SUBTTL $EXIT - return to parent process
 35117                                  ;   Assembler usage:
 35118                                  ;	    MOV     AL, code
 35119                                  ;	    MOV     AH, Exit
 35120                                  ;	    INT     int_command
 35121                                  ;   Error return:
 35122                                  ;	    None.
 35123                                  ;
 35124                                  ;----------------------------------------------------------------------------
 35125                                  
 35126                                  	; 20/05/2019 - Retro DOS v4.0
 35127                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 35128                                  
 35129                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35130                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 35131                                  _$EXIT:
 35132                                  	; 04/08/2018 - Retro DOS v3.0
 35133                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 35134 00006078 30E4                    	xor	AH,AH
 35135 0000607A 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 35136 0000607F 08E4                    	or	AH,AH
 35137                                  	;mov	BYTE [SS:EXIT_TYPE],0
 35138 00006081 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 35139 00006087 7406                    	jz	short exit_inner
 35140                                  	;mov	BYTE [SS:EXIT_TYPE],1
 35141 00006089 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 35142                                  
 35143                                  	;entry	Exit_inner
 35144                                  exit_inner:
 35145 0000608F E8F3A3                  	call	Get_User_Stack		;PBUGBUG
 35146                                  
 35147 00006092 36FF36[3003]            	push	word [ss:CurrentPDB]
 35148                                  	;pop	word [si+14h]
 35149 00006097 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 35150 0000609A EB08                    	jmp	short abort_inner
 35151                                  
 35152                                  ;BREAK <$ABORT -- Terminate a process>
 35153                                  ;----------------------------------------------------------------------------
 35154                                  ; Inputs:
 35155                                  ;	user_CS:00 must point to valid program header block
 35156                                  ; Function:
 35157                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 35158                                  ;	to the terminate address
 35159                                  ; Returns:
 35160                                  ;	TO THE TERMINATE ADDRESS
 35161                                  ;----------------------------------------------------------------------------
 35162                                  
 35163                                  _$ABORT:
 35164 0000609C 30C0                    	xor	AL,AL
 35165                                  	;mov	byte [SS:EXIT_TYPE],0
 35166                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 35167 0000609E 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 35168                                  
 35169                                  	; abort_inner must have AL set as the exit code! The exit type
 35170                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 35171                                  	; to be correct as the one that is terminating.
 35172                                  
 35173                                  abort_inner:
 35174 000060A4 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 35175 000060A9 36A3[3403]              	mov	[SS:exit_code],AX
 35176 000060AD E8D5A3                  	call	Get_User_Stack
 35177                                  
 35178                                  	;mov	ds,[si+14h]
 35179 000060B0 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 35180 000060B3 31C0                    	xor	AX,AX
 35181 000060B5 8EC0                    	mov	ES,AX
 35182                                  	;mov	si,10
 35183 000060B7 BE0A00                  	mov	SI,SAVEXIT
 35184                                  	;mov	di,88h
 35185 000060BA BF8800                  	mov	DI,addr_int_terminate
 35186 000060BD A5                      	movsw
 35187 000060BE A5                      	movsw
 35188 000060BF A5                      	movsw
 35189 000060C0 A5                      	movsw
 35190 000060C1 A5                      	movsw
 35191 000060C2 A5                      	movsw
 35192 000060C3 E959F2                  	jmp	reset_environment
 35193                                  
 35194                                  ;----------------------------------------------------------------------------
 35195                                  ;
 35196                                  ; fixexepatch will point to this is DOS loads low. 
 35197                                  ;
 35198                                  ;----------------------------------------------------------------------------
 35199                                  ; MSDOS 6.0
 35200                                  
 35201                                  ; 29/04/2019 - Retro DOS v4.0
 35202                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 35203                                  
 35204                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35205                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 35206                                  
 35207                                  RetExePatch: ; proc near
 35208                                  	
 35209 000060C6 C3                      	retn
 35210                                  
 35211                                  ;============================================================================
 35212                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 35213                                  ;============================================================================
 35214                                  ; 04/08/2018 - Retro DOS v3.0
 35215                                  ; 14/05/2019 - Retro DOS v4.0
 35216                                  
 35217                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 35218                                  
 35219                                  ;**
 35220                                  ;	Microsoft Confidential
 35221                                  ;	Copyright (C) Microsoft Corporation 1991
 35222                                  ;	All Rights Reserved.
 35223                                  ;
 35224                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 35225                                  ;	I/O specs are defined in DISPATCH.
 35226                                  ;
 35227                                  ;	$ALLOC
 35228                                  ;	$SETBLOCK
 35229                                  ;	$DEALLOC
 35230                                  ;	$AllocOper
 35231                                  ;	arena_free_process
 35232                                  ;	arena_next
 35233                                  ;	check_signature
 35234                                  ;	Coalesce
 35235                                  ;
 35236                                  ;	Modification history:
 35237                                  ;
 35238                                  ;	    Created: ARR 30 March 1983
 35239                                  ;
 35240                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 35241                                  ;		      M003 - added support for link/unlink UMBs from
 35242                                  ;			     DOS arena chain. 7/18/90
 35243                                  ;		      M009 - Added error returns invalid function and 
 35244                                  ;			     arena trashed in set link state call.
 35245                                  ;		      M010 - Release UMB arenas allocated to current PDB
 35246                                  ;			     if UMB_HEAD is initialized.
 35247                                  ;
 35248                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 35249                                  ;			     support. Please see under M009 in 
 35250                                  ;			     ..\inc\dossym.inc. 8/31/90.
 35251                                  ;
 35252                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 35253                                  ;			     sure that umb_head arena is valid and also make
 35254                                  ;			     sure that the previous arena is pointing to 
 35255                                  ;			     umb_head.
 35256                                  ;
 35257                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 35258                                  ;			     set allloc strategy.
 35259                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 35260                                  ;			     bx in AllocSetStrat.
 35261                                  ;
 35262                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 35263                                  ;			     a bit to indicate to dos dispatcher to turn
 35264                                  ;			     a20 off before iret. See M016.
 35265                                  ;
 35266                                  
 35267                                  ;	BREAK	<memory allocation utility routines>
 35268                                  
 35269                                  
 35270                                  ; 15/04/2018 - Retro DOS v2.0
 35271                                  ;----------------------------------------------------------------------------
 35272                                  ; xenix memory calls for MSDOS
 35273                                  ;
 35274                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 35275                                  ; arena_owner_system are all equal to zero and are contained in DI.
 35276                                  ;
 35277                                  ;INCLUDE DOSSEG.ASM
 35278                                  
 35279                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 35280                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 35281                                  
 35282                                  ;.xlist
 35283                                  ;.xcref
 35284                                  ;INCLUDE DOSSYM.ASM
 35285                                  ;INCLUDE DEVSYM.ASM
 35286                                  ;.cref
 35287                                  ;.list
 35288                                  
 35289                                  ;TITLE ALLOC.ASM - memory arena manager
 35290                                  ;NAME Alloc
 35291                                  
 35292                                  ;SUBTTL memory allocation utility routines
 35293                                  ;PAGE
 35294                                  ;
 35295                                  ; arena data
 35296                                  ;
 35297                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 35298                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 35299                                  ;       i_need  FirstArena,WORD         ; first free block found
 35300                                  ;       i_need  BestArena,WORD          ; best free block found
 35301                                  ;       i_need  LastArena,WORD          ; last free block found
 35302                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 35303                                  
 35304                                  ;**	Arena_Free_Process
 35305                                  ;----------------------------------------------------------------------------
 35306                                  ;	Free all arena blocks allocated to a prOcess
 35307                                  ;
 35308                                  ;	ENTRY	(bx) = PID of process
 35309                                  ;	EXIT	none
 35310                                  ;	USES	????? BUGBUG
 35311                                  ;----------------------------------------------------------------------------
 35312                                  
 35313                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35314                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 35315                                  
 35316                                  arena_free_process:
 35317                                  	; 14/05/2019 - Retro DOS v4.0
 35318                                  	; 04/08/2018 - Retro DOS v3.0
 35319 000060C7 36A1[2400]                      MOV	AX,[SS:arena_head]
 35320                                  arena_free_process_start:
 35321 000060CB BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 35322                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 35323 000060CE E82F00                          CALL	check_signature         ; ES <- AX, check for valid block
 35324                                  
 35325                                  arena_free_process_loop:
 35326                                          ;retc
 35327 000060D1 7225                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 35328 000060D3 06                      	PUSH    ES
 35329 000060D4 1F                              POP     DS
 35330                                  	;cmp	[1],bx 
 35331 000060D5 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 35332 000060D9 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 35333                                  	;mov	[1],di
 35334 000060DB 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 35335                                  
 35336                                  arena_free_next:
 35337                                  	;cmp	byte [di],5Ah ;'Z'
 35338 000060DF 803D5A                          CMP     BYTE [DI],arena_signature_end
 35339                                                                          ; end of road, Jack?
 35340                                          ;retz				; never come back no more
 35341                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 35342                                  	; 14/05/2019
 35343                                  	; MSDOS 6.0
 35344 000060E2 7405                    	jz	short arena_chk_umbs
 35345                                          
 35346 000060E4 E81200                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 35347 000060E7 EBE8                            JMP     SHORT arena_free_process_loop
 35348                                  
 35349                                  	; MSDOS 6.0
 35350                                  arena_chk_umbs:				; M010 - Start
 35351                                  	; 20/05/2019
 35352 000060E9 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 35353 000060ED 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 35354 000060F0 741D                    	je	short ret_label		; N: we're done
 35355                                  	
 35356 000060F2 8CDF                    	mov	di,ds			; di = last arena
 35357 000060F4 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 35358                                  	;jae	short ret_label		; Y: we've scanned umbs also. done.
 35359                                  	;jmp	short arena_free_process_start
 35360                                  					; M010 - End
 35361                                  	; 10/03/2024 (PCDOS 7.1 IBMDOS.COM)
 35362 000060F6 72D3                    	jb	short arena_free_process_start
 35363                                  
 35364                                  	; 10/03/2024
 35365                                  AFP_RETN:
 35366 000060F8 C3                      	RETN
 35367                                  
 35368                                  ;	BREAK	<Arena Helper Routines>
 35369                                  
 35370                                  ;**	Arena_Next - Find Next item in Arena
 35371                                  ;----------------------------------------------------------------------------
 35372                                  ;	ENTRY	DS - pointer to block head
 35373                                  ;		(di) = 0
 35374                                  ;	EXIT	AX,ES - pointers to next head
 35375                                  ;		'C' set iff arena damaged
 35376                                  ;----------------------------------------------------------------------------
 35377                                  
 35378                                  arena_next:
 35379 000060F9 8CD8                            MOV     AX,DS                   ; AX <- current block
 35380 000060FB 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 35381 000060FF 40                              INC     AX                      ; remember that header!
 35382                                  
 35383                                  ;       fall into check_signature and return
 35384                                  ;
 35385                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 35386                                  ;       RETN
 35387                                  
 35388                                  ;**	Check_Signature - Check Memory Block Signature
 35389                                  ;----------------------------------------------------------------------------
 35390                                  ;	ENTRY	(AX) = address of block header
 35391                                  ;		(di) = 0
 35392                                  ;	EXIT	 ES = AX
 35393                                  ;		'C' clear if signature good
 35394                                  ;		'C' set if signature bad
 35395                                  ;	USES	ES, Flags
 35396                                  ;----------------------------------------------------------------------------
 35397                                  
 35398                                  check_signature:        
 35399                                  
 35400 00006100 8EC0                    	MOV     ES,AX                   ; ES <- AX
 35401                                  	;cmp	byte [es:di],4Dh ; 'M'
 35402 00006102 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 35403                                                                          ; IF next signature = not_end THEN
 35404 00006106 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 35405                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 35406 00006108 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 35407                                                                          ; IF next signature = end then
 35408 0000610C 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 35409 0000610E F9                              STC                             ; set error
 35410                                  ret_label: ; MSDOS 6.0
 35411                                  ;AFP_RETN:	; 10/03/2024
 35412                                   	; Retro DOS v2.0 - 05/03/2018
 35413                                  check_signature_ok:
 35414                                  COALESCE_RETN:
 35415 0000610F C3                      	RETN
 35416                                  
 35417                                  ;**	Coalesce - Combine free blocks ahead with current block
 35418                                  ;----------------------------------------------------------------------------
 35419                                  ;	Coalesce adds the block following the argument to the argument block,
 35420                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 35421                                  ;	some callers (such as $setblock) use it to join a free block to it's
 35422                                  ;	preceeding allocated block.
 35423                                  ;
 35424                                  ;	ENTRY	(ds) = pointer to the head of a free block
 35425                                  ;		(di) = 0
 35426                                  ;	EXIT	'C' clear if OK
 35427                                  ;		  (ds) unchanged, this block updated
 35428                                  ;		  (ax) = address of next block, IFF not at end
 35429                                  ;		'C' set if arena trashed
 35430                                  ;	USES	(cx)
 35431                                  ;----------------------------------------------------------------------------
 35432                                          
 35433                                  Coalesce:
 35434                                  	;cmp	byte [di],5Ah ; 'Z'
 35435 00006110 803D5A                  	CMP     BYTE [DI],arena_signature_end
 35436                                                                          ; IF current signature = END THEN
 35437                                          ;retz				;   GOTO ok
 35438 00006113 74FA                            jz	short COALESCE_RETN
 35439 00006115 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 35440                                          ;retc				; IF no error THEN GOTO check
 35441 00006118 72F5                    	jc	short COALESCE_RETN
 35442                                  
 35443                                  coalesce_check:
 35444                                  	;cmp	[es:1],di
 35445 0000611A 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 35446                                          ;retnz				; IF next block isnt free THEN return
 35447 0000611F 75EE                            JNZ	SHORT COALESCE_RETN
 35448                                  	;mov	cx,[ES:3]
 35449 00006121 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 35450 00006126 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 35451                                          ;ADD	[3],CX
 35452 00006127 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 35453 0000612B 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 35454 0000612E 880D                            MOV     [DI],CL
 35455 00006130 EBDE                            JMP     SHORT Coalesce		; try again
 35456                                  
 35457                                  ; 04/08/2018 - Retro DOS v3.0
 35458                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 35459                                  
 35460                                  ;	BREAK  <$Alloc - allocate space in memory>
 35461                                  
 35462                                  ; MSDOS 6.0
 35463                                  ;----------------------------------------------------------------------------
 35464                                  ;**	$Alloc - Allocate Memory Space
 35465                                  ;
 35466                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 35467                                  ;	Alloc returns a pointer to a free block of memory that
 35468                                  ;	has the requested size in paragraphs.
 35469                                  ;
 35470                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 35471                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 35472                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 35473                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 35474                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 35475                                  ;
 35476                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 35477                                  ;	starts from arena_head.
 35478                                  ;
 35479                                  ;	Assembler usage:
 35480                                  ;           MOV     BX,size
 35481                                  ;           MOV     AH,Alloc
 35482                                  ;           INT     21h
 35483                                  ;
 35484                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 35485                                  ;	so that we start searching the arena at it's first non-trivial free
 35486                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 35487                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 35488                                  ;	doesn't have too many memory objects in it beyond the first free one.
 35489                                  ;	verify that this is true; if so, this can stay as is
 35490                                  ;
 35491                                  ;	ENTRY	(bx) = requested size, in bytes
 35492                                  ;		(DS) = (ES) = DOSGROUP
 35493                                  ;	EXIT	'C' clear if memory allocated
 35494                                  ;		  (ax:0) = address of requested memory
 35495                                  ;		'C' set if request failed
 35496                                  ;		  (AX) = error_not_enough_memory
 35497                                  ;		    (bx) = max size we could have allocated
 35498                                  ;		  (ax) = error_arena_trashed
 35499                                  ;	USES	All
 35500                                  ;----------------------------------------------------------------------------
 35501                                  
 35502                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35503                                  ;----------------------------------------------------------------------------
 35504                                  ;SUBTTL $Alloc - allocate space in memory
 35505                                  ;
 35506                                  ;   Assembler usage:
 35507                                  ;           MOV     BX,size
 35508                                  ;           MOV     AH,Alloc
 35509                                  ;           INT     21h
 35510                                  ;         AX:0 is pointer to allocated memory
 35511                                  ;         BX is max size if not enough memory
 35512                                  ;
 35513                                  ;   Description:
 35514                                  ;           Alloc returns  a  pointer  to  a  free  block of
 35515                                  ;       memory that has the requested  size  in  paragraphs.
 35516                                  ;
 35517                                  ;   Error return:
 35518                                  ;           AX = error_not_enough_memory
 35519                                  ;              = error_arena_trashed
 35520                                  ;----------------------------------------------------------------------------
 35521                                  
 35522                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 35523                                  
 35524                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35525                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 35526                                  
 35527                                  _$ALLOC:
 35528                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 35529                                  	; 14/05/2019 - Retro DOS v4.0
 35530                                  	; 04/08/2018 - Retro DOS v3.0
 35531                                  	;EnterCrit critMem
 35532 00006132 E8B2B1                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35533                                  
 35534                                  ; 17/12/2022
 35535                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35536                                  ;%if 0
 35537                                  	; 14/05/2019
 35538 00006135 16                      	push	ss
 35539 00006136 1F                      	pop	ds
 35540                                  
 35541                                  	; MSDOS 6.0
 35542                                  	;mov	ax,[ss:arena_head]
 35543                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35544                                  
 35545 00006137 A1[2400]                	mov	ax,[arena_head]
 35546 0000613A A3[8E00]                	mov	[START_ARENA],ax
 35547                                  	
 35548                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35549 0000613D F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 35550                                  					; Q: should we start scanning from 
 35551                                  					;    UMB's
 35552 00006142 740D                    	jz	short norm_alloc	; N: scan from arena_head
 35553                                  		
 35554                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35555                                  	;cmp	word [UMB_HEAD],-1
 35556                                  	;je	short norm_alloc	; N: scan from arena_head
 35557                                  
 35558                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35559 00006144 F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 35560 00006149 7406                    	jz	short norm_alloc	; N: scan from arena_head
 35561                                  	
 35562                                  	;mov	ax,[ss:UMB_HEAD]
 35563                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35564 0000614B A1[8C00]                	mov	ax,[UMB_HEAD]
 35565 0000614E A3[8E00]                	mov	[START_ARENA],ax
 35566                                  					; M000 - end
 35567                                  norm_alloc:
 35568 00006151 31C0                            XOR     AX,AX
 35569 00006153 89C7                            MOV     DI,AX
 35570                                  	; 15/03/2018
 35571                                          ;MOV	[SS:FirstArena],AX	; init the options
 35572                                          ;MOV	[SS:BestArena],AX
 35573                                          ;MOV	[SS:LastArena],AX
 35574                                  	; 14/05/2019
 35575 00006155 A3[4003]                	MOV	[FirstArena],AX		; init the options
 35576 00006158 A3[4203]                        MOV	[BestArena],AX
 35577 0000615B A3[4403]                        MOV	[LastArena],AX
 35578 0000615E 50                              PUSH    AX                      ; alloc_max <- 0
 35579                                  	; 04/08/2018
 35580                                  start_scan:
 35581                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35582                                  	;MOV	AX,[arena_head]
 35583                                  
 35584                                  	; 14/05/2019	
 35585                                  	; MSDOS 6.0
 35586                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35587 0000615F A1[8E00]                	mov	ax,[START_ARENA]
 35588                                  
 35589                                  	; 27/09/2023 (BugFix) (*)
 35590                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 35591                                  start_scan_x:
 35592                                  
 35593 00006162 E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 35594 00006165 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 35595                                  
 35596                                  ;%endif
 35597                                  
 35598                                  ; 17/12/2022
 35599                                  %if 0
 35600                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35601                                  
 35602                                  	; MSDOS 6.0
 35603                                  	mov	ax,[ss:arena_head]
 35604                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35605                                  
 35606                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35607                                  					; Q: should we start scanning from
 35608                                  					;    UMB's
 35609                                  	jz	short norm_alloc	; N: scan from arena_head
 35610                                  		
 35611                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35612                                  	;je	short norm_alloc	; N: scan from arena_head
 35613                                  
 35614                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35615                                  	jz	short norm_alloc	; N: scan from arena_head
 35616                                  	
 35617                                  	mov	ax,[ss:UMB_HEAD]
 35618                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35619                                  					; M000 - end
 35620                                  norm_alloc:
 35621                                          XOR     AX,AX
 35622                                          MOV     DI,AX
 35623                                  	; 15/03/2018
 35624                                  	MOV	[SS:FirstArena],AX	; init the options
 35625                                  	MOV	[SS:BestArena],AX
 35626                                  	MOV	[SS:LastArena],AX
 35627                                          PUSH    AX                      ; alloc_max <- 0
 35628                                  	; 04/08/2018
 35629                                  start_scan:
 35630                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35631                                  	; 14/05/2019	
 35632                                  	; MSDOS 6.0
 35633                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35634                                  	CALL    check_signature         ; ES <- AX, carry set if error
 35635                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 35636                                  %endif
 35637                                  
 35638                                  alloc_scan:
 35639 00006167 06                              PUSH    ES
 35640 00006168 1F                              POP     DS                      ; DS <- ES
 35641 00006169 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 35642 0000616D 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 35643                                  
 35644                                  alloc_next:
 35645                                  	; MSDOS 6.0			; M000 - start 
 35646 0000616F 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35647 00006175 741C                    	jz	short norm_strat	; N: see if we reached last arena
 35648                                  	
 35649 00006177 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 35650                                  					; Q: is alloc strategy high_first
 35651 0000617D 7414                    	jz	short norm_strat	; N: see if we reached last arena
 35652 0000617F 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 35653 00006183 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 35654                                  					;    arena_head
 35655 00006188 7509                    	jne	short norm_strat	; N: see if we reached last arena
 35656 0000618A 8CD8                    	mov	ax,ds			; ax = current block
 35657 0000618C 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 35658 00006191 EB03                    	jmp	short alloc_chk_end
 35659                                  
 35660                                  norm_strat:
 35661                                  	;cmp	byte [di],5Ah ; 'Z'
 35662 00006193 803D5A                          CMP     BYTE [DI],arena_signature_end
 35663                                                                          ; IF current block is last THEN
 35664                                  alloc_chk_end:
 35665 00006196 740E                            JZ      SHORT alloc_end		;   GOTO end
 35666 00006198 E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 35667 0000619B 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 35668                                  
 35669                                  alloc_err:
 35670 0000619D 58                              POP     AX
 35671                                  
 35672                                  alloc_trashed:
 35673                                  	;LeaveCrit critMem
 35674 0000619E E861B1                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35675                                          ;error	error_arena_trashed
 35676                                  	;mov	al,7
 35677 000061A1 B007                    	MOV	AL,error_arena_trashed
 35678                                  alloc_errj:
 35679 000061A3 E998A4                  	JMP	SYS_RET_ERR
 35680                                  
 35681                                  alloc_end:
 35682                                  	; 18/05/2019
 35683 000061A6 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 35684 000061AC 7403                    	jz	short alloc_chk 
 35685 000061AE E98400                  	jmp	alloc_do_split
 35686                                  
 35687                                  alloc_chk:
 35688                                  	; MSDOS 6.0
 35689 000061B1 36A1[2400]              	mov	ax,[ss:arena_head]
 35690 000061B5 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 35691 000061BA 740E                    	je	short alloc_fail	; Y: not enough memory
 35692                                  					; N:
 35693                                  					; Q: is the alloc strat HIGH_ONLY
 35694 000061BC 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 35695 000061C2 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 35696                                  	
 35697 000061C4 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 35698                                  	; 27/09/2023 (*)
 35699 000061C8 EB98                    	jmp	short start_scan_x ; (*) ; (BugFix)
 35700                                  	;jmp	short start_scan
 35701                                  					; M000 - end
 35702                                  
 35703                                  alloc_fail:
 35704                                          ;invoke Get_User_Stack
 35705 000061CA E8B8A2                          CALL	Get_User_Stack
 35706 000061CD 5B                      	POP     BX
 35707                                          ;MOV	[SI].user_BX,BX
 35708                                  	;MOV	[SI+2],BX
 35709 000061CE 895C02                  	mov	[SI+user_env.user_BX],bx
 35710                                  	;LeaveCrit critMem
 35711 000061D1 E82EB1                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35712                                  	;error	error_not_enough_memory
 35713                                  	;mov	al,8
 35714 000061D4 B008                    	MOV	AL,error_not_enough_memory
 35715                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35716 000061D6 EBCB                    	jmp	short alloc_errj
 35717                                  	;JMP	SYS_RET_ERR
 35718                                  
 35719                                  alloc_free:
 35720 000061D8 E835FF                          CALL    Coalesce		; add following free block to current
 35721 000061DB 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 35722 000061DD 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35723 000061E1 5A                              POP     DX                      ; check for max found size
 35724 000061E2 39D1                            CMP     CX,DX
 35725 000061E4 7602                            JNA     SHORT alloc_test
 35726 000061E6 89CA                            MOV     DX,CX
 35727                                  
 35728                                  alloc_test:
 35729 000061E8 52                              PUSH    DX
 35730 000061E9 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 35731 000061EB 7782                    	JA      SHORT alloc_next	;   GOTO next
 35732                                  
 35733                                  	; 15/03/2018
 35734 000061ED 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 35735 000061F3 7505                    	JNZ	SHORT alloc_best
 35736 000061F5 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found
 35737                                  alloc_best:
 35738 000061FA 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 35739 00006200 740E                            JZ      SHORT alloc_make_best	; initial best
 35740 00006202 06                              PUSH	ES
 35741 00006203 368E06[4203]                    MOV     ES,[SS:BestArena]
 35742 00006208 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 35743 0000620D 07                              POP	ES
 35744 0000620E 7605                            JBE     SHORT alloc_last
 35745                                  alloc_make_best:
 35746 00006210 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 35747                                  alloc_last:
 35748 00006215 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 35749 0000621A E952FF                          JMP     alloc_next
 35750                                  ;
 35751                                  ; split the block high
 35752                                  ;
 35753                                  alloc_do_split_high:
 35754 0000621D 368E1E[4403]                    MOV     DS,[SS:LastArena]
 35755 00006222 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35756 00006226 29D9                            SUB     CX,BX
 35757 00006228 8CDA                            MOV     DX,DS
 35758 0000622A 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 35759 0000622C 01CA                            ADD     DX,CX                   ; point to next block
 35760 0000622E 8EC2                            MOV     ES,DX                   ; no decrement!
 35761 00006230 49                              DEC     CX
 35762 00006231 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 35763 00006233 EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 35764                                  ;
 35765                                  ; we have scanned memory and have found all appropriate blocks
 35766                                  ; check for the type of allocation desired; first and best are identical
 35767                                  ; last must be split high
 35768                                  ;
 35769                                  alloc_do_split:
 35770                                  
 35771                                  ; 17/12/2022
 35772                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35773                                  ;%if 0
 35774                                  	; 14/05/2019
 35775                                  	; MSDOS 6.0			; M000 - start
 35776                                  	;xor	cx,cx
 35777 00006235 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 35778                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35779 0000623A 80E13F                  	and	cl,3Fh
 35780                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35781 0000623D 80F901                  	cmp	cl,BEST_FIT
 35782 00006240 77DB                    	ja	short alloc_do_split_high
 35783                                  ;%endif
 35784                                  
 35785                                  	; 17/12/2022
 35786                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35787                                  	; MSDOS 6.0 & MSDOS 5.0
 35788                                  	;xor	cx,cx
 35789                                  	;mov	cl,[ss:AllocMethod]
 35790                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35791                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35792                                  	;ja	short alloc_do_split_high
 35793                                  
 35794                                  	; 15/03/2018
 35795                                          ;;CMP	BYTE [SS:AllocMethod], 1
 35796                                  	; 04/08/2018
 35797                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 35798                                          ;JA	SHORT alloc_do_split_high
 35799                                          
 35800 00006242 368E1E[4003]            	MOV     DS,[SS:FirstArena]
 35801 00006247 7205                    	JB      SHORT alloc_get_size
 35802 00006249 368E1E[4203]            	MOV     DS,[SS:BestArena]
 35803                                  
 35804                                  alloc_get_size:
 35805 0000624E 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35806 00006252 29D9                            SUB     CX,BX                   ; get room left over
 35807 00006254 8CD8                            MOV     AX,DS
 35808 00006256 89C2                            MOV     DX,AX                   ; save for owner setting
 35809 00006258 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 35810 0000625A 01D8                            ADD     AX,BX
 35811 0000625C 40                              INC     AX                      ; remember the header
 35812 0000625D 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 35813 0000625F 49                              DEC     CX                      ; CX <- size of split block
 35814                                  alloc_set_sizes:
 35815 00006260 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 35816 00006264 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 35817                                  	;mov	bl,4Dh ; 'M'
 35818 00006269 B34D                            MOV     BL,arena_signature_normal
 35819 0000626B 861D                            XCHG    BL,[DI]			; current signature <- 4D
 35820 0000626D 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 35821 00006270 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35822                                  
 35823                                  alloc_set_owner:
 35824 00006275 8EDA                            MOV     DS,DX
 35825 00006277 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 35826 0000627B A30100                          MOV     [ARENA.OWNER],AX
 35827 0000627E 8CD8                            MOV     AX,DS
 35828 00006280 40                              INC     AX
 35829 00006281 5B                              POP     BX
 35830                                  	;LeaveCrit critMem
 35831 00006282 E87DB0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35832                                  	
 35833                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35834                                  alloc_ok:
 35835                                          ;transfer SYS_RET_OK
 35836 00006285 E9ADA3                  	JMP	SYS_RET_OK
 35837                                  
 35838                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 35839                                  
 35840                                  ; MSDOS 6.0
 35841                                  ;----------------------------------------------------------------------------
 35842                                  ;**	$SETBLOCK - Change size of an Allocated Block
 35843                                  ;
 35844                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 35845                                  ;	any following free space onto this block; then we try to trim the
 35846                                  ;	block down to the size requested.
 35847                                  ;
 35848                                  ;	Note that if the guy wants to grow the block but that growth fails,
 35849                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 35850                                  ;	Thus the maximum-size-possible value that we return has already
 35851                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 35852                                  ;
 35853                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 35854                                  ;		finish it's work. For this reason we build the allocsf
 35855                                  ;		structure on the frame, to make us compatible with $ALLOCs
 35856                                  ;		code.
 35857                                  ;
 35858                                  ;	ENTRY	(es) = segment of old block
 35859                                  ;		(bx) = newsize
 35860                                  ;		(ah) = SETBLOCK
 35861                                  ;
 35862                                  ;	EXIT	'C' clear if OK
 35863                                  ;		'C' set if error
 35864                                  ;		  (ax) = error_invalid_block
 35865                                  ;		       = error_arena_trashed
 35866                                  ;		       = error_not_enough_memory
 35867                                  ;		       = error_invalid_function
 35868                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 35869                                  ;	USES	???? BUGBUG
 35870                                  ;----------------------------------------------------------------------------
 35871                                  
 35872                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35873                                  ;----------------------------------------------------------------------------
 35874                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 35875                                  ;
 35876                                  ;   Assembler usage:
 35877                                  ;           MOV     ES,block
 35878                                  ;           MOV     BX,newsize
 35879                                  ;           MOV     AH,setblock
 35880                                  ;           INT     21h
 35881                                  ;         if setblock fails for growing, BX will have the maximum
 35882                                  ;         size possible
 35883                                  ;   Error return:
 35884                                  ;           AX = error_invalid_block
 35885                                  ;              = error_arena_trashed
 35886                                  ;              = error_not_enough_memory
 35887                                  ;              = error_invalid_function
 35888                                  ;----------------------------------------------------------------------------
 35889                                  
 35890                                  _$SETBLOCK:        
 35891                                  	; 04/08/2018 - Retro DOS v3.0
 35892                                  	;EnterCrit   critMem
 35893 00006288 E85CB0                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35894                                  
 35895 0000628B BF0000                  	MOV     DI,ARENA.SIGNATURE
 35896 0000628E 8CC0                            MOV     AX,ES
 35897 00006290 48                              DEC     AX
 35898 00006291 E86CFE                          CALL    check_signature
 35899 00006294 7303                            JNC     SHORT setblock_grab
 35900                                  
 35901                                  setblock_bad:
 35902 00006296 E905FF                          JMP     alloc_trashed
 35903                                  
 35904                                  setblock_grab:
 35905 00006299 8ED8                            MOV     DS,AX
 35906 0000629B E872FE                          CALL    Coalesce
 35907 0000629E 72F6                            JC      SHORT setblock_bad
 35908 000062A0 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35909 000062A4 51                              PUSH    CX
 35910 000062A5 39CB                            CMP     BX,CX
 35911 000062A7 76A5                            JBE     SHORT alloc_get_size
 35912 000062A9 E91EFF                          JMP     alloc_fail
 35913                                  
 35914                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 35915                                  
 35916                                  ; MSDOS 6.0
 35917                                  ;----------------------------------------------------------------------------
 35918                                  ;**	$DEALLOC - Free Heap Memory
 35919                                  ;
 35920                                  ;	ENTRY	(es) = address of item
 35921                                  ;
 35922                                  ;	EXIT	'C' clear of OK
 35923                                  ;		'C' set if error
 35924                                  ;		  (AX) = error_invalid_block
 35925                                  ;	USES	???? BUGBUG
 35926                                  
 35927                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35928                                  ;----------------------------------------------------------------------------
 35929                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 35930                                  ;
 35931                                  ;   Assembler usage:
 35932                                  ;           MOV     ES,block
 35933                                  ;           MOV     AH,dealloc
 35934                                  ;           INT     21h
 35935                                  ;
 35936                                  ;   Error return:
 35937                                  ;           AX = error_invalid_block
 35938                                  ;              = error_arena_trashed
 35939                                  ;---------------------------------------------------------------------------- 
 35940                                  
 35941                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35942                                  _$DEALLOC:
 35943                                  	; 14/05/2019 - Retro DOS v4.0    
 35944                                  	; 04/08/2018 - Retro DOS v3.0
 35945                                  	;EnterCrit   critMem
 35946 000062AC E838B0                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35947                                  
 35948                                  	; MSDOS 6.0			; M016, M068 - Start
 35949 000062AF 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 35950                                  					; Q: was the previous call an int 21
 35951                                  					;    exec call
 35952 000062B5 740D                    	jz	short deallocate	; N: continue
 35953 000062B7 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 35954 000062BD 7505                    	jne	short deallocate	; N: continue
 35955                                  	;mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 35956                                  	; 25/09/2023
 35957 000062BF 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
 35958                                  deallocate:				; M016, M068 - End
 35959 000062C4 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 35960 000062C7 8CC0                            MOV     AX,ES
 35961 000062C9 48                              DEC     AX
 35962 000062CA E833FE                          CALL    check_signature
 35963 000062CD 720A                            JC      SHORT dealloc_err
 35964 000062CF 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35965                                  	;LeaveCrit critMem
 35966 000062D4 E82BB0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35967                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35968                                          ;transfer SYS_RET_OK
 35969                                  dealloc_ok:
 35970 000062D7 EBAC                    	jmp	short alloc_ok
 35971                                  	;JMP	SYS_RET_OK
 35972                                  
 35973                                  dealloc_err:
 35974                                  	;LeaveCrit critMem
 35975 000062D9 E826B0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35976                                          ;error	error_invalid_block
 35977                                  	;mov	al,9
 35978 000062DC B009                    	MOV	AL,error_invalid_block
 35979                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35980                                  dealloc_errj:
 35981                                  AllocOperErrj:	; 17/12/2022
 35982 000062DE E95DA3                  	JMP	SYS_RET_ERR
 35983                                  
 35984                                  ;	BREAK $AllocOper - get/set allocation mechanism
 35985                                  
 35986                                  ; MSDOS 6.0
 35987                                  ;----------------------------------------------------------------------------
 35988                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 35989                                  ;
 35990                                  ;	Assembler usage:
 35991                                  ;           MOV     AH,AllocOper
 35992                                  ;           MOV     BX,method
 35993                                  ;           MOV     AL,func
 35994                                  ;           INT     21h
 35995                                  ;
 35996                                  ;	ENTRY	
 35997                                  ;		(al) = 0
 35998                                  ;		  Get allocation Strategy in (ax)
 35999                                  ;
 36000                                  ;		(al) = 1, (bx) = method = zw0000xy
 36001                                  ;		  Set allocation strategy.
 36002                                  ;		   w  = 1  => HIGH_ONLY
 36003                                  ;		   z  = 1  => HIGH_FIRST
 36004                                  ;		   xy = 00 => FIRST_FIT
 36005                                  ;		      = 01 => BEST_FIT
 36006                                  ;		      = 10 => LAST_FIT
 36007                                  ;
 36008                                  ;		(al) = 2
 36009                                  ;		  Get UMB link state in (al)
 36010                                  ;
 36011                                  ;		(al) = 3
 36012                                  ;		  Set UMB link state
 36013                                  ;		   (bx) = 0 => Unlink UMBs
 36014                                  ;		   (bx) = 1 => Link UMBs
 36015                                  ;
 36016                                  ;
 36017                                  ;	EXIT	'C' clear if OK
 36018                                  ;
 36019                                  ;		 if (al) = 0
 36020                                  ;		  (ax) = existing method
 36021                                  ;		 if (al) = 1
 36022                                  ;		  Sets allocation strategy
 36023                                  ;		 if (al) = 2
 36024                                  ;		  (al) = 0 => UMBs not linked
 36025                                  ;		  (al) = 1 => UMBs linked in
 36026                                  ;		 if (al) = 3
 36027                                  ;		  Links/Unlinks the UMBs into DOS chain
 36028                                  ;
 36029                                  ;		'C' set if error
 36030                                  ;		  AX = error_invalid_function
 36031                                  ;
 36032                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 36033                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 36034                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 36035                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 36036                                  ;		    arena' if an arena sig is damaged.
 36037                                  ;----------------------------------------------------------------------------
 36038                                  
 36039                                  ; MSDOS 2.11 (& MSDOS 3.3)
 36040                                  ;----------------------------------------------------------------------------
 36041                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 36042                                  ;
 36043                                  ;   Assembler usage:
 36044                                  ;           MOV     AH,AllocOper
 36045                                  ;           MOV     BX,method
 36046                                  ;           MOV     AL,func
 36047                                  ;           INT     21h
 36048                                  ;
 36049                                  ;   Error return:
 36050                                  ;           AX = error_invalid_function
 36051                                  ;----------------------------------------------------------------------------
 36052                                  
 36053                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36054                                  _$ALLOCOPER:
 36055                                  	; 14/05/2019 - Retro DOS v4.0
 36056                                  	; MSDOS 6.0
 36057 000062E1 08C0                    	or	al,al ; 0
 36058 000062E3 741E                    	jz	short AllocGetStrat
 36059                                  	; 17/12/2022
 36060                                  	;cmp	al,1
 36061                                  	;jz	short AllocSetStrat
 36062                                  
 36063                                  	; 01/12/2022
 36064                                  	;cmp	al, 2
 36065                                  	;jb	short AllocSetStrat
 36066                                  	;ja	short AllocSetLink
 36067                                  	;;jmp	short AllocGetLink
 36068                                  ;AllocGetLink:
 36069                                  	; MSDOS 6.0
 36070                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 36071                                  	;and 	al,LINKSTATE
 36072                                  	;;transfer SYS_RET_OK
 36073                                  	;jmp	SYS_RET_OK
 36074                                  
 36075 000062E5 3C02                    	cmp	al,2
 36076                                  	; 17/12/2022
 36077 000062E7 7223                    	jb	short AllocSetStrat ; al = 1
 36078 000062E9 7432                    	je	short AllocGetLink
 36079                                  
 36080                                  	;cmp	al,2
 36081                                  	;jz	short AllocGetLink
 36082 000062EB 3C03                    	cmp	al,3
 36083 000062ED 7436                    	jz	short AllocSetLink
 36084                                  
 36085                                  	; 15/04/2018
 36086                                  	;CMP	AL,1
 36087                                          ;JB	SHORT AllocOperGet
 36088                                          ;JZ	SHORT AllocOperSet
 36089                                  
 36090                                  AllocOperError:
 36091                                  	; 04/08/2018 - Retro DOS v3.0
 36092                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus
 36093                                  	;mov	byte [ss:EXTERR_LOCUS],5
 36094 000062EF 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 36095                                  	;error	error_invalid_function
 36096                                  	;mov	al,1
 36097 000062F5 B001                    	MOV	AL,error_invalid_function
 36098                                  	; 17/12/2022
 36099                                  ;AllocOperErrj:
 36100                                  	;JMP	SYS_RET_ERR
 36101                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36102                                  	;jmp	short dealloc_errj
 36103                                  	; 17/12/2022
 36104 000062F7 EBE5                    	jmp	short AllocOperErrj
 36105                                  
 36106                                  AllocArenaError:
 36107                                  	; MSDOS 6.0
 36108 000062F9 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 36109                                  					; M009: Extended Error Locus
 36110                                  	;error	error_arena_trashed	; M009:
 36111                                  	;mov	al,7
 36112 000062FF B007                    	MOV	AL,error_arena_trashed
 36113                                  	;JMP	SYS_RET_ERR
 36114 00006301 EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 36115                                  
 36116                                  AllocGetStrat: 
 36117                                  	; MSDOS 6.0
 36118                                  AllocOperGet:
 36119 00006303 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 36120 00006307 30E4                            XOR     AH,AH
 36121                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36122                                  	;transfer SYS_RET_OK
 36123                                  AllocOperOk:
 36124                                  	; 17/12/2022
 36125                                  	;jmp	short dealloc_ok
 36126 00006309 E929A3                  	JMP	SYS_RET_OK
 36127                                  
 36128                                  AllocSetStrat: 
 36129                                  	; 14/05/2019
 36130                                  	; MSDOS 6.0
 36131 0000630C 53                      	push	bx			; M000 - start
 36132                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36133                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 36134                                  	; 17/12/2022
 36135 0000630D 80E33F                  	and	bl,3Fh
 36136 00006310 83FB02                  	cmp	bx,2			; BX must be 0-2
 36137                                  	;cmp	bl,2
 36138 00006313 5B                      	pop	bx			; M000 - end
 36139 00006314 77D9                    	ja	short AllocOperError
 36140                                  
 36141                                  AllocOperSet:
 36142 00006316 36881E[0203]                    MOV     [SS:AllocMethod],BL
 36143                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36144                                  	;transfer SYS_RET_OK
 36145                                  AllocOperOkj:
 36146 0000631B EBEC                    	jmp	short AllocOperOk
 36147                                  	;JMP	SYS_RET_OK
 36148                                  
 36149                                  AllocGetLink:
 36150                                  	; MSDOS 6.0
 36151 0000631D 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 36152                                  	;and	al,1
 36153 00006321 2401                    	and 	al,LINKSTATE
 36154                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36155                                  	;transfer SYS_RET_OK
 36156                                  AllocOperOkj2:
 36157                                  	; 17/12/2022
 36158 00006323 EBE4                    	jmp	short AllocOperOk
 36159                                  	;jmp	short AllocOperOkj
 36160                                  	;;JMP	SYS_RET_OK
 36161                                  
 36162                                  AllocSetLink:
 36163                                  	; MSDOS 6.0			; M009 - start
 36164 00006325 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 36165 0000632A 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 36166 0000632D 74C0                    	je	short AllocOperError	; N: error
 36167                                  					; Y: continue
 36168                                  					; M009 - end
 36169 0000632F 83FB01                  	cmp	bx,1
 36170                                  	;jb	short UnlinkUmbs
 36171                                  	;jz	short LinkUmbs
 36172                                  	;jmp	short AllocOperError
 36173                                  	; 10/03/2024
 36174 00006332 741C                    	jz	short LinkUmbs
 36175 00006334 77B9                    	ja	short AllocOperError
 36176                                  
 36177                                  UnlinkUmbs:
 36178                                  	;test	byte [ss:UMBFLAG],1
 36179 00006336 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 36180 0000633C 7410                    	jz	short unlinked		; Y: return 
 36181                                  	
 36182 0000633E E82900                  	call	GetLastArena		; get arena before umb_head in DS
 36183 00006341 72B6                    	jc	short AllocArenaError	; M009: arena trashed
 36184                                  	
 36185                                  					; make it last
 36186 00006343 C60600005A              	mov	byte [0],arena_signature_end
 36187                                  	
 36188                                  	;and	byte [ss:UMBFLAG],0FEh
 36189 00006348 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 36190                                  	
 36191                                  unlinked:
 36192                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36193                                  	;transfer SYS_RET_OK
 36194                                  	; 17/12/2022
 36195 0000634E EBB9                    	jmp	short AllocOperOk
 36196                                  	;jmp	short AllocOperOkj2
 36197                                  	;;JMP	SYS_RET_OK
 36198                                  
 36199                                  LinkUmbs:
 36200 00006350 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 36201 00006356 7510                    	jnz	short linked		; Y: return
 36202                                  	
 36203 00006358 E80F00                  	call	GetLastArena		; get arena before umb_head
 36204 0000635B 729C                    	jc	short AllocArenaError	; M009: arena trashed
 36205                                  	
 36206                                  					; make it normal. M061: ds points to
 36207                                  					; arena before umb_head
 36208 0000635D C60600004D              	mov	byte [0],arena_signature_normal
 36209                                  	
 36210 00006362 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 36211                                  linked:
 36212                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36213                                  	;transfer SYS_RET_OK
 36214                                  	; 17/12/2022
 36215 00006368 EB9F                    	jmp	short AllocOperOk
 36216                                  	;jmp	short unlinked
 36217                                  	;;JMP	SYS_RET_OK
 36218                                  
 36219                                  ; MSDOS 6.0
 36220                                  ;--------------------------------------------------------------------------
 36221                                  ; Procedure Name : GetLastArena		-  M003
 36222                                  ;
 36223                                  ; Inputs	 : cx = umb_head
 36224                                  ;
 36225                                  ;
 36226                                  ; Outputs	 : If UMBs are linked
 36227                                  ;			ES = umb_head
 36228                                  ;			DS = arena before umb_head
 36229                                  ;		   else
 36230                                  ;			DS = last arena
 36231                                  ;			ES = next arena. will be umb_head if NC.
 36232                                  ;
 36233                                  ;		   CY if error
 36234                                  ;
 36235                                  ; Uses		 : DS, ES, DI, BX
 36236                                  ;--------------------------------------------------------------------------
 36237                                  
 36238                                  ; 14/05/2019 - Retro DOS v4.0
 36239                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 36240                                  
 36241                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36242                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 36243                                  	
 36244                                  GetLastArena:
 36245 0000636A 50                      	push	ax			; save ax
 36246                                  
 36247 0000636B 36A1[2400]              	mov	ax,[ss:arena_head]
 36248 0000636F 8EC0                    	mov	es,ax			; es = arena_head
 36249 00006371 31FF                    	xor	di,di
 36250                                  
 36251 00006373 26803D5A                	cmp     byte [es:di],arena_signature_end
 36252                                  					; Q: is this the last arena
 36253 00006377 7419                    	je	short GLA_done		; Y: return last arena in ES
 36254                                  
 36255                                  GLA_next:
 36256 00006379 8ED8                    	mov	ds,ax
 36257 0000637B E87BFD                  	call	arena_next		; ax, es -> next arena
 36258                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36259                                  	;jc	short GLA_err
 36260                                  	; 17/12/2022
 36261 0000637E 7228                    	jc	short GLA_err2
 36262                                  
 36263 00006380 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 36264 00006386 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is
 36265                                  					;    umb_head
 36266                                  					; N: terminating condition is 05Ah
 36267                                  
 36268 00006388 26803D5A                	cmp     byte [es:di],arena_signature_end
 36269                                  					; Q: is this the last arena
 36270 0000638C EB02                    	jmp	short GLA_@f
 36271                                  GLA_chkumb:
 36272 0000638E 39C8                    	cmp	ax,cx			; Q: is this umb_head
 36273                                  GLA_@f:
 36274 00006390 75E7                    	jne	short GLA_next		; N: get next arena
 36275                                  
 36276                                  GLA_done:
 36277                                  					; M061 - Start
 36278 00006392 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 36279 00006398 750B                    	jnz	short GLA_ret		; Y: we're done
 36280                                  					; N: let us confirm that the next
 36281                                  					;    arena is umb_head
 36282 0000639A 8ED8                    	mov	ds,ax
 36283 0000639C E85AFD                  	call	arena_next		; ax, es -> next arena
 36284                                  	;jc	short GLA_err
 36285 0000639F 7207                    	jc	short GLA_err2
 36286 000063A1 39C8                    	cmp	ax,cx			; Q: is this umb_head
 36287 000063A3 7502                    	jne	short GLA_err		; N: error
 36288                                  					; M061 - End
 36289                                  GLA_ret:
 36290                                  	; 17/12/2022
 36291                                  	;clc
 36292                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36293                                  	;clc
 36294 000063A5 58                      	pop	ax			; M061
 36295 000063A6 C3                      	retn				; M061
 36296                                  
 36297                                  GLA_err:
 36298 000063A7 F9                      	stc				; M061
 36299                                  GLA_err2:
 36300 000063A8 58                      	pop	ax
 36301 000063A9 C3                      	retn
 36302                                  
 36303                                  ;============================================================================
 36304                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 36305                                  ;============================================================================
 36306                                  ; 04/08/2018 - Retro DOS v3.0
 36307                                  
 36308                                  ;	TITLE SRVCALL - Server DOS call
 36309                                  ;	NAME  SRVCALL
 36310                                  
 36311                                  ;**	SRVCALL.ASM - Server DOS call functions
 36312                                  ;
 36313                                  ;
 36314                                  ;	$ServerCall
 36315                                  ;
 36316                                  ;	Modification history:
 36317                                  ;
 36318                                  ;	    Created: ARR 08 August 1983
 36319                                  
 36320                                  ;AsmVars <Installed>
 36321                                  
 36322                                  ;include dpl.asm
 36323                                  
 36324                                  ;Installed = TRUE
 36325                                  
 36326                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 36327                                  ; ---------------------------------------------------------------------------
 36328                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36329                                  
 36330                                  ;BREAK <ServerCall -- Server DOS call>
 36331                                  
 36332                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 36333                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 36334                                  
 36335                                  ;hkn; TABLE	SEGMENT
 36336                                  ;Public SRVC001S,SRVC001E
 36337                                  ;SRVC001S label byte
 36338                                  
 36339                                  SRVC001S:
 36340                                  
 36341 000063AA [AE63]                  SERVERTAB:	dw	SERVER_DISP
 36342 000063AC [0064]                  SERVERLEAVE:	dw	SERVERRETURN
 36343 000063AE 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 36344 000063AF [6664]                  		dw	SRV_CALL	; 0
 36345 000063B1 [0164]                  		dw	COMMIT_ALL	; 1
 36346 000063B3 [3764]                  		dw	CLOSE_NAME	; 2
 36347 000063B5 [4064]                  		dw	CLOSE_UID	; 3
 36348 000063B7 [4764]                  		dw	CLOSE_UID_PID	; 4
 36349 000063B9 [4E64]                  		dw	GET_LIST	; 5
 36350 000063BB [A764]                  		dw	GET_DOS_DATA	; 6
 36351 000063BD [CB64]                  		dw	SPOOL_OPER	; 7
 36352 000063BF [CB64]                  		dw	SPOOL_OPER	; 8
 36353 000063C1 [CB64]                  		dw	SPOOL_OPER	; 9
 36354 000063C3 [D764]                  		dw	_$SetExtendedError  ; 10
 36355                                  
 36356                                  SERVER_DISP_END:  ;  LABEL BYTE
 36357                                  
 36358                                  ;SRVC001E label byte
 36359                                  
 36360                                  SRVC001E:
 36361                                  
 36362                                  ;hkn; TABLE	ENDS
 36363                                  
 36364                                  ;----------------------------------------------------------------------------
 36365                                  ;
 36366                                  ; Procedure Name : $ServerCall
 36367                                  ;
 36368                                  ; Inputs:
 36369                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 36370                                  ; Function:
 36371                                  ;	AL=0	Server DOS call
 36372                                  ;	AL=1	Commit All files
 36373                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 36374                                  ;	AL=3	Close all files for DPL_UID
 36375                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 36376                                  ;	AL=5	Get open file list entry
 36377                                  ;		    IN: BX File Index
 36378                                  ;			CX User Index
 36379                                  ;		    OUT:ES:DI -> Name
 36380                                  ;			BX = UID
 36381                                  ;		    CX = # locked blocks held by this UID
 36382                                  ;	AL=6	Get DOS data area
 36383                                  ;		    OUT: DS:SI -> Start
 36384                                  ;			CX size in bytes of swap if indos
 36385                                  ;			DX size in bytes of swap always
 36386                                  ;	AL=7	Get truncate flag
 36387                                  ;	AL=8	Set truncate flag
 36388                                  ;	AL=9	Close all spool files
 36389                                  ;	AL=10	SetExtendedError
 36390                                  ;
 36391                                  ;----------------------------------------------------------------------------
 36392                                  
 36393                                  _$ServerCall:
 36394                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36395                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 36396                                  	; 10/06/2019
 36397                                  	; 29/04/2019 - Retro DOS v4.0
 36398                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 36399                                  
 36400                                  	; 05/08/2018 - Retro DOS v3.0
 36401                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 36402 000063C5 3C07                    	CMP	AL,7
 36403 000063C7 7204                    	JB	short SET_STUFF
 36404 000063C9 3C09                    	CMP	AL,9
 36405 000063CB 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 36406                                  SET_STUFF:
 36407 000063CD 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 36408                                  	;mov	bx,[si+12h]
 36409 000063CF 8B5C12                  	MOV	BX,[SI+DPL.UID]
 36410                                  
 36411                                  	; MSDOS 6.0
 36412                                  ;SR;
 36413                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 36414                                  ; of USER_ID
 36415                                  
 36416 000063D2 36F606[3010]01          	test	byte [SS:IsWin386],1
 36417 000063D8 7505                    	jnz	short skip_win386
 36418                                  
 36419                                  ;hkn; SS override for user_id and proc_id
 36420                                  	; 15/08/2018
 36421 000063DA 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 36422                                  
 36423                                  skip_win386:
 36424 000063DF 8B5C14                  	MOV	BX,[SI+DPL.PID]
 36425 000063E2 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 36426                                  NO_SET_ID:
 36427                                  	; 10/06/2019 - Retro DOS v4.0
 36428 000063E7 2EFF36[AC63]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 36429 000063EC 2EFF36[AA63]            	PUSH	word [cS:SERVERTAB]	; push table address
 36430 000063F1 50                      	PUSH	AX
 36431 000063F2 E80EAE                  	call	TableDispatch
 36432                                  
 36433                                  ;hkn; SS override
 36434                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 36435 000063F5 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36436                                  	;error	error_invalid_function
 36437                                  	;mov	al,1
 36438 000063FB B001                    	MOV	AL,error_invalid_function
 36439                                  servercall_error:
 36440 000063FD E93EA2                  	JMP	SYS_RET_ERR
 36441                                  
 36442                                  SERVERRETURN:
 36443 00006400 C3                      	retn
 36444                                  
 36445                                  ; Commit - iterate through the open file list and make sure that the
 36446                                  ; directory entries are correctly updated.
 36447                                  
 36448                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36449                                  COMMIT_ALL:
 36450 00006401 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 36451 00006403 16                      	push	ss
 36452 00006404 1F                      	pop	ds
 36453 00006405 E8DFAE                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 36454                                  CommitLoop:
 36455 00006408 53                      	push	bx
 36456 00006409 E82201                  	call	SFFromSFN
 36457 0000640C 7222                    	JC	short CommitDone
 36458 0000640E 26833D00                	cmp	word [es:di],0
 36459                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 36460                                  					; if (ThisSFT->refcount != 0)
 36461 00006412 7418                    	JZ	short CommitNext
 36462                                  	;cmp	word [es:di],0FFFFh ; -1
 36463 00006414 26833DFF                	cmp	word [ES:DI],sf_busy
 36464                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 36465                                  					; BUSY SFTs have god knows what
 36466 00006418 7412                    	JZ	short CommitNext	;   in them.
 36467                                  	; 17/12/2022
 36468 0000641A 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 36469                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 36470 0000641F 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 36471                                  					;	doesn't deadlock
 36472 00006421 893E[9E05]              	MOV	[THISSFT],DI
 36473 00006425 8C06[A005]              	MOV	[THISSFT+2],ES
 36474 00006429 E8A7CB                  	call	DOS_COMMIT		;	DOSCommit ();
 36475                                  CommitNext:
 36476 0000642C 5B                      	pop	bx
 36477 0000642D 43                      	INC	BX
 36478 0000642E EBD8                    	JMP	short CommitLoop
 36479                                  CommitDone:
 36480 00006430 E8CFAE                  	call	LCritSFT
 36481 00006433 5B                      	pop	bx
 36482                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36483                                  Commit_Ok:
 36484 00006434 E9FEA1                  	jmp	SYS_RET_OK
 36485                                  	
 36486                                  CLOSE_NAME:
 36487                                  
 36488                                  ;if installed
 36489                                  
 36490                                  ;hkn; SS override
 36491                                  	;call	far [ss:MFTcloN]
 36492 00006437 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 36493                                  ;else
 36494                                  ;	Call	MFTcloN
 36495                                  ;endif
 36496                                  
 36497                                  CheckReturns:
 36498                                  
 36499                                  ; 10/03/2024
 36500                                  %if 0
 36501                                  	JC	short func_err
 36502                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36503                                  	;transfer SYS_RET_OK
 36504                                  Commit_Okj:
 36505                                  	jmp	short Commit_Ok
 36506                                  	;jmp	SYS_RET_OK
 36507                                  %else
 36508 0000643C 73F6                    	jnc	short Commit_Ok
 36509                                  %endif
 36510                                  
 36511                                  func_err:
 36512                                  	;transfer SYS_RET_ERR
 36513                                  	;jmp	SYS_RET_ERR
 36514 0000643E EBBD                    	jmp	short servercall_error
 36515                                  
 36516                                  CLOSE_UID:
 36517                                  
 36518                                  ;if installed
 36519                                  ;hkn; SS override
 36520                                  	;call	far [ss:MFTclU]
 36521 00006440 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 36522                                  ;else
 36523                                  ;	Call	MFTclU
 36524                                  ;endif
 36525 00006445 EBF5                    	JMP	short CheckReturns
 36526                                  
 36527                                  CLOSE_UID_PID:
 36528                                  
 36529                                  ;if installed
 36530                                  ;hkn; SS override
 36531                                  	;call	far [ss:MFTCloseP]
 36532 00006447 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP
 36533                                  ;else
 36534                                  ;	Call	MFTCloseP
 36535                                  ;endif
 36536 0000644C EBEE                    	JMP	short CheckReturns
 36537                                  
 36538                                  GET_LIST:
 36539                                  
 36540                                  ;if installed
 36541                                  ;hkn; SS override
 36542                                  	;call	far [ss:MFT_get]
 36543 0000644E 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 36544                                  ;else
 36545                                  ;	Call	MFT_get
 36546                                  ;endif
 36547 00006453 72E9                    	JC	short func_err
 36548 00006455 E82DA0                  	call	Get_User_Stack
 36549                                  	;mov	[si+2],bx
 36550 00006458 895C02                  	MOV	[SI+user_env.user_BX],BX
 36551                                  	;mov	[si+10],di
 36552 0000645B 897C0A                  	MOV	[SI+user_env.user_DI],DI
 36553                                  	;mov	[si+16],es
 36554 0000645E 8C4410                  	MOV	[SI+user_env.user_ES],ES
 36555                                  SetCXOK:
 36556                                  	;mov	[si+4],cx
 36557 00006461 894C04                  	MOV	[SI+user_env.user_CX],CX
 36558                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36559                                  	;transfer SYS_RET_OK
 36560                                  Commit_Okj2:
 36561                                  	; 17/12/2022
 36562 00006464 EBCE                    	jmp	short Commit_Ok
 36563                                  	;jmp	short Commit_Okj
 36564                                  	;;jmp	SYS_RET_OK
 36565                                  
 36566                                  SRV_CALL:
 36567 00006466 58                      	POP	AX			; get rid of call to $srvcall
 36568 00006467 1E                      	push	ds
 36569 00006468 56                      	push	si
 36570 00006469 E819A0                  	call	Get_User_Stack
 36571 0000646C 5F                      	pop	di
 36572 0000646D 07                      	pop	es
 36573                                  
 36574                                  ; DS:SI point to stack
 36575                                  ; ES:DI point to DPL
 36576                                  
 36577 0000646E E871AD                  	call	XCHGP
 36578                                  
 36579                                  ; DS:SI point to DPL
 36580                                  ; ES:DI point to stack
 36581                                  ;
 36582                                  ; We now copy the registers from DPL to save stack
 36583                                  
 36584 00006471 56                      	push	si
 36585 00006472 B90600                  	MOV	CX,6
 36586 00006475 F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 36587 00006477 47                      	INC	DI
 36588 00006478 47                      	INC	DI			; Skip user_BP
 36589 00006479 A5                      	MOVSW				; DS
 36590 0000647A A5                      	MOVSW				; ES
 36591 0000647B 5E                      	pop	si			; DS:SI -> DPL
 36592 0000647C 8B04                    	mov	ax,[SI]
 36593                                  	;MOV	AX,[SI+DPL.AX]
 36594                                  	;mov	bx,[si+2]
 36595 0000647E 8B5C02                  	MOV	BX,[SI+DPL.BX]
 36596                                  	;mov	cx,[si+4]
 36597 00006481 8B4C04                  	MOV	CX,[SI+DPL.CX]
 36598                                  	;mov	dx,[si+6]
 36599 00006484 8B5406                  	MOV	DX,[SI+DPL.DX]
 36600                                  	;mov	di,[si+10]
 36601 00006487 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 36602                                  	;mov	es,[si+14]
 36603 0000648A 8E440E                  	MOV	ES,[SI+DPL.ES]
 36604                                  	;push	word [si+8]
 36605 0000648D FF7408                  	PUSH	word [SI+DPL.SI]
 36606                                  	;mov	ds,[si+12]
 36607 00006490 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 36608 00006493 5E                      	POP	SI
 36609                                  
 36610                                  ;hkn; SS override for next 3
 36611 00006494 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 36612 00006499 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 36613 0000649E 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 36614 000064A4 E9E09E                  	jmp	REDISP
 36615                                  
 36616                                  GET_DOS_DATA:
 36617 000064A7 16                      	push	ss
 36618 000064A8 07                      	pop	es
 36619 000064A9 BF[2003]                	MOV     DI,SWAP_START
 36620 000064AC B9[AC0A]                	MOV     CX,SWAP_END
 36621 000064AF BA[3A03]                	MOV     DX,SWAP_ALWAYS
 36622 000064B2 29F9                    	SUB     CX,DI
 36623 000064B4 29FA                    	SUB     DX,DI
 36624 000064B6 D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 36625 000064B8 83D100                  	ADC     CX,0                    ; div by 2 + round up
 36626 000064BB D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 36627 000064BD E8C59F                  	call	Get_User_Stack
 36628                                  	;mov	[si+14],es
 36629 000064C0 8C440E                  	MOV     [SI+user_env.user_DS],ES
 36630                                  	;mov	[si+8],di
 36631 000064C3 897C08                  	MOV     [SI+user_env.user_SI],DI
 36632                                  	;mov	[si+6],dx
 36633 000064C6 895406                  	MOV     [SI+user_env.user_DX],DX
 36634 000064C9 EB96                    	JMP	short SetCXOK
 36635                                  
 36636                                  SPOOL_OPER:
 36637                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 36638                                  
 36639 000064CB 50                      	push    ax
 36640 000064CC B82511                  	mov     ax,1125h
 36641 000064CF CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 36642                                  			; STACK: WORD subfunction
 36643                                  			; Return: CF set on error, AX = error code
 36644                                  			; STACK unchanged
 36645 000064D1 5B                      	pop	bx
 36646                                  	; 17/12/2022
 36647                                  	;JC	short func_err2
 36648 000064D2 7390                    	jnc	short Commit_Okj2
 36649                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36650                                  	;;jmp	SYS_RET_OK
 36651                                  	;jmp	short Commit_Okj2
 36652                                  	
 36653                                  func_err2:
 36654 000064D4 E967A1                  	jmp	SYS_RET_ERR
 36655                                  
 36656                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 36657                                  ;--------------------------------------------------------------------------
 36658                                  ;
 36659                                  ; Procedure Name : $SetExtendedError
 36660                                  ;
 36661                                  ; $SetExtendedError takes extended error information and loads it up for the
 36662                                  ; next extended error call. This is used by interrupt-level proccessors to
 36663                                  ; mask their actions.
 36664                                  ;
 36665                                  ;   Inputs: DS:SI points to DPL which contains all registers
 36666                                  ;   Outputs: none
 36667                                  ;
 36668                                  ;---------------------------------------------------------------------------
 36669                                  
 36670                                  _$SetExtendedError:
 36671                                  
 36672                                  ;hkn; SS override for all variables used
 36673                                  
 36674 000064D7 8B04                    	mov	ax,[si]
 36675                                  	;MOV	AX,[SI+DPL.AX]
 36676 000064D9 36A3[2403]              	MOV	[SS:EXTERR],AX
 36677                                  	;mov	ax,[si+10]
 36678 000064DD 8B440A                  	MOV	AX,[SI+DPL.DI]
 36679 000064E0 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 36680                                  	;mov	ax,[si+14]
 36681 000064E4 8B440E                  	MOV	AX,[SI+DPL.ES]
 36682 000064E7 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 36683                                  	;mov	ax,[si+2]
 36684 000064EB 8B4402                  	MOV	AX,[SI+DPL.BX]
 36685 000064EE 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 36686                                  	;mov	ax,[si+4]
 36687 000064F2 8B4404                  	MOV	AX,[SI+DPL.CX]
 36688 000064F5 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 36689 000064FA C3                      	retn
 36690                                  
 36691                                  ;============================================================================
 36692                                  ; UTIL.ASM, MSDOS 6.0, 1991
 36693                                  ;============================================================================
 36694                                  ; 05/08/2018 - Retro DOS v3.0
 36695                                  ; 05/05/2019 - Retro DOS v4.0
 36696                                  
 36697                                  ;**	Handle related utilities for MSDOS 2.X.
 36698                                  ;----------------------------------------------------------------------------
 36699                                  ;	pJFNFromHandle	written
 36700                                  ;	SFFromHandle	written
 36701                                  ;	SFFromSFN	written
 36702                                  ;	JFNFree 	written
 36703                                  ;	SFNFree 	written
 36704                                  ;
 36705                                  ;	Modification history:
 36706                                  ;
 36707                                  ;	    Created: MZ 1 April 1983
 36708                                  ;----------------------------------------------------------------------------
 36709                                  
 36710                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 36711                                  
 36712                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 36713                                  ;----------------------------------------------------------------------------
 36714                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 36715                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 36716                                  ;
 36717                                  ;	NOTE:
 36718                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36719                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 36720                                  ;
 36721                                  ;	ENTRY	(bx) = handle
 36722                                  ;	EXIT	'C' clear if ok
 36723                                  ;		  (es:di) = address of JFN value
 36724                                  ;		'C' set if error
 36725                                  ;		  (ax) = error code
 36726                                  ;	USES	AX, DI, ES, Flags
 36727                                  ;----------------------------------------------------------------------------
 36728                                  
 36729                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36730                                  
 36731                                  pJFNFromHandle:
 36732                                  	; 05/05/2019 - Retro DOS v4.0
 36733                                  	;getdseg <es>			; es -> dosdata
 36734 000064FB 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36735                                  	
 36736                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 36737 00006500 268E06[3003]            	mov	es,[es:CurrentPDB]
 36738                                  
 36739                                  	;cmp	bx,[ES:32h]
 36740 00006505 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 36741 0000650A 7204                    	JB	short pjfn10		; no, get offset
 36742                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 36743                                  	;mov	al,6
 36744 0000650C B006                    	MOV     AL,error_invalid_handle ; appropriate error
 36745                                  ReturnCarry:
 36746 0000650E F9                      	STC                             ; signal error
 36747 0000650F C3                      	retn				; go back
 36748                                  pjfn10: 
 36749                                  	;les	di,[es:34h]
 36750 00006510 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 36751 00006515 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 36752                                  	;clc
 36753                                  pJFNFromHandle_error:
 36754 00006517 C3                      	retn
 36755                                  
 36756                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 36757                                  ;----------------------------------------------------------------------------
 36758                                  ;
 36759                                  ; Procedure Name : SFFromHandle
 36760                                  ;
 36761                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 36762                                  ;
 36763                                  ;   Input:      BX has handle
 36764                                  ;   Output:     Carry Set
 36765                                  ;                   AX has error code
 36766                                  ;               Carry Reset
 36767                                  ;                   ES:DI has pointer to SF entry
 36768                                  ;   Registers modified: If error, AX,ES, else ES:DI
 36769                                  ; NOTE:
 36770                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36771                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36772                                  ;
 36773                                  ;----------------------------------------------------------------------------
 36774                                  
 36775                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36776                                  
 36777                                  SFFromHandle:
 36778 00006518 E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 36779                                  	;retc				; return if error
 36780 0000651B 72FA                    	jc	short pJFNFromHandle_error
 36781 0000651D 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 36782                                  	;JNZ	short GetSF		; nope, suck out SF
 36783                                  	;;mov	al,6
 36784                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36785                                  	;jmp	short ReturnCarry	; signal it
 36786                                  	; 17/12/2022
 36787                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36788 00006521 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 36789                                  	;JNZ	short GetSF		; nope, suck out SF
 36790                                  	;;mov	al,6
 36791                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36792                                  	;jmp	short ReturnCarry	; signal it
 36793                                  GetSF:
 36794 00006523 53                      	push	bx			; save handle
 36795 00006524 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 36796 00006527 30FF                    	XOR     BH,BH                   ; ignore upper half
 36797 00006529 E80200                  	CALL    SFFromSFN               ; get real sf spot
 36798 0000652C 5B                      	pop	bx			; restore
 36799 0000652D C3                      	retn                        	; say goodbye
 36800                                  
 36801                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 36802                                  
 36803                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 36804                                  ;----------------------------------------------------------------------------
 36805                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 36806                                  ;	is more than just a simple index instruction because the SF table
 36807                                  ;	can be made up of multiple pieces chained together. We follow the
 36808                                  ;	chain to the right piece and then do the index operation.
 36809                                  ;
 36810                                  ;   NOTE:
 36811                                  ;	This routine is called from SFFromHandle which is called
 36812                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36813                                  ;
 36814                                  ;	ENTRY	BX has SF index
 36815                                  ;	EXIT	'C' clear if OK
 36816                                  ;		  ES:DI points to SF entry
 36817                                  ;		'C' set if index too large
 36818                                  ;	USES	BX, DI, ES
 36819                                  ;----------------------------------------------------------------------------
 36820                                  
 36821                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36822                                  
 36823                                  SFFromSFN:
 36824                                  	; 05/05/2019 - Retro DOS v4.0
 36825                                  	;getdseg <es>			; es -> dosdata
 36826 0000652E 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36827                                  
 36828                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 36829 00006533 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 36830                                  sfsfn5:	
 36831                                  	;cmp	bx,[es:di+4]
 36832 00006538 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 36833 0000653C 720E                    	JB	short sfsfn7		; yes, go grab it
 36834                                  	;sub	bx,[es:di+4]
 36835 0000653E 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 36836 00006542 26C43D                  	les	di,[es:di] ; 14/08/2018
 36837                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 36838 00006545 83FFFF                  	CMP     DI,-1                   ; end of tables?
 36839 00006548 75EE                    	JNZ	short sfsfn5		; no, try again
 36840 0000654A F9                      	STC
 36841 0000654B C3                      	retn				; return with error, not found
 36842                                  sfsfn7:
 36843 0000654C 50                      	push	ax
 36844                                  	;mov	ax,53 ; MSDOS 3.3
 36845                                  	;mov	ax,59 ; MSDOS 6.0
 36846                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 36847                                  	
 36848                                  	; 17/12/2022
 36849 0000654D B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 36850                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36851                                  	;mov	ax,SF_ENTRY.size ; 59
 36852                                  	
 36853 0000654F F6E3                    	MUL	BL			; (ax) = offset into this SF block
 36854 00006551 01C7                    	ADD	DI,AX			; add base of SF block
 36855 00006553 58                      	pop	ax
 36856                                  	;add	di,6
 36857 00006554 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 36858 00006557 C3                      	retn				; return with 'C' clear
 36859                                  
 36860                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 36861                                  
 36862                                  ;**	JFNFree - Find a Free JFN Slot
 36863                                  ;----------------------------------------------------------------------------
 36864                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 36865                                  ;
 36866                                  ;	ENTRY	(ss) = DOSDATA
 36867                                  ;	EXIT	'C' clear if OK
 36868                                  ;		  (bx) = new handle
 36869                                  ;		  (es:di) = pointer to JFN slot
 36870                                  ;		'C' set if error
 36871                                  ;		  (al) = error code
 36872                                  ;	USES	bx, di, es, flags
 36873                                  ;----------------------------------------------------------------------------
 36874                                  
 36875                                  JFNFree:
 36876 00006558 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 36877                                  jfnf1:	
 36878 0000655A E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 36879 0000655D 7209                    	JC	short jfnf5		; no more handles
 36880 0000655F 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 36881 00006563 7405                    	je	short jfnfx		; yes, carry is clear
 36882 00006565 43                      	INC     BX                      ; no, next handle
 36883 00006566 EBF2                    	JMP	short jfnf1		; and try again
 36884                                  
 36885                                  	; Error. 'C' set
 36886                                  jfnf5:	
 36887                                  	;mov	al,4
 36888 00006568 B004                    	MOV	AL,error_too_many_open_files
 36889                                  jfnfx:	
 36890 0000656A C3                      	retn				; bye
 36891                                  
 36892                                  ;	BREAK <SFNFree - Allocate a free SFN>
 36893                                  
 36894                                  ;**	SFNFree - Allocate a Free SFN/SFT
 36895                                  ;----------------------------------------------------------------------------
 36896                                  ;	SFNFree scans through the sf table looking for a free entry
 36897                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 36898                                  ;
 36899                                  ;	The problem is that we want to mark the SFT busy so that other threads
 36900                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 36901                                  ;	we can't just mark it busy because we may get blown out of our open
 36902                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 36903                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 36904                                  ;	an SFT with this value we look to see if it belongs to this user
 36905                                  ;	and process.  If it does belong to us then it must be an orphan
 36906                                  ;	and we reclaim it.
 36907                                  ;
 36908                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 36909                                  ;		over and over, but we could at least set a high water mark...
 36910                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 36911                                  ;		even though this is not a frequently called routine - jgl
 36912                                  ;
 36913                                  ;	ENTRY	(ss) = DOSDATA
 36914                                  ;	EXIT	'C' clear if no error
 36915                                  ;		  (bx) = SFN
 36916                                  ;		  (es:di) = pointer to SFT
 36917                                  ;		  es:[di].SFT_REF_COUNT = -1
 36918                                  ;		'C' set if error
 36919                                  ;		  (al) = error code
 36920                                  ;	USES	bx, di, es, Flags
 36921                                  ;----------------------------------------------------------------------------
 36922                                  
 36923                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36924                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 36925                                  
 36926                                  SFNFree:
 36927                                  	; 12/08/2018
 36928                                  	; 05/08/2018 - Retro DOS v3.0
 36929                                  	;
 36930                                  	; MSDOS 6.0
 36931 0000656B 50                      	push	ax
 36932 0000656C 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 36933                                  sfnf5:	
 36934 0000656E 53                      	push	bx
 36935 0000656F E8BCFF                  	call	SFFromSFN		; get the potential handle
 36936 00006572 5B                      	pop	bx
 36937 00006573 723A                    	jc	short sfnf95		; no more free SFNs
 36938 00006575 26833D00                	cmp	word [ES:DI],0
 36939                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 36940 00006579 741D                    	je	short sfnf20			; yep, got one
 36941                                  	
 36942                                  	;cmp	word [es:di],0FFFFh ; -1
 36943 0000657B 26833DFF                	cmp	word [ES:DI],sf_busy
 36944                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36945 0000657F 7403                    	je	short sfnf10		; special busy mark
 36946                                  sfnf7:	
 36947 00006581 43                      	inc	bx			; try the next one
 36948 00006582 EBEA                    	jmp	short sfnf5
 36949                                  
 36950                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 36951                                  ;	it was abandoned during a earlier call and we can use it.
 36952                                  ;
 36953                                  ;	(bx)	= SFN
 36954                                  ;	(es:di) = pointer to SFT
 36955                                  ;	(TOS)	= caller's (ax)
 36956                                  
 36957                                  sfnf10:	
 36958 00006584 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36959                                  	;cmp	[es:di+2Fh],ax
 36960 00006588 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 36961 0000658C 75F3                    	jnz	short sfnf7		; not ours
 36962 0000658E 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36963                                  	;cmp	[es:di+31h],ax
 36964 00006592 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 36965 00006596 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 36966                                  
 36967                                  ;	We have an SFT to allocate
 36968                                  ;
 36969                                  ;	(bx)	= SFN
 36970                                  ;	(es:di) = pointer to SFT
 36971                                  ;	(TOS)	= caller's (ax)
 36972                                  
 36973                                  sfnf20:
 36974                                  	; cf = 0 ;; Retro DOS v3.0
 36975                                  
 36976                                  	;mov	word [es:di],0FFFFh
 36977 00006598 26C705FFFF              	mov	word [ES:DI],sf_busy
 36978                                  					; make sure that this is allocated
 36979                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36980                                  
 36981 0000659D 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36982                                  	;mov	[es:di+2Fh],ax
 36983 000065A1 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 36984 000065A5 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36985                                  	;mov	[es:di+31h],ax
 36986 000065A9 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 36987                                  sfnf21: ;; Retro DOS v3.0
 36988                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36989                                  	;pop	ax
 36990                                  	;;clc
 36991                                  	;retn				; return with no error
 36992                                  	; 17/12/2022
 36993 000065AD 58                      	pop	ax
 36994                                  	;clc
 36995 000065AE C3                      	retn
 36996                                  
 36997                                  ;**	Error - no more free SFNs
 36998                                  ;
 36999                                  ;	'C' set
 37000                                  ;	(TOS) = saved ax
 37001                                  
 37002                                  sfnf95: 
 37003 000065AF 58                      	pop	ax
 37004                                  
 37005                                  ; 11/03/2024
 37006                                  %if 0
 37007                                  	;mov	al,4
 37008                                  	mov	al,error_too_many_open_files
 37009                                  	retn				; return with 'C' and error
 37010                                  %else
 37011                                  	; 11/03/2024
 37012 000065B0 EBB6                    	jmp	short jfnf5
 37013                                  %endif
 37014                                  
 37015                                  ;============================================================================
 37016                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 37017                                  ;============================================================================
 37018                                  ; 13/07/2018 - Retro DOS v3.0
 37019                                  ; 20/05/2019 - Retro DOS v4.0
 37020                                  
 37021                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 37022                                  
 37023                                  ;	BREAK <$Close - return a handle to the system>
 37024                                  ;----------------------------------------------------------------------------
 37025                                  ;
 37026                                  ;**	$Close - Close a file Handle
 37027                                  ;
 37028                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 37029                                  ;		path
 37030                                  ;
 37031                                  ;	Assembler usage:
 37032                                  ;	    MOV     BX, handle
 37033                                  ;	    MOV     AH, Close
 37034                                  ;	    INT     int_command
 37035                                  ;
 37036                                  ;	ENTRY	(bx) = handle
 37037                                  ;	EXIT	<normal INT21 return convention>
 37038                                  ;	USES	all
 37039                                  ;
 37040                                  ;----------------------------------------------------------------------------
 37041                                  
 37042                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37043                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 37044                                  
 37045                                  _$CLOSE:
 37046                                  ;	Grab the SFT pointer from the JFN.
 37047                                  
 37048 000065B2 E84902                  	call	CheckOwner		; get system file entry
 37049 000065B5 722B                    	jc	short CloseError	; error return
 37050 000065B7 16                      	push	ss
 37051 000065B8 1F                      	pop	ds			; For DOS_CLOSE
 37052 000065B9 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 37053 000065BD 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 37054                                  
 37055                                  ; DS:SI point to JFN table entry.
 37056                                  ; ES:DI point to SFT
 37057                                  ;
 37058                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 37059                                  ; FCB, we examine the ref count on the SFT; if it was 1, we free the JFN.
 37060                                  ; If the file was not a net FCB, we free the JFN too.
 37061                                  
 37062                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 37063 000065C1 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 37064 000065C5 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 37065                                  	;mov	al,[ES:DI+2]
 37066 000065C7 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 37067                                  	;and	al,0F0h
 37068 000065CB 24F0                    	AND	AL,SHARING_MASK
 37069                                  	;cmp	al,70h
 37070 000065CD 3C70                    	CMP	AL,SHARING_NET_FCB
 37071 000065CF 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 37072                                  
 37073                                  ; The JFN must be freed. Get the pointer to it and replace the contents with
 37074                                  ; -1.
 37075                                  
 37076                                  FreeJFN:
 37077 000065D1 E827FF                  	call	pJFNFromHandle		; d = pJFN (handle);
 37078 000065D4 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 37079                                  PostFree:
 37080                                  
 37081                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 37082                                  
 37083 000065D8 E8B7C8                  	call	DOS_CLOSE
 37084                                  
 37085                                  ; DOS_Close may return an error. If we see such an error, we report it but
 37086                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 37087                                  
 37088 000065DB 7205                    	JC	short CloseError
 37089                                  	;mov	ah,3Eh
 37090 000065DD B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 37091                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37092                                  CloseOk:
 37093 000065DF E953A0                  	jmp	SYS_RET_OK
 37094                                  CloseError:
 37095                                  CommitError:	; 11/03/2024
 37096 000065E2 E959A0                  	jmp	SYS_RET_ERR
 37097                                  
 37098                                  ;	BREAK <$Commit - commit the file>
 37099                                  ;----------------------------------------------------------------------------
 37100                                  ;
 37101                                  ;**	$Commit - Commit a File
 37102                                  ;
 37103                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 37104                                  ;	flushed out. BUGBUG - I'm pretty sure that $Commit doesn't update
 37105                                  ;	the directory entry, etc., so this commit is pretty useless. check
 37106                                  ;	and fix this!! jgl
 37107                                  ;
 37108                                  ;	Assembler usage:
 37109                                  ;	    MOV     BX, handle
 37110                                  ;	    MOV     AH, Commit
 37111                                  ;	    INT     int_command
 37112                                  ;
 37113                                  ;	ENTRY	(bx) = handle
 37114                                  ;	EXIT	none
 37115                                  ;	USES	all
 37116                                  ;;----------------------------------------------------------------------------
 37117                                  
 37118                                  _$COMMIT:
 37119                                  ;	Grab the SFT pointer from the JFN.
 37120                                  
 37121 000065E5 E81602                  	call	CheckOwner		; get system file entry
 37122                                  	;JC	short CommitError	; error return
 37123                                  	; 11/03/2024
 37124 000065E8 72F8                    	jc	short CommitError
 37125                                  
 37126 000065EA 16                      	push	ss
 37127 000065EB 1F                      	pop	ds			; For DOS_COMMIT
 37128 000065EC 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 37129 000065F0 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 37130                                  
 37131                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 37132                                  ;
 37133                                  ;	ES:DI point to SFT
 37134                                  
 37135 000065F4 E8DCC9                  	call	DOS_COMMIT
 37136 000065F7 72E9                    	JC	short CommitError
 37137                                  	; 07/12/2022
 37138                                  	;jc	short CloseError
 37139                                  	;mov	ah,68h
 37140 000065F9 B468                    	MOV	AH,COMMIT
 37141                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37142                                  	;jmp	SYS_RET_OK
 37143                                  CommitOk:
 37144 000065FB EBE2                    	jmp	short CloseOk
 37145                                  
 37146                                  ; 11/03/2024
 37147                                  ;CommitError:
 37148                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37149                                  ;	;jmp	SYS_RET_ERR
 37150                                  ;	jmp	short CloseError
 37151                                  
 37152                                  ;	BREAK <$ExtHandle - extend handle count>
 37153                                  
 37154                                  ;**	$ExtHandle - Extend Handle Count
 37155                                  ;----------------------------------------------------------------------------
 37156                                  ;	Assembler usage:
 37157                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 37158                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 37159                                  ;	    INT     int_command 		 busy )
 37160                                  ;
 37161                                  ;	ENTRY	(bx) = new number of handles
 37162                                  ;	EXIT	'C' clear if OK
 37163                                  ;		'C' set iff err
 37164                                  ;		  (ax) = error code
 37165                                  ;			 AX = error_not_enough_memory
 37166                                  ;			      error_too_many_open_files
 37167                                  ;	USES	all
 37168                                  ;----------------------------------------------------------------------------
 37169                                  
 37170                                  _$ExtHandle:
 37171 000065FD 31ED                    	XOR	BP,BP			; 0: enlarge  1: shrink  2:psp
 37172                                  	;cmp	bx,20
 37173 000065FF 83FB14                  	CMP	BX,FILPERPROC
 37174 00006602 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 37175 00006604 BB1400                  	MOV	BX,FILPERPROC
 37176                                  exth2:	
 37177 00006607 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 37178                                  	;mov	cx,[ES:32h]
 37179 0000660C 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 37180 00006611 39CB                    	CMP	BX,CX			; the requested == current
 37181                                  	;JE	short ok_done 		; yes and exit
 37182                                  	; 11/03/2024
 37183 00006613 74CA                    	je	short CloseOk
 37184 00006615 771E                    	JA	short larger		; go allocate new table
 37185                                  
 37186                                  ;	We're going to shrink the # of handles available
 37187                                  
 37188                                  	;MOV	BP,1			; shrink
 37189                                  	; 11/03/2024
 37190 00006617 45                      	inc	bp
 37191                                  	;mov	ds,[ES:36h]
 37192 00006618 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 37193 0000661D 89DE                    	MOV	SI,BX			;
 37194 0000661F 29D9                    	SUB	CX,BX			; get difference
 37195                                  
 37196                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 37197                                  chck_handles:
 37198 00006621 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 37199 00006624 753B                    	JNZ	short too_many_files	; status
 37200 00006626 46                      	INC	SI
 37201 00006627 E2F8                    	LOOP	chck_handles
 37202 00006629 83FB14                  	CMP	BX,FILPERPROC		; = 20
 37203 0000662C 7707                    	JA	short larger		; no
 37204                                  
 37205                                  	;MOV	BP,2			; psp
 37206                                  	; 11/03/2024
 37207 0000662E 45                      	inc	bp
 37208                                  	;mov	di,24
 37209 0000662F BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 37210 00006632 53                      	PUSH	BX
 37211 00006633 EB1D                    	JMP	short movhandl
 37212                                  
 37213                                  larger:
 37214 00006635 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 37215 00006638 747D                    	JZ	short invalid_func	; 10/08/2018
 37216 0000663A F8                      	CLC
 37217 0000663B 53                      	PUSH	BX			; save requested number
 37218 0000663C 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 37219 0000663F B104                    	MOV	CL,4
 37220                                  	;ror	bx,cl			; MSDOS 3.3
 37221 00006641 D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 37222 00006643 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 37223                                  
 37224 00006647 55                      	PUSH	BP
 37225 00006648 E8E7FA                  	call	_$ALLOC			; allocate memory
 37226 0000664B 5D                      	POP	BP
 37227 0000664C 7264                    	JC	short no_memory		; not enough memory
 37228                                  
 37229 0000664E 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 37230 00006650 31FF                    	XOR	DI,DI
 37231                                  movhandl:
 37232 00006652 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 37233                                  
 37234 00006657 F7C50300                	test	BP,3			; enlarge ?
 37235 0000665B 7409                    	JZ	short enlarge 		; yes
 37236 0000665D 59                      	POP	CX			; cx = the amount you shrink
 37237 0000665E 51                      	PUSH	CX
 37238 0000665F EB09                    	JMP	short copy_hand
 37239                                  
 37240                                  ;	Done.  'C' clear
 37241                                  
 37242                                  ; 17/12/2022
 37243                                  ;ok_done:
 37244                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37245                                  ;	;jmp	short CommitOk
 37246                                  ;	; 17/12/2022
 37247                                  ;	jmp	SYS_RET_OK
 37248                                  
 37249                                  too_many_files:
 37250                                  	;mov	al,4
 37251 00006661 B004                    	MOV	AL,error_too_many_open_files
 37252                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37253                                  	;jmp	SYS_RET_ERR
 37254                                  CommitErrorj:
 37255                                  	;jmp	short CommitError
 37256                                  	; 17/12/2022
 37257 00006663 E9D89F                  	jmp	SYS_RET_ERR
 37258                                  
 37259                                  ; 11/03/2024
 37260                                  ; 17/12/2022
 37261                                  ;ok_done:
 37262                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37263                                  ;	;jmp	short CommitOk
 37264                                  ;	; 17/12/2022
 37265                                  ;	jmp	SYS_RET_OK
 37266                                  
 37267                                  enlarge:
 37268                                  	;mov	cx,[32h]
 37269 00006666 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 37270                                  copy_hand:
 37271 0000666A 89CA                    	MOV	DX,CX
 37272                                  	;lds	si,[34h]
 37273 0000666C C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 37274 00006670 F3A4                    	REP	MOVSB			; copy information to new table
 37275 00006672 59                      	POP	CX			; get new number of handles
 37276 00006673 51                      	PUSH	CX			; save it again
 37277 00006674 29D1                    	SUB	CX,DX			; get the difference
 37278 00006676 B0FF                    	MOV	AL,-1			; set availability to handles
 37279 00006678 F3AA                    	REP	STOSB
 37280 0000667A 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 37281                                  	;cmp	word [34h],0
 37282 0000667F 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 37283 00006684 750D                    	JNZ	short update_info	; yes, go update PDB entries
 37284 00006686 55                      	PUSH	BP
 37285 00006687 1E                      	PUSH	DS			; save old table segment
 37286 00006688 06                      	PUSH	ES			; save new table segment
 37287 00006689 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 37288 0000668D E81CFC                  	call	_$DEALLOC		; deallocate old table memory
 37289 00006690 07                      	POP	ES			; restore new table segment
 37290 00006691 1F                      	POP	DS			; restore old table segment
 37291 00006692 5D                      	POP	BP
 37292                                  
 37293                                  update_info:
 37294 00006693 F7C50200                	test	BP,2			; psp?
 37295 00006697 7408                    	JZ	short non_psp 		; no
 37296                                  	;mov	word [34h],18h ; 24
 37297 00006699 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 37298 0000669F EB06                    	JMP	short final
 37299                                  non_psp:
 37300                                  	;mov	word [34h],0
 37301 000066A1 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 37302                                  final:
 37303                                  	;mov	[36h],es	
 37304 000066A7 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 37305                                  	;pop	word [32h]
 37306 000066AB 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 37307                                  	; 11/03/2024
 37308                                  ok_done:
 37309                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37310 000066AF E9839F                  	jmp	SYS_RET_OK
 37311                                  ;ok_done_j:
 37312                                  ;	jmp	short ok_done
 37313                                  
 37314                                  no_memory:
 37315 000066B2 5B                      	POP	BX			; clean stack
 37316                                  	;mov	al,8
 37317 000066B3 B008                    	MOV	AL,error_not_enough_memory
 37318                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37319                                  	;jmp	SYS_RET_ERR
 37320                                  CommitErrorj2:
 37321 000066B5 EBAC                    	jmp	short CommitErrorj
 37322                                  
 37323                                  invalid_func:
 37324                                  	;mov	al,1
 37325 000066B7 B001                    	MOV	AL,error_invalid_function
 37326                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37327                                  	;jmp	SYS_RET_ERR
 37328                                  CommitErrorj3:
 37329                                  	;jmp	short CommitErrorj2
 37330                                  	; 17/12/2022
 37331 000066B9 EBA8                    	jmp	short CommitErrorj
 37332                                  
 37333                                  ; 20/05/2019 - Retro DOS v4.0
 37334                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 37335                                  
 37336                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37337                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 37338                                  
 37339                                  ;	BREAK <$READ - Read from a file handle>
 37340                                  ;----------------------------------------------------------------------------
 37341                                  ;
 37342                                  ;**	$Read - Read from a File Handle
 37343                                  ;
 37344                                  ;   Assembler usage:
 37345                                  ;
 37346                                  ;	LDS	DX, buf
 37347                                  ;	MOV	CX, count
 37348                                  ;	MOV	BX, handle
 37349                                  ;	MOV	AH, Read
 37350                                  ;	INT	int_command
 37351                                  ;	  AX has number of bytes read
 37352                                  ;
 37353                                  ;	ENTRY	(bx) = file handle
 37354                                  ;		(cx) = byte count
 37355                                  ;		(ds:dx) = buffer address
 37356                                  ;	EXIT	Through system call return so that to user:
 37357                                  ;		  'C' clear if OK
 37358                                  ;		    (ax) = bytes read
 37359                                  ;		  'C' set if error
 37360                                  ;		    (ax) = error code
 37361                                  ;
 37362                                  ;----------------------------------------------------------------------------
 37363                                  
 37364                                  	; 12/03/2024 - Retro DOS v4.1 (Modified MSDOS 5.0 MSDOS.SYS)
 37365                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:0A83Ah
 37366                                  
 37367                                  	; (PCDOS 7.1 IBMDOS.COM - DOSCODE:0BA2Eh)
 37368                                  
 37369                                  _$READ:
 37370 000066BB BE[2332]                	MOV	SI,DOS_READ
 37371                                  ReadDo:
 37372 000066BE E83AFE                  	call	pJFNFromHandle
 37373 000066C1 7208                    	JC	short ReadError
 37374                                  
 37375 000066C3 268A05                  	MOV	AL,[ES:DI]
 37376 000066C6 E83501                  	call	CheckOwner		; get the handle
 37377 000066C9 7303                    	JNC	short ReadSetup		; no errors do the operation
 37378                                  
 37379                                  ;	Have an error. 'C' set
 37380                                  
 37381                                  ReadError:
 37382                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37383                                  	;;jmp	SYS_RET_ERR		; go to error traps
 37384                                  	;jmp	short CommitErrorj3
 37385                                  	; 17/12/2022
 37386 000066CB E9709F                  	jmp	SYS_RET_ERR
 37387                                  
 37388                                  ReadSetup:
 37389 000066CE 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 37390 000066D3 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 37391                                  	; 20/05/2019 - Retro DOS v4.0
 37392                                  	; MSDOS 6.0 
 37393                                  ;; Extended Open
 37394                                  	;test	byte [es:di+3],20h
 37395 000066D8 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 37396                                  						 ;AN000;;EO. need i24
 37397 000066DD 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 37398 000066DF 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 37399                                  					;AN000;;EO. set it off;smr;SS Override
 37400                                  needi24:				;AN000;
 37401                                  
 37402                                  ; 12/03/2024
 37403                                  %if 0
 37404                                  
 37405                                  ;; Extended Open
 37406                                  	push	word [SS:DMAADD]
 37407                                  	push	word [SS:DMAADD+2]	;smr;SS Override
 37408                                  
 37409                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 37410                                  
 37411                                  	; 26/07/2019
 37412                                  
 37413                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37414                                  	;
 37415                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 37416                                  	; there is not another caller; it is better to put the code in this proc
 37417                                   	; here instead of calling it as a subroutine; but I have modified code
 37418                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 37419                                  
 37420                                  	; MSDOS 6.0
 37421                                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 37422                                  	
 37423                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37424                                  	; MSDOS 3.3
 37425                                  	;MOV	BX,DX			; copy offset
 37426                                  	;push	cx			; don't stomp on count
 37427                                  	;MOV	CL,4			; bits to shift bytes->para
 37428                                  	;SHR	BX,CL			; get number of paragraphs
 37429                                  	;pop	cx			; get count back
 37430                                  	;MOV	AX,DS			; get original segment
 37431                                  	;ADD	AX,BX			; get new segment
 37432                                  	;MOV	DS,AX			; in seg register
 37433                                  	;AND	DX,0Fh			; normalize offset
 37434                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37435                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37436                                  						;smr;SS Override
 37437                                  %else
 37438                                  	; 12/03/2024 (PCDOS 7.1 IBMDOS.COM)
 37439                                  	;;;
 37440 000066E5 8CD8                    	mov	ax,ds			; original segment
 37441 000066E7 36C51E[2C03]            	lds	bx,[ss:DMAADD]
 37442 000066EC 53                      	push	bx
 37443 000066ED 1E                      	push	ds
 37444 000066EE 89D3                    	mov	bx,dx
 37445 000066F0 D1EB                    	shr	bx,1
 37446 000066F2 D1EB                    	shr 	bx,1
 37447 000066F4 D1EB                    	shr	bx,1
 37448 000066F6 D1EB                    	shr	bx,1
 37449 000066F8 01D8                    	add	ax,bx			; new segment
 37450 000066FA 83E20F                  	and	dx,0Fh			; normalize offset
 37451                                  	;mov	[ss:DMAADD],dx		; use user DX as offset
 37452                                  	; 23/03/2024
 37453 000066FD 36A3[2E03]              	mov	[ss:DMAADD+2],ax 	; use user DS as segment for DMA
 37454                                  	;;;
 37455                                  
 37456                                  %endif
 37457                                  
 37458                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 37459                                  	
 37460 00006701 16                      	push	ss			; go for DOS addressability
 37461 00006702 1F                      	pop	ds
 37462                                  
 37463                                  	; 12/03/2024 - Retro DOS v4.1
 37464                                  	;;;
 37465 00006703 8916[2C03]              	mov	[DMAADD],dx	
 37466                                  	;;;
 37467                                  
 37468 00006707 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 37469                                  
 37470 00006709 8F06[2E03]              	pop	word [DMAADD+2]
 37471 0000670D 8F06[2C03]              	pop	word [DMAADD]
 37472                                  	;JNC	short READ_OK		;AN002;
 37473                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 37474                                  	; 17/12/2022
 37475 00006711 72B8                    	jc	short ReadError
 37476                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37477                                  	;jnc	short READ_OK		;AN002;
 37478                                  	;jmp	short ReadError
 37479                                  
 37480                                  READ_OK:
 37481 00006713 89C8                    	MOV	AX,CX			; get correct return in correct reg
 37482                                  Read_Okj:
 37483                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37484                                  	;;jmp	SYS_RET_OK		; successful return
 37485                                  	;jmp	short ok_done_j
 37486                                  	; 17/12/2022
 37487 00006715 E91D9F                  	jmp	SYS_RET_OK
 37488                                  
 37489                                  ; 13/07/2018 - Retro DOS v3.0
 37490                                  
 37491                                  ;----------------------------------------------------------------------------
 37492                                  
 37493                                  ; 12/03/2024
 37494                                  %if 0
 37495                                  
 37496                                  ;   Input: DS:DX points to user's buffer addr
 37497                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 37498                                  ;   Output: [DMAADD] set
 37499                                  
 37500                                  ; 20/05/2019 - Retro DOS v4.0
 37501                                  ; 26/07/2019
 37502                                  ;	; MSDOS 6.0
 37503                                  ;Align_Buffer:
 37504                                  ;	MOV	BX,DX			; copy offset
 37505                                  ;	push	cx			; don't stomp on count
 37506                                  ;	MOV	CL,4			; bits to shift bytes->para
 37507                                  ;	SHR	BX,CL			; get number of paragraphs
 37508                                  ;	pop	cx			; get count back
 37509                                  ;	MOV	AX,DS			; get original segment
 37510                                  ;	ADD	AX,BX			; get new segment
 37511                                  ;	MOV	DS,AX			; in seg register
 37512                                  ;	AND	DX,0Fh			; normalize offset
 37513                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37514                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37515                                  ;						;smr;SS Override
 37516                                  ;	retn
 37517                                  
 37518                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37519                                  Align_Buffer:
 37520                                  	MOV	BX,DX			; copy offset
 37521                                  	push	cx			; don't stomp on count
 37522                                  	MOV	CL,4			; bits to shift bytes->para
 37523                                  	SHR	BX,CL			; get number of paragraphs
 37524                                  	pop	cx			; get count back
 37525                                  	MOV	AX,DS			; get original segment
 37526                                  	ADD	AX,BX			; get new segment
 37527                                  	MOV	DS,AX			; in seg register
 37528                                  	AND	DX,0Fh			; normalize offset
 37529                                  	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37530                                  	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37531                                  						;smr;SS Override
 37532                                  	retn
 37533                                  
 37534                                  %endif
 37535                                  
 37536                                  ; 20/05/2019 - Retro DOS v4.0
 37537                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 37538                                  
 37539                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37540                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 37541                                  
 37542                                  ; 12/03/2024 - Retro DOS v4.1 (Modified MSDOS 5.0 MSDOS.SYS)
 37543                                  ; MSDOS 6.22 MSDOS.SYS - DOSCODE:0A8A0h
 37544                                  
 37545                                  ; (PCDOS 7.1 IBMDOS.COM - DOSCODE:0BA8Ch)
 37546                                  
 37547                                  ;BREAK <$WRITE - write to a file handle>
 37548                                  ;----------------------------------------------------------------------------
 37549                                  ;
 37550                                  ;   Assembler usage:
 37551                                  ;	    LDS     DX, buf
 37552                                  ;	    MOV     CX, count
 37553                                  ;	    MOV     BX, handle
 37554                                  ;	    MOV     AH, Write
 37555                                  ;	    INT     int_command
 37556                                  ;	  AX has number of bytes written
 37557                                  ;   Errors:
 37558                                  ;	    AX = write_invalid_handle
 37559                                  ;	       = write_access_denied
 37560                                  ;
 37561                                  ;   Returns in register AX
 37562                                  ;
 37563                                  ;----------------------------------------------------------------------------
 37564                                  
 37565                                  _$WRITE:
 37566 00006718 BE[2434]                	MOV	SI,DOS_WRITE
 37567 0000671B EBA1                    	JMP	short ReadDo
 37568                                  
 37569                                  ;BREAK <$LSEEK - move r/w pointer>
 37570                                  ;----------------------------------------------------------------------------
 37571                                  ;
 37572                                  ;   Assembler usage:
 37573                                  ;	    MOV     DX, offsetlow
 37574                                  ;	    MOV     CX, offsethigh
 37575                                  ;	    MOV     BX, handle
 37576                                  ;	    MOV     AL, method
 37577                                  ;	    MOV     AH, LSeek
 37578                                  ;	    INT     int_command
 37579                                  ;	  DX:AX has the new location of the pointer
 37580                                  ;   Error returns:
 37581                                  ;	    AX = error_invalid_handle
 37582                                  ;	       = error_invalid_function
 37583                                  ;   Returns in registers DX:AX
 37584                                  ;
 37585                                  ;----------------------------------------------------------------------------
 37586                                  
 37587                                  ; 21/05/2019 - Retro DOS v4.0
 37588                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 37589                                  
 37590                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37591                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 37592                                  
 37593                                  _$LSEEK:
 37594 0000671D E8DE00                  	call	CheckOwner		; get system file entry
 37595                                  
 37596                                  	; 17/12/2022
 37597                                  ;LSeekError:
 37598                                  	;JNC	short CHKOWN_OK		;AN002;
 37599                                  	;JMP	short ReadError		;AN002; error return
 37600                                  	; 17/12/2022
 37601                                  	; 02/06/2019
 37602 00006720 72A9                    	jc	short ReadError
 37603                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37604                                  	;JNC	short CHKOWN_OK		;AN002;
 37605                                  	;JMP	short ReadError		;AN002; error return
 37606                                  
 37607                                  CHKOWN_OK:
 37608                                  					;AN002;
 37609 00006722 3C02                    	CMP	AL,2			; is the seek value correct?
 37610 00006724 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 37611                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 37612 00006726 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37613                                  					;smr;SS Override
 37614                                  	;mov	al,1
 37615 0000672C B001                    	mov	al,error_invalid_function ; invalid method
 37616                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37617                                  LSeekError2:
 37618 0000672E EB9B                    	jmp	short ReadError
 37619                                  
 37620                                  LSeekDisp:
 37621 00006730 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 37622 00006732 720A                    	JB	short LSeekStore	; just store CX:DX
 37623 00006734 771B                    	JA	short LSeekEOF		; seek from end of file
 37624                                  	;add	dx,[es:di+21]
 37625 00006736 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 37626                                  	;adc	cx,[es:di+23]
 37627 0000673A 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 37628                                  LSeekStore:
 37629 0000673E 89C8                    	MOV	AX,CX			; AX:DX
 37630 00006740 92                      	XCHG	AX,DX			; DX:AX is the correct value
 37631                                  LSeekSetpos:
 37632                                  	;mov	[es:di+21],ax
 37633 00006741 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 37634                                  	;mov	[es:di+23],dx
 37635 00006745 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 37636 00006749 E8399D                  	call	Get_User_Stack
 37637                                  	;mov	[si+6],dx
 37638 0000674C 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 37639                                  	;jmp	SYS_RET_OK		; successful return
 37640                                  	; 25/06/2019
 37641                                  	;jmp	SYS_RET_OK_clc
 37642                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37643                                  	;jmp	SYS_RET_OK_clc
 37644                                  LSeekOk:
 37645 0000674F EBC4                    	jmp     short Read_Okj
 37646                                  
 37647                                  LSeekEOF:
 37648                                  	;;test	word [es:di+5],8000h
 37649                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 37650                                  	; 21/05/2019 - Retro DOS v4.0
 37651 00006751 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 37652 00006756 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 37653                                  LOCAL_LSeek:
 37654                                  	;add	dx,[es:di+17]
 37655 00006758 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 37656                                  	;adc	cx,[es:di+19]
 37657 0000675C 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 37658 00006760 EBDC                    	JMP	short LSeekStore	; go and set the position
 37659                                  
 37660                                  Check_LSeek_Mode:
 37661                                  	;;test	word [es:di+2],8000h
 37662                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 37663                                  	; 21/05/2019
 37664 00006762 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 37665 00006767 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 37666                                  	;mov	ax,[es:di+2]
 37667 00006769 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 37668                                  	;and	ax,0F0h
 37669 0000676D 25F000                  	AND	AX,SHARING_MASK
 37670                                  	;cmp	ax,40h
 37671 00006770 83F840                  	CMP	AX,SHARING_DENY_NONE
 37672 00006773 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 37673                                  	;cmp	ax,30h
 37674 00006775 83F830                  	CMP	AX,SHARING_DENY_READ
 37675 00006778 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 37676                                  NET_LSEEK:
 37677                                  ;	JMP	short LOCAL_LSeek
 37678                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 37679                                  	;CallInstall Net_Lseek,MultNET,33
 37680                                  	;JNC	short LSeekSetPos
 37681                                  
 37682 0000677A B82111                  	mov     ax,1121h
 37683 0000677D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 37684                                  			; CX:DX = offset (in bytes) from end
 37685                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 37686                                  			; SS = DOS CS
 37687                                  			; Return: CF set on error
 37688                                  			; CF clear if successful, DX:AX = new file position
 37689 0000677F 73C0                    	jnb     short LSeekSetpos
 37690                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37691                                  	;jmp	SYS_RET_ERR
 37692                                  ;LSeekError3:
 37693                                  	; 17/12/2022
 37694                                  LSeekError:
 37695                                  	;jmp	short LSeekError2
 37696                                  DupErr:	; 17/12/2022
 37697 00006781 E9BA9E                  	jmp	SYS_RET_ERR
 37698                                  
 37699                                  ;BREAK <FileTimes - modify write times on a handle>
 37700                                  ;----------------------------------------------------------------------------
 37701                                  ;
 37702                                  ;   Assembler usage:
 37703                                  ;	    MOV AH, FileTimes (57H)
 37704                                  ;	    MOV AL, func
 37705                                  ;	    MOV BX, handle
 37706                                  ;	; if AL = 1 then then next two are mandatory
 37707                                  ;	    MOV CX, time
 37708                                  ;	    MOV DX, date
 37709                                  ;	    INT 21h
 37710                                  ;	; if AL = 0 then CX/DX has the last write time/date
 37711                                  ;	; for the handle.
 37712                                  ;
 37713                                  ;	AL=02		 get extended attributes
 37714                                  ;	   BX=handle
 37715                                  ;	   CX=size of buffer (0, return max size )
 37716                                  ;	   DS:SI query list (si=-1, selects all EA)
 37717                                  ;	   ES:DI buffer to hold EA list
 37718                                  ;
 37719                                  ;	AL=03		 get EA name list
 37720                                  ;	   BX=handle
 37721                                  ;	   CX=size of buffer (0, return max size )
 37722                                  ;	   ES:DI buffer to hold name list
 37723                                  ;
 37724                                  ;	AL=04		 set extended attributes
 37725                                  ;	   BX=handle
 37726                                  ;	   ES:DI buffer of EA list
 37727                                  ;
 37728                                  ;
 37729                                  ;   Error returns:
 37730                                  ;	    AX = error_invalid_function
 37731                                  ;	       = error_invalid_handle
 37732                                  ;
 37733                                  ;----------------------------------------------------------------------------
 37734                                  
 37735                                  ; 21/05/2019 - Retro DOS v4.0
 37736                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 37737                                  
 37738                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37739                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 37740                                  
 37741                                  _$FILE_TIMES:
 37742                                  	; 13/07/2018 - Retro DOS v3.0
 37743                                  
 37744                                  	; MSDOS 3.3
 37745                                  	;cmp	al,2			; correct subfunction ?
 37746                                  	;jb	short ft1
 37747                                  
 37748                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 37749                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37750                                  						;SS Overr
 37751                                  	;;mov	al,1
 37752                                  	;mov	al,error_invalid_function ; give bad return
 37753                                  	;jmp	SYS_RET_ERR
 37754                                  
 37755                                  	; MSDOS 6.0
 37756 00006784 3C02                    	cmp	al,2			; correct subfunction ?
 37757 00006786 7340                    	jae	short inval_func
 37758                                  ;ft1:
 37759 00006788 E87300                  	call	CheckOwner		; get sft
 37760                                  	; 17/12/2022
 37761 0000678B 72F4                    	jc	short LSeekError	; bad handle
 37762                                  
 37763 0000678D 08C0                    	or	al,al			; get time/date ?
 37764 0000678F 7515                    	jnz	short ft_set_time
 37765                                  
 37766                                  ;------ here we get the time & date from the sft for the user
 37767                                  
 37768 00006791 FA                      	cli				; is this cli/sti reqd ? BUGBUG
 37769                                  	;mov	cx,[es:di+13]
 37770 00006792 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 37771                                  	;mov	dx,[es:di+15]
 37772 00006796 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 37773 0000679A FB                      	sti
 37774 0000679B E8E79C                  	call	Get_User_Stack
 37775                                  	;mov	[si+4],cx
 37776 0000679E 894C04                  	mov	[si+user_env.user_CX],cx
 37777                                  	;mov	[si+6],dx
 37778 000067A1 895406                  	mov	[si+user_env.user_DX],dx
 37779 000067A4 EB1F                    	jmp	short ok_ret
 37780                                  
 37781                                  ;------ here we set the time in sft
 37782                                  
 37783                                  ft_set_time:
 37784 000067A6 E83EAB                  	call    ECritSFT
 37785                                  	;mov	[es:di+13],cx
 37786 000067A9 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 37787                                  	;mov	[es:di+15],dx
 37788 000067AD 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 37789                                  
 37790 000067B1 31C0                    	xor	ax, ax
 37791 000067B3 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 37792                                  
 37793                                  ;------ set the flags in SFT entry
 37794                                  	;and	word [es:di+5],0FFBFh
 37795                                  	; 18/12/2022
 37796                                  	;and	byte [es:di+5],0BFh
 37797 000067B8 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 37798                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 37799                                  							; mark file as dirty
 37800                                  	;or	word [es:di+5],4000h
 37801                                  	; 17/12/2022
 37802                                  	;or	byte [es:di+6],40h
 37803 000067BD 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 37804                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 37805                                  							; ask close not to
 37806                                  							;   bother about date
 37807                                  							;   and time
 37808 000067C2 E83DAB                  	call	LCritSFT
 37809                                  ok_ret:
 37810                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37811                                  	; 17/12/2022
 37812 000067C5 E96D9E                  	jmp	SYS_RET_OK
 37813                                  	;jmp	short LSeekOk
 37814                                  
 37815                                  inval_func:
 37816                                  	;mov	byte [ss:EXTERR_LOCUS],1
 37817 000067C8 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37818                                  						;SS Overr
 37819                                  	;mov	al,1
 37820 000067CE B001                    	mov	al,error_invalid_function ; give bad return
 37821                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37822                                  ft_error:
 37823                                  	;;jmp	SYS_RET_ERR
 37824                                  	;jmp	short LSeekError3
 37825                                  	; 17/12/2022
 37826 000067D0 EBAF                    	jmp	short LSeekError
 37827                                  
 37828                                  ; 21/05/2019 - Retro DOS v4.0
 37829                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 37830                                  
 37831                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37832                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 37833                                  
 37834                                  ;BREAK <$DUP - duplicate a jfn>
 37835                                  ;----------------------------------------------------------------------------
 37836                                  ;
 37837                                  ;   Assembler usage:
 37838                                  ;	    MOV     BX, fh
 37839                                  ;	    MOV     AH, Dup
 37840                                  ;	    INT     int_command
 37841                                  ;	  AX has the returned handle
 37842                                  ;   Errors:
 37843                                  ;	    AX = dup_invalid_handle
 37844                                  ;	       = dup_too_many_open_files
 37845                                  ;
 37846                                  ;----------------------------------------------------------------------------
 37847                                  
 37848                                  _$DUP:
 37849 000067D2 89D8                    	MOV	AX,BX			; save away old handle in AX
 37850 000067D4 E881FD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 37851                                  DupErrorCheck:
 37852 000067D7 72A8                    	JC	short DupErr		; nope, bye
 37853 000067D9 06                      	push	es
 37854 000067DA 57                      	push	di			; save away SFT
 37855 000067DB 5E                      	pop	si			; into convenient place DS:SI
 37856 000067DC 1F                      	pop	ds
 37857 000067DD 93                      	XCHG	AX,BX			; get back old handle
 37858 000067DE E81D00                  	call	CheckOwner		; get sft in ES:DI
 37859 000067E1 729E                    	JC	short DupErr		; errors go home
 37860 000067E3 E8C5C1                  	call	DOS_Dup_Direct
 37861 000067E6 E812FD                  	call	pJFNFromHandle		; get pointer
 37862 000067E9 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 37863 000067EC 881C                    	MOV	[SI],BL			; stuff in new SFT
 37864                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37865                                  	;jmp	SYS_RET_OK		; and go home
 37866 000067EE EBD5                    	jmp	short ok_ret
 37867                                  
 37868                                  	; 17/12/2022
 37869                                  ;DupErr:
 37870                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37871                                  	;;jmp	SYS_RET_ERR
 37872                                  	;jmp	short ft_error
 37873                                  
 37874                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 37875                                  ;----------------------------------------------------------------------------
 37876                                  ;
 37877                                  ;   Assembler usage:
 37878                                  ;	    MOV     BX, fh
 37879                                  ;	    MOV     CX, newfh
 37880                                  ;	    MOV     AH, Dup2
 37881                                  ;	    INT     int_command
 37882                                  ;   Error returns:
 37883                                  ;	    AX = error_invalid_handle
 37884                                  ;
 37885                                  ;----------------------------------------------------------------------------
 37886                                  
 37887                                  _$DUP2:
 37888 000067F0 53                      	push	bx
 37889 000067F1 51                      	push	cx			; save source
 37890 000067F2 89CB                    	MOV	BX,CX			; get one to close
 37891 000067F4 E8BBFD                  	call	_$CLOSE			; close destination handle
 37892 000067F7 5B                      	pop	bx
 37893 000067F8 58                      	pop	ax			; old in AX, new in BX
 37894 000067F9 E8FFFC                  	call	pJFNFromHandle		; get pointer
 37895 000067FC EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 37896                                  
 37897                                  ;Break	<CheckOwner - verify ownership of handles from server>
 37898                                  ;----------------------------------------------------------------------------
 37899                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 37900                                  ;   process without the process knowing it (delete/rename of open files, for
 37901                                  ;   example), it is possible for the redirector to issue a call to a handle
 37902                                  ;   that it soes not rightfully own. We check here to make sure that the
 37903                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 37904                                  ;   SFFromHandle to really make sure that the SFT is good.
 37905                                  ;
 37906                                  ;	ENTRY	BX has the handle
 37907                                  ;		User_ID is the current user
 37908                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 37909                                  ;		Carry Set => AX has error code
 37910                                  ;	USES	none
 37911                                  ;----------------------------------------------------------------------------
 37912                                  
 37913                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37914                                  	; 21/05/2019 - Retro DOS v4.0
 37915                                  CheckOwner:
 37916                                  	; 13/07/2018 - Retro DOS v3.0
 37917                                  
 37918 000067FE E817FD                  	call	SFFromHandle
 37919 00006801 721B                    	jc	short co_ret_label	; retc
 37920                                  
 37921 00006803 50                      	push	ax
 37922                                  
 37923                                  	; MSDOS 6.0
 37924                                  
 37925                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 37926                                  ;SR; are shared across multiple VMs in win386.
 37927                                  
 37928 00006804 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 37929 0000680A 7404                    	jz	short no_win386		;win386 is not present
 37930 0000680C 31C0                    	xor	ax,ax			;set the zero flag
 37931 0000680E EB08                    	jmp	short _skip_win386	
 37932                                  
 37933                                  no_win386:
 37934 00006810 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 37935                                  	;cmp	ax,[es:di+47]
 37936 00006814 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 37937                                  
 37938                                  _skip_win386:
 37939 00006818 58                      	pop	ax
 37940                                  	
 37941                                  	; 17/12/2022
 37942 00006819 7403                    	jz	short co_ret_label
 37943                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37944                                  	;jnz	short CheckOwner_err
 37945                                  	;retn
 37946                                  	
 37947                                  CheckOwner_err:
 37948                                  	;mov	al,6
 37949 0000681B B006                    	mov	al,error_invalid_handle
 37950 0000681D F9                      	stc
 37951                                  
 37952                                  co_ret_label:
 37953 0000681E C3                      	retn
 37954                                  
 37955                                  ;============================================================================
 37956                                  ; MACRO.ASM, MSDOS 6.0, 1991
 37957                                  ;============================================================================
 37958                                  ; Retro	DOS v3.0 - 11/07/2018
 37959                                  ; 21/05/2019 - Retro DOS v4.0
 37960                                  
 37961                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 37962                                  ;	NAME	MACRO
 37963                                  
 37964                                  ;	Microsoft Confidential
 37965                                  ;	Copyright (C) Microsoft Corporation 1991
 37966                                  ;	All Rights Reserved.
 37967                                  
 37968                                  ;**	MACRO.ASM
 37969                                  ;
 37970                                  ;	$AssignOper
 37971                                  ;	FIND_DPB
 37972                                  ;	InitCDS
 37973                                  ;	$UserOper
 37974                                  ;	GetVisDrv
 37975                                  ;	GetThisDrv
 37976                                  ;	GetCDSFromDrv
 37977                                  ;
 37978                                  ;   Revision history:
 37979                                  ;
 37980                                  ;	Created: MZ 4 April 1983
 37981                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 37982                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 37983                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 37984                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 37985                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 37986                                  ;				    aliasing.
 37987                                  ;
 37988                                  ;   MSDOS performs several types of name translation. First, we maintain for
 37989                                  ;   each valid drive letter the text of the current directory on that drive.
 37990                                  ;   For invalid drive letters, there is no current directory so we pretend to
 37991                                  ;   be at the root. A current directory is either the raw local directory
 37992                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 37993                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 37994                                  ;
 37995                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 37996                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 37997                                  ;   this and all * are expanded into ?'s.
 37998                                  ;
 37999                                  ;   The second part of name translation involves subtree aliasing. A list of
 38000                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 38001                                  ;   the previous 'canonicalization' are then examined to see if any of the
 38002                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 38003                                  ;   replaced with the other subtree in the pair.
 38004                                  ;
 38005                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 38006                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 38007                                  ;   The output of the previous translation is examined to see if any of the
 38008                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 38009                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 38010                                  ;   'mount' one device under another.
 38011                                  ;
 38012                                  ;   The final form of name translation involves the mapping of a user's
 38013                                  ;   logical drive number into the internal physical drive. This is
 38014                                  ;   accomplished by converting the drive number into letter:CON, performing
 38015                                  ;   the above translation and then converting the character back into a drive
 38016                                  ;   number.
 38017                                  ;
 38018                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 38019                                  ;   take a path and form the real text of the pathname with all . and ..
 38020                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 38021                                  ;   TransPath.
 38022                                  ;
 38023                                  ;	A000	version 4.00  Jan. 1988
 38024                                  
 38025                                  ;Installed = TRUE
 38026                                  
 38027                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 38028                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 38029                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 38030                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 38031                                  ;					; current drive)
 38032                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 38033                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 38034                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 38035                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 38036                                  ;	I_need	MYNAME,16		; machine name
 38037                                  ;	I_need	MYNUM,WORD		; machine number
 38038                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 38039                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 38040                                  ;	I_need	DrvErr,BYTE		; drive error
 38041                                  
 38042                                  ;BREAK <$AssignOper -- Set up a Macro>
 38043                                  ;----------------------------------------------------------------------------
 38044                                  ; Inputs:
 38045                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 38046                                  ;	AL = 01 set assign mode 		    (SetMode)
 38047                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 38048                                  ;	AL = 03 Define Macro (attch start)
 38049                                  ;	    BL = Macro type
 38050                                  ;	       = 0 alias
 38051                                  ;	       = 1 file/device
 38052                                  ;	       = 2 drive
 38053                                  ;	       = 3 Char device -> network
 38054                                  ;	       = 4 File device -> network
 38055                                  ;	    DS:SI -> ASCIZ source name
 38056                                  ;	    ES:DI -> ASCIZ destination name
 38057                                  ;	AL = 04 Cancel Macro
 38058                                  ;	    DS:SI -> ASCIZ source name
 38059                                  ;	AL = 05 Modified get attach list entry
 38060                                  ;	AL = 06 Get ifsfunc item
 38061                                  ;	AL = 07 set in_use of a drive's CDS
 38062                                  ;	     DL = drive number, 0=default  0=A,,
 38063                                  ;	AL = 08 reset in_use of a drive's CDS
 38064                                  ;	     DL = drive number, 0=A, 1=B,,,
 38065                                  ; Function:
 38066                                  ;	Do macro stuff
 38067                                  ; Returns:
 38068                                  ;	Std Xenix style error return
 38069                                  ;----------------------------------------------------------------------------
 38070                                  
 38071                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38072                                  	; 21/05/2019 - Retro DOS v4.0
 38073                                  _$AssignOper:
 38074                                  	; MSDOS 6.0
 38075 0000681F 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 38076 00006821 7525                    	JNZ	short chk08		      ; no			;AN000;
 38077                                  srinuse:								;AN000;
 38078 00006823 50                      	PUSH	AX			      ; save al 		;AN000;
 38079 00006824 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 38080 00006826 E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 38081 00006829 58                      	POP	AX			      ; 			;AN000;
 38082 0000682A 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 38083                                  	;cmp	word [si+45h],0
 38084 0000682C 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 38085 00006830 7410                    	JZ	short baddrv		      ;     no			;AN000;
 38086 00006832 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 38087 00006834 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 38088                                  	;or	word [si+43h],4000h
 38089                                  	; 17/12/2022
 38090                                  	;or	byte [si+44h],40h
 38091 00006836 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 38092                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 38093 0000683A EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 38094                                  resetdrv:
 38095                                  	;and	word [si+43h],0BFFFh									;AN000;
 38096                                  	; 18/12/2022
 38097 0000683C 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 38098                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 38099 00006840 EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 38100                                  
 38101                                  	; 17/12/2022
 38102                                  baddrv: 								;AN000;
 38103 00006842 B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 38104                                  
 38105                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38106                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 38107                                  	; 17/12/2022
 38108                                  	; 21/05/2019
 38109                                  ASS_ERR:
 38110 00006845 E9F69D                  	jmp	SYS_RET_ERR
 38111                                  
 38112                                  chk08:									;AN000;
 38113 00006848 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 38114 0000684A 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 38115                                  
 38116                                    ;IF	NOT INSTALLED
 38117                                  	;transfer NET_ASSOPER
 38118                                    ;ELSE
 38119                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38120 0000684C 50                      	PUSH	AX
 38121                                  	;mov	ax,111Eh
 38122                                  	;MOV	AX,(MultNET SHL 8) OR 30
 38123 0000684D B81E11                  	mov	ax,(MultNET*256)+30
 38124 00006850 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 38125                                  			; SS = DOS CS
 38126                                  			; STACK: WORD function to execute
 38127                                  			; Return: CF set on error, AX = error code
 38128                                  			; STACK unchanged
 38129 00006852 5B                      	POP	BX			; Don't zap error code in AX
 38130 00006853 72F0                    	JC	short ASS_ERR
 38131                                  okdone:
 38132 00006855 E9DD9D                  	jmp	SYS_RET_OK
 38133                                  
 38134                                  	; 17/12/2022
 38135                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38136                                  ;ASS_ERR:
 38137                                  	;jmp	SYS_RET_ERR
 38138                                  
 38139                                    ;ENDIF
 38140                                  
 38141                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 38142                                  ;----------------------------------------------------------------------------
 38143                                  ;**	FIND_DPB - Find a DPB from a Drive #
 38144                                  ;
 38145                                  ;	ENTRY	AL has drive number A = 0
 38146                                  ;	EXIT	'C' set
 38147                                  ;		    No DPB for this drive number
 38148                                  ;		'C' clear
 38149                                  ;		    DS:SI points to DPB for drive
 38150                                  ;	USES	SI, DS, Flags
 38151                                  ;----------------------------------------------------------------------------
 38152                                  
 38153                                  	; 21/05/2019 - Retro DOS v4.0
 38154                                  FIND_DPB:
 38155 00006858 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 38156                                  fdpb5:	
 38157 0000685D 83FEFF                  	CMP	SI,-1
 38158 00006860 7409                    	JZ	short fdpb10
 38159 00006862 3A04                    	cmp	al,[si]
 38160                                  	;CMP	AL,[SI+DPB.DRIVE]
 38161 00006864 7406                    	jz	short ret_label15	; Carry clear (retz)
 38162                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 38163                                  	;lds	si,[si+19h] ; MSDOS 6.0
 38164 00006866 C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 38165 00006869 EBF2                    	JMP	short fdpb5
 38166                                  fdpb10:	
 38167 0000686B F9                      	STC
 38168                                  ret_label15:
 38169 0000686C C3                      	retn
 38170                                  
 38171                                  ;	Break <InitCDS - set up an empty CDS>
 38172                                  ;----------------------------------------------------------------------------
 38173                                  ;**	InitCDS - Setup an Empty CDS
 38174                                  ;
 38175                                  ;	ENTRY	ThisCDS points to CDS
 38176                                  ;		AL has uppercase drive letter
 38177                                  ;	EXIT	ThisCDS is now empty
 38178                                  ;		(ES:DI) = CDS
 38179                                  ;		'C' set if no DPB associated with drive
 38180                                  ;	USES	AH,ES,DI, Flags
 38181                                  ;----------------------------------------------------------------------------
 38182                                  
 38183                                  ; 21/05/2019 - Retro DOS v4.0
 38184                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 38185                                  
 38186                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38187                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 38188                                  
 38189                                  InitCDS:
 38190                                  	; 19/08/2018
 38191                                  	; 05/08/2018 - Retro DOS v3.0
 38192                                  	; MSDOS 6.0
 38193 0000686D 50                      	push	ax			; save (AL) for caller
 38194 0000686E 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 38195                                  	;mov	word [es:di+67],0
 38196 00006873 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 38197 00006879 2C40                    	SUB	AL,"A"-1                ; A = 1
 38198 0000687B 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 38199 00006880 7236                    	JC	short icdsx		; Drive does not map a physical drive
 38200 00006882 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 38201 00006883 50                      	PUSH	AX			; save drive number for later
 38202 00006884 0441                    	add	al,"A"
 38203 00006886 B43A                    	MOV	AH,':'
 38204 00006888 268905                  	mov	[ES:DI],ax
 38205                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 38206                                  	;mov	ax,"\"
 38207                                  	;mov	[es:di+2],ax
 38208                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 38209 0000688B 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 38210                                  	;or	word [es:di+67],4000h
 38211                                  	;or	byte [es:di+68],40h
 38212 00006891 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 38213 00006896 29C0                    	sub	ax,ax
 38214                                  	;MOV	[es:di+73],ax ; 0
 38215 00006898 26894549                	MOV	[ES:DI+curdir.ID],ax
 38216                                  	;mov	[es:di+75],ax ; 0
 38217 0000689C 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 38218 000068A0 B002                    	mov	al,2
 38219                                  	;mov	[es:di+79],aX ; 2
 38220 000068A2 2689454F                	MOV	[ES:DI+curdir.end],ax
 38221 000068A6 58                      	POP	AX			; (al) = drive number
 38222 000068A7 1E                      	push	ds
 38223 000068A8 56                      	push	si
 38224 000068A9 E8ACFF                  	call	FIND_DPB
 38225 000068AC 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 38226                                  	;mov	[es:di+69],si
 38227 000068AE 26897545                	MOV	[ES:DI+curdir.devptr],SI
 38228                                  	;mov	[es:di+71],ds
 38229 000068B2 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 38230                                  icds5:	
 38231 000068B6 5E                      	pop	si
 38232 000068B7 1F                      	pop	ds
 38233                                  icdsx:	
 38234 000068B8 58                      	pop	ax
 38235                                  RET45:
 38236 000068B9 C3                      	retn
 38237                                  
 38238                                  ;Break <$UserOper - get/set current user ID (for net)>
 38239                                  ;----------------------------------------------------------------------------
 38240                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 38241                                  ;	maintain this string and do no verifications.
 38242                                  ;
 38243                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 38244                                  ;				      4-printer-set-flags,5-printer-get-flags)
 38245                                  ;		DS:DX is user string pointer (calls 1,2)
 38246                                  ;		ES:DI is user buffer (call 3)
 38247                                  ;		BX is assign index (calls 2,3,4,5)
 38248                                  ;		CX is user number (call 1)
 38249                                  ;		DX is flag word (call 4)
 38250                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 38251                                  ;			and user CX is set to the user number
 38252                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 38253                                  ;		If AL = 5 then DX is flag word
 38254                                  ;----------------------------------------------------------------------------
 38255                                  
 38256                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38257                                  	; 21/05/2019 - Retro DOS v4.0
 38258                                  _$UserOper:
 38259                                  	; 05/08/2018 - Retro DOS v3.0
 38260                                  	; MSDOS 6.0 (& MSDOS 3.3)
 38261 000068BA 50                      	PUSH	AX
 38262 000068BB 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 38263 000068BD 58                      	POP	AX
 38264 000068BE 7211                    	JB	short UserGet 		; return to user the string
 38265 000068C0 742E                    	JZ	short UserSet 		; set the current user
 38266 000068C2 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 38267 000068C4 763D                    	JBE	short UserPrint		; yep
 38268                                  	;mov	byte [ss:EXTERR_LOCUS],1
 38269 000068C6 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 38270                                  					; Extended Error Locus
 38271                                  	;error	error_invalid_function	; not 0,1,2,3
 38272                                  	;mov	al,1
 38273 000068CC B001                    	MOV	AL,error_invalid_function
 38274                                  useroper_error:
 38275                                  	; 17/12/2022
 38276                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38277 000068CE E96D9D                  	JMP	SYS_RET_ERR
 38278                                  	;jmp	short ASS_ERR
 38279                                  
 38280                                  UserGet:
 38281                                  ; Transfer MYNAME to DS:DX
 38282                                  ; Set Return CX to MYNUM
 38283 000068D1 1E                      	PUSH	DS			; switch registers
 38284 000068D2 07                      	POP	ES
 38285 000068D3 89D7                    	MOV	DI,DX			; destination
 38286 000068D5 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 38287 000068DA E8A89B                  	call	Get_User_Stack
 38288                                  	;mov	[si+4],cx
 38289 000068DD 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 38290 000068E0 16                      	push	ss			; point to DOSDATA
 38291 000068E1 1F                      	pop	ds
 38292 000068E2 BE[0503]                	MOV	SI,MYNAME		; point source to user string
 38293                                  UserMove:
 38294 000068E5 B90F00                  	MOV	CX,15
 38295 000068E8 F3A4                    	REP	MOVSB			; blam.
 38296 000068EA 31C0                    	XOR	AX,AX			; 16th byte is 0
 38297 000068EC AA                      	STOSB
 38298                                  UserBye:
 38299 000068ED E9459D                  	jmp	SYS_RET_OK		; no errors here
 38300                                  
 38301                                  UserSet:
 38302                                  ; Transfer DS:DX to MYNAME
 38303                                  ; CX to MYNUM
 38304 000068F0 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 38305 000068F5 89D6                    	MOV	SI,DX			; user space has source
 38306 000068F7 16                      	push	ss
 38307 000068F8 07                      	pop	es
 38308 000068F9 BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 38309 000068FC 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 38310 00006901 EBE2                    	JMP	short UserMove
 38311                                  
 38312                                  UserPrint:
 38313                                  
 38314                                    ;IF NOT Installed
 38315                                    ;	transfer PRINTER_GETSET_STRING
 38316                                    ;ELSE
 38317 00006903 50                      	PUSH	AX
 38318                                  	;mov	ax,111Fh
 38319                                  	;MOV	AX,(MultNET SHL 8) OR 31
 38320 00006904 B81F11                  	mov	ax,(MultNET<<8)|31
 38321 00006907 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 38322                                  			; STACK: WORD function
 38323                                  			; Return: CF set on error, AX = error code
 38324                                  			; STACK unchanged
 38325 00006909 5A                      	POP	DX			; Clean stack
 38326                                  	;JNC	short OKPA
 38327 0000690A 73E1                    	jnc	short UserBye ; 21/05/2019
 38328                                  	; 17/12/2022
 38329 0000690C EBC0                    	jmp	short useroper_error
 38330                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38331                                  	;jnb     short OKPA
 38332                                  	;jmp     short useroper_error
 38333                                  
 38334                                  	; 17/12/2022
 38335                                  ;OKPA:
 38336                                  ;	jmp	short UserBye
 38337                                  
 38338                                    ;ENDIF
 38339                                  
 38340                                  
 38341                                  ;Break	<GetVisDrv - return visible drive>
 38342                                  ;----------------------------------------------------------------------------
 38343                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 38344                                  ;
 38345                                  ;   Inputs:	AL has drive identifier (0=default)
 38346                                  ;   Outputs:	Carry Set - invalid drive/macro
 38347                                  ;		Carry Clear - AL has physical drive (0=A)
 38348                                  ;		    ThisCDS points to CDS
 38349                                  ;   Registers modified: AL
 38350                                  ;----------------------------------------------------------------------------
 38351                                  
 38352                                  	; 21/05/2019 - Retro DOS v4.0
 38353                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 38354                                  
 38355                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38356                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 38357                                  GetVisDrv:
 38358                                  	; 05/08/2018 - Retro DOS v3.0
 38359                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 38360 0000690E E81900                  	CALL	GETTHISDRV		; get inuse drive
 38361 00006911 72A6                    	jc	short RET45
 38362 00006913 1E                      	push	ds
 38363 00006914 56                      	push	si
 38364 00006915 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 38365                                  	;test	word [si+67],2000h
 38366                                  	; 17/12/2022
 38367                                  	;test	byte [si+68],20h
 38368 0000691A F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 38369                                  	;TEST	word [SI+curdir.flags],curdir_splice
 38370 0000691E 5E                      	pop	si
 38371 0000691F 1F                      	pop	ds
 38372 00006920 7497                    	jz	short RET45		; if not spliced, return OK
 38373                                  	; MSDOS 6.0
 38374                                  	;mov	byte [ss:DrvErr],0Fh
 38375 00006922 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 38376 00006928 F9                      	STC				; signal error
 38377 00006929 C3                      	retn
 38378                                  
 38379                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 38380                                  ;----------------------------------------------------------------------------
 38381                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 38382                                  ;	macro pointer
 38383                                  ;
 38384                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 38385                                  ;   Outputs:
 38386                                  ;		Carry Set - invalid drive/macro
 38387                                  ;		Carry Clear - AL has physical drive (0=A)
 38388                                  ;		   ThisCDS points to macro
 38389                                  ;   Registers modified: AL
 38390                                  ;----------------------------------------------------------------------------
 38391                                  
 38392                                  	; 21/05/2019 - Retro DOS v4.0
 38393                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 38394                                  
 38395                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38396                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 38397                                  GETTHISDRV:
 38398                                  	; 05/08/2018
 38399                                  	; 12/07/2018 - Retro DOS v3.0
 38400                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 38401                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38402 0000692A 08C0                    	OR	AL,AL			; are we using default drive?
 38403 0000692C 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 38404 0000692E 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 38405                                  	;INC	ax			; Counteract next instruction
 38406                                  	; 04/09/2018
 38407                                  	;inc	al
 38408                                  	; 07/12/2022
 38409 00006932 40                      	inc	ax
 38410                                  GTD10:	
 38411                                  	;DEC	AX
 38412                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38413 00006933 48                      	dec	ax			; 0 = A
 38414                                  	;dec	al
 38415 00006934 1E                      	PUSH	DS			; save world
 38416 00006935 56                      	PUSH	SI
 38417                                  	;mov	byte [ss:EXTERR_LOCUS],2
 38418 00006936 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 38419                                  
 38420                                  	;TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 38421                                  	;JZ	SHORT GTD20		; Logical
 38422                                  	; 13/03/2024 (PCDOS71. IBMDOS.COM)
 38423                                  	;;;
 38424 0000693C 36803E[7205]00          	cmp	byte [ss:FSHARING],0
 38425 00006942 7420                    	jz	short GTD20
 38426                                  	;;;
 38427                                  
 38428 00006944 50                      	PUSH	AX
 38429 00006945 06                      	PUSH	ES
 38430 00006946 57                      	PUSH	DI
 38431 00006947 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 38432                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 38433 0000694E 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 38434 00006953 0441                    	ADD	AL,'A'
 38435 00006955 E815FF                  	CALL	InitCDS			; InitCDS(c);
 38436                                  	;test	word [es:di+67],4000h
 38437                                  	; 17/12/2022
 38438                                  	;test	byte [es:di+68],40h
 38439 00006958 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 38440                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 38441 0000695D 5F                      	POP	DI
 38442 0000695E 07                      	POP	ES
 38443 0000695F 58                      	POP	AX
 38444 00006960 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 38445 00006962 EB18                    	JMP	SHORT GTDX		; carry clear
 38446                                  GTD20:
 38447 00006964 E81800                  	CALL	GetCDSFromDrv
 38448 00006967 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 38449                                  	;test	word [si+43h],4000h
 38450                                  	; 17/12/2022
 38451                                  	;test	byte [si+44h],40h
 38452 00006969 F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 38453                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 38454 0000696D 750D                    	JNZ	SHORT GTDX		; carry clear
 38455                                  GTD30:	
 38456                                  	; 21/05/2019
 38457                                  	; MSDOS 6.0
 38458 0000696F B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 38459 00006971 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 38460                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 38461 00006975 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 38462 0000697B F9                      	STC
 38463                                  GTDX:	
 38464 0000697C 5E                      	POP	SI			; restore world
 38465 0000697D 1F                      	POP	DS
 38466 0000697E C3                      	RETN
 38467                                  
 38468                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 38469                                  ;----------------------------------------------------------------------------
 38470                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 38471                                  ;	pointer, returning an error if the drive number is greater than the
 38472                                  ;	number of CDS's
 38473                                  ;
 38474                                  ;   Inputs:	AL is physical unit # A=0...
 38475                                  ;   Outputs:	Carry Set if Bad Drive
 38476                                  ;		Carry Clear
 38477                                  ;		    DS:SI -> CDS
 38478                                  ;		    [THISCDS] = DS:SI
 38479                                  ;   Registers modified: DS,SI
 38480                                  ;----------------------------------------------------------------------------
 38481                                  
 38482                                  	; 21/05/2019 - Retro DOS v4.0
 38483                                  GetCDSFromDrv:
 38484 0000697F 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 38485                                  	;JB	SHORT GetCDS	; cf=1	; yes, go get the macro
 38486                                  	;STC				; signal error
 38487                                  	;RETN				; bye
 38488                                  	; 23/09/2023
 38489 00006984 F5                      	cmc	; cf=1 <-> cf=0
 38490 00006985 7217                    	jc	short GetCDS_retn
 38491                                  GetCDS:
 38492                                  	; 23/09/2023
 38493                                  	;PUSH	BX
 38494 00006987 50                      	PUSH	AX
 38495 00006988 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 38496                                  	;mov	bl,81 ; MSDOS 3.3
 38497                                  	;mov	bl,88 ; MSDOS 6.0 
 38498                                  	; 23/09/2023
 38499                                  	;MOV	BL,curdir.size		; size in convenient spot
 38500                                  	;MUL	BL			; get net offset
 38501 0000698D B458                    	mov	ah,curdir.size
 38502 0000698F F6E4                    	mul	ah
 38503 00006991 01C6                    	ADD	SI,AX ; *		; convert to true pointer
 38504 00006993 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 38505 00006998 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 38506 0000699D 58                      	POP	AX
 38507                                  	; 23/09/2023
 38508                                  	;POP	BX
 38509                                  	; (cf must be 0 here) ; *
 38510                                  	;CLC				; no error
 38511                                  GetCDS_retn:
 38512 0000699E C3                      	RETN				; bye!
 38513                                  
 38514                                  ;============================================================================
 38515                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 38516                                  ;============================================================================
 38517                                  ; Retro	DOS v3.0 - 12/07/2018
 38518                                  ; 22/05/2019 - Retro DOS v4.0
 38519                                  
 38520                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 38521                                  ;----------------------------------------------------------------------------
 38522                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 38523                                  ;       gritty substitution.
 38524                                  ;
 38525                                  ;   Inputs:     DS:DX - pointer to FCB
 38526                                  ;               ES:DI - point to destination
 38527                                  ;   Outputs:    Carry Set - invalid path in final map
 38528                                  ;               Carry Clear - FCB has been mapped into ES:DI
 38529                                  ;                   Sattrib is set from possibly extended FCB
 38530                                  ;                   ExtFCB set if extended FCB found
 38531                                  ;   Registers modified: most
 38532                                  ;----------------------------------------------------------------------------
 38533                                  
 38534                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38535                                  TransFCB:
 38536                                  	; 22/05/2019 - Retro DOS v4.0
 38537                                  	; 12/07/2018 - Retro DOS v3.0
 38538                                  	;LocalVar FCBTmp,16
 38539                                  	;ENTER
 38540 0000699F 55                      	push	bp
 38541 000069A0 89E5                    	mov	bp,sp
 38542                                  	;sub	sp,15	; MSDOS 3.3
 38543 000069A2 83EC10                  	sub	sp,16	; MSDOS 6.0
 38544 000069A5 16                      	push	ss
 38545 000069A6 07                      	pop	es
 38546 000069A7 06                      	push	es
 38547 000069A8 57                      	push	di
 38548                                  	;lea	di,[bp-15] ; MSDOS 3.3
 38549                                  	;LEA	DI,FCBTmp 
 38550 000069A9 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 38551 000069AC 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 38552 000069B2 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 38553 000069B8 E864B2                  	call	GetExtended             ; get FCB, extended or not
 38554                                  	; 06/12/2022
 38555 000069BB 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 38556 000069BD 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 38557 000069C0 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 38558 000069C4 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 38559                                  GetDrive:
 38560 000069CA AC                      	lodsb				; get drive byte
 38561 000069CB E85CFF                  	call	GETTHISDRV
 38562 000069CE 722A                    	jc	short BadPack
 38563 000069D0 E87303                  	call	TextFromDrive           ; convert 0-based drive to text
 38564                                  
 38565                                  ; Scan the source to see if there are any illegal chars
 38566                                  
 38567                                  	;mov	bx,CharType		; load lookup table
 38568 000069D3 B90B00                  	mov	cx,11
 38569 000069D6 56                      	push	si			; back over name, ext
 38570                                  FCBScan:
 38571 000069D7 AC                      	lodsb				; get a byte
 38572                                  	
 38573                                  	; 09/08/2018
 38574                                  	;;xlat	byte [es:bx]
 38575                                  	;es	xlat
 38576                                  
 38577                                  	; 22/05/2019 - Retro DOS v4.0	
 38578 000069D8 E868E5                  	call	GetCharType		; get flags
 38579                                  
 38580                                  	;test	al,8	
 38581 000069DB A808                    	test	al,FFCB
 38582 000069DD 741B                    	jz	short BadPack
 38583                                  NextCh: 
 38584 000069DF E2F6                    	loop	FCBScan
 38585 000069E1 5E                      	pop	si
 38586 000069E2 89FB                    	mov	bx,di
 38587 000069E4 E874B6                  	call	PackName                ; crunch the path
 38588 000069E7 5F                      	pop	di			; get original destination
 38589 000069E8 07                      	pop	es
 38590 000069E9 16                      	push	ss			; get DS addressability
 38591 000069EA 1F                      	pop	ds
 38592                                  	;lea	si,[bp-15] ; MSDOS 3.3
 38593                                  	;LEA	SI,FCBTmp		; point at new pathname
 38594 000069EB 8D76F0                  	lea	si,[bp-16]
 38595 000069EE 803F00                  	cmp	byte [bx],0
 38596 000069F1 7407                    	jz	short BadPack
 38597 000069F3 55                      	push	bp
 38598 000069F4 E80E00                  	call	TransPathSet            ; convert the path
 38599 000069F7 5D                      	pop	bp
 38600 000069F8 7303                    	jnc	short FCBRet		; bye with transPath error code
 38601                                  BadPack:
 38602 000069FA F9                      	STC
 38603                                  	;mov	al,3
 38604 000069FB B003                    	MOV     AL,error_path_not_found
 38605                                  FCBRet: 
 38606                                  	;LEAVE
 38607 000069FD 89EC                    	mov	sp,bp
 38608 000069FF 5D                      	pop	bp
 38609                                  TransPath_retn:
 38610 00006A00 C3                      	retn
 38611                                  
 38612                                  ; 12/07/2018 - Retro DOS v3.0
 38613                                  
 38614                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 38615                                  ;----------------------------------------------------------------------------
 38616                                  ;
 38617                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 38618                                  ;       substitution, insertion of current directory and fixing . and ..
 38619                                  ;       entries. Perform splicing. Allow input string to match splice
 38620                                  ;       exactly.
 38621                                  ;
 38622                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 38623                                  ;       matches splice.
 38624                                  ;
 38625                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 38626                                  ;
 38627                                  ;   The following anomalous behaviour is required:
 38628                                  ;
 38629                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 38630                                  ;       Paths on devices are ignored. (truncate to 0-length)
 38631                                  ;       Raw net I/O sets ThisCDS => NULL.
 38632                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 38633                                  ;
 38634                                  ;   Other behaviour:
 38635                                  ;
 38636                                  ;       ThisCDS set up.
 38637                                  ;       FatRead done on local CDS.
 38638                                  ;       ValidateCDS done on local CDS.
 38639                                  ;
 38640                                  ;   Brief flowchart:
 38641                                  ;
 38642                                  ;       if fSharing then
 38643                                  ;           set up DummyCDS (ThisCDS)
 38644                                  ;           canonicalize (sets cMeta)
 38645                                  ;           splice
 38646                                  ;           fatRead
 38647                                  ;           return
 38648                                  ;       if \\ or d:\\ lead then
 38649                                  ;           set up null CDS (ThisCDS)
 38650                                  ;           canonicalize (sets cMeta)
 38651                                  ;           return
 38652                                  ;       if device then
 38653                                  ;           set up dummyCDS (ThisCDS)
 38654                                  ;           canonicalize (sets cMeta)
 38655                                  ;           return
 38656                                  ;       if file then
 38657                                  ;           getCDS (sets (ThisCDS) from name)
 38658                                  ;           validateCDS (may reset current dir)
 38659                                  ;           Copy current dir
 38660                                  ;           canonicalize (set cMeta)
 38661                                  ;           splice
 38662                                  ;           generate correct CDS (ThisCDS)
 38663                                  ;           if local then
 38664                                  ;               fatread
 38665                                  ;           return
 38666                                  ;
 38667                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38668                                  ;               DI - point to buffer in DOSDATA
 38669                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38670                                  ;                   syntax, etc. or user FAILed to I 24.
 38671                                  ;               WFP_Start - points to beginning of buffer
 38672                                  ;               Curr_Dir_End - points to end of current dir in path
 38673                                  ;               DS - DOSDATA
 38674                                  ;   Registers modified: most
 38675                                  ;
 38676                                  ;----------------------------------------------------------------------------
 38677                                  
 38678                                  ; 22/05/2019
 38679                                  ; 13/05/2019 - Retro DOS v4.0
 38680                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 38681                                  
 38682                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38683                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 38684                                  
 38685                                  TransPath:
 38686 00006A01 30C0                    	XOR     AL,AL
 38687 00006A03 EB02                    	JMP     SHORT SetSplice
 38688                                  TransPathSet:
 38689 00006A05 B0FF                    	MOV     AL,-1
 38690                                  SetSplice:
 38691 00006A07 36A2[4C03]              	MOV	[SS:NoSetDir],AL	; NoSetDir = !fExact;	;smr;SS Override
 38692 00006A0B B0FF                    	MOV     AL,-1
 38693                                  TransPathNoSet:
 38694 00006A0D 36A2[7105]              	MOV	[SS:FSPLICE],AL		; fSplice = TRUE;	;smr;SS Override
 38695 00006A11 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 38696 00006A17 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 38697 00006A1C 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 38698 00006A23 16                      	push	ss
 38699 00006A24 07                      	pop	es
 38700                                  	;lea	bp,[di+134]
 38701 00006A25 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 38702                                  ;
 38703                                  ; if this is through the server dos call, fsharing is set. We set up a
 38704                                  ; dummy cds and let the operation go.
 38705                                  ;
 38706                                  	;TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 38707                                  	;JZ	short CheckUNC		; skip to UNC check
 38708                                  	; 13/03/2024 (PCDOS 7.1 IBMDOS.COM)
 38709                                  	;;;
 38710 00006A29 36803E[7205]00          	cmp	byte [ss:FSHARING],0
 38711 00006A2F 7435                    	jz	short CheckUNC
 38712                                  	;;;
 38713                                  ;
 38714                                  ; ES:DI point to buffer
 38715                                  ;
 38716 00006A31 E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 38717 00006A34 E8F3FE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 38718 00006A37 722A                    	jc	short NoPath
 38719 00006A39 E80A03                  	CALL	TextFromDrive		; drop in new
 38720 00006A3C 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 38721 00006A3F E83401                  	CALL	Canonicalize            ; copy and canonicalize
 38722 00006A42 72BC                    	jc	short TransPath_retn	; errors
 38723                                  ;
 38724                                  ; Perform splices for net guys.
 38725                                  ;
 38726 00006A44 16                      	push	ss
 38727 00006A45 1F                      	pop	ds
 38728 00006A46 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 38729 00006A4A F606[7105]FF            	TEST	byte [FSPLICE],-1
 38730 00006A4F 7403                    	JZ	short NoServerSplice
 38731 00006A51 E83102                  	CALL    Splice
 38732                                  NoServerSplice:
 38733 00006A54 16                      	push	ss
 38734 00006A55 1F                      	pop	ds                      ; for FATREAD
 38735 00006A56 C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 38736 00006A5A E88AA8                  	call	ECritDisk
 38737 00006A5D E833EB                  	call	FATREAD_CDS
 38738 00006A60 E89FA8                  	call	LCritDisk
 38739                                  NoPath:
 38740                                  	;mov	al,3
 38741 00006A63 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38742 00006A65 C3                      	retn				; any errors are in Carry flag
 38743                                  
 38744                                  ; Let the network decide if the name is for a spooled device. It will map
 38745                                  ; the name if so.
 38746                                  
 38747                                  CheckUNC:
 38748 00006A66 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 38749                                  	;CallInstall NetSpoolCheck,MultNET,35
 38750 00006A6D B82311                  	mov	ax,1123h
 38751 00006A70 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 38752                                  			; DS:SI -> ASCIZ filename to canonicalize
 38753                                  			; ES:DI -> 128-byte buffer for qualified name
 38754                                  			; Return: CF set if not resolved
 38755 00006A72 7329                    	JNC	short UNCDone
 38756                                  
 38757                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 38758                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 38759                                  ; input, then the name has been changed to the remote spooler by the above net
 38760                                  ; call. Also, there may be a drive in front of the \\.
 38761                                  
 38762                                  NO_CHECK:
 38763 00006A74 E8B902                  	CALL    DriveFromText		; eat drive letter
 38764 00006A77 50                      	PUSH    AX                      ; save it
 38765 00006A78 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 38766 00006A7A E8E3E4                  	call    PATHCHRCMP              ; convert to normal form
 38767 00006A7D 86E0                    	XCHG    AH,AL                   ; swap for second byte
 38768 00006A7F E8DEE4                  	call    PATHCHRCMP              ; convert to normal form
 38769 00006A82 751F                    	JNZ	short CheckDevice	; not a path char
 38770 00006A84 38C4                    	CMP     AH,AL                   ; are they same?
 38771 00006A86 751B                    	JNZ	short CheckDevice	; nope
 38772                                  
 38773                                  ; We have a UNC request. We must copy the string up to the beginning of the
 38774                                  ; local machine root path
 38775                                  
 38776 00006A88 58                      	POP     AX
 38777 00006A89 A5                      	MOVSW                           ; get the lead \\.
 38778                                  UNCCpy:
 38779 00006A8A AC                      	LODSB                           ; get a byte
 38780 00006A8B E87DE4                   	call	UCase                   ;AN000;; convert the char
 38781 00006A8E 08C0                    	OR      AL,AL
 38782 00006A90 740E                    	JZ	short UNCTerm		; end of string. All done.
 38783 00006A92 E8CBE4                  	call    PATHCHRCMP              ; is it a path char?
 38784 00006A95 89FB                    	MOV     BX,DI                   ; backup position
 38785 00006A97 AA                      	STOSB
 38786 00006A98 75F0                    	JNZ	short UNCCpy		; no, go copy
 38787 00006A9A E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 38788                                  UNCDone:
 38789 00006A9D 16                      	push	ss
 38790 00006A9E 1F                      	pop	ds
 38791 00006A9F C3                       	retn				; return error code
 38792                                  UNCTerm:
 38793 00006AA0 AA                      	STOSB                           ;AN000;
 38794 00006AA1 EBFA                    	JMP	short UNCDone		;AN000;
 38795                                  
 38796                                  CheckDevice:
 38797                                  
 38798                                  ; Check DS:SI for device. First eat any path stuff
 38799                                  
 38800 00006AA3 58                      	POP     AX                      ; retrieve drive info
 38801 00006AA4 803C00                  	CMP     BYTE [SI],0		; check for null file
 38802 00006AA7 7504                    	JNZ	short CheckPath
 38803                                  	;mov	al,2 
 38804 00006AA9 B002                    	MOV     AL,error_file_not_found ; bad file error
 38805 00006AAB F9                      	STC                             ; signal error on null input
 38806 00006AAC C3                      	RETN				; bye!
 38807                                  CheckPath:
 38808 00006AAD 50                      	push	ax
 38809 00006AAE 55                      	push	bp			; save drive number
 38810                                  
 38811                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38812                                  %if 0
 38813                                  	; MSDOS 6.0
 38814                                  ;;;BUGBUG BUG 10-26-1992 scottq
 38815                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 38816                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 38817                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 38818                                  ;;;end up having a 5D in the opcode's displacement field. The
 38819                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 38820                                  ;;;
 38821                                  ;;;What we do here is do a call to a function that is less than 5Dh
 38822                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 38823                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 38824                                  ;;;
 38825                                  ;;;More info:
 38826                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 38827                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 38828                                  ;;;
 38829                                  	call	no5Dshere
 38830                                  start5Dhack:
 38831                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice
 38832                                  backfrom5Dhack:
 38833                                  
 38834                                  %endif
 38835                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38836                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 38837 00006AAF E843D7                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 38838                                  
 38839 00006AB2 5D                      	pop	bp
 38840 00006AB3 58                      	pop	ax			; get drive letter back
 38841 00006AB4 731C                    	JNC	short DoFile		; yes we have a file.
 38842                                  
 38843                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 38844                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 38845                                  ; call.
 38846                                  
 38847 00006AB6 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 38848 00006ABC E86BFE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 38849 00006ABF 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 38850                                  
 38851                                  ; Now that we have noted that we have a device, we put it into a form that
 38852                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 38853                                  ; string. We relax this to state that if the d:\ is present then the path
 38854                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 38855                                  ; a device.
 38856                                  
 38857 00006AC5 E87E02                  	CALL    TextFromDrive
 38858 00006AC8 B02F                    	MOV     AL,'/'                  ; path sep.
 38859 00006ACA AA                      	STOSB
 38860 00006ACB E8E8A6                  	call	StrCpy			; move remainder of string
 38861                                  
 38862 00006ACE F8                      	CLC                             ; everything OK.
 38863 00006ACF 16                      	push	ss
 38864 00006AD0 1F                      	pop	ds                      ; remainder of OK stuff
 38865                                  DoFile_retn:
 38866 00006AD1 C3                      	retn
 38867                                  
 38868                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38869                                  %if 0
 38870                                  
 38871                                  no5Dshere:
 38872                                  	; 10/08/2018
 38873                                  	jmp	CheckThisDevice		; snoop for device
 38874                                  %endif
 38875                                  
 38876                                  ;.erre (no5Dshere - start5Dhack - 5D)
 38877                                  
 38878                                  ; We have a file. Get the raw CDS.
 38879                                  
 38880                                  DoFile:
 38881                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38882                                  
 38883 00006AD2 E839FE                  	call	GetVisDrv               ; get proper CDS
 38884                                  	;mov	al,3 
 38885 00006AD5 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 38886 00006AD7 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 38887                                  
 38888                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 38889                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 38890                                  ; Use the one that we are going to use (ES:DI).
 38891                                  
 38892                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 38893 00006AD9 1E                      	push	ds
 38894 00006ADA 56                      	push	si
 38895 00006ADB 06                      	push	es
 38896 00006ADC 57                      	push	di
 38897 00006ADD E85ED6                  	call	ValidateCDS             ; poke CDS and make everything OK
 38898                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 38899 00006AE0 5F                      	pop	di
 38900 00006AE1 07                      	pop	es
 38901 00006AE2 5E                      	pop	si
 38902 00006AE3 1F                      	pop	ds
 38903                                  	;mov	al,3
 38904 00006AE4 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38905                                  	;retc				; someone failed an operation
 38906 00006AE6 72E9                    	jc	short DoFile_retn
 38907                                  
 38908                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 38909                                  ; current directory. Copy it in.
 38910                                  
 38911 00006AE8 1E                      	push	ds
 38912 00006AE9 56                      	push	si
 38913 00006AEA 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 38914 00006AEF 89FB                    	MOV     BX,DI                   ; point to destination
 38915                                  	;add	bx,[si+79] ; MSDOS 6.0
 38916 00006AF1 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 38917                                  	;lea	bp,[di+134]
 38918 00006AF4 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 38919                                  					;AN000;
 38920 00006AF8 E8CAA6                  	call	FStrCpy                 ; copy string. ES:DI point to end
 38921 00006AFB 4F                      	DEC     DI                      ; point to NUL byte
 38922                                  
 38923                                  ; Make sure that there is a path char at end.
 38924                                  
 38925 00006AFC B05C                    	MOV     AL,'\'
 38926 00006AFE 263845FF                	CMP     [ES:DI-1],AL
 38927 00006B02 7401                    	JZ	short GetOrig
 38928 00006B04 AA                      	STOSB
 38929                                  
 38930                                  ; Now get original string.
 38931                                  
 38932                                  GetOrig:
 38933 00006B05 4F                      	DEC     DI                      ; point to path char
 38934 00006B06 5E                      	pop	si
 38935 00006B07 1F                      	pop	ds
 38936                                  
 38937                                  ; BX points to the end of the root part of the CDS (at where a path char
 38938                                  ; should be). Now, we decide whether we use this root or extend it with the
 38939                                  ; current directory. See if the input string begins with a leading 
 38941 00006B08 E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 38942 00006B0B 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 38943 00006B0D 08C0                    	OR      AL,AL                   ; end of string?
 38944 00006B0F 7410                    	JZ	short DoCanon		; yes, skip.
 38945                                  ;
 38946                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 38947                                  ; to this root. Make sure that there is a path char there and advance the
 38948                                  ; source string over all leading \'s.
 38949                                  ;
 38950 00006B11 89DF                    	MOV     DI,BX                   ; back up to root point.
 38951                                  SkipPath:
 38952 00006B13 AC                      	LODSB
 38953 00006B14 E849E4                  	call    PATHCHRCMP
 38954 00006B17 74FA                    	JZ	short SkipPath
 38955 00006B19 4E                      	DEC     SI
 38956 00006B1A 08C0                    	OR      AL,AL
 38957 00006B1C 7403                    	JZ	short DoCanon
 38958                                  
 38959                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 38960                                  ; for yucks.
 38961                                  
 38962                                  PathAssure:
 38963 00006B1E B05C                    	MOV     AL,'\'	; 5Ch
 38964 00006B20 AA                      	STOSB
 38965                                  
 38966                                  ; ES:DI point to the correct spot for canonicalization to begin.
 38967                                  ; BP is the max extent to advance DI
 38968                                  ; BX is the backup limit for ..
 38969                                  
 38970                                  DoCanon:
 38971 00006B21 E85200                  	CALL    Canonicalize            ; wham.
 38972                                  	;retc				; badly formatted path.
 38973 00006B24 72AB                    	jc	short DoFile_retn
 38974                                  
 38975                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 38976                                  ; to wfp_start and do string substitution. BP is still the max position in
 38977                                  ; buffer.
 38978                                  
 38979 00006B26 16                      	push	ss
 38980 00006B27 1F                      	pop	ds
 38981 00006B28 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 38982 00006B2C C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 38983 00006B30 E81B02                  	CALL    PathPref                ; is there a prefix?
 38984 00006B33 7514                    	JNZ	short DoSplice		; no, do splice
 38985                                  
 38986                                  ; We have a match. Check to see if we ended in a path char.
 38987                                  
 38988 00006B35 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 38989 00006B38 E825E4                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 38990 00006B3B 740C                    	JZ	short DoSplice		; yes, no current dir here.
 38991                                  Pathline:                               ; 2/13/KK
 38992 00006B3D 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 38993 00006B41 7406                    	JZ	short DoSplice
 38994 00006B43 47                      	INC     DI                      ; point to after current path char
 38995 00006B44 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 38996                                  
 38997                                  ; Splice the result.
 38998                                  
 38999                                  DoSplice:
 39000 00006B49 16                      	push	ss
 39001 00006B4A 1F                      	pop	ds			; back to DOSDATA
 39002 00006B4B 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 39003 00006B4F 31C9                    	XOR     CX,CX
 39004 00006B51 F606[7105]FF            	TEST	byte [FSPLICE],-1
 39005 00006B56 7403                    	JZ	short SkipSplice
 39006 00006B58 E82A01                  	CALL    Splice                  ; replaces in place.
 39007                                  SkipSplice:
 39008                                  
 39009                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 39010                                  ; device.
 39011                                  
 39012 00006B5B 16                      	push	ss
 39013 00006B5C 1F                      	pop	ds
 39014 00006B5D C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 39015                                  	;test	word [es:di+67],8000h
 39016                                  	; 17/12/2022
 39017                                  	;test	byte [es:di+68],80h
 39018 00006B61 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 39019                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 39020 00006B66 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 39021 00006B68 E30B                    	JCXZ    Done
 39022 00006B6A E87AA7                  	call	ECritDisk
 39023 00006B6D E823EA                  	call	FATREAD_CDS
 39024 00006B70 E88FA7                  	call	LCritDisk
 39025                                  	;mov	al, 3
 39026 00006B73 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 39027                                  Done:   
 39028 00006B75 C3                      	retn                         ; any errors in carry flag.
 39029                                  
 39030                                  ; 13/07/2018
 39031                                  
 39032                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 39033                                  ;----------------------------------------------------------------------------
 39034                                  ;   Canonicalize - copy path removing . and .. entries.
 39035                                  ;
 39036                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 39037                                  ;               ES:DI - point to buffer
 39038                                  ;               BX - backup limit (offset from ES) points to slash
 39039                                  ;               BP - end of buffer
 39040                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 39041                                  ;                   syntax, etc.
 39042                                  ;               Carry Clear -
 39043                                  ;                   DS:DI - advanced to end of string
 39044                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 39045                                  ;   Registers modified: AX CX DX (in addition to those above)
 39046                                  ;----------------------------------------------------------------------------
 39047                                  
 39048                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39049                                  
 39050                                  Canonicalize:
 39051                                  
 39052                                  ; We copy all leading path separators.
 39053                                  
 39054 00006B76 AC                      	LODSB                           ;   while (PathChr (*s))
 39055 00006B77 E8E6E3                  	call    PATHCHRCMP
 39056 00006B7A 7507                    	JNZ	short CanonDec
 39057 00006B7C 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 39058 00006B7E 7319                    	JAE	short CanonBad		;           goto error;
 39059 00006B80 AA                      	STOSB
 39060 00006B81 EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 39061                                  CanonDec:
 39062 00006B83 4E                      	DEC     SI
 39063                                  
 39064                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 39065                                  ; component (no leading path separators) and ES:DI being the destination
 39066                                  ; buffer.
 39067                                  
 39068                                  CanonLoop:
 39069                                  
 39070                                  ; If we are at the end of the source string, then we need to check to see that
 39071                                  ; a potential drive specifier is correctly terminated with a path sep char.
 39072                                  ; Otherwise, do nothing
 39073                                  
 39074 00006B84 31C0                    	XOR     AX,AX
 39075 00006B86 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 39076 00006B88 751A                    	JNZ	short DoComponent
 39077 00006B8A 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 39078 00006B8F 7505                    	JNZ	short DoTerminate
 39079 00006B91 B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 39080 00006B93 AA                      	STOSB
 39081 00006B94 88E0                    	MOV     AL,AH
 39082                                  DoTerminate:
 39083 00006B96 AA                      	STOSB                           ;           *d++ = 0;
 39084 00006B97 F8                      	CLC                             ;           return (0);
 39085 00006B98 C3                      	retn
 39086                                  
 39087                                  CanonBad:
 39088 00006B99 E8CB01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 39089                                  	;mov	al,3
 39090 00006B9C B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 39091 00006B9E 7402                    	JZ	short PathEnc		; path character encountered in string
 39092                                  	;mov	al,2
 39093 00006BA0 B002                    	MOV     AL,error_file_not_found ; Set bad file error
 39094                                  PathEnc:
 39095 00006BA2 F9                      	STC
 39096                                  CanonBad_retn:
 39097 00006BA3 C3                      	retn
 39098                                  
 39099                                  ; We have a textual component that we must copy. We uppercase it and truncate
 39100                                  ; it to 8.3
 39101                                  
 39102                                  DoComponent:                            ;           }
 39103 00006BA4 E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 39104 00006BA7 72FA                    	jc	short CanonBad_retn	;           return (-1);
 39105                                  
 39106                                  ; We special case the . and .. cases. These will be backed up.
 39107                                  
 39108                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 39109 00006BA9 26833D2E                	CMP	WORD [ES:DI],002Eh
 39110 00006BAD 7408                    	JZ	short Skip1
 39111                                  	;CMP	WORD PTR ES:[DI],'..'
 39112 00006BAF 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 39113 00006BB4 750A                    	JNZ	short CanonNormal
 39114 00006BB6 4F                      	DEC     DI                      ;           d--;
 39115                                  Skip1:  
 39116 00006BB7 E82A00                  	CALL    SkipBack                ;           SkipBack ();
 39117                                  	;mov	al,3
 39118 00006BBA B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 39119 00006BBC 72E5                    	jc	short CanonBad_retn
 39120 00006BBE EB02                    	JMP     short CanonPath         ;           }
 39121                                  
 39122                                  ; We have a normal path. Advance destination pointer over it.
 39123                                  
 39124                                  CanonNormal:                            ;       else
 39125 00006BC0 01CF                    	ADD     DI,CX                   ;           d += ct;
 39126                                  
 39127                                  ; We have successfully copied a component. We are now pointing at a path
 39128                                  ; sep char or are pointing at a nul or are pointing at something else.
 39129                                  ; If we point at something else, then we have an error.
 39130                                  
 39131                                  CanonPath:
 39132 00006BC2 E81600                  	CALL    PathSep
 39133 00006BC5 75D2                    	JNZ	short CanonBad		; something else...
 39134                                  
 39135                                  ; Copy the first path char we see.
 39136                                  
 39137 00006BC7 AC                      	LODSB                           ; get the char
 39138 00006BC8 E895E3                  	call    PATHCHRCMP              ; is it path char?
 39139 00006BCB 75B6                    	JNZ	short CanonDec		; no, go test for nul
 39140 00006BCD 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 39141 00006BCF 73C8                    	JAE	short CanonBad		; yep, error.
 39142 00006BD1 AA                      	STOSB                           ; copy the one byte
 39143                                  
 39144                                  ; Skip all remaining path chars
 39145                                  
 39146                                  CanonPathLoop:
 39147 00006BD2 AC                      	LODSB                           ; get next byte
 39148 00006BD3 E88AE3                  	call    PATHCHRCMP              ; path char again?
 39149 00006BD6 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 39150 00006BD8 4E                      	DEC     SI                      ; back up
 39151 00006BD9 EBA9                    	JMP	short  CanonLoop	; go copy component
 39152                                  
 39153                                  ;BREAK <PathSep - determine if char is a path separator>
 39154                                  ;----------------------------------------------------------------------------
 39155                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 39156                                  ;   Inputs:     DS:SI - point to a char
 39157                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 39158                                  ;               Zero set if AL is / \ or NUL
 39159                                  ;               Zero reset otherwise
 39160                                  ;   Registers modified: AL
 39161                                  ;----------------------------------------------------------------------------
 39162                                  
 39163                                  PathSep:
 39164 00006BDB 8A04                    	MOV     AL,[SI]                 ; get the character
 39165                                  PathSepGotCh:				; already have character
 39166 00006BDD 08C0                    	OR      AL,AL                   ; test for zero
 39167 00006BDF 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 39168                                  	;call	PATHCHRCMP              ; check for path character
 39169                                  	;retn				; and return HIS determination
 39170                                  	; 18/12/2022
 39171 00006BE1 E97CE3                  	jmp	PATHCHRCMP
 39172                                  
 39173                                  ;BREAK <SkipBack - move backwards to a path separator>
 39174                                  ;----------------------------------------------------------------------------
 39175                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 39177                                  ;               BX has current directory back up limit (point to a / \)
 39178                                  ;   Outputs:    ES:DI backed up to point to a path char
 39179                                  ;               AL has char from output ES:DI (path sep if carry clear)
 39180                                  ;               Carry set if illegal backup
 39181                                  ;               Carry Clear if ok
 39182                                  ;   Registers modified: DI,AL
 39183                                  ;----------------------------------------------------------------------------
 39184                                  
 39185                                  SkipBack:
 39186 00006BE4 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 39187 00006BE6 720B                    	JB	short SkipBad		;       if (d < dlim)
 39188 00006BE8 4F                      	DEC     DI                      ;           goto err;
 39189 00006BE9 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 39190 00006BEC E871E3                  	call    PATHCHRCMP              ;           break;
 39191 00006BEF 75F3                    	JNZ	short SkipBack		;       }
 39192 00006BF1 F8                      	CLC                             ;   return (0);
 39193 00006BF2 C3                      	retn				;
 39194                                  SkipBad:                                ;err:
 39195                                  	;mov	al,3
 39196 00006BF3 B003                    	MOV     AL,error_path_not_found ; bad path error
 39197 00006BF5 F9                      	STC                             ;   return (-1);
 39198 00006BF6 C3                      	retn				;
 39199                                  
 39200                                  ;Break <CopyComponent - copy out a file path component>
 39201                                  ;----------------------------------------------------------------------------
 39202                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 39203                                  ;
 39204                                  ;   Inputs:     DS:SI - source path
 39205                                  ;               ES:DI - destination
 39206                                  ;               ES:BP - end of buffer
 39207                                  ;   Outputs:    Carry Set - too long
 39208                                  ;               Carry Clear - DS:SI moved past component
 39209                                  ;                   CX has length of destination
 39210                                  ;   Registers modified: AX,CX,DX
 39211                                  ;----------------------------------------------------------------------------
 39212                                  
 39213                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39214                                  
 39215                                  CopyComponent:
 39216                                  
 39217                                  %define CopyBP	 [BP]		; word
 39218                                  %define CopyD	 [BP+2]		; dword
 39219                                  %define CopyDoff [BP+2]		; word
 39220                                  %define CopyS	 [BP+6]		; dword
 39221                                  %define CopySoff [BP+6]		; word
 39222                                  %define CopyTemp [BP+10]	; byte
 39223                                  
 39224 00006BF7 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 39225 00006BFA 1E                      	push	ds
 39226 00006BFB 56                      	push	si
 39227 00006BFC 06                      	push	es
 39228 00006BFD 57                      	push	di
 39229 00006BFE 55                      	push	bp
 39230 00006BFF 89E5                    	MOV     BP,SP
 39231 00006C01 B42E                    	MOV     AH,'.'
 39232 00006C03 AC                      	LODSB
 39233 00006C04 AA                      	STOSB
 39234 00006C05 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 39235 00006C07 7518                    	JNZ	short NormalComp
 39236 00006C09 E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 39237 00006C0C 740B                    	JZ	short NulTerm
 39238                                  TryTwoDot:
 39239 00006C0E AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 39240 00006C0F AA                      	STOSB
 39241 00006C10 38E0                    	CMP     AL,AH
 39242 00006C12 7557                    	JNZ	short CopyBad
 39243 00006C14 E8C4FF                  	CALL    PathSep
 39244 00006C17 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 39245                                  NulTerm:                                ;               return -1;
 39246 00006C19 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 39247 00006C1B AA                      	STOSB
 39248 00006C1C 897606                  	MOV     CopySoff,SI
 39249 00006C1F EB47                    	JMP     SHORT _GoodRet		;       }
 39250                                  NormalComp:                             ;   else {
 39251 00006C21 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 39252 00006C24 E87BE2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 39253 00006C27 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 39254 00006C2A 743F                    	JZ	short CopyBad		;           return (-1);
 39255 00006C2C 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 39256 00006C32 7510                    	JNZ	short DoPack
 39257 00006C34 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 39258 00006C37 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 39259 00006C3C 7F2D                    	JG	short CopyBad		;               return (-1);
 39260 00006C3E 7504                    	JNZ	short DoPack		;           else
 39261 00006C40 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 39262 00006C42 742F                    	JZ	short CopyBadPath	;               return (-1);
 39263                                  DoPack:                                 ;           }
 39264 00006C44 897606                  	MOV     CopySoff,SI ; [bp+6]
 39265 00006C47 16                      	push	ss
 39266 00006C48 1F                      	pop	ds
 39267 00006C49 BE[4B05]                	MOV     SI,NAME1
 39268 00006C4C 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 39269 00006C4F 57                      	push	di
 39270 00006C50 E808B4                  	call	PackName                ;       PackName (Name1, temp);
 39271 00006C53 5F                      	pop	di
 39272 00006C54 E877A5                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 39273 00006C57 49                      	DEC     CX
 39274 00006C58 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 39275                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39276                                  	;cmp	cx,[bp+0]
 39277                                  	; 15/12/2022
 39278                                  	;cmp	cx,[bp]
 39279 00006C5B 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 39280 00006C5E 730B                    	JAE	short CopyBad		;           return (-1);
 39281 00006C60 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 39282 00006C62 C47E02                  	LES     DI,CopyD    ; [bp+2]	
 39283 00006C65 E85DA5                  	call	FStrCpy
 39284                                  _GoodRet:				;       }
 39285 00006C68 F8                      	CLC
 39286 00006C69 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 39287                                  CopyBad:
 39288 00006C6B F9                      	STC
 39289 00006C6C E8F800                  	CALL    ScanPathChar            ; check for path chars in rest of string
 39290                                  	;mov	al,2
 39291 00006C6F B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 39292 00006C71 7503                    	JNZ	short CopyEnd
 39293                                  CopyBadPath:
 39294 00006C73 F9                      	STC
 39295                                  	;mov	al,3
 39296 00006C74 B003                    	MOV     AL,error_path_not_found ; Set bad path error
 39297                                  CopyEnd:
 39298 00006C76 5D                      	pop	bp
 39299 00006C77 5F                      	pop	di
 39300 00006C78 07                      	pop	es
 39301 00006C79 5E                      	pop	si
 39302 00006C7A 1F                      	pop	ds
 39303 00006C7B 9F                      	LAHF
 39304 00006C7C 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 39305 00006C7F E84CA5                  	call	StrLen
 39306 00006C82 49                      	DEC     CX
 39307 00006C83 9E                      	SAHF
 39308 00006C84 C3                      	retn
 39309                                  
 39310                                  ; 14/05/2019 - Retro DOS v4.0
 39311                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 39312                                  
 39313                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39314                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 39315                                  
 39316                                  ;Break <Splice - pseudo mount by string substitution>
 39317                                  ;----------------------------------------------------------------------------
 39318                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 39319                                  ;       ThisCDS to point to physical drive CDS.
 39320                                  ;   Inputs:     DS:SI point to string
 39321                                  ;               NoSetDir = TRUE => exact matches with splice fail
 39322                                  ;   Outputs:    DS:SI points to thisCDS
 39323                                  ;               ES:DI points to DPB
 39324                                  ;               String at DS:SI may be reduced in length by removing prefix
 39325                                  ;               and substituting drive letter.
 39326                                  ;               CX = 0 If no splice done
 39327                                  ;               CX <> 0 otherwise
 39328                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 39329                                  ;                   left alone
 39330                                  ;               ThisDPB points to proper DPB
 39331                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 39332                                  ;----------------------------------------------------------------------------
 39333                                  
 39334                                  Splice:
 39335 00006C85 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 39336 00006C8B 7469                    	JZ	short AllDone
 39337 00006C8D 36FF36[A205]            	push	word [SS:THISCDS]
 39338 00006C92 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 39339 00006C97 1E                      	push	ds
 39340 00006C98 56                      	push	si
 39341 00006C99 5F                      	pop	di
 39342 00006C9A 07                      	pop	es
 39343 00006C9B 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 39344                                  SpliceScan:
 39345 00006C9D E8DFFC                  	call	GetCDSFromDrv
 39346 00006CA0 724A                    	JC	short SpliceDone
 39347 00006CA2 FEC0                    	INC     AL
 39348                                  	; 17/12/2022
 39349                                  	;test	byte [si+68],20h
 39350 00006CA4 F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 39351                                  	;;test	word [si+67],2000h
 39352                                  	;TEST	word [SI+curdir.flags],curdir_splice
 39353 00006CA8 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 39354 00006CAA 57                      	push	di
 39355 00006CAB E8A000                  	CALL    PathPref                ;           if (!PathPref (s, d))
 39356 00006CAE 7403                    	JZ	short SpliceFound	;
 39357                                  SpliceSkip:
 39358 00006CB0 5F                      	pop	di
 39359 00006CB1 EBEA                    	JMP	short SpliceScan	;               continue;
 39360                                  SpliceFound:
 39361 00006CB3 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 39362 00006CB7 7508                    	JNZ	short SpliceDo
 39363 00006CB9 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 39364 00006CBF 75EF                    	JNZ	short SpliceSkip
 39365                                  SpliceDo:
 39366 00006CC1 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 39367 00006CC3 06                      	push	es
 39368 00006CC4 1F                      	pop	ds
 39369 00006CC5 5F                      	pop	di
 39370 00006CC6 E87F00                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 39371 00006CC9 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 39372 00006CCD 09C0                    	OR      AX,AX
 39373 00006CCF 7808                    	JS	short NoPoke
 39374 00006CD1 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 39375 00006CD3 29F0                    	SUB     AX,SI
 39376 00006CD5 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 39377                                  NoPoke:
 39378 00006CD9 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 39379 00006CDC 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 39380 00006CDE B05C                    	MOV     AL,"\"
 39381 00006CE0 AA                      	STOSB
 39382                                  SpliceCopy:                             ;               strcpy (src, p);
 39383 00006CE1 E8E1A4                  	call	FStrCpy
 39384 00006CE4 83C404                  	ADD     SP,4                    ; throw away saved stuff
 39385 00006CE7 80C901                  	OR      CL,1                    ; signal splice done.
 39386 00006CEA EB0C                    	JMP     SHORT DoSet             ;               return;
 39387                                  SpliceDone:                             ;               }
 39388 00006CEC 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 39389 00006CF1 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 39390                                  AllDone:
 39391 00006CF6 31C9                    	XOR     CX,CX
 39392                                  DoSet:
 39393 00006CF8 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 39394                                  	;les	di,[si+69]
 39395 00006CFD C47C45                  	LES     DI,[SI+curdir.devptr]	
 39396 00006D00 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 39397 00006D05 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 39398                                  Splice_retn:
 39399 00006D0A C3                      	retn
 39400                                  
 39401                                  ; 15/05/2019 - Retro DOS v4.0
 39402                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 39403                                  
 39404                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39405                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 39406                                  
 39407                                  ;Break <$NameTrans - partially process a name>
 39408                                  ;----------------------------------------------------------------------------
 39409                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 39410                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 39411                                  ;   to Transpath playing games with devices, we need to insure that the output
 39412                                  ;   has drive letter and : in it.
 39413                                  ;
 39414                                  ;   Inputs:     DS:SI - source string for translation
 39415                                  ;               ES:DI - pointer to buffer
 39416                                  ;   Outputs:
 39417                                  ;       Carry Clear
 39418                                  ;               Buffer at ES:DI is filled in with data
 39419                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 39420                                  ;       Carry Set
 39421                                  ;               AX = error_path_not_found
 39422                                  ;   Registers modified: all
 39423                                  ;----------------------------------------------------------------------------
 39424                                  
 39425                                  _$NameTrans:
 39426 00006D0B 1E                      	push	ds
 39427 00006D0C 56                      	push	si
 39428 00006D0D 06                      	push	es
 39429 00006D0E 57                      	push	di
 39430 00006D0F 51                      	push	cx ; MSDOS 6.0
 39431                                  	
 39432                                  	; MSDOS 6.0	
 39433                                  ; M027 - Start
 39434                                  ;
 39435                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 39436                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 39437                                  ; device if the old call set the volume attribute bit. Note that devname in
 39438                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 39439                                  ; and restore CX.
 39440                                  
 39441                                  	;mov	ch,16h
 39442 00006D10 B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 39443 00006D12 E8B102                  	call	SetAttrib
 39444                                  
 39445                                  ; M027 - End
 39446                                  
 39447                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39448 00006D15 BF[BE03]                	MOV     DI,OPENBUF
 39449 00006D18 E8E6FC                  	CALL    TransPath               ; to translation (everything)
 39450 00006D1B 59                      	pop	cx ; MSDOS 6.0
 39451 00006D1C 5F                      	pop     di
 39452 00006D1D 07                      	pop	es
 39453 00006D1E 5E                      	pop     si
 39454 00006D1F 1F                      	pop     ds
 39455 00006D20 7303                    	JNC	short TransOK
 39456 00006D22 E91999                  	jmp	SYS_RET_ERR
 39457                                  TransOK:
 39458 00006D25 BE[BE03]                	MOV     SI,OPENBUF
 39459 00006D28 16                      	push	ss
 39460 00006D29 1F                      	pop	ds
 39461                                  ;GotText:
 39462 00006D2A E898A4                  	call	FStrCpy
 39463 00006D2D E90599                  	jmp	SYS_RET_OK
 39464                                  
 39465                                  ;Break   <DriveFromText - return drive number from a text string>
 39466                                  ;----------------------------------------------------------------------------
 39467                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 39468                                  ;   pointer.
 39469                                  ;
 39470                                  ;   Inputs:     DS:SI point to a text string
 39471                                  ;   Outputs:    AL has drive number
 39472                                  ;               DS:SI advanced
 39473                                  ;   Registers modified: AX,SI.
 39474                                  ;----------------------------------------------------------------------------
 39475                                  
 39476                                  DriveFromText:
 39477 00006D30 30C0                    	XOR     AL,AL                   ;       drive = 0;
 39478                                  	;CMP	BYTE [SI],0		;       if (*s &&
 39479                                  	; 23/09/2023
 39480 00006D32 3804                    	cmp	[si],al ; 0
 39481 00006D34 74D4                    	jz	short Splice_retn
 39482 00006D36 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 39483 00006D3A 75CE                    	jnz	short Splice_retn
 39484 00006D3C AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 39485 00006D3D 0C20                    	OR      AL,20h
 39486                                  	;sub	al,60h
 39487 00006D3F 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 39488 00006D41 75C7                    	jnz	short Splice_retn
 39489 00006D43 B0FF                    	MOV	AL,-1                   ; nuke AL...
 39490                                  	; 23/09/2023
 39491                                  	;dec	al ; -1
 39492 00006D45 C3                      	retn				;           }
 39493                                  
 39494                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 39495                                  ;----------------------------------------------------------------------------
 39496                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 39497                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 39498                                  ;
 39499                                  ;   Inputs:     AL has 0-based drive number
 39500                                  ;   Outputs:    ES:DI advanced
 39501                                  ;   Registers modified: AX
 39502                                  ;----------------------------------------------------------------------------
 39503                                  
 39504                                  TextFromDrive:
 39505 00006D46 FEC0                    	INC     AL
 39506                                  TextFromDrive1:
 39507                                  	;add	al,40h
 39508 00006D48 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 39509 00006D4A B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 39510 00006D4C AB                      	STOSW
 39511                                  PathPref_retn:
 39512 00006D4D C3                      	retn
 39513                                  
 39514                                  ;Break   <PathPref - see if one path is a prefix of another>
 39515                                  ;----------------------------------------------------------------------------
 39516                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 39517                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 39518                                  ;   prefix: A:\ and A:\FOO
 39519                                  ;
 39520                                  ;   Inputs:     DS:SI potential prefix
 39521                                  ;               ES:DI string
 39522                                  ;   Outputs:    Zero set => prefix found
 39523                                  ;                   DI/SI advanced past matching part
 39524                                  ;               Zero reset => no prefix, DS/SI garbage
 39525                                  ;   Registers modified: CX
 39526                                  ;----------------------------------------------------------------------------
 39527                                  
 39528                                  PathPref:
 39529 00006D4E E88BA4                  	call	DStrLen                 ; get length
 39530 00006D51 49                      	DEC     CX                      ; do not include nul byte
 39531 00006D52 F3A6                    	REPZ    CMPSB                   ; compare
 39532 00006D54 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 39533 00006D56 50                      	push	ax			; save char register
 39534 00006D57 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 39535 00006D5A E803E2                  	call    PATHCHRCMP              ; is it a path char (Root!)
 39536 00006D5D 7406                    	JZ	short Prefix		; yes, match root (I hope)
 39537                                  NotSep:                                 ; 2/13/KK
 39538 00006D5F 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 39539 00006D62 E878FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 39540                                  Prefix:
 39541 00006D65 58                      	pop	ax			; get back original
 39542 00006D66 C3                      	retn
 39543                                  
 39544                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 39545                                  ;----------------------------------------------------------------------------
 39546                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 39547                                  ;     a path separator.
 39548                                  ;
 39549                                  ;     Input:    DS:SI target string (null terminated)
 39550                                  ;     Output:   Zero set => path separator encountered in string
 39551                                  ;               Zero clear => null encountered
 39552                                  ;     Registers modified: SI
 39553                                  ;----------------------------------------------------------------------------
 39554                                  
 39555                                  ScanPathChar:
 39556 00006D67 AC                      	LODSB                           ; fetch a character
 39557 00006D68 E872FE                  	call    PathSepGotCh
 39558 00006D6B 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 39559                                  	;call	PATHCHRCMP              ; path separator?
 39560                                  	;retn
 39561                                  	; 18/12/2022
 39562 00006D6D E9F0E1                  	jmp	PATHCHRCMP
 39563                                  
 39564                                  ;============================================================================
 39565                                  ; FILE.ASM, MSDOS 6.0, 1991
 39566                                  ;============================================================================
 39567                                  ; 14/07/2018 - Retro DOS v3.0
 39568                                  
 39569                                  ; 13/05/2019 - Retro DOS v4.0
 39570                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 39571                                  
 39572                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39573                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 39574                                  
 39575                                  ; MSDOS 2.11
 39576                                  ;BREAK <$Open - open a file handle>
 39577                                  ;----------------------------------------------------------------------------
 39578                                  ;   Assembler usage:
 39579                                  ;           LDS     DX, Name
 39580                                  ;           MOV     AH, Open
 39581                                  ;           MOV     AL, access
 39582                                  ;           INT     int_command
 39583                                  ;
 39584                                  ;       ACCESS          Function
 39585                                  ;       ------          --------
 39586                                  ;       open_for_read   file is opened for reading
 39587                                  ;       open_for_write  file is opened for writing
 39588                                  ;       open_for_both   file is opened for both reading and writing.
 39589                                  ;
 39590                                  ;   Error returns:
 39591                                  ;           AX = error_invalid_access
 39592                                  ;              = error_file_not_found
 39593                                  ;              = error_access_denied
 39594                                  ;              = error_too_many_open_files
 39595                                  ;----------------------------------------------------------------------------
 39596                                  
 39597                                  ; MSDOS 6.0
 39598                                  ;	BREAK <$Open - open a file from a path string>
 39599                                  ;----------------------------------------------------------------------------
 39600                                  ;
 39601                                  ;**	$OPen - Open a File
 39602                                  ;
 39603                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 39604                                  ;	file and and returns a handle
 39605                                  ;
 39606                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 39607                                  ;		(AL) = open mode
 39608                                  ;	EXIT	'C' clear if OK
 39609                                  ;		  (ax) = file handle
 39610                                  ;		'C' set if error
 39611                                  ;		  (ax) = error code
 39612                                  ;	USES	all
 39613                                  ;
 39614                                  ;----------------------------------------------------------------------------
 39615                                  
 39616                                  ; 13/05/2019 - Retro DOS v4.0
 39617                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39618                                  
 39619                                  ; 14/03/2024 - Retro DOS v4.1
 39620                                  
 39621                                  _$OPEN:       
 39622 00006D70 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 39623                                  _$Open2:
 39624                                  	;mov	ch,16h
 39625 00006D72 B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 39626 00006D74 E84F02                  	call	SetAttrib
 39627 00006D77 B9[DD2A]                	mov	cx,DOS_OPEN
 39628                                  
 39629                                  	;xor	ah,ah  ; MSDOS 3.3
 39630                                  
 39631 00006D7A 50                      	push	ax
 39632                                  
 39633                                  ;*	General file open/create code. The $CREATE call and the various
 39634                                  ;	$OPEN calls all come here.
 39635                                  ;
 39636                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 39637                                  ;	path names, etc., and then dispatch to our individual handlers.
 39638                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 39639                                  ;
 39640                                  ;	(TOS) = create mode
 39641                                  ;	(CX) = address of routine to call to do actual function
 39642                                  ;	(DS:DX) = ASCIZ name
 39643                                  ;	SAttrib = Attribute mask
 39644                                  
 39645                                  ;	Get a free SFT and mark it "being allocated"
 39646                                  
 39647                                  AccessFile:
 39648 00006D7B E869A5                  	call	ECritSFT
 39649 00006D7E E8EAF7                  	call	SFNFree			; get a free sfn
 39650 00006D81 E87EA5                  	call	LCritSFT
 39651                                  	;jc	short OpenFailJ		; oops, no free sft's
 39652                                  	; 14/03/2024
 39653 00006D84 7248                    	jc	short OpenFail
 39654                                  
 39655 00006D86 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 39656 00006D8B 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 39657 00006D90 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 39658                                  
 39659                                  ;	Find a free area in the user's JFN table.
 39660                                  
 39661 00006D95 E8C0F7                  	call	JFNFree			; get a free jfn
 39662                                  	;jnc	short SaveJFN
 39663                                  	; 14/03/2024
 39664 00006D98 7234                    	jc	short OpenFail
 39665                                  	;
 39666                                  ;OpenFailJ:
 39667                                  	;JMP	OpenFail		; there were free JFNs... try SFN
 39668                                  
 39669                                  SaveJFN:
 39670 00006D9A 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 39671 00006D9F 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 39672 00006DA4 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 39673                                  
 39674                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 39675                                  ;	reusing the same JFN.
 39676                                  
 39677 00006DA9 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 39678 00006DAE 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 39679 00006DB1 89D6                    	MOV	SI,DX			; get name in appropriate place
 39680 00006DB3 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39681 00006DB6 51                      	push	cx			; save routine to call
 39682 00006DB7 E847FC                  	call	TransPath		; convert the path
 39683 00006DBA 5B                      	pop	bx			; (bx) = routine to call
 39684                                  
 39685 00006DBB 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 39686                                  	;JC	short OpenCleanJ	; no error, go and open file
 39687                                  	; 14/03/2024
 39688 00006DC0 7260                    	jc	short OpenClean
 39689                                  
 39690 00006DC2 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 39691 00006DC8 7408                    	JZ	short SetSearch
 39692                                  	;mov	al,2
 39693 00006DCA B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 39694                                  OpenCleanJ:
 39695 00006DCC EB54                    	JMP	short OpenClean
 39696                                  
 39697                                  	; 14/03/2024 (PCDOS 7.1 IBMDOS.COM)
 39698                                  	;;;
 39699                                  OpenFail:
 39700 00006DCE FB                      	STI
 39701 00006DCF 59                      	pop	cx			; Clean stack
 39702                                  	;
 39703 00006DD0 EB5D                    	jmp	short OpenCritLeave
 39704                                  	;;;
 39705                                  
 39706                                  SetSearch:
 39707 00006DD2 58                      	pop	ax			; Mode (Open), Attributes (Create)
 39708                                  
 39709                                  ;	We need to get the new inheritance bits.
 39710                                  
 39711 00006DD3 31C9                    	xor	cx,cx
 39712                                  	; MSDOS 6.0
 39713                                  	;mov	[si+2],cx ; 0
 39714 00006DD5 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 39715                                  	;mov    [si+51],cx ; 0
 39716 00006DD8 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 39717                                  	;
 39718 00006DDB 81FB[DD2A]              	CMP	BX,DOS_OPEN
 39719 00006DDF 7509                    	JNZ	short _DoOper
 39720                                  	;test   al,80h
 39721 00006DE1 A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 39722 00006DE3 7405                    	JZ	short _DoOper ; 10/08/2018
 39723 00006DE5 247F                    	AND	AL,7Fh			; mask off inherit bit
 39724                                  	;mov	cx,1000h
 39725 00006DE7 B90010                  	MOV	CX,sf_no_inherit
 39726                                  _DoOper:
 39727                                  	;; MSDOS 3.3
 39728                                  	;;mov	word [si+2], 0
 39729                                  	;;mov	word [si+33h], 0
 39730                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 39731                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 39732                                  
 39733                                  	; MSDOS 6.0
 39734                                  ;**	Check if this is an extended open. If so you must set the
 39735                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 39736                                  ;	Set_EXT_mode in creat.asm
 39737                                  
 39738                                  	; MSDOS 6.0
 39739                                  	;SAVE	<di, es>                ;M022 conditional removed here
 39740 00006DEA 57                      	push	di
 39741 00006DEB 06                      	push	es
 39742 00006DEC 1E                      	push	ds
 39743 00006DED 07                      	pop	es
 39744 00006DEE 56                      	push	si
 39745 00006DEF 5F                      	pop	di			; (es:di) = SFT address
 39746 00006DF0 E8D6BC                  	call	Set_EXT_mode
 39747                                  	;RESTORE <es, di>
 39748 00006DF3 07                      	pop	es
 39749 00006DF4 5F                      	pop	di
 39750                                  
 39751                                  	;Context DS
 39752 00006DF5 16                      	push	ss
 39753 00006DF6 1F                      	pop	ds	
 39754                                  
 39755 00006DF7 51                      	push	cx
 39756 00006DF8 FFD3                    	CALL	BX			; blam!
 39757 00006DFA 59                      	pop	cx
 39758 00006DFB C536[9E05]              	LDS	SI,[THISSFT]
 39759 00006DFF 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 39760                                  	;jc	short OpenE ; MSDOS 3.3
 39761                                  
 39762                                  ;	The SFT was successfully opened. Remove busy mark.
 39763                                  
 39764                                  OpenOK:
 39765                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 39766 00006E01 C7040100                	mov	word [SI],1
 39767                                  	;or	[SI+5],cx
 39768 00006E05 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 39769                                  
 39770                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 39771                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 39772                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 39773                                  ;
 39774                                  ; Since this is only relevant on sharer systems, we stick this code into the
 39775                                  ; sharer.
 39776                                  
 39777 00006E08 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 39778 00006E0C 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 39779                                  
 39780 00006E11 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 39781                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39782                                  OpenOkj:
 39783 00006E18 E91A98                  	jmp	SYS_RET_OK		; bye with no errors
 39784                                  
 39785                                  	; MSDOS 6.0
 39786                                  ;Extended Open hooks check
 39787                                  OpenE2:					;AN000;;EO.
 39788 00006E1B 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 39789 00006E1E 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 39790 00006E20 EB0D                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 39791                                  
 39792                                  ;	Extended Open hooks check
 39793                                  ;
 39794                                  ;	AL has error code. Stack has argument to dos_open/dos_create.
 39795                                  
 39796                                  OpenClean:
 39797 00006E22 5B                      	pop	bx			; clean off stack
 39798                                  OpenE:
 39799                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 39800 00006E23 C7040000                	mov	word [SI],0
 39801 00006E27 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 39802 00006E2C C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 39803                                  
 39804                                  	; 14/03/2024
 39805                                  	;JMP	SHORT OpenCritLeave
 39806                                  	;
 39807                                  ;OpenFail:
 39808                                  	;STI
 39809                                  	;pop	cx			; Clean stack
 39810                                  
 39811                                  OpenCritLeave:
 39812 00006E2F 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 39813                                  
 39814                                  	; MSDOS 6.0
 39815                                  ; File Tagging DOS 4.00
 39816 00006E36 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 39817                                  					;AN000;;FT. code page mismatch
 39818 00006E3C 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 39819 00006E3E E90598                  	jmp	From_GetSet		;AN000;;FT. yes
 39820                                  NORERR: 				;AN000;
 39821                                  ; File Tagging DOS 4.00
 39822                                  
 39823 00006E41 E9FA97                  	jmp	SYS_RET_ERR		; no free, return error
 39824                                  
 39825                                  ; MSDOS 2.11
 39826                                  ;BREAK <$CREAT - create a new file and open him for input>
 39827                                  ;----------------------------------------------------------------------------
 39828                                  ;   Assembler usage:
 39829                                  ;           LDS     DX, name
 39830                                  ;           MOV     AH, Creat
 39831                                  ;           MOV     CX, access
 39832                                  ;           INT     21h
 39833                                  ;       ; AX now has the handle
 39834                                  ;
 39835                                  ;   Error returns:
 39836                                  ;           AX = error_access_denied
 39837                                  ;              = error_path_not_found
 39838                                  ;              = error_too_many_open_files
 39839                                  ;----------------------------------------------------------------------------
 39840                                  
 39841                                  ; MSDOS 6.0
 39842                                  ;	BREAK <$Creat - create a brand-new file>
 39843                                  ;----------------------------------------------------------------------------
 39844                                  ;
 39845                                  ;**	$Creat - Create a File
 39846                                  ;
 39847                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 39848                                  ;	initial attributes contained in CX
 39849                                  ;
 39850                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 39851                                  ;		(CX) = initial attributes
 39852                                  ;	EXIT	'C' set if error
 39853                                  ;		  (ax) = error code
 39854                                  ;		'C' clear if OK
 39855                                  ;		  (ax) = file handle
 39856                                  ;	USES	all
 39857                                  ;
 39858                                  ;----------------------------------------------------------------------------
 39859                                  
 39860                                  _$CREAT:
 39861 00006E44 51                      	push	cx			; Save attributes on stack
 39862 00006E45 B9[B729]                	mov	CX,DOS_CREATE		; routine to call
 39863                                  AccessSet:
 39864                                  	;mov	byte [ss:SATTRIB],6
 39865 00006E48 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 39866                                  	; 10/08/2018
 39867 00006E4E E92AFF                  	JMP	AccessFile		; use good ol' open
 39868                                  
 39869                                  ; MSDOS 6.0 (MSDOS 3.3)
 39870                                  ;	BREAK <$CHMOD - change file attributes>
 39871                                  ;----------------------------------------------------------------------------
 39872                                  ;
 39873                                  ;**	$CHMOD - Change File Attributes
 39874                                  ;
 39875                                  ;   Assembler usage:
 39876                                  ;	    LDS     DX, name
 39877                                  ;	    MOV     CX, attributes
 39878                                  ;	    MOV     AL,func (0=get, 1=set)
 39879                                  ;	    INT     21h
 39880                                  ;   Error returns:
 39881                                  ;	    AX = error_path_not_found
 39882                                  ;	    AX = error_access_denied
 39883                                  ;
 39884                                  ;----------------------------------------------------------------------------
 39885                                  
 39886                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39887                                  _$CHMOD:
 39888                                  	; 05/08/2018 - Retro DOS v3.0
 39889                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh
 39890 00006E51 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39891 00006E54 50                      	push	ax
 39892 00006E55 51                      	push	cx			; save function and attributes
 39893 00006E56 89D6                    	MOV	SI,DX			; get things in appropriate places
 39894 00006E58 E8AAFB                  	call	TransPathSet		; get correct path
 39895 00006E5B 59                      	pop	cx
 39896 00006E5C 58                      	pop	ax			; and get function and attrs back
 39897 00006E5D 7257                    	JC	short ChModErr		; errors get mapped to path not found
 39898 00006E5F 16                      	push	ss			; set up for later possible calls
 39899 00006E60 1F                      	pop	ds
 39900 00006E61 803E[7A05]FF            	CMP	byte [CMETA],-1
 39901 00006E66 754E                    	JNZ	short ChModErr
 39902                                  	;mov	byte [SATTRIB],16h
 39903 00006E68 C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 39904 00006E6D 2C01                    	SUB	AL,1			; fast way to discriminate
 39905 00006E6F 720B                    	JB	short ChModGet		; 0 -> go get value
 39906 00006E71 7417                    	JZ	short ChModSet		; 1 -> go set value
 39907                                  	;mov	byte [EXTERR_LOCUS],1
 39908 00006E73 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 39909                                  	;mov	al,1
 39910 00006E78 B001                    	mov	al,error_invalid_function ; bad value
 39911                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39912                                  chmod_errj:	
 39913                                  	;;jmp	SYS_RET_ERR
 39914                                  	;jmp	short ChModE	
 39915 00006E7A EBC5                    	jmp	short NORERR	; 06/12/2022
 39916                                  ChModGet:
 39917 00006E7C E823BA                  	call	GET_FILE_INFO		; suck out the ol' info
 39918 00006E7F 7237                    	JC	short ChModE		; error codes are already set for ret
 39919 00006E81 E80196                  	call	Get_User_Stack		; point to user saved vaiables
 39920                                  	;mov	[SI+4],ax
 39921 00006E84 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 39922                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 39923                                  OpenOkj2:
 39924                                  	; 17/12/2022
 39925                                  	;;jmp	SYS_RET_OK		; say sayonara
 39926                                  	;jmp	short OpenOkj
 39927                                  	; 25/06/2019
 39928 00006E87 E9AE97                  	jmp	SYS_RET_OK_clc
 39929                                  
 39930                                  ChModSet:
 39931 00006E8A 89C8                    	MOV	AX,CX			; get attrs in position
 39932 00006E8C E871BA                  	call	SET_FILE_ATTRIBUTE	; go set
 39933 00006E8F 7227                    	JC	short ChModE		; errors are set
 39934                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 39935                                  	;jmp	SYS_RET_OK
 39936                                  OpenOkj3:
 39937                                  	;jmp	short OpenOkj2
 39938                                  	; 17/12/2022
 39939 00006E91 E9A197                  	jmp	SYS_RET_OK
 39940                                  
 39941                                  ; 17/12/2022
 39942                                  %if 0
 39943                                  ChModErr:
 39944                                  NotFound:	; 17/12/2022
 39945                                  	;mov	al,3
 39946                                  	mov	al,error_path_not_found
 39947                                  ChModE:
 39948                                  UnlinkE:	; 17/12/2022
 39949                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39950                                  	;;jmp	SYS_RET_ERR
 39951                                  	;jmp	short chmod_errj
 39952                                  	; 17/12/2022
 39953                                  	jmp	short NORERR
 39954                                  %endif
 39955                                  
 39956                                  ; 22/05/2019 - Retro DOS v4.0
 39957                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 39958                                  
 39959                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39960                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 39961                                  
 39962                                  ;	BREAK <$UNLINK - delete a file entry>
 39963                                  ;----------------------------------------------------------------------------
 39964                                  ;
 39965                                  ;**	$UNLINK - Delete a File
 39966                                  ;
 39967                                  ;
 39968                                  ;	Assembler usage:
 39969                                  ;	    LDS     DX, name
 39970                                  ;	    IF VIA SERVER DOS CALL
 39971                                  ;	     MOV     CX,SEARCH_ATTRIB
 39972                                  ;	    MOV     AH, Unlink
 39973                                  ;	    INT     21h
 39974                                  ;
 39975                                  ;	ENTRY	(ds:dx) = path name
 39976                                  ;		(cx) = search_attribute, if via server_dos
 39977                                  ;	EXIT	'C' clear if no error
 39978                                  ;		'C' set if error
 39979                                  ;		  (ax) = error code
 39980                                  ;			= error_file_not_found
 39981                                  ;			= error_access_denied
 39982                                  ;
 39983                                  ;----------------------------------------------------------------------------
 39984                                  
 39985                                  _$UNLINK:
 39986 00006E94 51                      	push	cx			; Save possible CX input parm
 39987 00006E95 89D6                    	MOV	SI,DX			; Point at input string
 39988 00006E97 BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 39989 00006E9A E868FB                  	call	TransPathSet		; go get normalized path
 39990 00006E9D 59                      	pop	cx
 39991 00006E9E 7216                    	JC	short ChModErr		; badly formed path
 39992 00006EA0 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 39993 00006EA6 750E                    	JNZ	short NotFound
 39994 00006EA8 16                      	push	ss
 39995 00006EA9 1F                      	pop	ds
 39996                                  	;mov	ch,6
 39997 00006EAA B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 39998 00006EAC E81701                  	call	SetAttrib
 39999 00006EAF E8F2B5                  	call	DOS_DELETE		; remove that file
 40000                                  	;JC	short UnlinkE 		; error is there
 40001                                  	; 17/12/2022
 40002 00006EB2 728D                    	jc	short NORERR
 40003                                  
 40004                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40005                                  UnlinkOk:
 40006                                  	;jmp	SYS_RET_OK		; okey doksy
 40007 00006EB4 EBDB                    	jmp	short OpenOkj3
 40008                                  
 40009                                  	; 17/12/2022
 40010                                  ChModErr:	; 17/12/2022
 40011                                  NotFound:
 40012                                  	;mov	al,3
 40013 00006EB6 B003                    	MOV	AL,error_path_not_found
 40014                                  ChModE:		; 17/12/2022
 40015                                  UnlinkE:
 40016                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40017                                  	;;jmp	SYS_RET_ERR		; bye
 40018                                  	;jmp	short ChModE
 40019                                  	; 17/12/2022
 40020 00006EB8 EB87                    	jmp	short NORERR
 40021                                  
 40022                                  ;BREAK <$RENAME - move directory entries around>
 40023                                  ;----------------------------------------------------------------------------
 40024                                  ;
 40025                                  ;   Assembler usage:
 40026                                  ;	    LDS     DX, source
 40027                                  ;	    LES     DI, dest
 40028                                  ;	    IF VIA SERVER DOS CALL
 40029                                  ;	      MOV   CX,SEARCH_ATTRIB
 40030                                  ;	    MOV     AH, Rename
 40031                                  ;	    INT     21h
 40032                                  ;
 40033                                  ;   Error returns:
 40034                                  ;	    AX = error_file_not_found
 40035                                  ;	       = error_not_same_device
 40036                                  ;	       = error_access_denied
 40037                                  ;
 40038                                  ;----------------------------------------------------------------------------
 40039                                  
 40040                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40041                                  _$RENAME:
 40042                                  	; MSDOS 3.3 (& MSDOS 6.0)
 40043 00006EBA 51                      	push	cx
 40044 00006EBB 1E                      	push	ds
 40045 00006EBC 52                      	push	dx			; save source and possible CX arg
 40046 00006EBD 06                      	PUSH	ES
 40047 00006EBE 1F                      	POP	DS			; move dest to source
 40048 00006EBF 89FE                    	MOV	SI,DI			; save for offsets
 40049 00006EC1 BF[3E04]                	MOV	DI,RENBUF
 40050 00006EC4 E83EFB                  	call	TransPathSet		; munge the paths
 40051 00006EC7 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 40052 00006ECC 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 40053 00006ED1 5E                      	pop	si
 40054 00006ED2 1F                      	pop	ds
 40055 00006ED3 59                      	pop	cx			; get back source and possible CX arg
 40056                                  epjc2:	
 40057 00006ED4 72E0                    	JC	short ChModErr		; get old error
 40058 00006ED6 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 40059 00006EDC 75D8                    	JNZ	short NotFound
 40060 00006EDE 51                      	push	cx			; Save possible CX arg
 40061 00006EDF BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 40062 00006EE2 E820FB                  	call	TransPathSet		; wham
 40063 00006EE5 59                      	pop	cx
 40064                                  	;JC	short epjc2
 40065                                  	; 15/03/2024
 40066 00006EE6 72CE                    	jc	short ChModErr
 40067                                  	
 40068 00006EE8 16                      	push	ss
 40069 00006EE9 1F                      	pop	ds
 40070 00006EEA 803E[7A05]FF            	CMP	byte [CMETA],-1
 40071 00006EEF 72C5                    	JB	short NotFound
 40072                                  
 40073                                  	; MSDOS 6.0
 40074                                  	;PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 40075                                  	;PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 40076                                  	; 15/03/2024
 40077                                  	;;;
 40078 00006EF1 C43E[A205]              	les	di,[THISCDS]
 40079 00006EF5 57                      	push	di
 40080 00006EF6 06                      	push	es
 40081                                  	;;;
 40082                                  
 40083 00006EF7 BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 40084 00006EFA 16                      	PUSH	SS			   ;AN000;;MS.
 40085 00006EFB 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 40086 00006EFC 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 40087                                  rnloop: 				   ;AN000;
 40088 00006EFE E87EFA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 40089 00006F01 720F                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 40090 00006F03 E88EA2                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 40091 00006F06 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 40092 00006F08 FEC0                    	INC	AL			   ;AN000;;MS.	next
 40093 00006F0A EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 40094                                  rnerr:					   ;AN000;
 40095                                  	;ADD	SP,4			   ;AN000;;MS. pop thiscds
 40096                                  	; 15/03/2024 (PCDOS 7.1 IBMDOS.COM)
 40097 00006F0C 58                      	pop	ax
 40098 00006F0D 58                      	pop	ax
 40099                                  
 40100                                  	;error	error_current_directory    ;AN000;;MS.
 40101 00006F0E B010                    	mov	al,error_current_directory
 40102                                  	;jmp	SYS_RET_ERR
 40103                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40104 00006F10 EBA6                    	jmp	short UnlinkE
 40105                                  dorn:
 40106                                  
 40107                                  ; 15/03/2024
 40108                                  %if 0					   ;AN000;
 40109                                  	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 40110                                  	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 40111                                  %endif
 40112 00006F12 16                      	push	ss
 40113 00006F13 1F                      	pop	ds
 40114                                  
 40115                                  ; 15/03/2024
 40116                                  %if 1
 40117 00006F14 8F06[A405]              	pop	word [THISCDS+2]
 40118 00006F18 8F06[A205]              	pop	word [THISCDS]
 40119                                  %endif
 40120                                  	; MSDOS 3.3 (& MSDOS 6.0)
 40121                                  	;mov	ch,16h
 40122 00006F1C B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 40123                                  					; rename appropriate files
 40124 00006F1E E8A500                  	call	SetAttrib
 40125 00006F21 E854B7                  	call	DOS_RENAME		; do the deed
 40126 00006F24 7292                    	JC	short UnlinkE 		; errors
 40127                                  
 40128                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40129                                  	;jmp	SYS_RET_OK
 40130 00006F26 EB8C                    	jmp	short UnlinkOk
 40131                                  
 40132                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40133                                  
 40134                                  ; 14/07/2018 - Retro DOS v3.0
 40135                                  ; MSDOS 3.3 (& MSDOS 6.0)
 40136                                  
 40137                                  ;Break <$CreateNewFile - Create a new directory entry>
 40138                                  ;----------------------------------------------------------------------------
 40139                                  ;   CreateNew - Create a new directory entry. Return a file handle if there
 40140                                  ;	was no previous directory entry, and fail if a directory entry with
 40141                                  ;	the same name existed previously.
 40142                                  ;
 40143                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 40144                                  ;		CX contains default file attributes
 40145                                  ;   Outputs:	Carry Clear:
 40146                                  ;		    AX has file handle opened for read/write
 40147                                  ;		Carry Set:
 40148                                  ;		    AX has error code
 40149                                  ;   Registers modified: All
 40150                                  ;----------------------------------------------------------------------------
 40151                                  
 40152                                  _$CreateNewFile:
 40153 00006F28 51                      	push	cx			; Save attributes on stack
 40154 00006F29 B9[802A]                	MOV	CX,DOS_Create_New	; routine to call
 40155 00006F2C E919FF                  	JMP	AccessSet		; use good ol' open
 40156                                  
 40157                                  ;**	BinToAscii - convert a number to a string.
 40158                                  ;----------------------------------------------------------------------------
 40159                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 40160                                  ;	This routine is used to generate temp file names so we don't spend
 40161                                  ;	the time and code needed for a true hex number, we just use
 40162                                  ;	A thorugh O.
 40163                                  ;
 40164                                  ;	ENTRY	(ax) = value
 40165                                  ;		(es:di) = destination
 40166                                  ;	EXIT	(es:di) updated by 4
 40167                                  ;	USES	cx, di, flags
 40168                                  ;----------------------------------------------------------------------------
 40169                                  
 40170                                  ; MSDOS 3.3
 40171                                  ;BinToAscii:
 40172                                  ;	mov     cx,4
 40173                                  ;bta5:
 40174                                  ;	push    cx
 40175                                  ;	mov     cl,4
 40176                                  ;	rol     ax,cl
 40177                                  ;	push    ax
 40178                                  ;	and     al,0Fh
 40179                                  ;	add     al,'0'
 40180                                  ;	cmp     al,'9'
 40181                                  ;	jbe     short bta6
 40182                                  ;	add     al,7
 40183                                  ;bta6: 
 40184                                  ;	stosb
 40185                                  ;	pop     ax
 40186                                  ;	pop     cx
 40187                                  ;	loop    bta5
 40188                                  ;	retn
 40189                                  
 40190                                  ; MSDOS 6.0
 40191                                  BinToAscii:
 40192 00006F2F B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 40193                                  bta5:	
 40194 00006F32 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 40195 00006F34 50                      	push	ax			; preserve remainder of digits
 40196 00006F35 240F                    	AND	AL,0Fh			; grab low nibble
 40197 00006F37 0441                    	ADD	AL,'A'			; turn into ascii
 40198 00006F39 AA                      	STOSB				; drop in the character
 40199 00006F3A 58                      	pop	ax			; (ax) = shifted number
 40200 00006F3B FECD                    	dec	ch
 40201 00006F3D 75F3                    	jnz	short bta5		; process 4 digits
 40202 00006F3F C3                      	retn
 40203                                  
 40204                                  ;Break	<$CreateTempFile - create a unique name>
 40205                                  ;----------------------------------------------------------------------------
 40206                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 40207                                  ;	Method used is to get the current time, convert to a name and attempt
 40208                                  ;	a create new. Repeat until create new succeeds.
 40209                                  ;
 40210                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 40211                                  ;		CX  contains default attributes
 40212                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 40213                                  ;		AX has handle
 40214                                  ;   Registers modified: all
 40215                                  ;----------------------------------------------------------------------------
 40216                                  
 40217                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40218                                  
 40219                                  _$CreateTempFile:
 40220                                  	;Enter
 40221 00006F40 55                      	push	bp
 40222 00006F41 89E5                    	mov	bp,sp
 40223                                  
 40224                                  	;LocalVar  EndPtr,DWORD
 40225                                  	;LocalVar  FilPtr,DWORD
 40226                                  	;LocalVar  Attr,WORD
 40227                                  
 40228 00006F43 83EC0A                  	sub	sp,10
 40229                                  
 40230                                  	;test	cx,0FFD8h
 40231 00006F46 F7C1D8FF                	test	CX,~attr_changeable
 40232 00006F4A 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 40233                                  
 40234                                  ; We need this "hook" here to detect these cases (like user sets one both of
 40235                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 40236                                  ; below. The code loops on error_access_denied, but if one of the non
 40237                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 40238                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 40239                                  ; need to detect these cases before getting to the loop.
 40240                                  
 40241                                  	;mov	ax, 5
 40242 00006F4C B80500                  	MOV	AX,error_access_denied
 40243 00006F4F EB69                    	JMP	SHORT SETTMPERR
 40244                                  
 40245                                  OKatts:
 40246                                  	;MOV	attr,CX 		; save attribute
 40247 00006F51 894EF6                  	mov     [bp-10],cx
 40248                                  	;MOV	FilPtrL,DX		; pointer to file
 40249 00006F54 8956F8                  	mov	[bp-8],dx
 40250                                  	;MOV	FilPtrH,DS
 40251 00006F57 8C5EFA                  	mov	[bp-6],ds
 40252                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 40253 00006F5A 8C5EFE                  	mov	[bp-2],ds
 40254 00006F5D 1E                      	PUSH	DS
 40255 00006F5E 07                      	POP	ES			; destination for nul search
 40256 00006F5F 89D7                    	MOV	DI,DX
 40257 00006F61 89F9                    	MOV	CX,DI
 40258 00006F63 F7D9                    	NEG	CX			; number of bytes remaining in segment
 40259                                  	; MSDOS 6.0
 40260 00006F65 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 40261 00006F67 7501                    	JNZ	short okok		;AN000;MS. no
 40262                                  	;MOV	CX,-1			;AN000;MS.
 40263                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40264                                  	; 17/12/2022
 40265 00006F69 49                      	dec	cx  ; mov cx,-1
 40266                                  	;mov	cx,-1 ; 0FFFh
 40267                                  okok:					;AN000;
 40268 00006F6A 31C0                    	XOR	AX,AX			;AN000;
 40269 00006F6C F2AE                    	REPNZ	SCASB			;AN000;
 40270                                  					;AN000;
 40271 00006F6E 4F                      	DEC	DI			; point back to the null
 40272 00006F6F 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 40273 00006F73 E8EADF                  	call	PATHCHRCMP		; Is it a path separator?
 40274 00006F76 7403                    	JZ	short SETENDPTR		; Yes
 40275                                  STOREPTH:
 40276 00006F78 B05C                    	MOV	AL,'\'
 40277 00006F7A AA                      	STOSB				; Add a path separator (and INC DI)
 40278                                  SETENDPTR:
 40279                                  	;MOV	EndPtrL,DI		; pointer to the tail
 40280 00006F7B 8856FC                  	mov	[bp-4],dl
 40281                                  CreateLoop:
 40282 00006F7E 16                      	push	ss			; let ReadTime see variables
 40283 00006F7F 1F                      	pop	ds
 40284 00006F80 55                      	push	bp
 40285 00006F81 E88B9B                  	call	READTIME		; go get time
 40286 00006F84 5D                      	pop	bp
 40287                                  ;
 40288                                  ; Time is in CX:DX. Go drop it into the string.
 40289                                  ;
 40290                                  	;les	di,EndPtr		; point to the string
 40291 00006F85 C47EFC                  	les	di,[BP-4]
 40292 00006F88 89C8                    	mov	ax,cx
 40293 00006F8A E8A2FF                  	call	BinToAscii		; store upper word
 40294 00006F8D 89D0                    	mov	ax,dx
 40295 00006F8F E89DFF                  	call	BinToAscii		; store lower word
 40296 00006F92 30C0                    	xor	al,al
 40297 00006F94 AA                      	STOSB				; nul terminate
 40298                                  	;LDS	DX,FilPtr		; get name
 40299 00006F95 C556F8                  	lds	dx,[bp-8]
 40300                                  	;MOV	CX,Attr 		; get attr
 40301 00006F98 8B4EF6                  	mov	cx,[bp-10]
 40302 00006F9B 55                      	push	bp
 40303 00006F9C E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 40304 00006F9F 5D                      	pop	bp
 40305 00006FA0 7319                    	JNC	short CreateDone	; failed, go try again
 40306                                  
 40307                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 40308                                  ; error and figure out what to do.
 40309                                  
 40310                                  	;; MSDOS 3.3			; M049 - start
 40311                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 40312                                  ;;	cmp	al,error_file_exists
 40313                                  ;;	jz	short CreateLoop	; file existed => try with new name
 40314                                  ;;	cmp	al,error_access_denied
 40315                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 40316                                  
 40317                                  	; MSDOS 6.0
 40318                                  	;cmp	al,50h
 40319 00006FA2 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 40320 00006FA4 74D8                    	JZ	short CreateLoop	; Y: try again
 40321                                  	;cmp	al,5
 40322 00006FA6 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 40323 00006FA8 7510                    	JNZ	short SETTMPERR		; N: Error out
 40324                                  					; Y: Check to see if we got this due
 40325                                  					;    to the network drive. Note that
 40326                                  					;    the redir will set the exterr
 40327                                  					;    to error_cannot_make if this is 
 40328                                  					;    so. 
 40329 00006FAA 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 40330                                  					; See if it's REALLY an att mismatch
 40331 00006FB0 7408                    	je	short SETTMPERR		; no, network error, stop
 40332                                  ;M070
 40333                                  ; If the user failed on an I24, we do not want to try again
 40334                                  ;
 40335 00006FB2 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 40336                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 40337                                  
 40338                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 40339                                  	; 17/12/2022
 40340 00006FB8 75C4                    	jne	short CreateLoop ; 10/06/2019 
 40341                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40342                                  	;jz	short SETTMPERR
 40343                                  	;jmp	short CreateLoop
 40344                                  
 40345                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 40346                                  					; M049 - end
 40347                                  SETTMPERR:
 40348 00006FBA F9                      	STC
 40349                                  CreateDone:
 40350                                  	;Leave
 40351 00006FBB 89EC                    	mov	sp,bp
 40352 00006FBD 5D                      	pop	bp
 40353 00006FBE 7203                    	JC	short CreateFail
 40354 00006FC0 E97296                  	jmp	SYS_RET_OK		; success!
 40355                                  CreateFail:
 40356 00006FC3 E97896                  	jmp	SYS_RET_ERR
 40357                                  
 40358                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 40359                                  ;   (CH) or to the value in CL if the current system call is through
 40360                                  ;   serverdoscall.
 40361                                  ;
 40362                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 40363                                  ;		fSharing == TRUE => set sattrib to CL
 40364                                  ;   Outputs:	none
 40365                                  ;   Registers changed:	CX
 40366                                  
 40367                                  SetAttrib:
 40368 00006FC6 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 40369 00006FCC 7502                    	jnz	short Set
 40370 00006FCE 88E9                    	mov	cl,ch
 40371                                  Set:
 40372 00006FD0 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 40373 00006FD5 C3                      	retn
 40374                                  
 40375                                  ;----------------------------------------------------------------------------
 40376                                  	; 16/03/2024 - Retro DOS v4.1
 40377                                  ext_inval2:
 40378                                  	;mov	al,1
 40379 00006FD6 B001                    	mov	al,error_invalid_function
 40380                                  eo_err:
 40381                                  	;jmp	SYS_RET_ERR
 40382 00006FD8 EBE9                    	jmp	short CreateFail
 40383                                  
 40384                                  ; 14/07/2018 - Retro DOS v3.0
 40385                                  ; MSDOS 6.0
 40386                                  
 40387                                  ; 29/04/2019 - Retro DOS v4.0
 40388                                  
 40389                                  ;Break	<Extended_Open- Extended open the file>
 40390                                  ;----------------------------------------------------------------------------
 40391                                  ; Input: AL= 0 reserved  AH=6CH
 40392                                  ;	 BX= mode
 40393                                  ;	 CL= create attribute  CH=search attribute (from server)
 40394                                  ;	 DX= flag
 40395                                  ;	 DS:SI = file name
 40396                                  ;	 ES:DI = parm list
 40397                                  ;			   DD  SET EA list (-1) null
 40398                                  ;			   DW  n  parameters
 40399                                  ;			   DB  type (TTTTTTLL)
 40400                                  ;			   DW  IOMODE
 40401                                  ; Function: Extended Open
 40402                                  ; Output: carry clear
 40403                                  ;		     AX= handle
 40404                                  ;		     CX=1 file opened
 40405                                  ;			2 file created/opened
 40406                                  ;			3 file replaced/opened
 40407                                  ;	  carry set: AX has error code
 40408                                  ;----------------------------------------------------------------------------
 40409                                  
 40410                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40411                                  _$Extended_Open:			  ;AN000;
 40412                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 40413 00006FDA 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 40414 00006FDF 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 40415                                  	; 17/12/2022
 40416 00006FE6 F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 40417                                  	;;test	dx,0FE00h
 40418                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0 ?
 40419 00006FE9 75EB                    	JNZ	short ext_inval2	  ;AN000;EO. no
 40420 00006FEB 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 40421 00006FED 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 40422 00006FF0 74E4                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 40423                                  	;and	dl,0Fh
 40424 00006FF2 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 40425 00006FF5 80FA02                  	CMP	DL,2			  ;AN000;EO, > 2
 40426 00006FF8 77DC                    	JA	short ext_inval2	  ;AN000;EO. yes, error
 40427                                  	;and	ah,0F0h
 40428 00006FFA 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 40429 00006FFD 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 40430 00007000 77D4                    	JA	short ext_inval2	  ;AN000;EO. yes, error
 40431                                  
 40432 00007002 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 40433 00007007 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 40434 0000700C 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 40435 00007011 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 40436 00007016 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 40437 0000701B 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 40438 00007020 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 40439 00007025 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 40440 0000702A 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 40441 0000702C 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 40442                                  ; 16/03/2024
 40443                                  %if 0
 40444                                  	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 40445                                  ext_inval2:				  ;AN000;;EO.
 40446                                  	;mov	al,1
 40447                                  	mov	al,error_invalid_function ;AN000;EO.. invalid function
 40448                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40449                                  eo_err:
 40450                                  	;jmp	SYS_RET_ERR
 40451                                  	jmp	short CreateFail
 40452                                  %endif
 40453                                  
 40454                                  ; 16/03/2024
 40455                                  %if 0
 40456                                  ext_inval_parm:				  ;AN000;EO..
 40457                                  	POP	CX			  ;AN000;EO..  pop up satck
 40458                                  	POP	SI			  ;AN000;EO..
 40459                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 40460                                  	;mov	al,13
 40461                                  	mov	al,error_invalid_data
 40462                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40463                                  	;;jmp	SYS_RET_ERR
 40464                                  	;jmp	short eo_err
 40465                                  	; 17/12/2022
 40466                                  	jmp	short CreateFail
 40467                                  %endif
 40468                                  
 40469                                  	; 17/12/2022	
 40470                                  ;error_return:				  ;AN000;EO.
 40471                                  ;	retn				  ;AN000;EO.. return with error
 40472                                  
 40473                                  goopen2:				  ;AN000;
 40474                                  	; 17/12/2022
 40475                                  	;test	bh,20h				 
 40476 0000702E F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 40477                                  	;;test	bx,2000h
 40478                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 40479 00007031 7406                    	JZ	short goopen		  ;AN000;EO.. no
 40480                                  	;or	byte [SS:EXTOPEN_ON],2
 40481 00007033 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 40482                                  goopen:					  ;AN000;
 40483                                  	;or	byte [SS:EXTOPEN_ON],1 
 40484 00007039 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 40485                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 40486                                  	; 18/12/2022
 40487 0000703F 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 40488                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 40489 00007045 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 40490 0000704B 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 40491 0000704D E8D8FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 40492 00007050 723F                    	JC	short error_return	  ;AN000;;EO. error
 40493                                  
 40494 00007052 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 40495 00007058 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 40496                                  	;mov	word [SS:EXTOPEN_FLAG],2
 40497 0000705A 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. created/opened;smr;SS Override
 40498 00007061 EB7F                    	JMP	short setXAttr ; 16/03/2024 ;AN000;;EO. set XAs
 40499                                  
 40500                                  	; 17/12/2022
 40501                                  ;ok_return2:
 40502                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 40503                                  
 40504                                  chknext:
 40505                                  	; 17/12/2022
 40506 00007063 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 40507                                  	;;test	word [SS:EXTOPEN_FLAG],1
 40508                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 40509 00007069 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 40510 0000706B E8D6FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 40511 0000706E 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 40512 00007070 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 40513 00007076 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 40514 00007078 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. presume create/open;smr;SS Override
 40515 0000707F 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 40516 00007085 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 40517 00007087 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 40518 0000708E EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 40519                                  error_return2:
 40520 00007090 F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 40521                                  error_return:	 ; 17/12/2022
 40522 00007091 C3                      	retn				  ;AN000;;EO. return with error
 40523                                  
 40524                                  	; 17/12/2022
 40525                                  ok_return:
 40526                                  ok_return2:
 40527 00007092 E9A095                  	jmp	SYS_RET_OK
 40528                                  
 40529                                  exist_open:				  ;AN000;
 40530                                  	;test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 40531                                  	;jz	short noserver		  ;AN000;;EO. no
 40532                                  	; 16/03/2024
 40533                                  	;;;
 40534 00007095 36803E[7205]00          	cmp	byte [ss:FSHARING],0	; server doscall?
 40535 0000709B 7402                    	jz	short noserver		; no
 40536                                  	;;;
 40537 0000709D 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 40538                                  noserver:
 40539 0000709F E8D0FC                  	call	_$Open2			  ;AN000;;EO. do open
 40540 000070A2 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 40541 000070A4 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 40542 000070AA 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 40543                                  local_extopen:
 40544                                  	;cmp	ax,2
 40545 000070AC 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 40546 000070AF 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 40547                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 40548                                  	; 17/12/2022
 40549 000070B1 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 40550                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 40551                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 40552                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 40553                                  	; 17/12/2022
 40554 000070B7 7446                    	jz	short extexit ; 10/06/2019
 40555                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40556                                  	;jnz	short do_creat
 40557                                  	;jmp	short extexit
 40558                                  do_creat:
 40559 000070B9 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 40560 000070BE 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 40561 000070C3 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 40562 000070C5 E87CFD                  	call	_$CREAT			  ;AN000;;EO. do create
 40563 000070C8 7235                    	JC	short extexit 		  ;AN000;;EO. error
 40564                                  	;mov	word [SS:EXTOPEN_FLAG],2
 40565 000070CA 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 40566                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 40567 000070D1 EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 40568                                  
 40569                                  ext_ok:
 40570 000070D3 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 40571 000070D9 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 40572                                  	;mov	word [SS:EXTOPEN_FLAG],1
 40573 000070DB 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 40574                                  setXAttr:
 40575                                  	; 29/04/2019
 40576 000070E2 50                      	push	ax
 40577 000070E3 E89F93                  	call	Get_User_Stack		  ;AN000;;EO.
 40578 000070E6 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 40579                                  	;mov	[si+4],ax
 40580 000070EA 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 40581 000070ED 58                      	pop	ax			  ;AN000;;EO.
 40582 000070EE 8904                    	mov	[si],ax
 40583                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 40584                                  	; 17/12/2022
 40585 000070F0 EBA0                    	jmp	short ok_return
 40586                                  ;ok_return:				  ;AN000;
 40587                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 40588                                  
 40589                                  ; 16/03/2024
 40590                                  %if 0
 40591                                  extexit2:				  ;AN000; ERROR RECOVERY
 40592                                  	POP	BX			  ;AN000;EO. close the handle
 40593                                  	PUSH	AX			  ;AN000;EO. save error code from set XA
 40594                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 40595                                  	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 40596                                  					  ;AN000;EO. from create;smr;SS Override
 40597                                  	JNZ	short justopen		  ;AN000;EO.
 40598                                  	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 40599                                  	LDS	DX,[SI]			  ;AN000;EO.
 40600                                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 40601                                  	JMP	SHORT reserror		  ;AN000;EO.
 40602                                  
 40603                                  justopen:				  ;AN000;
 40604                                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 40605                                  reserror:				  ;AN000;
 40606                                  	POP	AX			  ;AN000;EO. restore error code from set XA
 40607                                  
 40608                                  	JMP	SHORT extexit		  ;AN000;EO.
 40609                                  
 40610                                  ext_file_unfound:			  ;AN000;
 40611                                  	;mov	ax,2
 40612                                  	MOV	AX,error_file_not_found   ;AN000;EO.
 40613                                  	JMP	SHORT extexit		  ;AN000;EO.
 40614                                  ext_inval:				  ;AN000;
 40615                                  	;mov	ax,1
 40616                                  	MOV	AX,error_invalid_function ;AN000;EO.
 40617                                  
 40618                                  lockoperr:	; 17/12/2022
 40619                                  extexit:
 40620                                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 40621                                  
 40622                                  %endif
 40623                                  
 40624                                  ;============================================================================
 40625                                  ; LOCK.ASM, MSDOS 6.0, 1991
 40626                                  ;============================================================================
 40627                                  ; 14/07/2018 - Retro DOS v3.0
 40628                                  ; 22/05/2019 - Retro DOS v4.0
 40629                                  
 40630                                  ;BREAK <$LockOper - Lock Calls>
 40631                                  ;----------------------------------------------------------------------------
 40632                                  ;
 40633                                  ;   Assembler usage:
 40634                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 40635                                  ;	    MOV     CX, OffsetHigh
 40636                                  ;	    MOV     DX, OffsetLow
 40637                                  ;	    MOV     SI, LengthHigh
 40638                                  ;	    MOV     DI, LengthLow
 40639                                  ;	    MOV     AH, LockOper
 40640                                  ;	    MOV     AL, Request
 40641                                  ;	    INT     21h
 40642                                  ;
 40643                                  ;   Error returns:
 40644                                  ;	    AX = error_invalid_handle
 40645                                  ;	       = error_invalid_function
 40646                                  ;	       = error_lock_violation
 40647                                  ;
 40648                                  ;   Assembler usage:
 40649                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 40650                                  ;
 40651                                  ;				    0? lock all
 40652                                  ;				    8? lock write
 40653                                  ;				    ?2 lock multiple
 40654                                  ;				    ?3 unlock multiple
 40655                                  ;				    ?4 lock/read
 40656                                  ;				    ?5 write/unlock
 40657                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 40658                                  ;	    MOV     BX, Handle
 40659                                  ;	    MOV     CX, count or size
 40660                                  ;	    LDS     DX, buffer
 40661                                  ;	    INT     21h
 40662                                  ;
 40663                                  ;   Error returns:
 40664                                  ;	    AX = error_invalid_handle
 40665                                  ;	       = error_invalid_function
 40666                                  ;	       = error_lock_violation
 40667                                  ;
 40668                                  ;----------------------------------------------------------------------------
 40669                                  
 40670                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40671                                  
 40672                                  	; 17/03/2024
 40673                                  	; 16/03/2024 - Retro DOS v4.1
 40674                                  _$LockOper:
 40675 000070F2 3C01                    	CMP	AL,1
 40676 000070F4 770C                    	JA	short lock_bad_func
 40677                                  
 40678 000070F6 57                      	PUSH	DI			       ; Save LengthLow
 40679 000070F7 E81EF4                  	call	SFFromHandle		       ; ES:DI -> SFT
 40680 000070FA 731E                    	JNC	short lock_do 		       ; have valid handle
 40681 000070FC 5F                      	POP	DI			       ; Clean stack
 40682                                  	;mov	al,6
 40683 000070FD B006                    	mov	al,error_invalid_handle
 40684                                  
 40685                                  	; 16/03/2024
 40686                                  extexit:
 40687                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40688                                  lockoperr:
 40689 000070FF E93C95                  	jmp	SYS_RET_ERR
 40690                                  	; 17/12/2022
 40691                                  	;jmp	short lockoperr ; jmp SYS_RET_ERR
 40692                                  
 40693                                  lock_bad_func:
 40694                                  	;mov	byte [ss:EXTERR_LOCUS],1
 40695 00007102 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 40696                                  	;mov	al,1
 40697 00007108 B001                    	mov	al,error_invalid_function
 40698                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40699                                  lockoperrj:
 40700                                  	;jmp	SYS_RET_ERR
 40701 0000710A EBF3                    	jmp	short lockoperr
 40702                                  
 40703                                  	; 22/05/2019 - Retro DOS v4.0
 40704                                  
 40705                                  	; MSDOS 6.0 
 40706                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 40707                                  ; Dead code deleted, MD, 23 Mar 90
 40708                                  
 40709                                  ;lock_do:
 40710                                  ;	; MSDOS 3.3
 40711                                  ;	or	al,al
 40712                                  ;	pop	ax
 40713                                  ;	jz	short DOS_Lock
 40714                                  ;DOS_Unlock:
 40715                                  ;	;test	word [es:di+5],8000h
 40716                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40717                                  ;	JZ	short LOCAL_UNLOCK
 40718                                  ;	push    ax
 40719                                  ;	mov     ax,110Bh
 40720                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40721                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40722                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 40723                                  ;			; SFT DPB field -> DPB of drive containing file
 40724                                  ;			; Return: CF set error
 40725                                  ;	pop     bx
 40726                                  ;	jmp     short ValChk
 40727                                  ;
 40728                                  ;LOCAL_UNLOCK:
 40729                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40730                                  ;ValChk:
 40731                                  ;	JNC	short Lock_OK
 40732                                  ;lockerror:
 40733                                  ;	jmp	SYS_RET_ERR
 40734                                  ;Lock_OK:
 40735                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40736                                  ;	jmp	SYS_RET_OK
 40737                                  ;DOS_Lock:
 40738                                  ;	;test	word [es:di+5],8000h
 40739                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40740                                  ;	JZ	short LOCAL_LOCK
 40741                                  ;	;CallInstall NET_XLock,MultNET,10
 40742                                  ;	mov     ax, 110Ah
 40743                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40744                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40745                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 40746                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40747                                  ;			; Return: CF set error
 40748                                  ;	JMP	short ValChk
 40749                                  ;
 40750                                  ;LOCAL_LOCK:
 40751                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40752                                  ;	JMP	short ValChk
 40753                                  
 40754                                  ; 17/12/2022
 40755                                  LOCAL_UNLOCK:
 40756                                  	; MSDOS 3.3
 40757                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40758                                  	; MSDOS 6.0
 40759 0000710C FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40760                                  ValChk:
 40761 00007110 7302                    	JNC	short Lock_OK
 40762                                  lockerror:
 40763                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40764                                  	;;jmp	SYS_RET_ERR
 40765                                  	;jmp	short lockoperrj
 40766                                  	; 17/12/2022
 40767 00007112 EBEB                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 40768                                  Lock_OK:
 40769                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40770                                  	; 10/06/2019
 40771 00007114 A1[0C06]                	mov	ax,[TEMP_VAR]
 40772 00007117 E91B95                  	jmp	SYS_RET_OK
 40773                                  
 40774                                  	; 22/05/2019
 40775                                  lock_do:
 40776                                  	; MSDOS 6.0
 40777 0000711A 89C3                    	MOV	BX,AX				; save AX
 40778 0000711C BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 40779                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40780                                  	;;mov	[bp+0],dx
 40781                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 40782                                  	; 15/12/2022
 40783 0000711F 895600                  	mov	[bp],dx
 40784                                  	;mov	[bp+2],cx
 40785 00007122 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 40786                                  
 40787                                  	; 16/03/2024
 40788                                  	;POP	CX				; get low length
 40789                                  	;;mov	[bp+4],cx
 40790                                  	;MOV	[BP+LockBuf.Lock_length],CX	; set low length
 40791 00007125 8F4604                  	pop	word [bp+LockBuf.Lock_length]
 40792                                  
 40793                                  	;mov	[bp+6],si
 40794 00007128 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 40795 0000712B B90100                  	MOV	CX,1				; one range
 40796                                  
 40797                                  ;	PUSH	CS				;
 40798                                  ;	POP	DS				; DS:DX points to
 40799                                  
 40800 0000712E 16                      	push	ss
 40801 0000712F 1F                      	pop	ds
 40802                                  
 40803 00007130 89EA                    	MOV	DX,BP				; Lock_Buffer
 40804                                  	;test	al,1
 40805 00007132 A801                    	TEST	AL,UNLOCK_ALL			; function 1
 40806                                  	;JNZ	short DOS_Unlock		; yes
 40807                                  	;JMP	short DOS_Lock			; function 0
 40808                                  	; 17/12/2022
 40809                                  	; 10/06/2019
 40810 00007134 740E                    	jz	short DOS_Lock
 40811                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40812                                  	;JNZ	short DOS_Unlock
 40813                                  	;JMP	short DOS_Lock
 40814                                  
 40815                                  DOS_Unlock:
 40816                                  	;;test	word [es:di+5],8000h
 40817                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40818 00007136 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40819 0000713B 74CF                    	JZ	short LOCAL_UNLOCK
 40820                                  
 40821                                  ; 17/03/2024
 40822                                  ;lock_unlock: ; 22/05/2019
 40823                                  
 40824                                  	;CallInstall Net_Xlock,MultNET,10
 40825                                  ;	
 40826                                  ;	; MSDOS 3.3
 40827                                  ;	;mov     ax,110Bh
 40828                                  ;	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40829                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40830                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 40831                                  ;			; SFT DPB field -> DPB of drive containing file
 40832                                  ;			; Return: CF set error
 40833                                  
 40834                                  ; 17/03/2024 - Retro DOS v4.1
 40835                                  lock_unlock:
 40836                                  
 40837                                  	; MSDOS 6.0
 40838 0000713D B80A11                  	mov     ax,110Ah
 40839 00007140 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40840                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40841                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40842                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40843                                  			; Return: CF set error
 40844                                  
 40845 00007142 EBCC                    	JMP	SHORT ValChk
 40846                                  
 40847                                  ; 17/12/2022
 40848                                  %if 0
 40849                                  LOCAL_UNLOCK:
 40850                                  	; MSDOS 3.3
 40851                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40852                                  	; MSDOS 6.0
 40853                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40854                                  ValChk:
 40855                                  	JNC	short Lock_OK
 40856                                  lockerror:
 40857                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40858                                  	;jmp	SYS_RET_ERR
 40859                                  	jmp	short lockoperrj
 40860                                  Lock_OK:
 40861                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40862                                  	; 10/06/2019
 40863                                  	mov	ax,[TEMP_VAR]
 40864                                  	jmp	SYS_RET_OK
 40865                                  %endif
 40866                                  
 40867                                  DOS_Lock:
 40868                                  	;;test	word [es:di+5],8000h
 40869                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40870 00007144 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40871                                  	;JZ	short LOCAL_LOCK
 40872                                  	; 17/03/2024
 40873 00007149 75F2                    	jnz	short lock_unlock
 40874                                  
 40875                                  ; 17/03/2024
 40876                                  %if 0
 40877                                  	;CallInstall NET_XLock,MultNET,10
 40878                                  
 40879                                  	mov     ax,110Ah
 40880                                  	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40881                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40882                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40883                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40884                                  			; Return: CF set error
 40885                                  
 40886                                  	JMP	short ValChk
 40887                                  %endif
 40888                                  
 40889                                  LOCAL_LOCK:
 40890                                  	; MSDOS 3.3
 40891                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40892                                  	; MSDOS 6.0
 40893 0000714B FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40894                                  
 40895 0000714F EBBF                    	JMP	short ValChk
 40896                                  
 40897                                  ; 14/07/2018 - Retro DOS v3.0
 40898                                  ; LOCK_CHECK
 40899                                  ;MSDOS 6.0 (& MSDOS 3.3)
 40900                                  
 40901                                  ;----------------------------------------------------------------------------
 40902                                  ; Inputs:
 40903                                  ;	Outputs of SETUP
 40904                                  ;	[USER_ID] Set
 40905                                  ;	[PROC_ID] Set
 40906                                  ; Function:
 40907                                  ;	Check for lock violations on local I/O
 40908                                  ;	Retries are attempted with sleeps in between
 40909                                  ; Outputs:
 40910                                  ;    Carry clear
 40911                                  ;	Operation is OK
 40912                                  ;    Carry set
 40913                                  ;	A lock violation detected
 40914                                  ; Outputs of SETUP preserved
 40915                                  ;----------------------------------------------------------------------------
 40916                                  
 40917                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40918                                  	; 22/05/2019 - Retro DOS v4.0
 40919                                  LOCK_CHECK:
 40920 00007151 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 40921                                  LockRetry:
 40922 00007155 53                      	push	bx		; save regs
 40923 00007156 50                      	push	ax ; MSDOS 6.0
 40924                                  
 40925                                  	;MSDOS 3.3
 40926                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 40927                                  	;MSDOS 6.0
 40928 00007157 FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 40929                                  
 40930 0000715B 58                      	pop	ax ; MSDOS 6.0
 40931 0000715C 5B                      	pop	bx		; restrore regs
 40932 0000715D 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 40933                                  LockN:
 40934 0000715F E887A0                  	call	Idle		; wait a while
 40935 00007162 4B                      	DEC	BX		; remember a retry
 40936 00007163 75F0                    	JNZ	short LockRetry	; more retries left...
 40937 00007165 F9                      	STC
 40938                                  lc_ret_label:
 40939 00007166 C3                      	retn
 40940                                  
 40941                                  ; 14/07/2018 - Retro DOS v3.0
 40942                                  ; LOCK_VIOLATION
 40943                                  ;MSDOS 6.0 (& MSDOS 3.3)
 40944                                  
 40945                                  ;----------------------------------------------------------------------------
 40946                                  ; Inputs:
 40947                                  ;	[THISDPB] set
 40948                                  ;	[READOP] indicates whether error on read or write
 40949                                  ; Function:
 40950                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 40951                                  ; Outputs:
 40952                                  ;	Carry set if user says FAIL, causes error_lock_violation
 40953                                  ;	Carry clear if user wants a retry
 40954                                  ;
 40955                                  ; DS, ES, DI, CX preserved, others destroyed
 40956                                  ;----------------------------------------------------------------------------
 40957                                  
 40958                                  LOCK_VIOLATION:
 40959 00007167 1E                      	PUSH	DS
 40960 00007168 06                      	PUSH	ES
 40961 00007169 57                      	PUSH	DI
 40962 0000716A 51                      	PUSH	CX
 40963                                  	;mov	ax,21h
 40964 0000716B B82100                  	MOV	AX,error_lock_violation
 40965                                  	;mov	byte [ALLOWED],18h
 40966 0000716E C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 40967 00007173 C42E[8A05]              	LES	BP,[THISDPB]
 40968 00007177 BF0100                  	MOV	DI,1		; Fake some registers
 40969 0000717A 89F9                    	MOV	CX,DI
 40970                                  	;mov	dx,[es:bp+11]
 40971 0000717C 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 40972 00007180 E842E0                  	call	HARDERR
 40973 00007183 59                      	POP	CX
 40974 00007184 5F                      	POP	DI
 40975 00007185 07                      	POP	ES
 40976 00007186 1F                      	POP	DS
 40977 00007187 3C01                    	CMP	AL,1
 40978 00007189 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 40979 0000718B F9                      	STC
 40980 0000718C C3                      	retn
 40981                                  
 40982                                  ; 14/07/2018 - Retro DOS v3.0
 40983                                  
 40984                                  ;----------------------------------------------------------------------------
 40985                                  
 40986                                  ;	do a retz to return error
 40987                                  
 40988                                  	; 22/05/2019 - Retro DOS v4.0
 40989                                  CheckShare:
 40990                                  	; MSDOS 3.3
 40991                                  	;cmp	byte [cs:fShare],0
 40992                                  	;retn
 40993                                  
 40994                                  	; MSDOS 6.0
 40995 0000718D 1E                      	push	ds			;smr;
 40996                                  	;getdseg <ds>			; ds -> dosdata
 40997 0000718E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 40998 00007193 803E[0303]00            	cmp	byte [fShare],0
 40999 00007198 1F                      	pop	ds			;smr;
 41000 00007199 C3                      	retn
 41001                                  	
 41002                                  ;============================================================================
 41003                                  ; SHARE.ASM, MSDOS 6.0, 1991
 41004                                  ;============================================================================
 41005                                  ; 14/07/2018 - Retro DOS v3.0
 41006                                  ; 22/05/2019 - Retro DOS v4.0
 41007                                  
 41008                                  ; SHARE_CHECK
 41009                                  ;----------------------------------------------------------------------------
 41010                                  ; Inputs:
 41011                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 41012                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 41013                                  ;       [WFP_START] has full path of name
 41014                                  ;       [USER_ID] Set
 41015                                  ;       [PROC_ID] Set
 41016                                  ; Function:
 41017                                  ;       Check for sharing violations on local file/device access
 41018                                  ; Outputs:
 41019                                  ;    Carry clear
 41020                                  ;       Sharing approved
 41021                                  ;    Carry set
 41022                                  ;       A sharing violation detected
 41023                                  ;           AX is error code
 41024                                  ; USES    ALL but DS
 41025                                  ;----------------------------------------------------------------------------
 41026                                  
 41027                                  	; 22/05/2019 - Retro DOS v4.0
 41028                                  SHARE_CHECK:
 41029                                  	; 26/07/2019
 41030 0000719A FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 41031                                  shchk_retn:
 41032 0000719E C3                      	retn
 41033                                  
 41034                                  ; SHARE_VIOLATION
 41035                                  ;----------------------------------------------------------------------------
 41036                                  ; Inputs:
 41037                                  ;       [THISDPB] Set
 41038                                  ;       AX has error code
 41039                                  ; Function:
 41040                                  ;       Handle Sharing errors
 41041                                  ; Outputs:
 41042                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 41043                                  ;       Carry clear if user wants a retry
 41044                                  ;
 41045                                  ; DS, ES, DI preserved, others destroyed
 41046                                  ;----------------------------------------------------------------------------
 41047                                  
 41048                                  SHARE_VIOLATION:
 41049 0000719F 1E                      	PUSH    DS
 41050 000071A0 06                      	PUSH	ES
 41051 000071A1 57                      	PUSH    DI
 41052 000071A2 C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 41053                                  	;mov	byte [ALLOWED],18h
 41054 000071A7 C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 41055 000071AC C42E[8A05]              	LES     BP,[THISDPB]
 41056 000071B0 BF0100                  	MOV     DI,1			; Fake some registers
 41057 000071B3 89F9                    	MOV     CX,DI
 41058                                  	;mov	dx,[es:bp+17]
 41059 000071B5 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 41060 000071B9 E809E0                  	call	HARDERR
 41061 000071BC 5F                      	POP     DI
 41062 000071BD 07                      	POP	ES
 41063 000071BE 1F                      	POP     DS
 41064 000071BF 3C01                    	CMP     AL,1
 41065 000071C1 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 41066 000071C3 F9                      	STC
 41067 000071C4 C3                      	retn
 41068                                  
 41069                                  ;----------------------------------------------------------------------------
 41070                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 41071                                  ;       NOT perform a close, it merely asserts that the sharing information
 41072                                  ;       for the SFT/UID/PID may be safely released.
 41073                                  ;
 41074                                  ;   Inputs:     ES:DI points to an SFT
 41075                                  ;   Outputs:    None
 41076                                  ;   Registers modified: all except DS,ES,DI
 41077                                  ;----------------------------------------------------------------------------
 41078                                  
 41079                                  ShareEnd:
 41080                                  	; 26/07/2019
 41081 000071C5 FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 41082 000071C9 C3                      	retn
 41083                                  
 41084                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 41085                                  ;----------------------------------------------------------------------------
 41086                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 41087                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 41088                                  ;
 41089                                  ;   Inputs:     ThisSFT points to the SFT
 41090                                  ;               WFP_Start points to the WFP
 41091                                  ;   Outputs:    Carry clear => successful entry
 41092                                  ;               Carry set => failed system call
 41093                                  ;   Registers modified: all
 41094                                  ;----------------------------------------------------------------------------
 41095                                  
 41096                                  ShareEnter:
 41097 000071CA 51                      	push	cx
 41098                                  retry:
 41099 000071CB 8B0E[1A00]              	mov     cx,[RetryCount]
 41100                                  attempt:
 41101 000071CF C43E[9E05]              	les     di,[THISSFT]		; grab sft
 41102 000071D3 31C0                    	XOR     AX,AX
 41103                                   	;mov	[es:di+51],ax
 41104 000071D5 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 41105 000071D9 51                      	push	cx
 41106 000071DA E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 41107 000071DD 59                      	pop	cx
 41108 000071DE 730A                    	jnc	short done		; success, let the user see this
 41109 000071E0 E806A0                  	call	Idle                    ; wait a while
 41110 000071E3 E2EA                    	loop    attempt                 ; go back for another attempt
 41111 000071E5 E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 41112 000071E8 73E1                    	jnc	short retry		; user said to retry, go do it
 41113                                  done:
 41114 000071EA 59                      	pop	cx
 41115 000071EB C3                      	retn
 41116                                  
 41117                                  ;============================================================================
 41118                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 41119                                  ;============================================================================
 41120                                  ; 29/04/2019 - Retro DOS 4.0
 41121                                  
 41122                                  ;** EXEPATCH.ASM 
 41123                                  ;----------------------------------------------------------------------------
 41124                                  ;	Contains the foll:
 41125                                  ;
 41126                                  ;		- code to find and overlay buggy unpack code
 41127                                  ;		- new code to be overlayed on buggy unpack code 
 41128                                  ;		- old code sequence to identify buggy unpack code
 41129                                  ;
 41130                                  ;	Revision history:
 41131                                  ;
 41132                                  ;		Created: 5/14/90
 41133                                  ;----------------------------------------------------------------------------
 41134                                  
 41135                                  ;----------------------------------------------------------------------------
 41136                                  ;
 41137                                  ; M020 : Fix for rational bug - for details see routine header
 41138                                  ; M028 : 4b04 implementation
 41139                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 41140                                  ; M032 : set turnoff bit only if DOS in HMA.
 41141                                  ; M033 : if IP < 2 then not exepacked.
 41142                                  ; M046 : support for a 4th version of exepacked files.
 41143                                  ; M068 : support for copy protected apps.
 41144                                  ; M071 : use A20OFF_COUNT of 10.
 41145                                  ;
 41146                                  ;----------------------------------------------------------------------------
 41147                                  
 41148                                  PATCH1_COM_OFFSET	EQU	06CH
 41149                                  PATCH1_OFFSET		EQU	028H
 41150                                  PATCH1_CHKSUM		EQU	0EF4EH
 41151                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 41152                                  
 41153                                  PATCH2_COM_OFFSET	EQU	076H
 41154                                  PATCH2_OFFSET		EQU	032H
 41155                                  
 41156                                  	; The strings that start at offset 076h have two possible 
 41157                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 41158                                  
 41159                                  PATCH2_CHKSUM		EQU	78B2H
 41160                                  CHKSUM2_LEN		EQU	119H/2
 41161                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 41162                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 41163                                  
 41164                                  PATCH3_COM_OFFSET	EQU	074H
 41165                                  PATCH3_OFFSET		EQU	032H
 41166                                  PATCH3_CHKSUM		EQU	4EDEH
 41167                                  CHKSUM3_LEN		EQU	117H/2
 41168                                  
 41169                                  ;**	Data structure passed for ExecReady call
 41170                                  ;
 41171                                  ;struc ERStruc
 41172                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 41173                                  ; .ER_Flags:	resw	1
 41174                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 41175                                  ; .ER_PSP:	resw	1	; PSP of the program
 41176                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 41177                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 41178                                  ; .size:
 41179                                  ;endstruc
 41180                                  
 41181                                  ;DOSCODE SEGMENT
 41182                                  
 41183                                  	; 22/05/2019 - Retro DOS v4.0
 41184                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 41185                                  
 41186                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41187                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 41188                                  
 41189                                  ; M028 - BEGIN
 41190                                  
 41191                                  ;--------------------------------------------------------------------------
 41192                                  ;
 41193                                  ;	Procedure Name		: ExecReady
 41194                                  ;
 41195                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 41196                                  ;
 41197                                  ;--------------------------------------------------------------------------
 41198                                  
 41199                                  ExecReady:
 41200 000071EC 89D6                    	mov	si,dx			; move the pointer into a friendly one
 41201                                  	;;test	word [si+2],1
 41202                                  	; 17/12/2022
 41203 000071EE F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 41204                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 41205 000071F2 7413                    	jz	short er_setver		; only setver for .COM files
 41206                                  
 41207                                  	;mov	ax,[si+8]
 41208 000071F4 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 41209 000071F7 83C010                  	add	ax,10h
 41210 000071FA 8EC0                    	mov	es,ax
 41211                                  
 41212                                  	;mov	cx,[si+10]
 41213 000071FC 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 41214                                  	;mov	ax,[si+12]	; 11/04/2024
 41215 000071FF 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 41216                                  
 41217                                  	;call	[ss:FixExePatch]
 41218 00007202 36FF16[1212]            	call	word [ss:FixExePatch] ; 28/12/2022
 41219                                  	
 41220                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41221                                  	;call	[ss:Rational386PatchPtr]
 41222                                  
 41223                                  er_setver:
 41224                                  	;;test	word [si+2],2		; Q: is this an overlay
 41225                                  	; 17/12/2022
 41226 00007207 F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 41227                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 41228 0000720B 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 41229                                  					; N: set up lie version first
 41230 0000720D 1E                      	push	ds
 41231 0000720E 56                      	push	si
 41232                                  	;lds	si,[si+4]
 41233 0000720F C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 41234 00007212 E8CBED                  	call	Scan_Execname1
 41235 00007215 E8DCED                  	call	Scan_Special_Entries
 41236 00007218 5E                      	pop	si
 41237 00007219 1F                      	pop	ds
 41238                                  	;mov	es,[si+8]
 41239 0000721A 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 41240 0000721D 36A1[BD0E]              	mov	ax,[ss:SPECIAL_VERSION]
 41241 00007221 26A34000                	mov	[es:PDB.Version],ax
 41242                                  
 41243                                  er_chkdoshi:
 41244 00007225 36803E[1112]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 41245 0000722B 741F                    	je	short er_done		; M032: N: done
 41246                                  
 41247                                  					; M068 - Start
 41248                                  	;mov	ax,[si+8]
 41249 0000722D 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 41250                                  
 41251                                  	;or	byte [ss:DOS_FLAG],4
 41252 00007230 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 41253                                  					; ah = 25 & ah= 49. See dossym.inc 
 41254                                  					; under TAG M003 & M009 for 
 41255                                  					; explanation
 41256                                  	;;test	word [si+2],1
 41257                                  	; 17/12/2022
 41258 00007236 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 41259                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 41260 0000723A 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 41261                                  					;    a20off_psp and ret
 41262 0000723C 1E                         	push	ds
 41263 0000723D 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 41264 0000723F E87E02                  	call	IsCopyProt		; check if copy protected
 41265 00007242 1F                      	pop	ds
 41266                                  
 41267                                  er_setA20:
 41268                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 41269                                  	; is non-zero at this point it indicates that the A20 is to be 
 41270                                  	; turned off for that many int 21 calls made by the app. In 
 41271                                  	; addition the A20 has to be turned off when we exit from this 
 41272                                  	; call. Hence the inc.
 41273                                  
 41274 00007243 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 41275 00007248 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 41276                                  					; turned OFF.
 41277                                  er_done:				; M068 - End
 41278 0000724C 31C0                    	xor	ax,ax
 41279 0000724E C3                      	retn
 41280                                  
 41281                                  ; M028 - END
 41282                                  
 41283                                  ; 23/03/2024
 41284                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41285                                  %if 0
 41286                                  
 41287                                  ;----------------------------------------------------------------------------
 41288                                  ;
 41289                                  ; procedure : Rational386Patch
 41290                                  ;
 41291                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 41292                                  ; 386 registers (usually just the high word of 32 bit registers) during
 41293                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 41294                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 41295                                  ;
 41296                                  ; This routine applies patches to the Rational DOS Extender to work around
 41297                                  ; most of the register trashing bugs.
 41298                                  ;
 41299                                  ; Note that there are additional register trashing bugs not fixed by these
 41300                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 41301                                  ; may be modified on interrupts.
 41302                                  ;
 41303                                  ; There are two different Rational DOS Extender patchs in this module.
 41304                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 41305                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 41306                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 41307                                  ; or not.
 41308                                  ;
 41309                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 41310                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 41311                                  ; running in the HMA.
 41312                                  ;
 41313                                  ; This patch detection and replacement is based on an example supplied by
 41314                                  ; Ben Williams at Rational.
 41315                                  ;
 41316                                  ;----------------------------------------------------------------------------
 41317                                  
 41318                                  ; 22/05/2019 - Retro DOS v4.0
 41319                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 41320                                  
 41321                                  ;----------------------------------------------------------------------------
 41322                                  ;
 41323                                  ; INPUT : ES = segment where program got loaded
 41324                                  ;
 41325                                  ;----------------------------------------------------------------------------
 41326                                  
 41327                                  rpFind1:
 41328                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 41329                                  
 41330                                  rpFind1Len equ	$ - rpFind1
 41331                                  
 41332                                  ;	cli
 41333                                  ;	in	al, 21h
 41334                                  ;	pusha
 41335                                  ;	xor	ax, ax
 41336                                  ;	out	43h, al
 41337                                  ;	mov	dx, ...
 41338                                  
 41339                                  rpFind1a:
 41340                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 41341                                  
 41342                                  rpFind1aLen equ	$ - rpFind1a
 41343                                  
 41344                                  ;	mov	al, 0Eh
 41345                                  ;	out	37h, al
 41346                                  ;	xor	ax, ax
 41347                                  ;	out	0F2h, al
 41348                                  
 41349                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 41350                                  
 41351                                  rpFind2:
 41352                                  	db	0Fh, 20h, 0C0h
 41353                                  
 41354                                  rpFind2Len equ	$ - rpFind2
 41355                                  
 41356                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 41357                                  
 41358                                  rpFind3:
 41359                                  	db	0Fh, 22h, 0C0h, 0EAh
 41360                                  
 41361                                  rpFind3Len equ	$ - rpFind3
 41362                                  
 41363                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 41364                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 41365                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 41366                                  
 41367                                  ; note, there is no rpRepl1 string
 41368                                  
 41369                                  rpRepl2:
 41370                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 41371                                  
 41372                                  rpRepl2Len equ	$ - rpRepl2
 41373                                  
 41374                                  ;	push	eax
 41375                                  ;	push	cx
 41376                                  ;	mov	eax, cr0
 41377                                  
 41378                                  rpRepl3:
 41379                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 41380                                  
 41381                                  rpRepl3Len equ	$ - rpRepl3
 41382                                  
 41383                                  ;	mov	ss, bx
 41384                                  ;	pop	cx
 41385                                  ;	pop	eax
 41386                                  
 41387                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 41388                                  
 41389                                  rpFind4:
 41390                                  	db	93h, 58h, 8Bh, 0CCh
 41391                                  
 41392                                  rpFind4Len equ	$ - rpFind4
 41393                                  
 41394                                  ;	xchg	bx, ax
 41395                                  ;	pop	ax
 41396                                  ;	mov	cx, sp
 41397                                  
 41398                                  rpFind5:
 41399                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 41400                                  
 41401                                  rpFind5Len equ	$ - rpFind5
 41402                                  
 41403                                  ;	mov	ax, DE0Ch
 41404                                  ;	int	67h
 41405                                  ;	mov	sp, cx
 41406                                  ;	jmp	bx
 41407                                  
 41408                                  rpRepl4:
 41409                                  	db	93h, 58h, 8Bh, 0CCh
 41410                                  	db	02Eh, 066h, 0A3h
 41411                                  
 41412                                  rpRepl4o1Len equ $ - rpRepl4
 41413                                  
 41414                                  	db	00h, 00h
 41415                                  	db	02Eh, 066h, 89h, 36h
 41416                                  
 41417                                  rpRepl4o2Len equ $ - rpRepl4
 41418                                  
 41419                                  	db	00h, 00h
 41420                                  
 41421                                  rpRepl4Len equ	$ - rpRepl4
 41422                                  
 41423                                  ;	xchg	bx, ax
 41424                                  ;	pop	ax
 41425                                  ;	mov	cx, sp
 41426                                  ;	mov	dword ptr cs:[xxxx], eax
 41427                                  ;	mov	dword ptr cs:[xxxx], esi
 41428                                  
 41429                                  rpRepl5:
 41430                                  	db	8Bh, 0E1h
 41431                                  	db	2Eh, 66h, 0A1h
 41432                                  
 41433                                  rpRepl5o1Len equ $ - rpRepl5
 41434                                  
 41435                                  	db	00h, 00h
 41436                                  	db	2Eh, 66h, 8Bh, 36h
 41437                                  
 41438                                  rpRepl5o2Len equ $ - rpRepl5
 41439                                  
 41440                                  	db	00h, 00h
 41441                                  	db	0FFh, 0E3h
 41442                                  
 41443                                  rpRepl5Len equ	$ - rpRepl5
 41444                                  
 41445                                  ;	mov	sp, cx
 41446                                  ;	mov	eax, dword ptr cs:[xxxx]
 41447                                  ;	mov	esi, dword ptr cs:[xxxx]
 41448                                  ;	jmp	bx
 41449                                  
 41450                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 41451                                  
 41452                                  rpFind6:
 41453                                  	db	0FAh, 52h, 51h
 41454                                  
 41455                                  rpFind6Len equ	$ - rpFind6
 41456                                  
 41457                                  ;	cli
 41458                                  ;	push	dx
 41459                                  ;	push	cx
 41460                                  
 41461                                  rpFind7a:
 41462                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 41463                                  
 41464                                  rpFind7aLen equ	$ - rpFind7a
 41465                                  
 41466                                  ;	mov	ax, 0DE0Ch
 41467                                  ;	call	fword ptr es:[xxxx]
 41468                                  
 41469                                  rpFind7b:
 41470                                  	db	59h, 5Ah, 5Bh
 41471                                  
 41472                                  rpFind7bLen equ	$ - rpFind7b
 41473                                  
 41474                                  ;	pop	cx
 41475                                  ;	pop	dx
 41476                                  ;	pop	bx
 41477                                  
 41478                                  rpRepl6:
 41479                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 41480                                  
 41481                                  rpRepl6Len equ	$ - rpRepl6
 41482                                  
 41483                                  ;	cli
 41484                                  ;	push	eax
 41485                                  ;	push	ebx
 41486                                  ;	push	ecx
 41487                                  ;	push	edx
 41488                                  
 41489                                  rpRepl7:
 41490                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 41491                                  
 41492                                  rpRepl7Len equ	$ - rpRepl7
 41493                                  
 41494                                  ;	pop	edx
 41495                                  ;	pop	ecx
 41496                                  ;	pop	ebx
 41497                                  ;	pop	eax
 41498                                  ;	pop	bx
 41499                                  
 41500                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 41501                                  
 41502                                  rpFind8:
 41503                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 41504                                  
 41505                                  rpFind8Len equ	$ - rpFind8
 41506                                  
 41507                                  ;	pusha
 41508                                  ;	push	es
 41509                                  ;	push	ds
 41510                                  ;	mov	ax, dgroup	;jump back to here from replace8
 41511                                  ;	mov	ds, ax
 41512                                  
 41513                                  rpFind9 :
 41514                                  	db	1Fh, 07h, 61h
 41515                                  
 41516                                  rpFind9Len equ	$ - rpFind9
 41517                                  
 41518                                  ;	pop	ds
 41519                                  ;	pop	es
 41520                                  ;	popa
 41521                                  
 41522                                  rpRepl8:
 41523                                   	db	66h, 60h, 06h, 1Eh
 41524                                  
 41525                                  rpRepl8Len equ	$ - rpRepl8
 41526                                  
 41527                                  ;	pushad
 41528                                  ;	push	es
 41529                                  ;	push	ds
 41530                                  
 41531                                  rpRepl9:
 41532                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 41533                                  
 41534                                  rpRepl9Len equ	$ - rpRepl9
 41535                                  
 41536                                  ;	pop	ds
 41537                                  ;	pop	es
 41538                                  ;	popad
 41539                                  ;	retn			;no need to jmp back to main-line
 41540                                  
 41541                                  ;----------------------------------------------------------------------------
 41542                                  
 41543                                  struc SearchPair
 41544                                   .sp_off1: resw 1	; offset of 1st search string
 41545                                   .sp_len1: resw 1	; length of 1st search string
 41546                                   .sp_off2: resw 1	; 2nd string
 41547                                   .sp_len2: resw 1	; 2nd string
 41548                                   .sp_diff: resw 1	; max difference between offsets
 41549                                   .size:
 41550                                  endstruc
 41551                                  
 41552                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 41553                                  
 41554                                  rpBug1Strs:
 41555                                  	dw	rpFind2
 41556                                  	dw	rpFind2Len ; 3
 41557                                  	dw	rpFind3
 41558                                  	dw	rpFind3Len ; 4
 41559                                  	dw	20h
 41560                                  
 41561                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 41562                                  
 41563                                  rpBug2Strs:
 41564                                  	dw	rpFind4
 41565                                  	dw	rpFind4Len ; 4
 41566                                  	dw	rpFind5
 41567                                  	dw	rpFind5Len ; 9
 41568                                  	dw	80h
 41569                                  
 41570                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 41571                                  
 41572                                  rpBug3Strs:
 41573                                  	dw	rpFind6
 41574                                  	dw	rpFind6Len ; 3
 41575                                  	dw	rpFind7a
 41576                                  	dw	rpFind7aLen ; 7
 41577                                  	dw	80h
 41578                                  
 41579                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 41580                                  
 41581                                  rpBug4Strs:
 41582                                  	dw	rpFind8
 41583                                  	dw	4
 41584                                  	dw	rpFind9
 41585                                  	dw	rpFind9Len ; 3
 41586                                  	dw	80h
 41587                                  
 41588                                  ;----------------------------------------------------------------------------
 41589                                  
 41590                                  struc StackVars
 41591                                   .sv_wVersion:	resw 1		; Rational extender version #
 41592                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 41593                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 41594                                   .size:
 41595                                  endstruc
 41596                                  
 41597                                  ;----------------------------------------------------------------------------
 41598                                  
 41599                                  ; 22/05/2019 - Retro DOS v4.0
 41600                                  
 41601                                  Rational386Patch:
 41602                                  	; Do a few quick checks to see if this looks like a Rational
 41603                                  	; Extended application. Hopefully this will quickly weed out
 41604                                  	; most non Rational apps.
 41605                                  
 41606                                  	cmp	word [es:0],395		; version number goes here - versions
 41607                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 41608                                  
 41609                                  	cmp	word [es:0Ch],20h	; always has this value here
 41610                                  	jne	short rp3QuickOut
 41611                                  
 41612                                  	push	ax
 41613                                  
 41614                                  	mov	ax,18h 			; extender has 18h at
 41615                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 41616                                  	jne	short rp3QO_ax
 41617                                  	cmp	[es:28],ax
 41618                                  	jne	short rp3QO_ax
 41619                                  	cmp	[es:36],ax
 41620                                  	je	short rp3Maybe
 41621                                  rp3QO_ax:
 41622                                  	pop	ax
 41623                                  rp3QuickOut:
 41624                                  	retn
 41625                                  
 41626                                  ; It might be the rational extender, do more extensive checking
 41627                                  
 41628                                  rp3Maybe:
 41629                                  	cld
 41630                                  	push	bx			; note ax pushed above
 41631                                  	push	cx
 41632                                  	push	dx
 41633                                  	push	si
 41634                                  	push	di
 41635                                  	push	es
 41636                                  	push	ds			; we use all of them
 41637                                  	push	bp
 41638                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 41639                                  	mov	bp,sp
 41640                                  
 41641                                  	push	cs
 41642                                  	pop	ds
 41643                                  
 41644                                  	mov	ax,[es:0]		; save version #
 41645                                  	;mov	[bp+StackVars.sv_wVersion],ax
 41646                                  	mov	[bp],ax	
 41647                                  					; check that binary version # matches
 41648                                  	call	VerifyVersion		;   ascii string
 41649                                  	jne	short rp3Exit_j
 41650                                  
 41651                                  ; Looks like this is it, find where to put the patch code.  The
 41652                                  ; patch will be located on top of Rational code specific to 80286
 41653                                  ; processors, so these patchs MUST NOT be applied if running on
 41654                                  ; an 80286 system.
 41655                                  
 41656                                  	; Rational says the code to patch will never be beyond offset 46xxh
 41657                                  
 41658                                  	mov	cx,4500h		; force search len to 4700h (searches
 41659                                  	;mov	[bp+2],cx
 41660                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 41661                                  
 41662                                  	mov	es,[es:20h]		; es=code segment
 41663                                  
 41664                                  	mov	si,rpFind1		; string to find
 41665                                  	mov	dx,rpFind1Len ; 10	; length to match
 41666                                  	call	ScanCodeSeq		; look for code seq
 41667                                  	jz	short rpGotPatch
 41668                                  
 41669                                  ; According to Rational, some very old versions of the extender may not
 41670                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 41671                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 41672                                  
 41673                                  	mov	si,rpFind1a
 41674                                  	mov	dx,rpFind1aLen  ;8
 41675                                  	call	ScanCodeSeq
 41676                                  	jz	short rpGotPatch
 41677                                  
 41678                                  rp3Exit_j:
 41679                                  	jmp	rp3Exit
 41680                                  
 41681                                  ; Found the location to write patch code! DI = offset in code seg.
 41682                                  
 41683                                  rpGotPatch:
 41684                                  	;mov	[bp+4],di
 41685                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 41686                                  
 41687                                  ;----------------------------------------------------------------------------
 41688                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 41689                                  
 41690                                  	;cmp	word [bp+0],381
 41691                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 41692                                  	cmp	word [bp],381
 41693                                  	jae	short rpBug2			;   < 3.81
 41694                                  
 41695                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 41696                                  	call	FindBadCode
 41697                                  	jc	short rpBug2
 41698                                  
 41699                                  ; si = rpFind2 offset, di = rpFind3 offset
 41700                                  
 41701                                  	push	di
 41702                                  	mov	di,si				; rpFind2 offset
 41703                                  	mov	dx,rpFind2Len ; 3
 41704                                  
 41705                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 41706                                  	jne	short rp_no_cx
 41707                                  
 41708                                  	dec	di				;   yes, gobble up push cx too
 41709                                  	inc	dx
 41710                                  rp_no_cx:
 41711                                  	mov	si,rpRepl2			; patch out find2 sequence
 41712                                  	mov	cx,rpRepl2Len  ; 6
 41713                                  	call	GenPatch
 41714                                  
 41715                                  	pop	di				; rpFind3 offset
 41716                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 41717                                  	jne	short rp_no_cx2
 41718                                  
 41719                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 41720                                  rp_no_cx2:
 41721                                  	;mov	ax,[bp+4]
 41722                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 41723                                  	;mov	[es:di+4],ax
 41724                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 41725                                  
 41726                                  	push	di				; save find3 offset
 41727                                  	mov	si,rpRepl3			; copy repl3 to patch area
 41728                                  	mov	cx,rpRepl3Len ; 5
 41729                                  	call	CopyPatch
 41730                                  
 41731                                  	pop	bx				; find3 offset
 41732                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 41733                                  	call	GenJump 			; jmp back from patch area
 41734                                  	;mov	[bp+4],di
 41735                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 41736                                  						;   area pointer
 41737                                  
 41738                                  ;----------------------------------------------------------------------------
 41739                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 41740                                  
 41741                                  rpBug2:
 41742                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 41743                                  	call	FindBadCode
 41744                                  	jc	short rpBug3
 41745                                  
 41746                                  ; si = rpFind4 offset, di = rpFind5 offset
 41747                                  
 41748                                  	;push	word [bp+4]
 41749                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 41750                                  						;   (where repl4 goes)
 41751                                  	push	di				; save find5 offset
 41752                                  
 41753                                  	mov	di,si
 41754                                  	mov	dx,rpFind4Len ; 4
 41755                                  	mov	si,rpRepl4
 41756                                  	mov	cx,rpRepl4Len ; 15
 41757                                  	call	GenPatch			; patch out find4 code
 41758                                  
 41759                                  	pop	di				; find5 offset
 41760                                  	add	di,5				; keep 5 bytes of find5 code
 41761                                  	;mov	bx,[bp+4]
 41762                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 41763                                  	push	bx				; save repl5 location
 41764                                  	call	GenJump
 41765                                  
 41766                                  	mov	si,rpRepl5			; copy repl5 code to patch
 41767                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 41768                                  	call	CopyPatch			;   so no need to jmp back to
 41769                                  						;   main-line code
 41770                                  
 41771                                  ; patches have been made, now update the patch code to store/load dwords just
 41772                                  ; after the code in the patch area
 41773                                  
 41774                                  	pop	di				; repl5 location
 41775                                  	pop	si				; repl4 location
 41776                                  
 41777                                  	;mov	ax,[bp+4]
 41778                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 41779                                  
 41780                                  	;mov	[es:si+7],ax
 41781                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 41782                                  	;mov	[es:di+5],ax
 41783                                  	mov	[es:di+rpRepl5o1Len],ax
 41784                                  	add	ax,4
 41785                                  	;mov	[es:si+0Dh],ax
 41786                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 41787                                  	;mov	[es:di+0Bh],ax
 41788                                  	mov	[es:di+rpRepl5o2Len],ax
 41789                                  
 41790                                  	;add	word [bp+4],8
 41791                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 41792                                  						; patch area
 41793                                  
 41794                                  ;----------------------------------------------------------------------------
 41795                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 41796                                  
 41797                                  rpBug3:
 41798                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 41799                                  	call	FindBadCode
 41800                                  	jc	short rpBug4
 41801                                  
 41802                                  	;add	di,9
 41803                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 41804                                  	push	si				;   code and locate find7b
 41805                                  	mov	si,rpFind7b			;   sequence
 41806                                  	mov	dx,rpFind7bLen ; 3
 41807                                  	call	ScanCodeSeq_di
 41808                                  	pop	si
 41809                                  	jnz	short rpBug4
 41810                                  
 41811                                  	push	di				; save find7b code offset
 41812                                  
 41813                                  	mov	di,si
 41814                                  	mov	dx,rpFind6Len ; 3
 41815                                  	mov	si,rpRepl6
 41816                                  	mov	cx,rpRepl6Len ; 9
 41817                                  	call	GenPatch			; patch out find6 code
 41818                                  
 41819                                  	pop	di
 41820                                  	mov	dx,rpFind7bLen ; 3
 41821                                  	mov	si,rpRepl7
 41822                                  	mov	cx,rpRepl7Len ; 9
 41823                                  	call	GenPatch			; patch out find7b code
 41824                                  
 41825                                  ;----------------------------------------------------------------------------
 41826                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 41827                                  
 41828                                  rpBug4:
 41829                                  	;cmp	word [bp+0],360
 41830                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 41831                                  	cmp	word [bp],360
 41832                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 41833                                  
 41834                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 41835                                  	call	FindBadCode
 41836                                  	jc	short rp3Exit
 41837                                  
 41838                                  	push	di				; save find9 code offset
 41839                                  
 41840                                  	mov	di,si
 41841                                  	mov	dx,3
 41842                                  	mov	si,rpRepl8
 41843                                  	mov	cx,rpRepl8Len ; 4
 41844                                  	call	GenPatch			; patch out find8 code
 41845                                  
 41846                                  	pop	di				; find9 offset
 41847                                  	;mov	bx,[bp+4]
 41848                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 41849                                  	call	GenJump 			;   patch area
 41850                                  
 41851                                  	mov	si,rpRepl9			; copy replacement code to
 41852                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 41853                                  	call	CopyPatch			;   so no jmp back to main-line
 41854                                  
 41855                                  rp3Exit:
 41856                                  	add	sp,StackVars.size
 41857                                  	pop	bp
 41858                                  	pop	ds
 41859                                  	pop	es
 41860                                  	pop	di
 41861                                  	pop	si
 41862                                  	pop	dx
 41863                                  	pop	cx
 41864                                  	pop	bx
 41865                                  	pop	ax
 41866                                  	retn
 41867                                  
 41868                                  ;----------------------------------------------------------------------------
 41869                                  ;
 41870                                  ; FindBadCode
 41871                                  ;
 41872                                  ; Searches Rational code segment looking for a pair of find strings (all
 41873                                  ; patches have at least two find strings).
 41874                                  ;
 41875                                  ; Entry:
 41876                                  ;	ES    = code segment to search
 41877                                  ;	DS:BX = search pair structure for this search
 41878                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 41879                                  ;
 41880                                  ; Exit:
 41881                                  ;	CY flag clear if both strings found, and
 41882                                  ;	SI    = offset in ES of 1st string
 41883                                  ;	DI    = offset in ES of 2nd string
 41884                                  ;	CY set if either string not found, or strings too far apart
 41885                                  ;
 41886                                  ; Used:
 41887                                  ;	CX
 41888                                  ;
 41889                                  ;----------------------------------------------------------------------------
 41890                                  
 41891                                  ;struc SearchPair
 41892                                  ; .sp_off1: resw 1	; offset of 1st search string
 41893                                  ; .sp_len1: resw 1	; length of 1st search string
 41894                                  ; .sp_off2: resw 1	; 2nd string
 41895                                  ; .sp_len2: resw 1	; 2nd string
 41896                                  ; .sp_diff: resw 1	; max difference between offsets
 41897                                  ; .size:
 41898                                  ;endstruc
 41899                                  
 41900                                  FindBadCode:
 41901                                  	;mov	cx,[bp+2]
 41902                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 41903                                  
 41904                                  	mov	si,[bx]	; mov si,[bx+0]
 41905                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 41906                                  	
 41907                                  	;mov	dx,[bx+2]
 41908                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 41909                                  	call	ScanCodeSeq
 41910                                  	jnz	short fbc_error		; done if 1st not found
 41911                                  
 41912                                  	push	di			; save 1st string offset
 41913                                  
 41914                                  	;mov	si,[bx+4]
 41915                                  	mov	si,[bx+SearchPair.sp_off2]
 41916                                  	;mov	dx,[bx+6]
 41917                                  	mov	dx,[bx+SearchPair.sp_len2]
 41918                                  	call	ScanCodeSeq_di		; don't change flags after this!
 41919                                  
 41920                                  	pop	si			; restore 1st string offset
 41921                                  	jnz	short fbc_error
 41922                                  
 41923                                  	mov	ax,di			; sanity check that
 41924                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 41925                                  	jc	short fbc_error
 41926                                  	;cmp	ax,[bx+8]
 41927                                  	cmp	ax,[bx+SearchPair.sp_diff]
 41928                                  	ja	short fbc_error
 41929                                  
 41930                                  	clc
 41931                                  	retn
 41932                                  
 41933                                  fbc_error:
 41934                                  	stc
 41935                                  	retn
 41936                                  
 41937                                  ;----------------------------------------------------------------------------
 41938                                  ;
 41939                                  ; GenPatch
 41940                                  ;
 41941                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 41942                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 41943                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 41944                                  ; code.
 41945                                  ;
 41946                                  ; Entry:
 41947                                  ;	ES:DI = start of buggy code to be patched
 41948                                  ;	DX    = length of buggy code to be patched
 41949                                  ;	DS:SI = replacement patch code
 41950                                  ;	CX    = length of replacement patch code
 41951                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 41952                                  ;
 41953                                  ; Exit:
 41954                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 41955                                  ;
 41956                                  ; Used:
 41957                                  ;	AX, BX, SI, Flags
 41958                                  ;
 41959                                  ;----------------------------------------------------------------------------
 41960                                  
 41961                                  GenPatch:
 41962                                  	push	di			;save offset of buggy code
 41963                                  
 41964                                  	;mov	bx,[bp+4]
 41965                                  	mov	bx,[bp+StackVars.sv_pPatch]
 41966                                  					;jump from buggy code to patch area
 41967                                  	call	GenJump
 41968                                  
 41969                                  	call	CopyPatch		;copy replacement code to patch area
 41970                                  
 41971                                  	pop	bx			;offset of buggy code + buggy code
 41972                                  	add	bx,dx			;  length = return from patch offset
 41973                                  
 41974                                  	call	GenJump 		;jump from patch area back to main-
 41975                                  	;mov	[bp+4],di
 41976                                  	mov	[bp+StackVars.sv_pPatch],di
 41977                                  					;  line code, update patch pointer
 41978                                  	retn
 41979                                  
 41980                                  ;----------------------------------------------------------------------------
 41981                                  ;
 41982                                  ; CopyPatch
 41983                                  ;
 41984                                  ; Copies patch code to patch location.
 41985                                  ;
 41986                                  ; Entry:
 41987                                  ;	DS:SI = patch code to be copied
 41988                                  ;	ES    = segment of code to patch
 41989                                  ;	CX    = length of code to copy
 41990                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 41991                                  ;
 41992                                  ; Exit:
 41993                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 41994                                  ;
 41995                                  ; Used:
 41996                                  ;	SI, Flags
 41997                                  ;
 41998                                  ;----------------------------------------------------------------------------
 41999                                  
 42000                                  CopyPatch:
 42001                                  	push	cx
 42002                                  	;mov	di,[bp+4]
 42003                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 42004                                  	cld
 42005                                  	rep movsb
 42006                                  	pop	cx
 42007                                  	;mov	[bp+4],di
 42008                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 42009                                  	retn
 42010                                  
 42011                                  ;----------------------------------------------------------------------------
 42012                                  ;
 42013                                  ; GenJump
 42014                                  ;
 42015                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 42016                                  ;
 42017                                  ; Entry:
 42018                                  ;	ES:DI = from location (where to put jmp instruction)
 42019                                  ;	BX    = to location (where to jump to)
 42020                                  ;
 42021                                  ; Exit:
 42022                                  ;	DI = byte after generated jump
 42023                                  ;
 42024                                  ; Used:
 42025                                  ;	AX
 42026                                  ;
 42027                                  ;----------------------------------------------------------------------------
 42028                                  
 42029                                  GenJump:
 42030                                  	mov	al,0E9h		; jmp rel16 opcode
 42031                                  	stosb
 42032                                  
 42033                                  	mov	ax,bx		; calc offset to 'to' location
 42034                                  	sub	ax,di
 42035                                  	sub	ax,2
 42036                                  
 42037                                  	stosw			; output offset
 42038                                  
 42039                                  	retn
 42040                                  
 42041                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42042                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42043                                  
 42044                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 42045                                  
 42046                                  ;----------------------------------------------------------------------------
 42047                                  ;
 42048                                  ; ScanCodeSeq
 42049                                  ;
 42050                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 42051                                  ;
 42052                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 42053                                  ;
 42054                                  ;----------------------------------------------------------------------------
 42055                                  
 42056                                  ScanCodeSeq:
 42057                                  	mov	di,200h
 42058                                  ScanCodeSeq_di:
 42059                                  	push	cx
 42060                                  	sub	cx,dx
 42061                                  	inc	cx
 42062                                  scsagain:
 42063                                  	push	si
 42064                                  	push	di
 42065                                  	push	cx
 42066                                  	mov	cx,dx
 42067                                  	rep	cmpsb
 42068                                  	pop	cx
 42069                                  	pop	di
 42070                                  	pop	si
 42071                                  	je	short scsfound
 42072                                  	inc	di
 42073                                  	loop	scsagain
 42074                                  scsfound:
 42075                                  	pop	cx
 42076                                  vvexit:		; 18/12/2022
 42077                                  	retn
 42078                                  
 42079                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42080                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42081                                  
 42082                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 42083                                  	
 42084                                  ;----------------------------------------------------------------------------
 42085                                  ;
 42086                                  ; VerifyVersion
 42087                                  ;
 42088                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 42089                                  ; from ES:2A.
 42090                                  ;
 42091                                  ;       Entry: AX = binary version number 
 42092                                  ;       Exit : Z flag set if version numbers match
 42093                                  ;
 42094                                  ;----------------------------------------------------------------------------
 42095                                  
 42096                                  VerifyVersion:
 42097                                  	mov	si,[es:2Ah]		; offset of version number
 42098                                  					;  in ascii
 42099                                  	mov	bl,10
 42100                                  	add	si,3			; point to last digit
 42101                                  
 42102                                  	call	VVDigit
 42103                                  	jne	short vvexit
 42104                                  	call	VVDigit
 42105                                  	jne	short vvexit
 42106                                  	cmp	byte [es:si],'.'
 42107                                  	jne	short vvexit
 42108                                  	dec	si
 42109                                  	;call	VVDigit
 42110                                  	; 18/12/2022
 42111                                  	;jmp	short VVDigit
 42112                                  ;vvexit:
 42113                                  	;retn
 42114                                  VVDigit:
 42115                                  	div	bl
 42116                                  	add	ah,'0'
 42117                                  	dec	si
 42118                                  	cmp	[es:si+1],ah
 42119                                  	mov	ah,0			; do not xor or sub we need Z
 42120                                  	retn
 42121                                  
 42122                                  %endif
 42123                                  
 42124                                  ;-----------------------------------------------------------------------
 42125                                  
 42126                                  ; 23/05/2019 - Retro DOS v4.0
 42127                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 42128                                  
 42129                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42130                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 42131                                  
 42132                                  exepatch_start:	 ; label byte
 42133                                  
 42134                                  	; The following is the code that'll be layed over the buggy unpack
 42135                                  	; code.
 42136                                  str1:
 42137 0000724F 06                      	db  06h	  		;push	es
 42138 00007250 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 42139                                  
 42140                                  first_stop equ	$-str1
 42141                                  			
 42142 00007252 2BC2                    	db  2Bh, 0C2h		;sub	ax,dx
 42143                                  
 42144                                  first:  ; label	byte
 42145                                  
 42146 00007254 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 42147 00007256 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42148 00007258 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42149 0000725B 57                      	db  57h	    		;push	di
 42150 0000725C B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 42151 0000725F B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH
 42152 00007261 F3AE                    	db  0F3h,0AEh 		;repz	scasb
 42153 00007263 47                      	db  47h	    		;inc	di
 42154 00007264 8BF7                    	db  8Bh,0F7h  		;mov	si,di
 42155 00007266 5F                      	db  5Fh	    		;pop	di
 42156 00007267 58                      	db  58h	    		;pop	ax
 42157                                  
 42158                                  second_stop equ	$-first
 42159                                  
 42160 00007268 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx
 42161                                  
 42162                                  second: ; label	byte
 42163                                  
 42164 0000726A 8EC0                    	db  8Eh,0C0h  		;mov	es,ax
 42165                                  		    		;NextRec:
 42166 0000726C B90402                  	db  0B9h,04h,02h	;mov	cx,0204h
 42167                                  		    		;norm_agn:
 42168 0000726F 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42169 00007271 F7D0                    	db  0F7h,0D0h		;not	ax
 42170 00007273 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42171 00007275 7413                    	db  74h,13h		;jz	short SI_ok
 42172 00007277 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42173 00007279 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 42174 0000727C 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42175 0000727E 7308                    	db  73h,08h		;jnc	short SItoDS
 42176 00007280 F7DA                    	db  0F7h,0DAh		;neg	dx
 42177 00007282 D3E2                    	db  0D3h,0E2h		;shl	dx,cl
 42178 00007284 2BF2                    	db  2Bh,0F2h		;sub	si,dx
 42179 00007286 33D2                    	db  33h,0D2h		;xor	dx,dx
 42180                                  				;SItoDS:
 42181 00007288 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 42182                                  				;SI_ok:
 42183 0000728A 87F7                    	db  87h,0F7h		;xchg	si,di
 42184 0000728C 1E                      	db  1Eh			;push	ds
 42185 0000728D 06                      	db  06h			;push	es
 42186 0000728E 1F                      	db  1Fh			;pop	ds
 42187 0000728F 07                      	db  07h			;pop	es
 42188 00007290 FECD                    	db  0FEh,0CDh		;dec	ch
 42189 00007292 75DB                    	db  75h,0DBh		;jnz	short norm_agn
 42190 00007294 AC                      	db  0ACh		;lodsb
 42191 00007295 92                      	db  92h			;xchg	dx,ax
 42192 00007296 4E                      	db  4Eh			;dec	si
 42193 00007297 AD                      	db  0ADh		;lodsw
 42194 00007298 8BC8                    	db  8Bh,0C8h		;mov	cx,ax
 42195 0000729A 46                      	db  46h			;inc	si
 42196 0000729B 8AC2                    	db  8Ah,0C2h		;mov	al,dl
 42197 0000729D 24FE                    	db  24h,0FEh		;and	al,0FEH
 42198 0000729F 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 42199 000072A1 7505                    	db  75h,05h		;jne	short TryEnum
 42200 000072A3 AC                      	db  0ACh		;lodsb
 42201 000072A4 F3AA                    	db  0F3h,0AAh		;rep stosb
 42202                                  
 42203                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 42204 000072A6 EB06                    	db  0EBh,06h		;jmp	short TryNext
 42205                                  
 42206                                  				;TryEnum:
 42207 000072A8 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 42208 000072AA 756C                    	db  75h,6Ch		;jne	short CorruptExe
 42209 000072AC F3A4                    	db  0F3h,0A4h		;rep movsb
 42210                                  				;TryNext:
 42211                                  
 42212 000072AE 92                      	db  92h			;xchg	dx,ax
 42213                                  ;	db  8Ah,0C2h		;mov	al,dl
 42214                                  
 42215 000072AF A801                    	db  0A8h,01h		;test	al,1
 42216 000072B1 74B9                    	db  74h,0B9h		;jz	short NextRec
 42217 000072B3 9090                    	db  90h,90h		;nop,nop
 42218                                  	
 42219                                  last_stop equ $-second
 42220                                  size_str1 equ $-str1
 42221                                  
 42222                                  	; The following is the code that we need to look for in the exe
 42223                                  	; file.
 42224                                  
 42225                                  scan_patch1: ; label byte
 42226                                  
 42227 000072B5 8CC3                    	db  8Ch,0C3h		;mov	bx,es
 42228 000072B7 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 42229 000072B9 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 42230 000072BB 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 42231 000072BD 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42232 000072BF BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42233 000072C2 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 42234 000072C5 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 42235 000072C7 F3AE                    	db  0F3h,0AEh		;repz	scasb
 42236 000072C9 47                      	db  47h			;inc	di
 42237 000072CA 8BF7                    	db  8Bh,0F7h		;mov	si,di
 42238 000072CC 8BC3                    	db  8Bh,0C3h		;mov	ax,bx
 42239 000072CE 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 42240 000072D0 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42241 000072D2 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42242                                  				;NextRec:
 42243 000072D5 B104                    	db  0B1h,04h		;mov	cl,4
 42244 000072D7 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42245 000072D9 F7D0                    	db  0F7h,0D0h		;not	ax
 42246 000072DB D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42247 000072DD 7409                    	db  74h,09h		;jz	short SI_ok
 42248 000072DF 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42249 000072E1 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42250 000072E3 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 42251 000072E5 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 42252                                  	       			;SI_ok:
 42253 000072E8 8BC7                    	db  8Bh,0C7h		;mov	ax,di
 42254 000072EA F7D0                    	db  0F7h,0D0h		;not	ax
 42255 000072EC D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42256 000072EE 7409                    	db  74h,09h		;jz	short DI_ok
 42257 000072F0 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 42258 000072F2 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42259 000072F4 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 42260 000072F6 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 42261                                  				;DI_ok:
 42262                                  
 42263                                  size_scan_patch1 equ $-scan_patch1
 42264                                  
 42265                                  scan_patch2: ; label byte
 42266                                  			
 42267 000072F9 8CC3                    	db  8Ch,0C3h		;mov	bx,es
 42268 000072FB 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 42269 000072FD 48                      	db  48h			;dec	ax
 42270 000072FE 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 42271 00007300 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42272 00007302 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42273 00007305 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 42274 00007308 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 42275 0000730A F3AE                    	db  0F3h,0AEh		;repz	scasb
 42276 0000730C 47                      	db  47h			;inc	di
 42277 0000730D 8BF7                    	db  8Bh,0F7h		;mov	si,di
 42278 0000730F 8BC3                    	db  8Bh,0C3h		;mov	ax,bx
 42279 00007311 48                      	db  48h			;dec	ax
 42280 00007312 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42281 00007314 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42282                                  				;NextRec:
 42283 00007317 B104                    	db  0B1h,04h		;mov	cl,4
 42284 00007319 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42285 0000731B F7D0                    	db  0F7h,0D0h		;not	ax
 42286 0000731D D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42287 0000731F 740A                    	db  74h,0Ah		;jz	short SI_ok
 42288 00007321 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42289 00007323 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42290 00007325 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 42291 00007327 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 42292                                  				;or	si,0FFF0H
 42293                                  				;SI_ok:
 42294 0000732B 8BC7                    	db  8Bh,0C7h		;mov	ax,di
 42295 0000732D F7D0                    	db  0F7h,0D0h		;not	ax
 42296 0000732F D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42297 00007331 740A                    	db  74h,0Ah		;jz	short DI_ok
 42298 00007333 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 42299 00007335 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42300 00007337 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 42301 00007339 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 42302                                  				;or	di,0FFF0H
 42303                                  				;DI_ok:
 42304                                  
 42305                                  size_scan_patch2 equ $-scan_patch2
 42306                                  
 42307                                  scan_patch3: ; label byte
 42308                                  
 42309 0000733D 8CC3                    	db  8Ch,0C3h		;mov	bx,es
 42310 0000733F 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 42311 00007341 48                      	db  48h			;dec	ax
 42312 00007342 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 42313 00007344 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42314 00007346 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42315 00007349 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 42316 0000734C B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 42317 0000734E F3AE                    	db  0F3h,0AEh		;repz	scasb
 42318 00007350 47                      	db  47h			;inc	di
 42319 00007351 8BF7                    	db  8Bh,0F7h		;mov	si,di
 42320 00007353 8BC3                    	db  8Bh,0C3h		;mov	ax,bx
 42321 00007355 48                      	db  48h			;dec	ax
 42322 00007356 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42323 00007358 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42324                                  				;NextRec:
 42325 0000735B B104                    	db  0B1h,04h		;mov	cl,4
 42326 0000735D 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42327 0000735F F7D0                    	db  0F7h,0D0h		;not	ax
 42328 00007361 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42329 00007363 7409                    	db  74h,09h		;jz	short SI_ok
 42330 00007365 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42331 00007367 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42332 00007369 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 42333 0000736B 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 42334                                  				;SI_ok:
 42335 0000736E 8BC7                    	db  8Bh,0C7h		;mov	ax,di
 42336 00007370 F7D0                    	db  0F7h,0D0h		;not	ax
 42337 00007372 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42338 00007374 7409                    	db  74h,09h		;jz	short DI_ok
 42339 00007376 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 42340 00007378 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42341 0000737A 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 42342 0000737C 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 42343                                  				;DI_ok:
 42344                                  
 42345                                  size_scan_patch3 equ $-scan_patch3
 42346                                  
 42347                                  scan_com: ; label byte
 42348                                  
 42349 0000737F AC                      	db  0ACh		;lodsb
 42350 00007380 8AD0                    	db  8Ah,0D0h		;mov	dl,al
 42351 00007382 4E                      	db  4Eh			;dec	si
 42352 00007383 AD                      	db  0ADh		;lodsw
 42353 00007384 8BC8                    	db  8Bh,0C8h		;mov	cx,ax
 42354 00007386 46                      	db  46h			;inc	si
 42355 00007387 8AC2                    	db  8Ah,0C2h		;mov	al,dl
 42356 00007389 24FE                    	db  24h,0FEh		;and	al,0FEH
 42357 0000738B 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 42358 0000738D 7506                    	db  75h,06h		;jne	short TryEnum
 42359 0000738F AC                      	db  0ACh		;lodsb
 42360 00007390 F3AA                    	db  0F3h,0AAh		;rep stosb
 42361 00007392 EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 42362                                  				;TryEnum:
 42363 00007395 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 42364 00007397 756B                    	db  75h,6Bh		;jne	short CorruptExe
 42365 00007399 F3A4                    	db  0F3h,0A4h		;rep movsb
 42366                                  				;TryNext:
 42367 0000739B 8AC2                    	db  8Ah,0C2h		;mov	al,dl
 42368 0000739D A801                    	db  0A8h,01h		;test	al,1
 42369                                  ;	db  74h,0BAh		;jz	short NextRec
 42370                                  
 42371                                  size_scan_com	equ	$-scan_com
 42372                                  
 42373                                  ;-----------------------------------------------------------------------
 42374                                  
 42375                                  ; 23/05/2019 - Retro DOS v4.0
 42376                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 42377                                  
 42378                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42379                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 42380                                  
 42381                                  ExePatch:
 42382                                  	; 28/12/2022 - Retro DOS v4.1
 42383                                  	;call	ExePackPatch
 42384                                  	;;call	word [ss:RationalPatchPtr]
 42385                                  	;retn
 42386                                  	; 28/12/2022
 42387                                  	;jmp	short ExePackPatch
 42388                                  
 42389                                  ;-----------------------------------------------------------------------
 42390                                  ;
 42391                                  ; Procedure Name 	: ExePackPatch
 42392                                  ;
 42393                                  ; Inputs	 	: DS 			-> DOSDATA
 42394                                  ;			  ES:0 			-> read in image
 42395                                  ;			  ax:cx = start cs:ip of program
 42396                                  ; Output		:		
 42397                                  ;
 42398                                  ;	1. If ES <= 0fffh
 42399                                  ;	   2. if exepack signature ('RB') found
 42400                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 42401                                  ;	       	 4. if rest of the code & checksum compares
 42402                                  ;	  	    5. overlay buggy code with code in 
 42403                                  ;		       doscode:str1.
 42404                                  ;		 6. endif
 42405                                  ;	      7. endif
 42406                                  ;	   8. endif
 42407                                  ;	9. endif
 42408                                  ;
 42409                                  ;
 42410                                  ; Uses			: NONE
 42411                                  ;
 42412                                  ;-----------------------------------------------------------------------
 42413                                  
 42414                                  	; 21/03/2024 - Retro DOS v4.1
 42415                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42416                                  	; 23/05/2019 - Retro DOS v4.0	
 42417                                  ExePackPatch:
 42418 0000739F 53                      	push	bx
 42419 000073A0 8CC3                    	mov	bx,es			; bx has load segment
 42420 000073A2 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 42421 000073A6 7602                    	jbe	short ep_cont		; N: 
 42422 000073A8 5B                      	pop	bx			; Y: no need to patch
 42423 000073A9 C3                      	retn
 42424                                  ep_cont:
 42425 000073AA 1E                      	push	ds
 42426 000073AB 06                      	push	es
 42427 000073AC 50                      	push	ax
 42428 000073AD 51                      	push	cx
 42429 000073AE 56                      	push	si
 42430 000073AF 57                      	push	di
 42431                                  	
 42432                                  		; M033 - start
 42433                                  		; exepacked programs have an IP of 12h (>=2)
 42434                                  
 42435 000073B0 83E902                  	sub	cx,2			; Q: is IP >=2
 42436 000073B3 7303                    	jnb	short epp_1		; N: exit
 42437 000073B5 E9B500                  	jmp	ep_notpacked
 42438                                  					; ax:cx now points to location of
 42439                                  					; 'RB' if this is an exepacked file.
 42440                                  		; M033 - end
 42441                                  epp_1:
 42442 000073B8 89CF                    	mov	di,cx
 42443 000073BA 8EC0                    	mov	es,ax
 42444 000073BC 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in
 42445                                  					; unpack_offset
 42446                                  
 42447 000073C1 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 42448                                  	;ljne	ep_notpacked
 42449 000073C6 7403                    	je	short epp_2
 42450 000073C8 E9A200                  	jmp	ep_notpacked
 42451                                  epp_2:
 42452 000073CB 0E                      	push	cs
 42453 000073CC 1F                      	pop	ds			; set ds to cs
 42454                                  
 42455                                  	;add	di,6Ch
 42456 000073CD 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed
 42457                                  					;          file where we hope to find
 42458                                  					;	   scan string. 
 42459                                  
 42460 000073D0 E8A200                  	call	chk_common_str		; check for match
 42461                                  
 42462 000073D3 7521                    	jnz	short ep_chkpatch2	; Q: does the patch match
 42463                                  					; N: check at patch2_offset
 42464                                  					; Y: check for rest of patch string
 42465 000073D5 BE[B572]                	mov	si,scan_patch1
 42466                                  					; ds:si -> scan string 
 42467 000073D8 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 42468                                  
 42469                                  	;add	di,28h
 42470                                  	; 07/12/2022
 42471 000073DD 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed
 42472                                  					;          file where we hope to find
 42473                                  					;	   scan string. 
 42474                                  	;;mov	cx,68
 42475                                  	;mov	cx,size_scan_patch1
 42476                                  	; 21/03/2024
 42477 000073E0 B144                    	mov	cl,size_scan_patch1 ; 68
 42478                                  
 42479                                  	;mov	bx,142
 42480 000073E2 BB8E00                  	mov	bx,CHKSUM1_LEN
 42481                                  	;mov	ax,0EF4Eh
 42482 000073E5 B84EEF                  	mov	ax,PATCH1_CHKSUM
 42483 000073E8 E89E00                  	call	chk_patchsum		; check if patch and chk sum compare
 42484 000073EB 7207                    	jc	short ep_done1		; Q: did we pass the test
 42485                                  					; N: exit
 42486                                  					; Y: overlay code with new 
 42487 000073ED BE[4F72]                	mov	si,str1
 42488                                  	;;mov	cx,102
 42489                                  	;mov	cx,size_str1
 42490                                  	; 21/03/2024
 42491 000073F0 B166                    	mov	cl,size_str1 ; 102
 42492                                  
 42493 000073F2 F3A4                    	rep	movsb
 42494                                  ep_done1:
 42495 000073F4 EB77                    	jmp	short ep_done ; 21/03/2024
 42496                                  
 42497                                  ep_chkpatch2:
 42498                                  	;mov	di,76h
 42499 000073F6 BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 42500                                  					; in another version of unpack
 42501 000073F9 E87900                  	call	chk_common_str		; check for match
 42502                                  
 42503 000073FC 753D                    	jnz	short ep_chkpatch3	; Q: does the patch match
 42504                                  					; N: check for patch3_offset
 42505                                  					; Y: check for rest of patch string
 42506                                  
 42507 000073FE BE[F972]                	mov	si,scan_patch2
 42508                                  					; ds:si -> scan string
 42509                                  	;mov	di,32h
 42510 00007401 BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed
 42511                                  					;          file where we hope to find
 42512                                  	;;mov	cx,68			;	   scan string.
 42513                                  	;mov	cx,size_scan_patch2
 42514                                  	; 21/03/2024
 42515 00007404 B144                    	mov	cl,size_scan_patch2 ; 68
 42516                                  	;mov	bx,140
 42517 00007406 BB8C00                  	mov	bx,CHKSUM2_LEN
 42518                                  	;mov	ax,78B2h
 42519 00007409 B8B278                  	mov	ax,PATCH2_CHKSUM
 42520 0000740C E87A00                  	call	chk_patchsum		; check if patch and chk sum compare
 42521                                  
 42522                                  					; M046 - Start
 42523                                  					; Q: did we pass the test
 42524 0000740F 7310                    	jnc	short ep_patchcode2	; Y: overlay code with new
 42525                                  					; N: try with a different chksum
 42526                                  
 42527 00007411 BE[F972]                	mov	si,scan_patch2
 42528                                  					; ds:si -> scan string
 42529                                  	;;mov	cx,68
 42530                                  	;mov	cx,size_scan_patch2
 42531                                  	; 21/03/2024
 42532 00007414 B144                    	mov	cl,size_scan_patch2 ; 68
 42533                                  	;mov	bx,129
 42534 00007416 BB8100                  	mov	bx,CHKSUM2A_LEN
 42535                                  	;mov	ax,1C47h
 42536 00007419 B8471C                  	mov	ax,PATCH2A_CHKSUM
 42537 0000741C E86A00                  	call	chk_patchsum		; check if patch and chk sum compare
 42538                                  					; Q: did we pass the test
 42539 0000741F 724C                    	jc	short ep_notpacked	; N: try with a different chksum
 42540                                  					; Y: overlay code with new
 42541                                  						
 42542                                  ep_patchcode2:			       	; M046 - End
 42543 00007421 BE[4F72]                	mov	si,str1
 42544                                  	;;mov	cx,3
 42545                                  	;mov	cx,first_stop
 42546                                  	; 21/03/2024
 42547 00007424 B103                    	mov	cl,first_stop ; 3
 42548 00007426 F3A4                    	rep	movsb
 42549 00007428 B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 42550 0000742B AB                      	stosw
 42551                                  	;add	si,2
 42552                                  	; 21/03/2024
 42553 0000742C 46                      	inc	si
 42554 0000742D 46                      	inc	si	
 42555                                  	;;mov	cx,20
 42556                                  	;mov	cx,second_stop
 42557                                  	; 21/03/2024
 42558 0000742E B114                    	mov	cl,second_stop ; 20
 42559 00007430 F3A4                    	rep	movsb
 42560 00007432 AB                      	stosw				; put in dec ax and nop
 42561                                  	;add	si,2
 42562                                  	; 21/03/2024
 42563 00007433 46                      	inc	si
 42564 00007434 46                      	inc	si
 42565                                  	;;mov	cx,75
 42566                                  	;mov	cx,last_stop
 42567                                  	; 21/03/2024
 42568 00007435 B14B                    	mov	cl,last_stop ; 75
 42569 00007437 F3A4                    	rep	movsb
 42570 00007439 EB32                    	jmp	short ep_done
 42571                                  
 42572                                  ep_chkpatch3:
 42573                                  	;mov	di,74h
 42574 0000743B BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 42575                                  					; in another version of unpack
 42576 0000743E E83400                  	call	chk_common_str		; check for match
 42577                                  
 42578 00007441 752A                    	jnz	short ep_notpacked	; Q: does the patch match
 42579                                  					; N: exit
 42580                                  					; Y: check for rest of patch string
 42581 00007443 BE[3D73]                	mov	si,scan_patch3
 42582                                  					; ds:si -> scan string
 42583                                  	;mov	di,32h
 42584 00007446 BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed
 42585                                  					;          file where we hope to find
 42586                                  					;	   scan string. 
 42587                                  	;;mov	cx,66
 42588                                  	;mov	cx,size_scan_patch3
 42589                                  	; 21/03/2024
 42590 00007449 B142                    	mov	cl,size_scan_patch3 ; 66
 42591                                  	;mov	bx,139
 42592 0000744B BB8B00                  	mov	bx,CHKSUM3_LEN
 42593                                  	;mov	ax,4EDEh
 42594 0000744E B8DE4E                  	mov	ax,PATCH3_CHKSUM
 42595 00007451 E83500                  	call	chk_patchsum		; check if patch and chk sum compare
 42596 00007454 7217                    	jc	short ep_notpacked	; Q: did we pass the test
 42597                                  					; N: exit
 42598                                  					; Y: overlay code with new
 42599 00007456 BE[4F72]                	mov	si,str1
 42600                                  	;;mov	cx,3
 42601                                  	;mov	cx,first_stop
 42602                                  	; 21/03/2024
 42603 00007459 B103                    	mov	cl,first_stop ; 3
 42604 0000745B F3A4                    	rep	movsb
 42605 0000745D B048                    	mov	al,48h			; al = opcode for dec ax
 42606 0000745F AA                      	stosb
 42607                                  	;add	si,2
 42608                                  	; 21/03/2024
 42609 00007460 46                      	inc	si
 42610 00007461 46                      	inc	si
 42611                                  	;;mov	cx,20
 42612                                  	;mov	cx,second_stop
 42613                                  	; 21/03/2024
 42614 00007462 B114                    	mov	cl,second_stop ; 20
 42615 00007464 F3A4                    	rep	movsb
 42616 00007466 AA                      	stosb				; put in dec ax
 42617                                  	;add	si,2
 42618                                  	; 21/03/2024
 42619 00007467 46                      	inc	si
 42620 00007468 46                      	inc	si
 42621                                  	;;mov	cx,75
 42622                                  	;mov	cx,last_stop
 42623                                  	; 21/03/2024
 42624 00007469 B14B                    	mov	cl,last_stop ; 75
 42625 0000746B F3A4                    	rep	movsb
 42626                                  
 42627                                  ep_notpacked:
 42628                                  	;stc
 42629                                  ep_done:
 42630 0000746D 5F                      	pop	di
 42631 0000746E 5E                      	pop	si
 42632 0000746F 59                      	pop	cx
 42633 00007470 58                      	pop	ax
 42634 00007471 07                      	pop	es
 42635 00007472 1F                      	pop	ds
 42636 00007473 5B                      	pop	bx
 42637 00007474 C3                      	retn
 42638                                  
 42639                                  ;-------------------------------------------------------------------------
 42640                                  ;
 42641                                  ; 	Procedure Name	: chk_common_str
 42642                                  ;
 42643                                  ;	Input		: DS = DOSCODE
 42644                                  ;			; ES:DI points to string in packed file
 42645                                  ;
 42646                                  ;	Output		; Z if match else NZ
 42647                                  ;
 42648                                  ;-------------------------------------------------------------------------
 42649                                  
 42650                                  	; 23/05/2019 - Retro DOS v4.0
 42651                                  chk_common_str:
 42652 00007475 BE[7F73]                	mov	si,scan_com
 42653                                  					; ds:si -> scan string
 42654                                  	;mov	cx,32
 42655 00007478 B92000                  	mov	cx,size_scan_com
 42656                                  
 42657 0000747B F3A6                    	repe	cmpsb
 42658                                  
 42659                                  					; M046 - start
 42660                                  	; a fourth possible version of these exepacked programs have a
 42661                                  	; 056h instead of 06Bh. See scan_com above
 42662                                  	;
 42663                                  	; 	db  75h, 6Bh		;jne CorruptExe
 42664                                  	;
 42665                                  	; If the mismatch at this point is due to a 56h instead of 6Bh
 42666                                  	; we shall try to match the rest of the string
 42667                                  	;
 42668                                  
 42669 0000747D 7409                    	jz	short ccs_done
 42670 0000747F 26807DFF56              	cmp	byte [es:di-1],56h
 42671 00007484 7502                    	jnz	short ccs_done
 42672                                  
 42673 00007486 F3A6                    	repe	cmpsb
 42674                                  ccs_done:				; M046 - end
 42675 00007488 C3                      	retn
 42676                                  
 42677                                  ;-------------------------------------------------------------------------
 42678                                  ;
 42679                                  ;	Procedure Name	: chk_patchsum
 42680                                  ;
 42681                                  ;	Input		: DS:SI -> string we're looking for
 42682                                  ;			: ES:DI -> offset in packed file
 42683                                  ;			: CX 	= scan length
 42684                                  ;			: BX	= length of check sum
 42685                                  ;			: AX 	= value of check sum
 42686                                  ;
 42687                                  ;	Output		: if patch & check sum compare
 42688                                  ;				NC
 42689                                  ;			  else
 42690                                  ;				CY
 42691                                  ;
 42692                                  ;	Uses		: AX, BX, CX, SI
 42693                                  ;
 42694                                  ;-------------------------------------------------------------------------
 42695                                  
 42696                                  	; 23/05/2019 - Retro DOS v4.0
 42697                                  chk_patchsum:
 42698 00007489 57                      	push	di
 42699                                  
 42700 0000748A F3A6                    	repe	cmpsb
 42701                                  
 42702 0000748C 7518                    	jnz	short cp_fail		; Q: does the patch match
 42703                                  					; N: exit
 42704                                  					; Y:
 42705                                  
 42706                                  		; we do a check sum starting from the location of the
 42707                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 42708                                  		; unpacking code.
 42709                                  
 42710 0000748E 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 42711 00007493 89D9                    	mov	cx,bx			; cx = length of check sum
 42712                                  
 42713 00007495 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 42714 00007497 31C0                    	xor	ax,ax
 42715                                  ep_chksum:
 42716 00007499 260305                  	add	ax,[es:di]
 42717 0000749C 83C702                  	add	di,2
 42718 0000749F E2F8                    	loop	ep_chksum
 42719                                  
 42720 000074A1 5F                      	pop	di			; restore di
 42721                                  
 42722 000074A2 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 42723                                  	;jne	short cp_fail		; N: exit
 42724                                  					; Y:
 42725                                  	; 25/09/2023
 42726                                  	;clc	
 42727                                  	;retn
 42728 000074A4 74E2                    	je	short ccs_done ; cf=0
 42729                                  	
 42730                                  cp_fail:
 42731 000074A6 F9                      	stc
 42732 000074A7 C3                      	retn
 42733                                  
 42734                                  ; 28/12/2022 - Retro DOS v4.1
 42735                                  %if 0
 42736                                  ;--------------------------------------------------------------------------- 
 42737                                  
 42738                                  
 42739                                  ; M020 : BEGIN
 42740                                  ;
 42741                                  ;---------------------------------------------------------------------------
 42742                                  ;
 42743                                  ; procedure : RationalPatch
 42744                                  ;
 42745                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 42746                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 42747                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 42748                                  ;
 42749                                  ; THE BUG is in the following code sequence:
 42750                                  ;
 42751                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 42752                                  ;90		even				; word align
 42753                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 42754                                  ;e8 xx xx	call	set_A20			; enable A20
 42755                                  ;
 42756                                  ; This patch routine replaces the mov & the loop with a far call into a
 42757                                  ; routine in DOS data segment which is in low memory (because A20 line
 42758                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 42759                                  ; a mov & loop.
 42760                                  ;
 42761                                  ; Identification of Buggy Rational EXE
 42762                                  ; ====================================
 42763                                  ;
 42764                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 42765                                  ;
 42766                                  ; OFFSET				Contains
 42767                                  ; ------				--------
 42768                                  ; 0000h			100 times Version number in binary
 42769                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 42770                                  ;
 42771                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 42772                                  ;
 42773                                  ; 002ah			offset where version number is stored in ASCII
 42774                                  ;				e.g. '3.48A'
 42775                                  ;
 42776                                  ; 0030h			offset of copyright string. Copyright strings either
 42777                                  ;			start with "DOS/16M Copyright...." or
 42778                                  ;			"Copyright.....". The string contains
 42779                                  ;			"Rational Systems, Inc."
 42780                                  ;
 42781                                  ; 0020h			word : Paragraph offset of the buggy code segment
 42782                                  ;				from the program image
 42783                                  ; 0016h			word : size of buggy code segment
 42784                                  ;
 42785                                  ;	Buggy code is definite to start after offset 200h in its segment
 42786                                  ;
 42787                                  ;----------------------------------------------------------------------------
 42788                                  
 42789                                  ; 23/05/2019 - Retro DOS v4.0
 42790                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 42791                                  
 42792                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42793                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 42794                                  
 42795                                  RScanPattern1:
 42796                                  	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 42797                                  
 42798                                  RLen1 equ $ - RScanPattern1
 42799                                  
 42800                                  RScanPattern2:
 42801                                  	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 42802                                  
 42803                                  RLen2 equ $ - RScanPattern2
 42804                                  
 42805                                  RScanPattern3:
 42806                                  	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 42807                                  
 42808                                  RLen3 equ $ - RScanPattern2
 42809                                  
 42810                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 42811                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 42812                                  
 42813                                  ;----------------------------------------------------------------------------
 42814                                  ;
 42815                                  ; INPUT : ES = segment where program got loaded
 42816                                  ;
 42817                                  ;----------------------------------------------------------------------------
 42818                                  
 42819                                  RationalPatch:
 42820                                  	cld
 42821                                  
 42822                                  ; 21/03/2024
 42823                                  %if 0
 42824                                  	push	ax
 42825                                  	push	bx
 42826                                  	push	cx
 42827                                  	push	dx
 42828                                  	push	si
 42829                                  	push	di
 42830                                  %else
 42831                                  	; 21/03/2024 (PCDOS 7.1 IBMDOS.COM)
 42832                                  	;;;
 42833                                  	pusha
 42834                                  	;;;
 42835                                  %endif
 42836                                  	push	es
 42837                                  	push	ds			; we use all of them
 42838                                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 42839                                  	push	cs
 42840                                  	pop	ds
 42841                                  	
 42842                                  	mov	si,RScanPattern1
 42843                                  	;mov	cx,10
 42844                                  	mov	cx,RLen1
 42845                                  	rep	cmpsb			; do we have the pattern ?
 42846                                  	jne	short rpexit
 42847                                  	mov	ax,[es:0]
 42848                                  	cmp	ax,348			; is it a buggy version ?
 42849                                  	jb	short rpexit
 42850                                  	cmp	ax,383			; is it a buggy version ?
 42851                                  	ja	short rpexit
 42852                                  
 42853                                  	call	VerifyVersion
 42854                                  	jne	short rpexit
 42855                                  
 42856                                  	mov	cx,[es:16h]		; Length of buggy code seg
 42857                                  	sub	cx,200h			; Length we search (we start
 42858                                  					;  at offset 200h)
 42859                                  	mov	es,[es:20h]		; es=buggy code segment
 42860                                  	mov	si,RScanPattern2
 42861                                  	;mov	dx,8	
 42862                                  	mov	dx,RLen2
 42863                                  	call	ScanCodeSeq		; look for code seq with nop
 42864                                  	jz	short rpfound
 42865                                  
 42866                                  	mov	si,RScanPattern3
 42867                                  	;mov	dx,15
 42868                                  	mov	dx,RLen3
 42869                                  	call	ScanCodeSeq		; look for code seq w/o nop
 42870                                  	jnz	short rpexit
 42871                                  
 42872                                  rpfound:
 42873                                  	
 42874                                  ;	we set up a far call into DOS data
 42875                                  ;	dx has the length of the code seq we were searching for
 42876                                  
 42877                                  	mov	al,9Ah			; far call opcode
 42878                                  	stosb
 42879                                  	mov	ax,RatBugCode
 42880                                  	stosw
 42881                                  	mov	ax,ss
 42882                                  	stosw
 42883                                  	mov	cx,dx
 42884                                  	sub	cx,6			; filler (with NOPs)
 42885                                  	mov	al,90h
 42886                                  	rep	stosb
 42887                                  rpexit:
 42888                                  	pop	ds
 42889                                  	pop	es
 42890                                  
 42891                                  ; 21/03/2024
 42892                                  %if 0
 42893                                  	pop	di
 42894                                  	pop	si
 42895                                  	pop	dx
 42896                                  	pop	cx
 42897                                  	pop	bx
 42898                                  	pop	ax
 42899                                  %else
 42900                                  	; 21/03/2024 (PCDOS 7.1 IBMDOS.COM)
 42901                                  	;;;
 42902                                  	popa
 42903                                  	;;;
 42904                                  %endif
 42905                                  	retn
 42906                                  
 42907                                  ; M020 END
 42908                                  
 42909                                  ;--------------------------------------------------------------------------- 
 42910                                  %endif	; 28/12/2022
 42911                                  
 42912                                  ;---------------------------------------------------------------------------
 42913                                  ;
 42914                                  ;	M068
 42915                                  ;
 42916                                  ; 	Procedure Name	: IsCopyProt
 42917                                  ;
 42918                                  ;	Inputs		: DS:100 -> start of com file just read in
 42919                                  ;
 42920                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 42921                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 42922                                  ;			  copy protect scheme that relies on the A20 line
 42923                                  ;			  being turned off for it's scheme to work.
 42924                                  ;
 42925                                  ;			  Note: The int 21 function dispatcher will turn 
 42926                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 42927                                  ;				and dec the A20OFF_COUNT before	iretting 
 42928                                  ;				to the user. 
 42929                                  ;
 42930                                  ;	Uses		: ES, DI, SI, CX
 42931                                  ;
 42932                                  ;---------------------------------------------------------------------------
 42933                                  
 42934                                  ; 23/05/2019 - Retro DOS v4.0
 42935                                  
 42936                                  CPStartOffset	EQU	0175h
 42937                                  CPID1Offset	EQU	011Bh
 42938                                  CPID2Offset	EQU	0173h
 42939                                  CPID3Offset	EQU	0146h
 42940                                  CPID4Offset	EQU	0124h
 42941                                  ID1		EQU	05343h
 42942                                  ID2		EQU	05044h
 42943                                  ID3		EQU	0F413h
 42944                                  ID4		EQU	08000h
 42945                                  
 42946                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 42947                                  
 42948                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42949                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 42950                                  
 42951                                  CPScanPattern:
 42952 000074A8 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 42953 000074AC 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 42954 000074B0 C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 42955 000074B6 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 42956 000074BA B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 42957 000074BD BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 42958                                  
 42959                                  CPSPlen	EQU $ - CPScanPattern
 42960                                  
 42961                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 42962                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 42963                                  
 42964                                  IsCopyProt:
 42965 000074C0 813E1B014353            	cmp	word [CPID1Offset],ID1
 42966 000074C6 752D                    	jne	short CP_done
 42967                                  
 42968 000074C8 813E73014450            	cmp	word [CPID2Offset],ID2
 42969 000074CE 7525                    	jne	short CP_done
 42970                                  
 42971 000074D0 813E460113F4            	cmp	word [CPID3Offset],ID3
 42972 000074D6 751D                    	jne	short CP_done
 42973                                  
 42974 000074D8 813E24010080            	cmp	word [CPID4Offset],ID4
 42975 000074DE 7515                    	jne	short CP_done
 42976                                  
 42977 000074E0 0E                      	push	cs
 42978 000074E1 07                      	pop	es
 42979 000074E2 BF[A874]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 42980                                  
 42981 000074E5 BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 42982                                  					; of pattern
 42983                                  
 42984 000074E8 B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 42985 000074EB F3A6                    	repe	cmpsb
 42986 000074ED 7506                    	jnz	short CP_done
 42987                                  
 42988 000074EF 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 42989                                  CP_done:
 42990 000074F5 C3                      	retn
 42991                                  	
 42992                                  ;DOSCODE ENDS
 42993                                  
 42994                                  	;END
 42995                                  
 42996                                  ;----------------------------------------------------------------------------
 42997                                  
 42998                                  ;align 2 ; 05/09/2018 (Error!)
 42999                                  
 43000                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43001                                  ;align 16 ; 08/09/2018 (OK.)
 43002                                  align 2
 43003                                  
 43004                                  ; 06/08/2018 - Retro DOS v3.0
 43005                                  ;============================================================================
 43006                                  ; MSINIT.ASM
 43007                                  ;============================================================================
 43008                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 43009                                  ;
 43010                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 43011                                  ;
 43012                                  	; 15/07/2018 - Retro DOS v3.0
 43013                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 43014                                  
 43015                                  ; temp iret instruction
 43016                                  
 43017                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43018                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 43019                                  
 43020                                  initiret: ; MSDOS 6.0
 43021                                  SYSBUF:
 43022                                  ;IRETT: ; 06/05/2019
 43023 000074F6 CF                      	iret
 43024                                  
 43025                                  ; 22/04/2019 - Retro DOS v4.0
 43026                                  
 43027                                  ; pointer to the BIOS data segment that will be available just to the
 43028                                  ; initialization code
 43029                                  
 43030 000074F7 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 43031                                  
 43032                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43033                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 43034                                  
 43035                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 43036                                  
 43037                                  ParaRound:
 43038 000074F9 83C00F                  	add	ax, 15
 43039 000074FC D1D8                    	rcr	ax, 1
 43040 000074FE D1E8                    	shr	ax, 1
 43041 00007500 D1E8                    	shr	ax, 1
 43042 00007502 D1E8                    	shr	ax, 1
 43043 00007504 C3                      	retn
 43044                                  
 43045                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 43046                                  
 43047                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43048                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 43049                                  	
 43050                                  	; 30/05/2019
 43051                                  	; 22/04/2019 - Retro DOS v4.0
 43052                                  	; 07/07/2018 - Retro DOS v3.0
 43053                                  	; Retro DOS v2.0 - 03/03/2018
 43054                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43055                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 43056                                  DOSINIT:
 43057                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 43058                                  	;
 43059                                  	; Far call from SYSINIT
 43060                                  	; DX = Memory size in paragraphs
 43061                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 43062                                  	;	  (Retro DOS v2.0, 16/03/2018)
 43063                                  	;
 43064                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 43065                                  	;	  (Retro DOS v4.0, 20/04/2019)
 43066                                  
 43067 00007505 FA                              CLI
 43068 00007506 FC                              CLD
 43069                                  
 43070                                  	; 03/11/2022
 43071                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 43072                                  	
 43073                                  	; 17/12/2022
 43074                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43075                                  	;push	dx ; =*=		; save parameters from BIOS
 43076                                  	
 43077 00007507 56                      	push	si
 43078 00007508 1E                      	push	ds
 43079 00007509 57                      	push	di			;save di (ptr to BiosComBlock)
 43080                                  
 43081 0000750A 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 43082                                  
 43083                                  ; First, move the DOS data segment to its final location in low memory
 43084                                  
 43085                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 43086                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h
 43087 0000750C B8[8379]                	mov	ax,MEMSTRT		; get offset of end of init code
 43088                                  
 43089                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 43090                                  	;and	ax,~15	; 0FFF0h	; boundary
 43091                                  
 43092                                  	;mov	si,ax			; si = offset of DOSDATA in current
 43093                                  					; code segment
 43094                                  
 43095                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43096 0000750F 83C00F                  	add	ax,15			; round to nearest paragraph
 43097                                  	;and	ax,~15			; boundary
 43098                                  	; 12/04/2024
 43099 00007512 24F0                    	and	al,0F0h
 43100                                  
 43101 00007514 89C6                    	mov	si,ax			; si = offset of DOSDATA in current
 43102                                  					; code segment
 43103                                  	; 05/12/2022
 43104                                  	; 30/04/2019 - Retro DOS v4.0
 43105                                  	;xor	si,si
 43106                                  	
 43107                                  	;mov	ax,cs
 43108                                  	;mov	ds,ax			; ds = current code segment
 43109                                  					; DS:SI now points to dosdata
 43110                                  	; 22/03/2024
 43111 00007516 0E                      	push	cs
 43112 00007517 1F                      	pop	ds
 43113                                  
 43114                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 43115                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 43116                                  					;  BData segment. Cannot use
 43117                                  					;  getdseg macro here!!!
 43118                                  	; 17/12/2022
 43119 00007518 8E06[F774]              	mov	es,[InitBioDataSeg]
 43120                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43121                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 43122                                  
 43123                                  	;mov	es,[es:3]
 43124 0000751C 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 43125                                  
 43126 00007521 31FF                    	xor	di,di			; ES:DI now points to RAM data
 43127                                  
 43128                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 43129                                  	;mov	cx,4976  ; 25/05/2019
 43130                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43131                                  	;mov	cx,4962
 43132                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 43133 00007523 B9CF12                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 43134 00007526 F3A4                    	rep	movsb			; move data to final location
 43135                                  	
 43136 00007528 5F                      	pop	di			; restore ptr to BiosComBlock
 43137 00007529 1F                      	pop	ds			; restore parms from BIOS
 43138 0000752A 5E                      	pop	si
 43139                                  	; 17/12/2022
 43140                                  	;pop	dx ; 30/05/2019
 43141                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43142                                  	;pop	dx ; =*=
 43143                                  
 43144 0000752B 06                      	push	es
 43145 0000752C 1E                      	push	ds
 43146 0000752D 07                      	pop	es			; es:si -> device chain
 43147 0000752E 1F                      	pop	ds			; ds points to dosdata
 43148                                  
 43149                                  ;SR;
 43150                                  ;We get a ptr to the BIOS exchange data block. This has been setup right
 43151                                  ;now so that the EXEC call knows when SysInit is present to do the special
 43152                                  ;lie table handling for device drivers. This can be expanded later on to
 43153                                  ;establish a communication block from the BIOS to the DOS.
 43154                                  
 43155                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 43156                                  	;mov	[1042h],bx
 43157 0000752F 893E[4010]              	mov	[BiosDataPtr],di
 43158 00007533 891E[4210]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 43159                                  
 43160 00007537 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 43161                                  
 43162                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 43163                                  
 43164 0000753C 2E8C1E[6F4F]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 43165 00007541 2E8C1E[734F]            	mov	[cs:LowInt24Addr+2],ds
 43166 00007546 2E8C1E[774F]            	mov	[cs:LowInt28Addr+2],ds
 43167                                  
 43168                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 43169                                  	;mov	[584h],sp
 43170                                  	;mov	[586h],ss
 43171 0000754B 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 43172 0000754F 8926[8405]              	mov	[USER_SP],sp
 43173 00007553 8C16[8605]              	mov	[USER_SS],ss
 43174                                  
 43175 00007557 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 43176 00007559 8ED0                    	mov	ss,ax
 43177                                  
 43178                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 43179                                  	;mov	sp,offset dosdata:dskstack
 43180 0000755B BC[2009]                	mov	sp,DSKSTACK
 43181                                  
 43182                                  ;M023
 43183                                  ; Init patch ptrs to default values
 43184                                  
 43185                                  ; 22/03/2024
 43186                                  %if 0
 43187                                  	;mov	word [1212h],RetExePatch
 43188                                  	;mov	word [1214h],RetExePatch
 43189                                  	;mov	word [61h],RetExePatch
 43190                                  	mov	word [FixExePatch],RetExePatch	; M023
 43191                                  	; 28/12/2022 - Retro DOS v4.1
 43192                                  	;mov	word [RationalPatchPtr],RetExePatch ; M023
 43193                                  	mov	word [ChkCopyProt],RetExePatch	; M068
 43194                                  %else
 43195                                  	; 22/03/2024 (PCDOS 7.1 IBMDOS.COM)
 43196                                  	;;;	
 43197 0000755E B8[C660]                	mov	ax,RetExePatch
 43198 00007561 A3[1212]                	mov	[FixExePatch],ax
 43199                                  	;mov	[RationalPatchPtr],ax
 43200 00007564 A3[6100]                	mov	[ChkCopyProt],ax
 43201                                  	;;;
 43202                                  %endif
 43203                                  
 43204                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43205                                  %if 0	
 43206                                  
 43207                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 43208                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 43209                                  ; running in the HMA.
 43210                                  
 43211                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 43212                                  	cmp	al,2		;   386 or later?
 43213                                  	mov	ax,Rational386Patch
 43214                                  	jae	short di_set_patch
 43215                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 43216                                  di_set_patch:
 43217                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 43218                                  
 43219                                  %endif
 43220                                  	; Set up the variable temp_dosloc to point to the dos code segment
 43221                                  
 43222 00007567 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 43223                                  
 43224                                  	; ax now holds segment of DOS code
 43225 00007569 A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 43226                                  
 43227 0000756C 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 43228 00007570 8936[4800]              	mov	word [NULDEV],si
 43229                                  ;SR;
 43230                                  ; There are some locations in the Win386 instance data structures
 43231                                  ; which need to be set up with the DOS data segment. First, initialize
 43232                                  ; the segment part of the instance table pointer in the SIS.
 43233                                  
 43234                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]
 43235 00007574 8C1E[F20F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 43236                                  
 43237                                  ; Now initialize the segment part of the pointer to the data in each
 43238                                  ; instance table entry.
 43239                                  
 43240 00007578 56                      	push	si		; preserve pointer to device chain
 43241                                  	; 18/12/2022
 43242                                  	; cx = 0
 43243 00007579 B107                    	mov	cl,7
 43244                                  	;mov	cx,7		; There are 7 entries in the instance table
 43245                                  				; M019
 43246                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 43247 0000757B BE[F60F]                	mov	si,Instance_Table+2 ; point si to segment field
 43248                                  Instance_init_loop:
 43249 0000757E 8C1C                    	mov	[si],ds		; set offset in instance entry
 43250                                  	;add	si,6
 43251 00007580 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 43252 00007583 E2F9                    	loop	Instance_init_loop
 43253                                  
 43254                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 43255                                  
 43256                                  	; 18/12/2022
 43257 00007585 B105                    	mov	cl,5
 43258                                  	;mov	cx,5		; There are five entries in the instance table
 43259                                  
 43260                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 43261                                  	;mov	si,11EDh	; point si to segment field
 43262 00007587 BE[ED11]                	mov	si,OldInstanceJunk+6
 43263                                  OldInstance_init_loop:
 43264 0000758A 8C1C                    	mov	[si],ds		; set offset in instance entry
 43265 0000758C 83C606                  	add	si,6		; move on to next entry
 43266 0000758F E2F9                    	loop	OldInstance_init_loop
 43267 00007591 5E                      	pop	si		; restore pointer to device chain
 43268                                  
 43269                                  ; End of WIN386 2.xx compatibility bullshit
 43270                                  
 43271                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43272                                  %if 0	
 43273                                     	; 30/04/2019
 43274                                  	;push	es
 43275                                  	;pop	ds
 43276                                  			; ds:si points to console device
 43277                                  
 43278                                  	; 24/04/2019 - Retro DOS v4.0
 43279                                  
 43280                                  	; 15/07/2018
 43281                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 43282                                  	; (Set INT 2Ah handler address to an 'IRET')
 43283                                  
 43284                                  	; need crit vector inited to use deviocall
 43285                                  	;push	ds			; preserve segment of device chain
 43286                                  	push	es ; 30/04/2019
 43287                                  
 43288                                  %endif
 43289                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43290 00007592 06                      	push	es
 43291                                  	; 17/12/2022
 43292                                  	;pop	ds
 43293                                  	;push	ds
 43294                                  
 43295 00007593 31C0                    	xor	ax,ax
 43296 00007595 8ED8                    	mov	ds,ax			; point DS to int vector table
 43297 00007597 B8[F674]                	mov	ax,initiret
 43298                                  	;mov	[0A8h],ax  ; [2Ah*4]
 43299 0000759A A3A800                  	mov	[addr_int_ibm],ax
 43300 0000759D 8CC8                    	mov	ax,cs
 43301                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2]
 43302 0000759F A3AA00                  	mov	[addr_int_ibm+2],ax
 43303 000075A2 1F                      	pop	ds			; restore segment of device chain
 43304                                  
 43305 000075A3 E81A02                  	call	CHARINIT  		; initialize console driver
 43306 000075A6 56                      	push	si			; save pointer to header
 43307                                  
 43308 000075A7 16                      	push	ss			; move pointer to dos data...
 43309 000075A8 07                      	pop	es			; ...into ES
 43310                                  
 43311                                  	;initialize sft for file 0 (CON)
 43312                                  
 43313                                          ; 07/07/2018 - Retro DOS v3.0
 43314                                  	; 24/04/2019 - Retro DOS v4.0
 43315                                  	;mov	di,SFTABL+6 
 43316 000075A9 BF[D200]                	MOV	DI,SFTABL+SFT.SFTable	; Point to sft 0
 43317 000075AC B80300                  	MOV	AX,3
 43318 000075AF AB                      	STOSW           	; Refcount
 43319                                          ;DEC	AL
 43320                                  	; 22/03/2024
 43321 000075B0 48                      	dec	ax
 43322 000075B1 AB                      	STOSW			; Access rd/wr, compatibility
 43323 000075B2 30C0                    	XOR	AL,AL
 43324 000075B4 AA                      	STOSB           	; attribute
 43325                                  	;mov	al,0C3h
 43326 000075B5 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 43327 000075B7 AB                      	STOSW			; flags
 43328 000075B8 89F0                    	mov	ax,si
 43329 000075BA AB                      	stosw			; device pointer in devptr
 43330 000075BB 8CD8                    	mov	ax,ds
 43331 000075BD AB                      	stosw
 43332 000075BE 31C0                    	xor	ax,ax	; 0
 43333 000075C0 AB                      	stosw			; firclus
 43334 000075C1 AB                      	stosw			; time
 43335 000075C2 AB                      	stosw			; date
 43336 000075C3 48                      	dec	ax	; -1
 43337 000075C4 AB                      	stosw			; size
 43338 000075C5 AB                      	stosw
 43339 000075C6 40                      	inc	ax	; 0
 43340 000075C7 AB                      	stosw			; position
 43341 000075C8 AB                      	stosw
 43342                                  	;add	di,7
 43343 000075C9 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 43344                                  				; point at name
 43345                                  	;add	si,10
 43346 000075CC 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 43347                                  				; point to name
 43348 000075CF B90400                  	mov	cx,4
 43349 000075D2 F3A5                    	rep	movsw		; name
 43350 000075D4 B103                    	mov	cl,3
 43351 000075D6 B020                    	mov	al," "
 43352 000075D8 F3AA                    	rep	stosb		; extension
 43353                                  
 43354 000075DA 5E                      	pop	si		; get back pointer to header
 43355                                  
 43356                                  				; mark device as CON I/O
 43357                                  	; 15/07/2018
 43358                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 43359 000075DB 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 43360                                  	; 12/03/2018
 43361                                  	;mov	[ss:32h],si
 43362 000075DF 368936[3200]            	MOV     [SS:BCON],SI
 43363                                  	;mov	[ss:34h],ds
 43364 000075E4 368C1E[3400]                    MOV     [SS:BCON+2],DS
 43365                                  
 43366                                  	; initialize each device until the clock device is found
 43367                                  
 43368                                  CHAR_INIT_LOOP:
 43369 000075E9 C534                            LDS     SI,[SI]			; AUX device
 43370 000075EB E8D201                  	call	CHARINIT 
 43371                                         	;15/07/2018
 43372                                  	;test	byte [SI+4],8
 43373 000075EE F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 43374 000075F2 74F5                            JZ      SHORT CHAR_INIT_LOOP
 43375                                  	; 12/03/2018
 43376                                  	;mov	[ss:2Eh],si
 43377 000075F4 368936[2E00]                    MOV     [SS:BCLOCK],SI
 43378                                  	;mov	[ss:30h],ds
 43379 000075F9 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 43380                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 43381                                  
 43382                                  	;mov	bp,4970			; bp = pointer to free mem
 43383                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 43384                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 43385                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 43386 000075FE BDCF12                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 43387                                  
 43388 00007601 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 43389 00007606 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 43390                                  PERDRV:
 43391                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 43392 0000760B C534                            LDS	SI,[SI]			; Next device
 43393 0000760D 83FEFF                          CMP	SI,-1	; 0FFFFh
 43394 00007610 7479                    	JZ	SHORT CONTINIT
 43395                                  
 43396 00007612 E8AB01                          call	CHARINIT
 43397                                  
 43398                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 43399                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 43400                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 43401                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 43402                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 43403                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 43404                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 43405                                  
 43406                                          ; 15/07/2018
 43407                                  	;test	word [SI+4],8000h		; DEVTYP
 43408                                          ; 17/12/2022
 43409                                  	;test	byte [SI+5],80h
 43410 00007615 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 43411                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 43412 00007619 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 43413                                  
 43414 0000761B 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 43415 00007620 30ED                    	XOR     CH,CH
 43416                                          ; 07/07/2018
 43417                                  	;MOV	[SI+10],CL		; Number of units in name field
 43418 00007622 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname
 43419 00007625 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 43420 0000762A 30F6                    	XOR     DH,DH
 43421 0000762C 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 43422 00007631 1E                      	PUSH    DS
 43423 00007632 56                              PUSH    SI
 43424 00007633 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 43425                                  
 43426                                  PERUNIT:
 43427 00007638 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 43428 0000763A 43                              INC     BX
 43429 0000763B 43                              INC     BX                      ; On to next BPB
 43430                                  	; 15/12/2022
 43431                                  	; 07/07/2018
 43432                                          ;mov	[ES:BP+DPB.DRIVE],DL
 43433 0000763C 26885600                	MOV     [ES:BP],DL
 43434                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43435                                  	;;mov	[ES:BP+0],DL
 43436                                  	;mov	[ES:BP+DPB.DRIVE],DL
 43437                                  
 43438                                  	;MOV	[ES:BP+1],DH
 43439 00007640 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 43440 00007644 53                              PUSH    BX
 43441 00007645 51                              PUSH    CX
 43442 00007646 52                              PUSH    DX
 43443                                  
 43444                                          ;invoke	$SETDPB
 43445 00007647 E86999                          CALL	_$SETDPB		; build DPB!
 43446                                  
 43447                                  	; 07/07/2018
 43448                                  	;MOV	AX,[ES:BP+2]
 43449 0000764A 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 43450                                          ; 12/03/2018
 43451 0000764E 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 43452 00007653 7604                    	JBE     SHORT NOTMAX		; N:
 43453 00007655 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 43454                                  NOTMAX:					
 43455                                  	; set the next dpb field in the currently built bpb
 43456                                  	; and mark as never accessed
 43457                                          
 43458                                  	; 24/04/2019
 43459 00007659 89E8                    	mov	ax,bp			; get pointer to DPB
 43460                                  	;add	ax,33
 43461 0000765B 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 43462                                  					; set seg & offset of next DPB
 43463                                  	;mov	[es:bp+25],ax
 43464 0000765E 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 43465                                  	;mov	[es:bp+27],es
 43466 00007662 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 43467                                  					; mark as never accessed
 43468                                  	;mov	byte [es:bp+24],0FFh
 43469 00007666 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 43470                                  
 43471 0000766B 5A                      	POP     DX
 43472 0000766C 59                              POP     CX
 43473 0000766D 5B                              POP     BX
 43474 0000766E 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 43475 00007670 5E                              POP     SI
 43476 00007671 1F                              POP     DS
 43477                                  					; ds:si -> device header
 43478                                  					; store it in the corresponding dpb
 43479                                  	; 07/07/2018
 43480                                  	;MOV	[ES:BP+19],SI ; 24/04/2019
 43481 00007672 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 43482                                  	;MOV	[ES:BP+21],DS ; 24/04/2019
 43483 00007676 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 43484                                  
 43485 0000767A 1E                      	PUSH	DS			; save pointer to device header
 43486 0000767B 56                      	PUSH	SI
 43487 0000767C FEC6                    	INC	DH			; inc unit #
 43488 0000767E FEC2                    	INC	DL			; inc drive #
 43489 00007680 8ED8                    	MOV	DS,AX			; restore segment of BPB array
 43490                                  	;add	bp,33 ; 24/04/2019
 43491 00007682 83C521                  	ADD	BP,DPBSIZ		; advance pointer to next dpb
 43492 00007685 E2B1                    	LOOP	PERUNIT			; process all units in each driver
 43493                                  
 43494 00007687 5E                      	POP     SI			; restore pointer to device header
 43495 00007688 1F                      	POP     DS
 43496 00007689 EB80                    	JMP	PERDRV			; process all drivers in chain
 43497                                  
 43498                                  CONTINIT:
 43499                                  	; 24/04/2019
 43500                                  	;sub	bp,33			; set link in last DPB to -1
 43501 0000768B 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 43502                                  					; set last link offset & segment
 43503                                  ; 23/03/2024 - Retro DOS v4.1
 43504                                  %if 0
 43505                                  	;mov	word [bp+25],0FFFFh
 43506                                  	mov	word [bp+DPB.NEXT_DPB],-1
 43507                                  	;mov	word [bp+27],0FFFFh
 43508                                  	mov	word [bp+DPB.NEXT_DPB+2],-1
 43509                                  %else
 43510                                  	; 23/03/2024 (PCDOS 7.1 IBMDOS.COM)
 43511                                  	;;;
 43512 0000768E B8FFFF                  	mov	ax,0FFFFh ; -1
 43513                                  	;mov	word [bp+25],ax
 43514 00007691 894619                  	mov	word [bp+DPB.NEXT_DPB],ax ; -1
 43515                                  	;mov	word [bp+27],ax
 43516 00007694 89461B                  	mov	word [bp+DPB.NEXT_DPB+2],ax ; -1
 43517                                  	;;;
 43518                                  %endif
 43519                                  	;add	bp,33
 43520 00007697 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 43521                                  					; the DPB chain is done.
 43522 0000769A 16                      	push	ss
 43523 0000769B 1F                      	pop	ds
 43524                                  
 43525 0000769C 89E8                    	mov	ax,bp
 43526 0000769E E858FE                  	call	ParaRound		; round up to segment
 43527                                  
 43528 000076A1 8CDA                    	mov	dx,ds			; dx = dosdata segment
 43529 000076A3 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 43530                                  
 43531 000076A5 BB0F00                  	mov	bx,0Fh
 43532                                  	
 43533                                  	; 24/05/2019
 43534                                  	;mov	cx,[ENDMEM]
 43535                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43536                                  	; 17/12/2022
 43537                                  	;mov	cx,[ENDMEM]
 43538                                  					; set seg inpacketto dosdata
 43539 000076A8 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds
 43540                                  
 43541                                  ; Patch in the segments of the interrupt vectors with current code segment.
 43542                                  ; Also patch in the segment of the pointers in the dosdata area.
 43543                                  ;
 43544                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 43545                                  ; calls were done. The procedure patch_misc_segments is called multiple
 43546                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 43547                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 43548                                  
 43549 000076AC 52                      	push	dx			; preserve first free segment
 43550                                  
 43551 000076AD A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 43552 000076B0 8EC0                    	mov	es,ax			; es = segment of DOS
 43553 000076B2 C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 43554                                  
 43555 000076B8 E8AF01                  	call	patch_vec_segments	; uses AX as doscode segment
 43556 000076BB E8E401                  	call	patch_misc_segments	; patch in segments for sharer and 
 43557                                  					; other tables with seg in ES.
 43558                                  	; 17/12/2022
 43559                                  	; cx = 0
 43560 000076BE 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 43561                                  
 43562 000076C2 5A                      	pop	dx			; restore first free segment
 43563                                  
 43564                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 43565                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 43566                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 43567                                  ; low_mem_stub by seg_reinit.
 43568                                  
 43569                                  	;xor	ax,ax ; 0
 43570                                  	;mov	ds,ax
 43571                                  	;mov	es,ax
 43572                                  	; 17/12/2022
 43573                                  	; cx = 0
 43574                                  	;xor	cx,cx ; 0
 43575 000076C3 8ED9                    	mov	ds,cx
 43576 000076C5 8EC1                    	mov	es,cx
 43577                                  
 43578                                  	; set the segment of int 24 vector that was
 43579                                  	; left out by patch_vec_segments above.
 43580                                  
 43581                                  	; 17/12/2022
 43582                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43583                                  ;%if 0
 43584                                  	; 24/05/2019
 43585                                  	;;mov	di,90h
 43586                                  	;;mov	di,4*int_fatal_abort
 43587                                  	;mov	di,addr_int_fatal_abort
 43588 000076C7 BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 43589                                  
 43590 000076CA 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 43591                                  	;mov	[di+2],ax  ; int 24h segment
 43592 000076CE 8905                    	mov	[di],ax ; 24/05/2019
 43593                                  
 43594                                  	;;mov	di,82h
 43595                                  	;mov	di,INTBASE+2
 43596                                  
 43597                                  ;%endif
 43598                                  	; 17/12/2022
 43599                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43600                                  	;;mov	di,90h
 43601                                  	;;mov	di,4*int_fatal_abort
 43602                                  	;mov	di,addr_int_fatal_abort
 43603                                  	;mov	ax,[ss:TEMP_DOSLOC]
 43604                                  	;mov	[di+2],ax  ; int 24h segment
 43605                                  	;;mov	di,82h
 43606                                  	;mov	di,INTBASE+2
 43607                                  
 43608                                  	; set default divide trap offset
 43609                                  
 43610                                  	;mov	word ptr ds:[0],offset doscode:divov
 43611 000076D0 C7060000[4651]          	mov	word [0],DIVOV
 43612                                  
 43613                                  	; set vectors 20-28 and 2a-3f to point to iret.
 43614                                  
 43615                                  	;mov	di,80h
 43616 000076D6 BF8000                  	mov	di,INTBASE
 43617                                  	;mov	ax,offset doscode:irett
 43618 000076D9 B8[E102]                	mov	ax,IRETT
 43619                                  
 43620                                  	; 17/12/2022
 43621                                  	; cx = 0
 43622 000076DC B109                    	mov	cl,9
 43623                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 43624                                  					;   sets offsets for ints 20h-28h
 43625                                  iset1:
 43626 000076DE AB                      	stosw
 43627                                  	;add	di,2
 43628                                  	; 20/06/2023
 43629 000076DF 47                      	inc	di
 43630 000076E0 47                      	inc	di
 43631 000076E1 E2FB                    	loop	iset1
 43632                                  
 43633 000076E3 83C704                  	add	di,4			; skip vector 29h
 43634                                  
 43635                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 43636                                  ;					;   sets offsets for ints 2ah-2fh
 43637                                  ;iset2:
 43638                                  ;	stosw
 43639                                  ;	add	di,2
 43640                                  ;	loop	iset2
 43641                                  
 43642                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 43643                                  ; patch_vec_segments above. So skip it.
 43644                                  
 43645                                  ;	add	di,8			; skip vector 30h & 31h 
 43646                                  
 43647                                  	;;;
 43648                                  	; 06/05/2019 - Retro DOS v4.0
 43649                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 43650                                  	; 17/12/2022
 43651 000076E6 B105                    	mov	cl,5 ; 28/06/2019
 43652                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43653                                  	;mov	cx,6
 43654                                  iset2:
 43655 000076E8 AB                      	stosw
 43656                                  	;add	di,2
 43657                                  	; 20/09/2023
 43658 000076E9 47                      	inc	di
 43659 000076EA 47                      	inc	di
 43660 000076EB E2FB                    	loop	iset2
 43661                                  
 43662                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43663                                  	; 17/12/2022
 43664 000076ED 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 43665                                  	;add	di,8
 43666                                  	;;;
 43667                                  
 43668                                  	; 17/12/2022
 43669 000076F0 B10E                    	mov	cl,14
 43670                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 43671                                  					;   sets offsets for ints 32h-3fh
 43672                                  iset3:
 43673 000076F2 AB                      	stosw
 43674                                  	;add	di,2
 43675                                  	; 20/09/2023
 43676 000076F3 47                      	inc	di
 43677 000076F4 47                      	inc	di
 43678 000076F5 E2FB                    	loop	iset3
 43679                                  
 43680                                  ;if installed
 43681                                  	; set the offset of int2f handler
 43682                                  	;mov	word [0BCh],INT2F
 43683 000076F7 C706BC00[0107]          	mov	word [02Fh*4],INT2F
 43684                                  	; set segment to doscode as we have to do int 2f to check for XMS
 43685 000076FD 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 43686                                  	;mov	[0BEh],ax
 43687 00007701 A3BE00                  	mov	[(02Fh*4)+2],ax
 43688                                  ;endif
 43689                                  	; set up entry point call at vectors 30-31h. Note the segment of the
 43690                                  	; long jump will be patched in by seg_reinit
 43691                                  
 43692                                  	;mov	byte [C0h],0EAh
 43693 00007704 C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 43694                                  	;mov	byte [C1h],CALL_ENTRY
 43695 00007709 C706C100[E202]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 43696                                  
 43697 0000770F C7068000[DB02]          	mov	word [addr_int_abort],QUIT	; INT 20h
 43698 00007715 C7068400[0703]          	mov	word [addr_int_command],COMMAND ; INT 21h
 43699 0000771B C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 43700 00007721 89168A00                	mov	word [addr_int_terminate+2],dx
 43701 00007725 C7069400[3105]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 43702 0000772B C7069800[B805]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 43703 00007731 C7069C00[6960]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 43704                                  
 43705 00007737 16                      	push	ss
 43706 00007738 1F                      	pop	ds
 43707                                  	
 43708                                  	; 24/05/2019
 43709                                  	;push	ss
 43710                                  	;pop	es
 43711                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43712                                  	; 17/12/2022
 43713                                  	;push	ss
 43714                                  	;pop	es
 43715                                  
 43716 00007739 52                      	push	dx			; remember address of arena
 43717                                  
 43718 0000773A 42                      	inc	dx			; leave room for arena header
 43719                                  	;mov	[330h],dx
 43720 0000773B 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 43721                                  
 43722 0000773F 31FF                    	xor	di,di			; point es:di at end of memory
 43723 00007741 8EC2                    	mov	es,dx			; ...where psp will be
 43724 00007743 31C0                    	xor	ax,ax
 43725                                  	;mov	cx,80h			; psp is 128 words
 43726                                  	; 17/12/2022
 43727 00007745 B180                    	mov	cl,128 ; 28/06/2019
 43728                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43729                                  	;mov	cx,128
 43730                                  
 43731 00007747 F3AB                    	rep	stosw			; zero out psp area
 43732 00007749 A1[4603]                        mov     ax,[ENDMEM]
 43733                                  	
 43734                                  	; 17/12/2022
 43735                                  	; cx = 0
 43736 0000774C E8B299                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 43737                                  
 43738                                  	; ds, es now point to PSP
 43739                                  
 43740 0000774F 16                      	push	ss
 43741 00007750 1F                      	pop	ds
 43742                                  
 43743                                  	;mov	di,24
 43744 00007751 BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 43745 00007754 31C0                    	xor	ax,ax
 43746 00007756 AB                      	stosw
 43747 00007757 AA                      	stosb				; 0,1 and 2 are con device
 43748 00007758 B0FF                    	mov	al,0FFh
 43749                                  	;mov	cx,FILPERPROC-3 ; 17
 43750                                  	; 17/12/2022
 43751                                  	; cx = 4
 43752 0000775A B111                    	mov	cl,FILPERPROC-3 ; 17
 43753 0000775C F3AA                    	rep	stosb			; rest are unused
 43754                                  
 43755 0000775E 16                      	push	ss
 43756 0000775F 07                      	pop	es
 43757                                  					; must be set to print messages
 43758 00007760 8C1E[2C00]              	mov	[SFT_ADDR+2],ds
 43759                                  
 43760                                  ; after this point the char device functions for con will work for
 43761                                  ; printing messages
 43762                                  
 43763                                  	; 24/04/2019 - Retro DOS v4.0
 43764                                  
 43765                                  ; 12/05/2019
 43766                                  ;
 43767                                  ;write_version_msg:
 43768                                  ;
 43769                                  ;	;if	(not ibm)
 43770                                  ;	;mov	si,offset doscode:header
 43771                                  ;	mov	si,HEADER
 43772                                  ;outmes:
 43773                                  ;	;lods	cs:byte ptr [si]
 43774                                  ;	cs
 43775                                  ;	lodsb
 43776                                  ;	cmp	al,"$"
 43777                                  ;	je	short outdone
 43778                                  ;	call	OUTT
 43779                                  ;	jmp	short outmes
 43780                                  ;outdone:
 43781                                  ;	push	ss			; out stomps on segments
 43782                                  ;	pop	ds
 43783                                  ;	push	ss
 43784                                  ;	pop	es
 43785                                  ;	;endif
 43786                                  
 43787                                  	; at this point es is dosdata
 43788                                  
 43789                                  	; Fill in the segment addresses of sysinitvar and country_cdpg
 43790                                  	; in sysinittable (ms_data.asm)
 43791                                  
 43792                                  	;mov	si,0D28h
 43793 00007764 BE[280D]                	mov	si,SysInitTable
 43794                                  
 43795                                  	; 17/12/2022
 43796                                  	; ds = es = ss
 43797                                  
 43798                                  	; 17/12/2022
 43799                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43800                                  ;%if 0
 43801                                  	;;mov	[es:si+6],es
 43802                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43803                                  	;;mov	[es:si+2],es
 43804                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43805                                  	
 43806 00007767 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 43807 0000776A 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 43808                                  
 43809                                  	; buffhead -> dosdata:hashinitvar
 43810                                  
 43811                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43812 0000776D 8C06[3A00]              	mov	[BUFFHEAD+2],es
 43813                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43814                                  	;mov	si,6Dh
 43815 00007771 BE[6D00]                	mov	si,HASHINITVAR
 43816                                  	;mov	[es:BUFFHEAD],si
 43817 00007774 8936[3800]              	mov	[BUFFHEAD],si
 43818                                  
 43819 00007778 5A                              pop     dx                      ; restore address of arena
 43820                                  
 43821                                  	;mov	[032Ch+2],dx
 43822 00007779 8916[2E03]                      mov     [DMAADD+2],dx
 43823                                  
 43824                                  	;mov	[es:arena_head],dx
 43825 0000777D 8916[2400]              	mov	[arena_head],dx
 43826                                  
 43827                                  ;%endif
 43828                                  
 43829                                  ; 17/12/2022
 43830                                  %if 0
 43831                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43832                                  	;;;
 43833                                  	;mov	[es:si+6],es
 43834                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43835                                  	;mov	[es:si+2],es
 43836                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43837                                  
 43838                                  	; buffhead -> dosdata:hashinitvar
 43839                                  
 43840                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43841                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43842                                  	;mov	si,6Dh
 43843                                  	mov	si,HASHINITVAR
 43844                                  	mov	[es:BUFFHEAD],si
 43845                                  
 43846                                          pop     dx                      ; restore address of arena
 43847                                  
 43848                                  	;mov	[032Ch+2],dx
 43849                                          mov     [DMAADD+2],dx
 43850                                  
 43851                                  	mov	[es:arena_head],dx
 43852                                  	;;;
 43853                                  %endif
 43854                                  
 43855 00007781 8EDA                            mov     ds,dx
 43856                                  
 43857                                  	;mov	byte [0],'Z'
 43858 00007783 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 43859                                          ;mov	word [1],0
 43860 00007788 C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 43861                                  
 43862 0000778E 36A1[4603]                      mov     ax,[ss:ENDMEM]
 43863 00007792 29D0                    	sub	ax,dx
 43864 00007794 48                              dec     ax
 43865 00007795 A30300                          mov     [ARENA.SIZE],ax
 43866                                  
 43867                                  	; point to sft 0
 43868                                  
 43869                                  	;mov	di,offset dosdata:sftabl + sftable
 43870                                  	;mov	di,SFTABL+6
 43871 00007798 BF[D200]                	mov	di,SFTABL+SFT.SFTable
 43872 0000779B B80300                          mov     ax,3
 43873 0000779E AB                              stosw           		; adjust refcount
 43874                                  
 43875                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 43876                                  
 43877                                  	;mov	di,offset dosdata:sysinittable
 43878                                  	;mov	di,0D28h
 43879 0000779F BF[280D]                	mov	di,SysInitTable
 43880                                  
 43881 000077A2 42                      	inc	dx			; advance dx from arena to psp
 43882 000077A3 8EDA                    	mov	ds,dx			; point ds to psp
 43883                                  
 43884                                  					; pass the address os seg_reinit
 43885                                  					; in dx
 43886 000077A5 BA[1378]                	mov	dx,seg_reinit
 43887 000077A8 B9[4F72]                	mov	cx,exepatch_start
 43888 000077AB 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 43889                                  
 43890 000077AF B8[F674]                	mov	ax,SYSBUF
 43891 000077B2 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 43892                                  	
 43893 000077B5 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 43894 000077BA 368E16[8605]                    mov     ss,[ss:USER_SS]
 43895                                  
 43896 000077BF CB                              retf
 43897                                  
 43898                                  ;
 43899                                  ; END OF DOSINIT
 43900                                  ;
 43901                                  ;--------------------------------------------------------------------------
 43902                                  
 43903                                  CHARINIT:
 43904                                  	; 24/04/2019 - Retro DOS v4.0
 43905                                  	; 07/07/2018 - Retro DOS v3.0
 43906                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 43907 000077C0 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 43908                                  	;mov	byte [ss:035Bh],0
 43909 000077C6 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 43910                                  	;mov	byte [ss:035Ch],0
 43911 000077CC 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 43912                                  	;mov	word [ss:035BD],0
 43913 000077D2 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 43914 000077D9 06                              PUSH	ES
 43915 000077DA 53                              PUSH	BX
 43916 000077DB 50                              PUSH	AX
 43917 000077DC BB[5A03]                        MOV	BX,DEVCALL
 43918                                          ;PUSH	CS
 43919 000077DF 16                      	PUSH	SS ; 30/04/2019
 43920 000077E0 07                              POP	ES
 43921 000077E1 E85BCD                          CALL	DEVIOCALL2
 43922 000077E4 58                      	POP	AX
 43923 000077E5 5B                              POP	BX
 43924 000077E6 07                              POP	ES
 43925 000077E7 C3                              RETN
 43926                                  
 43927                                  ; 25/04/2019 - Retro DOS v4.0
 43928                                  
 43929                                  ;-----------------------------------------------------------------------------
 43930                                  ;
 43931                                  ;	check_XMM: routine to check presence of XMM driver
 43932                                  ;
 43933                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 43934                                  ;
 43935                                  ;	USED:	none
 43936                                  ;
 43937                                  ;-----------------------------------------------------------------------------
 43938                                  
 43939                                  check_XMM: ; proc near
 43940                                  ;
 43941                                  ; determine whether or not an XMM driver is installed
 43942                                  ;
 43943 000077E8 50                      	push	ax
 43944                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 43945 000077E9 B80043                  	mov	ax,4300h
 43946 000077EC CD2F                    	int	2Fh
 43947                                  		; - Multiplex - XMS - INSTALLATION CHECK
 43948                                  		; Return: AL = 80h XMS driver installed
 43949                                  		; AL <> 80h no driver
 43950 000077EE 3C80                    	cmp	al,80h			; Q: installed
 43951 000077F0 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 43952                                  ;
 43953                                  ; get the XMM control functions entry point, save it, we
 43954                                  ; need to call it later.
 43955                                  ;
 43956 000077F2 53                      	push	bx
 43957 000077F3 52                      	push	dx
 43958 000077F4 1E                      	push	ds
 43959 000077F5 06                      	push	es
 43960                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 43961 000077F6 B81043                  	mov	ax,4310h
 43962 000077F9 CD2F                    	int	2Fh
 43963                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 43964                                  		; Return: ES:BX -> driver entry point
 43965                                  
 43966 000077FB 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 43967                                  
 43968 00007800 891E[6311]              	mov	[XMMcontrol],bx
 43969 00007804 8C06[6511]              	mov	[XMMcontrol+2],es
 43970                                  cXMMexit:
 43971 00007808 F8                      	clc
 43972 00007809 07                      	pop	es
 43973 0000780A 1F                      	pop	ds
 43974 0000780B 5A                      	pop	dx
 43975 0000780C 5B                      	pop	bx
 43976 0000780D 58                      	pop	ax
 43977 0000780E C3                      	retn				; done
 43978                                  ;
 43979                                  ; set carry if XMM driver not present
 43980                                  ;
 43981                                  cXMM_no_driver:
 43982 0000780F F9                      	stc
 43983 00007810 58                      	pop	ax
 43984 00007811 C3                      	retn
 43985                                  
 43986                                  ;-----------------------------------------------------------------------------
 43987                                  ;
 43988                                  ; Procedure Name : seg_reinit
 43989                                  ;
 43990                                  ; Inputs	 : ES has final dos code location
 43991                                  ;		   AX = 0 / 1
 43992                                  ;
 43993                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 43994                                  ;		   if AX =0
 43995                                  ;		      if first entry
 43996                                  ;			 patch segment & offset of vectors with stub
 43997                                  ;			 and stub with segment in ES
 43998                                  ;		      else
 43999                                  ;			 patch stub with segment in ES
 44000                                  ;
 44001                                  ;		   else if AX = 1
 44002                                  ;			patch segment of vectors with segment in ES	
 44003                                  ;
 44004                                  ; NOTE		 : This routine can be called at most twice!
 44005                                  ;
 44006                                  ; Regs Mod.	 : es, ax, di, cx, bx
 44007                                  ;-----------------------------------------------------------------------------
 44008                                  
 44009 00007812 00                      num_entry: db	0		; keeps track of the # of times this routine
 44010                                  				; has been called. (0 or 1)
 44011                                  
 44012                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 44013                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 44014                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 44015                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 44016                                  
 44017                                  seg_reinit:	; proc	far
 44018 00007813 1E                      	push	ds
 44019                                  
 44020 00007814 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 44021                                  
 44022 00007819 E88600                  	call	patch_misc_segments	; patch in segments for sharer and 
 44023                                  					; other tables with seg in ES.
 44024                                  	; 17/12/2022
 44025                                  	; cx = 0
 44026 0000781C 39C8                    	cmp	ax,cx ; 0
 44027                                  	;cmp	ax,0
 44028 0000781E 753D                    	jne	short patch_vec_seg	; patch vectors with segment in es
 44029                                  
 44030                                  	; 17/12/2022
 44031 00007820 2E380E[1278]            	cmp	[cs:num_entry],cl ; 0
 44032                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 44033 00007825 7508                    	jne	short second_entry	; N: just patch the stub with 
 44034                                  					;    segment in ES
 44035                                  					; Y: patch the vectors with stub 
 44036 00007827 8CD8                    	mov	ax,ds
 44037 00007829 E83E00                  	call	patch_vec_segments	; patch the segment of vectors
 44038 0000782C E8BD00                  	call	patch_offset		; patch the offsets of vectors 
 44039                                  					; with those in the stub.
 44040                                  	; 17/12/2022
 44041                                  	; cx = 0
 44042                                  second_entry:
 44043 0000782F 8CC0                    	mov	ax,es			; patch the stub with segment in es
 44044                                  
 44045                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 44046                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 44047 00007831 BF[6210]                	mov	di,DOSINTTABLE
 44048                                  	; 17/12/2022
 44049                                  	; cx = 0
 44050                                  	;mov	cx,9
 44051 00007834 B109                    	mov	cl,9
 44052 00007836 1E                      	push	ds			
 44053 00007837 07                      	pop	es			; es:di -> DOSINTTABLE
 44054                                  
 44055                                  dosinttabloop:
 44056                                  	;add	di,2
 44057                                  	; 19/09/2023
 44058 00007838 47                      	inc	di
 44059 00007839 47                      	inc	di
 44060 0000783A AB                      	stosw
 44061 0000783B E2FB                    	loop	dosinttabloop	
 44062                                  
 44063                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 44064                                  ; use the HMA, so we don't want to check CS
 44065                                  
 44066                                  ;ifndef ROMDOS
 44067 0000783D 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 44068 00007840 7220                    	jb	short sr_done		; N: done
 44069                                  ;endif
 44070 00007842 E8A3FF                  	call	check_XMM		; Y: set up the XMS entry point
 44071 00007845 721B                    	jc	short sr_done		; failed to set up XMS do not do
 44072                                  					; A20 toggling in the stub.
 44073                                  	; 17/12/2022
 44074                                  	; cx = 0
 44075 00007847 E81D01                  	call	patch_in_nops		; enable the stub to check A20 state
 44076                                  ; M021-
 44077                                  	;mov	byte [1211h],1
 44078 0000784A C606[1112]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 44079                                  				
 44080                                  					; set pointer to the routine that 
 44081                                  					; patches buggy exepacked code.
 44082                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 44083 0000784F C706[1212][9F73]        	mov	word [FixExePatch],ExePatch
 44084                                  					; M068: set pointer to the routine 
 44085                                  					; M068: that detects copy protected
 44086                                  					; M068: apps
 44087                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 44088 00007855 C706[6100][C074]        	mov	word [ChkCopyProt],IsCopyProt
 44089                                  
 44090                                  ; 28/12/2022 - Retro DOS v4.1
 44091                                  %if 0
 44092                                  ;----------------------------------------------------------------------------
 44093                                  
 44094                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 44095                                  
 44096                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44097                                  ;
 44098                                  ;; M020 - begin
 44099                                  ;
 44100                                  ;	call	WhatCPUType
 44101                                  ;	cmp	al,1
 44102                                  ;	jne	short sr_done 		; we need Rational Patch only
 44103                                  ;					;  on 286 systems
 44104                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 44105                                  ;	mov	word [RationalPatchPtr],RationalPatch
 44106                                  ;
 44107                                  ;; M020 - end
 44108                                  ;
 44109                                  ;	jmp	short sr_done
 44110                                  ;
 44111                                  ;patch_vec_seg:				; patch vectors with segment in es
 44112                                  ;	mov	ax,es
 44113                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 44114                                  ;					; NOTE we don't have to patch the 
 44115                                  ;					; offsets as they have been already
 44116                                  ;					; set to the doscode offsets at
 44117                                  ;					; DOSINIT.
 44118                                  ;sr_done:
 44119                                  ;	mov	byte [cs:num_entry],1
 44120                                  ;	pop	ds
 44121                                  ;	retf	; ! far return !
 44122                                  
 44123                                  ;----------------------------------------------------------------------------
 44124                                  ;
 44125                                  ; Procedure Name : WhatCPUType
 44126                                  ;
 44127                                  ; Inputs	 : none
 44128                                  ;
 44129                                  ; Outputs	 : AL = 0 if CPU <  286
 44130                                  ;		      = 1 if CPU == 286
 44131                                  ;		      = 2 if CPU >= 386
 44132                                  ;
 44133                                  ; Regs. Mod.	 : AX
 44134                                  ;
 44135                                  ;----------------------------------------------------------------------------
 44136                                  
 44137                                  WhatCPUType:
 44138                                  	; 25/04/2019 - Retro DOS v4.0
 44139                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 44140                                  
 44141                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 44142                                  
 44143                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 44144                                  ; 	it is called from both CODE and SYSINITSEG.
 44145                                  ;
 44146                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 44147                                  ;  Returns: AX = 0 if 8086 or 8088
 44148                                  ;              = 1 if 80286
 44149                                  ;              = 2 if 80386
 44150                                  
 44151                                  	; 04/11/2022
 44152                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 44153                                  
 44154                                  Get_CPU_Type:	;macro
 44155                                  	pushf
 44156                                  	push	bx			; preserve bx
 44157                                  	xor	bx,bx			; init bx to zero
 44158                                  
 44159                                  	xor	ax,ax			; 0000 into AX
 44160                                  	push	ax			; put it on the stack...
 44161                                  	popf				; ...then shove it into the flags
 44162                                  	pushf				; get it back out of the flags...
 44163                                  	pop	ax			; ...and into ax
 44164                                  	and	ax,0F000h		; mask off high four bits
 44165                                  	cmp	ax,0F000h		; was it all 1's?
 44166                                  	je	short cpu_8086		; aye; it's an 8086 or 8088
 44167                                  
 44168                                  	mov	ax,0F000h		; now try to set the high four bits..
 44169                                  	push	ax
 44170                                  	popf
 44171                                  	pushf
 44172                                  	pop	ax			; ...and see what happens
 44173                                  	and	ax,0F000h		; any high bits set ?
 44174                                  	jz	short cpu_286		; nay; it's an 80286
 44175                                  
 44176                                  cpu_386:				; bx starts as zero
 44177                                  	inc	bx			; inc twice if 386
 44178                                  cpu_286:				; just inc once if 286
 44179                                  	inc	bx
 44180                                  cpu_8086:				; don't inc at all if 086
 44181                                  	mov	ax,bx			; put CPU type value in ax
 44182                                  	pop	bx			; restore original bx
 44183                                  	popf
 44184                                  	
 44185                                  	;endm
 44186                                  
 44187                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 44188                                  	;retn
 44189                                  
 44190                                  	; 04/11/2022
 44191                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 44192                                  	cmp	al,1
 44193                                  	jne	short sr_done 		; we need Rational Patch only
 44194                                  					;  on 286 systems
 44195                                  	mov	word [RationalPatchPtr],RationalPatch
 44196                                  
 44197                                  ;----------------------------------------------------------------------------
 44198                                  %endif	; 28/12/2022
 44199                                  
 44200 0000785B EB05                    	jmp	short sr_done
 44201                                  
 44202                                  patch_vec_seg:				; patch vectors with segment in es
 44203 0000785D 8CC0                    	mov	ax,es
 44204 0000785F E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 44205                                  					; NOTE we don't have to patch the 
 44206                                  					; offsets as they have been already
 44207                                  					; set to the doscode offsets at
 44208                                  					; DOSINIT.
 44209                                  sr_done:
 44210 00007862 2EC606[1278]01          	mov	byte [cs:num_entry],1
 44211 00007868 1F                      	pop	ds
 44212 00007869 CB                      	retf	; ! far return !
 44213                                  
 44214                                  ;----------------------------------------------------------------------------
 44215                                  ;
 44216                                  ; Procedure Name : patch_vec_segments
 44217                                  ;
 44218                                  ; Inputs	 : ax -> has segment address to patch in
 44219                                  ;		   ds -> DOSDATA
 44220                                  ;
 44221                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 44222                                  ;			
 44223                                  ;			0,20-28,3a-3f
 44224                                  ;
 44225                                  ; Regs. Mod.	 : DI,CX,DX,AX
 44226                                  ;
 44227                                  ;----------------------------------------------------------------------------
 44228                                  
 44229                                  patch_vec_segments:
 44230                                  
 44231 0000786A 06                      	push	es
 44232                                  
 44233 0000786B 31C9                    	xor	cx,cx ; 0
 44234 0000786D 8EC1                    	mov	es,cx
 44235                                  
 44236                                  	;mov	di,82h
 44237 0000786F BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 44238                                  
 44239 00007872 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 44240                                  
 44241                                  					; set vectors 20 & 21
 44242                                  	; 04/11/2022
 44243                                  	;mov	cx,2
 44244                                  	; 17/12/2022
 44245                                  	;mov	cl,2
 44246                                  ps_set1:
 44247 00007876 AB                      	stosw
 44248                                  	;add	di,2
 44249                                  	; 17/12/2022
 44250 00007877 47                      	inc	di
 44251 00007878 47                      	inc	di
 44252                                  	;loop	ps_set1
 44253                                  
 44254                                  	; 17/12/2022
 44255 00007879 AB                      	stosw	; int 21h segment
 44256                                  	;inc	di
 44257                                  	;inc	di
 44258                                  
 44259                                  	;add	di,4			; skip int 22h vector
 44260 0000787A 83C706                  	add	di,6 ; *
 44261                                  
 44262 0000787D AB                      	stosw				; set int 23h
 44263 0000787E 83C706                  	add	di,6			; skip int 24h
 44264                                  
 44265                                  					; set vectors 25-28 and 2a-3f
 44266                                  	; 04/11/2022
 44267                                  	;mov	cx,4			; set 4 segments
 44268                                  	; 17/12/2022
 44269 00007881 B104                    	mov	cl,4
 44270                                  ps_set2:
 44271 00007883 AB                      	stosw
 44272                                  	;add	di,2
 44273                                  	; 17/12/2022
 44274 00007884 47                      	inc	di
 44275 00007885 47                      	inc	di
 44276 00007886 E2FB                    	loop	ps_set2
 44277                                  
 44278 00007888 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 44279                                  					;   already be set.
 44280                                  	; 04/11/2022
 44281                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 44282                                  	; 17/12/2022
 44283 0000788B B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 44284                                  ps_set3:
 44285 0000788D AB                      	stosw
 44286                                  	;add	di,2
 44287                                  	; 17/12/2022
 44288 0000788E 47                      	inc	di
 44289 0000788F 47                      	inc	di
 44290 00007890 E2FB                    	loop	ps_set3
 44291                                  
 44292                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 44293                                  ; below. So skip it.
 44294                                  
 44295 00007892 83C708                  	add	di,8			; skip vector 30h & 31h 
 44296                                  	
 44297                                  	; 04/11/2022
 44298                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 44299                                  	; 17/12/2022
 44300 00007895 B10E                    	mov	cl,14			;  sets segs for ints 32h-3fh
 44301                                  ps_set4:
 44302 00007897 AB                      	stosw
 44303                                  	;add	di,2
 44304                                  	; 17/12/2022
 44305 00007898 47                      	inc	di
 44306 00007899 47                      	inc	di
 44307 0000789A E2FB                    	loop	ps_set4
 44308                                  
 44309                                  ; set offset of int2f
 44310                                  
 44311                                  ;if installed
 44312                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 44313                                  ;endif
 44314                                  	;mov	[es:0C3h],ax
 44315 0000789C 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 44316                                  	; 17/12/2022
 44317                                  	; cx = 0
 44318 000078A0 07                      	pop	es
 44319 000078A1 C3                      	retn
 44320                                  
 44321                                  ;---------------------------------------------------------------------------
 44322                                  ;
 44323                                  ; Procedure Name : patch_misc_segments
 44324                                  ;
 44325                                  ; Inputs	 : es = segment to patch in
 44326                                  ;		   ds = dosdata
 44327                                  ;
 44328                                  ; outputs	 : patches in the sharer and other tables in the dos
 44329                                  ;		   with right dos code segment in es
 44330                                  ;
 44331                                  ; Regs Mod	 : DI,SI,CX
 44332                                  ;
 44333                                  ;---------------------------------------------------------------------------
 44334                                  
 44335                                  patch_misc_segments:
 44336                                  
 44337 000078A2 53                      	push	bx
 44338 000078A3 06                      	push	es
 44339 000078A4 50                      	push	ax
 44340                                  
 44341 000078A5 8CC0                    	mov	ax,es			; ax - > DOS segment
 44342                                  	
 44343 000078A7 1E                      	push	ds
 44344 000078A8 07                      	pop	es			; es -> DOSDATA
 44345                                  	
 44346                                  ; initialize the jump table for the sharer...
 44347                                  
 44348                                  	;mov	di,offset dosdata:jshare
 44349                                  	;mov	di,90h
 44350 000078A9 BF[9000]                	mov	di,JShare
 44351                                  	;mov	bx,[0AAAh]
 44352 000078AC 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 44353                                  					; table was patched during the first
 44354                                  					; call to this routine
 44355 000078B0 B90F00                  	mov	cx,15
 44356                                  jumptabloop:
 44357                                  	;add	di,2			; skip offset
 44358                                  	; 17/12/2022
 44359 000078B3 47                      	inc	di
 44360 000078B4 47                      	inc	di
 44361 000078B5 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 44362 000078B8 7405                    	je	short share_patch	; Y: patch in sharer table
 44363                                  					; N: 
 44364 000078BA 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 44365 000078BD 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 44366                                  share_patch:
 44367 000078BF AB                      	stosw				; drop in segment
 44368                                  no_share_patch:
 44369 000078C0 E2F1                    	loop	jumptabloop
 44370                                  					; BUGBUG patching the country info 
 44371                                  					; with dosdata can be done inline
 44372                                  					; in dosinit.
 44373                                  					; for dos 3.3 country info
 44374                                  					; table address
 44375                                  
 44376                                  	;mov	si,offset dosdata:country_cdpg
 44377                                  	;mov	si,122Ah   
 44378 000078C2 BE[2A12]                	mov	si,COUNTRY_CDPG
 44379                                  					; initialize double word
 44380                                  					; pointers with dosdata in ds
 44381                                  	;mov	[si+4Fh],ds
 44382                                  	;mov	[si+54h],ds
 44383                                  	;mov	[si+59h],ds
 44384                                  	;mov	[si+5Eh],ds
 44385                                  	;mov	[si+80h],ds
 44386                                  	;mov	[si+63h],ds
 44387 000078C5 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 44388 000078C8 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 44389 000078CB 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 44390 000078CE 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 44391 000078D1 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 44392 000078D5 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 44393                                  
 44394                                  					; fastopen routines are in doscode
 44395                                  					; so patch with doscode seg in ax
 44396                                  
 44397                                  	;mov	si,offset dosdata:fastopentable
 44398                                  	;mov	si,0D30h
 44399 000078D8 BE[300D]                	mov	si,FastOpenTable
 44400                                  
 44401                                  	; 17/12/2022
 44402                                  	; bx = [TEMP_DOSLOC]
 44403 000078DB 83FBFF                  	cmp	bx,-1
 44404                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 44405 000078DE 7405                    	je	short fast_patch	; Y: patch segment
 44406                                  	;mov	cx,[TEMP_DOSLOC]
 44407                                  					; Q: has fastopen patched in it's
 44408                                  					;    segment
 44409                                  	; 17/12/2022
 44410 000078E0 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 44411                                  	;;cmp	cx,[si+4]
 44412                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 44413 000078E3 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 44414                                  
 44415                                  fast_patch:
 44416                                  	;mov	[si+4],ax
 44417 000078E5 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 44418                                  no_fast_patch:
 44419                                  	; 17/12/2022
 44420                                  	; cx = 0
 44421 000078E8 58                      	pop	ax
 44422 000078E9 07                      	pop	es
 44423 000078EA 5B                      	pop	bx
 44424                                  
 44425 000078EB C3                      	retn
 44426                                  
 44427                                  ;--------------------------------------------------------------------------
 44428                                  ;
 44429                                  ; Procedure Name : patch_offset
 44430                                  ; 
 44431                                  ; Inputs	 : NONE
 44432                                  ;
 44433                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 44434                                  ;		   0,20-28,3a-3f, and 30,31
 44435                                  ;
 44436                                  ;
 44437                                  ; Regs. Mod	 : AX,DI,CX
 44438                                  ;--------------------------------------------------------------------------
 44439                                  
 44440                                  patch_offset:
 44441 000078EC 06                      	push	es		; preserve es
 44442                                  
 44443 000078ED 31C0                    	xor	ax,ax
 44444 000078EF 8EC0                    	mov	es,ax
 44445                                  				; set default divide trap address
 44446                                  	;mov	word ptr es:[0],offset dosdata:ldivov
 44447                                  	;mov	word [es:0],108Ah
 44448 000078F1 26C7060000[8A10]        	mov	word [es:0],ldivov
 44449                                  
 44450                                  	;mov	di,80h
 44451 000078F8 BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 44452                                  	;mov	ax,offset dosdata:lirett
 44453                                  	;mov	ax,10DAh
 44454 000078FB B8[DA10]                	mov	ax,lirett
 44455                                  				; set vectors 20 & 21 to point to iret.
 44456                                  	; 17/12/2022
 44457                                  	; cx = 0
 44458                                  
 44459                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 44460                                  po_iset1:
 44461 000078FE AB                      	stosw	; int 20h offset
 44462                                  	;add	di,2 ; *
 44463                                  	;loop	po_iset1
 44464                                  	; 17/12/2022
 44465 000078FF 47                      	inc	di
 44466 00007900 47                      	inc	di
 44467 00007901 AB                      	stosw	; int 21h offset
 44468                                  
 44469                                  	;add	di,4		; skip vector 22h
 44470                                  	; 17/12/2022
 44471 00007902 83C706                  	add	di,6 ; *
 44472                                  
 44473 00007905 AB                      	stosw			; set offset of 23h
 44474                                  	;add	di,6		; skip 24h
 44475                                  	; 19/09/2023
 44476 00007906 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 44477                                  
 44478                                  				; set vectors 25-28 and 2a-3f to iret.
 44479                                  	; 04/11/2022
 44480                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 44481                                  	; 19/09/2023
 44482                                  	; 17/12/2022
 44483                                  	;mov	cl,4		; sets offsets for ints 25h-28h
 44484                                  po_iset2:
 44485 00007909 AB                      	stosw		; set offset for int 28h ; 19/09/2023
 44486                                  	;add	di,2
 44487                                  	; 19/09/2023
 44488                                  	; 17/12/2022
 44489                                  	;inc	di
 44490                                  	;inc	di
 44491                                  	; 19/09/2023
 44492                                  	;loop	po_iset2
 44493                                  
 44494                                  	;add	di,4		; skip vector 29h
 44495                                  	; 19/09/2023
 44496 0000790A 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 44497                                  
 44498                                  	; 04/11/2022
 44499                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 44500                                  	; 17/12/2022
 44501                                  	;mov	cl,6		; sets offsets for ints 2ah-2fh
 44502 0000790D B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 44503                                  po_iset3:
 44504 0000790F AB                      	stosw
 44505                                  	;add	di,2
 44506                                  	; 17/12/2022
 44507 00007910 47                      	inc	di
 44508 00007911 47                      	inc	di
 44509 00007912 E2FB                    	loop	po_iset3
 44510                                  
 44511                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 44512                                  ; below. So skip it.
 44513                                  
 44514                                  	;add	di,8		; skip vector 30h & 31h
 44515                                  	; 17/12/2022
 44516 00007914 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 44517                                  
 44518                                  	; 04/11/2022
 44519                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 44520                                  				;  sets offsets for ints 32h-3fh
 44521                                  	; 17/12/2022
 44522 00007917 B10E                    	mov	cl,14 ; 26/06/2019
 44523                                  po_iset4:
 44524 00007919 AB                      	stosw
 44525                                  	;add	di,2
 44526                                  	; 17/12/2022
 44527 0000791A 47                      	inc	di
 44528 0000791B 47                      	inc	di
 44529 0000791C E2FB                    	loop	po_iset4
 44530                                  
 44531                                  ;if installed
 44532                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 44533                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 44534 0000791E 26C706BC00[C610]        	mov	word [es:(2Fh*4)],lint2f
 44535                                  ;endif
 44536                                  
 44537                                  ; set up entry point call at vectors 30-31h
 44538                                  	;mov	byte [es:0C0h],0EAh
 44539 00007925 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 44540                                  	;mov	word [es:0C1h],10D0h
 44541                                  
 44542 0000792B 26C706C100[D010]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 44543                                  
 44544                                  							; 19/09/2023
 44545                                  	;mov	word [es:80h],1094h
 44546 00007932 26C7068000[9410]        	mov	word [es:addr_int_abort],lquit		; int 20h
 44547                                  	;mov	word [es:84h],109Eh
 44548 00007939 26C7068400[9E10]        	mov	word [es:addr_int_command],lcommand	; int 21h
 44549                                  	;mov	word [es:94h],10A8h
 44550 00007940 26C7069400[A810]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 44551                                  	;mov	word [es:98h],10B2h
 44552 00007947 26C7069800[B210]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 44553                                  	;mov	word [es:9Ch],10BCh
 44554 0000794E 26C7069C00[BC10]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 44555                                  
 44556                                  	; 17/12/2022
 44557                                  	; CX = 0
 44558 00007955 07                      	pop	es		; restore es
 44559 00007956 C3                      	retn
 44560                                  
 44561                                  ;--------------------------------------------------------------------------
 44562                                  ;
 44563                                  ; 	Procedure Name	:	patch_in_nops
 44564                                  ;
 44565                                  ; 	Entry		: 	ES -> DOSDATA
 44566                                  ;
 44567                                  ;	Regs Mod	: 	cx, di
 44568                                  ;
 44569                                  ;	Description:
 44570                                  ;		This routine patches in 2 nops at the offsets specified in 
 44571                                  ;	patch_table. This basically enables the low mem stub to start 
 44572                                  ;	making XMS calls.
 44573                                  ;
 44574                                  ;--------------------------------------------------------------------------
 44575                                  
 44576                                  	; 04/11/2022
 44577                                  	; (MSDOS 5.0 MSDOS.SYS)
 44578                                  	; DOSCODE:0BC50h
 44579                                  
 44580                                  patch_table:	; label	byte
 44581                                  	;dw	offset dosdata:i0patch
 44582                                  	;dw	offset dosdata:i20patch
 44583                                  	;dw	offset dosdata:i21patch
 44584                                  	;dw	offset dosdata:i25patch
 44585                                  	;dw	offset dosdata:i26patch
 44586                                  	;dw	offset dosdata:i27patch
 44587                                  	;dw	offset dosdata:i2fpatch
 44588                                  	;dw	offset dosdata:cpmpatch
 44589 00007957 [8A10]                  	dw	i0patch
 44590 00007959 [9410]                  	dw	i20patch
 44591 0000795B [9E10]                  	dw	i21patch
 44592 0000795D [A810]                  	dw	i25patch
 44593 0000795F [B210]                  	dw	i26patch
 44594 00007961 [BC10]                  	dw	i27patch
 44595 00007963 [C610]                  	dw	i2fpatch
 44596 00007965 [D010]                  	dw	cpmpatch
 44597                                  
 44598                                  patch_table_size equ ($-patch_table)/2
 44599                                  
 44600                                  patch_in_nops:
 44601 00007967 50                      	push	ax
 44602 00007968 56                      	push	si
 44603 00007969 BE[5779]                	mov	si,patch_table
 44604 0000796C B89090                  	mov	ax,9090h ; nop, nop
 44605                                  	; 17/12/2022
 44606                                  	; cx = 0
 44607                                  	;mov	cx,8
 44608                                  	;mov	cx,patch_table_size ; 8
 44609 0000796F B108                    	mov	cl,patch_table_size ; 8
 44610                                  pin_loop:
 44611 00007971 2E8B3C                  	mov	di,[cs:si]
 44612 00007974 AB                      	stosw
 44613                                  	;add	si,2
 44614                                  	; 17/12/2022
 44615 00007975 46                      	inc	si
 44616 00007976 46                      	inc	si
 44617 00007977 E2F8                    	loop	pin_loop
 44618 00007979 5E                      	pop	si
 44619 0000797A 58                      	pop	ax
 44620 0000797B C3                      	retn
 44621                                  
 44622                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 44623                                  ; ---------------------------------------------------------------------------
 44624                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 44625                                  ; ---------------------------------------------------------------------------
 44626                                  
 44627                                  	; 05/12/2022 - temporary ; (paragrapgh alinment)
 44628                                  DOSCODE_END:
 44629                                  	;times	9 db 0	; db 9 dup(0)
 44630                                  	; 18/12/2022
 44631                                  	;dw	0	; times 2 db 0
 44632                                  	; 23/03/2024 - Retro DOS v4.1
 44633 0000797C 00<rep 7h>              	times	7 db 0
 44634                                  
 44635                                  ;align 16
 44636                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 44637                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 44638                                  
 44639                                  ; ---------------------------------------------------------------------------
 44640                                  
 44641                                  
 44642                                  ;memstrt label word
 44643                                  ; ---------------------------------------------------------------------------
 44644                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 44645                                  ; ---------------------------------------------------------------------------
 44646                                  
 44647                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 44648                                  
 44649                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 44650                                  ; the dos initialization segment
 44651                                  
 44652                                  ;ifndef ROMDOS
 44653                                  
 44654                                  ;doscode ends
 44655                                  
 44656                                  ;else
 44657                                  
 44658                                  ;;dosinitseg ends
 44659                                  
 44660                                  ;endif ; ROMDOS
 44661                                  
 44662                                  ;============================================================================
 44663                                  
 44664                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 44665                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 44666                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 44667                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 44668                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 44669                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 44670                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 44671                                  
 44672                                  ;; burasý doscode sonu
 44673                                  
 44674                                  ;============================================================================
 44675                                  ; DOSDATA
 44676                                  ;============================================================================
 44677                                  ; 29/04/2019 - Retro DOS 4.0
 44678                                  
 44679                                  ;[BITS 16]
 44680                                  
 44681                                  ;[ORG 0]
 44682                                  
 44683                                  ; 25/04/2019 - Retro DOS v4.0
 44684                                  
 44685                                  ;============================================================================
 44686                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 44687                                  ;============================================================================
 44688                                  
 44689                                  ;align 16
 44690                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 44691                                  	; (4970 bytes for MSDOS 6.21)
 44692                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 44693                                  
 44694                                  ;============================================================================
 44695                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 44696                                  ;============================================================================
 44697                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44698                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 44699                                  ; 16/07/2018 - Retro DOS 3.0	
 44700                                  
 44701                                  ;Break <Initialized data and data used at DOS initialization>
 44702                                  ;----------------------------------------------------------------------------
 44703                                  
 44704                                  ; We need to identify the parts of the data area that are relevant to tasks
 44705                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 44706                                  ; data will be gathered with the system code. The process data under 2.x will
 44707                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 44708                                  ;
 44709                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 44710                                  ; describing that data item.
 44711                                  
 44712                                  ;DOSDATA SEGMENT
 44713                                  
 44714                                  ; 04/11/2022
 44715                                  ;[ORG 0]
 44716                                  
 44717                                  ; ----------------------------------------------------------------------------
 44718                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44719                                  ; ----------------------------------------------------------------------------
 44720                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 44721                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 44722                                  ; ----------------------------------------------------------------------------
 44723                                  
 44724                                  ; 04/11/2022
 44725                                  
 44726                                  ;DOSDATA:0000h
 44727                                  
 44728 00007983 90<rep Dh>              align 16
 44729                                  
 44730                                  ; ----------------------------------------------------------------------------
 44731                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44732                                  ; ----------------------------------------------------------------------------
 44733                                  
 44734                                  segment .data  vstart=0 ; 06/12/2022
 44735                                  								
 44736                                  ; ============================================================================
 44737                                  
 44738                                  ; 06/12/2022
 44739                                  ;DOSDATASTART equ $
 44740                                  DOSDATASTART:
 44741                                  
 44742                                  
 44743                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 44744                                  
 44745                                  	;; 03/11/2022
 44746                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 44747                                  
 44748                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44749                                  	;db	4 dup (?)	
 44750 00000000 00<rep 4h>              	times	4 db 0
 44751                                  
 44752                                  	; 29/04/2019 - Retro DOS v4.0 modification
 44753                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 44754                                  	;dw	0
 44755                                  
 44756                                  	;EVEN
 44757                                  
 44758                                  ;align 2
 44759                                  
 44760                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 44761                                  ; area compatability. This location must be incremented EACH TIME the data
 44762                                  ; area here gets mucked with.
 44763                                  ;
 44764                                  ; Also, do NOT change this position relative to DOSDATA:0.
 44765                                  
 44766                                  MSCT001S:	; LABEL BYTE
 44767                                  	
 44768                                  DataVersion:	
 44769 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 44770                                  
 44771                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 44772                                  ;hkn; been removed to DOSCODE above
 44773                                  
 44774                                  ;M044
 44775                                  ; First part of save area for saving last para of Window memory
 44776                                  
 44777                                  WinoldPatch1:	; db 8 dup (?)	;M044
 44778 00000006 00<rep 8h>              	times	8 db 0
 44779                                  
 44780                                  	; MSDOS 6.21 DOSDATA:000Eh
 44781                                  MYNUM:			; Offset 000Eh
 44782 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 44783                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 44784 00000010 0000                    	dw	0
 44785                                  OpenLRU:
 44786 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 44787                                  OEM_HANDLER: 		
 44788 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 44789                                  
 44790                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 44791                                  ;;			way that we leave DOS???? - jgl
 44792                                  
 44793                                  LeaveAddr:
 44794 00000018 [0804]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 44795                                  RetryCount:		
 44796 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 44797                                  RetryLoop:
 44798 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 44799                                  LastBuffer:
 44800 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 44801                                  CONTPOS:
 44802 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 44803                                  arena_head:
 44804 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 44805                                  
 44806                                  ;; 16/07/2018
 44807                                  ;;***************************************************************************
 44808                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 44809                                  ;;***************************************************************************
 44810                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 44811                                  ;;
 44812                                  ;;	AH = 52h
 44813                                  ;;
 44814                                  ;;	on return:
 44815                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 44816                                  ;;		Known "invars" fields follow (varies with DOS version):
 44817                                  ;;
 44818                                  ;;	Offset Size		 Description
 44819                                  ;;
 44820                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 44821                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 44822                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 44823                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 44824                                  ;;		      0 indicates no unread input (DOS 3.x)
 44825                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 44826                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 44827                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 44828                                  ;;	  08   dword  pointer to $CLOCK device driver
 44829                                  ;;	  0C   dword  pointer to CON device driver
 44830                                  ;;	  10   byte   number of logical drives in system
 44831                                  ;;	  11   word   maximum bytes/block of any block device
 44832                                  ;;	  13   dword  pointer to DOS cache buffer header
 44833                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 44834                                  ;;		      point to the next device in device chain
 44835                                  ;;
 44836                                  ;;***************************************************************************
 44837                                  
 44838                                  ; The following block of data is used by SYSINIT. 
 44839                                  ; Do not change the order or size of this block
 44840                                  
 44841                                  ;SYSINITVAR:
 44842                                  ;----------------------------------------------------------------------------
 44843                                  SYSINITVARS:
 44844                                  DPBHEAD:
 44845 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 44846                                  SFT_ADDR:
 44847 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 44848                                  BCLOCK:
 44849 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 44850                                  BCON:
 44851 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 44852                                  MAXSEC:
 44853 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 44854                                  BUFFHEAD:
 44855 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 44856                                  CDSADDR:
 44857 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 44858                                  SFTFCB:
 44859 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 44860                                  KEEPCOUNT:
 44861 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 44862                                  NUMIO:
 44863 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 44864                                  CDSCOUNT:
 44865 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 44866                                  
 44867                                  ; A fake header for the NUL device
 44868                                  NULDEV:
 44869 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 44870                                  	;dw	8004h
 44871 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 44872 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 44873 00000050 [CC0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 44874 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 44875                                  SPLICES:
 44876 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 44877                                  
 44878                                  Special_Entries:
 44879 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 44880                                  UU_IFS_DOS_CALL:
 44881 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 44882                                  ; 
 44883                                  ; UU_IFS_HEADER:
 44884                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 44885                                  
 44886                                  ChkCopyProt:
 44887 00000061 0000                    	dw	0	; M068
 44888                                  A20OFF_PSP:
 44889 00000063 0000                    	dw	0	; M068
 44890                                  BUFFERS_PARM1:
 44891 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 44892                                  BUFFERS_PARM2:
 44893 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 44894                                  BOOTDRIVE:
 44895 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 44896                                  DDMOVE:
 44897 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 44898                                  EXT_MEM_SIZE:
 44899 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 44900                                  
 44901                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 44902                                  ;
 44903                                  ; Replaced by next two declarations
 44904                                  ;
 44905                                  ;UU_BUF_HASH_PTR:
 44906                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 44907                                  ;UU_BUF_HASH_COUNT:
 44908                                  ;	dw	1	; [SYSTEM] number of Hash entries
 44909                                  
 44910                                  BufferQueue:
 44911 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 44912                                  DirtyBufferCount:
 44913 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 44914                                  			; BUGBUG ---- change to byte
 44915                                  SC_CACHE_PTR:
 44916 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 44917                                  SC_CACHE_COUNT:
 44918 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 44919                                  BuffInHMA:
 44920 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 44921                                  LoMemBuff:
 44922 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 44923                                  			;  in Low mem when buffs are in HMA
 44924                                  ;
 44925                                  ; All variables which have UU_ as prefix can be reused for other
 44926                                  ; purposes and can be renamed. All these variables were used for
 44927                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 44928                                  ; manager ---- MOHANS
 44929                                  ;
 44930                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 44931                                  UU_BUF_EMS_FIRST_PAGE:	
 44932 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 44933                                  
 44934                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 44935                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 44936                                  ;	dw	0			
 44937                                  
 44938                                  CL0FATENTRY:
 44939 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 44940                                  			; is used in pack/unpack rts.
 44941                                  			; in fat.asm if cluster 0 is specified.
 44942                                  			; SR;
 44943                                  IoStatFail:
 44944 00000083 00                      	db	0	; IoStatFail has been added to 
 44945                                  			; record a fail on an I24 
 44946                                  			; issued from IOFUNC on a status call. 
 44947                                  
 44948                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 44949                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 44950                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 44951                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 44952                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 44953                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 44954                                  ;
 44955                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 44956                                  						; state of the 	buffers page.
 44957                                  						; This one byte is retained to 
 44958                                  						; keep the size of this data 
 44959                                  						; block the same.;
 44960                                  ALLOCMSAVE:
 44961 00000084 00                      	db	0	; M063: temp var. used to 
 44962                                  			; M063: save alloc method in
 44963                                  			; M063: msproc.asm
 44964                                  A20OFF_COUNT:
 44965 00000085 00                      	db	0	; M068: indiactes the # of 
 44966                                  			; M068: int 21 calls for 
 44967                                  			; M068: which A20 is off
 44968                                  DOS_FLAG:
 44969 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 44970                                  			; definitions
 44971                                  UNPACK_OFFSET:
 44972 00000087 0000                    	dw	0	; saves pointer to the start
 44973                                  			; of unpack code in exepatch.
 44974                                  			; asm.
 44975                                  UMBFLAG:
 44976 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 44977                                  			; M003: link state of the UMBs
 44978                                  			; M003: whether linked or not 
 44979                                  			; M003: to the DOS arena chain
 44980                                  SAVE_AX:
 44981 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 44982                                  			; M000: in msproc.asm
 44983                                  UMB_HEAD:
 44984 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 44985                                  			; M000: the first umb arena by 
 44986                                  			; M000: BIOS sysinit.
 44987                                  START_ARENA:
 44988 0000008E 0100                    	dw	1	; M000: this is the first arena 
 44989                                  			; M000: from which DOS will 
 44990                                  			; M000: start its scan for alloc.
 44991                                  
 44992                                  ; End of SYSINITVar block
 44993                                  ;----------------------------------------------------------------------------
 44994                                  
 44995                                  ; 25/04/2019 - Retro DOS v4.0
 44996                                  
 44997                                  ; 16/07/2018
 44998                                  ; MSDOS 3.3 (& MDOS 6.0)
 44999                                  
 45000                                  ;
 45001                                  ; Sharer jump table
 45002                                  ;
 45003                                  
 45004                                  ;PUBLIC	JShare
 45005                                  	;EVEN
 45006                                  
 45007                                  ;JShare	LABEL	DWORD
 45008                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 45009                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 45010                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 45011                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 45012                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 45013                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 45014                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 45015                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 45016                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 45017                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 45018                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 45019                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 45020                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 45021                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 45022                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 45023                                  
 45024                                  align 2
 45025                                  
 45026                                  JShare:
 45027 00000090 [FB06]0000              		DW	BadCall,0
 45028 00000094 [FF06]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 45029 00000098 [FF06]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 45030 0000009C [FB06]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 45031 000000A0 [FB06]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 45032 000000A4 [FB06]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 45033 000000A8 [FB06]0000              set_block:	DW	BadCall,0  ; 6   set_block
 45034 000000AC [FB06]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 45035 000000B0 [FF06]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 45036 000000B4 [FB06]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 45037 000000B8 [FB06]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 45038 000000BC [FB06]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 45039 000000C0 [FF06]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 45040 000000C4 [FB06]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 45041 000000C8 [FB06]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 45042                                  
 45043                                  
 45044                                  ;============================================================================
 45045                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 45046                                  ;============================================================================
 45047                                  ; 25/04/2019 - Retro DOS 4.0 
 45048                                  ; 16/07/2018 - Retro DOS 3.0	
 45049                                  
 45050                                  ;Break <Initialized data and data used at DOS initialization>
 45051                                  ;----------------------------------------------------------------------------
 45052                                  
 45053                                  ; We need to identify the parts of the data area that are relevant to tasks
 45054                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 45055                                  ; data will be gathered with the system code.  The process data under 2.x will
 45056                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 45057                                  ;
 45058                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 45059                                  ; describing that data item.
 45060                                  
 45061                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 45062                                  
 45063                                  ;
 45064                                  ; Table of routines for assignable devices
 45065                                  ;
 45066                                  ; MSDOS allows assignment if the following standard devices:
 45067                                  ;   stdin  (usually CON input)
 45068                                  ;   stdout (usually CON output)
 45069                                  ;   auxin  (usually AUX input)
 45070                                  ;   auxout (usually AUX output)
 45071                                  ;   stdlpt (usually PRN output)
 45072                                  ;
 45073                                  ; SPECIAL NOTE:
 45074                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 45075                                  ;   If we're not at end-of-file, then we always say that we have a character.
 45076                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 45077                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 45078                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 45079                                  ;   as EOF).
 45080                                  
 45081                                  ; Default SFTs for boot up
 45082                                  
 45083                                  		;PUBLIC	SFTABL
 45084                                  
 45085                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 45086 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 45087 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 45088 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 45089                                  		;times 295 db 0 ; MSDOS 6.0
 45090 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 45091                                  
 45092                                  ; the next two variables relate to the position of the logical stdout/stdin
 45093                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 45094                                  ; console.
 45095                                  		; DOSDATA:01F9h (MSDOS 6.21)
 45096 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 45097 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 45098                                  					;	   of buffered input call
 45099 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 45100 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 45101                                  		; DOSDATA:02FEh (MSDOS 6.21)
 45102 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 45103 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 45104 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 45105                                  switch_character:
 45106 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 45107 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 45108 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 45109 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 45110 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 45111                                  
 45112                                  ; The following table is a list of addresses that the sharer patches to be
 45113                                  ; PUSH AX to enable the critical sections
 45114                                  
 45115                                  		; DOSDATA:0315h (MSDOS 6.21)
 45116                                  
 45117                                  ;PUBLIC	CritPatch
 45118                                  
 45119                                  CritPatch:	; LABEL WORD
 45120                                  
 45121                                  ;IRP sect,<critDisk,critDevice>
 45122                                  
 45123                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 45124                                  ;
 45125                                  ;SR; Change code patch address to a variable in data segment
 45126                                  ;
 45127                                  ;       dw OFFSET DOSDATA: redir_patch
 45128                                  ;       dw OFFSET DOSDATA: redir_patch
 45129                                  ;
 45130                                  ;;hkn	Short_Addr  E&sect
 45131                                  ;;hkn	Short_Addr  L&sect
 45132                                  ;
 45133                                  ;ELSE
 45134                                  ;	DW	0
 45135                                  ;	DW	0
 45136                                  ;ENDIF
 45137                                  ;ENDM
 45138                                  ;	DW	0
 45139                                  
 45140                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 45141                                   
 45142 00000315 [0C0D]                  	dw 	redir_patch
 45143 00000317 [0C0D]                  	dw 	redir_patch			
 45144 00000319 [0C0D]                  	dw	redir_patch
 45145 0000031B [0C0D]                  	dw 	redir_patch
 45146                                  
 45147 0000031D 0000                    	dw	0
 45148                                  
 45149                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 45150                                  ; Also, IBM server 1.0 requires this also.
 45151                                  
 45152                                  	;EVEN			; Force swap area to start on word boundry
 45153 0000031F 90                      align 2
 45154                                  	;PUBLIC	SWAP_START
 45155                                  SWAP_START:	; LABEL BYTE
 45156 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 45157 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 45158 00000322 FF                      WPERR:		db -1		; Write protect error flag
 45159 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 45160 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 45161                                  
 45162                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 45163 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 45164 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 45165                                  ; end warning
 45166                                   
 45167 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 45168                                  
 45169 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 45170 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 45171 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 45172 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 45173 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 45174 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 45175                                  ;				; F.C. 2/17/86
 45176 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 45177 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 45178                                  ;align 2
 45179                                  SWAP_ALWAYS:	; 05/08/2018
 45180 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 45181                                  				;   extended error type stuff.
 45182                                  				;   NOTE: does not have Correct value on
 45183                                  				;   1-12, OEM, Get/Set CurrentPDB,
 45184                                  				;   GetExtendedError system calls)
 45185 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 45186 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 45187 00000340 0000                    FirstArena:	dw 0		; first free block found
 45188 00000342 0000                    BestArena:	dw 0		; best free block found
 45189 00000344 0000                    LastArena:	dw 0		; last free block found
 45190 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 45191 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 45192 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 45193 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 45194 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 45195 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 45196 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 45197                                  
 45198                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 45199                                  	;EVEN
 45200 0000034F 90                      align 2
 45201                                  		; DOSDATA:0350h (MSDOS 6.21)
 45202 00000350 00                      DAY:		db 0		; Day of month
 45203 00000351 00                      MONTH:		db 0		; Month of year
 45204 00000352 0000                    YEAR:		dw 0		; Year (with century)
 45205 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 45206 00000356 00                      WEEKDAY:	db 0		; Day of week
 45207                                  ; end warning
 45208                                  
 45209 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 45210 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 45211 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 45212                                  
 45213                                  ; Combination of all device call parameters
 45214                                  	;PUBLIC	DEVCALL 	;
 45215                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 45216                                  DEVCALL: ; 08/08/2018
 45217 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 45218 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 45219 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 45220 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 45221 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 45222                                  
 45223                                  	;PUBLIC	CALLUNIT
 45224                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 45225                                  CALLFLSH: ; LABEL   WORD	;
 45226 00000367 00                      CALLMED:	db 0		; media byte
 45227                                  CALLBR:	  ; LABEL   DWORD	;
 45228                                  	;PUBLIC	CALLXAD 	;
 45229                                  CALLXAD:  ; LABEL   DWORD	;
 45230 00000368 00                      CALLRBYT:	db 0		;
 45231                                  	;PUBLIC	CALLVIDM	;
 45232                                  CALLVIDM: ; LABEL   DWORD	;
 45233 00000369 00<rep 3h>              	times 3 db 0	;
 45234                                  	;PUBLIC CallBPB		;
 45235                                  CALLBPB:  ; LABEL   DWORD	;
 45236                                  CALLSCNT:			;
 45237 0000036C 0000                    		dw 0		;
 45238                                  	;PUBLIC	CALLSSEC	;
 45239                                  CALLSSEC: ; LABEL   WORD	;
 45240 0000036E 0000                    		dw 0		;
 45241 00000370 00000000                CALLVIDRW:	dd 0		;
 45242                                  ;MSDOS 6.0
 45243 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 45244 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 45245                                  
 45246                                  ; Same as above for I/O calls	;
 45247                                  				;
 45248                                  	;PUBLIC	IOCall		;
 45249                                  ;IOCALL	SRHEAD	<>		;
 45250                                  IOCALL:	; 07/08/2018
 45251 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 45252 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 45253 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 45254 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 45255 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 45256                                  IOFLSH:	  ; LABEL   WORD	;
 45257                                          ;PUBLIC  IORCHR		;
 45258                                  IORCHR:	  ; LABEL   BYTE	;
 45259 00000389 00                      IOMED:		db 0		;
 45260 0000038A 00000000                IOXAD:		dd 0		;
 45261 0000038E 0000                    IOSCNT:		dw 0		;	
 45262 00000390 0000                    IOSSEC:		dw 0		;
 45263                                  
 45264                                  ; Call struct for DSKSTATCHK	;
 45265 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 45266 00000393 00                      		db 0
 45267 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 45268 00000395 0000                    DSKSTST:	dw 0		;
 45269 00000397 00<rep 8h>              	times 8	db 0		;
 45270 0000039F 00                      DSKCHRET:	db 0		;
 45271                                  
 45272                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 45273                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 45274                                  ;hkn   short_addr  DEVIOBUF	;
 45275                                  	
 45276 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 45277 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 45278 000003A4 0100                    DSKSTCNT:	dw 1		;
 45279 000003A6 0000                    		dw 0		;
 45280                                  
 45281 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 45282                                  
 45283                                  ;MSDOS 6.0
 45284                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 45285 000003A9 00000000                		dd 0		;MS. position
 45286 000003AD 00000000                		dd 0		;MS. length
 45287                                  
 45288                                  ;hkn; the foll. was moved from dosmes.asm.
 45289                                  
 45290                                  	;EVEN
 45291 000003B1 90                      align 2				; needed to maintain offsets
 45292                                  
 45293                                  		; DOSDATA:03B2h (MSDOS 6.21)
 45294                                  USERNUM:
 45295 000003B2 0000                     		dw 0		; 24 bit user number
 45296 000003B4 00                      		db 0
 45297                                  ;IF IBM
 45298                                  ;IF IBMCOPYRIGHT
 45299                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 45300                                  ;ELSE
 45301                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 45302                                  ;ENDIF
 45303                                  ;ELSE
 45304 000003B5 FF                      OEMNUM:		DB 0FFh
 45305                                  ;ENDIF
 45306                                  
 45307                                  ;============================================================================
 45308                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 45309                                  ;============================================================================
 45310                                  ; 25/04/2019 - Retro DOS 4.0
 45311                                  
 45312                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 45313                                  ; ----------------------------------------------------------
 45314                                  ; This data section which was named as uninitialized data
 45315                                  ; (as overlayed by initialization code) but follows 
 45316                                  ; initialized data section from DOSDATA:03B6h address
 45317                                  ; (in otherwords, the method is different than MSDOS 3.3,
 45318                                  ; and there is not overlaying..)
 45319                                  ; **********************************************************
 45320                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 45321                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 45322                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 45323                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 45324                                  ; TIMEBUF is at offset 03B6h.
 45325                                  ; **********************************************************	
 45326                                  
 45327                                  ;Break <Uninitialized data overlayed by initialization code>
 45328                                  ;----------------------------------------------------------------------------
 45329                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 45330                                  ; Init code overlaps with data area below
 45331                                  
 45332                                  ; 	ORG     0
 45333                                  
 45334                                  MSDAT001S:	; label byte
 45335                                  
 45336                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 45337                                  TIMEBUF: ;	times 6 db 0
 45338 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 45339 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 45340                                  
 45341                                  ; The following areas are used as temp buffer in EXEC system call
 45342                                  
 45343                                  ; DOSDATA:03BEh
 45344                                  OPENBUF: ;times 64  dw	0
 45345 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 45346                                  RENBUF:	
 45347 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 45348                                  
 45349                                  ; Buffer for search calls
 45350                                  SEARCHBUF:	
 45351 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 45352                                  DUMMYCDS:  ;times 88 db 0
 45353 000004F3 00<rep 58h>             	times	curdirLen db 0
 45354                                  
 45355                                  ; End of contiguous buffer
 45356                                   
 45357                                  ; Temporary directory entry for use by many routines. Device directory
 45358                                  ; entries (bogus) are built here.
 45359                                  
 45360                                  ; DOSDATA:054Bh
 45361                                  
 45362                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 45363                                  
 45364                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 45365                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 45366                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 45367                                  
 45368                                  NAME1:	
 45369 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 45370                                  NAME2:
 45371 00000557 00<rep Dh>              	times	13 db	0 		;
 45372                                  DESTSTART:
 45373 00000564 0000                    	dw	0			;
 45374                                          ;DB	((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 45375                                  	;times	5  db	0
 45376 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 45377                                  
 45378                                  ; End Temporary directory entry.
 45379                                  
 45380 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 45381                                  EXTFCB:	
 45382 0000056C 00                      	db	0		; TRUE => extended FCB in use
 45383                                  SATTRIB:
 45384 0000056D 00                      	db	0		; Storage for search attributes
 45385                                  OPEN_ACCESS:
 45386 0000056E 00                      	db	0		; access of open system call
 45387                                  FOUNDDEL:
 45388 0000056F 00                      	db	0		; true => file was deleted
 45389                                  FOUND_DEV:
 45390 00000570 00                      	db	0		; true => search found a device
 45391                                  FSPLICE:
 45392 00000571 00                      	db	0		; true => do a splice in transpath
 45393                                  FSHARING:
 45394 00000572 00                      	db	0		; TRUE => no redirection
 45395                                  SECCLUSPOS:
 45396 00000573 00                      	db	0		; Position of first sector within cluster
 45397 00000574 00                      TRANS:	db	0		;
 45398 00000575 00                      READOP:	db	0		;
 45399                                  THISDRV:
 45400 00000576 00                      	db	0		;
 45401                                  CLUSFAC:
 45402 00000577 00                      	db	0		;
 45403                                  CLUSSPLIT:
 45404 00000578 00                      	db	0		;
 45405                                  INSMODE:
 45406 00000579 00                      	db	0		; true => insert mode in buffered read
 45407 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 45408 0000057B 00                      VOLID:	db	0		;
 45409                                  EXIT_TYPE:
 45410 0000057C 00                      	db	0		; type of exit...
 45411                                   
 45412                                  	;EVEN
 45413                                  
 45414 0000057D 90                      align 2
 45415                                  
 45416                                  ; DOSDATA:057Eh
 45417                                  
 45418                                  ; WARNING - the following two items are accessed as a word
 45419                                  
 45420                                  CREATING:
 45421 0000057E 00                      	db	0		; true => creating a file
 45422 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 45423                                  				; = DIRFREE iff BUGBUG
 45424                                  EXITHOLD:
 45425 00000580 00000000                	dd	0		; Temp location for proc terminate
 45426                                  USER_SP:
 45427 00000584 0000                    	dw	0		; User SP for system call
 45428                                  USER_SS:
 45429 00000586 0000                    	dw	0		; User SS for system call
 45430                                  CONTSTK:
 45431 00000588 0000                    	dw	0		;
 45432                                  THISDPB:
 45433 0000058A 00000000                	dd	0		;
 45434                                  CLUSSAVE:
 45435 0000058E 0000                    	dw	0		;
 45436                                  CLUSSEC:
 45437 00000590 00000000                	dd	0		;>32mb			AC0000
 45438                                  PREREAD:
 45439 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 45440 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 45441                                  FATBYTE:
 45442 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 45443                                  ; DOSDATA:059Ah
 45444 0000059A 00000000                DEVPT:	dd	0		;
 45445                                  THISSFT:
 45446 0000059E 00000000                	dd	0		; Address of user SFT
 45447                                  THISCDS:
 45448 000005A2 00000000                	dd	0		; Address of current CDS
 45449                                  THISFCB:
 45450 000005A6 00000000                	dd	0		; Address of user FCB
 45451 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 45452 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 45453 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 45454                                  WFP_START:
 45455 000005B2 0000                    	dw	0		;
 45456                                  REN_WFP:
 45457 000005B4 0000                    	dw	0		;
 45458                                  CURR_DIR_END:
 45459 000005B6 0000                    	dw	0		;
 45460                                  NEXTADD:
 45461 000005B8 0000                    	dw	0		;
 45462                                  LASTPOS:
 45463 000005BA 0000                    	dw	0		;
 45464                                  CLUSNUM:
 45465 000005BC 0000                    	dw	0		;
 45466 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 45467                                  DIRSTART:
 45468 000005C2 0000                    	dw	0		;
 45469 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 45470 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 45471                                                                  ; sectors
 45472                                  BYTSECPOS:
 45473 000005CC 0000                    	dw	0		; Position of first byte within sector
 45474                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 45475 000005CE 0000<rep 2h>                    times	2 dw 0
 45476                                  BYTCNT1:
 45477 000005D2 0000                    	dw	0		; No. of bytes in first sector
 45478                                  BYTCNT2:
 45479 000005D4 0000                    	dw	0		; No. of bytes in last sector
 45480 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 45481                                  ; DOSDATA:05D8h
 45482                                  ENTFREE:
 45483 000005D8 0000                    	dw	0		;
 45484                                  ENTLAST:
 45485 000005DA 0000                    	dw	0		;
 45486                                  NXTCLUSNUM:
 45487 000005DC 0000                    	dw	0		;
 45488                                  GROWCNT:
 45489 000005DE 00000000                	dd	0		;
 45490 000005E2 00000000                CURBUF:	dd	0		;
 45491 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 45492 000005EA 0000                    SAVEBX:	dw	0		;
 45493 000005EC 0000                    SAVEDS:	dw	0		;
 45494                                  RESTORE_TMP:
 45495 000005EE 0000                    	dw	0		; return address for restore world
 45496 000005F0 0000                    NSS:	dw	0
 45497 000005F2 0000                    NSP:	dw	0
 45498                                  ; DOSDATA:05F4h
 45499                                  EXTOPEN_FLAG:
 45500 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 45501                                  EXTOPEN_ON:
 45502 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 45503                                  EXTOPEN_IO_MODE:
 45504 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 45505                                  SAVE_DI:
 45506 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 45507                                  SAVE_ES:
 45508 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 45509                                  SAVE_DX:
 45510 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 45511                                  SAVE_CX:
 45512 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 45513                                  SAVE_BX:
 45514 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 45515                                  SAVE_SI:
 45516 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 45517                                  SAVE_DS:
 45518 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 45519                                  
 45520                                  ; DOSDATA:0607h
 45521                                  
 45522                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 45523                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 45524                                  ; the high 16, the low 16 are still in the register.
 45525                                  
 45526                                  HIGH_SECTOR:	
 45527 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 45528                                  ;OffsetMagicPatch:
 45529                                  ;	dw	MagicPatch ;scottq 8/6/92
 45530                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45531 00000609 0000                    	dw	0
 45532                                  				;see dos\mpatch.asm
 45533                                  DISK_FULL:
 45534 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 45535                                  TEMP_VAR:
 45536 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 45537                                  TEMP_VAR2:
 45538 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 45539 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 45540                                  DOS34_FLAG:
 45541 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 45542                                  NO_FILTER_PATH:
 45543 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 45544                                  NO_FILTER_DPATH:
 45545 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 45546                                  ; M008
 45547                                  AbsRdWr_SS:
 45548 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 45549                                  AbsRdWr_SP:
 45550 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 45551                                  
 45552                                  	; I_am  UU_Callback_flag,BYTE,<0>  ; Unused
 45553                                  ; M008
 45554                                  	; 24/03/2024
 45555                                  	; MSDOS 5.0 MSDOS.SYS - DOSDATA:061Fh
 45556                                  	; MSDOS 6.22 MSDOS.SYS - DOSDATA:061Fh
 45557 0000061F 00                      	db 	0
 45558                                   
 45559                                  ; make those pushes fast!!!
 45560                                  ;EVEN
 45561                                  
 45562                                  align 2
 45563                                  
 45564                                  StackSize   equ 180h  ; 384	; gross but effective
 45565                                  
 45566                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 45567                                  ;				; made up their minds about
 45568                                   
 45569                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 45570                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 45571                                  
 45572                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 45573                                   
 45574 00000620 00<rep 180h>                    times	StackSize db	0	;
 45575                                  AUXSTACK:			; LABEL   BYTE
 45576                                   
 45577 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 45578                                  DSKSTACK:			; LABEL   BYTE
 45579                                   
 45580 00000920 00<rep 180h>                    times	StackSize db	0	;
 45581                                  IOSTACK:			; LABEL   BYTE
 45582                                  
 45583                                  ; DOSDATA:0AA0h 
 45584                                   
 45585                                  ; patch space for Boca folks.
 45586                                  ; Say What????!!! This does NOT go into the swappable area!
 45587                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 45588                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 45589                                   
 45590                                  IBMPATCH: ; label byte
 45591                                  PRINTER_FLAG:
 45592 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 45593                                  VOLCHNG_FLAG:
 45594 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 45595                                  VIRTUAL_OPEN:
 45596 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 45597                                   
 45598                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 45599                                  
 45600                                  FSeek_drive:
 45601 00000AA3 00                      	db	0		;AN000; fastseek drive #
 45602                                  FSeek_firclus:
 45603 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 45604                                  FSeek_logclus:
 45605 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 45606                                  FSeek_logsave:
 45607 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 45608                                  
 45609                                  ; DOSDATA:0AAAh
 45610                                  
 45611                                  TEMP_DOSLOC:
 45612 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 45613                                  				;at SYSINIT time.
 45614                                  SWAP_END:  ; LABEL   BYTE
 45615                                   
 45616                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 45617                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 45618                                  ; to include this byte.
 45619                                   
 45620 00000AAC 00                      	db	0
 45621                                  
 45622                                  ; DOSDATA:0AADh
 45623                                   
 45624                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 45625                                  
 45626                                  ;DOSDATA    ENDS
 45627                                  
 45628                                  ;============================================================================
 45629                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 45630                                  ;============================================================================
 45631                                  ; 27/04/2019 - Retro DOS 4.0
 45632                                  ; 16/07/2018 - Retro DOS 3.0
 45633                                  
 45634                                  ;DOSDATA Segment
 45635                                  
 45636                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 45637                                  
 45638                                  ;
 45639                                  ; upper case table
 45640                                  ; ---------------------------------------------------------------------------
 45641                                  UCASE_TAB:	; label   byte
 45642 00000AAD 8000                    	dw	128
 45643 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 45644 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 45645 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 45646 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 45647 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 45648 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 45649 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45650 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45651 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45652 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45653 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45654 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45655 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 45656 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45657 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45658 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45659                                  ;
 45660                                  ; file upper case table
 45661                                  ; ---------------------------------------------------------------------------
 45662                                  FILE_UCASE_TAB:	; label  byte
 45663 00000B2F 8000                    	dw	128
 45664 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 45665 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 45666 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 45667 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 45668 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 45669 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 45670 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45671 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45672 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45673 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45674 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45675 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45676 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 45677 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45678 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45679 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45680                                  ;
 45681                                  ; file char list
 45682                                  ; ---------------------------------------------------------------------------
 45683                                  FILE_CHAR_TAB:	; label  byte
 45684 00000BB1 1600                    	dw	22				; length
 45685 00000BB3 0100FF                  	db	1,0,255 			; include all
 45686 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 45687 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 45687 00000BC2 7C3C3E2B3D3B2C     
 45688                                  	;db	24 dup (?)			; reserved
 45689 00000BC9 00<rep 18h>             	times	24 db 0
 45690                                  
 45691                                  ;
 45692                                  ; collate table
 45693                                  ; ---------------------------------------------------------------------------
 45694                                  COLLATE_TAB:	; label   byte
 45695 00000BE1 0001                    	dw	256
 45696 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 45697 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 45698 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 45699 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 45700 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 45701 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 45702 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 45703 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 45704 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 45705 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45706 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45707 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 45708 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 45709 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45710 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45711 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 45712 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 45713 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 45714 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 45715 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 45716 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 45717 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 45718 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45719 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45720 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45721 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45722 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45723 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45724 00000CC3 E053                    	db	224,"S"
 45725 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 45726 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45727 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45728 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45729                                  
 45730                                  ; ------------------------------------------------<MSKK01>----------------------
 45731                                  
 45732                                  ; DOSDATA:0CE3h
 45733                                  
 45734                                  ; 29/04/2019
 45735                                  
 45736                                  ; dbcs is not supported in DOS 3.3
 45737                                  ;		   DBCS_TAB	    CC_DBCS <>
 45738                                  ;
 45739                                  ; DBCS for DOS 4.00			   2/12/KK
 45740                                  
 45741                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 45742                                  ; ------------------------------------------------<MSKK01>----------------------
 45743                                  ;ifdef	DBCS
 45744                                  ; ifdef	  JAPAN
 45745                                  ;		dw	6		; <MSKK01>
 45746                                  ;		db	081h,09fh	; <MSKK01>
 45747                                  ;		db	0e0h,0fch	; <MSKK01>
 45748                                  ;		db	0,0		; <MSKK01>
 45749                                  ;
 45750                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 45751                                  ; endif
 45752                                  ; ifdef	  TAIWAN
 45753                                  ;		dw	4		; <TAIWAN>
 45754                                  ;		db	081h,0FEh	; <TAIWAN>
 45755                                  ;		db	0,0		; <TAIWAN>
 45756                                  ;
 45757                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45758                                  ; endif
 45759                                  ; ifdef   KOREA                         ; Keyl
 45760                                  ;               dw      4               ; <KOREA>
 45761                                  ;               db      0A1h,0FEh       ; <KOREA>
 45762                                  ;               db      0,0             ; <KOREA>
 45763                                  ;
 45764                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45765                                  ;  endif
 45766                                  ;else
 45767 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 45768                                  		;db	16 dup(0)	;AN000;  2/12/KK
 45769 00000CE5 00<rep 10h>             		times	16 db 0
 45770                                  
 45771                                  ;		dw	6		;  2/12/KK
 45772                                  ;		db	081h,09Fh	;  2/12/KK
 45773                                  ;		db	0E0h,0FCh	;  2/12/KK
 45774                                  ;		db	0,0		;  2/12/KK
 45775                                  ;
 45776                                  ;endif
 45777                                  ; ------------------------------------------------<MSKK01>----------------------
 45778                                  
 45779                                  ; DOSDATA:0CF5h
 45780                                  
 45781                                  ; ---------------------------------------------------------------------------
 45782                                  ;
 45783                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 45784                                  ;     ENTRY: AL = Character to map
 45785                                  ;     EXIT:  AL = The converted character
 45786                                  ; Alters no registers except AL and flags.
 45787                                  ; The routine should do nothing to chars below 80H.
 45788                                  ; ---------------------------------------------------------------------------
 45789                                  ; Example:
 45790                                  
 45791                                  MAP_CASE:
 45792                                  ;Procedure MAP_CASE,FAR
 45793                                  
 45794 00000CF5 3C80                    	CMP	AL,80h
 45795 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 45796 00000CF9 CB                      	RETF
 45797                                  Map1:
 45798 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 45799 00000CFC 1E                      	PUSH	DS
 45800 00000CFD 53                      	PUSH	BX
 45801 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 45802                                  FINISH:
 45803 00000D01 0E                      	PUSH	CS		;Move to DS
 45804 00000D02 1F                      	POP	DS
 45805 00000D03 D7                      	XLAT			;Get upper case character
 45806 00000D04 5B                      	POP	BX
 45807 00000D05 1F                      	POP	DS
 45808                                  L_RET:	
 45809 00000D06 CB                      	RETF
 45810                                  
 45811                                  ;EndProc MAP_CASE
 45812                                  
 45813                                  ; ---------------------------------------------------------------------------
 45814                                  
 45815                                  ; The variables for ECS version are moved here for the same data alignments
 45816                                  ; as IBM-DOS and MS-DOS.
 45817                                  
 45818                                  InterChar:
 45819 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 45820                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 45821                                  DUMMY:	; LABEL   WORD
 45822                                  InterCon:  
 45823 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 45824                                  SaveCurFlg:
 45825 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 45826                                  
 45827                                  ; ---------------------------------------------------------------------------
 45828                                  
 45829 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 45830                                  redir_patch:
 45831 00000D0C 00                      	  db	0
 45832                                  
 45833                                  ; DOSDATA:0D0Dh
 45834                                  
 45835                                  Mark1:	; label byte
 45836                                  
 45837                                  ;IF2
 45838                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 45839                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45840                                  ;	ENDIF
 45841                                  ;ENDIF
 45842                                  
 45843 00000D0D 00<rep 5h>              	  times 5 db 0
 45844                                  
 45845                                  ;############################################################################
 45846                                  ;
 45847                                  ; ** HACK FOR DOS 4.0 REDIR **
 45848                                  ; 
 45849                                  ; The redir requires the following:
 45850                                  ;
 45851                                  ;	MSVERS	offset D12H
 45852                                  ;	YRTAB	offset D14H
 45853                                  ; 	MONTAB	offset D1CH
 45854                                  ;
 45855                                  ; WARNING! WARNING!
 45856                                  ; 
 45857                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 45858                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 45859                                  ;
 45860                                  ; CURRENTLY MARK1 = 0D0DH
 45861                                  ;
 45862                                  ;############################################################################
 45863                                  
 45864                                  	;ORG	0D12h
 45865                                  
 45866                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 45867                                  
 45868                                  	;db	6
 45869                                  	;db	20
 45870                                  
 45871                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 45872                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 45873 00000D12 05                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 45874 00000D13 00                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 45875                                  
 45876                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 45877                                  ;
 45878                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>
 45879                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31>
 45880                                  
 45881                                  ; Days in year
 45882                                  
 45883                                  YRTAB:   
 45884 00000D14 C8A6                    	DB	200,166			; Leap year
 45885 00000D16 C8A5                    	DB	200,165
 45886 00000D18 C8A5                    	DB	200,165
 45887 00000D1A C8A5                    	DB	200,165
 45888                                  
 45889                                  ; Days of each month
 45890                                  
 45891                                  MONTAB:        
 45892 00000D1C 1F                      	DB      31                      ; January
 45893                                  february:
 45894 00000D1D 1C                      	DB	28 			; February--reset each
 45895                                  					; time year changes
 45896 00000D1E 1F                              DB      31                      ; March
 45897 00000D1F 1E                              DB      30                      ; April
 45898 00000D20 1F                              DB      31                      ; May
 45899 00000D21 1E                              DB      30                      ; June
 45900 00000D22 1F                              DB      31                      ; July
 45901 00000D23 1F                              DB      31                      ; August
 45902 00000D24 1E                              DB      30                      ; September
 45903 00000D25 1F                              DB      31                      ; October
 45904 00000D26 1E                              DB      30                      ; November
 45905 00000D27 1F                              DB      31                      ; December
 45906                                  
 45907                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 45908                                  
 45909                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 45910                                  
 45911                                  SysInitTable:
 45912                                  	;dw	SYSINITVAR
 45913 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 45914 00000D2A 0000                            dw      0		; segment
 45915 00000D2C [2A12]                          dw	COUNTRY_CDPG	; pointer to country tabl
 45916 00000D2E 0000                            dw      0		; segment of pointer
 45917                                  
 45918                                  ; DOS 3.3 F.C. 6/12/86
 45919                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 45920                                  
 45921                                  FastTable:				; a better name
 45922                                  FastOpenTable:
 45923 00000D30 0200                    	dw      2                       ; number of entries
 45924 00000D32 [8712]                  	dw      FastRet			; pointer to ret instr.
 45925 00000D34 0000                    	dw      0                       ; and will be modified by
 45926 00000D36 [8712]                  	dw      FastRet			; FASTxxx when loaded in
 45927 00000D38 0000                    	dw      0
 45928                                  
 45929                                  ; DOS 3.3 F.C. 6/12/86
 45930                                  
 45931                                  FastFlg:				; flags
 45932                                  FastOpenFlg:
 45933 00000D3A 00                      	db	0			; don't change the foll: order
 45934                                  
 45935                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 45936                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 45937                                  ; or filled by FastOPen when calling FastOpen Lookup
 45938                                  
 45939                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 45940                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 45941                                  	;times	11 db 0
 45942 00000D3B 00<rep Bh>              	times	FEI.size db 0
 45943                                  
 45944                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 45945                                  ; when calling FastOpen Lookup
 45946                                  
 45947                                  Dir_Info_Buff:	; label  byte
 45948                                  	;db   	SIZE dir_entry dup (0)
 45949                                  	;times	32 db 0
 45950 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 45951                                  
 45952                                  Next_Element_Start:
 45953 00000D66 0000                    	dw	0			; save next element start offset
 45954                                  Del_ExtCluster:
 45955 00000D68 0000                    	dw	0			; for dos_delete
 45956                                  
 45957                                  ; The following is a stack and its pointer for interrupt 2F which is used
 45958                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 45959                                  ; not to destroy the INT 21 stack saved for the user.
 45960                                  
 45961                                  USER_SP_2F:	; LABEL  WORD
 45962 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 45963                                  
 45964                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 45965                                  DOS_TEMP:	; label  word		; temporary word
 45966                                  FAKE_STACK_2F:  
 45967                                  	; dw  14 dup (0)		; 12 register temporary storage
 45968 00000D6C 0000<rep Eh>            	times 14 dw 0
 45969                                  
 45970                                  Hash_Temp: 	;label  word		; temporary word
 45971                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 45972 00000D88 0000<rep 4h>            	times 4 dw 0
 45973                                  
 45974                                  SCAN_FLAG:
 45975 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 45976                                  DATE_FLAG:
 45977 00000D91 0000                    	dw     0                	; flag to update the date
 45978                                  
 45979                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 45980 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 45981                                  
 45982                                  MSG_EXTERROR:	; label  DWORD		; for system message addr
 45983 00000D95 00000000                	dd     0               		; for extended error
 45984 00000D99 00000000                	dd     0			; for parser
 45985 00000D9D 00000000                	dd     0			; for critical errror
 45986 00000DA1 00000000                	dd     0			; for IFS
 45987 00000DA5 00000000                	dd     0			; for code reduction
 45988                                  
 45989                                  SEQ_SECTOR:	; label  DWORD 		; last sector read
 45990 00000DA9 FFFFFFFF                	dd     -1
 45991                                  SC_SECTOR_SIZE:
 45992 00000DAD 0000                    	dw	0			; sector size for SC
 45993                                  SC_DRIVE:
 45994 00000DAF 00                      	db	0			; drive # for secondary cache
 45995                                  CurSC_DRIVE:
 45996 00000DB0 FF                      	db	-1			; current SC drive
 45997                                  CurSC_SECTOR:
 45998 00000DB1 00000000                	dd	0			; current SC starting sector
 45999                                  SC_STATUS:
 46000 00000DB5 0000                    	dw	0			; SC status word
 46001                                  SC_FLAG:
 46002 00000DB7 00                      	db	0			; SC flag
 46003                                  AbsDskErr:
 46004 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 46005                                  
 46006                                  NO_NAME_ID:	; label byte
 46007 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id
 46007 00000DC3 2020               
 46008                                  
 46009                                  ;hkn; moved from TABLE segment in kstrin.asm
 46010                                  
 46011                                  KISTR001S:	; label	byte		; 2/17/KK
 46012 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 46013                                  KISTR001E:	; label	byte		; 2/17/KK
 46014                                  
 46015                                  ; the nul device driver used to be part of the code. However, since the 
 46016                                  ; header is in the data, and the entry points are only given as an offset,
 46017                                  ; the strategy and interrupt entry points must also be in the data now.
 46018                                  
 46019                                  ; DOSDATA:0DC6h
 46020                                  
 46021                                  SNULDEV:
 46022                                  ;procedure snuldev,far
 46023                                  	;or	word [es:bx+3],100h
 46024                                  	; 17/12/2022
 46025                                  	;or	byte [es:bx+4],01h
 46026                                  	; 05/01/2024 (Original MSDOS and RetroDOS DATA address compatibility)
 46027                                  	;or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 46028 00000DC6 26814F030001            	or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 46029                                  INULDEV:
 46030 00000DCC CB                      	retf				; must not be a return!
 46031                                  ;endproc snuldev
 46032                                  
 46033                                  ;M044
 46034                                  ; Second part of save area for saving last para of Windows memory
 46035                                  
 46036                                  WinoldPatch2:
 46037                                  	;db	8 dup (?)	; M044
 46038 00000DCD 00<rep 8h>              	times	8 db 0	
 46039                                  UmbSave2:
 46040                                  	;db	5 dup (?)	; M062
 46041 00000DD5 00<rep 5h>              	times	5 db 0
 46042                                  UmbSaveFlag:
 46043 00000DDA 00                      	db	0		; M062
 46044                                  
 46045                                  ; DOSDATA:0DDBh
 46046                                  
 46047                                  Mark2:	; label byte
 46048                                  
 46049                                  ;IF2
 46050                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 46051                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 46052                                  ;	ENDIF
 46053                                  ;ENDIF
 46054                                  
 46055                                  ;############################################################################
 46056                                  ;
 46057                                  ; ** HACK FOR DOS 4.0 REDIR **
 46058                                  ; 
 46059                                  ; The redir requires the following:
 46060                                  ;
 46061                                  ;	ERR_TABLE_21	offset DDBH
 46062                                  ;	ERR_TABLE_24	offset E5BH
 46063                                  ; 	ErrMap24	offset EABH
 46064                                  ;
 46065                                  ; WARNING! WARNING!
 46066                                  ;
 46067                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 46068                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 46069                                  ;
 46070                                  ; CURRENTLY MARK2 = 0DD0H
 46071                                  ;
 46072                                  ;############################################################################
 46073                                  
 46074                                  	;ORG	0DDBh
 46075                                  
 46076                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 46077                                  
 46078                                  ; ---------------------------------------------------------------------------
 46079                                  ;
 46080                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 46081                                  ; errors. Each entry is 4 bytes long:
 46082                                  ;
 46083                                  ;       Err#,Class,Action,Locus
 46084                                  ;
 46085                                  ; A value of 0FFh indicates a call specific value (ie. should already
 46086                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 46087                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 46088                                  ;
 46089                                  ; ---------------------------------------------------------------------------
 46090                                  
 46091                                  ;ErrTab  Macro   err,class,action,locus
 46092                                  ;ifidn <locus>,<0FFh>
 46093                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 46094                                  ;ELSE
 46095                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 46096                                  ;ENDIF
 46097                                  ;ENDM
 46098                                  
 46099                                  ERR_TABLE_21: ; LABEL   BYTE
 46100 00000DDB 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 46101 00000DDF 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 46102 00000DE3 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 46103 00000DE7 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 46104 00000DEB 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 46105 00000DEF 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 46106 00000DF3 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 46107 00000DF7 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 46108 00000DFB 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 46109 00000DFF 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 46110 00000E03 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 46111 00000E07 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 46112 00000E0B 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 46113 00000E0F 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 46114 00000E13 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 46115 00000E17 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 46116 00000E1B 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 46117 00000E1F 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 46118 00000E23 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 46119 00000E27 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 46120 00000E2B 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 46121 00000E2F 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 46122 00000E33 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 46123 00000E37 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 46124 00000E3B 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 46125 00000E3F 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 46126 00000E43 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 46127 00000E47 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 46128                                      ; MSDOS 6.0
 46129 00000E4B 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 46130 00000E4F 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 46131 00000E53 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 46132 00000E57 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 46133                                  
 46134                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 46135                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 46136                                  ;		db 2,8,3,2
 46137                                  ;		db 3,8,3,2
 46138                                  ;		db 4,1,4,1
 46139                                  ;		db 5,3,3,0FFh
 46140                                  ;		db 6,7,4,1
 46141                                  ;		db 7,7,5,5
 46142                                  ;		db 8,1,4,5
 46143                                  ;		db 9,7,4,5
 46144                                  ;		db 0Ah,7,4,5
 46145                                  ;		db 0Bh,9,3,1
 46146                                  ;		db 0Ch,7,4,1
 46147                                  ;		db 0Dh,9,4,1
 46148                                  ;		db 0Fh,8,3,2
 46149                                  ;		db 10h,3,3,2
 46150                                  ;		db 11h,0Dh,3,2
 46151                                  ;		db 12h,8,3,2
 46152                                  ;		db 50h,0Ch,3,2
 46153                                  ;		db 20h,0Ah,2,2
 46154                                  ;		db 21h,0Ah,2,2
 46155                                  ;		db 54h,1,4,0FFh
 46156                                  ;		db 56h,3,3,1
 46157                                  ;		db 52h,1,4,2
 46158                                  ;		db 32h,9,3,3
 46159                                  ;		db 55h,0Ch,3,3
 46160                                  ;		db 57h,9,3,1
 46161                                  ;		db 53h,0Dh,4,1
 46162                                  ;		db 24h,1,4,5
 46163                                  ; MSDOS 6.0 (MSDOS 6.21)
 46164                                  ;		db 26h,1,4,1
 46165                                  ;		db 27h,1,4,1
 46166                                  ;		db 5Ah,0Dh,4,2
 46167                                  ; MSDOS 6.0 & MSDOS 3.3
 46168                                  ;		db 0FFh,0FFh,0FFh,0FFh
 46169                                  
 46170                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 46171                                  
 46172                                  ; ---------------------------------------------------------------------------
 46173                                  ;
 46174                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 46175                                  ; errors. Each entry is 4 bytes long:
 46176                                  ;
 46177                                  ;       Err#,Class,Action,Locus
 46178                                  ;
 46179                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 46180                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 46181                                  ; THE END.
 46182                                  ;
 46183                                  ; ---------------------------------------------------------------------------
 46184                                  
 46185                                  ERR_TABLE_24: ; LABEL   BYTE
 46186 00000E5B 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 46187 00000E5F 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 46188 00000E63 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 46189 00000E67 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 46190 00000E6B 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 46191 00000E6F 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 46192 00000E73 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 46193 00000E77 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 46194 00000E7B 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 46195 00000E7F 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 46196 00000E83 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 46197 00000E87 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 46198 00000E8B 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 46199 00000E8F 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 46200 00000E93 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 46201 00000E97 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 46202 00000E9B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 46203 00000E9F 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 46204 00000EA3 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 46205 00000EA7 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 46206                                  
 46207                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 46208                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 46209                                  ;		db 14h,4,5,1
 46210                                  ;		db 15h,5,7,0FFh
 46211                                  ;		db 16h,4,5,1
 46212                                  ;		db 17h,0Bh,4,2
 46213                                  ;		db 18h,4,5,1
 46214                                  ;		db 19h,5,1,2
 46215                                  ;		db 1Ah,0Bh,7,2
 46216                                  ;		db 1Bh,0Bh,4,2
 46217                                  ;		db 1Ch,2,7,4
 46218                                  ;		db 1Dh,5,4,0FFh
 46219                                  ;		db 1Eh,5,4,0FFh
 46220                                  ;		db 1Fh,0Dh,4,0FFh
 46221                                  ;		db 20h,0Ah,2,2
 46222                                  ;		db 21h,0Ah,2,2
 46223                                  ;		db 22h,0Bh,7,2
 46224                                  ;		db 32h,9,3,3
 46225                                  ;		db 23h,7,4,1
 46226                                  ;		db 24h,1,4,5
 46227                                  ;		db 0FFh,0Dh,5,0FFh
 46228                                  
 46229                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 46230                                  
 46231                                  ; ---------------------------------------------------------------------------
 46232                                  ;
 46233                                  ; We need to map old int 24 errors and device driver errors into the new set
 46234                                  ; of errors. The following table is indexed by the new errors
 46235                                  ;
 46236                                  ; ---------------------------------------------------------------------------
 46237                                  
 46238                                  ;Public  ErrMap24
 46239                                  ErrMap24: ; Label   BYTE
 46240 00000EAB 13                          DB  error_write_protect	; 0
 46241 00000EAC 14                          DB  error_bad_unit		; 1
 46242 00000EAD 15                          DB  error_not_ready		; 2
 46243 00000EAE 16                          DB  error_bad_command	; 3
 46244 00000EAF 17                          DB  error_CRC		; 4
 46245 00000EB0 18                          DB  error_bad_length	; 5
 46246 00000EB1 19                          DB  error_seek		; 6
 46247 00000EB2 1A                          DB  error_not_DOS_disk	; 7
 46248 00000EB3 1B                          DB  error_sector_not_found	; 8
 46249 00000EB4 1C                          DB  error_out_of_paper	; 9
 46250 00000EB5 1D                          DB  error_write_fault	; A
 46251 00000EB6 1E                          DB  error_read_fault	; B
 46252 00000EB7 1F                          DB  error_gen_failure	; C
 46253 00000EB8 1F                          DB  error_gen_failure	; D  RESERVED
 46254 00000EB9 1F                          DB  error_gen_failure	; E  RESERVED
 46255 00000EBA 22                          DB  error_wrong_disk	; F
 46256                                  
 46257                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 46258                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 46259                                  	
 46260                                  ErrMap24End: ; LABEL   BYTE
 46261                                  
 46262                                  ; DOSDATA:0EBBh (MSDOS 6.21, MSDOS.SYS)
 46263                                  
 46264                                  ; ---------------------------------------------------------------------------
 46265                                  
 46266                                  ; 27/04/2019 - Retro DOS v4.0
 46267                                  
 46268                                  FIRST_BUFF_ADDR:
 46269 00000EBB 0000                    	dw	0			; first buffer address
 46270                                  SPECIAL_VERSION:
 46271 00000EBD 0000                    	dw	0			;AN006; used by INT 2F 47H
 46272                                  FAKE_COUNT:
 46273 00000EBF 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 46274                                  OLD_FIRSTCLUS:
 46275 00000FBE 0000                    	dw	0			;AN011; save old first cluster for fastopen
 46276                                  
 46277                                  ; ---------------------------------------------------------------------------
 46278                                  
 46279                                  ;smr; moved from TABLE segment in exec.asm
 46280                                  
 46281 00000FC0 0000                    exec_init_SP: dw 0
 46282 00000FC2 0000                    exec_init_SS: dw 0
 46283 00000FC4 0000                    exec_init_IP: dw 0
 46284 00000FC6 0000                    exec_init_CS: dw 0
 46285                                  
 46286                                  exec_signature:
 46287 00000FC8 0000                    	dw	0	; must contain 4D5A (yay zibo!)
 46288                                  exec_len_mod_512:
 46289 00000FCA 0000                    	dw	0	; low 9 bits of length
 46290                                  exec_pages:
 46291 00000FCC 0000                    	dw	0	; number of 512b pages in file
 46292                                  exec_rle_count:
 46293 00000FCE 0000                    	dw	0	; count of reloc entries
 46294                                  exec_par_dir:
 46295 00000FD0 0000                    	dw	0	; number of paragraphs before image
 46296                                  exec_min_BSS:
 46297 00000FD2 0000                    	dw	0	; minimum number of para of BSS
 46298                                  exec_max_BSS:
 46299 00000FD4 0000                    	dw	0	; max number of para of BSS
 46300                                  exec_SS:
 46301 00000FD6 0000                    	dw	0	; stack of image
 46302                                  exec_SP:
 46303 00000FD8 0000                    	dw	0	; SP of image
 46304                                  exec_chksum:
 46305 00000FDA 0000                    	dw	0	; checksum of file (ignored)
 46306                                  exec_IP:
 46307 00000FDC 0000                    	dw	0	; IP of entry
 46308                                  exec_CS:
 46309 00000FDE 0000                    	dw	0	; CS of entry
 46310                                  exec_rle_table:
 46311 00000FE0 0000                    	dw	0	; byte offset of reloc table
 46312                                  
 46313                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 46314                                  
 46315                                  ;smr; eom
 46316                                  
 46317                                  ; ---------------------------------------------------------------------------
 46318                                  
 46319                                  ;SR;
 46320                                  ; WIN386 instance table for DOS
 46321                                  
 46322                                  Win386_Info:
 46323 00000FE2 0300                    	db	3, 0
 46324 00000FE4 000000000000000000-     	dd	0, 0, 0
 46324 00000FED 000000             
 46325 00000FF0 [F40F]0000              	dw	Instance_Table, 0
 46326                                  
 46327                                  Instance_Table:
 46328 00000FF4 [2200]00000200          	dw	CONTPOS, 0, 2
 46329 00000FFA [3200]00000400          	dw	BCON, 0, 4
 46330 00001000 [F901]00000601          	dw	CARPOS, 0, 106h
 46331 00001006 [0003]00000100          	dw	CHARCO, 0, 1
 46332 0000100C [C00F]00002200          	dw	exec_init_SP, 0, 34	; M074
 46333 00001012 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 46334 00001018 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 46335 0000101E 00000000                	dw	0, 0
 46336                                  
 46337                                  ; M001; SR;
 46338                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 46339                                  ; M001; some DOS variables. Note that the only really important variable in 
 46340                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 46341                                  ; M001; which does not need to be done in DOS 5.0. 
 46342                                  
 46343                                  ; 29/12/2022
 46344                                  ; (MSDOS 6.21 MSDOS.SYS DOSDATA:1022h)
 46345                                  
 46346                                  Win386_DOSVars:
 46347 00001022 05                      	db	5	;Major version 5 ; M001
 46348 00001023 00                      	db	0	;Minor version 0 ; M001
 46349 00001024 [EC05]                  	dw	SAVEDS	; M001
 46350 00001026 [EA05]                  	dw	SAVEBX	; M001
 46351 00001028 [2103]                  	dw	INDOS	; M001
 46352 0000102A [3E03]                  	dw	USER_ID	; M001
 46353 0000102C [1503]                  	dw	CritPatch ; M001
 46354 0000102E [8C00]                  	dw	UMB_HEAD ; M012
 46355                                  
 46356                                  ;SR;
 46357                                  ; Flag to indicate whether WIN386 is running or not
 46358                                  
 46359 00001030 00                      IsWin386: db	0
 46360                                  
 46361                                  ;M018
 46362                                  ; This variable contains the path to the VxD device needed for Win386
 46363                                  
 46364 00001031 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 46364 0000103A 2E33383600         
 46365                                  
 46366                                  ;End WIN386 support
 46367                                  
 46368                                  ; ---------------------------------------------------------------------------
 46369                                  
 46370                                  ;SR;
 46371                                  ; These variables have been added for the special lie support for device
 46372                                  ;drivers.
 46373                                  ;
 46374                                  
 46375                                  DriverLoad:	
 46376 0000103F 01                      	db	1	;initialized to do special handling
 46377                                  BiosDataPtr:
 46378 00001040 00000000                	dd	0
 46379                                  
 46380                                  ; 25/03/2024
 46381                                  %if 1
 46382                                  ; 29/12/2022 - Retro DOS v4.1
 46383                                  ;%if 0
 46384                                  
 46385                                  ; 27/04/2019 - Retro DOS v4.0
 46386                                  ; 04/11/2022
 46387                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 46388                                  
 46389                                  ;------------------------------------------------------------------------
 46390                                  ; Patch for Sidekick
 46391                                  ;
 46392                                  ; A documented method for finding the offset of the Errormode flag in the 
 46393                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 46394                                  ; for the following sequence of instructions.
 46395                                  ;
 46396                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 46397                                  ;
 46398                                  ; The Offset of Errormode flag is 0320h
 46399                                  ;
 46400                                  ;------------------------------------------------------------------------
 46401                                  
 46402 00001044 36F6062003FF            	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 46403 0000104A 750C                    	db	075h, 0Ch			 ; jnz  NearLabel
 46404 0000104C 36FF365803              	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 46405 00001051 CD28                    	db	0CDh, 028h			 ; int  28h
 46406                                  
 46407                                  ;--------------------------------------------------------------------------
 46408                                  ; Patch for PortOfEntry - M036
 46409                                  ;
 46410                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 46411                                  ; the offset of Errormode flag. The following patch is to support them in 
 46412                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 46413                                  ;
 46414                                  ;---------------------------------------------------------------------------
 46415                                  
 46416 00001053 803E200300              	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 46417 00001058 7537                    	db	075h, 037h			 ; jnz	NearLabel
 46418 0000105A BCA00A                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 46419                                  
 46420                                  %endif ; 29/12/2022
 46421                                  
 46422                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 46423                                  
 46424                                  ;--------------------------------------------------------------------------
 46425                                  
 46426                                  ;*** New FCB Implementation
 46427                                  ; This variable is used as a cache in the new FCB implementation to remember
 46428                                  ;the address of a local SFT that can be recycled for a regenerate operation
 46429                                  
 46430 0000105D 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 46431                                  
 46432                                  ;DOSDATA ENDS
 46433                                  
 46434                                  ;============================================================================
 46435                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 46436                                  ;============================================================================
 46437                                  ; 27/04/2019 - Retro DOS 4.0
 46438                                  
 46439                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 46440                                  
 46441                                  ;---------------------------------------------------------------------------
 46442                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 46443                                  ;----------------------------------------------------------------------------
 46444                                  	
 46445                                  	;db	90h
 46446                                  
 46447                                  	;EVEN
 46448 00001061 90                      align 2
 46449                                  
 46450                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 46451                                  
 46452                                  DOSINTTABLE:	; LABEL	DWORD
 46453                                  
 46454                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 46455                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 46456                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 46457                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 46458                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 46459                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 46460                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 46461                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 46462                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 46463                                  	
 46464 00001062 [4651]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 46465 00001066 [DB02]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4
 46466 0000106A [0703]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 46467 0000106E [3105]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 46468 00001072 [B805]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 46469 00001076 [6960]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 46470 0000107A [0107]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 46471 0000107E [E202]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 46472 00001082 [E102]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 46473                                  
 46474 00001086 0000                    SS_Save: dw	0		; save user's stack segment
 46475 00001088 0000                    SP_Save: dw	0		; save user's stack offset
 46476                                  
 46477                                  ;-------------------------------------------------------------------------
 46478                                  ;
 46479                                  ; LOW MEM STUB:
 46480                                  ;
 46481                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 46482                                  ; handled by DOS. This stub is installed if the user specifies that the 
 46483                                  ; DOS load in HIMEM. Each entry point does this.
 46484                                  ;
 46485                                  ; 	1. if jmp to 8 has been patched out
 46486                                  ;	   2. if A20 OFF
 46487                                  ;	      3. Enable A20
 46488                                  ;	   4. else 
 46489                                  ;	      5. just go to dos entry
 46490                                  ;	   6. endif
 46491                                  ;	7. else
 46492                                  ;	   8. just go to dos entry
 46493                                  ;	9. endif
 46494                                  ;
 46495                                  ;--------------------------------------------------------------------------
 46496                                  
 46497                                  ; 27/04/2019 - Retro DOS v4.0
 46498                                  
 46499                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 46500                                  
 46501                                  ;--------------------------------------------------------------------------
 46502                                  ;
 46503                                  ; DIVIDE BY 0 handler
 46504                                  ;
 46505                                  ;--------------------------------------------------------------------------
 46506                                  
 46507                                  ldivov:
 46508                                  	; The following jump, skipping the XMS calls will be patched to
 46509                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46510                                  	; needed because the stub is installed even before the XMS driver
 46511                                  	; is loaded if the user specifies dos=high in the config.sys
 46512                                  i0patch:
 46513 0000108A EB03                    	jmp	short divov_cont
 46514                                  
 46515 0000108C E8E000                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46516                                  divov_cont:
 46517 0000108F 2EFF2E[6210]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 46518                                  
 46519                                  ;------------------------------------------------------------------------
 46520                                  ;
 46521                                  ; INT 20 Handler
 46522                                  ;
 46523                                  ; Here we do not have to set up the stack to return here as the abort call
 46524                                  ; will return to the address after the int 21 ah=4b call. This would be the
 46525                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 46526                                  ; will be restored then.
 46527                                  ;
 46528                                  ;-------------------------------------------------------------------------
 46529                                  
 46530                                  lquit:
 46531                                  	; The following jump, skipping the XMS calls will be patched to
 46532                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46533                                  	; needed because the stub is installed even before the XMS driver
 46534                                  	; is loaded if the user specifies dos=high in the config.sys
 46535                                  i20patch:
 46536 00001094 EB03                    	jmp	short quit_cont	
 46537                                  
 46538 00001096 E8D600                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46539                                  quit_cont:
 46540 00001099 2EFF2E[6610]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 46541                                  
 46542                                  ;--------------------------------------------------------------------------
 46543                                  ;
 46544                                  ; INT 21 Handler
 46545                                  ;
 46546                                  ;--------------------------------------------------------------------------
 46547                                  
 46548                                  lcommand:
 46549                                  	; The following jump, skipping the XMS calls will be patched to
 46550                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46551                                  	; needed because the stub is installed even before the XMS driver
 46552                                  	; is loaded if the user specifies dos=high in the config.sys
 46553                                  i21patch:
 46554 0000109E EB03                    	jmp	short command_cont
 46555                                  
 46556 000010A0 E8CC00                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46557                                  command_cont:
 46558 000010A3 2EFF2E[6A10]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 46559                                  
 46560                                  ;------------------------------------------------------------------------
 46561                                  ;
 46562                                  ; INT 25 
 46563                                  ;
 46564                                  ;----------------------------------------------------------------------------
 46565                                  
 46566                                  labsdrd:
 46567                                  	; The following jump, skipping the XMS calls will be patched to
 46568                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46569                                  	; needed because the stub is installed even before the XMS driver
 46570                                  	; is loaded if the user specifies dos=high in the config.sys
 46571                                  i25patch:
 46572 000010A8 EB03                    	jmp	short absdrd_cont
 46573                                  
 46574 000010AA E8C200                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46575                                  absdrd_cont:
 46576 000010AD 2EFF2E[6E10]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 46577                                  
 46578                                  ;-------------------------------------------------------------------------
 46579                                  ;
 46580                                  ; INT 26
 46581                                  ;
 46582                                  ;-----------------------------------------------------------------------
 46583                                  
 46584                                  labsdwrt:
 46585                                  	; The following jump, skipping the XMS calls will be patched to
 46586                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46587                                  	; needed because the stub is installed even before the XMS driver
 46588                                  	; is loaded if the user specifies dos=high in the config.sys
 46589                                  i26patch:
 46590 000010B2 EB03                    	jmp	short absdwrt_cont
 46591                                  
 46592 000010B4 E8B800                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46593                                  absdwrt_cont:
 46594 000010B7 2EFF2E[7210]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 46595                                  
 46596                                  ;------------------------------------------------------------------------
 46597                                  ;
 46598                                  ; INT 27
 46599                                  ;
 46600                                  ;-----------------------------------------------------------------------
 46601                                  
 46602                                  lstay_resident:
 46603                                  	; The following jump, skipping the XMS calls will be patched to
 46604                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46605                                  	; needed because the stub is installed even before the XMS driver
 46606                                  	; is loaded if the user specifies dos=high in the config.sys
 46607                                  i27patch:
 46608 000010BC EB03                    	jmp	short sr_cont
 46609                                  
 46610 000010BE E8AE00                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46611                                  sr_cont:
 46612 000010C1 2EFF2E[7610]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 46613                                  
 46614                                  ;-----------------------------------------------------------------------------
 46615                                  ;
 46616                                  ; INT 2f
 46617                                  ;
 46618                                  ;-------------------------------------------------------------------------
 46619                                  
 46620                                  lint2f:
 46621                                  	; The following jump, skipping the XMS calls will be patched to
 46622                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46623                                  	; needed because the stub is installed even before the XMS driver
 46624                                  	; is loaded if the user specifies dos=high in the config.sys
 46625                                  i2fpatch:
 46626 000010C6 EB03                    	jmp	short int2f_cont
 46627                                  
 46628 000010C8 E8A400                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46629                                  int2f_cont:
 46630 000010CB 2EFF2E[7A10]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 46631                                  
 46632                                  ;-----------------------------------------------------------------------------
 46633                                  ;
 46634                                  ; CPM entry
 46635                                  ;
 46636                                  ;------------------------------------------------------------------------
 46637                                  
 46638                                  lcall_entry:
 46639                                  	; The following jump, skipping the XMS calls will be patched to
 46640                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46641                                  	; needed because the stub is installed even before the XMS driver
 46642                                  	; is loaded if the user specifies dos=high in the config.sys
 46643                                  cpmpatch:
 46644 000010D0 EB03                    	jmp	short callentry_cont
 46645                                  
 46646 000010D2 E89A00                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46647                                  callentry_cont:
 46648 000010D5 2EFF2E[7E10]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 46649                                  
 46650                                  ;--------------------------------------------------------------------------
 46651                                  
 46652                                  lirett:
 46653 000010DA CF                      	iret
 46654                                  
 46655                                  ;---------------------------------------------------------------------------
 46656                                  ;
 46657                                  ; LowIntXX:
 46658                                  ;
 46659                                  ; Interrupts from DOS that pass control to a user program must be done from
 46660                                  ; low memory, as the user program may change the state of the A20 line or
 46661                                  ; they may require that the A20 line be OFF. The following piece of code is
 46662                                  ; far call'd from the following places in DOS:
 46663                                  ;
 46664                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 46665                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 46666                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 46667                                  ;
 46668                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 46669                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 46670                                  ; before doing the ints and then do a far junp back into DOS.
 46671                                  ;
 46672                                  ;---------------------------------------------------------------------------
 46673                                  
 46674 000010DB 00000000                DosRetAddr23:	dd	0
 46675 000010DF 00000000                DosRetAddr24:	dd	0
 46676 000010E3 00000000                DosRetAddr28:	dd	0
 46677                                  
 46678                                  	; Execute int 23h from low memory
 46679                                  LowInt23:
 46680                                  					; save the return address that is on
 46681                                  					; the stack
 46682 000010E7 2E8F06[DB10]            	pop	word [cs:DosRetAddr23]
 46683 000010EC 2E8F06[DD10]            	pop	word [cs:DosRetAddr23+2]
 46684                                  
 46685 000010F1 CD23                    	int	23h			; ctrl C
 46686                                  					; turn on A20 it has been turned OFF
 46687                                  					; by int 28/23/24 handler.
 46688                                  
 46689 000010F3 E87900                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 46690                                  
 46691 000010F6 2EFF2E[DB10]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 46692                                  
 46693                                  
 46694                                  	; Execute int 24h from low memory
 46695                                  LowInt24:
 46696                                  					; save the return address that is on
 46697                                  					; the stack
 46698 000010FB 2E8F06[DF10]            	pop	word [cs:DosRetAddr24]
 46699 00001100 2E8F06[E110]            	pop	word [cs:DosRetAddr24+2]
 46700                                  
 46701 00001105 CD24                    	int	24h			; crit error
 46702                                  					; turn on A20 it has been turned OFF
 46703                                  					; by int 28/23/24 handler.
 46704                                  
 46705 00001107 E86500                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF
 46706                                  
 46707 0000110A 2EFF2E[DF10]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 46708                                  
 46709                                  
 46710                                   
 46711                                  	; Execute int 28h from low memory
 46712                                  LowInt28:
 46713 0000110F CD28                    	int	28h			; idle int
 46714                                  					; turn on A20 it has been turned OFF
 46715                                  					; by int 28/23/24 handler.
 46716                                  
 46717 00001111 E85B00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF
 46718                                  
 46719 00001114 CB                      	retf
 46720                                  
 46721                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 46722                                  
 46723                                  ;-------------------------------------------------------------------------
 46724                                  ;
 46725                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 46726                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 46727                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 46728                                  ; This is so because exepac'd programs rely on address wrap.
 46729                                  ;
 46730                                  ;-------------------------------------------------------------------------
 46731                                  
 46732                                  disa20_xfer:
 46733 00001115 E83F00                  	call	XMMDisableA20		; disable A20
 46734                                  
 46735                                  	; Look at msproc.asm at label exec_go for understanding the following:
 46736                                  
 46737                                  	; DS:SI points to entry point
 46738                                  	; AX:DI points to initial stack
 46739                                  	; DX has PDB pointer
 46740                                  	; BX has initial AX value
 46741                                  
 46742 00001118 FA                      	cli
 46743 00001119 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 46744                                  
 46745 0000111F 8ED0                    	mov	SS,AX			; set up user's stack
 46746 00001121 89FC                    	mov	SP,DI			; and SP
 46747 00001123 FB                      	sti
 46748                                  
 46749 00001124 1E                      	push	DS			; fake long call to entry
 46750 00001125 56                      	push	SI
 46751 00001126 8EC2                    	mov	ES,DX			; set up proper seg registers
 46752 00001128 8EDA                    	mov	DS,DX
 46753 0000112A 89D8                    	mov	AX,BX			; set up proper AX
 46754 0000112C CB                      	retf
 46755                                  
 46756                                  ;-------------------------------------------------------------------------
 46757                                  ;
 46758                                  ; M003:
 46759                                  ;
 46760                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 46761                                  ; come here, turn A20 OFF restore user stack and registers before returning
 46762                                  ; to user. This is done in dos\msdisp.asm. This has been done to support
 46763                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for
 46764                                  ; more info.	
 46765                                  ;
 46766                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that
 46767                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 46768                                  ; stack to avoid additional stack overhead for the user.
 46769                                  ;
 46770                                  ; -------------------------------------------------------------------------
 46771                                  
 46772                                  disa20_iret:
 46773 0000112D E82700                  	call	XMMDisableA20
 46774 00001130 FE0E[2103]              	dec	byte [INDOS]
 46775 00001134 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 46776 00001138 8B26[8405]              	mov	SP,[USER_SP]
 46777 0000113C 89E5                    	mov	BP,SP
 46778                                  	;mov	[BP+user_env.user_AX],AL
 46779 0000113E 884600                  	mov	[bp],al
 46780 00001141 A1[F205]                	mov	AX,[NSP]
 46781 00001144 A3[8405]                	mov	[USER_SP],AX
 46782 00001147 A1[F005]                	mov	AX,[NSS]
 46783 0000114A A3[8605]                	mov	[USER_SS],AX
 46784                                  
 46785 0000114D 58                      	pop	AX			; restore user regs
 46786 0000114E 5B                      	pop	BX
 46787 0000114F 59                      	pop	CX
 46788 00001150 5A                      	pop	DX
 46789 00001151 5E                      	pop	SI
 46790 00001152 5F                      	pop	DI
 46791 00001153 5D                      	pop	BP
 46792 00001154 1F                      	pop	DS
 46793 00001155 07                      	pop	ES
 46794 00001156 CF                      	iret
 46795                                  
 46796                                  ;**************************************************************************
 46797                                  ;***	XMMDisableA20 - switch 20th address line
 46798                                  ;
 46799                                  ;	This routine is used to disable the 20th address line in
 46800                                  ;	the system using XMM calls.
 46801                                  ;
 46802                                  ;	ENTRY	none		;ds = _DATA
 46803                                  ;	EXIT	A20 line disabled
 46804                                  ;	USES	NOTHING
 46805                                  ;
 46806                                  ;**************************************************************************
 46807                                  
 46808                                  XMMDisableA20:
 46809 00001157 53                      	push	bx
 46810 00001158 50                      	push	ax
 46811                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 46812 00001159 B406                    	mov	ah,6
 46813 0000115B 2EFF1E[6311]            	call	far [cs:XMMcontrol]
 46814 00001160 58                      	pop	ax
 46815 00001161 5B                      	pop	bx
 46816 00001162 C3                      	retn
 46817                                  
 46818                                  ; The entry point in the BIOS XMS driver is defined here.
 46819                                  
 46820                                  XMMcontrol:
 46821 00001163 00000000                	dd	0
 46822                                  
 46823                                  ;--------------------------------------------------------------------------
 46824                                  ;
 46825                                  ;***	EnsureA20ON - Ensures that A20 is ON
 46826                                  ;
 46827                                  ;	This routine is used to query the A20 state in
 46828                                  ;	the system using XMM calls.
 46829                                  ;
 46830                                  ;	ENTRY: none
 46831                                  ;
 46832                                  ;	EXIT : A20 will be ON
 46833                                  ;
 46834                                  ; 	USES : NONE
 46835                                  ;
 46836                                  ;--------------------------------------------------------------------------
 46837                                  
 46838                                  LowMemory:	; label dword		; Set equal to 0000:0080
 46839 00001167 8000                    	dw	00080h
 46840 00001169 0000                    	dw	00000h
 46841                                  
 46842                                  HighMemory:	; label dword
 46843 0000116B 9000                    	dw	00090h			; Set equal to FFFF:0090
 46844 0000116D FFFF                    	dw	0FFFFh
 46845                                  
 46846                                  EnsureA20ON:
 46847 0000116F 9C                      	pushf
 46848 00001170 1E                      	push    ds
 46849 00001171 06                      	push	es
 46850 00001172 51                      	push	cx
 46851 00001173 56                      	push	si
 46852 00001174 57                      	push	di
 46853                                  
 46854 00001175 2EC536[6711]            	lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 46855 0000117A 2EC43E[6B11]            	les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 46856 0000117F B90400                  	mov	cx,4
 46857 00001182 FC                      	cld
 46858 00001183 F3A7                    	repe    cmpsw
 46859                                  
 46860 00001185 7407                    	jz	short EA20_OFF
 46861                                  EA20_RET:
 46862 00001187 5F                      	pop	di
 46863 00001188 5E                      	pop	si
 46864 00001189 59                      	pop	cx
 46865 0000118A 07                      	pop	es
 46866 0000118B 1F                      	pop	ds
 46867 0000118C 9D                      	popf
 46868 0000118D C3                      	retn
 46869                                  
 46870                                  EA20_OFF:
 46871                                  	; We are going to do the XMS call on the DOS's AuxStack.
 46872                                  	; NOTE: ints are disabled at this point.
 46873                                  
 46874 0000118E 53                      	push	bx
 46875 0000118F 50                      	push	ax
 46876                                  
 46877 00001190 8CD0                    	mov	ax,ss			; save user's stack pointer
 46878 00001192 2EA3[8610]              	mov	[cs:SS_Save],ax
 46879 00001196 2E8926[8810]            	mov	[cs:SP_Save],sp
 46880 0000119B 8CC8                    	mov	ax,cs
 46881 0000119D 8ED0                    	mov	ss,ax
 46882 0000119F BC[A007]                	mov	sp,AUXSTACK
 46883                                  					; ss:sp -> DOSDATA:AuxStack
 46884                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 46885 000011A2 B405                    	mov	ah,5
 46886 000011A4 2EFF1E[6311]            	call	far [cs:XMMcontrol]
 46887 000011A9 09C0                    	or	ax,ax
 46888 000011AB 740F                    	jz	short XMMerror		; AX = 0 fatal error
 46889                                  
 46890 000011AD 2EA1[8610]              	mov	ax,[cs:SS_Save]		; restore user stack
 46891 000011B1 8ED0                    	mov	ss,ax
 46892 000011B3 2E8B26[8810]            	mov	sp,[cs:SP_Save]
 46893                                  
 46894 000011B8 58                      	pop	ax
 46895 000011B9 5B                      	pop	bx
 46896                                  
 46897 000011BA EBCB                    	jmp	short EA20_RET
 46898                                  
 46899                                  XMMerror:				; M006 - Start
 46900 000011BC B40F                    	mov	ah,0Fh			; get video mode
 46901 000011BE CD10                    	int	10h
 46902 000011C0 3C07                    	cmp	al,7			; Q: are we an MDA
 46903 000011C2 7406                    	je	short XMMcont		; Y: do not change mode
 46904 000011C4 30E4                    	xor	ah,ah ; 0		; set video mode
 46905 000011C6 B002                    	mov	al,02h			; 80 X 25 text
 46906 000011C8 CD10                    	int	10h
 46907                                  XMMcont:
 46908 000011CA B405                    	mov	ah,05h			; set display page
 46909 000011CC 30C0                    	xor	al,al			; page 0
 46910 000011CE CD10                    	int	10h
 46911                                  	
 46912 000011D0 BE[B812]                	mov	si,XMMERRMSG
 46913 000011D3 0E                      	push	cs
 46914 000011D4 1F                      	pop	ds
 46915 000011D5 FC                      	cld				; clear direction flag
 46916                                  XMMprnt:
 46917 000011D6 AC                      	lodsb
 46918 000011D7 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 46919 000011D9 7409                    	jz	short XMMStall		; function 0Eh	
 46920 000011DB B40E                    	mov	ah,0Eh
 46921 000011DD BB0700                  	mov	bx,7
 46922 000011E0 CD10                    	int	10h
 46923 000011E2 EBF2                    	jmp	short XMMprnt
 46924                                  
 46925                                  XMMStall:
 46926 000011E4 FB                      	sti				; allow the user to warm boot
 46927 000011E5 EBFD                    	jmp	short XMMStall		; M006 - End
 46928                                  
 46929                                  ;---------------------------------------------------------------------------
 46930                                  
 46931                                  ; 27/04/2019 - Retro DOS v4.0
 46932                                  
 46933                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 46934                                  ALTAH	equ 0Ch
 46935                                  
 46936                                  ;This has been put in for WIN386 2.XX support. The format of the instance
 46937                                  ;table was different for this. Segments will be patched in at init time.
 46938                                  
 46939                                  OldInstanceJunk:
 46940 000011E7 7000                    	dw	70h	;segment of BIOS
 46941 000011E9 0000                    	dw	0	;indicate stacks in SYSINIT area
 46942 000011EB 0600                    	dw	6	;5 instance items
 46943                                  
 46944                                  	;dw	0,offset dosdata:contpos, 2
 46945                                  	;dw	0,offset dosdata:bcon, 4
 46946                                  	;dw	0,offset dosdata:carpos,106h
 46947                                  	;dw	0,offset dosdata:charco, 1
 46948                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 46949                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 46950                                  
 46951 000011ED 0000[2200]0200          	dw	0,CONTPOS,2
 46952 000011F3 0000[3200]0400          	dw	0,BCON,4
 46953 000011F9 0000[F901]0601          	dw	0,CARPOS,106h
 46954 000011FF 0000[0003]0100          	dw	0,CHARCO,1
 46955 00001205 0000[C00F]2200          	dw	0,exec_init_SP,34
 46956 0000120B 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 46957                                  
 46958                                  ;---------------------------------------------------------------------------
 46959                                  
 46960                                  ; M021-
 46961                                  ;
 46962                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 46963                                  ; 	takes control of the HMA. When running, this word is a reliable
 46964                                  ;	indicator that the DOS is actually using HMA. You can't just use
 46965                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 46966                                  
 46967                                  DosHasHMA:
 46968 00001211 00                      	db	0
 46969                                  FixExePatch:
 46970 00001212 0000                    	dw	0		; M012
 46971                                  
 46972                                  ; 25/03/2024
 46973                                  ;; 28/12/2022 - Retro DOS v4.1
 46974                                  RationalPatchPtr:
 46975 00001214 0000                    	dw	0		; M012
 46976                                  
 46977                                  ; End M021
 46978                                  
 46979                                  ;---------------------------------------------------------------------------
 46980                                  
 46981                                  ; 25/03/2024
 46982                                  %if 1
 46983                                  ; 28/12/2022 - Retro DOS v4.1
 46984                                  ;%if 0
 46985                                  ; M020 Begin
 46986                                  
 46987                                  RatBugCode:	; proc	far
 46988 00001216 51                      	push	cx
 46989 00001217 8B0E1000                	mov	cx,[10h]
 46990                                  rbc_loop:
 46991                                  	;loop	$
 46992 0000121B E2FE                    	loop	rbc_loop
 46993 0000121D 59                      	pop	cx
 46994 0000121E CB                      	retf
 46995                                  
 46996                                  ; M020 End
 46997                                  %endif
 46998                                  
 46999                                  ;---------------------------------------------------------------------------
 47000                                  	
 47001                                  UmbSave1:
 47002                                  	;db	11 dup (?)	; M023
 47003 0000121F 00<rep Bh>              	times	11 db 0	
 47004                                  
 47005                                  ; DOSDATA:122Ah
 47006                                  
 47007                                  Mark3:	; label byte
 47008                                  
 47009                                  ;IF2
 47010                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 47011                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 47012                                  ;	ENDIF
 47013                                  ;ENDIF
 47014                                  
 47015                                  ;############################################################################
 47016                                  ;
 47017                                  ; ** HACK FOR DOS 4.0 REDIR **
 47018                                  ;
 47019                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 47020                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 47021                                  ; COUNTRY_CDPG if it can. 
 47022                                  ;
 47023                                  ; MARK3 SHOULD NOT BE > 122AH 
 47024                                  ;
 47025                                  ; As of 9/6/90, this area is FULL!
 47026                                  ;
 47027                                  ;############################################################################
 47028                                   
 47029                                  	;ORG	0122Ah
 47030                                  
 47031                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 47032                                  
 47033                                  ; The following table is used for DOS 3.3
 47034                                  ;DOS country and code page information is defined here for DOS 3.3.
 47035                                  ;The initial value for ccDosCountry is 1 (USA).
 47036                                  ;The initial value for ccDosCodepage is 850.
 47037                                  
 47038                                  ; country and code page information
 47039                                  ; ---------------------------------------------------------------------------
 47040                                  COUNTRY_CDPG:	; label  byte
 47041 0000122A 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 47042 00001232 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 47042 0000123B 53595300           
 47043                                  	;db   51 dup (?)
 47044 0000123F 00<rep 33h>             	times 51 db 0
 47045                                  ; ------------------------------------------------<MSKK01>-------------------
 47046                                  ;ifdef	DBCS
 47047                                  ;  ifdef JAPAN
 47048                                  ;	dw   932			; system code page id (JAPAN)
 47049                                  ;  endif
 47050                                  ;  ifdef TAIWAN
 47051                                  ;	dw   938			; system code page id (TAIWAN)
 47052                                  ;  endif
 47053                                  ;  ifdef KOREA
 47054                                  ;	dw   934			; system code page id (KOREA IBM)
 47055                                  ;  endif
 47056                                  ;else
 47057 00001272 B501                    	dw   437			; system code page id
 47058                                  ;endif
 47059                                  ; ------------------------------------------------<MSKK01>-------------------
 47060 00001274 0600                    	dw   6				; number of entries
 47061 00001276 02                      	db   SetUcase  ; 2		; Ucase type
 47062 00001277 [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 47063 00001279 0000                    	dw   0				; segment of poiter
 47064 0000127B 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 47065 0000127C [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 47066 0000127E 0000                    	dw   0				; segment of poiter
 47067 00001280 05                      	db   SetFileList ; 5		; valid file chars type
 47068 00001281 [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 47069 00001283 0000                    	dw   0				; segment of poiter
 47070 00001285 06                      	db   SetCollate	; 6		; collate type
 47071 00001286 [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 47072 00001288 0000                    	dw   0				; segment of poiter
 47073 0000128A 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 47074 0000128B [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 47075 0000128D 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 47076 0000128F 01                      	db   SetCountryInfo  ; 1	; country info type
 47077 00001290 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 47078                                  ; ------------------------------------------------<MSKK01>-------------------
 47079                                  ;ifdef	DBCS
 47080                                  ;	...... 
 47081                                  ;else
 47082 00001292 0100                    	dw   1				; USA country id
 47083 00001294 B501                    	dw   437			; USA system code page id
 47084 00001296 0000                    	dw   0 				; date format
 47085 00001298 2400000000              	db   '$',0,0,0,0		; currency symbol
 47086 0000129D 2C00                    	db   ',',0			; thousand separator
 47087 0000129F 2E00                    	db   '.',0			; decimal separator
 47088 000012A1 2D00                    	db   '-',0			; date separator
 47089 000012A3 3A00                    	db   ':',0			; time separator
 47090 000012A5 00                      	db   0				; currency format flag
 47091 000012A6 02                      	db   2				; # of digits in currency
 47092 000012A7 00                      	db   0 				; time format
 47093 000012A8 [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 47094 000012AA 0000                    	dw   0				; segment of entry point
 47095 000012AC 2C00                    	db   ',',0			; data list separator
 47096 000012AE 000000000000000000-     	dw   0,0,0,0,0			; reserved
 47096 000012B7 00                 
 47097                                  ;endif
 47098                                  ; ------------------------------------------------<MSKK01>-------------------
 47099                                  
 47100                                  ; 27/04/2019 - Retro DOS v4.0
 47101                                  
 47102                                  ;include msdos.cl2			; XMMERRMSG
 47103                                  
 47104                                  ; DOSDATA:12B8h (MSDOS 6.21, MSDOS.SYS) ; 17/01/2024
 47105                                  
 47106                                  XMMERRMSG:
 47107 000012B8 0D0A                    	db	0Dh,0Ah
 47108 000012BA 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 47108 000012C3 617265204572726F72-
 47108 000012CC 0D0A24             
 47109                                  
 47110                                  ; DOSDATA ends
 47111                                  
 47112                                  ; 05/11/2022
 47113                                  ;----------------------------------------------------------------------------
 47114                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 47115                                  ;----------------------------------------------------------------------------
 47116                                  
 47117                                  ; 28/12/2022 - Retro DOS v4.1
 47118                                  ; (windows 3.1 and Rational Extender patches are removed/disabled)
 47119                                  ; (Windows 3.1 does not use the patches below if DOS version is MSDOS 5.0)
 47120                                  ;----------------------------------------------------------------------------
 47121                                  %if 0
 47122                                  ;----------------------------------------------------------------------------
 47123                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47124                                  
 47125                                  ;============================================================================
 47126                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 47127                                  ;============================================================================
 47128                                  ; 27/04/2019 - Retro DOS 4.0
 47129                                  
 47130                                  ;DOSDATA Segment
 47131                                  
 47132                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 47133                                  
 47134                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47135                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 47136                                  
 47137                                  ; first and second DOS patches
 47138                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 47139                                  ;
 47140                                  ; Code in disk.asm, 2 locations, one for read, one for write
 47141                                  ;	DVRDLP:
 47142                                  ;	DVWRTLP:
 47143                                  ;
 47144                                  ;
 47145                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 47146                                  ;	lds	si,si+7 				  ; sf_devptr
 47147                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 47148                                  
 47149                                  DOSP1_ID:	db	036h,0C5h,036h
 47150                                  DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 47151                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 47152                                  
 47153                                  		db	90h, 90h
 47154                                  
 47155                                  DOSP12_ID:	db	036h,0C5h,036h
 47156                                  DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 47157                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 47158                                  
 47159                                  ; DOSDATA:12E3h
 47160                                  
 47161                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 47162                                  ;
 47163                                  ; Code in disk.asm, 1 location
 47164                                  ;	GETBUF:
 47165                                  ;
 47166                                  ; 051h	push	cx	<- begin special int28 mode
 47167                                  ;	push	es
 47168                                  ;	push	di
 47169                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 47170                                  ;	call	????	; $STD_CON_STRING_INPUT
 47171                                  ;	pop	di
 47172                                  ;	pop	es
 47173                                  ; 059h	pop	cx	<- end special int28 mode
 47174                                  
 47175                                  DOSP3_ID:	db	051h,006h,057h,0BAh
 47176                                  DOSP3_CONBUF:	db	029h,002h,0E8h
 47177                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 47178                                  		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 47179                                  DOSP4_ID:	db	059h			; pop cx
 47180                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 47181                                  	
 47182                                  ; DOSDATA:12EFh
 47183                                  
 47184                                  ; Fifth DOS patch - System call 40h (Write) to console
 47185                                  ;
 47186                                  ; Code in disk.asm, 1 location
 47187                                  ;
 47188                                  ;		push	cx
 47189                                  ;      WRCONLP: lodsb
 47190                                  ;		cmp	al,1Ah
 47191                                  ;		jz	????
 47192                                  ;		call	????	<- "simulate" int28 event
 47193                                  ;		loop	WRCONLP
 47194                                  ;      CONEOF:	pop	ax
 47195                                  
 47196                                  DOSP5_ID:	db	051h			; push cx
 47197                                  		db	0ACh,03Ch,01Ah,074h,005h
 47198                                  		db	0E8h			; call
 47199                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 47200                                  
 47201                                  ; DOSDATA:12F6h
 47202                                  
 47203                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 47204                                  ;
 47205                                  ; Code in disp.asm, 1 location
 47206                                  ;
 47207                                  ;
 47208                                  ;	mov [SaveDS],ds
 47209                                  ;	mov [SaveBX],bx
 47210                                  ;	mov bx,cs
 47211                                  ;	mov ds,bx
 47212                                  ;	inc [indos]
 47213                                  ;	xor ax,ax
 47214                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 47215                                  
 47216                                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 47217                                  DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 47218                                  		db	02Eh,089h,01Eh
 47219                                  DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 47220                                  		db	08Ch,0CBh		; mov bx,cs
 47221                                  		db	08Eh,0DBh		; mov ds,bx
 47222                                  		db	0FEh,006h
 47223                                  DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 47224                                  		db	033h,0C0h		; xor ax,ax
 47225                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 47226                                  
 47227                                  ; DOSDATA:130Ah
 47228                                  
 47229                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 47230                                  ;
 47231                                  ; Code in handle.asm, 1 location in routine CheckOwner
 47232                                  ;
 47233                                  ;
 47234                                  ;
 47235                                  ;	push	ax
 47236                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 47237                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 47238                                  ;	pop	ax
 47239                                  ;	jz	????
 47240                                  
 47241                                  DOSP8_ID:	db	050h			; push ax
 47242                                  		db	036h,0A1h
 47243                                  DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 47244                                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 47245                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 47246                                  		db	02Fh,058h		; pop  ax
 47247                                  
 47248                                  ; DOSDATA:1314h
 47249                                  
 47250                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 47251                                  ;
 47252                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 47253                                  ;   a yeild when a character is not ready to be read.
 47254                                  ;
 47255                                  ; Code in disk.asm, 3 locations
 47256                                  ;
 47257                                  ;   DVRDRAW:
 47258                                  ;	    PUSH    ES
 47259                                  ;	    POP     DS
 47260                                  ;   ReadRawRetry:				<- Patch 10
 47261                                  ;	    MOV     BX,DI
 47262                                  ;	    XOR     AX,AX			<- Reenter #2
 47263                                  ;	    MOV     DX,AX
 47264                                  ;	    call    SETREAD
 47265                                  ;	    PUSH    DS				<- Reenter #1
 47266                                  ;	    LDS     SI,[THISSFT]
 47267                                  ;	    call    DEVIOCALL
 47268                                  ;	    MOV     DX,DI
 47269                                  ;	    MOV     AH,86H
 47270                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 47271                                  ;	    TEST    DI,STERR
 47272                                  ;	    JZ	    CRDROK
 47273                                  ;	    call    CHARHARD
 47274                                  ;	    MOV     DI,DX
 47275                                  ;	    OR	    AL,AL
 47276                                  ;	    JZ	    CRDROK
 47277                                  ;	    CMP     AL,3
 47278                                  ;	    JZ	    CRDFERR
 47279                                  ;	    POP     DS
 47280                                  ;	    JMP     ReadRawRetry
 47281                                  ;
 47282                                  ;   CRDFERR:
 47283                                  ;	    POP     DI				<- Patch 11
 47284                                  ;   DEVIOFERR:
 47285                                  ;	    LES     DI,[THISSFT]
 47286                                  ;	    jmp     SET_ACC_ERR_DS
 47287                                  ;
 47288                                  ;   CRDROK:
 47289                                  ;	    POP     DI				<- Patch 12
 47290                                  ;	    MOV     DI,DX
 47291                                  ;	    ADD     DI,[CALLSCNT]
 47292                                  ;	    JMP     SHORT ENDRDDEVJ3
 47293                                  
 47294                                  DOSP10_ID:		db	006H,01FH
 47295                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 47296                                  DOSP10_LOC:		db	08BH,0DFH
 47297                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 47298                                  			db	033H,0C0H,08BH,0D0H,0E8H
 47299                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 47300                                  			db	0DFH,00EH
 47301                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 47302                                  			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 47303                                  			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 47304                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 47305                                  			db	009H,003H
 47306                                  			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 47307                                  			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 47308                                  			db	01FH,0EBH,0CFH
 47309                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 47310                                  			db	05FH
 47311                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 47312                                  			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 47313                                  
 47314                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 47315                                  			db	05FH,08BH,0FAH
 47316                                  ; DOSDATA:1353h
 47317                                  
 47318                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 47319                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 47320                                  ;
 47321                                  ;	    Sets focus to current VM so user can see fatal message.
 47322                                  ;
 47323                                  ;
 47324                                  ;	l0: lodsb		<- Setfocus here
 47325                                  ;	    cmp al, '$'
 47326                                  ;	    je l1
 47327                                  ;	    mov bl, 7
 47328                                  ;	    mov ah, 0Eh
 47329                                  ;	    int 10h
 47330                                  ;	    jmp l0
 47331                                  ;	l1: jmp $
 47332                                  
 47333                                  DOSP13_ID:	db	0ACh			; l0: lodsb
 47334                                  		db	03Ch,024h		;     cmp al, '$'
 47335                                  		db	074h,008h		;     je l1
 47336                                  		db	0B3h,007h		;     mov bl, 7
 47337                                  		db	0B4h,00Eh		;     mov ah, 0Eh
 47338                                  		db	0CDh,010h		;     int 10h
 47339                                  		db	0EBh,0F3h		;     jmp l0
 47340                                  		db	0EBh,0FEh		; l1: jmp $
 47341                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 47342                                  
 47343                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47344                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 47345                                  
 47346                                  ; 06/12/2022
 47347                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 47348                                  
 47349                                  ; DOSDATA ends
 47350                                  
 47351                                  ;============================================================================
 47352                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 47353                                  ;============================================================================
 47354                                  ; 27/04/2019 - Retro DOS 4.0
 47355                                  
 47356                                  ;mpatch.asm -- holds data patch location for callouts 
 47357                                  ; -- allocate cluster in rom.asm
 47358                                  ;
 47359                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 47360                                  ; Currently, this location is used only by magicdrv.sys's patch to
 47361                                  ; cluster allocation, however it can be expanded to be used by other
 47362                                  ; patches. This is important since we have an easy-access pointer to
 47363                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 47364                                  ; only patch out a far call/retf, so any space after that could be
 47365                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 47366                                  ; to call out here.
 47367                                  ;
 47368                                  ; Currently, we allocate only the minimum space required for the 6
 47369                                  ; byte magicdrv patch, so if you change the dos data, you may want
 47370                                  ; to reserve space here if your new data will be position dependent
 47371                                  ; and would prohibit growing of this table.
 47372                                  ;       
 47373                                  ;history	-	created 8-7-92 by scottq
 47374                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 47375                                  ;
 47376                                  ;Exported Functions
 47377                                  ;==================
 47378                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 47379                                  
 47380                                  ; DosData Segment
 47381                                  
 47382                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 47383                                  
 47384                                  ; ---------------------------------------------------------------------------
 47385                                  
 47386                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 47387                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 47388                                  ; greater). Added to this file because it needed to be somewhere and is
 47389                                  ; 'patch' related.
 47390                                  
 47391                                  Rational386PatchPtr:
 47392                                  	dw	0	; points to patch routine or RET instr.
 47393                                  ; ---------------------------------------------------------------------------
 47394                                  
 47395                                  MagicPatch:
 47396                                  ;MagicPatch proc far
 47397                                          retf            ;default is to just return to allocate
 47398                                          nop             ;however, this code will be patched
 47399                                          nop             ;by magicdrv.sys to
 47400                                          nop             ; call far ?:?     
 47401                                          nop             ; retf or perhaps just jmp far
 47402                                          nop             ;retf/nop take one byte, so we need six instructions
 47403                                                          ;for 6 byte patch
 47404                                  ;MagicPatch endp
 47405                                  
 47406                                  ; ---------------------------------------------------------------------------
 47407                                  
 47408                                  ;DosData Ends
 47409                                  
 47410                                  ; DOSDATA:136Ah
 47411                                  
 47412                                  ;----------------------------------------------------------------------------
 47413                                  
 47414                                  ;DOSDATALAST SEGMENT
 47415                                  
 47416                                  ; 29/04/2019 - Retro DOS v4.0
 47417                                  
 47418                                  ;----------------------------------------------------------------------------
 47419                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 47420                                  
 47421                                  db 0,1,12,64,19,0 ; ! Magic numbers !
 47422                                  
 47423                                  ;align 16
 47424                                  
 47425                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 47426                                  
 47427                                  ;----------------------------------------------------------------------------
 47428                                  
 47429                                  %endif	; 05/11/2022
 47430                                  
 47431                                  ; 05/12/2022
 47432                                  ;MSDAT001E:	; label byte
 47433                                  
 47434                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47435                                  DOSDATAEND equ $
 47436                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 47437                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 47438                                  
 47439                                  ;DOSDATALAST ENDS
 47440                                  
 47441                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 47442                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 47443                                  ;============================================================================
 47444                                  ;	END
 47445                                  ;============================================================================
 47446                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 47447                                  ; -----------------------------
 47448                                  ; MAY 2019, ISTANBUL - TURKIYE.
