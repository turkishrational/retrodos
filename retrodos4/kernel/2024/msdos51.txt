     1                                  ;*****************************************************************************
     2                                  ; MSDOS5.BIN (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 10/02/2024 - Retro DOS v4.1 ((Previous: 27/09/2023))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos5.s -l msdos5.lst -o MSDOS5.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    27                                  
    28                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    29                                  ;	(as included binary, 'MSDOS5.BIN') 
    30                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    31                                  ;	
    32                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    33                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    34                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    35                                        
    36                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    37                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    38                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    39                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    40                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    41                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    42                                  
    43                                  ;=============================================================================
    44                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    45                                  ;-----------------------------------------------------------------------------
    46                                  
    47                                  ; MSDOS 6.0 Kernel source files:
    48                                  ;	MSDATA.ASM, 
    49                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    50                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    51                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    52                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    53                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    54                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    55                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    56                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    57                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    58                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    59                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    60                                  ;
    61                                  ; MSDOS 2.0 Kernel source files:
    62                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    63                                  ;	MSCODE.ASM
    64                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    65                                  
    66                                  ;============================================================================
    67                                  ; DOSLINK
    68                                  ;============================================================================
    69                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    70                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    71                                  ;stdio time xenix xenix2
    72                                  
    73                                  ;============================================================================
    74                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    75                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    76                                  ;============================================================================
    77                                  ;
    78                                  ; ###########################################################################
    79                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    80                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    81                                  ; #			 Licensed to: Freeware version			    #
    82                                  ; ###########################################################################
    83                                  ;
    84                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    85                                  
    86                                  ; ---------------------------------------------------------------------------
    87                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    88                                  ; Format      :	Binary file
    89                                  ;============================================================================
    90                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
    91                                  ;----------------------------------------------------------------------------
    92                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
    93                                  
    94                                  ;============================================================================
    95                                  ; MSDOS.ASM
    96                                  ;============================================================================
    97                                  
    98                                  ;TITLE   Standard MSDOS
    99                                  ;NAME    MSDOS_2
   100                                  
   101                                  ; Number of disk I/O buffers
   102                                  
   103                                  ;	INCLUDE STDSW.ASM
   104                                  ;       INCLUDE MSHEAD.ASM
   105                                  ;       INCLUDE MSDATA.ASM
   106                                  
   107                                  ;	END
   108                                  
   109                                  ;============================================================================
   110                                  ; STDSW.ASM
   111                                  ;============================================================================
   112                                  
   113                                  TRUE    EQU     0FFFFH
   114                                  FALSE   EQU     ~TRUE ; NOT TRUE
   115                                  
   116                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   117                                  ; version of the operating system
   118                                  ;MSVER   EQU	false
   119                                  ;IBM     EQU	true
   120                                  ;WANG    EQU	FALSE
   121                                  ;ALTVECT EQU	FALSE
   122                                  
   123                                  ; Set this switch to cause DOS to move itself to the end of memory
   124                                  ;HIGHMEM EQU     FALSE
   125                                  
   126                                  ;	IF      IBM
   127                                  ESCCH    EQU	 0			;character to begin escape seq.
   128                                  CANCEL   EQU	 27			;Cancel with escape
   129                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   130                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   131                                  ZEROEXT  EQU	TRUE
   132                                  ;       ELSE
   133                                  ;       IF      WANG			;Are we assembling for WANG?
   134                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   135                                  ;       ELSE
   136                                  ;ESCCH	 EQU	1BH
   137                                  ;       ENDIF
   138                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   139                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   140                                  					;and off if not WANG
   141                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   142                                  					;and off
   143                                  ;ZEROEXT EQU	TRUE
   144                                  ;        ENDIF
   145                                  
   146                                  ;============================================================================
   147                                  ; MSHEAD.ASM
   148                                  ;============================================================================
   149                                  
   150                                  ;--------------------------------------------------------------
   151                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   152                                  ;--------------------------------------------------------------
   153                                  
   154                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   155                                  ;        by Microsoft MSDOS development group:
   156                                  ;           Tim Paterson (Ret.)
   157                                  ;           Aaron Reynolds
   158                                  ;           Nancy Panners (Parenting)
   159                                  ;           Mark Zbikowski
   160                                  ;           Chris Peters (BIOS) (ret.)
   161                                  
   162                                  ; ****************** Revision History *************************
   163                                  ;          >> EVERY change must noted below!! <<
   164                                  ;
   165                                  ; 0.34 12/29/80 General release, updating all past customers
   166                                  ; 0.42 02/25/81 32-byte directory entries added
   167                                  ; 0.56 03/23/81 Variable record and sector sizes
   168                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   169                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   170                                  ; 0.75 04/17/81 Improve and correct buffer handling
   171                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   172                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   173                                  ; 1.00 04/28/81 Renumber for general release
   174                                  ; 1.01 05/12/81 Fix bug in `STORE'
   175                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   176                                  ;               RENAME fix, general cleanup
   177                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   178                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   179                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   180                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   181                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   182                                  ;               of smaller improvements
   183                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   184                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   185                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   186                                  ;               zero extent field in IBM version (back to 1.01!)
   187                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   188                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   189                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   190                                  ;               is searched first when possible to minimize I/O
   191                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   192                                  ;               full sector write when file is growing
   193                                  ;      03/09/82 Multiple I/O buffers
   194                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   195                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   196                                  ;               must invalidate all buffers (disk and directory).
   197                                  ; 1.27 03/31/82 Installable device drivers
   198                                  ;                 Function call 47 - Get pointer to device table list
   199                                  ;                 Function call 48 - Assign CON AUX LIST
   200                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   201                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   202                                  ;               call entries.  Most CS relative references changed to SS
   203                                  ;               relative with an eye toward putting a portion of the DOS in
   204                                  ;               ROM.  DOS source also broken into header, data and code pieces
   205                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   206                                  ;               return the current values.
   207                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   208                                  ;               call to return flag location (call 29)
   209                                  ;      04/15/82 Volume ID attribute added
   210                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   211                                  ;               avoid a CS relative reference.
   212                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   213                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   214                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   215                                  ;               call 49.
   216                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   217                                  ;               address of DPB
   218                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   219                                  ;               writting to console device via file I/O.  Added a console
   220                                  ;               output attribute to devices.
   221                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   222                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   223                                  ;               as devices....  pipes, redirection now possible
   224                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   225                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   226                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   227                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   228                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   229                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   230                                  ;               out back about 1.27 or so (oops).  ARR
   231                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   232                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   233                                  ;               RMDIR Xenix calls
   234                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   235                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   236                                  ;               Frees up lots of memory.
   237                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   238                                  ;               system buffers
   239                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   240                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   241                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   242                                  ;               changed to set file handle environment.
   243                                  ; 2.00 08/01/82 Number for IBM release
   244                                  ;      01/19/83 No environ bug in EXEC
   245                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   246                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   247                                  ;      01/27/83 Growcnt fixed for 32-bits
   248                                  ;      01/27/83 Find-first problem after create
   249                                  ; 2.01 02/17/83 International DOS
   250                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   251                                  ;               an IBM PC
   252                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   253                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   254                                  ; 2.10 03/09/83 Start of NETWORK support
   255                                  ;		New Buffer structure
   256                                  ;		New Sytem file table structure
   257                                  ;		FCB moved to internal representation
   258                                  ;		DOS re-organized
   259                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   260                                  ;		device interface.
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 2.50 09/12/83 More network stuff
   264                                  ;
   265                                  ; *************************************************************
   266                                  
   267                                  ; ----------------------------------------------------------------------------
   268                                  ; EQUATES
   269                                  
   270                                  ; Interrupt Entry Points:
   271                                  
   272                                  ; INTBASE:      ABORT
   273                                  ; INTBASE+4:    COMMAND
   274                                  ; INTBASE+8:    BASE EXIT ADDRESS
   275                                  ; INTBASE+C:    CONTROL-C ABORT
   276                                  ; INTBASE+10H:  FATAL ERROR ABORT
   277                                  ; INTBASE+14H:  BIOS DISK READ
   278                                  ; INTBASE+18H:  BIOS DISK WRITE
   279                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   280                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   281                                  ; INTBASE+40H:  Long jump to CALL entry point
   282                                  
   283                                  ENTRYPOINTSEG   EQU     0Ch
   284                                  MAXDIF          EQU     0FFFh
   285                                  SAVEXIT         EQU     10
   286                                  ; 06/05/2019
   287                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   288                                  
   289                                         ; INCLUDE DOSSYM.ASM
   290                                         ; INCLUDE DEVSYM.ASM
   291                                  
   292                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   293                                  ; PAGE
   294                                  ; There are three kinds of context resets that can occur during normal DOS
   295                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   296                                  ; be handles in a clean fashion that allows nested executions along with the
   297                                  ; ability to trap one's own errors.
   298                                  ;
   299                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   300                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   301                                  ;           follows:
   302                                  ;
   303                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   304                                  ;           Save it in static memory.
   305                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   306                                  ;
   307                                  ;           The interrupt service routine must preserve all registers and
   308                                  ;           return carry set iff the operation is to be aborted (via abort
   309                                  ;           system call), otherwise, carry is reset and the operation is
   310                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   311                                  ;           RESULTS.
   312                                  ;
   313                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   314                                  ;           restore INT int_ctrl_c from the saved vector.
   315                                  ;
   316                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   317                                  ;           also preserve registers and return one of three values in AL: 0 and
   318                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   319                                  ;           himself is not to issue the abort, rather, the dos will do it for
   320                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   321                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   322                                  ;
   323                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   324                                  ;           abort call.  This is reserved for knowledgeable system programs.
   325                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   326                                  
   327                                  ;SUBTTL SEGMENT DECLARATIONS
   328                                  
   329                                  ; The following are all of the segments used.  They are declared in the order
   330                                  ; that they should be placed in the executable
   331                                  
   332                                  ;
   333                                  ; segment ordering for MSDOS
   334                                  ;
   335                                  
   336                                  ;START           SEGMENT BYTE PUBLIC 'START'
   337                                  ;START           ENDS
   338                                  
   339                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   340                                  ;CONSTANTS       ENDS
   341                                  
   342                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   343                                  ;DATA            ENDS
   344                                  
   345                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   346                                  ;CODE            ENDS
   347                                  
   348                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   349                                  ;LAST            ENDS
   350                                  
   351                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   352                                  
   353                                  ; The following segment is defined such that the data/const classes appear
   354                                  ; before the code class for ROMification
   355                                  
   356                                  ;START		SEGMENT BYTE PUBLIC 'START'
   357                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   358                                  ;		JMP     DOSINIT
   359                                  ;START		ENDS
   360                                  
   361                                  ;============================================================================
   362                                  ; BPB.INC, MSDOS 6.0, 1991
   363                                  ;============================================================================
   364                                  ; 09/07/2018 - Retro DOS v3.0
   365                                  
   366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   367                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   368                                  ;									   ;
   369                                  
   370                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   371                                  ;
   372                                  ;	The BPB contains information about the disk structure. It dates
   373                                  ;	back to the earliest FAT systems and so FAT information is
   374                                  ;	intermingled with physical driver information.
   375                                  ;
   376                                  ;	A boot sector contains a BPB for its device; for other disks
   377                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   378                                  ;	information in the DPB.
   379                                  ;
   380                                  ;	The BDS structure contains a BPB within it. 
   381                                  
   382                                  struc A_BPB
   383 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   384 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   385 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   386 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   387 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   388 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   389 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   390 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   391 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   392 0000000F ????                    .BPB_HEADS:		resw	1
   393 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   394 00000013 ????                    			resw	1
   395 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   396 00000017 ????                    			resw	1
   397 00000019 ????????????            			resb	6	; NOTE:  many times these
   398                                  ;					; 	 6 bytes are omitted
   399                                  ;					;	 when BPB manipulations
   400                                  ;					;	 are performed!
   401                                  .size:
   402                                  endstruc
   403                                  
   404                                  ;                                                                          ;
   405                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   406                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   407                                  
   408                                  ;============================================================================
   409                                  ; BUFFER.INC, MSDOS 6.0, 1991
   410                                  ;============================================================================
   411                                  ; 04/05/2019 - Retro DOS v4.0
   412                                  
   413                                  ; <Disk I/O Buffer Header>
   414                                  
   415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   416                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   417                                  ;									   ;
   418                                  
   419                                  ; Field definition for I/O buffer information
   420                                  
   421                                  struc BUFFINFO
   422 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   423 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   424 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   425                                  				; SFT table index (bit 7 = 1)
   426                                  				; = FFH if buffer free
   427 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   428                                  				;	= 0 if Local device buffer
   429                                  				; Bit 6 = 1 if buffer dirty
   430                                  				; Bit 5 = Reserved
   431                                  				; Bit 4 = Search bit (bit 7 = 1)
   432                                  				; Bit 3 = 1 if buffer is DATA
   433                                  				; Bit 2 = 1 if buffer is DIR
   434                                  				; Bit 1 = 1 if buffer is FAT
   435                                  				; Bit 0 = Reserved
   436 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   437                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   438 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   439 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   440 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   441 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   442 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   443                                  .size:	; 20 bytes
   444                                  endstruc
   445                                  
   446                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   447                                  				;For buf_flags bit 7 = 1, this is the byte
   448                                  				;offset of the start of the buffer in
   449                                  				;the file pointed to by buf_ID. Thus
   450                                  				;the buffer starts at location
   451                                  				;buf_offset in the file and contains
   452                                  				;buf_fill bytes.
   453                                  
   454                                  BUFINSIZ        EQU     BUFFINFO.size
   455                                  
   456                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   457                                  
   458                                  ;Flag byte masks
   459                                  buf_isnet	EQU	10000000B
   460                                  buf_dirty	EQU	01000000B
   461                                  ;***
   462                                  buf_visit	EQU	00100000B
   463                                  ;***
   464                                  buf_snbuf	EQU	00010000B
   465                                  
   466                                  buf_isDATA	EQU	00001000B
   467                                  buf_isDIR	EQU	00000100B
   468                                  buf_isFAT	EQU	00000010B
   469                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   470                                  
   471                                  buf_NetID	EQU	BUFINSIZ
   472                                  
   473                                  ;                                                                          ;
   474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   476                                  
   477                                  ;============================================================================
   478                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   479                                  ;============================================================================
   480                                  ; 04/05/2019 - Retro DOS v4.0
   481                                  
   482                                  ; <Control character definitions>
   483                                  
   484                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   485                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   486                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   487                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   488                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   489                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   490                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   491                                  c_HT	    EQU     09h 	; ^I ASCII tab
   492                                  
   493                                  ; <User stack inside of system call>
   494                                  ; Location of user registers relative user stack pointer
   495                                  
   496                                  struc	user_env   ; user_environ
   497 00000000 ????                    .user_AX: resw 1
   498 00000002 ????                    .user_BX: resw 1
   499 00000004 ????                    .user_CX: resw 1
   500 00000006 ????                    .user_DX: resw 1
   501 00000008 ????                    .user_SI: resw 1
   502 0000000A ????                    .user_DI: resw 1
   503 0000000C ????                    .user_BP: resw 1
   504 0000000E ????                    .user_DS: resw 1
   505 00000010 ????                    .user_ES: resw 1
   506 00000012 ????                    .user_IP: resw 1
   507 00000014 ????                    .user_CS: resw 1
   508 00000016 ????                    .user_F:  resw 1
   509                                  .size:
   510                                  endstruc
   511                                  
   512                                  ; ---- <Disk map> ----
   513                                  
   514                                  ;	MSDOS partitions the disk into 4 sections:
   515                                  ;
   516                                  ;  phys sector 0:   +-------------------+
   517                                  ;	|	    | boot/reserved	|
   518                                  ;	|	    +-------------------+
   519                                  ;	|	    |  File allocation	|
   520                                  ;	v	    |	   table(s)	|
   521                                  ;		    |  (multiple copies |
   522                                  ;		    |	  are kept)	|
   523                                  ;		    +-------------------+
   524                                  ;		    |	  Directory	|
   525                                  ;		    +-------------------+
   526                                  ;		    |	  File space	|
   527                                  ;		    +-------------------+
   528                                  ;		    |	Unaddressable	|
   529                                  ;		    |  (to end of disk) |
   530                                  ;		    +-------------------+
   531                                  ;
   532                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   533                                  ; adjusted to maximize the file space addressable.
   534                                  
   535                                  ; <File allocation Table information>
   536                                  
   537                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   538                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   539                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   540                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   541                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   542                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   543                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   544                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   545                                  ; The first available allocation unit is assigned entry number two, and even
   546                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   547                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   548                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   549                                  ; the next cluster in the file.
   550                                  ;
   551                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   552                                  ; do because these clusters show as allocated, but are not part of any
   553                                  ; allocation chain and thus will never be allocated to a file.	A particular
   554                                  ; number is selected so that disk checking programs know what to do (ie.  a
   555                                  ; cluster with entry FF7H which is not in a chain is not an error).
   556                                  
   557                                  ;**	Character Type Flags
   558                                  ;
   559                                  ;	These flags are used in a lookup table indexed by the character code.
   560                                  ;	They're used to quickly classify characters when parsing paths.
   561                                  ;	I think that these are only used to parse FCBs - jgl
   562                                  
   563                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   564                                  FDELIM	equ 2		; is a delimiter
   565                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   566                                  FFCB	equ 8		; is valid in an FCB
   567                                  
   568                                  ;** Bit definitions for DOS_FLAG
   569                                  ;
   570                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   571                                  ;	  $open to indicate to the redirector that this open is being made
   572                                  ;	  by an exec call.
   573                                  ;
   574                                  ; Bit 2
   575                                  ;
   576                                  ; M003, M027:
   577                                  ;
   578                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   579                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   580                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   581                                  ; user program in the case of an Exec call. The next call to DOS will turn
   582                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   583                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   584                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   585                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   586                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   587                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   588                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   589                                  ; Bit 2 will be unconditionally cleared here.
   590                                  ;
   591                                  ; M009, M027:
   592                                  ;
   593                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   594                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   595                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   596                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   597                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   598                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   599                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   600                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   601                                  ; Bit 2 will be unconditionally cleared here.
   602                                  
   603                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   604                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   605                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   606                                  
   607                                  ;============================================================================
   608                                  ; VECTOR.INC, MSDOS 6.0, 1991
   609                                  ;============================================================================
   610                                  ; 04/05/2019 - Retro DOS v4.0
   611                                  
   612                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   613                                  
   614                                  ; <interrupt definitions>
   615                                  
   616                                  INTTAB          EQU     20H
   617                                  INTBASE         EQU     4 * INTTAB
   618                                  ENTRYPOINT      EQU     INTBASE+40H
   619                                  
   620                                  ;	IF      ALTVECT
   621                                  ;ALTTAB  EQU     0F0H
   622                                  ;ALTBASE EQU     4 * ALTTAB
   623                                  ;	ENDIF
   624                                  
   625                                  ;
   626                                  ; interrupt assignments
   627                                  ;
   628                                  ;	IF	NOT ALTVECT
   629                                  int_abort	    EQU     INTTAB	; abort process
   630                                  int_command	    EQU     int_abort+1 ; call MSDOS
   631                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   632                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   633                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   634                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   635                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   636                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   637                                  					; resident
   638                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   639                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   640                                  ;									   ;
   641                                  int_spooler	    EQU     int_abort+8 ; spooler call
   642                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   643                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   644                                  ;									   ;
   645                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   646                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   647                                  ;	ELSE
   648                                  ;int_abort	    EQU     INTTAB	; abort process
   649                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   650                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   651                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   652                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   653                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   654                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   655                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   657                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   658                                  ;									   ;
   659                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   660                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   661                                  ;									   ;
   662                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   663                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   664                                  ;	ENDIF
   665                                  
   666                                  addr_int_abort		EQU    4 * int_abort
   667                                  addr_int_command	EQU    4 * int_command
   668                                  addr_int_terminate	EQU    4 * int_terminate
   669                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   670                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   671                                  addr_int_disk_read	EQU    4 * int_disk_read
   672                                  addr_int_disk_write	EQU    4 * int_disk_write
   673                                  addr_int_keep_process	EQU    4 * int_keep_process
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   676                                  ;									   ;
   677                                  addr_int_spooler	EQU    4 * int_spooler
   678                                  addr_int_fastcon	EQU    4 * int_fastcon
   679                                  addr_int_ibm		EQU    4 * int_IBM
   680                                  ;									   ;
   681                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   682                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   683                                  
   684                                  ;============================================================================
   685                                  ; DIRENT.INC, MSDOS 6.0, 1991
   686                                  ;============================================================================
   687                                  ; 04/05/2019 - Retro DOS v4.0
   688                                  
   689                                  ; BREAK <Directory entry>
   690                                  
   691                                  ;
   692                                  ;       +---------------------------+
   693                                  ;       |  (12 BYTE) filename/ext   |       0       0
   694                                  ;       +---------------------------+
   695                                  ;       |     (BYTE) attributes     |       11      B
   696                                  ;       +---------------------------+
   697                                  ;       |    (10 BYTE) reserved     |       12      C
   698                                  ;       +---------------------------+
   699                                  ;       | (WORD) time of last write |       22      16
   700                                  ;       +---------------------------+
   701                                  ;       | (WORD) date of last write |       24      18
   702                                  ;       +---------------------------+
   703                                  ;       |   (WORD) First cluster    |       26      1A
   704                                  ;       +---------------------------+
   705                                  ;       |     (DWORD) file size     |       28      1C
   706                                  ;       +---------------------------+
   707                                  ;
   708                                  ;   First byte of filename  = E5 -> free directory entry
   709                                  ;                           = 00 -> end of allocated directory
   710                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   711                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   712                                  ;
   713                                  struc dir_entry
   714 00000000 <res Bh>                .dir_name:	resb 11			; file name
   715 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   716 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   717 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   718 00000010 ??                      .dir_attr2:	resb 1			; reserved
   719 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   720 00000016 ????                    .dir_time:	resw 1			; time of last write
   721 00000018 ????                    .dir_date:	resw 1			; date of last write
   722 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   723 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   724 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   725                                  .size:
   726                                  endstruc
   727                                  
   728                                  attr_read_only      EQU      1h
   729                                  attr_hidden         EQU      2h
   730                                  attr_system         EQU      4h
   731                                  attr_volume_id      EQU      8h
   732                                  attr_directory      EQU     10h
   733                                  attr_archive        EQU     20h
   734                                  attr_device	    EQU     40h	; This is a VERY special bit.
   735                                  				;   NO directory entry on a disk EVER
   736                                  				;   has this bit set. It is set non-zero
   737                                  				;   when a device is found by GETPATH
   738                                  
   739                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   740                                                                          ; OR of hard attributes for FINDENTRY
   741                                  
   742                                  attr_ignore         EQU     attr_read_only+attr_archive
   743                                                                          ; ignore this(ese) attribute(s)
   744                                                                          ; during search first/next
   745                                  
   746                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   747                                                                          ; changeable via CHMOD
   748                                  
   749                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   750                                  
   751                                  ;============================================================================
   752                                  ; DPB.INC, MSDOS 6.0, 1991
   753                                  ;============================================================================
   754                                  ; 24/04/2019 - Retro DOS v4.0
   755                                  
   756                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   757                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   758                                  
   759                                  ; ---------------------------------------------------------------------------
   760                                  ;**	DPB - Drive Parameter Block
   761                                  ;
   762                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   763                                  ;	possibly inaccurate deductions from code study... - jgl
   764                                  ;
   765                                  ;	The DPB is DOS's main structure for describing block devices.
   766                                  ;	It contains info about the "Drive" intermingled with info about
   767                                  ;	the FAT file system which is presumably on the drive.  I don't know
   768                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   769                                  ;
   770                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   771                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   772                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   773                                  ; ---------------------------------------------------------------------------
   774                                  
   775                                  struc	DPB
   776 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   777 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   778 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   779 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   780 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   781 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   782 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   783 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   784 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   785 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   786                                  ; MSDOS 3.3
   787                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   788                                  ; MSDOS 6.0
   789 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   790 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   791 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   792 00000017 ??                      .MEDIA:		resb 1		; Media byte
   793 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   794                                  				; check the first time this DPB is used
   795 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   796 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   797 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   798                                  .size:
   799                                  endstruc
   800                                  
   801                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   802                                  
   803                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   804                                  
   805                                  ;                                                                          ;
   806                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   807                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   808                                  
   809                                  ;============================================================================
   810                                  ; SF.INC, MSDOS 6.0, 1991
   811                                  ;============================================================================
   812                                  ; 25/04/2019 - Retro DOS v4.0
   813                                  ; 07/07/2018 - Retro DOS v3.0
   814                                  
   815                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   816                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   817                                  ;                                                                          ;
   818                                  
   819                                  ; ---------------------------------------------------------------------------
   820                                  ;**	SF.INC - System File Table
   821                                  ;
   822                                  ;   AN000   version 4.00   Jan. 1988
   823                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   824                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   825                                  ; ---------------------------------------------------------------------------
   826                                  ;**	System File Table SuperStructure
   827                                  ;
   828                                  ;	The system file table entries are allocated in contiguous groups.
   829                                  ;	There may be more than one such groups; the SF "superstructure"
   830                                  ;	tracks the groups.
   831                                  ; ---------------------------------------------------------------------------
   832                                  
   833                                  struc	SFT
   834 00000000 ????????                .SFLink:	resd 1
   835 00000004 ????                    .SFCount:	resw 1		; number of entries
   836 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   837                                  .size:
   838                                  endstruc
   839                                  
   840                                  ; ---------------------------------------------------------------------------
   841                                  ;**	System file table entry
   842                                  ;
   843                                  ;	These are the structures which are at SFTABLE in the SF structure.
   844                                  ; ---------------------------------------------------------------------------
   845                                  
   846                                  ; 25/04/2019 - Retro DOS v4.0
   847                                  
   848                                  struc SF_ENTRY
   849 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   850                                  				;   if FCB then ref count
   851 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   852 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   853 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   854                                  				; Bit 15 = 1 if remote file
   855                                  				;	 = 0 if local file or device
   856                                  				; Bit 14 = 1 if date/time is not to be
   857                                  				;   set from clock at CLOSE.  Set by
   858                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   859                                  				;   other reseters of the dirty bit
   860                                  				;   (WRITE)
   861                                  				; Bit 13 = Pipe bit (reserved)
   862                                  				;
   863                                  				; Bits 0-7 (old FCB_devid bits)
   864                                  				; If remote file or local file, bit
   865                                  				; 6=0 if dirty Device ID number, bits
   866                                  				; 0-5 if local file.
   867                                  				; bit 7=0 for local file, bit 7
   868                                  				;      =1 for local I/O device
   869                                  				; If local I/O device, bit 6=0 if EOF (input)
   870                                  				;		Bit 5=1 if Raw mode
   871                                  				;		Bit 0=1 if console input device
   872                                  				;		Bit 1=1 if console output device
   873                                  				;		Bit 2=1 if null device
   874                                  				;		Bit 3=1 if clock device
   875 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   876                                  				; to device header if local device,
   877                                  				; points to net device header if
   878                                  				; remote
   879 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   880 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   881 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   882 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   883 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   884                                  
   885                                  ; Starting here, the next 7 bytes may be used by the file system to store
   886                                  ; an ID
   887                                  
   888                                  ; 09/07/2018 - Retro DOS v3.0
   889                                  
   890                                  ; MSDOS 3.3 SF.INC, 1987
   891                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   892                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   893                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   894                                  ;				; for this file
   895                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   896                                  
   897                                  ; MSDOS 6.0, SF.INC, 1991
   898 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   899 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   900                                  				; for this file
   901 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   902                                  
   903                                  ; End of 7 bytes of file-system specific info.
   904                                  
   905 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   906                                  				; directory entry.  This is used by
   907                                  				; close to detect file deleted and
   908                                  				; disk changed errors.
   909                                  ; SHARING INFO
   910 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   911 0000002F ????                    .sf_UID:	resw	1
   912 00000031 ????                    .sf_PID:	resw	1
   913 00000033 ????                    .sf_MFT:	resw	1
   914                                  
   915                                  ; MSDOS 6.0, SF.INC, 1991
   916 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   917 00000037 ????????                .sf_IFS_HDR:	resd	1
   918                                  
   919                                  .size:
   920                                  endstruc
   921                                  
   922                                  ; 20/07/2018
   923                                  ; MSDOS 3.3, SF.INC, 1987
   924                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   925                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   926                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   927                                  ; MSDOS 6.0, SF.INC, 1991
   928                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   929                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   930                                  
   931                                  ; 19/07/2018
   932                                  ; MSDOS 3.3, SF.INC, 1987
   933                                  
   934                                  sf_default_number  EQU	5
   935                                  
   936                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   937                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   938                                  ; by placing a -1 in the ref_count field.
   939                                  
   940                                  sf_busy EQU -1
   941                                  
   942                                  ; mode mask for FCB detection
   943                                  sf_isFCB		EQU	1000000000000000B
   944                                  
   945                                  ; Flag word masks
   946                                  sf_isnet		EQU	1000000000000000B
   947                                  sf_close_nodate 	EQU	0100000000000000B
   948                                  sf_pipe 		EQU	0010000000000000B
   949                                  sf_no_inherit		EQU	0001000000000000B
   950                                  sf_net_spool		EQU	0000100000000000B
   951                                  
   952                                  ; 25/04/2019
   953                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   954                                  
   955                                  ; ---------------------------------------------------------------------------
   956                                  ; Local file/device flag masks
   957                                  ; ---------------------------------------------------------------------------
   958                                  
   959                                  devid_file_clean        EQU     40h     ; true if file and not written
   960                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   961                                  
   962                                  devid_device            EQU     80h     ; true if a device
   963                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   964                                  devid_device_raw        EQU     20h     ; true if in raw mode
   965                                  devid_device_special    EQU     10h     ; true if special device
   966                                  devid_device_clock      EQU     08h     ; true if clock device
   967                                  devid_device_null       EQU     04h     ; true if null device
   968                                  devid_device_con_out    EQU     02h     ; true if console output
   969                                  devid_device_con_in     EQU     01h     ; true if console input
   970                                  
   971                                  ; ---------------------------------------------------------------------------
   972                                  ; structure of devid field as returned by IOCTL is:
   973                                  ;
   974                                  ;       BIT     7   6   5   4   3   2   1   0
   975                                  ;             |---|---|---|---|---|---|---|---|
   976                                  ;             | I | E | R | S | I | I | I | I |
   977                                  ;             | S | O | A | P | S | S | S | S |
   978                                  ;             | D | F | W | E | C | N | C | C |
   979                                  ;             | E |   |   | C | L | U | O | I |
   980                                  ;             | V |   |   | L | K | L | T | N |
   981                                  ;             |---|---|---|---|---|---|---|---|
   982                                  ;       ISDEV = 1 if this channel is a device
   983                                  ;             = 0 if this channel is a disk file
   984                                  ;
   985                                  ;       If ISDEV = 1
   986                                  ;
   987                                  ;             EOF = 0 if End Of File on input
   988                                  ;             RAW = 1 if this device is in Raw mode
   989                                  ;                 = 0 if this device is cooked
   990                                  ;             ISCLK = 1 if this device is the clock device
   991                                  ;             ISNUL = 1 if this device is the null device
   992                                  ;             ISCOT = 1 if this device is the console output
   993                                  ;             ISCIN = 1 if this device is the console input
   994                                  ;
   995                                  ;       If ISDEV = 0
   996                                  ;             EOF = 0 if channel has been written
   997                                  ;             Bits 0-5 are the block device number for
   998                                  ;                 the channel (0 = A, 1 = B, ...)
   999                                  ; ---------------------------------------------------------------------------
  1000                                  
  1001                                  devid_ISDEV     EQU     80h
  1002                                  devid_EOF       EQU     40h
  1003                                  devid_RAW       EQU     20h
  1004                                  devid_SPECIAL   EQU     10H
  1005                                  devid_ISCLK     EQU     08h
  1006                                  devid_ISNUL     EQU     04h
  1007                                  devid_ISCOT     EQU     02h
  1008                                  devid_ISCIN     EQU     01h
  1009                                  
  1010                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1011                                  
  1012                                  ;============================================================================
  1013                                  ; PDB.INC, MSDOS 6.0, 1991
  1014                                  ;============================================================================
  1015                                  ; 04/05/2019 - Retro DOS v4.0
  1016                                  ; 08/07/2018 - Retro DOS v3.0
  1017                                  
  1018                                  ; ---------------------------------------------------------------------------
  1019                                  ; BREAK <Process data block>
  1020                                  ; ---------------------------------------------------------------------------
  1021                                  ;**	Process data block (otherwise known as program header)
  1022                                  ;
  1023                                  
  1024                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1025                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1026                                  ;	for use.
  1027                                  ; ---------------------------------------------------------------------------
  1028                                  
  1029                                  FILPERPROC	EQU     20
  1030                                  
  1031                                  struc PDB	; Process_data_block
  1032 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1033 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1034 00000004 ??                                      resb 1
  1035 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1036 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1037 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1038 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1039 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1040 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1041 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1042 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1043 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1044 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1045 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1046 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1047 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1048 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1049 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1050 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1051 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1052 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1053                                  				;  an extended FCB
  1054                                  ;endstruc 	; MSDOS 3.3
  1055                                  	  	; MSDOS 6.0
  1056 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1057 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1058 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1059 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1060                                  endstruc
  1061                                  
  1062                                  ;============================================================================
  1063                                  ; EXE.INC, MSDOS 6.0, 1991
  1064                                  ;============================================================================
  1065                                  ; 04/05/2019 - Retro DOS v4.0
  1066                                  
  1067                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1068                                  ; ---------------------------------------------------------------------------
  1069                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1070                                  ; whether or not the program is executed or whether or not a program header
  1071                                  ; gets created.
  1072                                  
  1073                                  exec_func_no_execute EQU 1	; no execute bit
  1074                                  exec_func_overlay    EQU 2	; overlay bit
  1075                                  
  1076                                  struc EXEC0
  1077 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1078 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1079 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1080 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1081                                  .size:
  1082                                  endstruc
  1083                                  
  1084                                  struc EXEC1
  1085 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1086 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1087 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1088 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1089 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1090 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1091 00000012 ????                    .IP:		resw 1		; entry point IP
  1092 00000014 ????                    .CS:		resw 1		; entry point CS
  1093                                  .size:
  1094                                  endstruc
  1095                                  
  1096                                  struc EXEC3
  1097 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1098 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1099                                  endstruc
  1100                                  
  1101                                  ;**	Exit codes (in upper byte) for terminating programs
  1102                                  
  1103                                  EXIT_TERMINATE		EQU	0
  1104                                  EXIT_ABORT		EQU	0
  1105                                  EXIT_CTRL_C		EQU	1
  1106                                  EXIT_HARD_ERROR 	EQU	2
  1107                                  EXIT_KEEP_PROCESS	EQU	3
  1108                                  
  1109                                  ;**	EXE File Header Description
  1110                                  
  1111                                  struc EXE
  1112 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1113 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1114 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1115 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1116 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1117 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1118 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1119 0000000E ????                    .SS:          resw 1		; stack of image
  1120 00000010 ????                    .SP:          resw 1		; SP of image
  1121 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1122 00000014 ????                    .IP:          resw 1		; IP of entry
  1123 00000016 ????                    .CS:          resw 1		; CS of entry
  1124 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1125 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1126 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1127                                  .size:
  1128                                  endstruc
  1129                                  
  1130                                  exe_valid_signature     EQU 5A4Dh
  1131                                  exe_valid_old_signature EQU 4D5Ah
  1132                                  
  1133                                  ;**	EXE file symbol info definitions
  1134                                  
  1135                                  struc symbol_entry
  1136 00000000 ????????                .value:	resd 1
  1137 00000004 ????                    .type:	resw 1
  1138 00000006 ??                      .len:	resb 1
  1139 00000007 <res FFh>               .name:	resb 255
  1140                                  endstruc
  1141                                  
  1142                                  ;**	Data structure passed for ExecReady call
  1143                                  
  1144                                  struc ERStruc
  1145 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1146 00000002 ????                     .ER_Flags:	resw	1
  1147 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1148 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1149 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1150 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1151                                   .size:
  1152                                  endstruc
  1153                                  
  1154                                  ;** bit fields in ER_Flags
  1155                                  
  1156                                  ER_EXE		equ	0001h
  1157                                  ER_OVERLAY	equ	0002h
  1158                                  
  1159                                  
  1160                                  ;============================================================================
  1161                                  ; ARENA.INC, MSDOS 6.0, 1991
  1162                                  ;============================================================================
  1163                                  ; 24/04/2019 - Retro DOS v4.0
  1164                                  ; 04/08/2018 - Retro DOS v3.0
  1165                                  
  1166                                  ;BREAK <Memory arena structure>
  1167                                  
  1168                                  ;**	Arena Header
  1169                                  
  1170                                  struc ARENA
  1171 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1172 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1173 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1174 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1175 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1176                                  .headersize:			
  1177                                  endstruc
  1178                                  
  1179                                  ; 20/05/2019 - Retro DOS v4.0
  1180                                  ARENAHEADERSIZE equ ARENA.headersize 
  1181                                  
  1182                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1183                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1184                                  ; Change them and change ALLOC.ASM.
  1185                                  
  1186                                  arena_owner_system  EQU 0               ; free block indication
  1187                                  
  1188                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1189                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1190                                  
  1191                                  FIRST_FIT	EQU	00000000B
  1192                                  BEST_FIT	EQU	00000001B
  1193                                  LAST_FIT	EQU	00000010B
  1194                                  
  1195                                  ; MSDOS 6.0
  1196                                  LOW_FIRST	EQU	00000000B	; M001
  1197                                  HIGH_FIRST	EQU	10000000B	; M001
  1198                                  HIGH_ONLY	EQU	01000000B	; M001
  1199                                  
  1200                                  LINKSTATE	EQU	00000001B	; M002
  1201                                  
  1202                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1203                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1204                                  
  1205                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1206                                  						; M026: used to mask of bits
  1207                                  						; M026: 6 & 7 of AllocMethod
  1208                                  
  1209                                  ;============================================================================
  1210                                  ; MI.INC, MSDOS 6.0, 1991
  1211                                  ;============================================================================
  1212                                  ; 07/07/2018 - Retro DOS v3.0
  1213                                  
  1214                                  ;BREAK <Machine instruction, flag definitions and character types>
  1215                                  
  1216                                  mi_INT		EQU	0CDh
  1217                                  mi_long_jmp	EQU	0EAh
  1218                                  mi_Long_CALL	EQU	09Ah
  1219                                  mi_Long_RET	EQU	0CBh
  1220                                  mi_Near_RET	EQU	0C3h
  1221                                  
  1222                                  ;			xxxxoditszxaxpxc
  1223                                  f_Overflow	EQU	0000100000000000B
  1224                                  f_Direction	EQU	0000010000000000B
  1225                                  f_Interrupt	EQU	0000001000000000B
  1226                                  f_Trace 	EQU	0000000100000000B
  1227                                  f_Sign		EQU	0000000010000000B
  1228                                  f_Zero		EQU	0000000001000000B
  1229                                  f_Aux		EQU	0000000000010000B
  1230                                  f_Parity	EQU	0000000000000100B
  1231                                  f_Carry 	EQU	0000000000000001B
  1232                                  
  1233                                  ;============================================================================
  1234                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1235                                  ;============================================================================
  1236                                  ; 13/07/2018 - Retro DOS v3.0
  1237                                  ; 29/04/2019 - Retro DOS v4.0
  1238                                  
  1239                                  ;**	Standard I/O file handles
  1240                                  
  1241                                  stdin       EQU     0
  1242                                  stdout      EQU     1
  1243                                  stderr      EQU     2
  1244                                  stdaux      EQU     3
  1245                                  stdprn      EQU     4
  1246                                  
  1247                                  ;**	File Modes
  1248                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1249                                  
  1250                                  open_for_read   EQU 0
  1251                                  open_for_write  EQU 1
  1252                                  open_for_both   EQU 2
  1253                                  
  1254                                  ; MSDOS 6.0
  1255                                  OPEN_FOR_BOTH	equ 2
  1256                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1257                                  				; made from exec
  1258                                  
  1259                                  access_mask	EQU 0Fh ; 09/08/2018
  1260                                  
  1261                                  SHARING_MASK	    equ 0F0h
  1262                                  SHARING_COMPAT	    equ 000h
  1263                                  SHARING_DENY_BOTH   equ 010h
  1264                                  SHARING_DENY_WRITE  equ 020h
  1265                                  SHARING_DENY_READ   equ 030h
  1266                                  SHARING_DENY_NONE   equ 040h
  1267                                  SHARING_NET_FCB     equ 070h
  1268                                  SHARING_NO_INHERIT  equ 080h
  1269                                  
  1270                                  ; 29/04/2019
  1271                                  
  1272                                  ;**	Extended Open Definitions
  1273                                  
  1274                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1275                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1276                                  NOT_EXISTS_MASK    equ 0F0h
  1277                                  
  1278                                  ;*	SF_MODE values
  1279                                  
  1280                                  AUTO_COMMIT_WRITE	equ 4000h
  1281                                  INT_24_ERROR		equ 2000h
  1282                                  
  1283                                  ;*	Flags in EXTOPEN_ON
  1284                                  
  1285                                  EXT_OPEN_ON		equ 01h
  1286                                  EXT_FILE_NOT_EXISTS	equ 04h
  1287                                  EXT_OPEN_I24_OFF	equ 02h
  1288                                  
  1289                                  ;*	Flags in EXTOPEN_FLAG
  1290                                  
  1291                                  ACTION_OPENED		equ 01h
  1292                                  ACTION_CREATED_OPENED	equ 02h
  1293                                  ACTION_REPLACED_OPENED	equ 03h
  1294                                  EXT_EXISTS_OPEN 	equ 01h
  1295                                  EXT_EXISTS_FAIL 	equ 00h
  1296                                  EXT_NEXISTS_CREATE	equ 10h
  1297                                  
  1298                                  ;**	Extended Open Structure
  1299                                  
  1300                                  struc EXT_OPEN_PARM
  1301 00000000 ????????                .SET_LIST:	resd 1
  1302 00000004 ????                    .NUM_OF_PARM:	resw 1
  1303                                  endstruc
  1304                                  
  1305                                  ;============================================================================
  1306                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1307                                  ;============================================================================
  1308                                  ; 29/04/2019 - Retro DOS v4.0
  1309                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1310                                  
  1311                                  ; <system call definitions>
  1312                                  
  1313                                  ABORT                           EQU 0   ;  0      0
  1314                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1315                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1316                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1317                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1318                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1319                                  RAW_CON_IO                      EQU 6   ;  6      6
  1320                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1321                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1322                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1323                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1324                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1325                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1326                                  DISK_RESET                      EQU 13  ; 13      D
  1327                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1328                                  FCB_OPEN                        EQU 15  ; 15      F
  1329                                  FCB_CLOSE                       EQU 16  ; 16     10
  1330                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1331                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1332                                  FCB_DELETE                      EQU 19  ; 19     13
  1333                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1334                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1335                                  FCB_CREATE                      EQU 22  ; 22     16
  1336                                  FCB_RENAME                      EQU 23  ; 23     17
  1337                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1338                                  SET_DMA                         EQU 26  ; 26     1A
  1339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1340                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1341                                  ;                                                                          ;
  1342                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1343                                  ;                                                                          ;
  1344                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1345                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1346                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1347                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1348                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1349                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1350                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1351                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1352                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1353                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1354                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1355                                  GET_DATE                        EQU 42  ; 42     2A
  1356                                  SET_DATE                        EQU 43  ; 43     2B
  1357                                  GET_TIME                        EQU 44  ; 44     2C
  1358                                  SET_TIME                        EQU 45  ; 45     2D
  1359                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1360                                  ; Extended functionality group
  1361                                  GET_DMA                         EQU 47  ; 47     2F
  1362                                  GET_VERSION                     EQU 48  ; 48     30
  1363                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1364                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1365                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1366                                  ;                                                                          ;
  1367                                  GET_DPB                         EQU 50  ; 50     32
  1368                                  ;                                                                          ;
  1369                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1370                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1371                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1372                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1373                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1374                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1375                                  CHAR_OPER                       EQU 55  ; 55     37
  1376                                  INTERNATIONAL                   EQU 56  ; 56     38
  1377                                  ; XENIX CALLS
  1378                                  ;   Directory Group
  1379                                  MKDIR                           EQU 57  ; 57     39
  1380                                  RMDIR                           EQU 58  ; 58     3A
  1381                                  CHDIR                           EQU 59  ; 59     3B
  1382                                  ;   File Group
  1383                                  CREAT                           EQU 60  ; 60     3C
  1384                                  OPEN                            EQU 61  ; 61     3D
  1385                                  CLOSE                           EQU 62  ; 62     3E
  1386                                  READ                            EQU 63  ; 63     3F
  1387                                  WRITE                           EQU 64  ; 64     40
  1388                                  UNLINK                          EQU 65  ; 65     41
  1389                                  LSEEK                           EQU 66  ; 66     42
  1390                                  CHMOD                           EQU 67  ; 67     43
  1391                                  IOCTL                           EQU 68  ; 68     44
  1392                                  XDUP                            EQU 69  ; 69     45
  1393                                  XDUP2                           EQU 70  ; 70     46
  1394                                  CURRENT_DIR                     EQU 71  ; 71     47
  1395                                  ;    Memory Group
  1396                                  ALLOC                           EQU 72  ; 72     48
  1397                                  DEALLOC                         EQU 73  ; 73     49
  1398                                  SETBLOCK                        EQU 74  ; 74     4A
  1399                                  ;    Process Group
  1400                                  EXEC                            EQU 75  ; 75     4B
  1401                                  EXIT                            EQU 76  ; 76     4C
  1402                                  _WAIT				EQU 77  ; 77     4D
  1403                                  FIND_FIRST                      EQU 78  ; 78     4E
  1404                                  ;   Special Group
  1405                                  FIND_NEXT                       EQU 79  ; 79     4F
  1406                                  ; SPECIAL SYSTEM GROUP
  1407                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1408                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1409                                  ;                                                                          ;
  1410                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1411                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1412                                  GET_IN_VARS                     EQU 82  ; 82     52
  1413                                  SETDPB                          EQU 83  ; 83     53
  1414                                  ;                                                                          ;
  1415                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1416                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1417                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  DUP_PDB                         EQU 85  ; 85     55
  1422                                  ;                                                                          ;
  1423                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1424                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1425                                  RENAME                          EQU 86  ; 86     56
  1426                                  FILE_TIMES                      EQU 87  ; 87     57
  1427                                  ALLOCOPER			EQU 88	; 88	 58
  1428                                  ; Network extention system calls
  1429                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1430                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1431                                  CREATENEWFILE			EQU 91	; 91	 5B
  1432                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1433                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1434                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1435                                  ;									   ;
  1436                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1437                                  					;	    CloseByName, CloseUser,
  1438                                  					;	    CloseUserProcess,
  1439                                  					;	    GetOpenFileList
  1440                                  ;									   ;
  1441                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1442                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1443                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1444                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1445                                  XNAMETRANS			EQU 96	; 96	 60
  1446                                  PATHPARSE			EQU 97	; 97	 61
  1447                                  GETCURRENTPSP			EQU 98	; 98	 62
  1448                                  HONGEUL 			EQU 99	; 99	 63
  1449                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1450                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1451                                  ;									   ;
  1452                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1453                                  ;									   ;
  1454                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1455                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1456                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1457                                  GETSETCDPG			EQU 102 ; 102	 66
  1458                                  EXTHANDLE			EQU 103 ; 103	 67
  1459                                  COMMIT				EQU 104 ; 104	 68
  1460                                  
  1461                                  ; 29/04/2019 - Retro DOS v4.0
  1462                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1463                                  
  1464                                  GetSetMediaID			EQU 105 ; 105	 69
  1465                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1466                                  ExtOpen 			EQU 108 ; 108	 6C
  1467                                  
  1468                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1469                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1470                                  ;                                                                          ;
  1471                                  ;ifdef ROMEXEC
  1472                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1473                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1474                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1475                                  ;endif
  1476                                  ;                                                                          ;
  1477                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1478                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1479                                  
  1480                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1481                                  ;OEM_C1				EQU 249 ; 249    F9
  1482                                  ;OEM_C2				EQU 250 ; 250    FA
  1483                                  ;OEM_C3				EQU 251 ; 251    FB
  1484                                  ;OEM_C4				EQU 252 ; 252    FC
  1485                                  ;OEM_C5				EQU 253 ; 253    FD
  1486                                  ;OEM_C6				EQU 254 ; 254    FE
  1487                                  ;OEM_C7				EQU 255 ; 255    FF
  1488                                  
  1489                                  ;============================================================================
  1490                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1491                                  ;============================================================================
  1492                                  ; 24/04/2019 - Retro DOS 4.0
  1493                                  
  1494                                  ;MAJOR_VERSION	EQU     6
  1495                                  ;;MINOR_VERSION	EQU	00
  1496                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1497                                  
  1498                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1499                                  MAJOR_VERSION	EQU     5
  1500                                  MINOR_VERSION	EQU     0
  1501                                  
  1502                                  ;============================================================================
  1503                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1504                                  ;============================================================================
  1505                                  ; 09/07/2018 - Retro DOS 3.0
  1506                                  
  1507                                  ; Current structure of the data returned by the international call
  1508                                  
  1509                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1510                                  .Date_tim_format:
  1511 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1512                                  .Currency_sym:
  1513 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1514                                  .Thous_sep:
  1515 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1516                                  .Decimal_sep:
  1517 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1518                                  .Date_sep:
  1519 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1520                                  .Time_sep:
  1521 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1522                                  .Bit_field:	
  1523 0000000F ??                      		RESB 1		; Bit values
  1524                                                                     ;   Bit 0 = 0 if currency symbol first
  1525                                                                     ;         = 1 if currency symbol last
  1526                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1527                                                                     ;         = 1 if space after currency symbol
  1528                                  .Currency_cents:
  1529 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1530                                  .Time_24:
  1531 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1532                                  .Map_call:
  1533 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1534 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1535                                  				;  in pieces.
  1536                                  .Data_sep:
  1537 00000016 ????                    		RESB	2	; Data list separator character
  1538                                  .size:		
  1539                                  endstruc
  1540                                  
  1541                                  ; Max size of the block returned by the INTERNATIONAL call
  1542                                  
  1543                                  internat_block_max	EQU	32
  1544                                  
  1545                                  ;============================================================================
  1546                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1547                                  ;============================================================================
  1548                                  ; 08/07/2018 - Retro DOS v3.0
  1549                                  
  1550                                  ;SysInitVars STRUC
  1551                                  struc SYSI
  1552 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1553 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1554 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1555 0000000C ????????                .CON:	    resd 1		; CON device
  1556 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1557 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1558 00000016 ????????                .CDS:	    resd 1		; CDS list
  1559 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1560 0000001E ????                    .Keep:	    resw 1		; keep count
  1561 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1562 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1563 00000022 ????????                .DEV:	    resd 1		; device list
  1564                                  ; 09/07/2018
  1565                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1566                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1567 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1568 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1569 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1570 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1571 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1572 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1573 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service routine entry
  1574 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1575 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1576 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1577 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1578 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1579                                  endstruc
  1580                                  ;SysInitVars ENDS
  1581                                  
  1582                                  ;This is added for more information exchange between DOS, BIOS.
  1583                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1584                                  
  1585                                  ;SysInitVars_Ext struc
  1586                                  struc SYSI_EXT
  1587 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1588 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1589                                  endstruc
  1590                                  ;SysInitVars_Ext ends
  1591                                  
  1592                                  ;============================================================================
  1593                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1594                                  ;============================================================================
  1595                                  ; 09/07/2018 - Retro DOS v3.0
  1596                                  
  1597                                  ;*** J.K.
  1598                                  ;General Guide -
  1599                                  ;Category Code:
  1600                                  ; 0... .... DOS Defined
  1601                                  ; 1... .... User defined
  1602                                  ; .xxx xxxx Code
  1603                                  
  1604                                  ;Function Code:
  1605                                  ; 0... .... Return error if unsupported
  1606                                  ; 1... .... Ignore if unsupported
  1607                                  ; .0.. .... Intercepted by DOS
  1608                                  ; .1.. .... Passed to driver
  1609                                  ; ..0. .... Sends data/commands to device
  1610                                  ; ..1. .... Quries data/info from device
  1611                                  ; ...x .... Subfunction
  1612                                  ;
  1613                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1614                                  ; function set.  It plays no critical role; some functions may contain both
  1615                                  ; command and query elements. The convention is that such commands are
  1616                                  ; defined as "sends data".
  1617                                  
  1618                                  ;*****************************;*
  1619                                  ; BLOCK DRIVERS 	      ;*
  1620                                  ;*****************************;*
  1621                                  
  1622                                  ; IOCTL SUB-FUNCTIONS
  1623                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1624                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1625                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1626                                  IOCTL_READ_HANDLE	EQU	2
  1627                                  IOCTL_WRITE_HANDLE	EQU	3
  1628                                  IOCTL_READ_DRIVE	EQU	4
  1629                                  IOCTL_WRITE_DRIVE	EQU	5
  1630                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1631                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1632                                  IOCTL_CHANGEABLE?	EQU	8
  1633                                  IOCTL_DeviceLocOrRem?	EQU	9
  1634                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1635                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1636                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1637                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1638                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1639                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1640                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1641                                  ; (MSDOS 6.0)
  1642                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1643                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1644                                  
  1645                                  ; GENERIC IOCTL CATEGORY CODES
  1646                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1647                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1648                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1649                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1650                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1651                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1652                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1653                                  
  1654                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1655                                  RAWIO			EQU	8
  1656                                  
  1657                                  ; RAWIO SUB-FUNCTIONS
  1658                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1659                                  GET_DEVICE_PARAMETERS	EQU	60H
  1660                                  SET_DEVICE_PARAMETERS	EQU	40H
  1661                                  READ_TRACK		EQU	61H
  1662                                  WRITE_TRACK		EQU	41H
  1663                                  VERIFY_TRACK		EQU	62H
  1664                                  FORMAT_TRACK		EQU	42H
  1665                                  ; (MSDOS 6.0)
  1666                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1667                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1668                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1669                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1670                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1671                                  
  1672                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1673                                  BUILD_DEVICE_BPB	EQU	000000001B
  1674                                  
  1675                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1676                                  INSTALL_FAKE_BPB	EQU	000000001B
  1677                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1678                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1679                                  
  1680                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1681                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1682                                  STATUS_FOR_FORMAT	EQU	000000001B
  1683                                  ; (MSDOS 6.0)
  1684                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1685                                  
  1686                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1687                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1688                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1689                                  
  1690                                  ; DEVICETYPE VALUES
  1691                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1692                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1693                                  DEV_5INCH		EQU	0
  1694                                  DEV_5INCH96TPI		EQU	1
  1695                                  DEV_3INCH720KB		EQU	2
  1696                                  DEV_8INCHSS		EQU	3
  1697                                  DEV_8INCHDS		EQU	4
  1698                                  DEV_HARDDISK		EQU	5
  1699                                  DEV_OTHER		EQU	7
  1700                                  ; (MSDOS 6.0)
  1701                                  ;DEV_3INCH1440KB	EQU	7
  1702                                  DEV_3INCH2880KB		EQU	9
  1703                                  ; Retro DOS v2.0 - 26/03/2018
  1704                                  ;;DEV_TAPE		EQU	6
  1705                                  ;;DEV_ERIMO		EQU	8
  1706                                  ;DEV_3INCH2880KB	EQU	9
  1707                                  DEV_3INCH1440KB		EQU	10
  1708                                  
  1709                                  ; (MSDOS 3.3)
  1710                                  ;MAX_DEV_TYPE		EQU	7
  1711                                  
  1712                                  ; (MSDOS 6.0)
  1713                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1714                                  					; CURRENTLY SUPPORT.
  1715                                  struc A_SECTORTABLE
  1716 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1717 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1718                                  .size:
  1719                                  endstruc
  1720                                  
  1721                                  ;============================================================================
  1722                                  ; DEVSYM.INC
  1723                                  ;============================================================================
  1724                                  ; 07/07/2018 - Retro DOS v3.0
  1725                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1726                                  
  1727                                  ;**	DevSym.inc - Device Symbols
  1728                                  
  1729                                  ; The device table list has the form:
  1730                                  struc	SYSDEV
  1731 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1732 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1733 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1734 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1735 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1736                                  .size:
  1737                                  endstruc
  1738                                  
  1739                                  ;
  1740                                  ; ATTRIBUTE BIT MASKS
  1741                                  ;
  1742                                  ; CHARACTER DEVICES:
  1743                                  ;
  1744                                  ; BIT 15 -> MUST BE 1
  1745                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1746                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1747                                  ;     12 -> UNUSED
  1748                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1749                                  ;     10 -> MUST BE 0
  1750                                  ;      9 -> MUST BE 0
  1751                                  ;      8 -> UNUSED
  1752                                  ;      7 -> UNUSED
  1753                                  ;      6 -> UNUSED
  1754                                  ;      5 -> UNUSED
  1755                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1756                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1757                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1758                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1759                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1760                                  ;
  1761                                  ; BLOCK DEVICES:
  1762                                  ;
  1763                                  ; BIT 15 -> MUST BE 0
  1764                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1765                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1766                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1767                                  ;	    THE SAME PLACE.
  1768                                  ;     12 -> UNUSED
  1769                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1770                                  ;     10 -> MUST BE 0
  1771                                  ;      9 -> MUST BE 0
  1772                                  ;      8 -> UNUSED
  1773                                  ;      7 -> UNUSED
  1774                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1775                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1776                                  ;      5 -> UNUSED
  1777                                  ;      4 -> UNUSED
  1778                                  ;      3 -> UNUSED
  1779                                  ;      2 -> UNUSED
  1780                                  ;      1 -> UNUSED
  1781                                  ;      0 -> UNUSED
  1782                                  ;
  1783                                  
  1784                                  ;Attribute bit masks
  1785                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1786                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1787                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1788                                  
  1789                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1790                                  
  1791                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1792                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1793                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1794                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1795                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1796                                  				;  ENTRY POINTS, 0 IF NOT
  1797                                  
  1798                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1799                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1800                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1801                                  				;  ITS CURRENT FORM.
  1802                                  
  1803                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1804                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1805                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1806                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1807                                  
  1808                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1809                                  
  1810                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1811                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1812                                  				;LOGICAL DRIVES, AND SUPPORTS
  1813                                  				;GENERIC IOCTL CALLS.
  1814                                  				;FOR CHARACTER DEVICES, THIS
  1815                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1816                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1817                                  
  1818                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1819                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1820                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1821                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1822                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1823                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1824                                  
  1825                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1826                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1827                                  
  1828                                  ;Static Reguest Header
  1829                                  struc	SRHEAD
  1830 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1831 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1832 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1833 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1834 00000005 ????????????????                	resb 8		;Reserved for queue links
  1835                                  .size:
  1836                                  endstruc
  1837                                  
  1838                                  ;Status word masks
  1839                                  STERR   EQU     8000H           ;Bit 15 - Error
  1840                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1841                                  STDON   EQU     0100H           ;Bit 8 - Done
  1842                                  STECODE EQU     00FFH           ;Error code
  1843                                  WRECODE EQU     0
  1844                                  
  1845                                  ;Function codes
  1846                                  DINITHL EQU     26              ;Size of init header
  1847                                  DMEDHL  EQU     15              ;Size of media check header
  1848                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1849                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1850                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1851                                  DSTATHL EQU     13              ;Size of status header
  1852                                  DFLSHL  EQU     15              ;Size of flush header
  1853                                  
  1854                                  DEVINIT EQU     0               ;Initialization
  1855                                  DEVMDCH EQU     1               ;Media check
  1856                                  DEVBPB  EQU     2               ;Get BPB
  1857                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1858                                  DEVRD   EQU     4               ;Read
  1859                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1860                                  DEVIST  EQU     6               ;Input status
  1861                                  DEVIFL  EQU     7               ;Input flush
  1862                                  DEVWRT  EQU     8               ;Write
  1863                                  DEVWRTV EQU     9               ;Write with verify
  1864                                  DEVOST  EQU     10              ;Output status
  1865                                  DEVOFL  EQU     11              ;Output flush
  1866                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1867                                  
  1868                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1869                                  DEVOPN	EQU	13		;DEVICE OPEN
  1870                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1871                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1872                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1873                                  ; 07/08/2018 - Retro DOS v3.0
  1874                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1875                                  GENIOCTL EQU	19
  1876                                  
  1877                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1878                                  ;		     20
  1879                                  ;		     21
  1880                                  ;		     22
  1881                                  
  1882                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1883                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1884                                  ; 18/05/2019 - Retro DOS v4.0
  1885                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1886                                  
  1887                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1888                                  
  1889                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1890                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1891                                  
  1892                                  ; ADDED FOR DOS 5.00
  1893                                  
  1894                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1895                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1896                                  
  1897                                  struc IOCTL_REQ
  1898 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1899                                  				; GENERIC IOCTL ADDITION.
  1900 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1901 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1902 0000000F ????                    .REG_SI:	resw 1
  1903 00000011 ????                    .REG_DI:	resw 1
  1904 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1905                                  .size: ; 07/08/2018
  1906                                  endstruc
  1907                                  
  1908                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1909                                  GEN_IOCTL_WRT_TRK EQU	40H
  1910                                  GEN_IOCTL_RD_TRK  EQU	60H
  1911                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1912                                  
  1913                                  ;; 32-bit absolute read/write input list structure
  1914                                  
  1915                                  struc ABS_32RW
  1916 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1917 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1918 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1919                                  .size:
  1920                                  endstruc
  1921                                  
  1922                                  ;; media ID info
  1923                                  
  1924                                  struc MEDIA_ID_INFO
  1925 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1926 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1927 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1928 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1929                                  .size:
  1930                                  endstruc
  1931                                  
  1932                                  ; equates for DOS34_FLAG
  1933                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1934                                  
  1935                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1936                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1937                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1938                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1939                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1940                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1941                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1942                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1943                                  					    ;M018: that knows how to handle 
  1944                                  					    ;M018: open for exec
  1945                                  
  1946                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1947                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1948                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1949                                  
  1950                                  ;============================================================================
  1951                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1952                                  ;============================================================================
  1953                                  ; 16/07/2018 - Retro DOS v3.0 
  1954                                  
  1955                                  ;**	ERROR.INC - DOS Error Codes
  1956                                  ;
  1957                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1958                                  ;    return error codes through AX. If an error occurred then
  1959                                  ;    the carry bit will be set and the error code is in AX. If no error
  1960                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1961                                  ;
  1962                                  ;    Since the set of error codes is being extended as we extend the operating
  1963                                  ;    system, we have provided a means for applications to ask the system for a
  1964                                  ;    recommended course of action when they receive an error.
  1965                                  ;
  1966                                  ;    The GetExtendedError system call returns a universal error, an error
  1967                                  ;    location and a recommended course of action. The universal error code is
  1968                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1969                                  ;    is issued.
  1970                                  
  1971                                  ;	2.0 error codes
  1972                                  
  1973                                  error_invalid_function		EQU	1
  1974                                  error_file_not_found		EQU	2
  1975                                  error_path_not_found		EQU	3
  1976                                  error_too_many_open_files	EQU	4
  1977                                  error_access_denied		EQU	5
  1978                                  error_invalid_handle		EQU	6
  1979                                  error_arena_trashed		EQU	7
  1980                                  error_not_enough_memory 	EQU	8
  1981                                  error_invalid_block		EQU	9
  1982                                  error_bad_environment		EQU	10
  1983                                  error_bad_format		EQU	11
  1984                                  error_invalid_access		EQU	12
  1985                                  error_invalid_data		EQU	13
  1986                                  ;**** reserved			EQU	14	; *****
  1987                                  error_invalid_drive		EQU	15
  1988                                  error_current_directory 	EQU	16
  1989                                  error_not_same_device		EQU	17
  1990                                  error_no_more_files		EQU	18
  1991                                  
  1992                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1993                                  
  1994                                  error_write_protect		EQU	19
  1995                                  error_bad_unit			EQU	20
  1996                                  error_not_ready 		EQU	21
  1997                                  error_bad_command		EQU	22
  1998                                  error_CRC			EQU	23
  1999                                  error_bad_length		EQU	24
  2000                                  error_seek			EQU	25
  2001                                  error_not_DOS_disk		EQU	26
  2002                                  error_sector_not_found		EQU	27
  2003                                  error_out_of_paper		EQU	28
  2004                                  error_write_fault		EQU	29
  2005                                  error_read_fault		EQU	30
  2006                                  error_gen_failure		EQU	31
  2007                                  
  2008                                  ;	the new 3.0 error codes reported through INT 24
  2009                                  
  2010                                  error_sharing_violation 	EQU	32
  2011                                  error_lock_violation		EQU	33
  2012                                  error_wrong_disk		EQU	34
  2013                                  error_FCB_unavailable		EQU	35
  2014                                  error_sharing_buffer_exceeded	EQU	36
  2015                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2016                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2017                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2018                                  
  2019                                  ;	New OEM network-related errors are 50-79
  2020                                  
  2021                                  error_not_supported		EQU	50
  2022                                  
  2023                                  error_net_access_denied		EQU	65	;M028
  2024                                  
  2025                                  ;	End of INT 24 reportable errors
  2026                                  
  2027                                  error_file_exists		EQU	80
  2028                                  error_DUP_FCB			EQU	81	; *****
  2029                                  error_cannot_make		EQU	82
  2030                                  error_FAIL_I24			EQU	83
  2031                                  
  2032                                  ;	New 3.0 network related error codes
  2033                                  
  2034                                  error_out_of_structures 	EQU	84
  2035                                  error_already_assigned		EQU	85
  2036                                  error_invalid_password		EQU	86
  2037                                  error_invalid_parameter 	EQU	87
  2038                                  error_NET_write_fault		EQU	88
  2039                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2040                                  
  2041                                  ;	BREAK <Interrupt 24 error codes>
  2042                                  
  2043                                  ;**	Int24 Error Codes
  2044                                  
  2045                                  error_I24_write_protect 	EQU	0
  2046                                  error_I24_bad_unit		EQU	1
  2047                                  error_I24_not_ready		EQU	2
  2048                                  error_I24_bad_command		EQU	3
  2049                                  error_I24_CRC			EQU	4
  2050                                  error_I24_bad_length		EQU	5
  2051                                  error_I24_Seek			EQU	6
  2052                                  error_I24_not_DOS_disk		EQU	7
  2053                                  error_I24_sector_not_found	EQU	8
  2054                                  error_I24_out_of_paper		EQU	9
  2055                                  error_I24_write_fault		EQU	0Ah
  2056                                  error_I24_read_fault		EQU	0Bh
  2057                                  error_I24_gen_failure		EQU	0Ch
  2058                                  ; NOTE: Code 0DH is used by MT-DOS.
  2059                                  error_I24_wrong_disk		EQU	0Fh
  2060                                  
  2061                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2062                                  ;
  2063                                  ;	NOTE: ABORT is ALWAYS allowed
  2064                                  
  2065                                  Allowed_FAIL			EQU	00001000B
  2066                                  Allowed_RETRY			EQU	00010000B
  2067                                  Allowed_IGNORE			EQU	00100000B
  2068                                  
  2069                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2070                                  I24_area			EQU	00000110B  ; 00 if DOS
  2071                                  						   ; 01 if FAT
  2072                                  						   ; 10 if root DIR
  2073                                  						   ; 11 if DATA
  2074                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2075                                  
  2076                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2077                                  
  2078                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2079                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2080                                  ;	to take for error codes that they don't explicitly understand.
  2081                                  
  2082                                  ;	Values for error CLASS
  2083                                  
  2084                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2085                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2086                                  errCLASS_Auth		EQU	3	; Permission problem
  2087                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2088                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2089                                  errCLASS_SysFail	EQU	6	; System Failure
  2090                                  errCLASS_Apperr 	EQU	7	; Application Error
  2091                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2092                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2093                                  errCLASS_Locked 	EQU	10	; Locked
  2094                                  errCLASS_Media		EQU	11	; Media Failure
  2095                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2096                                  errCLASS_Unk		EQU	13	; Unknown/other
  2097                                  
  2098                                  ;	Values for error ACTION
  2099                                  
  2100                                  errACT_Retry		EQU	1	; Retry
  2101                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2102                                  errACT_User		EQU	3	; Ask user to regive info
  2103                                  errACT_Abort		EQU	4	; abort with clean up
  2104                                  errACT_Panic		EQU	5	; abort immediately
  2105                                  errACT_Ignore		EQU	6	; ignore
  2106                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2107                                  
  2108                                  ;	Values for error LOCUS
  2109                                  
  2110                                  errLOC_Unk		EQU	1	; No appropriate value
  2111                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2112                                  errLOC_Net		EQU	3	; Network
  2113                                  errLOC_SerDev		EQU	4	; Serial Device
  2114                                  errLOC_Mem		EQU	5	; Memory
  2115                                  
  2116                                  ;============================================================================
  2117                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2118                                  ;============================================================================
  2119                                  ; 04/05/2019 - Retro DOS v4.0
  2120                                  
  2121                                  ;**	Int 2A functions
  2122                                  ; ---------------------------------------------------------------------------
  2123                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2124                                  ;		as a critical section handler since critical sections
  2125                                  ;		were originally created to support the net.
  2126                                  ; ---------------------------------------------------------------------------
  2127                                  
  2128                                  ; ---------------------------------------------------------------------------
  2129                                  ;**	This table was created by examining the source and may not be
  2130                                  ;	complete or completely accurate - JGL
  2131                                  ;
  2132                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2133                                  
  2134                                  ;	(ah) = 0	installation check
  2135                                  ;			   (returns ah !=0 if installed)
  2136                                  ;	(ah) = 1	cooked net bios call
  2137                                  ;	(ah) = 3	query drive shared
  2138                                  ;			   (ds:si) = "n:" asciz string
  2139                                  ;	(ah) = 4	net bios
  2140                                  ;	       (al) = 0	   cooked net bios call
  2141                                  ;	       (al) = 1	   raw net bios call
  2142                                  ;	       (al) = 2	   ???
  2143                                  ;
  2144                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2145                                  ;			NCBs available/outstanding. DX returns the number of
  2146                                  ;			sessions. Supposedly, this is documented in an old
  2147                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2148                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2149                                  ;			not be used, as it is a hack, only to get Lotus
  2150                                  ;			Notes running.
  2151                                  ;
  2152                                  ;	(ah) = 80h	enter critical section
  2153                                  ;	(ah) = 81h	leave critical section
  2154                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2155                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2156                                  ; ---------------------------------------------------------------------------
  2157                                  
  2158                                  ;**	Critical section definitions
  2159                                  ; ---------------------------------------------------------------------------
  2160                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2161                                  ;	which various programs use to make it so, in a limited fashion.
  2162                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2163                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2164                                  ;	DOS's global data structures, such as the memory arena, are not
  2165                                  ;	in this area, so critical section indicators are used to protect
  2166                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2167                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2168                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2169                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2170                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2171                                  ;	critical section they then switch away from that second thread and
  2172                                  ;	let the first one finish and exit the section.
  2173                                  ; ---------------------------------------------------------------------------
  2174                                  
  2175                                  ; These below are subject to leave-all sections
  2176                                  critDisk    EQU     1			; Disk I/O critical section
  2177                                  critShare   EQU     1			; Sharer I/O critical section
  2178                                  critMem     EQU     1			; memory maintenance critical section
  2179                                  critSFT     EQU     1			; sft table allocation
  2180                                  critDevice  EQU     2			; Device I/O critical section
  2181                                  critNet     EQU     5			; network critical section
  2182                                  critIFS     EQU     6			; ifsfunc critical section
  2183                                  ; These below are not subject to leave-all sections
  2184                                  critASSIGN  EQU     8			; Assign has munged a system call
  2185                                  
  2186                                  ;============================================================================
  2187                                  ; MULT.INC (MSDOS 6.0, 1991)
  2188                                  ;============================================================================
  2189                                  ; 04/05/2019 - Retro DOS v4.0
  2190                                  
  2191                                  ;Break <Multiplex channels>
  2192                                  
  2193                                  ; ---------------------------------------------------------------------------
  2194                                  ; The current set of defined multiplex channels is (* means documented):
  2195                                  ;
  2196                                  ;   Channel(h)  Issuer          Receiver    Function
  2197                                  ;      00       server          PSPRINT     print job control
  2198                                  ;     *01       print/apps      PRINT       Queueing of files
  2199                                  ;      02       BIOS            REDIR       signal open/close of printers
  2200                                  ;
  2201                                  ;      05       command         REDIR       obtain text of net int 24 message
  2202                                  ;     *06       server/assign   ASSIGN      Install check
  2203                                  ;
  2204                                  ;      08       external driver IBMBIO      interface to internal routines
  2205                                  ;
  2206                                  ;      10       sharer/server   Sharer      install check
  2207                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2208                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2209                                  ;      13       MSNET           MSNET       movement of NCBs
  2210                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2211                                  ;                                           of alternative INT_13 drivers after
  2212                                  ;                                           boot_up
  2213                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2214                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2215                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2216                                  ;      16       WIN386          WIN386      Windows communications
  2217                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2218                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2219                                  ;      19       Shell
  2220                                  ;      1A       Ansi.sys
  2221                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2222                                  ;
  2223                                  ;      40h      OS/2
  2224                                  ;      41h      Lanman
  2225                                  ;      42h      Lanman
  2226                                  ;      43h      Himem
  2227                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2228                                  ;                               AL = 30h    reserved for Himem external A20 code
  2229                                  ;      44h      Dosextender
  2230                                  ;      45H      Windows profiler
  2231                                  ;      46h      Windows/286 DOS extender
  2232                                  ;      47h      Basic Compiler Vn. 7.0
  2233                                  ;      48h      Doskey
  2234                                  ;      49h      DOS 5.x install 
  2235                                  ;      4Ah      Multi Purpose
  2236                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2237                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2238                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2239                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2240                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2241                                  ;
  2242                                  ;                multSmartdrv           10h
  2243                                  ;                multMagicdrv           11h
  2244                                  ;      4Bh      Task Switcher API
  2245                                  ;
  2246                                  ;      4Ch      APPS            APM         Advanced power management
  2247                                  ;      4Dh      Kana Kanji Converter, MSKK
  2248                                  ;
  2249                                  ;      51h      ODI real mode support driver (for Chicago)
  2250                                  ;
  2251                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2252                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2253                                  ;
  2254                                  ;      55h      COMMAND.COM
  2255                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2256                                  ;                                           instance of command.com
  2257                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2258                                  ;                                           instance of ROM COMMAND
  2259                                  ;      56h      Sewell Development
  2260                                  ;               INTERLNK
  2261                                  ;
  2262                                  ;      57h      Iomega Corp.
  2263                                  ;
  2264                                  ;      ABh      Unspecified IBM use
  2265                                  ;      ACh      Graphics
  2266                                  ;      ADh      NLS (toronto)
  2267                                  ;      AEh
  2268                                  ;      AFh      Mode
  2269                                  ;      B0h      GRAFTABL        GRAFTABL
  2270                                  ;
  2271                                  ;      D7h      Banyan VINES
  2272                                  ; ---------------------------------------------------------------------------
  2273                                  
  2274                                  ;MUX 00-3F reserverd for IBM
  2275                                  ;MUX 80-BF reserverd for IBM
  2276                                  
  2277                                  ;MUX 40-7F reserved for Microsoft
  2278                                  
  2279                                  ;MUX C0-FF users
  2280                                  
  2281                                  MultSHARE   EQU     10h 		; sharer
  2282                                      ;	1   MFT_enter
  2283                                      ;	2   MFTClose
  2284                                      ;	3   MFTclU
  2285                                      ;	4   MFTCloseP
  2286                                      ;	5   MFTCloN
  2287                                      ;	6   set_block
  2288                                      ;	7   clr_block
  2289                                      ;	8   chk_block
  2290                                      ;	9   MFT_get
  2291                                      ;	10  ShSave
  2292                                      ;	11  ShChk
  2293                                      ;	12  ShCol
  2294                                      ;	13  ShCloseFile
  2295                                  
  2296                                  MultNET     EQU     11h 		; Network support
  2297                                  MultIFS     EQU     11h                 ; Network support
  2298                                      ;   1   IFS_RMDIR
  2299                                      ;   2   IFS_SEQ_RMDIR
  2300                                      ;   3   IFS_MKDIR
  2301                                      ;   4   IFS_SEQ_MKDIR
  2302                                      ;   5   IFS_CHDIR
  2303                                      ;   6   IFS_CLOSE
  2304                                      ;   7   IFS_COMMIT
  2305                                      ;   8   IFS_READ
  2306                                      ;   9   IFS_WRITE
  2307                                      ;   10  IFS_LOCK
  2308                                      ;   11  IFS_UNLOCK
  2309                                      ;   12  IFS_DISK_INFO
  2310                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2311                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2312                                      ;   15  IFS_GET_FILE_INFO
  2313                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2314                                      ;   17  IFS_RENAME
  2315                                      ;   18  IFS_SEQ_RENAME
  2316                                      ;   19  IFS_DELETE
  2317                                      ;   20  IFS_SEQ_DELETE
  2318                                      ;   21  IFS_OPEN
  2319                                      ;   22  IFS_SEQ_OPEN
  2320                                      ;   23  IFS_CREATE
  2321                                      ;   24  IFS_SEQ_CREATE
  2322                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2323                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2324                                      ;   27  IFS_SEARCH_FIRST
  2325                                      ;   28  IFS_SEARCH_NEXT
  2326                                      ;   29  IFS_ABORT
  2327                                      ;   30  IFS_ASSOPER
  2328                                      ;   31  Printer_SET_STRING
  2329                                      ;   32  IFSFlushBuf
  2330                                      ;   33  IFSBufWrite
  2331                                      ;   34  IFSResetEnvironment
  2332                                      ;   35  IFSSpoolCheck
  2333                                      ;   36  IFSSpoolClose
  2334                                      ;   37  IFSDeviceOper
  2335                                      ;   38  IFSSpoolEchoCheck
  2336                                      ;   39      - - -   Unused   - - -
  2337                                      ;   40      - - -   Unused   - - -
  2338                                      ;   41      - - -   Unused   - - -
  2339                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2340                                      ;   43  DEVICE_IOCTL
  2341                                      ;   44  IFS_UPDATE_CB
  2342                                      ;   45  IFS_FILE_XATTRIBUTES
  2343                                      ;   46  IFS_XOPEN
  2344                                      ;   47  IFS_DEPENDENT_IOCTL
  2345                                  
  2346                                  MultDOS     EQU     12h 		; DOS call back
  2347                                      ;	1   DOS_CLOSE
  2348                                      ;	2   RECSET
  2349                                      ;	3   Get DOSGROUP
  2350                                      ;	4   PATHCHRCMP
  2351                                      ;	5   OUT
  2352                                      ;	6   NET_I24_ENTRY
  2353                                      ;	7   PLACEBUF
  2354                                      ;	8   FREE_SFT
  2355                                      ;	9   BUFWRITE
  2356                                      ;	10  SHARE_VIOLATION
  2357                                      ;	11  SHARE_ERROR
  2358                                      ;	12  SET_SFT_MODE
  2359                                      ;	13  DATE16
  2360                                      ;	14  SETVISIT
  2361                                      ;	15  SCANPLACE
  2362                                      ;	16  SKIPVISIT
  2363                                      ;	17  StrCpy
  2364                                      ;	18  StrLen
  2365                                      ;	19  UCase
  2366                                      ;	20  POINTCOMP
  2367                                      ;	21  CHECKFLUSH
  2368                                      ;	22  SFFromSFN
  2369                                      ;	23  GetCDSFromDrv
  2370                                      ;	24  Get_User_Stack
  2371                                      ;	25  GetThisDrv
  2372                                      ;	26  DriveFromText
  2373                                      ;	27  SETYEAR
  2374                                      ;	28  DSUM
  2375                                      ;	29  DSLIDE
  2376                                      ;	30  StrCmp
  2377                                      ;	31  initcds
  2378                                      ;	32  pjfnfromhandle
  2379                                      ;	33  $NameTrans
  2380                                      ;	34  CAL_LK
  2381                                      ;	35  DEVNAME
  2382                                      ;	36  Idle
  2383                                      ;   37  DStrLen
  2384                                      ;   38  NLS_OPEN      DOS 3.3
  2385                                      ;   39  $CLOSE        DOS 3.3
  2386                                      ;   40  NLS_LSEEK     DOS 3.3
  2387                                      ;   41  $READ         DOS 3.3
  2388                                      ;   42  FastInit      DOS 4.0
  2389                                      ;   43  NLS_IOCTL     DOS 3.3
  2390                                      ;   44  GetDevList    DOS 3.3
  2391                                      ;   45  NLS_GETEXT    DOS 3.3
  2392                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2393                                      ;   47  FAKE_VERSION  DOS 4.0
  2394                                  
  2395                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2396                                      ;	0   NLSInstall
  2397                                      ;	1   ChgCodePage
  2398                                      ;	2   GetExtInfo
  2399                                      ;	3   SetCodePage
  2400                                      ;	4   GetCntry
  2401                                  
  2402                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2403                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2404                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2405                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2406                                  
  2407                                  multMULT        EQU     4Ah
  2408                                  multMAGIC       EQU     256*multMULT + 11h
  2409                                  multMULTRPLTOM  EQU     06h
  2410                                  
  2411                                      ;   0   swap disk function for single floppy drive m/cs
  2412                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2413                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2414                                      ;       drive
  2415                                      ;
  2416                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2417                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2418                                      ;       returns pointer in ES:DI
  2419                                      ;
  2420                                      ;   3-4 currently used by nobody
  2421                                      ;   5   Switcher API
  2422                                      ;   6   Top of Memory for RPL.
  2423                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2424                                      ;           code present in TOM should respond with a new TOM in DX
  2425                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2426                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2427                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2428                                      ;           It is the responsibility of RPL program to release the mem.
  2429                                      ;   7   Reserved for PROTMAN support.
  2430                                      ;  10   smartdrv 4.0
  2431                                      ;  11   dblspace api
  2432                                      ;  12   MRCI     api
  2433                                      ;  13   dblspace/mrci stealth packet api
  2434                                  
  2435                                  MultAPM     EQU     4ch             ; Obselete ???
  2436                                      ;       00h     APM_VER_CHK
  2437                                      ;       01h     APM_SUS_SYS_REQ
  2438                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2439                                  
  2440                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2441                                  				;  APM events                         ; M036
  2442                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2443                                  
  2444                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2445                                  ;	  it calls Multdos 42 to set up an entry routine address
  2446                                      ;	0   Install status  (reserved)
  2447                                      ;	1   Lookup
  2448                                      ;	2   Insert
  2449                                      ;	3   Delete
  2450                                      ;	4   Purge	    (reserved)
  2451                                  
  2452                                  ;============================================================================
  2453                                  ; FIND.INC (MSDOS 6.0, 1991)
  2454                                  ;============================================================================
  2455                                  ; 17/05/2019 - Retro DOS v4.0
  2456                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2457                                  
  2458                                  ;Break	<find first/next buffer>
  2459                                  
  2460                                  struc find_buf
  2461 00000000 ??                      .drive:	    resb 1		; drive of search
  2462 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2463 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2464 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2465 0000000F ????                    .DirStart:  resw 1		; DirStart
  2466 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2467 00000015 ??                      .attr:	    resb 1		; attribute found
  2468 00000016 ????                    .time:	    resw 1		; time
  2469 00000018 ????                    .date:	    resw 1		; date
  2470 0000001A ????                    .size_l:    resw 1		; low(size)
  2471 0000001C ????                    .size_h:    resw 1		; high(size)
  2472 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2473                                  .size:
  2474                                  endstruc
  2475                                  
  2476                                  ;============================================================================
  2477                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2478                                  ;============================================================================
  2479                                  ; 29/04/2019 - Retro DOS v4.0
  2480                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2481                                  
  2482                                  ;Equates for COUNTRY INFORMATION.
  2483                                  SetCountryInfo	EQU	1	;country info
  2484                                  SetUcase	EQU	2	;uppercase table
  2485                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2486                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2487                                  SetFileList	EQU	5	;valid file character list
  2488                                  SetCollate	EQU	6	;collating sequence
  2489                                  SetDBCS 	EQU	7	;double byte character set
  2490                                  SetALL		EQU	-1	;all the entries
  2491                                  
  2492                                  ;DOS country and code page information table structure.
  2493                                  ;Internally, IBMDOS gives a pointer to this table.
  2494                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2495                                  ;this structure.
  2496                                  
  2497                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2498 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2499 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2500 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2501 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2502 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2503 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2504                                  
  2505 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2506 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2507                                  
  2508 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2509 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2510                                  
  2511 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2512 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2513                                  
  2514                                  ; MSDOS 6.0
  2515 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2516 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2517                                  
  2518 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2519 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2520 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2521 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2522 0000006C ????                    .ccDFormat:		resw 1	;date format
  2523 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2524 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2525 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2526 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2527 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2528 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2529 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2530 0000007D ??                      .ccTFormat:		resb 1	;time format
  2531 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2532 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2533 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2534                                  .size:
  2535                                  endstruc
  2536                                  
  2537                                  ;Ucase table
  2538                                  struc CC_UCASE_TAB
  2539 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2540 00000002 <res 80h>               .ccUcase_data:		resb 128
  2541                                  endstruc
  2542                                  
  2543                                  ;File Ucase table
  2544                                  struc CC_FILE_UCASE_TAB
  2545 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2546 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2547                                  endstruc
  2548                                  
  2549                                  ;File char list
  2550                                  struc CC_FILE_CHAR_TAB
  2551 00000000 ????                    .ccFilechar_leng:	resw 1
  2552 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2553                                  endstruc
  2554                                  
  2555                                  ;collate table
  2556                                  struc CC_COLLATE_TAB
  2557 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2558 00000002 <res 100h>              .ccCollate_data:	resb 256
  2559                                  endstruc
  2560                                  
  2561                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2562                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2563                                  
  2564                                  ; 06/08/2018
  2565                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2566                                  
  2567                                  ;CAPITALIZATION equates
  2568                                  CAP_ONE_CHAR	equ	20H
  2569                                  CAP_STRING	equ	21H
  2570                                  CAP_ASCIIZ	equ	22H
  2571                                  CHECK_YES_NO	equ	23H
  2572                                  UPPER_TABLE	equ	80H
  2573                                  
  2574                                  ;NLS_YES	equ	59H  ; 'Y'
  2575                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2576                                  ;NLS_NO		equ	4EH  ; 'N'	
  2577                                  ;NLS_no2	equ	6EH  ; 'n'	
  2578                                  
  2579                                  ;============================================================================
  2580                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2581                                  ;============================================================================
  2582                                  ; 25/04/2019 - Retro DOS v4.0
  2583                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2584                                  
  2585                                  ;BREAK <Current directory list structure>
  2586                                  
  2587                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2588                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2589                                  ;									   ;
  2590                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2591                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2592                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2593                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2594                                  ; of the disk being changed or if the path must be recracked.		   ;
  2595                                  ;
  2596                                  ;	Some pathnames have special preambles, such as
  2597                                  ;
  2598                                  ;		\\machine\sharename\...
  2599                                  ;	For these pathnames we can't allow ".." processing to back us
  2600                                  ;	up into the special front part of the name.  The CURDIR_END field
  2601                                  ;	holds the address of the seperator character which marks
  2602                                  ;	the split between the special preamble and the regular
  2603                                  ;	path list; ".." processing isn't allowed to back us up past
  2604                                  ;	(i.e., before) CURDIR_END
  2605                                  ;	For the root, it points at the leading /.  For net
  2606                                  ;	assignments it points at the end (nul) of the initial assignment:
  2607                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2608                                  ;	  ^		 ^		     ^
  2609                                  
  2610                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2611                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2612                                  
  2613                                  struc curdir	; curdir_list
  2614 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2615 00000043 ????                    .flags:		resw 1			; various flags
  2616 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2617 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2618 0000004D ????                    .user_word:	resw 1
  2619 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2620                                  ; MSDOS 6.0
  2621 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2622 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2623 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2624                                  .size:
  2625                                  endstruc
  2626                                  
  2627                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2628                                  
  2629                                  %define curdir_netID curdir_ID  ; dword
  2630                                  
  2631                                  ;**	Flag values for CURDIR_FLAGS
  2632                                  
  2633                                  curdir_isnet	EQU	1000000000000000B
  2634                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2635                                  curdir_inuse	EQU	0100000000000000B
  2636                                  curdir_splice	EQU	0010000000000000B
  2637                                  curdir_local	EQU	0001000000000000B
  2638                                  
  2639                                  ;									   ;
  2640                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2641                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2642                                  
  2643                                  ;============================================================================
  2644                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2645                                  ;============================================================================
  2646                                  ; 09/07/2018 - Retro DOS v3.0
  2647                                  
  2648                                  ;BREAK <File Control Block definition>
  2649                                  
  2650                                  ;
  2651                                  ; Field definition for FCBs
  2652                                  ; The FCB has the following structure:
  2653                                  ;
  2654                                  ;	+---------------------------+
  2655                                  ;	|   Drive indicator(byte)   |
  2656                                  ;	+---------------------------+
  2657                                  ;	|    Filename (8 chars)     |
  2658                                  ;	+---------------------------+
  2659                                  ;	|    Extension (3 chars)    |
  2660                                  ;	+---------------------------+
  2661                                  ;	|   Current Extent(word)    |
  2662                                  ;	+---------------------------+
  2663                                  ;	|    Record size (word)     |
  2664                                  ;	+---------------------------+
  2665                                  ;	|    File Size (2 words)    |
  2666                                  ;	+---------------------------+
  2667                                  ;	|	Date of write	    |
  2668                                  ;	+---------------------------+
  2669                                  ;	|	Time of write	    |
  2670                                  ;	+---------------------------+
  2671                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2672                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2673                                  ;									   ;
  2674                                  ;	+---------------------------+
  2675                                  ;	|   8 bytes reserved	    |
  2676                                  ;	+---------------------------+
  2677                                  ;									   ;
  2678                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2679                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2680                                  ;	|    next record number     |
  2681                                  ;	+---------------------------+
  2682                                  ;	|   random record number    |
  2683                                  ;	+---------------------------+
  2684                                  ;
  2685                                  
  2686                                  struc	SYS_FCB
  2687 00000000 ??                      .drive:	resb 1
  2688 00000001 ????????????????        .name:	resb 8
  2689 00000009 ??????                  .ext:	resb 3
  2690 0000000C ????                    .EXTENT: resw 1
  2691 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2692 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2693                                  				; following word
  2694 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2695 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2696 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2697                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2698                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2699                                  ;									   ;
  2700 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2701                                  ;									   ;
  2702                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2703                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2704 00000020 ??                      .NR:	resb 1			; Next record
  2705 00000021 ????????                .RR:	resb 4			; Random record
  2706                                  .size:
  2707                                  endstruc
  2708                                  
  2709                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2710                                  				; NEXT
  2711                                  ; 20/07/2018
  2712                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2713                                  
  2714                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2715                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2716                                  ; NOTE about this byte (fcb_nsl_drive)
  2717                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2718                                  ;	00 means a local file or device with sharing loaded
  2719                                  ;	10 means a remote (network) file
  2720                                  ;	01 means a local file with no sharing loaded
  2721                                  ;	11 means a local device with no sharing loaded
  2722                                  
  2723                                  ; 20/07/2018
  2724                                  
  2725                                  ;
  2726                                  ; Network FCB
  2727                                  ;
  2728                                  
  2729                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2730                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2731                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2732                                  
  2733                                  ;
  2734                                  ; No sharing local file FCB
  2735                                  ;
  2736                                  
  2737                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2738                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2739                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2740                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2741                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2742                                  
  2743                                  ;
  2744                                  ; No sharing local device FCB
  2745                                  ;
  2746                                  
  2747                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2748                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2749                                  
  2750                                  ;
  2751                                  ; Sharing local FCB
  2752                                  ;
  2753                                  
  2754                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2755                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2756                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2757                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2758                                  
  2759                                  ;
  2760                                  ; Bogusness:  the four cases are:
  2761                                  ;
  2762                                  ;   local file	    00
  2763                                  ;   local device    40
  2764                                  ;   local sharing   C0
  2765                                  ;   network	    80
  2766                                  ;
  2767                                  ; Since sharing and network collide, we cannot use a test instruction for
  2768                                  ; deciding whether a network or a share check in involved
  2769                                  ;
  2770                                  FCBDEVICE   EQU 040h
  2771                                  FCBNETWORK  EQU 080h
  2772                                  FCBSHARE    EQU 0C0h
  2773                                  
  2774                                  ; FCBSPECIAL must be able to mask off both net and share
  2775                                  FCBSPECIAL  EQU 080h
  2776                                  FCBMASK     EQU 0C0h
  2777                                  
  2778                                  ;============================================================================
  2779                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2780                                  ;============================================================================
  2781                                  ; 11/07/2018 - Retro DOS v3.0
  2782                                  ; 25/04/2019 - Retro DOS v4.0
  2783                                  
  2784                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2785 00000000 ??                      .dirpos:	resb 1
  2786 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2787                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2788 00000005 ????                    .clusnum:	resw 1
  2789 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2790 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2791                                  .size:
  2792                                  endstruc
  2793                                  
  2794                                  ; 23/07/2018
  2795                                  ;FASTOPEN NAME CACHING Subfunctions
  2796                                  FONC_Look_up	equ	1
  2797                                  FONC_insert	equ	2
  2798                                  FONC_delete	equ	3
  2799                                  FONC_update	equ	4
  2800                                  FONC_purge	equ	5	;reserved for the future use.
  2801                                  FONC_Rename	equ	6	;AN001
  2802                                  
  2803                                  ; 27/07/2018
  2804                                  ;FastOpen Data Structure
  2805                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2806 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2807 00000002 ????????                .name_caching:	resd 1
  2808                                  ; MSDOS 6.0
  2809                                  ;.fatchain_caching: resd 1	;reserved for future use
  2810                                  .size:
  2811                                  endstruc
  2812                                  
  2813                                  ; 27/07/2018
  2814                                  ;Equates used in DOS.
  2815                                  FastOpen_Set	       equ     00000001b
  2816                                  FastOpen_Reset	       equ     11111110b
  2817                                  Lookup_Success	       equ     00000010b
  2818                                  Lookup_Reset	       equ     11111101b
  2819                                  Special_Fill_Set       equ     00000100b
  2820                                  Special_Fill_Reset     equ     11111011b
  2821                                  No_Lookup	       equ     00001000b
  2822                                  Set_For_Search	       equ     00010000b	;DCR 167
  2823                                  
  2824                                  ; 09/08/2018 
  2825                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2826                                  ; Fastxxx equates
  2827                                  FastOpen_ID	   equ	   1
  2828                                  FastSeek_ID	   equ	   2
  2829                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2830                                  
  2831                                  ;Structure definitions
  2832                                  ;
  2833                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2834 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2835 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2836                                  endstruc
  2837                                  
  2838                                  ;============================================================================
  2839                                  ; LOCK.INC, MSDOS 6.0, 1991
  2840                                  ;============================================================================
  2841                                  ; 14/07/2018 - Retro DOS v3.0
  2842                                  
  2843                                  ;**	LOCK.INC - Definitions for Record Locking
  2844                                  
  2845                                  ;**	LOCK functions
  2846                                  
  2847                                  LOCK_ALL	    equ    0
  2848                                  UNLOCK_ALL	    equ    1
  2849                                  LOCK_MUL_RANGE	    equ    2
  2850                                  UNLOCK_MUL_RANGE    equ    3
  2851                                  LOCK_READ	    equ    4
  2852                                  WRITE_UNLOCK	    equ    5
  2853                                  LOCK_ADD	    equ    6
  2854                                  
  2855                                  ;**	Structure for Lock buffer
  2856                                  
  2857                                  struc LockBuf
  2858 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2859 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2860                                  endstruc
  2861                                  
  2862                                  ;============================================================================
  2863                                  ; DPL.ASM, MSDOS 6.0, 1991
  2864                                  ;============================================================================
  2865                                  ; 04/08/2018 - Retro DOS v3.0
  2866                                  
  2867                                  ; (SRVCALL.ASM)
  2868                                  
  2869                                  struc DPL
  2870 00000000 ????                    .AX:	resw	1	; AX register
  2871 00000002 ????                    .BX:	resw	1	; BX register
  2872 00000004 ????                    .CX:	resw	1	; CX register
  2873 00000006 ????                    .DX:	resw	1	; DX register
  2874 00000008 ????                    .SI:	resw	1	; SI register
  2875 0000000A ????                    .DI:	resw	1	; DI register
  2876 0000000C ????                    .DS:	resw	1	; DS register
  2877 0000000E ????                    .ES:	resw	1	; ES register
  2878 00000010 ????                    .rsrvd: resw	1	; Reserved
  2879 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2880 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2881                                  .size:
  2882                                  endstruc
  2883                                   
  2884                                  ;----------------------------------------------------------------------------
  2885                                  ; DOSDATA
  2886                                  ;----------------------------------------------------------------------------
  2887                                  ;============================================================================
  2888                                  ; 24/04/2019 - Retro DOS v4.0
  2889                                  
  2890                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2891                                  		; ((just after resident IO.SYS code&data))
  2892                                  
  2893                                  ;============================================================================
  2894                                  ; WIN386.INC, MSDOS 6.0, 1991
  2895                                  ;============================================================================
  2896                                  ; 24/04/2019 - Retro DOS 4.0
  2897                                  
  2898                                  ;
  2899                                  ;  Symbols and structures relating to WIN386 support.
  2900                                  ;
  2901                                  ;  Used by files in both the DOS and the BIOS.
  2902                                  ;
  2903                                  ;  Created: 7-13-89 by MRW
  2904                                  ;
  2905                                  
  2906                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2907                                  
  2908                                  MultWin386		equ     16h	; Int 2f multiplex number
  2909                                  
  2910                                  Win386_Init		equ	05h	; Win386 initialization
  2911                                  Win386_Exit		equ	06h	; Win386 exit
  2912                                  Win386_Devcall		equ	07h	; Win386 device call out
  2913                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2914                                  
  2915                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2916                                  ; answer call outs from the DOSMGR
  2917                                  
  2918                                  Win386_DOSMGR		equ	15H
  2919                                  
  2920                                  ; The following structures are used to communicate instance data to 
  2921                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2922                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2923                                  
  2924                                  struc Win386_SIS	; Startup Info Structure
  2925 00000000 ????                     .Version:		resb	2	; db 3, 0
  2926 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2927 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2928 0000000A ????????                 .Reference_Data:	resd	1
  2929 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2930                                  endstruc
  2931                                  
  2932                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2933                                  
  2934                                  struc Win386_IIS	; Instance Item Structure
  2935 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2936 00000004 ????                    .Size:			resw	1	; size of an instance item
  2937                                  endstruc
  2938                                  
  2939                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2940                                  
  2941                                  ;Win386 DOSMGR function return values to indicate operation done
  2942                                  
  2943                                  WIN_OP_DONE		equ	0B97Ch	; 
  2944                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2945                                  
  2946                                  ;M021
  2947                                  ; WInoldap callout multiplex number
  2948                                  
  2949                                  WINOLDAP		equ	46h	;
  2950                                  
  2951                                  ;============================================================================
  2952                                  ;----------------------------------------------------------------------------
  2953                                  ; DOSCODE
  2954                                  ;----------------------------------------------------------------------------
  2955                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2956                                  
  2957                                  ;============================================================================
  2958                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2959                                  ;============================================================================
  2960                                  ; 16/07/2018 - Retro DOS 3.0
  2961                                  ;----------------------------------------------------------------------------
  2962                                  ; 24/04/2019 - Retro DOS 4.0
  2963                                  
  2964                                  ; MSDOS 6.0
  2965                                  ;----------------------------------------------------------------------------
  2966                                  ; FILE : ORIGIN.INC
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2969                                  ; is used for ORGing the DOS code.
  2970                                  ;
  2971                                  ; Brief Description of the necessacity of this ORG:
  2972                                  ; -------------------------------------------------
  2973                                  ;
  2974                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2975                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2976                                  ; This means programs running out off the HMA must use non-zero offset base
  2977                                  ; addresses. It also means that if we're running multiple programs from the
  2978                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2979                                  ; HMA segments that precede it.
  2980                                  ; 
  2981                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2982                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2983                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2984                                  ; selecting segment values between f124h and ffffh it could be located 
  2985                                  ; anywhere in the HMA. The problem with this is that programs with such 
  2986                                  ; high ORGs would not be able to run in low RAM.
  2987                                  ;
  2988                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  2989                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  2990                                  ; the following solution has been implemented:
  2991                                  ;
  2992                                  ; The Bios Code segment will have a very small offset and run at the very
  2993                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  2994                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  2995                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  2996                                  ; possible physical address at which DOS code will run, while still providing
  2997                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  2998                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  2999                                  ; mostly true.
  3000                                  ;
  3001                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3002                                  ; putting this value after the first jmp instruction in the DOS code in
  3003                                  ; mshead.asm. 
  3004                                  ;
  3005                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3006                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3007                                  ;
  3008                                  ; Revision History:
  3009                                  ;
  3010                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3011                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3012                                  ;
  3013                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3014                                  ; A utility called getsize will obtain the corresponding values from msdos
  3015                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3016                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3017                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3018                                  ; dependant on that.				  --- Apr 3 '90
  3019                                  ;
  3020                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3021                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3022                                  ; so the offset will not need to be included at the beginning of the code
  3023                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3024                                  ; at offset zero within the segment.
  3025                                  ; 
  3026                                  ;
  3027                                  ;--------------------------------------------------------------------------
  3028                                  
  3029                                  BIODATASTART	EQU	00700h
  3030                                  ;include	bdsize.inc	; this sets the values:
  3031                                  				;	BIODATASIZ
  3032                                  				;	BIOCODESIZ
  3033                                  				;	DOSDATASIZ
  3034                                  
  3035                                  ; 05/12/2022
  3036                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3037                                  			; 0900h for MSDOS 5.0 IO.SYS
  3038                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3039                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3040                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3041                                  			; 1370h for MSDOS 5.0 IO.SYS
  3042                                  ;ifndef ROMDOS
  3043                                  ;
  3044                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3045                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3046                                  ;
  3047                                  ;else
  3048                                  ;
  3049                                  ;BYTSTART	EQU	0
  3050                                  ;PARASTART	EQU	0
  3051                                  ;
  3052                                  ;endif ; ROMDOS
  3053                                  
  3054                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3055                                  ; -----------------------------------------------------------------
  3056                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3057                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3058                                  ;DOSDATASIZE equ MSDAT001E
  3059                                  ; 05/12/2022
  3060                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3061                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3062                                  			    ; of DOSDATA (in low memory) while
  3063                                  			    ; dos/kernel code starts just after 
  3064                                  			    ; this data block ((org = DOSDATASIZE))
  3065                                  			    ; (in low memory or in HMA)	
  3066                                  ; -----------------------------------------------------------------
  3067                                  
  3068                                  ; 04/11/2022	
  3069                                  ; -----------------------------------------------------------------	
  3070                                  ; NOTE:
  3071                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3072                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3073                                  ; -----------------------------------------------------------------
  3074                                  
  3075                                  ; ----------------------------------------------------------------------------
  3076                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3077                                  ; ----------------------------------------------------------------------------
  3078                                  
  3079                                  segment .code vstart=3DD0h ; 06/12/2022
  3080                                  								
  3081                                  ; ============================================================================
  3082                                  
  3083                                  
  3084                                  ;[ORG 3DE0h]
  3085                                  
  3086                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3087                                  
  3088                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3089                                  
  3090                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3091                                  	PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3092                                  			    ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3093                                  	[ORG PARASTART]	
  3094                                  
  3095                                  _$STARTCODE:
  3096                                  
  3097                                  ;PARASTART:
  3098 00000000 E9EE75                          JMP     DOSINIT
  3099                                  
  3100                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3101                                  	; 04/11/2022
  3102 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3103                                  
  3104                                  BioDataSeg:
  3105 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3106                                  
  3107                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3108                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3109                                  ; allows getting the DOS data segment without going through the 
  3110                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3111                                  
  3112                                  DosDSeg:
  3113 00000007 0000                    	dw	0
  3114                                  	
  3115                                  ;============================================================================
  3116                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3117                                  ;============================================================================
  3118                                  ; 16/07/2018 - Retro DOS 3.0
  3119                                  ; 29/04/2019 - Retro DOS 4.0
  3120                                  
  3121                                  	; (MSDOS version)
  3122                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3123                                  	;db	6
  3124                                  	;db	20
  3125                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3126                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3127                                  	;db	5
  3128                                  	;db	0	
  3129                                  
  3130                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3131                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3132 00000009 05                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3133 0000000A 00                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3134                                  
  3135                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3136                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3137                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3138                                  
  3139                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3140                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3141                                  ;
  3142                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3143                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3144                                  
  3145                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3146                                  ; those error codes which are "allowed" for each system call. If the error
  3147                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3148                                  ; is to return the "real" error via Extended error, and one of the allowed
  3149                                  ; errors on the actual call.
  3150                                  ;
  3151                                  ; The table is organized as follows:
  3152                                  ;
  3153                                  ;    Each entry in the table is of variable size, but the first
  3154                                  ;       two bytes are always:
  3155                                  ;
  3156                                  ;       Call#,Cnt of bytes following this byte
  3157                                  ;
  3158                                  ; EXAMPLE:
  3159                                  ;       Call 61 (OPEN)
  3160                                  ;
  3161                                  ;       DB      61,5,12,3,2,4,5
  3162                                  ;
  3163                                  ;       61 is the AH INT 21 call value for OPEN.
  3164                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3165                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3166                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3167                                  ;       this case 5).  The last value will be the one returned on the call if
  3168                                  ;       the "real" error is not one of the allowed ones.
  3169                                  ;
  3170                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3171                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3172                                  ;   call, so set up an Extended error and leave the current error code alone.
  3173                                  ;
  3174                                  ; The table is terminated by a call value of 0FFh
  3175                                  
  3176                                  ;PUBLIC I21_MAP_E_TAB
  3177                                  	; 10/08/2018
  3178                                  
  3179                                  ; 29/04/2019
  3180                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3181                                  ; 04/11/2022
  3182                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3183                                  
  3184                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3185 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3186 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3187 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3188 00000018 0205                        DB          error_file_not_found,error_access_denied
  3189 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3190 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3191 00000022 04                          DB          error_too_many_open_files
  3192 00000023 05                          DB          error_access_denied
  3193                                      ; MSDOS 6.0
  3194 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3195 00000029 04                          DB          error_too_many_open_files
  3196 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3197                                      ; MSDOS 3.3
  3198                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3199                                      ;DB		error_too_many_open_files,error_access_denied
  3200 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3201 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3202 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3203 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3204 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3205 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3206 00000045 05                          DB          error_access_denied
  3207 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3208 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3209 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3210 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3211                                      ; MSDOS 6.0	
  3212 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3213                                      ; MSDOS 3.3	
  3214                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3215 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3216 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3217 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3218 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3219 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3220 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3221 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3222 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3223                                      ; MSDOS 6.0
  3224 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3225 0000007D 1005                        DB		error_current_directory,error_access_denied
  3226                                      ; MSDOS 3.3
  3227                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3228                                      ;DB		error_access_denied
  3229                                      ; MSDOS 6.0	
  3230 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3231 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3232                                      ; MSDOS 3.3	
  3233                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3234 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3235 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3236 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3237 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3238 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3239 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3240 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3241 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3242 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3243 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3244 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3245 000000AA 01                          DB              error_invalid_function
  3246                                      ; MSDOS 6.0		
  3247 000000AB 6C0A                        DB	ExtOpen,10
  3248 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3249 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3250 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3251 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3252 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3253 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3254 000000BD FF                          DB  0FFh
  3255                                  
  3256                                  ;19/09/2023
  3257                                  ;22/12/2022
  3258                                  ;04/11/2022	
  3259                                  ;29/04/2019 - Retro DOS v4.0
  3260                                  ;============================================================================
  3261                                  ; 	Retro DOS v4.0
  3262                                  ;============================================================================
  3263 000000BE 00                      	db 	0
  3264                                  RETRODOSMSG:
  3265 000000BF 0D0A                    	db	13,10
  3266                                  	;;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3267                                  	;;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3268                                  	;;db	"Retro DOS v4.1 by Erdogan Tan [2022]"	; 28/12/2022
  3269                                  	;db	"Retro DOS v4.1 by Erdogan Tan [2023]"
  3270 000000C1 526574726F20444F53-     	db	"Retro DOS v4.1 by Erdogan Tan [2024]"	; 05/01/2024
  3270 000000CA 2076342E3120627920-
  3270 000000D3 4572646F67616E2054-
  3270 000000DC 616E205B323032345D 
  3271 000000E5 0D0A2400                	db	13,10,"$", 0 
  3272                                  
  3273                                  ;============================================================================
  3274                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3275                                  ;============================================================================
  3276                                  ; 11/07/2018 - Retro DOS v3.0
  3277                                  
  3278                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3279 000000E9 90                      align 2
  3280                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3281                                  
  3282                                  ; Standard Functions
  3283                                  ;DISPATCH  LABEL WORD
  3284                                  DISPATCH:
  3285                                  	; 16/07/2018 - Retro DOS v3.0
  3286                                  	; (MSDOS 3.3)
  3287                                  
  3288                                  ; 29/04/2019
  3289                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3290                                  
  3291                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3292                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3293                                  
  3294 000000EA [2261]                          short_addr  _$ABORT			    ;  0      0
  3295 000000EC [3E16]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3296 000000EE [4716]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3297 000000F0 [F916]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3298 000000F2 [1417]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3299 000000F4 [1A17]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3300 000000F6 [8815]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3301 000000F8 [B415]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3302 000000FA [6213]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3303 000000FC [BB13]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3304 000000FE [C713]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3305 00000100 [2E17]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3306 00000102 [3817]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3307 00000104 [860F]                          short_addr  _$DISK_RESET		    ; 13      D
  3308 00000106 [6D0E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3309 00000108 [071E]                          short_addr  _$FCB_OPEN			    ; 15      F
  3310 0000010A [D717]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3311 0000010C [F61E]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3312 0000010E [3C1F]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3313 00000110 [7D17]                          short_addr  _$FCB_DELETE		    ; 19     13
  3314 00000112 [5E1C]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3315 00000114 [621C]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3316 00000116 [E61E]                          short_addr  _$FCB_CREATE		    ; 22     16
  3317 00000118 [4318]                          short_addr  _$FCB_RENAME		    ; 23     17
  3318                                  	; 16/07/2018
  3319                                          ;short_addr _CPMFUNC			    ; 24     18	
  3320 0000011A [5706]                          short_addr  NO_OP			    ; 24     18
  3321 0000011C [680E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3322 0000011E [5D0E]                          short_addr  _$SET_DMA			    ; 26     1A
  3323                                  
  3324                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3325                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3326                                  ;                                                                          ;
  3327 00000120 [150F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3328 00000122 [170F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3329                                  ;                                                                          ;
  3330                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3331                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3332                                  
  3333                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3334                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3335                                  
  3336                                  ; 08/07/2018 - Retro DOS v3.0
  3337                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3338                                  
  3339 00000124 [5706]                  	short_addr  NO_OP			    ; 29     1D
  3340 00000126 [5706]                  	short_addr  NO_OP			    ; 30     1E
  3341                                  
  3342                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3343                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3344                                  ;                                                                          ;
  3345 00000128 [560F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3346                                  ;                                                                          ;
  3347                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3348                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3349                                          ;short_addr _CPMFUNC			    ; 32     20
  3350                                  
  3351                                  ; 08/07/2018 - Retro DOS v3.0
  3352                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3353                                  
  3354 0000012A [5706]                  	short_addr  NO_OP			    ; 32     20
  3355                                  
  3356 0000012C [661C]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3357 0000012E [6A1C]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3358 00000130 [8F17]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3359 00000132 [6517]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3360                                  
  3361                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3362                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3363                                  
  3364                                  ; Extended Functions
  3365 00000134 [8E0E]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3367                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3368                                  ;                                                                          ;
  3369 00000136 [9310]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3370                                  ;                                                                          ;
  3371                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3372                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3373 00000138 [5A1C]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3374 0000013A [561C]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3375 0000013C [0A0F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3376 0000013E [630A]                          short_addr  _$GET_DATE                      ; 42     2A
  3377 00000140 [800A]                          short_addr  _$SET_DATE                      ; 43     2B
  3378 00000142 [9F0A]                          short_addr  _$GET_TIME                      ; 44     2C
  3379 00000144 [B00A]                          short_addr  _$SET_TIME                      ; 45     2D
  3380 00000146 [4E0C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3381                                  
  3382                                  ; Extended functionality group
  3383 00000148 [4A0E]                          short_addr  _$GET_DMA                       ; 47     2F
  3384 0000014A [250C]                          short_addr  _$GET_VERSION                   ; 48     30
  3385 0000014C [C660]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3386                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3387                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3388                                  ;                                                                          ;
  3389 0000014E [580F]                          short_addr  _$GET_DPB			    ; 50     32
  3390                                  ;                                                                          ;
  3391                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3392                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3393 00000150 [6602]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3394 00000152 [400F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3395 00000154 [7F0E]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3396 00000156 [270E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3397 00000158 [BB0E]                          short_addr  _$CHAR_OPER                     ; 55     37
  3398 0000015A [550C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3399                                  ; XENIX CALLS
  3400                                  ;   Directory Group
  3401 0000015C [C221]                          short_addr  _$MKDIR			    ; 57     39
  3402 0000015E [0E21]                          short_addr  _$RMDIR			    ; 58     3A
  3403 00000160 [4921]                          short_addr  _$CHDIR			    ; 59     3B
  3404                                  ;   File Group
  3405 00000162 [E46E]                          short_addr  _$CREAT			    ; 60     3C
  3406 00000164 [0D6E]                          short_addr  _$OPEN			    ; 61     3D
  3407 00000166 [3E66]                          short_addr  _$CLOSE		 	    ; 62     3E
  3408 00000168 [4F67]                          short_addr  _$READ			    ; 63     3F
  3409 0000016A [B567]                          short_addr  _$WRITE			    ; 64     40
  3410 0000016C [346F]                          short_addr  _$UNLINK			    ; 65     41
  3411 0000016E [BA67]                          short_addr  _$LSEEK			    ; 66     42
  3412 00000170 [F16E]                          short_addr  _$CHMOD			    ; 67     43
  3413 00000172 [2322]                          short_addr  _$IOCTL			    ; 68     44
  3414 00000174 [6F68]                          short_addr  _$DUP			    ; 69     45
  3415 00000176 [8D68]                          short_addr  _$DUP2			    ; 70     46
  3416 00000178 [AA20]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3417                                  ;   Memory Group
  3418 0000017A [B961]                          short_addr  _$ALLOC			    ; 72     48
  3419 0000017C [3363]                          short_addr  _$DEALLOC                       ; 73     49
  3420 0000017E [0F63]                          short_addr  _$SETBLOCK                      ; 74     4A
  3421                                  ;   Process Group
  3422 00000180 [A05A]                          short_addr  _$EXEC			    ; 75     4B
  3423 00000182 [FE60]                          short_addr  _$EXIT			    ; 76     4C
  3424 00000184 [965A]                          short_addr  _$WAIT			    ; 77     4D
  3425 00000186 [F41F]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3426                                  ;   Special Group
  3427 00000188 [4820]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3428                                  ; SPECIAL SYSTEM GROUP
  3429                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3430                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3431                                  ;                                                                          ;
  3432 0000018A [B802]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3433 0000018C [C402]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3434 0000018E [4C0F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3435 00000190 [BB0F]                          short_addr  _$SETDPB			    ; 83     53
  3436                                  ;                                                                          ;
  3437                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3438                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3439 00000192 [490C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3440                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3441                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3442                                  ;                                                                          ;
  3443 00000194 [8210]                          short_addr  _$DUP_PDB                       ; 85     55
  3444                                  ;                                                                          ;
  3445                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3446                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3447 00000196 [5A6F]                          short_addr  _$RENAME			    ; 86     56
  3448 00000198 [2168]                          short_addr  _$FILE_TIMES                    ; 87     57
  3449 0000019A [6863]                          short_addr  _$ALLOCOPER                     ; 88     58
  3450                                  
  3451                                  ; 08/07/2018 - Retro DOS v3.0
  3452                                  ; -------------------------------------------------------------------------;
  3453                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3454                                  
  3455                                  ; Network extention system calls
  3456 0000019C [CF0E]                          short_addr  _$GetExtendedError              ; 89     59
  3457 0000019E [E56F]                          short_addr  _$CreateTempFile                ; 90     5A
  3458 000001A0 [CD6F]                          short_addr  _$CreateNewFile                 ; 91     5B
  3459 000001A2 [C671]                          short_addr  _$LockOper                      ; 92     5C
  3460 000001A4 [4E64]                          short_addr  _$ServerCall                    ; 93     5D
  3461 000001A6 [5769]                          short_addr  _$UserOper                      ; 94     5E
  3462 000001A8 [BC68]                          short_addr  _$AssignOper                    ; 95     5F
  3463 000001AA [A86D]                          short_addr  _$NameTrans                     ; 96     60
  3464 000001AC [5706]                  	short_addr  NO_OP			    ; 97     61
  3465 000001AE [C402]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3466                                  ; the next call is reserved for hangool sys call
  3467                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3468 000001B0 [EF0E]                  	short_addr  _$ECS_Call			    ; 99     63
  3469                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3470                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3471                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3472                                  ;                                                                          ;
  3473 000001B2 [D002]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3474                                  ;                                                                          ;
  3475                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3476                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3477 000001B4 [D80C]                          short_addr  _$GetExtCntry                   ; 101    65
  3478 000001B6 [D50D]                          short_addr  _$GetSetCdPg                    ; 102    66
  3479 000001B8 [8B66]                          short_addr  _$ExtHandle                     ; 103    67
  3480 000001BA [7166]                          short_addr  _$COMMIT                        ; 104    68
  3481                                  
  3482                                  ; 08/07/2018
  3483                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3484                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3485                                  
  3486                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3487 000001BC [8511]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3488 000001BE [7166]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3489 000001C0 [5706]                  	short_addr  NO_OP                           ; 107    6B   
  3490                                  						    ; IFS_IOCTL no longer 
  3491                                  						    ; supported
  3492 000001C2 [7B70]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3493                                  
  3494                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3495                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3496                                  ;                                                                          ;
  3497                                  ;ifdef ROMEXEC
  3498                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3499                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3500                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3501                                  ;endif
  3502                                  ;                                                                          ;
  3503                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3504                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3505                                  
  3506                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3507                                  
  3508                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3509                                  
  3510                                  ; 08/07/2018 - Retro DOS v3.0
  3511                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3512                                  
  3513                                  ;	If 	Installed
  3514                                  
  3515                                  align 2
  3516                                  
  3517                                  ;PUBLIC FOO
  3518                                  
  3519                                  FOO:	; LABEL WORD
  3520 000001C4 [1407]                          short_addr  Leave2F
  3521                                  
  3522 000001C6 [C801]                  DTab:	DW  DOSTable
  3523                                  
  3524                                  	;PUBLIC FOO,DTAB
  3525                                  
  3526                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3527                                  
  3528                                  ; 29/04/2019
  3529                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3530                                  
  3531                                  
  3532                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3533                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3534                                         
  3535                                  DOSTable:  ; LABEL  WORD
  3536 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3537 000001C9 [3909]                          short_addr  DOSInstall          ;   0 install check
  3538 000001CB [B02E]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3539 000001CD [B00E]                          short_addr  RECSET              ;   2   RECSET
  3540 000001CF [3309]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3541 000001D1 [CB4F]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3542 000001D3 [4916]                          short_addr  OUTT                ;   5   OUT
  3543 000001D5 [A152]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3544 000001D7 [2058]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3545 000001D9 [A52F]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3546 000001DB [E559]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3547 000001DD [7A72]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3548 000001DF [FC2B]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3549 000001E1 [E62B]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3550 000001E3 [EB0A]                          short_addr  DATE16              ;   13  DATE16
  3551 000001E5 [F111]                          short_addr  Idle		;   14      empty slot
  3552 000001E7 [1958]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3553 000001E9 [F111]                          short_addr  Idle		;   16      empty slot
  3554 000001EB [BE11]                          short_addr  StrCpy              ;   17  StrCpy
  3555 000001ED [D611]                          short_addr  StrLen              ;   18  StrLen
  3556 000001EF [764F]                          short_addr  UCase		;   19  UCase
  3557 000001F1 [5D58]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3558 000001F3 [BC59]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3559 000001F5 [B965]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3560 000001F7 [1C6A]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3561 000001F9 [8504]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3562 000001FB [C769]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3563 000001FD [CD6D]                          short_addr  DriveFromText       ;   26  DriveFromText
  3564 000001FF [8C0B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3565 00000201 [1B0C]                          short_addr  DSUM                ;   28  DSUM
  3566 00000203 [820B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3567 00000205 [9C11]                          short_addr  StrCmp              ;   30  StrCmp
  3568 00000207 [0A69]                          short_addr  InitCDS             ;   31  initcds
  3569 00000209 [8665]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3570 0000020B [A86D]                          short_addr  _$NameTrans		;   33  $NameTrans
  3571 0000020D [7E06]                          short_addr  CAL_LK              ;   34  CAL_LK
  3572 0000020F [F340]                          short_addr  DEVNAME             ;   35  DEVNAME
  3573 00000211 [F111]                          short_addr  Idle                ;   36  Idle
  3574 00000213 [E411]                          short_addr  DStrLen             ;   37  DStrLen
  3575 00000215 [9312]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3576 00000217 [3E66]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3577 00000219 [9912]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3578 0000021B [4F67]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3579 0000021D [5512]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3580 0000021F [D612]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3581 00000221 [C512]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3582 00000223 [F312]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3583                                          
  3584                                  	; 29/04/2019 - Retro DOS v4.0
  3585 00000225 [F712]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3586                                  
  3587 00000227 [5706]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3588                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3589                                  
  3590                                  DOSTableEnd:  ; LABEL BYTE
  3591                                  
  3592                                  	;ENDIF
  3593                                  
  3594                                  ; ----------------------------------------------------------------------------
  3595                                  ; BREAK   <Copyright notice and version>
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  
  3598                                  ;CODSTRT EQU	$
  3599                                  
  3600                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3601                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3602                                  
  3603                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3604                                  ;       module. The reason is so that the data alignments are the same in
  3605                                  ;       IBM-DOS and MS-DOS up through header.
  3606                                  
  3607                                  	;PUBLIC	HEADER
  3608                                  
  3609                                  HEADER:	; LABEL	BYTE
  3610                                          ;IF	DEBUG
  3611                                          ;DB	13,10,"Debugging DOS version "
  3612                                          ;DB	MAJOR_VERSION + "0"
  3613                                          ;DB	"."
  3614                                          ;DB	(MINOR_VERSION / 10) + "0"
  3615                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3616                                          ;ENDIF
  3617                                  
  3618                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3619                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3620                                  %if 0
  3621                                          ;IF	NOT IBM
  3622                                          DB	13,10,"MS-DOS version "
  3623                                          DB	MAJOR_VERSION + "0"
  3624                                          DB	"."
  3625                                          DB	(MINOR_VERSION / 10) + "0"
  3626                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3627                                          DB	(MINOR_VERSION % 10) + "0"
  3628                                  
  3629                                          ;IF	HIGHMEM
  3630                                          ;DB	"H"
  3631                                          ;ENDIF
  3632                                  
  3633                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3634                                  	; 30/04/2019 - Retro DOS v4.0
  3635                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3636                                  
  3637                                  	;ENDIF
  3638                                  
  3639                                  %endif
  3640                                  
  3641                                  ;IF DEBUG
  3642                                  ;	DB	13,10,"$"
  3643                                  ;ENDIF
  3644                                  
  3645                                  ;include copyrigh.inc
  3646                                  
  3647                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3648                                  
  3649                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3650                                  	;DB	"Licensed Material - Property of Microsoft "
  3651                                  	;DB	"All rights reserved "
  3652                                  
  3653                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3654                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3655                                  
  3656                                  ; 28/12/2022 - Retro DOS v4.1
  3657                                  %if 0
  3658                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3659                                  ms_copyright:
  3660                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3661                                  	db	'Licensed Material - Property of Microsoft '
  3662                                  	db	'All rights reserved '
  3663                                  
  3664                                  %endif
  3665                                  	; 28/12/2022 - Retro DOS v4.1
  3666                                  ms_copyright:
  3667 00000229 0D0A4D5320444F5320-       	db	13,10,"MS DOS Version 5.0"
  3667 00000232 56657273696F6E2035-
  3667 0000023B 2E30               
  3668 0000023D 0D0A436F7079726967-     	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
  3668 00000246 687420313938312D31-
  3668 0000024F 393931204D6963726F-
  3668 00000258 736F667420436F7270-
  3668 00000261 2E0D0A2400         
  3669                                  
  3670                                  ;============================================================================
  3671                                  ; MSCODE.ASM
  3672                                  ;============================================================================
  3673                                  
  3674                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3675                                  ; 03/03/2018
  3676                                  
  3677                                  ;
  3678                                  ; MSCODE.ASM -- MSDOS code
  3679                                  ;
  3680                                  
  3681                                  ;INCLUDE DOSSEG.ASM
  3682                                  ;INCLUDE STDSW.ASM
  3683                                  
  3684                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3685                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3686                                  
  3687                                  ;.xcref
  3688                                  ;INCLUDE DOSSYM.ASM
  3689                                  ;INCLUDE DEVSYM.ASM
  3690                                  ;.cref
  3691                                  ;.list
  3692                                  
  3693                                  ;IFNDEF  KANJI
  3694                                  ;KANJI   EQU     0       ; FALSE
  3695                                  ;ENDIF
  3696                                  
  3697                                  ;IFNDEF  IBM
  3698                                  ;IBM     EQU     0
  3699                                  ;ENDIF
  3700                                  
  3701                                  ;IFNDEF  HIGHMEM
  3702                                  ;HIGHMEM  EQU     0
  3703                                  ;ENDIF
  3704                                  
  3705                                          ;i_need  USER_SP,WORD
  3706                                          ;i_need  USER_SS,WORD
  3707                                          ;i_need  SAVEDS,WORD
  3708                                          ;i_need  SAVEBX,WORD
  3709                                          ;i_need  INDOS,BYTE
  3710                                          ;i_need  NSP,WORD
  3711                                          ;i_need  NSS,WORD
  3712                                          ;i_need  CURRENTPDB,WORD
  3713                                          ;i_need  AUXSTACK,BYTE
  3714                                          ;i_need  CONSWAP,BYTE
  3715                                          ;i_need  IDLEINT,BYTE
  3716                                          ;i_need  NOSETDIR,BYTE
  3717                                          ;i_need  ERRORMODE,BYTE
  3718                                          ;i_need  IOSTACK,BYTE
  3719                                          ;i_need  WPERR,BYTE
  3720                                          ;i_need  DSKSTACK,BYTE
  3721                                          ;i_need  CNTCFLAG,BYTE
  3722                                          ;i_need  LEAVEADDR,WORD
  3723                                          ;i_need  NULLDEVPT,DWORD
  3724                                  
  3725                                          ;IF NOT IBM
  3726                                          ;i_need  OEM_HANDLER,DWORD
  3727                                          ;ENDIF
  3728                                  
  3729                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3730                                  
  3731                                  ;============================================================================
  3732                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3733                                  ;============================================================================
  3734                                  ; 11/07/2018 - Retro DOS v3.0
  3735                                  ; 01/05/2019 - Retro DOS v4.0
  3736                                  
  3737                                  ; DosCode SEGMENT
  3738                                  
  3739                                  ; ==========================================================================
  3740                                  ;
  3741                                  ; $Set_CTRL_C_Trapping
  3742                                  ;
  3743                                  ; Function:
  3744                                  ;	Enable disable ^C checking in dispatcher
  3745                                  ;
  3746                                  ; Inputs:
  3747                                  ;		AL = 0 read ^C status
  3748                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3749                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3750                                  ;		AL = 5 get DOS boot drive
  3751                                  ;		AL = 6 Get version number
  3752                                  ;			RETURNS:
  3753                                  ;				BH = Minor version number
  3754                                  ;				BL = Major version number
  3755                                  ;				DL = DOS internal revision
  3756                                  ;				DH = DOS type flags
  3757                                  ;					Bit 3 	- DOS in ROM
  3758                                  ;					Bit 4 	- DOS in HMA
  3759                                  ;					Bit 0-2, 5-7 - Reserved
  3760                                  ; Outputs:
  3761                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3762                                  ;
  3763                                  ; History:
  3764                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3765                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3766                                  ; ==========================================================================
  3767                                  
  3768                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3769                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3770                                  
  3771                                  	; 01/01/2024
  3772                                  	
  3773                                  _$SET_CTRL_C_TRAPPING:
  3774                                  	; 01/05/2019 - Retro DOS v4.0
  3775                                  
  3776 00000266 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3777 00000268 7603                    	jbe	short scct_1		; If yes continue processing
  3778                                  
  3779 0000026A B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3780 0000026C CF                      	iret
  3781                                  scct_1:
  3782 0000026D 1E                      	push	DS
  3783                                  
  3784                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3785 0000026E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3786                                  	
  3787 00000273 50                      	push	AX			; DL only register that can change
  3788 00000274 56                      	push	SI
  3789                                  
  3790 00000275 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3791 00000278 30E4                    	xor	AH,AH			; Clear high byte of AX
  3792 0000027A 09C0                    	or	AX,AX			; Check for subfunction 0
  3793 0000027C 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3794                                  
  3795 0000027E 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3796 00000280 EB30                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3797                                  scct_2:
  3798 00000282 48                      	dec	AX			; Now dec AX and see if it was 1
  3799 00000283 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3800                                  
  3801 00000285 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3802 00000288 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3803 0000028A EB26                    	jmp	SHORT scct_9s		; Jmp to exit
  3804                                  scct_3:
  3805 0000028C 48                      	dec	AX			; Dec AX again to see if it was 2
  3806 0000028D 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3807                                  
  3808 0000028F 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3809 00000292 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3810 00000294 EB1C                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3811                                  scct_4:
  3812 00000296 3C03                    	cmp	al,3 ; 01/01/2024	
  3813                                  	;cmp	AX,3 			; Test for 5 after it was dec twice
  3814 00000298 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3815 0000029A 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3816 0000029E EB12                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3817                                  scct_5:
  3818 000002A0 3C04                    	cmp	al,4 ; 01/01/2024
  3819                                  	;cmp	AX,4 			; Test for 6 after it was dec twice
  3820 000002A2 750E                    	jne	short scct_9s		; If not equal then not get version
  3821                                  	
  3822                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3823                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)
  3824 000002A4 BB0500                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3825                                  	
  3826                                  	;mov	dl,0
  3827                                  	;mov	DL,DOSREVNM ; 0
  3828                                  
  3829                                  	;xor	dh,dh			; assume vanilla DOS
  3830                                  	; 01/01/2024
  3831 000002A7 BA0000                  	mov	dx,0
  3832 000002AA 3836[F711]              	cmp	byte [DosHasHMA],dh ; 0
  3833                                  	;cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3834                                  	;je	short @F
  3835 000002AE 7402                    	je	short scct_6
  3836                                  	; 01/01/2024
  3837 000002B0 B610                    	mov	dh,10h
  3838                                  	;or	dh,10h
  3839                                  	;;or	DH,DOSINHMA ; 10h
  3840                                  ;@@:
  3841                                  scct_6:
  3842                                  
  3843                                  ;ifdef ROMDOS
  3844                                  ;	or	DH,DOSINROM ; 08h
  3845                                  ;endif ; ROMDOS
  3846                                  
  3847                                  scct_9s:
  3848 000002B2 5E                      	pop	SI
  3849 000002B3 58                      	pop	AX
  3850 000002B4 1F                      	pop	DS
  3851                                  scct_9f:
  3852 000002B5 CF                      	iret
  3853                                  
  3854                                  SetCtrlShortEntry:			; This allows a conditional entry
  3855                                  					; from main dispatch code
  3856 000002B6 EBAE                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3857                                  
  3858                                  ; ==========================================================================
  3859                                  ;									   
  3860                                  ; The following two routines are dispatched to directly with ints disabled
  3861                                  ; immediately after the int 21h entry.	no DIS state is set.
  3862                                  ;
  3863                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3864                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3865                                  ;
  3866                                  ; ==========================================================================
  3867                                  
  3868                                  _$SET_CURRENT_PDB:
  3869 000002B8 1E                      	push	DS
  3870                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3871 000002B9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3872 000002BE 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3873 000002C2 1F                      	pop	DS
  3874 000002C3 CF                      	iret
  3875                                  
  3876                                  ; ==========================================================================
  3877                                  ;
  3878                                  ; $get_current_PDB returns in BX the current process
  3879                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3880                                  ;
  3881                                  ; ==========================================================================
  3882                                  
  3883                                  _$GET_CURRENT_PDB:
  3884 000002C4 1E                      	push	DS
  3885                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3886 000002C5 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3887 000002CA 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3888 000002CE 1F                      	pop	DS
  3889 000002CF CF                      	iret
  3890                                  
  3891                                  ; ==========================================================================
  3892                                  ;
  3893                                  ; Sets the Printer Flag to whatever is in AL.
  3894                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3895                                  ;
  3896                                  ; ==========================================================================
  3897                                  
  3898                                  _$SET_PRINTER_FLAG:
  3899 000002D0 1E                      	push	ds
  3900                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3901 000002D1 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3902 000002D6 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3903 000002D9 1F                      	pop	ds
  3904 000002DA CF                      	iret
  3905                                  
  3906                                  ; 01/05/2019 - Retro DOS v4.0
  3907                                  ; 08/07/2018 - Retro DOS v3.0
  3908                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3909                                  
  3910                                  ; ----------------------------------------------------------------------------
  3911                                  ; BREAK   <System call entry points and dispatcher>
  3912                                  ; ----------------------------------------------------------------------------
  3913                                  
  3914                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3915                                  
  3916                                  ; ==========================================================================
  3917                                  ;
  3918                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3919                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3920                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3921                                  ;
  3922                                  ; ==========================================================================
  3923                                  
  3924                                  SYSTEM_CALL:    ; PROC NEAR
  3925                                  
  3926                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3927                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3928                                  
  3929                                  ;entry	QUIT				
  3930                                  QUIT:				; INT 20H entry point	
  3931                                  	;MOV	AH,0
  3932 000002DB 30E4                    	xor	ah,ah ; 08/07/2018
  3933 000002DD EB36                    	JMP     SHORT SAVREGS
  3934                                  
  3935                                  ; ---------------------------------------------------------------------------
  3936                                  
  3937                                  	; The system call in AH is out of the range that we know how
  3938                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3939                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3940                                  	; error as this may break some programs compatability.
  3941                                  
  3942                                  BADCALL:
  3943                                          ;MOV	AL,0
  3944 000002DF 30C0                    	xor	al,al ; 08/07/2018
  3945                                  IRETT:	; 06/05/2019
  3946                                  _IRET:
  3947 000002E1 CF                              IRET
  3948                                  
  3949                                  ; ---------------------------------------------------------------------------
  3950                                  
  3951                                  ; 01/05/2019 - Retro DOS v4.0
  3952                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3953                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3954                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3955                                  
  3956                                  	; An alternative method of entering the system is to perform a
  3957                                  	; CALL 5 in the program segment prefix with the contents of CL
  3958                                  	; indicating what system call the user would like. A subset of
  3959                                  	; the possible system calls is allowed here only the
  3960                                  	; CPM-compatible calls may get dispatched.
  3961                                  
  3962                                  		; System call entry point and dispatcher
  3963                                  CALL_ENTRY:
  3964 000002E2 1E                      	push	DS
  3965                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3966 000002E3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3967 000002E8 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  3968                                  
  3969 000002EC 58                              POP     AX                      ; IP from the long call at 5
  3970 000002ED 58                              POP     AX                      ; Segment from the long call at 5
  3971 000002EE 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  3972                                  
  3973                                  		; Re-order the stack to simulate an interrupt 21.
  3974                                  
  3975 000002F2 9C                      	PUSHF				; Start re-ordering the stack
  3976 000002F3 FA                      	CLI
  3977 000002F4 50                              PUSH    AX                      ; Save segment
  3978 000002F5 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  3979                                  	; 04/11/2022
  3980                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  3981                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  3982 000002F9 FF36[EC05]              	push	word [SAVEDS]
  3983 000002FD 1F                      	pop	ds
  3984                                  	;
  3985                                  	;cmp	cl,36
  3986 000002FE 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  3987 00000301 77DC                            JA      SHORT BADCALL
  3988 00000303 88CC                            MOV     AH,CL
  3989                                  	; 08/07/2018
  3990 00000305 EB0E                    	jmp	short SAVREGS
  3991                                  
  3992                                  ; ---------------------------------------------------------------------------
  3993                                  
  3994                                  ; 01/05/2019 - Retro DOS v4.0
  3995                                  
  3996                                  	; This is the normal INT 21 entry point. We first perform a
  3997                                  	; quick test to see if we need to perform expensive DOS-entry
  3998                                  	; functions. Certain system calls are done without interrupts
  3999                                  	; being enabled.
  4000                                  
  4001                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  4002                                  
  4003                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4004                                  ; 04/11/2022
  4005                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4006                                  
  4007                                  COMMAND:
  4008                                  	; 22/12/2022
  4009 00000307 FA                      	cli
  4010                                  
  4011                                  	; 01/05/2019 - Retro DOS v4.0
  4012                                  	; 08/07/2018 - Retro DOS v3.0
  4013                                  
  4014                                  ; 22/12/2022
  4015                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4016                                  	;IF	NOT IBM
  4017 00000308 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4018 0000030B 7203                    	JB	SHORT NOTOEM
  4019 0000030D E97F01                  	JMP	_$SET_OEM_HANDLER
  4020                                  
  4021                                  NOTOEM:
  4022                                  	;ENDIF
  4023                                  
  4024                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4025                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4026                                  
  4027                                  	; 22/12/2022
  4028                                  	;cli	; 08/07/2018
  4029                                  
  4030                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4031                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4032                                  	; 04/11/2022
  4033 00000310 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4034                                  	;JBE	SHORT SAVREGS
  4035 00000313 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4036                                  
  4037                                  	; 31/05/2019
  4038                                  
  4039                                  	; The following set of calls are issued by the server at
  4040                                  	; *arbitrary* times and, therefore, must be executed on
  4041                                  	; the user's entry stack and executed with interrupts off.
  4042                                  
  4043                                  SAVREGS:
  4044                                  	; 01/05/2019 - Retro DOS v4.0
  4045                                  	; 10/08/2018
  4046                                  	; 08/07/2018 - Retro DOS v3.0
  4047 00000315 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4048                                  	;;je	_$SET_CTRL_C_TRAPPING
  4049                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4050 00000318 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4051                                  	; 04/11/2022
  4052 0000031A 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4053 0000031C 80FC64                  	cmp	ah,64h			; Check Max case number
  4054 0000031F 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4055 00000321 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4056 00000323 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4057 00000326 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4058 00000328 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4059 0000032B 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4060 0000032D 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4061 00000330 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4062                                  
  4063                                  SaveAllRegs:
  4064                                  	; 01/05/2019 - Retro DOS v4.0
  4065                                  
  4066 00000332 06                              push	ES
  4067 00000333 1E                      	push	DS
  4068 00000334 55                      	push	BP
  4069 00000335 57                      	push	DI
  4070 00000336 56                      	push	SI
  4071 00000337 52                      	push	DX
  4072 00000338 51                      	push	CX
  4073 00000339 53                      	push	BX
  4074 0000033A 50                      	push	AX
  4075                                  
  4076 0000033B 8CD8                    	mov	AX,DS
  4077                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4078 0000033D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4079 00000342 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4080 00000345 891E[EA05]              	mov	[SAVEBX],BX
  4081                                  
  4082                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4083                                  	
  4084                                  	; 08/07/2018 - Retro DOS v3.0        
  4085                                  	;xor     ax,ax
  4086                                  	;mov     [USER_ID],ax
  4087                                  	;mov     ax,[CurrentPDB]
  4088                                  	;mov     [PROC_ID],ax
  4089                                  
  4090                                  	; 01/05/2019
  4091                                  
  4092                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4093                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4094                                  	; this!!!
  4095                                  
  4096 00000349 A1[8405]                	MOV     AX,[USER_SP]
  4097 0000034C A3[F205]                        MOV     [NSP],AX
  4098 0000034F A1[8605]                        MOV     AX,[USER_SS]
  4099 00000352 A3[F005]                        MOV     [NSS],AX
  4100                                  
  4101 00000355 31C0                    	xor	AX,AX ; 0
  4102 00000357 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4103                                  
  4104 0000035A F606[3010]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4105 0000035F 7503                    	jnz	short set_indos_flag	; if win386 present
  4106 00000361 A3[3E03]                	mov	[USER_ID],AX
  4107                                  set_indos_flag:
  4108 00000364 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4109                                  
  4110 00000368 8926[8405]                      MOV     [USER_SP],SP
  4111 0000036C 8C16[8605]                      MOV     [USER_SS],SS
  4112                                  
  4113 00000370 A1[3003]                	mov	AX,[CurrentPDB]
  4114 00000373 A3[3C03]                	mov	[PROC_ID],AX
  4115 00000376 8ED8                    	mov	DS,AX
  4116 00000378 58                      	pop	AX
  4117 00000379 50                      	push	AX
  4118                                  
  4119                                  	; save user stack in his area for later returns (possibly from EXEC)
  4120                                  
  4121 0000037A 89262E00                        MOV     [PDB.USER_STACK],SP
  4122 0000037E 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4123                                  
  4124                                  	; 18/07/2018
  4125                                  	;mov	byte [CS:FSHARING], 0
  4126                                  
  4127                                  	;MOV     BX,CS			; no holes here.
  4128                                  	;MOV     SS,BX
  4129                                  
  4130                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4131 00000382 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4132                                  					;entry	REDISP
  4133                                  REDISP:
  4134 00000387 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4135 0000038A FB                              STI                             ; stack is in our space now...
  4136                                  
  4137 0000038B 8CD3                    	mov	bx,ss
  4138 0000038D 8EDB                    	mov	ds,bx
  4139                                  
  4140 0000038F 93                      	xchg	ax,bx
  4141                                  
  4142 00000390 31C0                    	xor	ax,ax ; 0
  4143                                  
  4144                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4145                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4146                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4147                                  
  4148                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4149                                  
  4150                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4151                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4152                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4153                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4154                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4155                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4156                                  	;inc	ax
  4157                                  	;;inc	AL			; AL = 1
  4158                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4159                                  
  4160                                  	; 15/12/2022
  4161 00000392 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4162                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4163 00000395 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4164 0000039B A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4165                                  	;mov	byte [IDLEINT],1
  4166 0000039E A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4167 000003A1 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4168 000003A4 40                      	inc	ax
  4169                                  	;inc	al			; AL = 1
  4170 000003A5 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4171                                  
  4172 000003A8 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4173                                  
  4174 000003A9 88E3                    	MOV     BL,AH			
  4175 000003AB D1E3                            SHL     BX,1			; 2 bytes per call in table
  4176                                         
  4177 000003AD FC                      	CLD
  4178                                  		; Since the DOS maintains mucho state information across system
  4179                                  		; calls, we must be very careful about which stack we use.
  4180                                  		; First, all abort operations must be on the disk stack. This
  4181                                  		; is due to the fact that we may be hitting the disk (close
  4182                                  		; operations, flushing) and may need to report an INT 24.
  4183                                          
  4184 000003AE 08E4                    	OR      AH,AH
  4185 000003B0 7416                            JZ      SHORT DSKROUT		; ABORT
  4186                                  
  4187                                          ;CMP	AH,12
  4188                                          ;JBE	SHORT IOROUT		; Character I/O
  4189                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4190                                          ;JZ	SHORT IOROUT
  4191                                          ;CMP	AH,SET_CURRENT_PDB
  4192                                          ;JNZ	SHORT DSKROUT
  4193                                  
  4194                                  		; Second, PRINT and PSPRINT and the server issue
  4195                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4196                                  		; This call MUST, therefore, use the AUXSTACK.
  4197                                  
  4198                                  	; 10/08/2018
  4199 000003B2 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4200 000003B5 7439                    	je      short DISPCALL
  4201                                  	
  4202                                  	; 01/05/2019
  4203                                  	
  4204                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4205                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4206                                  
  4207 000003B7 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4208 000003BA 770C                    	ja      short DSKROUT
  4209                                  
  4210                                  IOROUT:
  4211                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4212                                  	; (ss: prefix was not needed here! ds=ss)
  4213                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4214                                  	; 15/12/2022
  4215 000003BC 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4216 000003C1 752D                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4217 000003C3 BC[A00A]                        MOV     SP,IOSTACK
  4218 000003C6 EB28                            JMP     SHORT DISPCALL
  4219                                  
  4220                                  		; We are on a system call that is classified as "the rest".
  4221                                  		; We place ourselves onto the DSKSTACK and away we go.
  4222                                  		; We know at this point:
  4223                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4224                                  		;    ErrorMode and WpErr
  4225                                  		; *  That there can be no critical sections in effect.
  4226                                  		;    We signal the server to remove all the resources.
  4227                                  
  4228                                  DSKROUT:
  4229                                  	; 01/01/2024
  4230                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4231                                  	; 08/07/2018 - Retro DOS v3.0
  4232 000003C8 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4233                                  	; 01/01/2024
  4234                                  	;mov	byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4235                                  	;MOV	BYTE [WPERR],-1		; error mode, so good place to
  4236                                  	                   		; make sure flags are reset
  4237 000003CB C706[2203]FF01          	mov	word [WPERR],1FFh ; (PCDOS 7.1 IBMDOS.COM))
  4238                                  
  4239 000003D1 C606[2003]00            	MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  4240                                  
  4241                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4242                                  	; (ss: prefix was not needed here! ds=ss)
  4243                                  
  4244                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4245                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4246                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4247                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4248                                                                          ; make sure flags are reset
  4249 000003D6 50                      	push    ax
  4250 000003D7 B482                    	mov     ah,82h			; Release all resource information
  4251 000003D9 CD2A                    	int     2Ah 		; Microsoft Networks 
  4252                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4253 000003DB 58                      	pop     ax
  4254                                  
  4255                                  		; Since we are going to be running on the DSKStack and since
  4256                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4257                                  		; generation of INT 28's.
  4258                                  
  4259                                  	; 15/12/2022
  4260                                  	;mov     byte [ss:IDLEINT],0
  4261                                  	;
  4262                                          ;mov	sp,DSKSTACK
  4263                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4264                                          ;jz	short DISPCALL
  4265                                  
  4266 000003DC C606[5803]00            	mov     byte [IDLEINT],0
  4267                                  
  4268 000003E1 BC[2009]                	MOV     SP,DSKSTACK
  4269 000003E4 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4270 000003E9 7405                    	JZ      SHORT DISPCALL
  4271                                  
  4272 000003EB 50                              PUSH    AX
  4273                                          ;invoke	DSKSTATCHK
  4274 000003EC E8F54B                          CALL	DSKSTATCHK
  4275 000003EF 58                      	POP     AX
  4276                                  DISPCALL:
  4277                                  	; 01/05/2019 - Retro DOS v4.0
  4278 000003F0 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4279                                  
  4280                                  	; 15/12/2022
  4281 000003F5 871E[EA05]              	xchg	bx,[SAVEBX]
  4282 000003F9 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4283                                  
  4284                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4285                                  	; (ss: prefix was not needed here! ds=ss)        
  4286                                  	;xchg	bx,[ss:SAVEBX]
  4287                                  	;mov	ds,[ss:SAVEDS]
  4288                                  
  4289 000003FD 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4290                                  
  4291                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4292                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4293                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4294                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4295                                  	; because this bit is used to indicate to the next int 21 call that
  4296                                  	; the previous int 21 was an exec.
  4297                                  	;
  4298                                  	; So do not add any code between the call above and the label 
  4299                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4300                                  
  4301                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4302 00000402 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4303                                  
  4304                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4305                                  ; DOSCODE:41F7h
  4306                                  
  4307                                  ;entry LEAVE
  4308                                  ;;;_LEAVE:				; Exit from a system call
  4309                                  LeaveDOS: ; 18/07/2018 
  4310                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4311 00000408 FA                      	CLI
  4312                                  
  4313                                  	; 01/05/2019
  4314                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4315 00000409 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4316 0000040E 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4317 00000413 7526                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4318                                  
  4319                                  LeaveA20On:
  4320 00000415 FE0E[2103]                      DEC     BYTE [INDOS]
  4321                                          ; 04/11/2022
  4322 00000419 8E16[8605]              	mov	ss,[USER_SS]
  4323 0000041D 8B26[8405]              	MOV     SP,[USER_SP]
  4324                                  	;MOV	SS,[USER_SS]
  4325 00000421 89E5                    	MOV     BP,SP
  4326                                  	;MOV	[BP.user_AX],AL	
  4327                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4328                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h
  4329                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4330                                  
  4331                                  	; 15/12/2022
  4332 00000423 884600                  	MOV	[BP],AL	; mov [bp+0],al
  4333                                  	
  4334                                  	;MOV	AX,[NSP]
  4335                                          ;MOV	[USER_SP],AX
  4336                                          ;MOV	AX,[NSS]
  4337                                          ;MOV	[USER_SS],AX
  4338                                  	; 01/01/2024
  4339 00000426 C406[F005]              	les	ax,[NSS] ; (PCDOS 7.1 IBMDOS.COM)
  4340 0000042A A3[8605]                	mov	[USER_SS],ax
  4341 0000042D 8C06[8405]              	mov	[USER_SP],es
  4342                                  
  4343 00000431 58                      	pop	AX
  4344 00000432 5B                      	pop	BX
  4345 00000433 59                      	pop	CX
  4346 00000434 5A                      	pop	DX
  4347 00000435 5E                      	pop	SI
  4348 00000436 5F                      	pop	DI
  4349 00000437 5D                      	pop	BP
  4350 00000438 1F                      	pop	DS
  4351 00000439 07                      	pop	ES
  4352                                  
  4353 0000043A CF                              IRET
  4354                                  
  4355                                  disa20:	   				; M068 - Start
  4356 0000043B 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4357 0000043F 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4358 00000443 75D0                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4359                                  					;    a20 off
  4360                                  					; Y: turn a20 off and dec a20off_count
  4361 00000445 FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4362                                   					; Start - M004
  4363 00000449 1E                      	push	ds			; segment of stub
  4364 0000044A BB[1311]                	mov	bx,disa20_iret		; offset in stub
  4365 0000044D 53                      	push	bx
  4366 0000044E CB                      	retf	  			; go to stub
  4367                                  					; End - M004
  4368                                  ;SYSTEM_CALL ENDP
  4369                                  
  4370                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4371                                  ; 04/11/2022
  4372                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4373                                  
  4374                                  ; ==========================================================================
  4375                                  ;
  4376                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4377                                  ; the stack prior to giving the user control
  4378                                  ;
  4379                                  ; ==========================================================================
  4380                                  
  4381                                  ; 01/05/2019 - Retro DOS v4.0
  4382                                  
  4383                                          ;procedure restore_world,NEAR
  4384                                  restore_world:
  4385                                  	;getdseg <es>		; es -> dosdata
  4386 0000044F 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4387                                  
  4388 00000454 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4389                                  
  4390 00000459 58                              POP     AX
  4391 0000045A 5B                              POP     BX
  4392 0000045B 59                              POP     CX
  4393 0000045C 5A                              POP     DX
  4394 0000045D 5E                              POP     SI
  4395 0000045E 5F                              POP     DI
  4396 0000045F 5D                              POP     BP
  4397 00000460 1F                              POP     DS
  4398                                  
  4399 00000461 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4400                                  
  4401                                  ;restore_world	ENDP
  4402                                  
  4403                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4404                                  
  4405                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4406                                  ; 04/11/2022
  4407                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4408                                  
  4409                                  ; ==========================================================================
  4410                                  ;
  4411                                  ; Save_World saves complete registers on the stack
  4412                                  ;
  4413                                  ; ==========================================================================
  4414                                  
  4415                                          ;procedure save_world,NEAR
  4416                                  save_world:
  4417                                  	;getdseg <es>		; es -> dosdata
  4418 00000466 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4419                                  
  4420 0000046B 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4421                                  
  4422                                  	; 12/05/2019
  4423                                          
  4424 00000470 1E                      	PUSH    DS
  4425 00000471 55                              PUSH    BP
  4426 00000472 57                              PUSH    DI
  4427 00000473 56                              PUSH    SI
  4428 00000474 52                              PUSH    DX
  4429 00000475 51                              PUSH    CX
  4430 00000476 53                              PUSH    BX
  4431 00000477 50                              PUSH    AX
  4432                                  
  4433 00000478 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4434                                  
  4435 0000047D 55                      	push	BP		
  4436 0000047E 89E5                    	mov	BP,SP
  4437 00000480 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4438 00000483 5D                      	pop	BP
  4439                                  	
  4440 00000484 C3                      	retn
  4441                                  
  4442                                  ;save_world	ENDP
  4443                                  
  4444                                  ; 01/05/2019
  4445                                  
  4446                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4447                                  ; 04/11/2022
  4448                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4449                                  
  4450                                  ; ==========================================================================
  4451                                  ;
  4452                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4453                                  ;
  4454                                  ; ==========================================================================
  4455                                  
  4456                                          ;procedure get_user_stack,NEAR
  4457                                  Get_User_Stack:
  4458                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4459 00000485 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4460 0000048A C536[8405]                      lds	si,[USER_SP]
  4461 0000048E C3                      	retn
  4462                                  
  4463                                  ;get_user_stack  ENDP
  4464                                  
  4465                                  ; 22/12/2022
  4466                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4467                                  ;%if 0
  4468                                  
  4469                                  ; ---------------------------------------------------------------------------
  4470                                  ;
  4471                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4472                                  ; Inputs:
  4473                                  ;	User registers, User Stack, INTS disabled
  4474                                  ;	If CALL F8, DS:DX is new handler address
  4475                                  ; Function:
  4476                                  ;	Process OEM INT 21 extensions
  4477                                  ; Outputs:
  4478                                  ;	Jumps to OEM_HANDLER if appropriate
  4479                                  ;
  4480                                  ; ---------------------------------------------------------------------------
  4481                                  
  4482                                  ;IF	NOT IBM
  4483                                  
  4484                                  _$SET_OEM_HANDLER:
  4485                                  	; 01/05/2019 - Retro DOS v4.0
  4486                                  	
  4487                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4488                                  	;(jb	short NOTOOEM)
  4489                                  
  4490 0000048F 06                      	push	es ; *
  4491                                  	;getdseg <es>			; es -> dosdata
  4492 00000490 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4493                                  
  4494 00000495 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4495                                  						; (message) request	
  4496                                  	; AH = 0F8h = SET OEM HANDLER
  4497                                  
  4498 00000497 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4499 0000049C 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4500                                  
  4501 000004A1 07                      	pop	es ; *
  4502                                  
  4503 000004A2 CF                      	IRET                            ; Quick return, Have altered no registers
  4504                                  
  4505                                  check_trueversion_request:
  4506                                  	; 18/07/2019 - Retro DOS v3.0
  4507                                  
  4508                                  	; Retro DOS v2.0 - 20/04/2018
  4509 000004A3 83F8FF                  	CMP	AX,0FFFFh
  4510                                  	; 18/07/2018
  4511 000004A6 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4512                                  
  4513                                  	; 01/05/2019
  4514 000004A8 07                      	pop	es ; *
  4515                                  
  4516 000004A9 B40E                    	mov	ah,0Eh
  4517                                  
  4518                                  	; Retro DOS v4.0 feature only!
  4519 000004AB 81FBA101                	cmp	bx,417  ; Signature to bypass
  4520                                  			; Retro DOS true version message	
  4521 000004AF 7414                    	je	short true_version_iret
  4522                                  
  4523 000004B1 56                      	push	si
  4524 000004B2 53                      	push	bx
  4525                                  
  4526 000004B3 BE[BF00]                	mov	si,RETRODOSMSG
  4527                                  wrdosmsg:
  4528                                  	;movb	ah,0Eh
  4529 000004B6 BB0700                  	mov	bx,7
  4530                                  wrdosmsg_nxt:
  4531 000004B9 2EAC                    	cs	lodsb
  4532 000004BB 3C24                    	cmp	al,'$'
  4533 000004BD 7404                    	je	short wrdosmsg_ok		
  4534 000004BF CD10                    	int	10h
  4535 000004C1 EBF6                    	jmp	short wrdosmsg_nxt
  4536                                  
  4537                                  wrdosmsg_ok:
  4538 000004C3 5B                      	pop	bx
  4539 000004C4 5E                      	pop	si
  4540                                  
  4541                                  true_version_iret:
  4542                                  	; ah = 0Eh
  4543                                  	;mov	al,40h ; Retro DOS v4.0
  4544                                  	; 
  4545 000004C5 B041                    	mov	al,41h ; Retro DOS v4.1 
  4546 000004C7 CF                      	iret
  4547                                  
  4548                                  	; If above F8 try to jump to handler
  4549                                  
  4550                                  DO_OEM_FUNC:
  4551                                  	; 01/05/2019
  4552 000004C8 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4553 000004CE 7504                    	JNE     short OEM_JMP
  4554 000004D0 07                      	pop	es ; *
  4555 000004D1 E90BFE                  	JMP     BADCALL                 ; Handler not initialized
  4556                                  OEM_JMP:
  4557 000004D4 06                      	push	es
  4558 000004D5 1F                      	pop	ds ; DOSDATA segment !
  4559 000004D6 07                      	pop	es ; *
  4560                                  
  4561                                  	; 22/12/2022
  4562 000004D7 FB                      	sti	; (enable interrupts before jumping to private handler)  
  4563                                  
  4564 000004D8 FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4565                                  
  4566                                  ;       ENDIF
  4567                                  
  4568                                  ; ---------------------------------------------------------------------------
  4569                                  
  4570                                  ;%endif
  4571                                  
  4572                                  ;============================================================================
  4573                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4574                                  ;============================================================================
  4575                                  ; 17/07/2018 - Retro DOS v3.0
  4576                                  
  4577                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4578                                  ;	NAME	IBMCODE
  4579                                  
  4580                                  ;BREAK <NullDev -- Driver for null device>
  4581                                  
  4582                                  ; ROMDOS note:
  4583                                  ;	NUL device driver used to be here, but it was removed and placed in
  4584                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4585                                  ;	header, which is also in DOSDATA.
  4586                                  
  4587                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4588                                  
  4589                                  ;----------------------------------------------------------------------------
  4590                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4591                                  ;----------------------------------------------------------------------------
  4592                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4593                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4594                                  
  4595                                  ;Public MSC001S,MSC001E
  4596                                  ;MSC001S label byte
  4597                                  	;IF	IBM
  4598                                  ; Codes returned by BIOS
  4599                                  ERRIN:
  4600 000004DC 02                      	DB	2			; NO RESPONSE
  4601 000004DD 06                      	DB	6			; SEEK FAILURE
  4602 000004DE 0C                      	DB	12			; GENERAL ERROR
  4603 000004DF 04                      	DB	4			; BAD CRC
  4604 000004E0 08                      	DB	8			; SECTOR NOT FOUND
  4605 000004E1 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4606                                  ERROUT:
  4607                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4608 000004E2 80                      	DB	80H			; NO RESPONSE
  4609 000004E3 40                      	DB	40H			; Seek failure
  4610 000004E4 02                      	DB	2			; Address Mark not found
  4611 000004E5 10                      	DB	10H			; BAD CRC
  4612 000004E6 04                      	DB	4			; SECTOR NOT FOUND
  4613 000004E7 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4614                                  
  4615                                  NUMERR	EQU	$-ERROUT
  4616                                  	;ENDIF
  4617                                  ;MSC001E label byte
  4618                                  ;----------------------------------------------------------------------------
  4619                                  
  4620                                  ;============================================================================
  4621                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4622                                  ;============================================================================
  4623                                  ; 18/07/2018 - Retro DOS v3.0
  4624                                  ; 15/05/2019 - Retro DOS v4.0
  4625                                  
  4626                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4627                                  
  4628                                  ;   AbsSetup - setup for abs disk functions
  4629                                  ;----------------------------------------------------------------------------
  4630                                  
  4631                                  AbsSetup:
  4632                                  	; 02/01/2024
  4633 000004E8 1E                      	push	ds ; *
  4634 000004E9 16                      	push	ss
  4635 000004EA 1F                      	pop	ds
  4636 000004EB FE06[2103]              	inc	byte [INDOS]
  4637                                  	;INC	byte [SS:INDOS]		; SS override
  4638 000004EF FB                      	STI
  4639 000004F0 FC                      	CLD
  4640                                  	; 02/01/2024
  4641                                  	;PUSH	DS
  4642                                  	;push	ss
  4643                                  	;pop	ds
  4644 000004F1 E80901                  	CALL	GETBP
  4645                                  	; 02/01/2024
  4646 000004F4 1F                      	pop	ds ; *
  4647 000004F5 7239                    	JC	short errdriv 		; PM. error drive ;AN000;
  4648                                  	;mov	word [es:bp+1Fh]
  4649 000004F7 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4650                                  
  4651                                  	; 02/01/2024
  4652                                  ;errdriv:
  4653                                  ;	POP	DS
  4654                                  ;	jnc	short AbsSetup2
  4655                                  ;AbsSetup_retn:
  4656                                  ;	retn
  4657                                  
  4658                                  AbsSetup2:
  4659                                  	; 15/05/2019 - Retro DOS v4.0
  4660                                  	; MSDOS 6.0
  4661                                  					; SS override
  4662 000004FD 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4663 00000504 E83504                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4664 00000507 7227                    	jc	short AbsSetup_retn
  4665 00000509 E86355                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4666                                  
  4667                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4668 0000050C 1E                      	PUSH	DS
  4669 0000050D 56                      	PUSH	SI
  4670 0000050E 50                      	PUSH	AX
  4671                                  
  4672 0000050F 16                      	push	ss
  4673 00000510 1F                      	pop	ds
  4674                                  	
  4675 00000511 BE[BE03]                	MOV	SI,OPENBUF
  4676 00000514 8804                    	MOV	[SI],AL
  4677 00000516 800441                  	ADD	BYTE [SI],"A"
  4678 00000519 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4679 0000051E B80003                  	MOV	AX,0300H
  4680 00000521 F8                      	CLC
  4681 00000522 CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4682                                  		
  4683                                  		; 04/11/2022
  4684                                  		; (INT 2Ah - AX = 0300h)
  4685                                  		; Microsoft Networks - CHECK DIRECT I/O
  4686                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4687                                  		;    only drive specifier--must include the colon)
  4688                                  		; Return: CF clear if absolute disk access allowed
  4689                                  
  4690 00000524 58                      	POP	AX
  4691 00000525 5E                      	POP	SI
  4692 00000526 1F                      	POP	DS
  4693 00000527 7307                    	jnc	short AbsSetup_retn
  4694                                  
  4695                                  	;mov	word [ss:EXTERR],32h
  4696 00000529 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4697                                  errdriv:	; 02/01/2024
  4698                                  AbsSetup_retn:
  4699 00000530 C3                      	retn
  4700                                  
  4701                                  ;---------------------------------------------------------------------------
  4702                                  ;
  4703                                  ; Procedure Name : ABSDRD
  4704                                  ;
  4705                                  ; Interrupt 25 handler. Performs absolute disk read.
  4706                                  ; Inputs:	AL - 0-based drive number
  4707                                  ;		DS:BX point to destination buffer
  4708                                  ;		CX number of logical sectors to read
  4709                                  ;		DX starting logical sector number (0-based)
  4710                                  ; Outputs:	Original flags still on stack
  4711                                  ;		Carry set
  4712                                  ;		    AH error from BIOS
  4713                                  ;		    AL same as low byte of DI from INT 24
  4714                                  ;
  4715                                  ;---------------------------------------------------------------------------
  4716                                          ;procedure   ABSDRD,FAR
  4717                                  ABSDRD:
  4718                                  	; 15/05/2019 - Retro DOS v4.0
  4719                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4720                                  	; 04/11/2022
  4721                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4722                                  	
  4723                                  	; MSDOS 6.0
  4724 00000531 FA                      	CLI
  4725                                  	
  4726                                  ;	set up ds to point to DOSDATA
  4727                                  
  4728 00000532 50                      	push	ax			; preserve AX value
  4729 00000533 8CD8                    	mov	ax,ds			; store DS value in AX
  4730                                  	;getdseg <ds>
  4731 00000535 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4732 0000053A A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4733 0000053D 58                      	pop	ax			; restore AX value
  4734                                  
  4735                                  	; M072:
  4736                                  	; We shall save es on the user stack here. We need to use ES in
  4737                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4738                                  	; time in order to restore the user stack.
  4739                                  
  4740 0000053E 06                      	push	es  ; ****		; M072
  4741                                  
  4742 0000053F 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4743 00000543 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4744                                  
  4745                                  ; 	set up ss to point to DOSDATA
  4746                                  ;
  4747                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4748                                  ; version of the getdseg macro with the SS register! An interrupt will
  4749                                  ; sneak through.
  4750                                  
  4751                                  ;ifndef ROMDOS
  4752                                  	;getdseg <ss>			; cli in entry of routine
  4753 00000547 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4754                                  ;else
  4755                                  ;	mov	ds, cs:[BioDataSeg]
  4756                                  ;	assume	ds:bdata
  4757                                  ;
  4758                                  ;	mov	ss, ds:[DosDataSg]
  4759                                  ;	assume	ss:DOSDATA
  4760                                  ;
  4761                                  ;endif ; ROMDOS
  4762                                  
  4763 0000054C BC[2009]                	MOV	SP,DSKSTACK
  4764                                  
  4765 0000054F 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4766                                  
  4767 00000553 06                      	push	es ; *** (MSDOS 6.21)
  4768 00000554 E80FFF                  	call	save_world		; save all regs
  4769                                  
  4770 00000557 06                      	PUSH	ES ; **
  4771 00000558 E88DFF                  	CALL	AbsSetup
  4772 0000055B 723D                    	JC	short ILEAVE
  4773                                  
  4774                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4775                                  	;  the secondary cache. The secondary cache does not check for media
  4776                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4777                                  	;  read, and get data from the previous disk. To get around this,
  4778                                  	;  we just won't use the secondary cache for absolute disk reads.
  4779                                  	;                                                      -mw 8/5/88
  4780                                  
  4781                                  	;EnterCrit critDisk
  4782 0000055D E8980D                  	call	ECritDisk
  4783 00000560 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4784                                  	;LeaveCrit critDisk
  4785 00000566 E8AA0D                  	call	LCritDisk
  4786                                  
  4787                                          ;invoke	DSKREAD
  4788 00000569 E83331                  	CALL	DSKREAD
  4789 0000056C 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4790                                  
  4791 0000056E 89F9                            mov     cx,di
  4792 00000570 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4793 00000575 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4794                                  
  4795                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4796                                  ;            sectors, also termed an "Extent".)
  4797                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4798                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4799                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4800                                  ;
  4801                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4802                                  ;	buffers must be "read" into the transfer memory block, so that the
  4803                                  ;       transfer memory reflects the most recent data.
  4804                                  
  4805                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4806 0000057A E86633                          call	DskRdBufScan
  4807 0000057D EB1B                    	jmp     short ILEAVE
  4808                                  
  4809                                  TLEAVE:
  4810 0000057F 7419                    	JZ	short ILEAVE
  4811                                  
  4812                                  ERR_LEAVE:				; M039
  4813                                  	; 15/07/2018 - Retro DOS v3.0
  4814                                          ;IF	IBM
  4815                                  ; Translate the error code to ancient 1.1 codes
  4816 00000581 06                              PUSH    ES ; *
  4817 00000582 0E                              PUSH    CS
  4818 00000583 07                              POP     ES
  4819 00000584 30E4                            XOR     AH,AH			; Nul error code
  4820                                  	;mov	cx,6
  4821 00000586 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4822 00000589 BF[DC04]                        MOV     DI,ERRIN		; Point to error conditions
  4823 0000058C F2AE                            REPNE   SCASB
  4824 0000058E 7504                            JNZ     SHORT LEAVECODE		; Not found
  4825                                  	;mov	ah,[ES:DI+5]
  4826 00000590 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4827                                  LEAVECODE:
  4828 00000594 07                              POP     ES ; *
  4829                                  	; 15/05/2019 - Retro DOS v4.0
  4830 00000595 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4831                                          ;ENDIF
  4832                                  
  4833 00000599 F9                              STC
  4834                                  ILEAVE:
  4835                                  	; 15/05/2019
  4836 0000059A 07                              POP     ES ; **
  4837 0000059B E8B1FE                  	call	restore_world
  4838 0000059E 07                              pop	es ; *** (MSDOS 6.21)
  4839 0000059F FA                      	CLI
  4840 000005A0 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4841 000005A4 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4842 000005A9 16                              push	ss			; M072 - Start
  4843 000005AA 07                      	pop	es			; es - dosdata
  4844 000005AB 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4845 000005B0 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4846 000005B5 07                      	pop	es  ; ****		; Note es was saved on user
  4847                                  					; stack at entry 
  4848                                  					; M072 - End
  4849 000005B6 FB                              STI
  4850 000005B7 CB                      	RETF   ; ! FAR return !
  4851                                  
  4852                                  ;ABSDRD	ENDP
  4853                                  
  4854                                  ;---------------------------------------------------------------------------
  4855                                  ;
  4856                                  ; Procedure Name : ABSDWRT
  4857                                  ;
  4858                                  ; Interrupt 26 handler. Performs absolute disk write.
  4859                                  ; Inputs:	AL - 0-based drive number
  4860                                  ;		DS:BX point to source buffer
  4861                                  ;		CX number of logical sectors to write
  4862                                  ;		DX starting logical sector number (0-based)
  4863                                  ; Outputs:	Original flags still on stack
  4864                                  ;		Carry set
  4865                                  ;		    AH error from BIOS
  4866                                  ;		    AL same as low byte of DI from INT 24
  4867                                  ;
  4868                                  ;---------------------------------------------------------------------------
  4869                                          ;procedure   ABSDWRT,FAR
  4870                                  ABSDWRT:
  4871                                  	; 15/05/2019 - Retro DOS v4.0
  4872                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4873                                  	; 04/11/2022
  4874                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4875                                  
  4876 000005B8 FA                      	CLI
  4877                                  
  4878                                  ;	set up ds to point to DOSDATA
  4879                                  
  4880 000005B9 50                      	push	ax
  4881 000005BA 8CD8                    	mov	ax,ds
  4882                                  	;getdseg <ds>
  4883 000005BC 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4884 000005C1 A3[0A0D]                	mov	[TEMPSEG],ax
  4885 000005C4 58                      	pop	ax
  4886                                  
  4887                                  	; M072:
  4888                                  	; We shall save es on the user stack here. We need to use ES in
  4889                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4890                                  	; time in order to restore the user stack.
  4891                                  
  4892 000005C5 06                      	push	es ; ****		; M072
  4893                                  
  4894 000005C6 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4895 000005CA 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4896                                  
  4897                                  	; set up ss to point to DOSDATA
  4898                                  	;
  4899                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4900                                  	; ROMDOS version of the getdseg macro with the SS register!
  4901                                  	; An interrupt will sneak through.
  4902                                  
  4903                                  ;ifndef ROMDOS
  4904                                  	;getdseg <ss>			; cli in entry of routine
  4905 000005CE 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4906                                  ;else
  4907                                  ;	mov	ds, cs:[BioDataSeg]
  4908                                  ;	assume	ds:bdata
  4909                                  ;
  4910                                  ;	mov	ss, ds:[DosDataSg]
  4911                                  ;	assume	ss:DOSDATA
  4912                                  ;
  4913                                  ;endif ; ROMDOS
  4914                                  
  4915 000005D3 BC[2009]                	MOV	SP,DSKSTACK
  4916                                  		; we are now switched to DOS's disk stack
  4917                                  
  4918 000005D6 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4919                                  
  4920 000005DA 06                      	push	es ; *** (MSDOS 6.21)
  4921                                  
  4922 000005DB E888FE                  	call	save_world	      	; save all regs
  4923                                  
  4924 000005DE 06                      	PUSH	ES ; **
  4925 000005DF E806FF                  	CALL	AbsSetup
  4926 000005E2 72B6                    	JC	short ILEAVE
  4927                                  
  4928                                  	;EnterCrit critDisk
  4929 000005E4 E8110D                  	call	ECritDisk
  4930 000005E7 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4931 000005ED E89203                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4932                                  	;LeaveCrit critDisk
  4933 000005F0 E8200D                  	call	LCritDisk
  4934                                  
  4935                                  ;M039
  4936                                  ;       DS:BX = transfer address (source data address).
  4937                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4938                                  ;	     sectors, also termed an "Extent".)
  4939                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4940                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4941                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4942                                  ;
  4943                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4944                                  ;       written. Note that all the above registers are preserved for
  4945                                  ;       DSKWRITE.
  4946                                  
  4947 000005F3 1E                              push    ds
  4948                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4949 000005F4 E8F035                  	call	DskWrtBufPurge
  4950 000005F7 1F                              pop     ds
  4951                                  ;M039
  4952                                  	;invoke	DSKWRITE
  4953 000005F8 E8C830                  	call	DSKWRITE
  4954 000005FB EB82                    	JMP	short TLEAVE
  4955                                  
  4956                                  ;ABSDWRT ENDP
  4957                                  
  4958                                  ;----------------------------------------------------------------------------
  4959                                  ;
  4960                                  ; Procedure Name : GETBP
  4961                                  ;
  4962                                  ; Inputs:
  4963                                  ;	AL = Logical unit number (A = 0)
  4964                                  ; Function:
  4965                                  ;	Find Drive Parameter Block
  4966                                  ; Outputs:
  4967                                  ;	ES:BP points to DPB
  4968                                  ;	[THISDPB] = ES:BP
  4969                                  ;	Carry set if unit number bad or unit is a NET device.
  4970                                  ;		Later case sets extended error error_I24_not_supported
  4971                                  ; No other registers alteredjjj
  4972                                  ;
  4973                                  ;----------------------------------------------------------------------------
  4974                                  
  4975                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4976                                  GETBP:
  4977                                  	; 15/05/2019 - Retro DOS v4.0
  4978                                  	; 11/07/2018 - Retro DOS v3.0
  4979 000005FD 50                      	PUSH	AX
  4980 000005FE 0401                    	ADD	AL, 1		; No increment; need carry flag
  4981 00000600 7216                    	JC	SHORT SKIPGET
  4982 00000602 E8C263                  	CALL	GETTHISDRV
  4983                                  	; MSDOS 6.0
  4984 00000605 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  4985 00000607 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  4986 00000609 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  4987 0000060C 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  4988 0000060E F9                      	STC				;DCR.			;AN000;
  4989 0000060F A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  4990 00000612 C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  4991                                  SKIPGET:
  4992 00000618 58                      	POP	AX
  4993 00000619 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  4994                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4995                                  	;jnc	short getbp_t
  4996                                  	;retn
  4997                                  getbp_t:
  4998 0000061B C42E[A205]              	LES	BP,[THISCDS]
  4999                                  	; 15/12/2022
  5000 0000061F 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  5001                                  	; 07/12/2022
  5002                                  	;TEST	WORD [ES:BP+43H],8000H
  5003                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5004 00000624 7408                    	JZ	SHORT GETBP_CDS
  5005 00000626 C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  5006 0000062C F9                      	STC
  5007                                  GETBP_RETN:
  5008 0000062D C3                      	RETN
  5009                                  
  5010                                  GETBP_CDS:
  5011                                  	;LES	BP,[ES:BP+45H]
  5012 0000062E 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5013                                  GOTDPB:
  5014                                  	; Load THISDPB from ES:BP
  5015 00000632 892E[8A05]              	MOV	[THISDPB],BP
  5016 00000636 8C06[8C05]              	MOV	[THISDPB+2],ES
  5017 0000063A C3                      	RETN
  5018                                  
  5019                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5020                                  
  5021                                  ;----------------------------------------------------------------------------
  5022                                  ;
  5023                                  ; Procedure Name : SYS_RETURN
  5024                                  ;
  5025                                  ; These are the general system call exit mechanisms. All internal system
  5026                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5027                                  ; is to set the user's flags and set his AX register for return.
  5028                                  ;
  5029                                  ;----------------------------------------------------------------------------
  5030                                  
  5031                                          ;procedure   SYS_RETURN,NEAR
  5032                                  SYS_RETURN:        
  5033                                          ;entry	SYS_RET_OK
  5034                                  SYS_RET_OK:   
  5035 0000063B E847FE                  	call    Get_User_Stack
  5036                                  		; turn off user's carry flag
  5037                                  SYS_RET_OK_clc: ; 25/06/2019 
  5038                                          ;;and	word [SI+16h],0FFFEh 
  5039                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5040                                          ; 25/06/2019
  5041 0000063E 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5042 00000642 EB10                    	JMP     SHORT DO_RET
  5043                                  
  5044                                          ;entry   SYS_RET_ERR
  5045                                  SYS_RET_ERR:        
  5046 00000644 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5047 00000646 E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5048 00000649 E81A00                  	CALL	ErrorMap
  5049                                  
  5050                                  	;entry	From_GetSet
  5051                                  From_GetSet:
  5052 0000064C E836FE                          call    Get_User_Stack
  5053                                  		 ; signal carry to user
  5054                                  	;;or	word [SI+16h],1
  5055                                  	;OR	word [SI+user_env.user_F],f_Carry
  5056                                  	; 25/06/2019
  5057 0000064F 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5058 00000653 F9                      	STC			; also, signal internal error
  5059                                  DO_RET:
  5060                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5061 00000654 8904                    	MOV	[SI],AX
  5062 00000656 C3                      	RETN
  5063                                  
  5064                                  	;entry	FCB_RET_OK
  5065                                  FCB_RET_OK:
  5066                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5067                                  NO_OP:
  5068 00000657 30C0                    	XOR	AL,AL
  5069 00000659 C3                      	retn
  5070                                  
  5071                                  	;entry	FCB_RET_ERR
  5072                                  FCB_RET_ERR:
  5073 0000065A 30E4                    	XOR	AH,AH
  5074 0000065C 36A3[2403]              	mov	[ss:EXTERR],AX
  5075 00000660 E80300                  	CALL	ErrorMap
  5076 00000663 B0FF                    	MOV	AL,-1
  5077 00000665 C3                      	retn
  5078                                  
  5079                                  	;entry	ErrorMap
  5080                                  ErrorMap:
  5081 00000666 56                      	PUSH	SI
  5082                                  				; ERR_TABLE_21 is now in DOSDATA
  5083 00000667 BE[DB0D]                	MOV	SI,ERR_TABLE_21
  5084                                  				; SS override for FAILERR and EXTERR
  5085 0000066A 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5086 00000670 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5087                                  		 ; Ooops, this is the REAL reason
  5088                                  	;mov	word [SS:EXTERR],53h
  5089 00000672 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5090                                  EXTENDED_NORMAL:
  5091 00000679 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5092 0000067C 5E                      	POP	SI
  5093 0000067D C3                      	retn
  5094                                  
  5095                                  	;EndProc SYS_RETURN
  5096                                  
  5097                                  ;---------------------------------------------------------------------------
  5098                                  ;
  5099                                  ; Procedure Name : CAL_LK
  5100                                  ;
  5101                                  ; Inputs:
  5102                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5103                                  ;		(DS NEED not be DOSDATA)
  5104                                  ;	[EXTERR] is set with error
  5105                                  ; Function:
  5106                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5107                                  ; Outputs:
  5108                                  ;	[EXTERR_CLASS] set
  5109                                  ;	[EXTERR_ACTION] set
  5110                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5111                                  ; Destroys SI, FLAGS
  5112                                  ;
  5113                                  ;---------------------------------------------------------------------------
  5114                                  
  5115                                  	;procedure CAL_LK,NEAR
  5116                                  CAL_LK:
  5117 0000067E 1E                      	PUSH	DS
  5118 0000067F 50                      	PUSH	AX
  5119 00000680 53                      	PUSH	BX
  5120                                  
  5121                                  ;M048	Context DS		; DS:SI -> Table
  5122                                  ;
  5123                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5124                                  ; is DOSDATA
  5125                                  
  5126                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5127                                  	; 15/05/2019 - Retro DOS v4.0
  5128 00000681 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5129                                  
  5130                                  	; 18/07/2018
  5131                                  	;push	ss
  5132                                  	;pop	ds
  5133                                  
  5134 00000686 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5135                                  TABLK1:
  5136 0000068A AC                      	LODSB
  5137                                  
  5138 0000068B 3CFF                    	CMP	AL,0FFH
  5139 0000068D 7409                    	JZ	short GOT_VALS	; End of table
  5140 0000068F 38D8                    	CMP	AL,BL
  5141 00000691 7405                    	JZ	short GOT_VALS	; Got entry
  5142 00000693 83C603                  	ADD	SI,3		; Next table entry
  5143                                  	; 15/08/2018
  5144 00000696 EBF2                    	JMP	short TABLK1
  5145                                  
  5146                                  GOT_VALS:
  5147 00000698 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5148                                  
  5149 00000699 80FCFF                  	CMP	AH,0FFH
  5150 0000069C 7404                    	JZ	short NO_SET_ACT
  5151 0000069E 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5152                                  NO_SET_ACT:
  5153 000006A2 3CFF                    	CMP	AL,0FFH
  5154 000006A4 7403                    	JZ	short NO_SET_CLS
  5155 000006A6 A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5156                                  NO_SET_CLS:
  5157 000006A9 AC                      	LODSB			; Get LOCUS
  5158                                  
  5159 000006AA 3CFF                    	CMP	AL,0FFH
  5160 000006AC 7403                    	JZ	short NO_SET_LOC
  5161 000006AE A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5162                                  NO_SET_LOC:
  5163 000006B1 5B                      	POP	BX
  5164 000006B2 58                      	POP	AX
  5165 000006B3 1F                      	POP	DS
  5166 000006B4 C3                      	retn
  5167                                  
  5168                                  	;EndProc CAL_LK
  5169                                  
  5170                                  ;---------------------------------------------------------------------------
  5171                                  ;
  5172                                  ; Procedure Name : ETAB_LK
  5173                                  ;
  5174                                  ; Inputs:
  5175                                  ;	AX is error code
  5176                                  ;	[USER_IN_AX] has AH value of system call involved
  5177                                  ; Function:
  5178                                  ;	Make sure error code is appropriate to this call.
  5179                                  ; Outputs:
  5180                                  ;	AX MAY be mapped error code
  5181                                  ;	[EXTERR] = Input AX
  5182                                  ; Destroys ONLY AX and FLAGS
  5183                                  ;
  5184                                  ;---------------------------------------------------------------------------
  5185                                  
  5186                                  	;procedure ETAB_LK,NEAR
  5187                                  
  5188                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5189 000006B5 1E                      	PUSH	DS
  5190 000006B6 56                      	PUSH	SI
  5191 000006B7 51                      	PUSH	CX
  5192 000006B8 53                      	PUSH	BX
  5193                                  
  5194                                  	;Context DS			; SS is DOSDATA
  5195                                  
  5196 000006B9 16                      	push	ss
  5197 000006BA 1F                      	pop	ds
  5198                                  
  5199 000006BB A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5200                                  
  5201                                  					; I21_MAP_E_TAB is now in DOSCODE
  5202 000006BE BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5203 000006C1 88C7                    	MOV	BH,AL			; Real code to BH
  5204 000006C3 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5205                                  TABLK2:
  5206                                  	; 15/05/2019 - Retro DOS v4.0
  5207 000006C7 2E                      	cs
  5208 000006C8 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5209                                  	
  5210                                  	; 18/07/2018 - Retro DOS v3.0
  5211                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5212                                  
  5213 000006C9 3CFF                    	CMP	AL,0FFH 		; End of table?
  5214 000006CB 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5215 000006CD 38D8                    	CMP	AL,BL			; Found call?
  5216 000006CF 740C                    	JZ	short GOT_CALL		; Yes
  5217 000006D1 86E0                    	XCHG	AH,AL			; Count to AL
  5218 000006D3 30E4                    	XOR	AH,AH			; Make word for add
  5219 000006D5 01C6                    	ADD	SI,AX			; Next table entry
  5220 000006D7 EBEE                    	JMP	short TABLK2
  5221                                  
  5222                                  NOT_IN_TABLE:
  5223 000006D9 88F8                    	MOV	AL,BH			; Restore original code
  5224 000006DB EB0C                    	JMP	SHORT NO_MAP
  5225                                  
  5226                                  GOT_CALL:
  5227 000006DD 88E1                    	MOV	CL,AH
  5228 000006DF 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5229                                  CHECK_CODE:
  5230                                  	; 15/05/2019 - Retro DOS v4.0
  5231 000006E1 2E                      	cs
  5232 000006E2 AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5233                                  
  5234                                  	; 18/07/2018
  5235                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5236                                  
  5237 000006E3 38F8                    	CMP	AL,BH			; Code OK?
  5238 000006E5 7402                    	JZ	short NO_MAP		; Yes
  5239 000006E7 E2F8                    	LOOP	CHECK_CODE
  5240                                  NO_MAP:
  5241 000006E9 30E4                    	XOR	AH,AH			; AX is now valid code
  5242 000006EB 5B                      	POP	BX
  5243 000006EC 59                      	POP	CX
  5244 000006ED 5E                      	POP	SI
  5245 000006EE 1F                      	POP	DS
  5246 000006EF C3                      	retn
  5247                                  
  5248                                  	;EndProc ETAB_LK
  5249                                  
  5250                                  ; 18/07/2018 - Retro DOS v3.0
  5251                                  ;---------------------------------------------------------------------------
  5252                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5253                                  
  5254                                  ;IF installed ; (*)
  5255                                  
  5256                                  ;---------------------------------------------------------------------------
  5257                                  ;
  5258                                  ; Procedure Name : SetBad
  5259                                  ;
  5260                                  ; SetBad sets up info for bad functions
  5261                                  ;
  5262                                  ;---------------------------------------------------------------------------
  5263                                  
  5264                                  SetBad:
  5265                                  	;mov	ax,1
  5266 000006F0 B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5267                                  
  5268                                  	; MSDOS 3.3
  5269                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5270                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5271                                  
  5272                                  ;	set up ds to point to DOSDATA
  5273                                  
  5274                                  	; 15/05/2019 - Retro DOS v4.0
  5275                                  	; MSDOS 6.0
  5276 000006F3 1E                      	push	ds
  5277                                  
  5278                                  	;getdseg <ds>
  5279 000006F4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5280                                  
  5281 000006F9 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5282                                  
  5283 000006FE 1F                      	pop	ds	  	;hkn; restore ds
  5284                                  
  5285 000006FF F9                      	STC
  5286 00000700 C3                      	retn
  5287                                  
  5288                                  ;--------------------------------------------------------------------------
  5289                                  ;
  5290                                  ; Procedure Name : BadCall
  5291                                  ;
  5292                                  ; BadCall is the initial routine for bad function calls
  5293                                  ;
  5294                                  ;--------------------------------------------------------------------------
  5295                                  
  5296                                  BadCall:
  5297 00000701 E8ECFF                  	call	SetBad
  5298 00000704 CB                      	retf
  5299                                  
  5300                                  ;--------------------------------------------------------------------------
  5301                                  ;
  5302                                  ; OKCall always sets carry to off.
  5303                                  ;
  5304                                  ;-----------------------------------------------------------------------
  5305                                  
  5306                                  OKCall:
  5307 00000705 F8                      	CLC
  5308 00000706 CB                      	retf
  5309                                  
  5310                                  ;---------------------------------------------------------------------------
  5311                                  ;
  5312                                  ; Procedure Name : INT2F
  5313                                  ;
  5314                                  ; INT 2F handler works as follows:
  5315                                  ;   PUSH    AX
  5316                                  ;   MOV     AX,multiplex:function
  5317                                  ;   INT     2F
  5318                                  ;   POP     ...
  5319                                  ; The handler itself needs to make the AX available for the various routines.
  5320                                  ;
  5321                                  ;----------------------------------------------------------------------------
  5322                                  
  5323                                  ; 15/05/2019 - Retro DOS v4.0
  5324                                  
  5325                                  ;KERNEL_SEGMENT equ 70h
  5326                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5327                                  DOSBIODATASEG equ 70h
  5328                                  
  5329                                  ; retrodos4.s - offset in BIOSDATA
  5330                                  bios_i2f equ 5
  5331                                  
  5332                                  ;PUBLIC	Int2F
  5333                                  ;INT2F	PROC	FAR
  5334                                  
  5335                                  ; 15/05/2019
  5336                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5337                                  
  5338                                  ; 04/11/2022
  5339                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5340                                  
  5341                                  	; 05/01/2024	
  5342                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5343                                  	; 18/07/2018 - Retro DOS v3.0
  5344                                  INT2F:
  5345                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5346                                  INT2FNT:
  5347                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5348 00000707 FB                      	STI
  5349                                  	;cmp	ah,11h
  5350 00000708 80FC11                  	CMP	AH,MultNET
  5351 0000070B 750A                    	JNZ	short INT2FSHR
  5352                                  TestInstall:
  5353 0000070D 08C0                    	OR	AL,AL
  5354 0000070F 7403                    	JZ	short Leave2F
  5355                                  BadFunc:
  5356 00000711 E8DCFF                  	CALL	SetBad
  5357                                  
  5358                                  	;entry	Leave2F
  5359                                  Leave2F:
  5360 00000714 CA0200                  	RETF	2			; long return + clear flags off stack
  5361                                  
  5362                                  INT2FSHR:
  5363                                  	;cmp	ah,10h
  5364 00000717 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5365 0000071A 74F1                    	JZ	short TestInstall	; yes, check for installation
  5366                                  INT2FNLS:
  5367                                  	;cmp	ah,14h
  5368 0000071C 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5369 0000071F 74EC                    	JZ	short TestInstall	; yes check for installation
  5370                                  INT2FDOS:
  5371                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5372                                  
  5373                                  	; 18/07/2018
  5374                                  	; MSDOS 3.3
  5375                                  	;;cmp	ah,12h	
  5376                                  	;CMP	AH,MultDOS
  5377                                  	;jz	short DispatchDOS
  5378                                  	;iret
  5379                                  
  5380                                  	; 15/05/2019
  5381                                  	; MSDOS 6.0
  5382                                  	;cmp	ah,12h	; 07/12/2022
  5383 00000721 80FC12                  	CMP	AH,MultDOS
  5384 00000724 7503                    	JNZ	short check_win		;check if win386 broadcast
  5385 00000726 E9F201                  	jmp	DispatchDOS
  5386                                  
  5387                                  	; .... win386 .... 
  5388                                  
  5389                                  check_win:
  5390                                  	;cmp	ah,16h
  5391 00000729 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5392 0000072C 7408                    	je	short Win386_Msg
  5393                                  
  5394                                  	; M044
  5395                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5396                                  	; of Windows. If so, do special action of going and saving last para
  5397                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5398                                  	; bug
  5399                                  
  5400 0000072E 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5401                                  	;jne	short next_i2f		; no, chain on
  5402                                  	; 15/12/2022
  5403                                  	;jmp	winold_swap		; yes, do desired action
  5404 00000731 7442                    	je	short winold_swap
  5405 00000733 E90501                  	jmp	next_i2f
  5406                                  
  5407                                  	; 15/12/2022
  5408                                  ;next_i2f:
  5409                                  ;	;;;jmp	bios_i2f
  5410                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5411                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5412                                  ;	; 04/11/2022
  5413                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5414                                  
  5415                                  ;	IRET				; This assume that we are at the head
  5416                                  					; of the list
  5417                                  ;INT2F	ENDP
  5418                                  
  5419                                  ; 15/05/2019 - Retro DOS v4.0
  5420                                  
  5421                                  ; We have received a message from Win386. There are three possible
  5422                                  ; messages we could get from Win386:
  5423                                  ;
  5424                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5425                                  ;		  to the Win386 startup info structure.
  5426                                  ; Exit		- for this, we clear the IsWin386 flag.
  5427                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5428                                  ;		  has already been handled. this is indicated by setting
  5429                                  ;		  CX to a non-zero value.
  5430                                  
  5431                                  Win386_Msg:
  5432 00000736 1E                      	push	ds
  5433                                  
  5434                                  	;getdseg <DS>			; ds is DOSDATA
  5435 00000737 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5436                                  
  5437                                  	; For WIN386 2.xx instance data
  5438                                  
  5439 0000073C 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5440 0000073E 7503                    	jne	short Win386_Msg_exit
  5441 00000740 E92A01                  	jmp	OldWin386Init		; yes, return instance data
  5442                                  Win386_Msg_exit:
  5443 00000743 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5444 00000745 7503                    	jne	short Win386_Msg_devcall
  5445 00000747 E92C01                  	jmp	Win386_Leaving
  5446                                  Win386_Msg_devcall:
  5447 0000074A 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5448 0000074C 7503                    	jne	short Win386_Msg_init
  5449 0000074E E96001                  	jmp	Win386_Query
  5450                                  Win386_Msg_init:
  5451 00000751 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5452 00000753 7403                    	je	short Win386_Starting
  5453 00000755 E9E200                  	jmp	win_nexti2f		; no, return
  5454                                  Win386_Starting:
  5455                                  	; 17/12/2022
  5456 00000758 F6C201                  	test	dl,1
  5457                                  	;test	dx,1			; is this really win386?
  5458 0000075B 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5459 0000075D E9DA00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5460                                  Win386_vchk:
  5461                                  	; M018 -- start of block changes
  5462                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5463                                  	; than 030Ah, we skip the VxD presence check
  5464                                  
  5465                                  ;M067 -- Begin changes
  5466                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5467                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5468                                  ;So, we null out the VxD ptr before the check.
  5469                                  
  5470                                  	;mov	word [Win386_Info+6],0
  5471 00000760 C706[E80F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5472                                  	;mov	word [Win386_Info+8],0
  5473 00000766 C706[EA0F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5474                                  
  5475                                  ;M067 -- End changes
  5476                                  
  5477                                  ;ifdef JAPAN
  5478                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5479                                  ;else
  5480 0000076C 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5481                                  ;endif
  5482                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5483 00000770 724E                    	jb	short Win386_vxd
  5484 00000772 E9DD00                  	jmp	noVxD31
  5485                                  
  5486                                  	; 15/12/2022
  5487                                  winold_swap:
  5488 00000775 1E                      	push	ds
  5489 00000776 06                      	push	es
  5490 00000777 56                      	push	si
  5491 00000778 57                      	push	di
  5492 00000779 51                      	push	cx
  5493                                  
  5494                                  	;getdseg <ds>			;ds = DOSDATA
  5495 0000077A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5496                                  
  5497 0000077F 3C01                    	cmp	al,1			;swap Windows out call
  5498 00000781 751B                    	jne	short swapin		;no, check if Swap in call
  5499 00000783 E88801                  	call	getwinlast
  5500 00000786 1E                      	push	ds
  5501 00000787 07                      	pop	es
  5502 00000788 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5503 0000078A 31F6                    	xor	si,si
  5504 0000078C BF[0600]                	mov	di,WinoldPatch1
  5505 0000078F B90800                  	mov	cx,8
  5506 00000792 FC                      	cld
  5507 00000793 51                      	push	cx
  5508 00000794 F3A4                    	rep	movsb			;save first 8 bytes
  5509 00000796 59                      	pop	cx
  5510 00000797 BF[CD0D]                	mov	di,WinoldPatch2
  5511 0000079A F3A4                    	rep	movsb			;save next 8 bytes
  5512 0000079C EB1B                    	jmp	short winold_done
  5513                                  swapin:
  5514 0000079E 3C02                    	cmp	al,2			;swap Windows in call?
  5515 000007A0 7517                    	jne	short winold_done	;no, something else, pass it on
  5516 000007A2 E86901                  	call	getwinlast
  5517 000007A5 8EC6                    	mov	es,si
  5518 000007A7 31FF                    	xor	di,di
  5519 000007A9 BE[0600]                	mov	si,WinoldPatch1
  5520 000007AC B90800                  	mov	cx,8
  5521 000007AF FC                      	cld
  5522 000007B0 51                      	push	cx
  5523 000007B1 F3A4                    	rep	movsb			;restore first 8 bytes
  5524 000007B3 59                      	pop	cx
  5525 000007B4 BE[CD0D]                	mov	si,WinoldPatch2
  5526 000007B7 F3A4                    	rep	movsb			;restore next 8 bytes
  5527                                  winold_done:
  5528 000007B9 59                      	pop	cx
  5529 000007BA 5F                      	pop	di
  5530 000007BB 5E                      	pop	si
  5531 000007BC 07                      	pop	es
  5532 000007BD 1F                      	pop	ds
  5533 000007BE EB7B                    	jmp	short next_i2f		;chain on
  5534                                  	; 15/12/2022
  5535                                  	;jmp	next_i2f	
  5536                                  
  5537                                  Win386_vxd:
  5538 000007C0 50                      	push	ax
  5539 000007C1 53                      	push	bx
  5540 000007C2 51                      	push	cx
  5541 000007C3 52                      	push	dx
  5542 000007C4 56                      	push	si
  5543 000007C5 57                      	push	di			; save regs !!dont change order!!
  5544                                  
  5545 000007C6 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5546 000007CA 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5547 000007CD 741F                    	je	short Vxd31		; N: continue
  5548                                  					; Y: save arena associated with 
  5549                                  					;    umb_head
  5550                                  
  5551 000007CF C606[DA0D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5552                                  					; umb_arena
  5553 000007D4 1E                      	push	ds
  5554 000007D5 06                      	push	es
  5555                                  
  5556                                  	;mov	ax,ds
  5557                                  	;mov	es,ax			; es - > dosdata
  5558                                  	; 05/01/2024
  5559 000007D6 1E                      	push	ds
  5560 000007D7 07                      	pop	es
  5561                                  
  5562 000007D8 8EDB                    	mov	ds,bx
  5563 000007DA 31F6                    	xor	si,si			; ds:si -> umb_head
  5564                                  
  5565 000007DC FC                      	cld
  5566                                  
  5567 000007DD BF[FA11]                	mov	di,UmbSave1
  5568 000007E0 B90B00                  	mov	cx,11
  5569 000007E3 F3A4                    	rep	movsb
  5570                                  
  5571 000007E5 BF[D50D]                	mov	di,UmbSave2
  5572                                  	;mov	cx,5
  5573                                  	; 18/12/2022
  5574 000007E8 B105                    	mov	cl,5
  5575 000007EA F3A4                    	rep	movsb	
  5576                                  
  5577 000007EC 07                      	pop	es
  5578 000007ED 1F                      	pop	ds			; M062 - End
  5579                                  
  5580                                  Vxd31:
  5581                                  	;test	byte [DOS_FLAG],2
  5582 000007EE F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5583 000007F3 7408                    	jz	short Dont_Supress		; M066
  5584 000007F5 5F                      	pop	di				; M066
  5585 000007F6 5E                      	pop	si				; M066
  5586 000007F7 5A                      	pop	dx				; M066
  5587 000007F8 59                      	pop	cx				; M066
  5588 000007F9 5B                      	pop	bx				; M066
  5589 000007FA 58                      	pop	ax				; M066
  5590 000007FB EB55                    	jmp	short noVxD31			; M066
  5591                                  
  5592                                  	; We check here if the VxD is available in the root of the boot drive. 
  5593                                  	; We do an extended open to suppress any error messages
  5594                                  	
  5595                                  Dont_Supress:
  5596 000007FD A0[6900]                	mov	al,[BOOTDRIVE]
  5597 00000800 0440                    	add	al,'A' - 1		; get drive letter
  5598 00000802 A2[3110]                	mov	[VxDpath],al		; path is root of bootdrive
  5599                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5600                                  	;mov	al,0			; no extended attributes
  5601                                  	; 18/12/2022
  5602 00000805 B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5603 00000808 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5604                                  					; no inherit, suppress crit err
  5605 0000080B B90700                  	mov	cx,7			; hidden,system,read-only attr
  5606 0000080E BA0100                  	mov	dx,1			; fail if file does not exist
  5607 00000811 BE[3110]                	mov	si,VxDpath	
  5608                                  					; path of VxD file
  5609 00000814 BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5610                                  
  5611 00000817 CD21                    	int	21h			; do extended open
  5612                                  
  5613 00000819 5F                      	pop	di
  5614 0000081A 5E                      	pop	si
  5615 0000081B 5A                      	pop	dx
  5616 0000081C 59                      	pop	cx
  5617                                  
  5618 0000081D 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5619                                  
  5620                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5621                                  	; to indicate error to Windows after displaying message to user that 
  5622                                  	; VxD needs to be present to run Windows in enhanced mode.
  5623                                  
  5624 0000081F 52                      	push	dx
  5625 00000820 1E                      	push	ds
  5626 00000821 56                      	push	si
  5627 00000822 BE[B709]                	mov	si,NoVxDErrMsg
  5628 00000825 0E                      	push	cs
  5629 00000826 1F                      	pop	ds
  5630 00000827 B96300                  	mov	cx,VxDMesLen ; 99	;
  5631 0000082A B402                    	mov	ah,2			; write char to console
  5632 0000082C FC                      	cld
  5633                                  vxdlp:
  5634 0000082D AC                      	lodsb
  5635 0000082E 86D0                    	xchg	dl,al			; get char in dl
  5636 00000830 CD21                    	int	21h
  5637 00000832 E2F9                    	loop	vxdlp
  5638                                  
  5639 00000834 5E                      	pop	si
  5640 00000835 1F                      	pop	ds
  5641 00000836 5A                      	pop	dx
  5642 00000837 5B                      	pop	bx
  5643 00000838 58                      	pop	ax			;all registers restored
  5644 00000839 41                      	inc	cx			;cx != 0 to indicate error
  5645                                  	; 15/12/22022
  5646                                  	;jmp	win_nexti2f		;chain on
  5647                                  	;jmp	short win_nexti2f
  5648                                  
  5649                                  	; 15/12/2022
  5650                                  win_nexti2f:
  5651 0000083A 1F                      	pop	ds
  5652                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5653                                  	; 15/12/2022
  5654                                  next_i2f:
  5655                                  	;;;jmp	bios_i2f
  5656                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5657                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5658                                  	; 04/11/2022
  5659 0000083B EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5660                                  
  5661                                  VxDthere:
  5662 00000840 89C3                    	mov	bx,ax
  5663 00000842 B43E                    	mov	ah,CLOSE ; 3Eh
  5664 00000844 CD21                    	int	21h			;close the file
  5665                                  
  5666                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5667                                  
  5668                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5669                                  	;mov	bx,Win386_Info
  5670                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5671                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5672                                  	; 15/12/2022
  5673 00000846 C706[E80F][3110]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5674 0000084C 8C1E[EA0F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5675                                  
  5676 00000850 5B                      	pop	bx
  5677 00000851 58                      	pop	ax
  5678                                  noVxD31:
  5679                                  	; M018; End of block changes
  5680                                  
  5681 00000852 800E[3010]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5682 00000857 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5683                                  
  5684                                  	; M002;
  5685                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5686                                  
  5687 0000085C 52                      	push	dx			; M002
  5688 0000085D 89DA                    	mov	dx,bx			; M002
  5689                                  					; point ES:BX to Win386_Info ; M002
  5690 0000085F BB[E20F]                	mov	bx,Win386_Info 
  5691 00000862 895702                  	mov	[bx+2],dx		; M002
  5692 00000865 8C4704                  	mov	[bx+4],es		; M002
  5693 00000868 5A                      	pop	dx			; M002
  5694 00000869 1E                      	push	ds			; M002
  5695 0000086A 07                      	pop	es			; M002
  5696                                  	;jmp	win_nexti2f		; M002
  5697                                  	; 15/12/2022
  5698 0000086B EBCD                    	jmp	short win_nexti2f
  5699                                  
  5700                                  	; 15/12/2022
  5701                                  	; Code to return Win386 2.xx instance table
  5702                                  OldWin386Init:
  5703 0000086D 58                      	pop	ax			; discard ds pushed on stack
  5704 0000086E BE[CD11]                	mov	si,OldInstanceJunk 
  5705                                  					; ds:si = instance table
  5706 00000871 B84852                  	mov	ax,5248h ; 'HR'		; indicate instance data present
  5707                                  	;jmp	next_i2f
  5708                                  	; 15/12/2022
  5709 00000874 EBC5                    	jmp	short next_i2f
  5710                                  
  5711                                  Win386_Leaving:
  5712                                  	; 15/12/2022
  5713 00000876 F6C201                  	test 	dl,1
  5714                                  	;test	dx,1			; is this really win386?
  5715                                  	;jz	short Win386_Leaving_c
  5716                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5717                                  	; 15/12/2022
  5718 00000879 75BF                    	jnz	short win_nexti2f	
  5719                                  
  5720                                  Win386_Leaving_c:
  5721                                  					; M062 - Start
  5722 0000087B 803E[DA0D]01            	cmp	byte [UmbSaveFlag],1	; Q: was umb_arena saved at win start
  5723                                  					;    up.
  5724 00000880 7523                    	jne	short noumb		; N: not saved 
  5725 00000882 C606[DA0D]00            	mov	byte [UmbSaveFlag],0	; Y: clear UmbSaveFlag and restore 
  5726                                  					;    previously saved umb_head
  5727                                  	; 05/01/2024
  5728                                  	;push	ax ; (not necessary)
  5729 00000887 06                      	push	es
  5730 00000888 51                      	push	cx
  5731 00000889 56                      	push	si
  5732 0000088A 57                      	push	di
  5733                                  
  5734                                  	;mov	ax,[UMB_HEAD]
  5735                                  	;mov	es,ax
  5736                                  	; 05/01/2024
  5737 0000088B 8E06[8C00]              	mov	es,[UMB_HEAD]
  5738 0000088F 31FF                    	xor	di,di			; es:di -> umb_head
  5739                                  
  5740 00000891 FC                      	cld
  5741                                  
  5742 00000892 BE[FA11]                	mov	si,UmbSave1
  5743 00000895 B90B00                  	mov	cx,11
  5744 00000898 F3A4                    	rep	movsb
  5745 0000089A BE[D50D]                	mov	si,UmbSave2
  5746                                  	;mov	cx,5
  5747                                  	; 18/12/2022
  5748 0000089D B105                    	mov	cl,5
  5749 0000089F F3A4                    	rep	movsb
  5750                                  
  5751 000008A1 5F                      	pop	di
  5752 000008A2 5E                      	pop	si
  5753 000008A3 59                      	pop	cx
  5754 000008A4 07                      	pop	es
  5755                                  	; 05/01/2024
  5756                                  	;pop	ax
  5757                                  noumb:					; M062 - End
  5758 000008A5 8026[3010]00            	and	byte [IsWin386],0	; Win386 is gone
  5759 000008AA 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5760 000008AF EB89                    	jmp	short win_nexti2f
  5761                                  
  5762                                  ;	; 15/12/2022
  5763                                  ;	; Code to return Win386 2.xx instance table
  5764                                  ;OldWin386Init:
  5765                                  ;	pop	ax			; discard ds pushed on stack
  5766                                  ;	mov	si,OldInstanceJunk 
  5767                                  ;					; ds:si = instance table
  5768                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5769                                  ;	;jmp	next_i2f
  5770                                  ;	; 15/12/2022
  5771                                  ;	jmp	short _next_i2f
  5772                                  
  5773                                  Win386_Query:
  5774 000008B1 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5775 000008B4 7584                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5776 000008B6 09C9                    	or	cx,cx			; is it an instance query?
  5777 000008B8 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5778 000008BA 41                      	inc	cx			; indicate that data is instanced
  5779                                  ;
  5780                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5781                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5782                                  ; M001;  
  5783                                  ; M001; OFFSETS STRUC
  5784                                  ; M001; 	Major_version	db	?
  5785                                  ; M001; 	Minor_version	db	?
  5786                                  ; M001; 	SaveDS		dw	?
  5787                                  ; M001; 	SaveBX		dw	?
  5788                                  ; M001; 	Indos		dw	?
  5789                                  ; M001; 	User_id		dw	?
  5790                                  ; M001; 	CritPatch	dw	?
  5791                                  ; M001; OFFSETS	ENDS
  5792                                  ; M001; 
  5793                                  ; M001; User_Id is the only variable really important for proper functioning  
  5794                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5795                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5796                                  ; M001; pass this table because Win386 depends on this table to get the 
  5797                                  ; M001; User_Id offset.
  5798                                  ; M001; 
  5799 000008BB BB[2210]                	mov	bx,Win386_DOSVars	; M001 
  5800 000008BE 1E                      	push	ds			; M001
  5801 000008BF 07                      	pop	es			; es:bx points at offset table ; M001
  5802 000008C0 EB40                    	jmp	short PopIret		; M001
  5803                                  
  5804                                  ; 15/12/2022
  5805                                  ;	; Code to return Win386 2.xx instance table
  5806                                  ;OldWin386Init:
  5807                                  ;	pop	ax			; discard ds pushed on stack
  5808                                  ;	mov	si,OldInstanceJunk 
  5809                                  ;					; ds:si = instance table
  5810                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5811                                  ;	;jmp	next_i2f
  5812                                  ;	; 15/12/2022
  5813                                  ;	jmp	short _next_i2f
  5814                                  
  5815                                  dosmgr_func:
  5816 000008C2 49                      	dec	cx
  5817 000008C3 7435                    	jz	short win386_patch	; call to patch DOS
  5818 000008C5 49                      	dec	cx
  5819 000008C6 743A                    	jz	short PopIret		; remove DOS patches, ignore
  5820 000008C8 49                      	dec	cx
  5821 000008C9 7439                    	jz	short win386_size	; get size of DOS data structures
  5822 000008CB 49                      	dec	cx
  5823 000008CC 7428                    	jz	short win386_inst	; instance more data
  5824                                  	;dec	cx
  5825                                  	;jnz	short PopIret		; no functions above this
  5826                                  	; 05/01/2024 (PCDOS 7.1 IBMDOS.COM DOSCODE:4771h)
  5827 000008CE E232                    	loop	PopIret
  5828                                  
  5829                                  	; Get DOS device driver size -- es:di points at device driver header
  5830                                  	; In DOS 4.x, the para before the device header contains an arena 
  5831                                  	; header for the driver.
  5832                                  
  5833 000008D0 8CC0                    	mov	ax,es			; ax = device header segment
  5834                                  
  5835                                  	; We check to see if we have a memory arena for this device driver. 
  5836                                  	; The way to do this would be to look at the previous para to see if
  5837                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5838                                  	; in the arena is the same as the device header segment. These two 
  5839                                  	; checks together should take care of all cases
  5840                                  
  5841 000008D2 48                      	dec	ax			; get arena header
  5842 000008D3 06                      	push	es
  5843 000008D4 8EC0                    	mov	es,ax			; arena header for device driver
  5844                                  
  5845 000008D6 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5846 000008DA 7517                    	jnz	short cantsize		; no, cant size this driver
  5847 000008DC 40                      	inc	ax			; get back device header segment
  5848 000008DD 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5849 000008E1 7510                    	jnz	short cantsize		; no, not a proper arena
  5850                                  
  5851 000008E3 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5852 000008E7 07                      	pop	es
  5853                                  
  5854                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5855                                  	; Speed is not critical and so we choose the shortest method 
  5856                                  	; -- use "mul"
  5857                                  
  5858 000008E8 BB1000                  	mov	bx,16
  5859 000008EB F7E3                    	mul	bx
  5860 000008ED 89C1                    	mov	cx,ax
  5861 000008EF 89D3                    	mov	bx,dx
  5862 000008F1 EB09                    	jmp	short win386_done	; return with device driver size
  5863                                  cantsize:
  5864 000008F3 07                      	pop	es
  5865 000008F4 31C0                    	xor	ax,ax
  5866                                  win386_inst:	; 05/01/2024
  5867 000008F6 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5868 000008F8 EB08                    	jmp	short PopIret		; return
  5869                                  
  5870                                  win386_patch:
  5871                                  	; dx contains bits marking the patches to be applied. We return 
  5872                                  	; the field with all bits set to indicate that all patches have been
  5873                                  	; done
  5874                                  
  5875 000008FA 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5876                                   	;jmp	short win386_done	; done, return
  5877                                  	; 15/12/2022
  5878                                  	; 15/12/2022
  5879                                  win386_done:
  5880 000008FC B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5881 000008FF BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5882                                  PopIret:
  5883 00000902 1F                      	pop	ds
  5884 00000903 CF                      	iret	
  5885                                  
  5886                                  win386_size:
  5887                                  	; Return the size of DOS data structures -- currently only CDS size
  5888                                  
  5889                                  	; 17/12/2022
  5890 00000904 F6C201                  	test	dl,1
  5891                                  	;test	dx,1			; check for CDS size bit
  5892 00000907 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5893                                  
  5894 00000909 B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5895 0000090C EBEE                    	jmp	short win386_done	; return with the size
  5896                                  
  5897                                  ; 05/01/2024
  5898                                  %if 0
  5899                                  win386_inst:
  5900                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device
  5901                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5902                                  	; this by returning a status of not previously instanced. The basic
  5903                                  	; structure of these things have not changed and so the current
  5904                                  	; DOSMGR code should be able to work it out
  5905                                  
  5906                                  	xor	dx,dx			; make sure dx has a not done value
  5907                                  	jmp	short PopIret		; skip done indication
  5908                                  %endif
  5909                                  
  5910                                  	; 15/12/2022
  5911                                  ;win386_done:
  5912                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5913                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5914                                  ;PopIret:
  5915                                  ;	pop	ds
  5916                                  ;	iret				; return back up the chain
  5917                                  
  5918                                  	; 15/12/2022
  5919                                  ;win_nexti2f:
  5920                                  	;pop	ds
  5921                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5922                                  
  5923                                  ;End WIN386 support
  5924                                  
  5925                                  ; 15/05/2019
  5926                                  
  5927                                  ;M044; Start of changes
  5928                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5929                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5930                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5931                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5932                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5933                                  ; in leading to a crash. Winoldap issues callouts when it swaps Windows out
  5934                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5935                                  ; last para of the Windows memory block and then restore this para on the
  5936                                  ; Windows swapin callout. 
  5937                                  
  5938                                  getwinlast:
  5939                                  	; 07/12/2022
  5940 0000090E 8B36[3003]              	mov	si,[CurrentPDB]
  5941 00000912 4E                      	dec	si
  5942 00000913 8EC6                    	mov	es,si
  5943 00000915 2603360300              	add	si,[es:3]
  5944 0000091A C3                      	retn
  5945                                  
  5946                                  ; 15/12/2022
  5947                                  %if 0
  5948                                  winold_swap:
  5949                                  	push	ds
  5950                                  	push	es
  5951                                  	push	si
  5952                                  	push	di
  5953                                  	push	cx
  5954                                  
  5955                                  	;getdseg <ds>			;ds = DOSDATA
  5956                                  	mov	ds,[cs:DosDSeg]
  5957                                  
  5958                                  	cmp	al,1			;swap Windows out call
  5959                                  	jne	short swapin		;no, check if Swap in call
  5960                                  	call	getwinlast
  5961                                  	push	ds
  5962                                  	pop	es
  5963                                  	mov	ds,si			;ds = memory arena of Windows
  5964                                  	xor	si,si
  5965                                  	mov	di,WinoldPatch1
  5966                                  	mov	cx,8
  5967                                  	cld
  5968                                  	push	cx
  5969                                  	rep	movsb			;save first 8 bytes
  5970                                  	pop	cx
  5971                                  	mov	di,WinoldPatch2
  5972                                  	rep	movsb			;save next 8 bytes
  5973                                  	jmp	short winold_done
  5974                                  swapin:
  5975                                  	cmp	al,2			;swap Windows in call?
  5976                                  	jne	short winold_done	;no, something else, pass it on
  5977                                  	call	getwinlast
  5978                                  	mov	es,si
  5979                                  	xor	di,di
  5980                                  	mov	si,WinoldPatch1
  5981                                  	mov	cx,8
  5982                                  	cld
  5983                                  	push	cx
  5984                                  	rep	movsb			;restore first 8 bytes
  5985                                  	pop	cx
  5986                                  	mov	si,WinoldPatch2
  5987                                  	rep	movsb			;restore next 8 bytes
  5988                                  winold_done:
  5989                                  	pop	cx
  5990                                  	pop	di
  5991                                  	pop	si
  5992                                  	pop	es
  5993                                  	pop	ds
  5994                                  	jmp	next_i2f		;chain on
  5995                                  
  5996                                  %endif
  5997                                  
  5998                                  ;M044; End of changes
  5999                                  
  6000                                  ; 15/05/2019
  6001                                  
  6002                                  DispatchDOS:
  6003 0000091B 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  6004 00000920 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  6005 00000925 50                      	PUSH	AX			; push index
  6006 00000926 55                      	PUSH	BP
  6007 00000927 89E5                    	MOV	BP,SP
  6008                                  		; stack looks like:
  6009                                  		;   0	BP
  6010                                  		;   2	DISPATCH
  6011                                  		;   4	TABLE
  6012                                  		;   6	RETURN
  6013                                  		;   8	LONG-RETURN
  6014                                  		;   C	FLAGS
  6015                                  		;   E	AX
  6016                                  	
  6017 00000929 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6018 0000092C 5D                      	POP	BP
  6019 0000092D E8DB08                  	call	TableDispatch
  6020 00000930 E9DEFD                  	JMP	BadFunc 		; return indicates invalid function
  6021                                  
  6022                                  INT2F_etcetera:
  6023                                  	;entry	DosGetGroup
  6024                                  DosGetGroup:
  6025                                  	; MSDOS 3.3
  6026                                  	;push	cs
  6027                                  	;pop	ds
  6028                                  	;retn
  6029                                  
  6030                                  	; MSDOS 6.0
  6031                                  ;SR; Cannot use CS now
  6032                                  ;
  6033                                  ;	PUSH	CS
  6034                                  ;	POP	DS
  6035                                  
  6036                                  	; 04/11/2022
  6037                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  6038                                  
  6039                                  	;getdseg <ds>
  6040 00000933 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6041 00000938 C3                      	retn
  6042                                  
  6043                                  	;entry	DOSInstall
  6044                                  DOSInstall:
  6045 00000939 B0FF                    	MOV	AL,0FFh
  6046 0000093B C3                      	retn
  6047                                  
  6048                                  ;ENDIF ; (*)
  6049                                  
  6050                                  
  6051                                  ; 15/05/2019 - Retro DOS v4.0
  6052                                  
  6053                                  ;------------------------------------------------------------------------
  6054                                  ;
  6055                                  ; Procedure Name : RW32_CONVERT
  6056                                  ;
  6057                                  ;Input: same as ABSDRD and ABSDWRT
  6058                                  ;	 ES:BP -> DPB
  6059                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6060                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6061                                  ;	 carry clear, parms ok
  6062                                  ;
  6063                                  ;------------------------------------------------------------------------
  6064                                  
  6065                                  	; 06/01/2024
  6066                                  RW32_CONVERT:
  6067 0000093C 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6068 0000093F 742A                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6069 00000941 49                      	dec	cx ; *
  6070 00000942 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6071 00000943 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6072 00000944 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6073 00000948 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6074 0000094C 80FAFE                  	CMP	DL,0FEh 		;>32mb  removable ?	;AN000;
  6075 0000094F 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6076                                  	;INC	DL			;>32mb			;AN000;
  6077                                  	; 17/12/2022
  6078 00000951 42                      	inc	dx
  6079 00000952 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6080 00000954 F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6081 00000956 09D2                    	OR	DX,DX			;>32mb  > 32mb ?	;AN000;
  6082                                  letold:
  6083 00000958 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6084 00000959 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6085 0000095A 7425                    	JZ	short old_style	; cf=0	;>32mb  no 		;AN000;
  6086                                  
  6087 0000095C 1E                      	push	ds
  6088                                  	;getdseg <ds>
  6089 0000095D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6090 00000962 C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6091 00000968 1F                      	pop	ds
  6092                                  
  6093 00000969 F9                      	STC				;>32mb			;AN000;
  6094 0000096A C3                      	retn				;>32mb			;AN000;
  6095                                  
  6096                                  new32format:
  6097                                  	;mov	dx,[bx+2]
  6098 0000096B 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6099                                  
  6100 0000096E 1E                      	push	ds			; set up ds to DOSDATA
  6101                                  	;getdseg <ds>
  6102 0000096F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6103 00000974 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6104 00000978 1F                      	pop	ds
  6105                                  
  6106 00000979 8B17                    	mov	dx,[bx]
  6107                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6108                                  	;mov	cx,[bx+4]
  6109 0000097B 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6110                                  	;lds	bx,[bx+6]
  6111 0000097E C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6112                                  old_style:				;>32mb			;AN000;
  6113                                  	; 06/01/2024
  6114                                  	; cf=0
  6115                                  	;CLC				;>32mb			;AN000;
  6116 00000981 C3                      	retn				;>32mb			;AN000;
  6117                                  
  6118                                  ;------------------------------------------------------------------------
  6119                                  ;
  6120                                  ; Procedure Name : Fastxxx_Purge
  6121                                  ;
  6122                                  ; Input: None
  6123                                  ; Functions: Purge Fastopen/ Cache Buffers
  6124                                  ; Output: None
  6125                                  ;
  6126                                  ;------------------------------------------------------------------------
  6127                                  
  6128                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6129                                  
  6130                                  Fastxxx_Purge:
  6131 00000982 50                      	PUSH	AX			; save regs.	;AN000;
  6132 00000983 56                      	PUSH	SI						;AN000;
  6133 00000984 52                      	PUSH	DX						;AN000;
  6134                                  topen:
  6135 00000985 1E                      	push	ds			; set up ds to DOSDATA
  6136                                  	;getdseg <ds>
  6137 00000986 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6138                                  
  6139 0000098B F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6140                                  					; fastopen installed ?	;AN000;
  6141 00000990 1F                      	pop	ds
  6142 00000991 740B                    	JZ	short nofast		; no			;AN000;
  6143 00000993 B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6144                                  dofast:
  6145 00000995 B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6146                                  	;;mov	dl,[es:bp+0]
  6147                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6148                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6149                                  	; 15/12/2022
  6150 00000997 268A5600                	mov	dl,[es:bp]
  6151                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6152 0000099B E8F01C                  	call	Fast_Dispatch
  6153                                  nofast:
  6154 0000099E 5A                      	POP	DX						;AN000;
  6155 0000099F 5E                      	POP	SI			; restore regs		;AN000;
  6156 000009A0 58                      	POP	AX			 			;AN000;
  6157 000009A1 C3                      	retn				; exit
  6158                                  
  6159                                  ;============================================================================
  6160                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6161                                  ;============================================================================
  6162                                  ; 29/04/2019 - Retro DOS v4.0
  6163                                  
  6164                                  ;include dossym.inc
  6165                                  ;include dosmac.inc
  6166                                  ;include doscntry.inc
  6167                                  
  6168                                  ; DOSCODE Segment
  6169                                  
  6170                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6171                                  ; ---------------------------------------------------------------------------
  6172                                  ;include divmes.inc
  6173                                  
  6174                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6175                                  ; -------------------------------------
  6176                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6177                                  
  6178                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6179                                  	;PUBLIC	DIVMES
  6180                                  
  6181 000009A2 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6181 000009AB 6F766572666C6F770D-
  6181 000009B4 0A                 
  6182                                  
  6183                                  	;PUBLIC	DivMesLen
  6184                                  DivMesLen:
  6185 000009B5 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6186                                  
  6187                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6188                                  ; -------------------------------------
  6189                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6190                                  
  6191                                  ; (MSDOS 6.0)
  6192                                  ; VxD not found error message
  6193                                  
  6194                                  NoVxDErrMsg:
  6195 000009B7 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6195 000009C0 686176652074686520-
  6195 000009C9 66696C652057494E41-
  6195 000009D2 32302E33383620696E-
  6195 000009DB 2074686520726F6F74-
  6195 000009E4 206F6620796F757220-
  6195 000009ED 626F6F742064726976-
  6195 000009F6 65                 
  6196 000009F7 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6196 00000A00 57696E646F77732069-
  6196 00000A09 6E20456E68616E6365-
  6196 00000A12 64204D6F64650D0A   
  6197                                  
  6198                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6199                                  
  6200                                  ; 13/05/2019 - Retro DOS v4.0
  6201                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6202                                  
  6203                                  ;include yesno.asm  (MNSDOS 6.0)
  6204                                  ; -------------------------------------
  6205                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6206                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6207                                  
  6208                                  ; This is for country Yes and No
  6209                                  
  6210 00000A1A 59                      NLS_YES:	db 'Y'
  6211 00000A1B 4E                      NLS_NO:		db 'N'
  6212 00000A1C 79                      NLS_yes2:	db 'y'
  6213 00000A1D 6E                      NLS_no2:	db 'n'
  6214                                  
  6215                                  ; ---------------------------------------------------------------------------
  6216                                  
  6217                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6218                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6219                                  
  6220                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6221                                  
  6222                                  ; The following two tables implement the current buffered input editing
  6223                                  ; routines. The tables are pairwise associated in reverse order for ease
  6224                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6225                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6226                                  
  6227                                  	;PUBLIC	CANCHAR
  6228                                  CANCHAR:
  6229 00000A1E 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6230                                  	
  6231                                  	;PUBLIC	ESCCHAR
  6232                                  ESCCHAR:
  6233 00000A1F 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6234                                  	
  6235                                  	;IF	NOT Rainbow
  6236                                  
  6237                                  ESCTAB:	; LABEL BYTE
  6238                                  
  6239                                  	;IF	IBM
  6240 00000A20 40                      	DB	64		; Ctrl-Z - F6
  6241 00000A21 4D                      	DB	77		; Copy one char - -->
  6242 00000A22 3B                      	DB	59		; Copy one char - F1
  6243 00000A23 53                      	DB	83		; Skip one char - DEL
  6244 00000A24 3C                      	DB	60		; Copy to char - F2
  6245 00000A25 3E                      	DB	62		; Skip to char - F4
  6246 00000A26 3D                      	DB	61		; Copy line - F3
  6247 00000A27 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6248 00000A28 3F                      	DB	63		; Reedit line (new template) - F5
  6249 00000A29 4B                      	DB	75		; Backspace - <--
  6250 00000A2A 52                      	DB	82		; Enter insert mode - INS (toggle)
  6251 00000A2B 52                      	DB	82		; Exit insert mode - INS (toggle)
  6252 00000A2C 41                      	DB	65		; Escape character - F7
  6253 00000A2D 41                      	DB	65		; End of table
  6254                                  	;ENDIF
  6255                                  
  6256                                  ESCEND: ; LABEL BYTE
  6257                                  
  6258                                  ESCTABLEN EQU ESCEND-ESCTAB
  6259                                  
  6260                                  ESCFUNC: ; LABEL WORD
  6261                                  	
  6262 00000A2E [0014]                  	short_addr  GETCH	; Ignore the escape sequence
  6263 00000A30 [7D14]                  	short_addr  TWOESC
  6264 00000A32 [7215]                  	short_addr  EXITINS
  6265 00000A34 [7215]                  	short_addr  ENTERINS
  6266 00000A36 [7814]                  	short_addr  BACKSP
  6267 00000A38 [5E15]                  	short_addr  REEDIT
  6268 00000A3A [6514]                  	short_addr  KILNEW
  6269 00000A3C [F414]                  	short_addr  COPYLIN
  6270 00000A3E [2615]                  	short_addr  SKIPSTR
  6271 00000A40 [FA14]                  	short_addr  COPYSTR
  6272 00000A42 [1D15]                  	short_addr  SKIPONE
  6273 00000A44 [FF14]                  	short_addr  COPYONE
  6274 00000A46 [FF14]                  	short_addr  COPYONE
  6275 00000A48 [7915]                  	short_addr  CTRLZ
  6276                                  
  6277                                  	;ENDIF
  6278                                  
  6279                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6280                                  ; ---------------------------------------------------------------------------
  6281                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6282                                  
  6283                                  ; OEMFunction key is expected to process a single function
  6284                                  ;   key input from a device and dispatch to the proper
  6285                                  ;   routines leaving all registers UNTOUCHED.
  6286                                  ;
  6287                                  ; Inputs:   CS, SS are DOSGROUP
  6288                                  ; Outputs:  None. This function is expected to JMP to onw of
  6289                                  ;           the following labels:
  6290                                  ;
  6291                                  ;           GetCh       - ignore the sequence
  6292                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6293                                  ;           ExitIns     - toggle insert mode
  6294                                  ;           EnterIns    - toggle insert mode
  6295                                  ;           BackSp      - move backwards one space
  6296                                  ;           ReEdit      - reedit the line with a new template
  6297                                  ;           KilNew      - discard the current line and start from scratch
  6298                                  ;           CopyLin     - copy the rest of the template into the line
  6299                                  ;           SkipStr     - read the next character and skip to it in the template
  6300                                  ;           CopyStr     - read next char and copy from template to line until char
  6301                                  ;           SkipOne     - advance position in template one character
  6302                                  ;           CopyOne     - copy next character in template into line
  6303                                  ;           CtrlZ       - place a ^Z into the template
  6304                                  ; Registers that are allowed to be modified by this function are:
  6305                                  ;           AX, CX, BP
  6306                                  
  6307                                  ; 13/05/2019 - Retro DOS v4.0
  6308                                  ; -------------------------------------
  6309                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6310                                  
  6311                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6312                                  ; -------------------------------------
  6313                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6314                                  
  6315                                  OEMFunctionKey:
  6316 00000A4A E81509                  	CALL	_$STD_CON_INPUT_NO_ECHO	; Get the second byte of the sequence
  6317 00000A4D B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6318 00000A4F 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6319 00000A50 BF[200A]                	MOV     DI,ESCTAB		; offset of second byte table
  6320 00000A53 06                      	push	es
  6321 00000A54 0E                      	push	cs
  6322 00000A55 07                      	pop	es
  6323 00000A56 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6324 00000A58 07                      	pop	es
  6325 00000A59 5F                      	POP     DI                      ; restore DI
  6326 00000A5A D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6327 00000A5C 89CD                    	MOV     BP,CX                   ; move to indexable register
  6328                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6329 00000A5E 2EFFA6[2E0A]            	JMP	word [CS:BP+ESCFUNC]
  6330                                  
  6331                                  ;DOSCODE ENDS
  6332                                  	
  6333                                  ;============================================================================
  6334                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6335                                  ;============================================================================
  6336                                  ; Retro DOS v3.0 - 18/07/2018
  6337                                  
  6338                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6339                                  ;----------------------------------------------------------------------------
  6340                                  ; Retro DOS v2.0 - 13/03/2018
  6341                                  
  6342                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6343                                  
  6344                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6345                                  
  6346                                  ;**	$GET_DATE - Get Current Date
  6347                                  ;----------------------------------------
  6348                                  ;	ENTRY	none
  6349                                  ;	EXIT	(cx:dx) = current date
  6350                                  ;	USES	all
  6351                                  
  6352                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6353                                  
  6354                                  _$GET_DATE:	;System call 42
  6355                                  
  6356 00000A63 16                      	PUSH	SS
  6357 00000A64 1F                      	POP	DS
  6358 00000A65 E8AD00                  	CALL	READTIME	;Check for rollover to next day
  6359 00000A68 A1[5203]                	MOV	AX,[YEAR]
  6360                                  
  6361                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6362                                  
  6363 00000A6B 8B1E[5003]              	MOV	BX,[DAY]	; fetch both day and month
  6364 00000A6F E813FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6365                                  	;MOV	[SI+6],BX	;DH=month, DL=day
  6366 00000A72 895C06                  	MOV	[SI+user_env.user_DX],BX
  6367 00000A75 05BC07                  	ADD	AX,1980		;Put bias back
  6368                                  	;MOV	[SI+4],AX	;CX=year
  6369 00000A78 894404                  	MOV	[SI+user_env.user_CX],AX
  6370 00000A7B 36A0[5603]              	MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6371                                  RET20:	; 05/11/2022
  6372                                  RET24:	; 18/12/2022
  6373 00000A7F C3                      	RETN
  6374                                  
  6375                                  ;**	$SET_DATE - Set Current Date
  6376                                  ;----------------------------------------
  6377                                  ;	ENTRY	(cx:dx) = current date
  6378                                  ;	EXIT	(al) = -1 iff bad date
  6379                                  ;		(al) = 0 if ok
  6380                                  ;	USES	all
  6381                                  
  6382                                  _$SET_DATE:	;System call 43
  6383                                  
  6384 00000A80 B0FF                    	MOV	AL,-1		;Be ready to flag error
  6385 00000A82 81E9BC07                	SUB	CX,1980		;Fix bias in year
  6386                                  	;JC	SHORT RET24	;Error if not big enough
  6387                                  	; 05/11/2022
  6388 00000A86 72F7                    	jc	short RET20
  6389 00000A88 83F977                  	CMP	CX,119		;Year must be less than 2100
  6390 00000A8B 77F2                    	JA	SHORT RET24
  6391 00000A8D 08F6                    	OR	DH,DH
  6392                                  	;JZ	SHORT RET24
  6393                                   	; 05/11/2022
  6394 00000A8F 74EE                    	jz	short RET20
  6395 00000A91 08D2                    	OR	DL,DL
  6396                                  	;JZ	SHORT RET24	;Error if either month or day is 0
  6397                                  	; 05/11/2022
  6398 00000A93 74EA                    	jz	short RET20
  6399 00000A95 80FE0C                  	CMP	DH,12		;Check against max. month
  6400 00000A98 77E5                    	JA	SHORT RET24
  6401 00000A9A 16                      	PUSH	SS
  6402 00000A9B 1F                      	POP	DS
  6403                                  	;CALL	DODATE
  6404                                  	; 18/12/2022
  6405 00000A9C E90301                  	jmp	DODATE
  6406                                  ;RET24:  
  6407                                  	;RETN
  6408                                  
  6409                                  ;**	$GET_TIME - Get Current Time
  6410                                  ;----------------------------------------
  6411                                  ;	ENTRY	none
  6412                                  ;	EXIT	(cx:dx) = current time
  6413                                  ;	USES	all
  6414                                  
  6415                                  _$GET_TIME:			;System call 44
  6416                                  
  6417 00000A9F 16                      	PUSH	SS
  6418 00000AA0 1F                      	POP	DS
  6419 00000AA1 E87100                  	CALL	READTIME
  6420 00000AA4 E8DEF9                  	CALL	Get_User_Stack	;Get pointer to user registers
  6421                                  	;MOV	[SI+6],DX
  6422 00000AA7 895406                  	MOV	[SI+user_env.user_DX],DX
  6423                                  	;MOV	[SI+4],CX
  6424 00000AAA 894C04                  	MOV	[SI+user_env.user_CX],CX
  6425                                  set_time_ok:	; 06/01/2024
  6426 00000AAD 30C0                    	XOR	AL,AL
  6427                                  RET26:  
  6428 00000AAF C3                      	RETN
  6429                                  
  6430                                  ;**	$SET_TIME - Set Current Time
  6431                                  ;----------------------------------------
  6432                                  ;	ENTRY	(cx:dx) = time
  6433                                  ;	EXIT	(al) = 0 if 0k
  6434                                  ;		(al) = -1 if invalid
  6435                                  ;	USES	ALL
  6436                                  
  6437                                  _$SET_TIME:			;System call 45
  6438                                  
  6439 00000AB0 B0FF                    	MOV	AL,-1		;Flag in case of error
  6440 00000AB2 80FD18                  	CMP	CH,24		;Check hours
  6441 00000AB5 73F8                    	JAE	SHORT RET26
  6442 00000AB7 80F93C                  	CMP	CL,60		;Check minutes
  6443 00000ABA 73F3                    	JAE	SHORT RET26
  6444 00000ABC 80FE3C                  	CMP	DH,60		;Check seconds
  6445 00000ABF 73EE                    	JAE	SHORT RET26
  6446 00000AC1 80FA64                  	CMP	DL,100		;Check 1/100's
  6447 00000AC4 73E9                    	JAE	SHORT RET26
  6448 00000AC6 51                      	PUSH	CX
  6449 00000AC7 52                      	PUSH	DX
  6450 00000AC8 16                      	PUSH	SS
  6451 00000AC9 1F                      	POP	DS
  6452                                  
  6453                                  ; 07/02/2024
  6454                                  %if 0
  6455                                  	MOV	BX,TIMEBUF
  6456                                  	MOV	CX,6
  6457                                  	; 06/02/2024 ; *
  6458                                  	;;XOR	DX,DX
  6459                                  	;;MOV	AX,DX
  6460                                  	;xor	ax,ax
  6461                                  	;cwd	; 06/01/2024
  6462                                  	PUSH	BX
  6463                                  	;CALL	SETREAD
  6464                                  	; 06/02/2024 ; *
  6465                                  	call	SETREAD_X
  6466                                  %else
  6467 00000ACA E83D3B                  	call	SETREAD_XT
  6468                                  %endif
  6469                                  
  6470 00000ACD 1E                      	PUSH	DS
  6471 00000ACE C536[2E00]              	LDS	SI,[BCLOCK]
  6472 00000AD2 E8BB3A                  	CALL	DEVIOCALL2	;Get correct day count
  6473 00000AD5 1F                      	POP	DS
  6474 00000AD6 5B                      	POP	BX
  6475 00000AD7 E86D3B                  	CALL	SETWRITE
  6476 00000ADA 8F06[BA03]              	POP	WORD [TIMEBUF+4]
  6477 00000ADE 8F06[B803]              	POP	WORD [TIMEBUF+2]
  6478 00000AE2 C536[2E00]              	LDS	SI,[BCLOCK]
  6479 00000AE6 E8A73A                  	CALL	DEVIOCALL2	;Set the time
  6480                                  	; 06/01/2024
  6481                                  	;XOR	AL,AL
  6482                                  	;RETN
  6483 00000AE9 EBC2                    	jmp	short set_time_ok
  6484                                  
  6485                                  ; 11/07/2018 - Retro DOS v3.0
  6486                                  ; Retro DOS v2.0 - 14/03/2018
  6487                                  
  6488                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6489                                  
  6490                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6491                                  ;----------------------------------------------------------
  6492                                  ; Date16 returns the current date in AX, current time in DX
  6493                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6494                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6495                                  
  6496                                  DATE16:
  6497                                  	
  6498                                  ;M048	Context DS
  6499                                  ;
  6500                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6501                                  ; is DOSDATA
  6502                                  
  6503                                  	;push	ss
  6504                                  	;pop	ds
  6505                                  
  6506                                  	;getdseg <ds>		; M048
  6507                                  
  6508                                  	; 13/05/2019 - Retro DOS v4.0
  6509 00000AEB 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6510                                  
  6511 00000AF0 51                      	PUSH	CX
  6512 00000AF1 06                      	PUSH	ES
  6513 00000AF2 E82000                  	CALL	READTIME
  6514 00000AF5 07                      	POP	ES
  6515 00000AF6 D0E1                    	SHL	CL,1		;Minutes to left part of byte
  6516 00000AF8 D0E1                    	SHL	CL,1
  6517 00000AFA D1E1                    	SHL	CX,1		;Push hours and minutes to left end
  6518 00000AFC D1E1                    	SHL	CX,1
  6519 00000AFE D1E1                    	SHL	CX,1
  6520 00000B00 D0EE                    	SHR	DH,1		;Count every two seconds
  6521 00000B02 08F1                    	OR	CL,DH		;Combine seconds with hours and minutes
  6522 00000B04 89CA                    	MOV	DX,CX
  6523                                  
  6524                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6525                                  
  6526 00000B06 A1[5103]                	MOV	AX,[MONTH]	;Fetch month and year
  6527 00000B09 B104                    	MOV	CL,4
  6528 00000B0B D2E0                    	SHL	AL,CL		;Push month to left to make room for day
  6529 00000B0D D1E0                    	SHL	AX,1
  6530 00000B0F 59                      	POP	CX
  6531 00000B10 0A06[5003]              	OR	AL,[DAY]
  6532                                  RET21:
  6533 00000B14 C3                      	RETN
  6534                                  
  6535                                  ;----------------------------------------------------------
  6536                                  
  6537                                  READTIME:
  6538                                  
  6539                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6540                                  ;Uses AX, CX, DX.
  6541                                  
  6542 00000B15 C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6543 00000B1B 56                      	PUSH	SI
  6544 00000B1C 53                      	PUSH	BX
  6545                                  
  6546 00000B1D BB[B603]                	MOV	BX,TIMEBUF
  6547                                  ; 07/02/2024
  6548                                  %if 0
  6549                                  	MOV	CX,6
  6550                                  	; 06/02/2024
  6551                                  	;;XOR	DX,DX
  6552                                  	;;MOV	AX,DX
  6553                                  	;; 06/01/2024
  6554                                  	;xor	ax,ax
  6555                                  	;cwd
  6556                                  	;CALL	SETREAD
  6557                                  	; 06/02/2024
  6558                                  	call	SETREAD_X
  6559                                  %else
  6560 00000B20 E8EB3A                  	call	SETREAD_XTC
  6561                                  %endif
  6562 00000B23 1E                      	PUSH	DS
  6563 00000B24 C536[2E00]              	LDS	SI,[BCLOCK]
  6564 00000B28 E8653A                  	CALL	DEVIOCALL2	;Get correct date and time
  6565 00000B2B 1F                      	POP	DS
  6566 00000B2C 5B                      	POP	BX
  6567 00000B2D 5E                      	POP	SI
  6568 00000B2E A1[B603]                	MOV	AX,[TIMEBUF]
  6569 00000B31 8B0E[B803]              	MOV	CX,[TIMEBUF+2]
  6570 00000B35 8B16[BA03]              	MOV	DX,[TIMEBUF+4]
  6571 00000B39 3B06[5403]              	CMP	AX,[DAYCNT]	;See if day count is the same
  6572                                  	;JZ	SHORT RET22
  6573 00000B3D 74D5                    	JZ	SHORT RET21 ; 18/07/2018
  6574                                  	;cmp	ax,43830
  6575 00000B3F 3D36AB                  	CMP	AX,FOURYEARS*30 ;Number of days in 120 years
  6576 00000B42 733D                    	JAE	SHORT RET22	;Ignore if too large
  6577 00000B44 A3[5403]                	MOV	[DAYCNT],AX
  6578 00000B47 56                      	PUSH	SI
  6579 00000B48 51                      	PUSH	CX
  6580 00000B49 52                      	PUSH	DX		;Save time
  6581 00000B4A 31D2                    	XOR	DX,DX
  6582                                  	;mov	cx,1461
  6583 00000B4C B9B505                  	MOV	CX,FOURYEARS	;Number of days in 4 years
  6584 00000B4F F7F1                    	DIV	CX		;Compute number of 4-year units
  6585 00000B51 D1E0                    	SHL	AX,1
  6586 00000B53 D1E0                    	SHL	AX,1
  6587 00000B55 D1E0                    	SHL	AX,1		;Multiply by 8 (no. of half-years)
  6588 00000B57 89C1                    	MOV	CX,AX		;<240 implies AH=0
  6589                                  
  6590 00000B59 BE[140D]                	MOV	SI,YRTAB	;Table of days in each year
  6591                                  
  6592 00000B5C E82300                  	CALL	DSLIDE		;Find out which of four years we're in
  6593 00000B5F D1E9                    	SHR	CX,1		;Convert half-years to whole years
  6594 00000B61 7304                    	JNC	SHORT SK	;Extra half-year?
  6595 00000B63 81C2C800                	ADD	DX,200
  6596                                  SK:
  6597 00000B67 E82200                  	CALL	SETYEAR
  6598 00000B6A B101                    	MOV	CL,1		;At least at first month in year
  6599                                  
  6600 00000B6C BE[1C0D]                	MOV	SI,MONTAB	;Table of days in each month
  6601                                  	
  6602 00000B6F E81000                  	CALL	DSLIDE		;Find out which month we're in
  6603 00000B72 880E[5103]              	MOV	[MONTH],CL
  6604 00000B76 42                      	INC	DX		;Remainder is day of month (start with one)
  6605 00000B77 8816[5003]              	MOV	[DAY],DL
  6606 00000B7B E88A00                  	CALL	WKDAY		;Set day of week
  6607 00000B7E 5A                      	POP	DX
  6608 00000B7F 59                      	POP	CX
  6609 00000B80 5E                      	POP	SI
  6610                                  RET22:  
  6611 00000B81 C3                      	RETN
  6612                                  
  6613                                  ;----------------------------------------------------------
  6614                                  
  6615                                  DSLIDE:
  6616                                  	;MOV	AH,0
  6617                                  	; 06/01/2024
  6618                                  	; (AH = 0)
  6619                                  DSLIDE1:
  6620 00000B82 AC                      	LODSB			;Get count of days
  6621 00000B83 39C2                    	CMP	DX,AX		;See if it will fit
  6622                                  	;JB	SHORT RET23	;If not, done
  6623 00000B85 72FA                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6624 00000B87 29C2                    	SUB	DX,AX
  6625 00000B89 41                      	INC	CX		;Count one more month/year
  6626 00000B8A EBF6                    	JMP	SHORT DSLIDE1
  6627                                  
  6628                                  ;----------------------------------------------------------
  6629                                  
  6630                                  SETYEAR:
  6631                                  
  6632                                  ;Set year with value in CX. Adjust length of February for this year.
  6633                                  
  6634                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6635                                  ;	  set DS to DOSDATA. Since the only guy calling this should be the DOS
  6636                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6637                                  ;	preserve DS as CHKYR is also called as a routine.
  6638                                  
  6639                                  	; MSDOS 6.0 (18/07/2018) ; *
  6640                                  
  6641                                  	;GETDSEG DS
  6642                                  
  6643                                  	;PUSH	CS  ; *
  6644                                  	;POP	DS  ; *
  6645                                  
  6646                                  	; 13/05/2019 - Retro DOS v4.0
  6647 00000B8C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6648                                  
  6649                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6650                                  	; 05/11/2022 
  6651                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6652                                  
  6653 00000B91 880E[5203]              	MOV	[YEAR],CL
  6654                                  CHKYR:
  6655 00000B95 F6C103                  	TEST	CL,3		;Check for leap year
  6656 00000B98 B01C                    	MOV	AL,28
  6657 00000B9A 7502                    	JNZ	SHORT SAVFEB	;28 days if no leap year
  6658 00000B9C FEC0                    	INC	AL		;Add leap day
  6659                                  SAVFEB:
  6660 00000B9E A2[1D0D]                	mov	[february],al
  6661                                  	;MOV	[MONTAB+1],AL	;Store for February
  6662                                  RET23:  
  6663 00000BA1 C3                      	RETN
  6664                                  
  6665                                  ;----------------------------------------------------------
  6666                                  
  6667                                  DODATE:
  6668 00000BA2 E8F0FF                  	CALL	CHKYR		;Set Feb. up for new year
  6669 00000BA5 88F0                    	MOV	AL,DH
  6670                                  
  6671 00000BA7 BB[1B0D]                	MOV	BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6672                                  
  6673 00000BAA D7                      	XLAT			;Look up days in month
  6674 00000BAB 38D0                    	CMP	AL,DL
  6675 00000BAD B0FF                    	MOV	AL,-1		;Restore error flag, just in case
  6676                                  	;JB	SHORT RET25	;Error if too many days
  6677 00000BAF 72F0                    	jb	short RET23 ; 18/07/2018
  6678 00000BB1 E8D8FF                  	CALL	SETYEAR
  6679                                  ;
  6680                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6681                                  ;
  6682 00000BB4 8916[5003]              	MOV	[DAY],DX	;Set both day and month
  6683 00000BB8 D1E9                    	SHR	CX,1
  6684 00000BBA D1E9                    	SHR	CX,1
  6685                                  	;mov	ax,1461
  6686 00000BBC B8B505                  	MOV	AX,FOURYEARS
  6687 00000BBF 89D3                    	MOV	BX,DX
  6688 00000BC1 F7E1                    	MUL	CX
  6689 00000BC3 8A0E[5203]              	MOV	CL,[YEAR]
  6690 00000BC7 80E103                  	AND	CL,3
  6691                                  
  6692 00000BCA BE[140D]                	MOV	SI,YRTAB
  6693                                  
  6694 00000BCD 89C2                    	MOV	DX,AX
  6695 00000BCF D1E1                    	SHL	CX,1		;Two entries per year, so double count
  6696 00000BD1 E84700                  	CALL	DSUM		;Add up the days in each year
  6697 00000BD4 88F9                    	MOV	CL,BH		;Month of year
  6698                                  
  6699 00000BD6 BE[1C0D]                	MOV	SI,MONTAB
  6700                                  
  6701 00000BD9 49                      	DEC	CX		;Account for months starting with one
  6702 00000BDA E83E00                  	CALL	DSUM		;Add up days in each month
  6703 00000BDD 88D9                    	MOV	CL,BL		;Day of month
  6704 00000BDF 49                      	DEC	CX		;Account for days starting with one
  6705 00000BE0 01CA                    	ADD	DX,CX		;Add in to day total
  6706 00000BE2 92                      	XCHG	AX,DX		;Get day count in AX
  6707 00000BE3 A3[5403]                	MOV	[DAYCNT],AX
  6708 00000BE6 56                      	PUSH	SI
  6709 00000BE7 53                      	PUSH	BX
  6710 00000BE8 50                      	PUSH	AX
  6711                                  
  6712                                  ; 07/02/2024
  6713                                  %if 0
  6714                                  	MOV	BX,TIMEBUF
  6715                                  	MOV	CX,6
  6716                                  	; 06/02/2024 ; *
  6717                                  	;;XOR	DX,DX
  6718                                  	;;MOV	AX,DX
  6719                                  	;; 06/01/2024
  6720                                  	;xor	ax,ax
  6721                                  	;cwd
  6722                                  	PUSH	BX
  6723                                  	;CALL	SETREAD
  6724                                  	; 06/02/2024 ; *
  6725                                  	call	SETREAD_X
  6726                                  %else
  6727 00000BE9 E81E3A                  	call	SETREAD_XT
  6728                                  %endif
  6729                                  
  6730 00000BEC 1E                      	PUSH	DS
  6731 00000BED C536[2E00]              	LDS	SI,[BCLOCK]
  6732 00000BF1 E89C39                  	CALL	DEVIOCALL2	;Get correct date and time
  6733 00000BF4 1F                      	POP	DS
  6734 00000BF5 5B                      	POP	BX
  6735 00000BF6 E84E3A                  	CALL	SETWRITE
  6736 00000BF9 8F06[B603]              	POP	WORD [TIMEBUF]
  6737 00000BFD 1E                      	PUSH	DS
  6738 00000BFE C536[2E00]              	LDS	SI,[BCLOCK]
  6739 00000C02 E88B39                  	CALL	DEVIOCALL2	;Set the date
  6740 00000C05 1F                      	POP	DS
  6741 00000C06 5B                      	POP	BX
  6742 00000C07 5E                      	POP	SI
  6743                                  WKDAY:
  6744 00000C08 A1[5403]                	MOV	AX,[DAYCNT]
  6745 00000C0B 31D2                    	XOR	DX,DX
  6746 00000C0D B90700                  	MOV	CX,7
  6747 00000C10 40                      	INC	AX
  6748 00000C11 40                      	INC	AX		;First day was Tuesday
  6749 00000C12 F7F1                    	DIV	CX		;Compute day of week
  6750 00000C14 8816[5603]              	MOV	[WEEKDAY],DL
  6751 00000C18 30C0                    	XOR	AL,AL		;Flag OK
  6752                                  RET25:
  6753 00000C1A C3                      	RETN
  6754                                  
  6755                                  ;----------------------------------------------------------
  6756                                  
  6757                                  ;**	DSUM - Compute the sum of a string of bytes
  6758                                  ;
  6759                                  ;	ENTRY	(cx) = byte count
  6760                                  ;		(ds:si) = byte address
  6761                                  ;		(dx) = sum register, initialized by caller
  6762                                  ;	EXIT	(dx) updated
  6763                                  ;	USES	ax, cx, dx, si, flags
  6764                                  
  6765                                  DSUM:
  6766 00000C1B B400                    	MOV	AH,0
  6767 00000C1D E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6768                                  	;JCXZ	RET25 ; 18/07/2018
  6769                                  DSUM1:
  6770 00000C1F AC                      	LODSB
  6771 00000C20 01C2                    	ADD	DX,AX
  6772 00000C22 E2FB                    	LOOP	DSUM1
  6773                                  DSUM9:
  6774 00000C24 C3                      	RETN
  6775                                  
  6776                                  ;============================================================================
  6777                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6778                                  ;============================================================================
  6779                                  ; 29/04/2019 - Retro DOS v4.0
  6780                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6781                                  
  6782                                  ; 12/03/2018 - Retro DOS v2.0 
  6783                                  
  6784                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6785                                  ;NAME	GETSET
  6786                                  
  6787                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6788                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6789                                  
  6790                                  ;USERNUM:
  6791                                  ;	DW	0			; 24 bit user number
  6792                                  ;       DB      0
  6793                                  ;;	IF      IBM
  6794                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6795                                  ;;	ELSE
  6796                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6797                                  ;;	ENDIF
  6798                                  
  6799                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6800                                  ;; 08/07/2018 - Retro DOS v3.0
  6801                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6802                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6803                                  
  6804                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6805                                  ;----------------------------------------------------------------------------
  6806                                  
  6807                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6808                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6809                                  
  6810                                  _$GET_VERSION:
  6811                                  
  6812                                  ; Inputs:
  6813                                  ;       None
  6814                                  ; Function:
  6815                                  ;       Return MS-DOS version number
  6816                                  ; Outputs:
  6817                                  ;       OEM number in BH
  6818                                  ;       User number in BL:CX (24 bits)
  6819                                  ;       Version number as AL.AH in binary
  6820                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6821                                  
  6822                                  ; MSDOS 6.0
  6823                                  ;
  6824                                  ;	Fake_Count is used to lie about the version numbers to support
  6825                                  ;	old binarys. See ms_table.asm for more info.
  6826                                  ;
  6827                                  ;		if input al = 00
  6828                                  ;		  (bh) = OEM number			
  6829                                  ;		else if input al = 01
  6830                                  ;		  (bh) = version flags
  6831                                  ;		 
  6832                                  ;		       	 bits 0-2 = DOS internal revision
  6833                                  ;		       	 bits 3-7 = DOS type flags
  6834                                  ;		              bit 3    = DOS is in ROM
  6835                                  ;		              bit 4    = DOS in in HMA
  6836                                  ;		              bits 5-7 = reserved
  6837                                  ;               M007 change - only bit 3 is now valid. Other bits
  6838                                  ;               are 0 when AL = 1
  6839                                  
  6840                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6841 00000C25 36C50E[B203]            	lds	cx, [ss:USERNUM]
  6842 00000C2A 8CDB                    	mov	bx, ds
  6843                                  
  6844                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6845                                  	;--------------------------------------
  6846                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6847                                  
  6848 00000C2C 16                              PUSH    SS
  6849 00000C2D 1F                              POP     DS
  6850                                          
  6851                                  	; 06/01/2024
  6852                                  	;MOV	BX,[USERNUM+2]
  6853                                          ;MOV	CX,[USERNUM]
  6854                                  
  6855                                  	; 13/05/2019 - Retro DOS v4.0
  6856                                  
  6857                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6858                                  	;DOS flags
  6859                                  
  6860 00000C2E 3C01                    	cmp	AL,1
  6861 00000C30 7502                    	jne	short Norm_Vers
  6862                                  
  6863                                  ;ifdef ROMDOS
  6864                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6865                                  ;				(DOSINROM = 8)
  6866                                  ;else
  6867 00000C32 30FF                            xor     bh,bh		; Otherwise return 0
  6868                                  ;endif				;M007 end
  6869                                  
  6870                                  Norm_Vers:
  6871                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6872                                  
  6873                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6874                                  	; 13/05/2019 - Retro DOS v4.0
  6875 00000C34 1E                      	push	ds		; Get the version number from the
  6876 00000C35 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6877                                  	;mov	ax,[40h]
  6878 00000C39 A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6879                                  	; 07/12/2022
  6880 00000C3C 1F                      	pop	ds
  6881 00000C3D E845F8                  	call	Get_User_Stack
  6882                                  				; Put values for return registers
  6883                                  				; in the proper place on the user's	 
  6884                                  				; stack addressed by DS:SI
  6885                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6886                                  gdrvfspc_ret:
  6887                                          ;MOV	[SI+user_env.user_AX],AX
  6888 00000C40 8904                            MOV	[SI],AX
  6889                                          ;MOV	[SI+4],CX
  6890 00000C42 894C04                  	mov	[SI+user_env.user_CX],CX
  6891                                  set_user_bx:
  6892                                  	;MOV	[SI+2],BX
  6893 00000C45 895C02                  	mov	[SI+user_env.user_BX],BX
  6894                                  
  6895 00000C48 C3                      	RETN
  6896                                  
  6897                                  ; 18/07/2018 - Retro DOS v3.0
  6898                                  
  6899                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6900                                  ;----------------------------------------------------------------------------
  6901                                  
  6902                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6903                                  ;
  6904                                  ;	ENTRY	none
  6905                                  ;	EXIT	(al) = value of VERIFY flag
  6906                                  ;	USES	all
  6907                                  
  6908                                  
  6909                                  _$GET_VERIFY_ON_WRITE:
  6910                                  
  6911                                  ;hkn; SS override
  6912 00000C49 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6913 00000C4D C3                      	retn
  6914                                  
  6915                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6916                                  ;
  6917                                  ;	ENTRY	(al) = value of VERIFY flag
  6918                                  ;	EXIT	none
  6919                                  ;	USES	all
  6920                                  
  6921                                  _$SET_VERIFY_ON_WRITE:
  6922                                  
  6923 00000C4E 2401                    	AND	AL,1
  6924                                  ;hkn; SS override
  6925 00000C50 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6926                                  RET27:	; 18/07/2018
  6927 00000C54 C3                      	retn
  6928                                  
  6929                                  ; 19/07/2018 - Retro DOS v3.0
  6930                                  
  6931                                  ;BREAK <$International - return country-dependent information>
  6932                                  ;----------------------------------------------------------------------------
  6933                                  ;
  6934                                  ; Procedure Name : $INTERNATIONAL
  6935                                  ;
  6936                                  ; Inputs:
  6937                                  ;	MOV	AH,International
  6938                                  ;	MOV	AL,country	(al = 0 => current country)
  6939                                  ;      [MOV	BX,country]
  6940                                  ;	LDS	DX,block
  6941                                  ;	INT	21
  6942                                  ; Function:
  6943                                  ;	give users an idea of what country the application is running
  6944                                  ; Outputs:
  6945                                  ;	IF DX != -1 on input (get country)
  6946                                  ;	  AL = 0 means return current country table.
  6947                                  ;	  0<AL<0FFH means return country table for country AL
  6948                                  ;	  AL = 0FF means return country table for country BX
  6949                                  ;	  No Carry:
  6950                                  ;	     Register BX will contain the 16-bit country code.
  6951                                  ;	     Register AL will contain the low 8 bits of the country code.
  6952                                  ;	     The block pointed to by DS:DX is filled in with the information
  6953                                  ;	     for the particular country.
  6954                                  ;		BYTE  Size of this table excluding this byte and the next
  6955                                  ;		BYTE  Country code represented by this table
  6956                                  ;			A sequence of n bytes, where n is the number specified
  6957                                  ;			by the first byte above and is not > internat_block_max,
  6958                                  ;			in the correct order for being returned by the
  6959                                  ;			INTERNATIONAL call as follows:
  6960                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6961                                  ;		5 BYTE	Currency symbol null terminated
  6962                                  ;		2 BYTE	thousands separator null terminated
  6963                                  ;		2 BYTE	Decimal point null terminated
  6964                                  ;		2 BYTE	Date separator null terminated
  6965                                  ;		2 BYTE	Time separator null terminated
  6966                                  ;		1 BYTE	Bit field.  Currency format.
  6967                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6968                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6969                                  ;		1 BYTE	No. of significant decimal digits in currency
  6970                                  ;		1 BYTE	Bit field.  Time format.
  6971                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6972                                  ;		DWORD	Call address of case conversion routine
  6973                                  ;		2 BYTE	Data list separator null terminated.
  6974                                  ;	  Carry:
  6975                                  ;	     Register AX has the error code.
  6976                                  ;	IF DX = -1 on input (set current country)
  6977                                  ;	  AL = 0 is an error
  6978                                  ;	  0<AL<0FFH means set current country to country AL
  6979                                  ;	  AL = 0FF means set current country to country BX
  6980                                  ;	  No Carry:
  6981                                  ;	    Current country SET
  6982                                  ;	    Register AL will contain the low 8 bits of the country code.
  6983                                  ;	  Carry:
  6984                                  ;	     Register AX has the error code.
  6985                                  ;-----------------------------------------------------------------------------
  6986                                  
  6987                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6988                                  
  6989                                  ; 13/05/2019 - Retro DOS v4.0
  6990                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  6991                                  
  6992                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6993                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  6994                                  
  6995                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  6996                                  	 
  6997 00000C55 3CFF                    	CMP	AL,0FFH
  6998 00000C57 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  6999 00000C59 88C3                    	MOV	BL,AL			; Put AL country code in BX
  7000 00000C5B 30FF                    	XOR	BH,BH
  7001                                  BX_HAS_CODE:
  7002 00000C5D 1E                      	PUSH	DS
  7003 00000C5E 07                      	POP	ES
  7004 00000C5F 52                      	PUSH	DX
  7005 00000C60 5F                      	POP	DI			; User buffer to ES:DI
  7006                                  
  7007                                  ;hkn; SS is DOSDATA
  7008                                  ;	context DS
  7009                                  
  7010 00000C61 16                      	push	ss
  7011 00000C62 1F                      	pop	ds
  7012                                  
  7013 00000C63 83FFFF                  	CMP	DI,-1
  7014 00000C66 745D                    	JZ	short international_set
  7015 00000C68 09DB                    	OR	BX,BX
  7016 00000C6A 7505                    	JNZ	short international_find
  7017                                  
  7018                                  ;hkn; country_cdpg is in DOSDATA segment.
  7019 00000C6C BE[0512]                	MOV	SI,COUNTRY_CDPG
  7020                                  
  7021 00000C6F EB39                    	JMP	SHORT international_copy
  7022                                  
  7023                                  international_find:
  7024                                  	;MOV	BP,0			 ; flag it for GetCntry only
  7025                                  	; 06/01/2024
  7026 00000C71 31ED                    	xor	bp,bp ; 0
  7027 00000C73 E80A00                  	CALL	international_get
  7028 00000C76 7255                    	JC	short errtn
  7029                                  	;CMP	BX,0			 ; nlsfunc finished it ?
  7030                                  	; 06/01/2024
  7031 00000C78 09DB                    	or	bx,bx
  7032 00000C7A 752E                    	JNZ	SHORT international_copy ; no, copy by myself
  7033 00000C7C 89D3                    	MOV	BX,DX			 ; put country back
  7034 00000C7E EB3A                    	JMP	SHORT international_ok3
  7035                                  
  7036                                  international_get:
  7037 00000C80 BE[0512]                	MOV	SI,COUNTRY_CDPG
  7038                                  
  7039                                  ;hkn; country_cdpg is in DOSDATA segment.
  7040                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7041                                  
  7042                                  	; MSDOS 3.3
  7043                                  	;;cmp	bx,[SI+63h]
  7044                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  7045                                  	;jz	short RET27
  7046                                  
  7047                                  	; 13/05/2019 - Retro DOS v4.0
  7048                                  
  7049                                  	; MSDOS 6.0
  7050                                  	;cmp	bx,[ss:si+68h]
  7051 00000C83 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7052 00000C87 74CB                    	jz	short RET27			; return if equal
  7053                                  
  7054 00000C89 89DA                    	MOV	DX,BX
  7055 00000C8B 31DB                    	XOR	BX,BX			; bx = 0, default code page
  7056                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7057 00000C8D B80014                  	mov	ax,1400h
  7058 00000C90 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7059                                  			; Return: AL = 00h not installed, OK to install
  7060                                  			; 01h not installed, not OK
  7061                                  			; FFh installed
  7062 00000C92 3CFF                    	CMP	AL,0FFH
  7063 00000C94 7510                    	JNZ	short interr		; not in memory
  7064                                  	
  7065                                  	; 06/01/2024
  7066 00000C96 B80314                  	mov	ax,1403h		; set country info
  7067                                  
  7068                                  	;cmp	bp,0
  7069 00000C99 09ED                    	or	bp,bp			; GetCntry ?
  7070 00000C9B 7501                    	JNZ	short stcdpg
  7071                                  	
  7072                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  7073                                  	;mov	ax,1404h
  7074 00000C9D 40                      	inc	ax	; AX = 1404h ; get country info
  7075                                  
  7076                                  	; 06/01/2024
  7077                                  	;int	2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7078                                  	;		; BX = code page, DX = country code,
  7079                                  	;		; DS:SI -> internal code page structure
  7080                                  	;		; ES:DI -> user buffer
  7081                                  	;		; Return: AL = status
  7082                                  	;
  7083                                  	;JMP	short chkok
  7084                                  	
  7085                                  	;nop
  7086                                  
  7087                                  stcdpg:
  7088                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  7089                                  	; 06/01/2024
  7090                                  	;mov     ax,1403h
  7091                                  gscdpg:
  7092 00000C9E CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  7093                                  			; DS:SI -> internal code page structure
  7094                                  			; BX = code page, DX = country code
  7095                                  			; Return: AL = status
  7096                                  chkok:
  7097 00000CA0 08C0                    	or	al,al			; success ?
  7098                                  	;retz				; yes
  7099 00000CA2 74B0                    	jz	short RET27
  7100                                  
  7101                                  setcarry:
  7102 00000CA4 F9                      	STC				; set carry
  7103 00000CA5 C3                      	retn
  7104                                  interr:
  7105 00000CA6 B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  7106 00000CA8 EBFA                    	JMP	short setcarry
  7107                                  
  7108                                  international_copy:
  7109                                  
  7110                                  ;hkn; country_cdpg is in DOSDATA segment.
  7111                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7112                                  
  7113                                  	; MSDOS 3.3
  7114                                  	;;mov	bx,[SI+63h]
  7115                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7116                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7117                                  
  7118                                  	; 13/05/2019 - Retro DOS v4.0
  7119                                  
  7120                                  	; MSDOS 6.0
  7121                                  	;mov	bx,[ss:si+68h]
  7122 00000CAA 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7123 00000CAE BE[7112]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7124                                  
  7125                                  	;mov	cx,24
  7126 00000CB1 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7127                                  
  7128                                  	; MSDOS 6.0
  7129                                  
  7130                                  ;hkn;	must set up DS to SS so that international info can be copied
  7131                                  	
  7132 00000CB4 1E                      	push	ds
  7133                                  
  7134 00000CB5 16                      	push	ss			; cs -> ss
  7135 00000CB6 1F                      	pop	ds
  7136                                  
  7137 00000CB7 F3A4                    	REP	MOVSB			; copy country info
  7138                                  
  7139                                  	; MSDOS 6.0
  7140                                  
  7141 00000CB9 1F                      	pop	ds	;hkn;	restore ds
  7142                                  
  7143                                  international_ok3:
  7144 00000CBA E8C8F7                  	call	Get_User_Stack
  7145                                  ;ASSUME	DS:NOTHING
  7146                                  	;MOV	[SI+2],BX
  7147 00000CBD 895C02                  	MOV	[SI+user_env.user_BX],BX
  7148                                  international_ok:
  7149 00000CC0 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7150                                  ;SYS_RET_OK_jmp:
  7151                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7152                                  nono:	; 15/12/2022
  7153                                  SYS_RET_OK_jmp:
  7154 00000CC2 E976F9                  	jmp	SYS_RET_OK
  7155                                  
  7156                                  international_set:
  7157                                  
  7158                                  ;hkn; ASSUME	DS:DOSGROUP
  7159                                  ;ASSUME	DS:DOSDATA
  7160                                  
  7161 00000CC5 BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7162 00000CC8 E8B5FF                  	CALL	international_get
  7163 00000CCB 73F3                    	JNC	short international_ok
  7164                                  errtn:
  7165 00000CCD 3CFF                    	CMP	AL,0FFH
  7166 00000CCF 7403                    	JZ	short errtn2
  7167                                  errtn1:
  7168 00000CD1 E970F9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7169                                  errtn2:
  7170                                  	;error	error_invalid_function	; NLSFUNC not existent
  7171                                  
  7172                                  	;mov	al,1
  7173 00000CD4 B001                    	mov	al,error_invalid_function 
  7174 00000CD6 EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7175                                  ;errtn3:
  7176                                  ;	jmp	SYS_RET_ERR
  7177                                  
  7178                                  ;EndProc $INTERNATIONAL
  7179                                  
  7180                                  ; 19/07/2018
  7181                                  
  7182                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7183                                  
  7184                                  ;----------------------------------------------------------------------------
  7185                                  ;
  7186                                  ; Procedure Name : $GetExtCntry
  7187                                  ;
  7188                                  ; Inputs:
  7189                                  ;	if AL >= 20H
  7190                                  ;	  AL= 20H    capitalize single char, DL= char
  7191                                  ;	      21H    capitalize string, CX= string length
  7192                                  ;	      22H    capitalize ASCIIZ string
  7193                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7194                                  ;	      80H bit 0 = use normal upper case table
  7195                                  ;		      1 = use file upper case table
  7196                                  ;	   DS:DX points to string
  7197                                  ;
  7198                                  ;	else
  7199                                  ;
  7200                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7201                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7202                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7203                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7204                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7205                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7206                                  ;	INT	21
  7207                                  ; Function:
  7208                                  ;	give users extended country dependent information
  7209                                  ;	or capitalize chars
  7210                                  ; Outputs:
  7211                                  ;	  No Carry:
  7212                                  ;	     extended country info is succesfully returned
  7213                                  ;	  Carry:
  7214                                  ;	     Register AX has the error code.
  7215                                  ;	     AX=0, NO	 for YES/NO CHECK
  7216                                  ;		1, YES
  7217                                  ;----------------------------------------------------------------------------
  7218                                  
  7219                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7220                                  
  7221                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7222                                  
  7223                                  	; MSDOS 6.0
  7224                                  _$GetExtCntry:
  7225 00000CD8 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7226 00000CDA 7269                    	JB	short notcap
  7227                                  capcap: 				;
  7228 00000CDC A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7229 00000CDE 7505                    	JNZ	short fileupper		; file upper case
  7230                                  
  7231                                  ;hkn; UCASE_TAB in DOSDATA
  7232 00000CE0 BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7233 00000CE3 EB05                    	JMP	SHORT capit
  7234                                  
  7235                                  fileupper:
  7236                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7237                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7238                                  	; AL >= 80h
  7239 00000CE5 247F                    	and	al,7Fh
  7240                                  
  7241                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7242 00000CE7 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7243                                  capit:					;
  7244 00000CEA 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7245 00000CEC 750D                    	JNZ	short chkyes		; no
  7246 00000CEE 88D0                    	MOV	AL,DL			; set up AL
  7247 00000CF0 E8A842                  	call	GETLET3 		; upper case it
  7248 00000CF3 E88FF7                  	call	Get_User_Stack		; get user stack
  7249                                  	;mov	[si+6],al
  7250 00000CF6 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7251 00000CF9 EBC7                    	JMP	SHORT nono		; done
  7252                                  chkyes: 				;
  7253 00000CFB 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7254 00000CFD 7522                    	JNZ	short capstring		; no
  7255                                  
  7256 00000CFF 31C0                    	XOR	AX,AX			; presume NO
  7257                                  		      
  7258                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7259                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7260                                  
  7261                                  	; 06/08/2018 - Retro DOS v3.0
  7262                                  	; 13/05/2019 - Retro DOS v4.0
  7263                                  	;cmp	dl,'Y'
  7264 00000D01 2E3A16[1A0A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7265 00000D06 7416                    	JZ	short yesyes		; yes
  7266                                  	;cmp	dl,'y'
  7267 00000D08 2E3A16[1C0A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7268 00000D0D 740F                    	JZ	short yesyes		; yes
  7269                                  	;cmp	dl,'N'
  7270 00000D0F 2E3A16[1B0A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7271 00000D14 74AC                    	JZ	short nono		; no
  7272                                  	;cmp	dl,'n'
  7273 00000D16 2E3A16[1D0A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7274 00000D1B 74A5                    	JZ	short nono		; no
  7275                                  ;dbcs_char:				;
  7276 00000D1D 40                      	INC	AX			; not YES or NO
  7277                                  yesyes: 				;
  7278 00000D1E 40                      	INC	AX			; return 1
  7279                                  	; 15/12/2022
  7280                                  ;nono:	
  7281 00000D1F EBA1                    	jmp	short SYS_RET_OK_jmp	;
  7282                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7283                                  	;jmp	SYS_RET_OK		; done
  7284                                  
  7285                                  capstring:				;
  7286 00000D21 89D6                    	MOV	SI,DX			; si=dx
  7287 00000D23 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7288 00000D25 750D                    	JNZ	short capascii		; no
  7289                                  	;OR	CX,CX			; check count 0
  7290                                  	;JZ	short nono		; yes finished
  7291                                  	; 06/01/2024
  7292 00000D27 E399                    	jcxz	nono
  7293                                  concap: 				;
  7294 00000D29 AC                      	LODSB				; get char
  7295 00000D2A E86E42                  	call	GETLET3 		; upper case it
  7296 00000D2D 8844FF                  	MOV	byte [SI-1],AL		; store back
  7297                                  ;next99: 				;
  7298 00000D30 E2F7                    	LOOP	concap			; continue
  7299 00000D32 EB8E                    	JMP	short nono		; done
  7300                                  capascii:				;
  7301 00000D34 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7302 00000D36 7545                    	JNZ	short capinval		; no
  7303                                  concap2:				;
  7304 00000D38 AC                      	LODSB				; get char
  7305 00000D39 08C0                    	or	al,al			; end of string ?
  7306 00000D3B 7485                    	JZ	short nono		; yes
  7307 00000D3D E85B42                  	call	GETLET3 		; upper case it
  7308 00000D40 8844FF                  	MOV	[SI-1],AL		; store back
  7309 00000D43 EBF3                    	JMP	short concap2 		; continue
  7310                                  
  7311                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7312                                  
  7313                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7314                                  ; _$GetExtCntry:
  7315                                  
  7316                                  notcap:
  7317 00000D45 83F905                  	CMP	CX,5			; minimum size is 5
  7318 00000D48 7277                    	jb	short sizeerror
  7319                                  
  7320                                  GEC_CONT:
  7321                                  ;hkn; SS is DOSDATA
  7322                                  	;context DS
  7323                                  
  7324 00000D4A 16                      	push	ss
  7325                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7326 00000D4B 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7327                                  	
  7328                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7329 00000D4C BE[0512]                	MOV	SI,COUNTRY_CDPG
  7330                                  
  7331 00000D4F 83FAFF                  	CMP	DX,-1			; active country ?
  7332 00000D52 7503                    	JNZ	short GETCDPG 		; no
  7333                                  
  7334                                  ;hkn; use DS override to accesss country_cdpg fields
  7335                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7336                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7337 00000D54 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7338                                  					; get active country id;smr;use DS
  7339                                  GETCDPG:
  7340 00000D57 83FBFF                  	CMP	BX,-1			; active code page?
  7341 00000D5A 7503                    	JNZ	short CHKAGAIN		; no, check again
  7342                                  
  7343                                  ;hkn; use DS override to accesss country_cdpg fields
  7344                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7345                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7346 00000D5C 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7347                                  					; get active code page id;smr;Use DS
  7348                                  CHKAGAIN:
  7349                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7350 00000D5F 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7351                                  					; same as active country id?;smr;use DS
  7352 00000D62 7550                    	JNZ	short CHKNLS		; no
  7353                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7354 00000D64 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7355                                  					; same as active code pg id?;smr;use DS
  7356 00000D67 754B                    	JNZ	short CHKNLS		; no
  7357                                  CHKTYPE:
  7358                                  	;mov	bx,[si+48h]
  7359 00000D69 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7360                                  					; bx = sys code page id;smr;use DS
  7361 00000D6C 51                      	PUSH	CX			; save cx
  7362                                  	;mov	cx,[si+4Ah]
  7363 00000D6D 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7364                                  	;mov	si,COUNTRY_CDPG+76
  7365 00000D70 BE[5112]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7366                                  NXTENTRY:
  7367 00000D73 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7368 00000D75 740B                    	JZ	short FOUNDIT
  7369 00000D77 83C605                  	ADD	SI,5			; next entry
  7370 00000D7A E2F7                    	LOOP	NXTENTRY
  7371 00000D7C 59                      	POP	CX
  7372                                  capinval:
  7373                                  	;error	error_invalid_function	; info type not found
  7374                                  	;mov	al,1
  7375 00000D7D B001                    	mov	al,error_invalid_function
  7376                                  ;SYS_RET_ERR_jmp:
  7377                                  	;jmp	SYS_RET_ERR
  7378                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7379                                  SYS_RET_ERR_jmp:
  7380 00000D7F E9C2F8                  	jmp	SYS_RET_ERR	
  7381                                  
  7382                                  FOUNDIT:
  7383 00000D82 A4                      	MOVSB				; move info id byte
  7384 00000D83 59                      	POP	CX			; restore char count
  7385                                  	;cmp	al,1
  7386 00000D84 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7387 00000D86 7415                    	JZ	short setsize
  7388 00000D88 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7389 00000D8B B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7390                                  OK_RETN:
  7391 00000D8E F3A4                    	REP	MOVSB			; copy info
  7392 00000D90 89C1                    	MOV	CX,AX			; CX = actual length returned
  7393 00000D92 89D8                    	MOV	AX,BX			; return sys code page in ax
  7394                                  GETDONE:
  7395 00000D94 E8EEF6                  	call	Get_User_Stack		; return actual length to user's CX
  7396                                  	;mov	[si+4],cx 
  7397 00000D97 894C04                  	MOV	[SI+user_env.user_CX],CX
  7398                                  	;jmp	SYS_RET_OK
  7399                                  	; 15/12/2022
  7400                                  	; 25/06/2019
  7401 00000D9A E9A1F8                  	jmp	SYS_RET_OK_clc
  7402                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7403                                  	; 15/12/2022
  7404                                  ;nono_jmp:
  7405                                  	;jmp	short nono
  7406                                  setsize:
  7407 00000D9D 83E903                  	SUB	CX,3			; size after length field
  7408 00000DA0 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7409 00000DA2 7302                    	JAE	short setsize2		; no
  7410 00000DA4 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7411                                  setsize2:
  7412 00000DA6 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7413                                  	;ADD	DI,2			; update index
  7414                                  	;ADD	SI,2
  7415                                  	; 06/01/2024
  7416 00000DA9 47                      	inc	di
  7417 00000DAA 47                      	inc	di
  7418 00000DAB 46                      	inc	si
  7419 00000DAC 46                      	inc	si
  7420 00000DAD 89C8                    	MOV	AX,CX
  7421 00000DAF 83C003                  	ADD	AX,3			; AX has the actual length
  7422 00000DB2 EBDA                    	JMP	short OK_RETN 		; go move it
  7423                                  CHKNLS:
  7424 00000DB4 30E4                    	XOR	AH,AH
  7425                                  	;PUSH	AX			; save info type
  7426                                  	;POP	BP			; bp = info type
  7427                                  	; 06/01/2024
  7428 00000DB6 89C5                    	mov	bp,ax
  7429                                  	
  7430                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7431 00000DB8 B80014                  	mov     ax,1400h
  7432 00000DBB CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7433                                  			; Return: AL = 00h not installed, OK to install
  7434                                  			; 01h not installed, not OK
  7435                                  			; FFh installed
  7436 00000DBD 3CFF                    	CMP	AL,0FFH
  7437 00000DBF 7404                    	JZ	short NLSNXT		; in memory
  7438                                  
  7439                                  sizeerror:
  7440                                  	;error	error_invalid_function
  7441                                  	;mov	al,1
  7442 00000DC1 B001                    	mov	al,error_invalid_function
  7443                                  	;jmp	SYS_RET_ERR
  7444                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7445                                  sys_ret_err_jmp2:
  7446 00000DC3 EBBA                    	jmp	short SYS_RET_ERR_jmp
  7447                                  
  7448                                  NLSNXT: 
  7449                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7450 00000DC5 B80214                  	mov     ax,1402h
  7451 00000DC8 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7452                                  			; BP = subfunction, BX = code page
  7453                                  			; DX = country code, DS:SI -> internal code page structure
  7454                                  			; ES:DI -> user buffer, CX = size of user buffer
  7455                                  			; Return: AL = status
  7456                                  			; 00h successful
  7457                                  			; else DOS error code
  7458                                  
  7459 00000DCA 3C00                    	CMP	AL,0			; success ?
  7460 00000DCC 7505                    	JNZ	short NLSERROR
  7461                                  	;mov	ax,[si+48h] ; 13/05/2019
  7462 00000DCE 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]
  7463                                  			; ax = sys code page id;smr;use ds;
  7464                                  			;BUGBUG;check whether DS is OK after the above calls
  7465 00000DD1 EBC1                    	JMP	short GETDONE
  7466                                  seterr:
  7467                                  	; 15/12/2022
  7468                                  NLSERROR:
  7469                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7470                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7471                                  	;jmp	short sys_ret_err_jmp2
  7472                                  	; 15/12/2022
  7473 00000DD3 EBAA                    	jmp	short SYS_RET_ERR_jmp
  7474                                  
  7475                                  ;EndProc $GetExtCntry
  7476                                  
  7477                                  ; 13/05/2019 - Retro DOS v4.0
  7478                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7479                                  
  7480                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7481                                  ;----------------------------------------------------------------------------
  7482                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7483                                  ;
  7484                                  ;   System call format:
  7485                                  ;
  7486                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7487                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7488                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7489                                  ;	INT	21
  7490                                  ;
  7491                                  ;	ENTRY	(al) = n
  7492                                  ;		(bx) = code page
  7493                                  ;	EXIT	'C' clear
  7494                                  ;		  global code page is set	(set global code page)
  7495                                  ;		  (BX) = active code page id	(get global code page)
  7496                                  ;		  (DX) = system code page id	(get global code page)
  7497                                  ;		'C' set
  7498                                  ;		  (AX) = error code
  7499                                  
  7500                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7501                                  
  7502                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7503                                  	; DOSCODE:4BC9h
  7504                                  
  7505                                  _$GetSetCdPg:
  7506                                  
  7507                                  ;hkn; SS is DOSDATA
  7508                                  	;context DS
  7509                                  
  7510 00000DD5 16                      	push	ss
  7511 00000DD6 1F                      	pop	ds
  7512                                  
  7513                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7514 00000DD7 BE[0512]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7515                                  
  7516 00000DDA 3C01                    	CMP	AL,1		       ; get global code page
  7517 00000DDC 7512                    	JNZ	short setglpg 	       ; set global code page
  7518                                  	
  7519                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7520                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7521 00000DDE 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7522                                  					; get active code page id;smr;use ds
  7523                                  	;mov	dx,[si+48h]
  7524 00000DE1 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7525                                  				  	; get sys code page id;smr;use ds
  7526 00000DE4 E89EF6                  	call	Get_User_Stack
  7527                                  ;ASSUME DS:NOTHING
  7528                                  	;;mov	[si+2],bx
  7529                                  	;MOV	[SI+user_env.user_BX],BX ; update returned bx
  7530                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7531 00000DE7 E85BFE                  	call    set_user_bx	; MOV [SI+user_env.user_BX],BX 
  7532                                  	;mov	[si+6],dx
  7533 00000DEA 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7534                                  OK_RETURN:
  7535                                  	; 15/12/2022
  7536                                  	;transfer SYS_RET_OK
  7537 00000DED E94BF8                  	jmp	SYS_RET_OK
  7538                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7539                                  	;jmp	short nono_jmp
  7540                                  
  7541                                  ;hkn; ASSUME DS:DOSGROUP
  7542                                  ;ASSUME	DS:DOSDATA
  7543                                  
  7544                                  setglpg:
  7545 00000DF0 3C02                    	CMP	AL,2
  7546 00000DF2 752F                    	JNZ	short nomem
  7547                                  	
  7548                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7549                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7550 00000DF4 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7551                                  	
  7552                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7553 00000DF7 B80014                  	mov     ax,1400h
  7554 00000DFA CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7555                                  			; Return: AL = 00h not installed, OK to install
  7556                                  			; 01h not installed, not OK
  7557                                  			; FFh installed
  7558 00000DFC 3CFF                    	CMP	AL,0FFH
  7559 00000DFE 7523                    	JNZ	short nomem		; not in memory
  7560                                  
  7561                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7562 00000E00 B80114                  	mov     ax,1401h
  7563 00000E03 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7564                                  			; DS:SI -> internal code page structure
  7565                                  			; BX = new code page, DX = country code???
  7566                                  			; Return: AL = status
  7567                                  			; 00h successful
  7568                                  			; else DOS error code
  7569                                  	;cmp	al,0
  7570 00000E05 08C0                    	or	al,al			; success ?
  7571 00000E07 74E4                    	JZ	short OK_RETURN		; yes
  7572                                  
  7573 00000E09 3C41                    	CMP	AL,65			; set device code page failed
  7574 00000E0B 75C6                    	JNZ	short seterr
  7575                                  	;MOV	AX,65
  7576                                  	; 06/01/2024
  7577 00000E0D 98                      	cbw
  7578 00000E0E A3[2403]                	MOV	[EXTERR],AX
  7579                                  	;mov	byte [EXTERR_ACTION],6
  7580                                  	;mov	byte [EXTERR_CLASS],5
  7581                                  	;mov	byte [EXTERR_LOCUS],4
  7582 00000E11 C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7583 00000E16 C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7584 00000E1B C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7585                                  	;transfer From_GetSet
  7586 00000E20 E929F8                  	jmp	From_GetSet
  7587                                  
  7588                                  	; 15/12/2022
  7589                                  ;seterr:
  7590                                  	;;;transfer SYS_RET_ERR
  7591                                  	;;jmp	SYS_RET_ERR
  7592                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7593                                  	;jmp	short NLSERROR
  7594                                  
  7595                                  nomem:
  7596                                  	;error	error_invalid_function	; function not defined
  7597                                  	;mov	al,1
  7598 00000E23 B001                    	mov	al,error_invalid_function
  7599 00000E25 EBAC                    	jmp	short seterr
  7600                                  
  7601                                  ;EndProc $GetSetCdPg
  7602                                  
  7603                                  ; 09/01/2024
  7604                                  ; 13/05/2019 - Retro DOS v4.0
  7605                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7606                                  
  7607                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7608                                  ;----------------------------------------------------------------------------
  7609                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7610                                  ;
  7611                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7612                                  ;		drive.
  7613                                  ;
  7614                                  ;	This call returns the same info in the same registers (except for the
  7615                                  ;	FAT pointer) as the old FAT pointer calls
  7616                                  ;
  7617                                  ;	ENTRY	DL = Drive number
  7618                                  ;	EXIT	AX = Sectors per allocation unit
  7619                                  ;		   = -1 if bad drive specified
  7620                                  ;		On User Stack
  7621                                  ;		    BX = Number of free allocation units
  7622                                  ;		    DX = Total Number of allocation units on disk
  7623                                  ;		    CX = Sector size
  7624                                  
  7625                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7626                                  
  7627                                  _$GET_DRIVE_FREESPACE:
  7628                                  
  7629                                  ;hkn; SS is DOSDATA
  7630                                  	;context DS
  7631 00000E27 16                      	push	ss
  7632 00000E28 1F                      	pop	ds
  7633                                  
  7634 00000E29 88D0                    	MOV	AL,DL
  7635                                  	;invoke	GetThisDrv		; Get drive
  7636 00000E2B E8995B                  	call	GETTHISDRV
  7637                                  SET_AX_RET:
  7638 00000E2E 7212                    	JC	short BADFDRV
  7639                                  	;invoke	DISK_INFO
  7640 00000E30 E82F1E                  	call	DISK_INFO
  7641 00000E33 87D3                    	XCHG	DX,BX
  7642                                  	;JC	short SET_AX_RET	; User FAILed to I 24
  7643                                  	; 06/01/2024
  7644 00000E35 720B                    	jc	short BADFDRV
  7645 00000E37 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7646                                  DoSt:
  7647 00000E39 E849F6                  	call	Get_User_Stack
  7648                                  ;ASSUME	DS:NOTHING
  7649                                  	;mov	[si+6],dx
  7650                                  	;;mov	[si+4],cx
  7651                                  	;;mov	[si+2],bx
  7652                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7653 00000E3C 895406                  	MOV	[SI+user_env.user_DX],DX ; total clusters
  7654                                  	;MOV	[SI+user_env.user_CX],CX
  7655                                  	;MOV	[SI+user_env.user_BX],BX
  7656                                  	;;MOV	[SI+user_env.user_AX],AX
  7657                                  	;mov	[si],ax
  7658                                  	;;return
  7659                                  	;retn
  7660                                  	; 09/01/2024
  7661 00000E3F E9FEFD                  	jmp     gdrvfspc_ret    ; ax = sectors per cluster (modified)
  7662                                  
  7663                                  BADFDRV:
  7664                                  	; MSDOS 3.3
  7665                                  	;;mov	al,0Fh
  7666                                  	;mov	al,error_invalid_drive	; Assume error
  7667                                  
  7668                                  	; 13/05/2019 - Retro DOS v4.0
  7669                                  
  7670                                  	; MSDOS 6.0 & MSDOS 3.3
  7671                                  	;invoke	FCB_RET_ERR
  7672 00000E42 E815F8                  	call	FCB_RET_ERR
  7673                                  	
  7674 00000E45 B8FFFF                  	MOV	AX,-1
  7675 00000E48 EBEF                    	JMP	short DoSt
  7676                                  
  7677                                  ;EndProc $GET_DRIVE_FREESPACE
  7678                                  
  7679                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7680                                  ;----------------------------------------------------------------------------
  7681                                  ;**	$Get_DMA - Get Disk Transfer Address
  7682                                  ;
  7683                                  ;	ENTRY	none
  7684                                  ;	EXIT	ES:BX is current transfer address
  7685                                  ;	USES	all
  7686                                  
  7687                                  	; 09/01/2024
  7688                                  _$GET_DMA:
  7689 00000E4A 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7690 00000E4F 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7691 00000E54 E82EF6                  	call	Get_User_Stack
  7692                                  	;mov	[si+2],bx
  7693                                  	;mov	[si+10h],cx
  7694                                  	; 09/01/2024
  7695                                  	;MOV	[SI+user_env.user_BX],BX
  7696 00000E57 894C10                  	MOV	[SI+user_env.user_ES],CX
  7697                                  	;retn
  7698                                  	; 09/01/2024
  7699 00000E5A E9E8FD                  	jmp	set_user_bx ; (PCDOS 7.1 IBMDOS.COM)
  7700                                  
  7701                                  ;**	$Set_DMA - Set Disk Transfer Address
  7702                                  ;----------------------------------------------------------------------------
  7703                                  ;	ENTRY	DS:DX is current transfer address
  7704                                  ;	EXIT	none
  7705                                  ;	USES	all
  7706                                  
  7707                                  _$SET_DMA:
  7708 00000E5D 368916[2C03]            	MOV	[SS:DMAADD],DX
  7709 00000E62 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7710 00000E67 C3                      	retn
  7711                                  
  7712                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7713                                  ;------------------------------------------------------------------------------
  7714                                  
  7715                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7716                                  ;-----------------------------------------------------
  7717                                  ;	ENTRY	none
  7718                                  ;	EXIT	(AL) = drive number
  7719                                  ;	USES	all
  7720                                  
  7721                                  _$GET_DEFAULT_DRIVE:
  7722 00000E68 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7723 00000E6C C3                      	retn
  7724                                  
  7725                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7726                                  ;-----------------------------------------------------
  7727                                  ;	ENTRY	(DL) = Drive number for new default drive
  7728                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7729                                  
  7730                                  _$SET_DEFAULT_DRIVE:
  7731 00000E6D 88D0                    	MOV	AL,DL
  7732 00000E6F FEC0                    	INC	AL			; A=1, B=2...
  7733 00000E71 E8375B                  	call	GetVisDrv		; see if visible drive
  7734 00000E74 7204                    	JC	short SETRET		; errors do not set
  7735 00000E76 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7736                                  
  7737                                  SETRET:
  7738 00000E7A 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7739 00000E7E C3                      	retn
  7740                                  
  7741                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7742                                  ;----------------------------------------------------------------------------
  7743                                  
  7744                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7745                                  ;---------------------------------------------------
  7746                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7747                                  ;	contents of an interrupt vector.
  7748                                  ;
  7749                                  ;	ENTRY	(AL) = interrupt number
  7750                                  ;	EXIT	(ES:BX) = current interrupt vector
  7751                                  
  7752                                  _$GET_INTERRUPT_VECTOR:
  7753 00000E7F E82E00                  	CALL	RECSET
  7754 00000E82 26C41F                  	LES	BX,[ES:BX]
  7755 00000E85 E8FDF5                  	call	Get_User_Stack
  7756                                  set_user_es_bx:
  7757                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7758                                  	;;mov	[si+2],bx
  7759                                  	;mov	[si+10h],es
  7760                                  	;MOV	[SI+user_env.user_BX],BX
  7761 00000E88 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7762                                  	;retn
  7763 00000E8B E9B7FD                  	jmp	set_user_bx
  7764                                  
  7765                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7766                                  ;---------------------------------------------------
  7767                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7768                                  ;	contents of an interrupt vector.
  7769                                  ;
  7770                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7771                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7772                                  ;	for explanation.
  7773                                  ;
  7774                                  ;	ENTRY	(AL) = interrupt number
  7775                                  ;		(ds:dx) = desired new vector value
  7776                                  ;	EXIT	none
  7777                                  ;	USES	all
  7778                                  
  7779                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7780                                  ; 13/05/2019 - Retro DOS v4.0
  7781                                  
  7782                                  _$SET_INTERRUPT_VECTOR:
  7783 00000E8E E81F00                  	CALL	RECSET
  7784 00000E91 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7785 00000E92 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7786 00000E95 268C5F02                	MOV	[ES:BX+2],DS
  7787 00000E99 FB                      	STI
  7788                                  					; M004, M068 - Start
  7789                                  	; MSDOS 6.0
  7790 00000E9A 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7791                                  					; Q: was the previous call an int 21h
  7792                                  					;    exec call
  7793                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7794                                  	;jnz	short siv_1		; Y: go set count
  7795                                  	;retn				; N: return
  7796                                  	; 15/12/2022
  7797 00000EA0 740D                    	jz	short siv_2
  7798                                  siv_1:	
  7799 00000EA2 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7800 00000EA8 7505                    	jnz	short siv_2		 ; N: done
  7801                                  	; 20/09/2023
  7802 00000EAA 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
  7803                                  	;mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos
  7804                                  					 ; dispatcher to turn A20 Off before
  7805                                  					 ; returning to user.
  7806                                  siv_2:
  7807                                  	; 07/12/2022
  7808 00000EAF C3                      	retn				; M004, M068 - End
  7809                                  	
  7810                                  RECSET:
  7811 00000EB0 31DB                    	XOR	BX,BX
  7812 00000EB2 8EC3                    	MOV	ES,BX
  7813 00000EB4 88C3                    	MOV	BL,AL
  7814 00000EB6 D1E3                    	SHL	BX,1
  7815 00000EB8 D1E3                    	SHL	BX,1
  7816 00000EBA C3                      	retn
  7817                                  
  7818                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7819                                  ;-------------------------------------------------------------------------------------
  7820                                  
  7821                                  ;**	$Char_Oper - Manipulate Switch Character
  7822                                  ;
  7823                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7824                                  ;
  7825                                  ;	ENTRY	AL = function:
  7826                                  ;		    0 - read switch char
  7827                                  ;		    1 - set switch char (char in DL)
  7828                                  ;		    2 - read device availability
  7829                                  ;			Always returns available
  7830                                  ;		    3 - set device availability
  7831                                  ;			No longer supported (NOP)
  7832                                  ;	EXIT	(al) = 0xff iff error
  7833                                  ;		(al) != 0xff if ok
  7834                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7835                                  ;	USES	AL, DL
  7836                                  ;
  7837                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7838                                  ;		The character / is always returned for subfunction 0,
  7839                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7840                                  
  7841                                  ; 13/05/2019 - Retro DOS v4.0
  7842                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7843                                  
  7844                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7845                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7846                                  
  7847                                  _$CHAR_OPER:
  7848                                  	; MSDOS 6.0
  7849 00000EBB 08C0                    	or	al,al				; get switch?
  7850 00000EBD B22F                    	mov	dl,'/'				; assume yes
  7851 00000EBF 7407                    	jz	short chop_1			; jump if yes
  7852 00000EC1 3C02                    	cmp	al,2				; check device availability?
  7853 00000EC3 B2FF                    	mov	dl,-1				; assume yes
  7854 00000EC5 7401                    	jz	short chop_1			; jump if yes
  7855 00000EC7 C3                      	retn					; otherwise just quit
  7856                                  
  7857                                  ; subfunctions requiring return of value to user come here. DL holds
  7858                                  ; value to return
  7859                                  
  7860                                  chop_1:
  7861 00000EC8 E8BAF5                  	call	Get_User_Stack
  7862 00000ECB 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7863 00000ECE C3                      	retn
  7864                                  
  7865                                  	; MSDOS 3.3
  7866                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7867                                  	;push	ss
  7868                                  	;pop	ds
  7869                                  	;cmp	al,1
  7870                                  	;jb	short chop_1
  7871                                  	;jz	short chop_2
  7872                                  	;cmp	al,3
  7873                                  	;jb	short chop_3
  7874                                  	;jz	short chop_5
  7875                                  	;mov	al,0FFh
  7876                                  	;retn
  7877                                  ;chop_1:
  7878                                  	;mov	dl,[chSwitch]
  7879                                  	;jmp	short chop_4
  7880                                  ;chop_2:
  7881                                  	;mov	[chSwitch],dl
  7882                                  	;retn
  7883                                  ;chop_3:
  7884                                  	;mov	dl, FFh
  7885                                  ;chop_4:
  7886                                  	;call	Get_User_Stack
  7887                                  	;mov	[si+6],dx
  7888                                  ;chop_5:
  7889                                  	;retn
  7890                                  
  7891                                  ;**	$GetExtendedError - Return Extended error code
  7892                                  ;----------------------------------------------------------------------------
  7893                                  ;	This function reads up the extended error info from the static
  7894                                  ;	variables where it was stored.
  7895                                  ;
  7896                                  ;	ENTRY	none
  7897                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7898                                  ;		BL = recommended action
  7899                                  ;		BH = class of error
  7900                                  ;		CH = locus of error
  7901                                  ;		ES:DI = may be pointer
  7902                                  ;	USES	ALL
  7903                                  
  7904                                  	; 09/01/2024
  7905                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7906                                  
  7907                                  _$GetExtendedError:
  7908 00000ECF 16                      	push	ss
  7909 00000ED0 1F                      	pop	ds
  7910 00000ED1 A1[2403]                	MOV	AX,[EXTERR]
  7911 00000ED4 C43E[2803]              	LES	DI,[EXTERRPT]
  7912 00000ED8 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7913 00000EDC 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7914 00000EE0 E8A2F5                  	call	Get_User_Stack
  7915                                  	;mov	[si+0Ah],di
  7916 00000EE3 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7917                                  
  7918                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7919                                  	;;mov	[si+10h],es
  7920                                  	;MOV	[SI+user_env.user_ES],ES
  7921                                  	;;mov	[si+2],bx
  7922                                  	;MOV	[SI+user_env.user_BX],BX
  7923 00000EE6 E89FFF                  	call	set_user_es_bx
  7924                                  
  7925                                  	;mov	[si+4],cx
  7926 00000EE9 894C04                  	MOV	[SI+user_env.user_CX],CX
  7927                                  jmp_SYS_RET_OK:
  7928                                  	; 15/12/2022
  7929                                  	;jmp	SYS_RET_OK
  7930                                  	; 25/06/2019
  7931 00000EEC E94FF7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7932                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7933                                  ;jmp_SYS_RET_OK:
  7934                                  	;jmp	SYS_RET_OK
  7935                                  
  7936                                  ; --------------------------------------------------------------------------
  7937                                  ; 09/01/2024
  7938                                  %if 0
  7939                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7940                                  	; DOSCODE:4CF3h
  7941                                  ;patch_or_unknown:
  7942                                  ;get_code_page:
  7943                                  	push    si
  7944                                  	mov     si, COUNTRY_CDPG
  7945                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7946                                  	mov     ax, [ss:si+6Ah]
  7947                                  	pop     si
  7948                                  	retn
  7949                                  %endif
  7950                                  ; --------------------------------------------------------------------------
  7951                                  
  7952                                  ; 29/04/2019 - Retro DOS v4.0
  7953                                  
  7954                                  ;BREAK	<ECS_call - Extended Code System support function>
  7955                                  ;---------------------------------------------------------------------------
  7956                                  ; Inputs:
  7957                                  ;	AL = 0	get lead byte table
  7958                                  ;		on return DS:SI has the table location
  7959                                  ;
  7960                                  ;	AL = 1	set / reset interim console flag
  7961                                  ;		DL = flag (00H or 01H)
  7962                                  ;		no return
  7963                                  ;
  7964                                  ;	AL = 2	get interim console flag
  7965                                  ;		on return DL = current flag value
  7966                                  ;
  7967                                  ;	AL = OTHER then error, and returns with:
  7968                                  ;		AX = error_invalid_function
  7969                                  ;
  7970                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  7971                                  ;	 SS:SP WILL BE PRESERVED!
  7972                                  ;---------------------------------------------------------------------------
  7973                                  
  7974                                  _$ECS_Call:
  7975 00000EEF 08C0                    	or	al,al			; AL = 0 (get table)?
  7976                                  	;jnz	short _okok
  7977                                  	; 15/12/2022
  7978 00000EF1 7403                    	jz	short get_lbt
  7979                                  ;_okok:
  7980 00000EF3 E945F7                  	jmp	SYS_RET_OK
  7981                                  get_lbt:
  7982 00000EF6 E88CF5                  	call	Get_User_Stack		; *
  7983                                  
  7984                                  ;hkn; dbcs_table moved low to dosdata
  7985                                  	;mov	word [si+8],DBCS_TAB+2
  7986 00000EF9 C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  7987                                  
  7988 00000EFE 06                      	push	es
  7989                                  	;getdseg <es>			; es = DOSDATA
  7990 00000EFF 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  7991                                  	;mov	[si+14],es
  7992 00000F04 8C440E                  	mov	[SI+user_env.user_DS],es
  7993 00000F07 07                      	pop	es
  7994                                  
  7995                                  	; 15/12/2022
  7996 00000F08 EBE2                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  7997                                  ;_okok:
  7998                                  	; 15/12/2022	
  7999                                  	;;transfer SYS_RET_OK
  8000                                  	;jmp	short jmp_SYS_RET_OK
  8001                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8002                                  	;;jmp	SYS_RET_OK
  8003                                  	;jmp	short jmp_SYS_RET_OK
  8004                                  
  8005                                  ;============================================================================
  8006                                  ; PARSE.ASM, MSDOS 6.0, 1991
  8007                                  ;============================================================================
  8008                                  ; 19/07/2018 - Retro DOS v3.0
  8009                                  ; 15/05/2019 - Retro DOS v4.0
  8010                                  
  8011                                  ; System calls for parsing command lines
  8012                                  ;
  8013                                  ;   $PARSE_FILE_DESCRIPTOR
  8014                                  ;
  8015                                  ;   Modification history:
  8016                                  ;
  8017                                  ;       Created: ARR 30 March 1983
  8018                                  ;               EE PathParse 10 Sept 1983
  8019                                  ;
  8020                                  
  8021                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  8022                                  ;---------------------------------------------------------------------------
  8023                                  ; Inputs:
  8024                                  ;       DS:SI Points to a command line
  8025                                  ;       ES:DI Points to an empty FCB
  8026                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  8027                                  ;                   = 0 Parse stops if separator encountered
  8028                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  8029                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  8030                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  8031                                  ;                   = 0  "       "      "       - put blanks in FCB
  8032                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  8033                                  ;                   = 0  "       "      "        - put blanks in FCB
  8034                                  ; Function:
  8035                                  ;       Parse command line into FCB
  8036                                  ; Returns:
  8037                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  8038                                  ;       DS:SI points to first character after filename
  8039                                  ;---------------------------------------------------------------------------
  8040                                  
  8041                                  _$PARSE_FILE_DESCRIPTOR:
  8042 00000F0A E8303F                  	call	MAKEFCB
  8043 00000F0D 56                      	PUSH    SI
  8044 00000F0E E874F5                  	call	Get_User_Stack
  8045                                  	;pop	word [si+8]
  8046 00000F11 8F4408                  	POP     word [SI+user_env.user_SI]
  8047 00000F14 C3                      	retn
  8048                                  
  8049                                  ;============================================================================
  8050                                  ; MISC.ASM, MSDOS 6.0, 1991
  8051                                  ;============================================================================
  8052                                  ; 19/07/2018 - Retro DOS v3.0
  8053                                  
  8054                                  ; 29/04/2019 - Retro DOS v4.0
  8055                                  
  8056                                  ;ENTRYPOINTSEG	EQU	0CH
  8057                                  ;MAXDIF		EQU	0FFFH
  8058                                  ;SAVEXIT 	EQU	10
  8059                                  ;WRAPOFFSET	EQU	0FEF0h
  8060                                  
  8061                                  ;
  8062                                  ;----------------------------------------------------------------------------
  8063                                  ;
  8064                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  8065                                  ;
  8066                                  ;	Return Stuff sort of like old get fat call
  8067                                  ;
  8068                                  ;	ENTRY	none
  8069                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8070                                  ;			GOD help anyone who tries to do ANYTHING except
  8071                                  ;			READ this ONE byte.
  8072                                  ;		DX = Total Number of allocation units on disk
  8073                                  ;		CX = Sector size
  8074                                  ;		AL = Sectors per allocation unit
  8075                                  ;		   = -1 if bad drive specified
  8076                                  ;	USES	all
  8077                                  ;
  8078                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  8079                                  ;
  8080                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  8081                                  ;
  8082                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  8083                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8084                                  ;			GOD help anyone who tries to do ANYTHING except
  8085                                  ;			READ this ONE byte.
  8086                                  ;		DX = Total Number of allocation units on disk
  8087                                  ;		CX = Sector size
  8088                                  ;		AL = Sectors per allocation unit
  8089                                  ;		   = -1 if bad drive specified
  8090                                  ;	USES	all
  8091                                  ;
  8092                                  ;----------------------------------------------------------------------------
  8093                                  ;
  8094                                  
  8095                                  _$SLEAZEFUNC:
  8096                                  	; 10/01/2024
  8097                                  	; 15/05/2019 - Retro DOS v4.0
  8098 00000F15 B200                    	MOV	DL,0
  8099                                  _$SLEAZEFUNCDL:
  8100 00000F17 16                      	push	ss
  8101 00000F18 1F                      	pop	ds
  8102                                  	
  8103 00000F19 88D0                    	MOV	AL,DL
  8104 00000F1B E8A95A                  	call	GETTHISDRV		; Get CDS structure
  8105                                  SET_AL_RET:
  8106                                  	; MSDOS 3.3
  8107                                  	;;mov	al, 0Fh
  8108                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  8109                                  	
  8110                                  	; MSDOS 6.0 & MSDOS 3.3
  8111 00000F1E 721D                    	JC	short BADSLDRIVE
  8112                                  
  8113 00000F20 E83F1D                  	call	DISK_INFO
  8114                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  8115 00000F23 7218                    	jc	short BADSLDRIVE
  8116 00000F25 8826[9805]              	MOV	[FATBYTE],AH
  8117                                  
  8118                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  8119                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  8120                                  ; CALL AGAIN
  8121                                  
  8122                                  	; 10/01/2024
  8123                                  	;MOV	DI,FATBYTE
  8124 00000F29 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  8125 00000F2B E857F5                  	call	Get_User_Stack
  8126                                  	;mov	[si+4],cx
  8127                                  	;mov	[si+6],bx
  8128                                  	;mov	[si+2],di
  8129 00000F2E 894C04                  	MOV	[SI+user_env.user_CX],CX
  8130 00000F31 895C06                  	MOV	[SI+user_env.user_DX],BX
  8131                                  	;MOV	[SI+user_env.user_BX],DI
  8132                                  	; 10/01/2024
  8133 00000F34 C74402[9805]            	MOV	word [SI+user_env.user_BX],FATBYTE
  8134                                  	
  8135                                  	;mov	[si+0Eh],ss
  8136 00000F39 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  8137                                  
  8138 00000F3C C3                      	retn
  8139                                  
  8140                                  BADSLDRIVE:
  8141 00000F3D E91AF7                  	jmp	FCB_RET_ERR
  8142                                  
  8143                                  ;
  8144                                  ;----------------------------------------------------------------------------
  8145                                  ;
  8146                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8147                                  ;
  8148                                  ;	Returns location of DOS status for interrupt routines
  8149                                  ;
  8150                                  ;	ENTRY	none
  8151                                  ;	EXIT	(es:bx) = flag location
  8152                                  ;	USES	all
  8153                                  ;
  8154                                  ;----------------------------------------------------------------------------
  8155                                  ;
  8156                                  
  8157                                  _$GET_INDOS_FLAG:
  8158 00000F40 E842F5                          CALL	Get_User_Stack
  8159                                          ;MOV	WORD [SI+2],INDOS
  8160 00000F43 C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8161                                  getin_segm:	; 13/01/2024
  8162                                  	;MOV	[SI+10H],SS
  8163 00000F48 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8164 00000F4B C3                      	RETN 
  8165                                  ;
  8166                                  ;----------------------------------------------------------------------------
  8167                                  ;
  8168                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8169                                  ;
  8170                                  ;	Return a pointer to interesting DOS variables This call is version
  8171                                  ;	dependent and is subject to change without notice in future versions.
  8172                                  ;	Use at risk.
  8173                                  ;
  8174                                  ;	ENTRY	none
  8175                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8176                                  ;	uses	ALL
  8177                                  ;
  8178                                  ;----------------------------------------------------------------------------
  8179                                  ;
  8180                                  
  8181                                  	; 13/01/2024
  8182                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:5226h
  8183                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:4D65h
  8184                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:4D58h	
  8185                                  
  8186                                  _$GET_IN_VARS:
  8187 00000F4C E836F5                  	CALL	Get_User_Stack
  8188                                  	;MOV	WORD [SI+2],SYSINITVAR
  8189                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8190 00000F4F C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8191                                  	; 13/01/2024
  8192                                  	;;MOV	[SI+10H],SS
  8193                                  	;MOV	[SI+user_env.user_ES],SS
  8194                                  	;RETN
  8195 00000F54 EBF2                    	jmp	short getin_segm
  8196                                  
  8197                                  ;
  8198                                  ;----------------------------------------------------------------------------
  8199                                  ;
  8200                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8201                                  ;
  8202                                  ;	Return pointer to drive parameter table for default drive
  8203                                  ;
  8204                                  ;	ENTRY	none
  8205                                  ;	EXIT	(ds:bx) = DPB address
  8206                                  ;	USES	all
  8207                                  ;
  8208                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8209                                  ;
  8210                                  ;	Return pointer to a specified drive parameter table
  8211                                  ;
  8212                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8213                                  ;	EXIT	(al) = 0 iff ok
  8214                                  ;		  (ds:bx) = DPB address
  8215                                  ;		(al) = -1 if bad drive
  8216                                  ;	USES	all
  8217                                  ;
  8218                                  ;----------------------------------------------------------------------------
  8219                                  ;
  8220                                  
  8221                                  ; 15/05/2019 - Retro DOS v4.0
  8222                                  
  8223                                  _$GET_DEFAULT_DPB:
  8224 00000F56 B200                    	MOV	DL,0
  8225                                  _$GET_DPB:
  8226 00000F58 16                      	push	ss
  8227 00000F59 1F                      	pop	ds
  8228                                  
  8229 00000F5A 88D0                    	MOV	AL,DL
  8230 00000F5C E8685A                  	call	GETTHISDRV		; Get CDS structure
  8231 00000F5F 7222                    	JC	short ISNODRV 		; no valid drive
  8232 00000F61 C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8233                                  	;;test	word [es:di+43h],8000h
  8234                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8235                                  	;test	byte [es:di+44h],80h
  8236 00000F65 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8237 00000F6A 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8238 00000F6C E88903                  	call	ECritDisk
  8239 00000F6F E89246                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8240 00000F72 E89E03                  	call	LCritDisk
  8241 00000F75 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8242                                  					;   have.
  8243 00000F77 E80BF5                  	call	Get_User_Stack
  8244                                  	;mov	[si+2],bp
  8245 00000F7A 896C02                  	MOV	[SI+user_env.user_BX],BP
  8246                                  	;mov	[si+0Eh],es
  8247 00000F7D 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8248 00000F80 30C0                    	XOR	AL,AL
  8249 00000F82 C3                      	retn
  8250                                  ISNODRV:
  8251 00000F83 B0FF                    	MOV	AL,-1
  8252 00000F85 C3                      	retn
  8253                                  
  8254                                  ;
  8255                                  ;----------------------------------------------------------------------------
  8256                                  ;
  8257                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8258                                  ;
  8259                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8260                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8261                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8262                                  ;
  8263                                  ;	ENTRY	none
  8264                                  ;	EXIT	none
  8265                                  ;	USES	all
  8266                                  ;
  8267                                  ;----------------------------------------------------------------------------
  8268                                  ;
  8269                                  
  8270                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8271                                  	; DOSCODE:4D94h
  8272                                  _$DISK_RESET:
  8273                                  	; 15/05/2019 - Retro DOS v4.0
  8274 00000F86 B0FF                    	mov	al,0FFh	; -1
  8275 00000F88 16                      	push	ss
  8276 00000F89 1F                      	pop	ds
  8277                                  	; 06/11/2022
  8278                                  	;MOV	AL,-1
  8279 00000F8A E86B03                  	call	ECritDisk
  8280                                  	; MSDOS 6.0
  8281                                  	;;or	word [DOS34_FLAG],4
  8282                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8283 00000F8D 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8284 00000F92 E8E849                  	call	FLUSHBUF
  8285                                  	; MSDOS 6.0
  8286                                  	;and	word [DOS34_FLAG],0FFFBh
  8287                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8288                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8289                                  	; 15/12/2022
  8290 00000F95 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8291 00000F9A C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8292                                  ;
  8293                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate. This
  8294                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8295                                  ; let's do it.
  8296                                  ;
  8297                                  ; Invalidate 'last-buffer' used
  8298                                  ;
  8299 00000FA0 BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8300 00000FA3 891E[2000]              	MOV	[LastBuffer+2],BX
  8301 00000FA7 891E[1E00]              	MOV	[LastBuffer],BX
  8302                                  
  8303                                  	; MSDOS 3.3 
  8304                                  	; IBMDOS.COM, Offset 1C66h
  8305                                  	;;;;
  8306                                  	;lds	si,[BUFFHEAD]
  8307                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8308                                  				; .buf_flags, AH = 0, reset/clear
  8309                                  ;DRST_1:
  8310                                  	;;mov	[si+4],ax
  8311                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8312                                  	;lds	si,[SI]
  8313                                  	;cmp	si,bx ; -1
  8314                                  	;je	short DRST_2
  8315                                  	;;mov	[si+4],ax
  8316                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8317                                  	;lds	si,[SI]
  8318                                  	;cmp	si,bx
  8319                                  	;jne	short DRST_1
  8320                                  	;;;;
  8321                                  ;DRST_2:
  8322 00000FAB E86503                  	call	LCritDisk
  8323 00000FAE B8FFFF                  	MOV	AX,-1
  8324                                  	; 07/12/2022
  8325                                  	;mov	ax,0FFFFh
  8326                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8327 00000FB1 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8328 00000FB2 B82011                  	mov     ax,1120h
  8329 00000FB5 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8330                                  			; DS = DOS CS
  8331                                  			; Return: CF clear (successful)
  8332 00000FB7 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8333                                  	
  8334 00000FB8 C3                      	retn
  8335                                  
  8336                                  	; 19/07/2018 - Retro DOS v3.0
  8337                                  
  8338                                  ;
  8339                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8340                                  ;
  8341                                  ;----------------------------------------------------------------------------
  8342                                  ;
  8343                                  ;**	$SetDPB - Create a DPB
  8344                                  ;
  8345                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8346                                  ;
  8347                                  ;	ENTRY	ES:BP Points to DPB
  8348                                  ;		DS:SI Points to BPB
  8349                                  ;	EXIT	DPB setup
  8350                                  ;	USES	ALL but BP, DS, ES
  8351                                  ;
  8352                                  ;----------------------------------------------------------------------------
  8353                                  ;
  8354                                  
  8355                                  ; 10/05/2019 - Retro DOS v4.0
  8356                                  
  8357                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8358                                  
  8359                                  ; MSDOS 6.0
  8360 00000FB9 0300                    word3:	dw	3			; M008 -- word value for divides
  8361                                  
  8362                                  ; 13/01/2024
  8363                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8364                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8365                                  
  8366                                  ;procedure   $SETDPB,NEAR
  8367                                  
  8368                                  _$SETDPB:
  8369 00000FBB 89EF                    	MOV	DI,BP
  8370                                  	;ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8371                                  	; 13/01/2024
  8372 00000FBD 47                      	inc	di
  8373 00000FBE 47                      	inc	di
  8374 00000FBF AD                      	LODSW
  8375 00000FC0 AB                      	STOSW				; dpb_sector_size
  8376                                  	; MSDOS 6.0
  8377                                  	;cmp	byte [si+3],0
  8378 00000FC1 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8379 00000FC5 7509                    	JNZ	short yesfat			     ; yes		;AN000;
  8380                                  	;mov	byte [es:di+4],0
  8381 00000FC7 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8382                                  	; 13/01/2024
  8383 00000FCC 89C3                    	mov	bx,ax
  8384 00000FCE EB70                    	JMP	short setend			     ; NO		;AN000;
  8385                                  
  8386                                  yesfat: ; 10/08/2018
  8387 00000FD0 89C2                    	MOV	DX,AX
  8388 00000FD2 AC                      	LODSB
  8389                                  	;DEC	AL
  8390                                  	; 17/12/2022
  8391 00000FD3 48                      	dec	ax
  8392 00000FD4 AA                      	STOSB				; dpb_cluster_mask
  8393                                  	;INC	AL
  8394 00000FD5 40                      	inc	ax
  8395 00000FD6 30E4                    	XOR	AH,AH
  8396                                  LOG2LOOP:
  8397 00000FD8 A801                    	test	AL,1
  8398 00000FDA 7506                    	JNZ	short SAVLOG
  8399 00000FDC FEC4                    	INC	AH
  8400 00000FDE D0E8                    	SHR	AL,1
  8401 00000FE0 EBF6                    	JMP	SHORT LOG2LOOP
  8402                                  SAVLOG:
  8403 00000FE2 88E0                    	MOV	AL,AH
  8404 00000FE4 AA                      	STOSB				; dpb_cluster_shift
  8405 00000FE5 88C3                    	MOV	BL,AL
  8406 00000FE7 A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8407 00000FE8 AC                      	LODSB
  8408 00000FE9 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8409                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8410                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8411 00000FEA 88C7                    	MOV	BH,AL
  8412 00000FEC AD                      	LODSW
  8413 00000FED AB                      	STOSW				; dpb_root_entries Number of directory entries
  8414 00000FEE B105                    	MOV	CL,5
  8415 00000FF0 D3EA                    	SHR	DX,CL			; Directory entries per sector
  8416 00000FF2 48                      	DEC	AX
  8417 00000FF3 01D0                    	ADD	AX,DX			; Cause Round Up
  8418 00000FF5 89D1                    	MOV	CX,DX
  8419 00000FF7 31D2                    	XOR	DX,DX
  8420 00000FF9 F7F1                    	DIV	CX
  8421 00000FFB 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8422 00000FFD 47                      	INC	DI
  8423 00000FFE 47                      	INC	DI			; Skip dpb_first_sector
  8424 00000FFF A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8425 00001000 AC                      	LODSB
  8426                                  	;mov	[es:bp+17h],al
  8427 00001001 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8428 00001005 AD                      	LODSW				; Number of sectors in a FAT
  8429                                  	
  8430                                  	;;;
  8431                                  	;MSDOS 3.3
  8432                                  	;
  8433                                  	;STOSB		; DPB.FAT_SIZE
  8434                                  	;MUL	BH
  8435                                  	
  8436                                  	;MSDOS 6.0
  8437                                  	;
  8438 00001006 AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8439 00001007 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8440 00001009 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8441 0000100B F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8442                                  	;;;
  8443                                  	
  8444                                  	;add	ax,[es:bp+6]
  8445 0000100D 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8446 00001011 AB                      	STOSW				; dpb_dir_sector
  8447 00001012 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8448                                  	;mov	[es:bp+0Bh],ax
  8449 00001014 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8450                                  	
  8451                                  	; MSDOS 6.0
  8452 00001018 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8453                                  	;;cmp	word [es:bp+0Dh],0
  8454                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8455                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8456                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8457                                  	; 15/12/2022
  8458                                  	; 28/07/2019
  8459 0000101A 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8460 0000101E 09DB                    	or	bx,bx
  8461 00001020 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8462                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8463                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8464                                  	
  8465                                  
  8466 00001022 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8467                                  	;mov	bx,[si+8]
  8468 00001024 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8469                                  	;mov	dx,[si+10]
  8470 00001027 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8471 0000102A 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8472 0000102C 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8473 0000102F 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8474 00001031 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8475                                  rott:					;AN000;;F.C. >32mb
  8476 00001033 F8                      	CLC				;AN000;;F.C. >32mb
  8477 00001034 D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8478 00001036 D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8479 00001038 E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8480                                  norot:					;AN000;
  8481                                  	; 15/12/2022
  8482                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8483 0000103A EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8484                                  normal_dpb:
  8485                                  	;;sub	ax,[es:bp+0Dh]
  8486                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8487                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8488                                  	; 15/12/2022
  8489                                  	; bx = [es:bp+DSKSIZ]
  8490                                  	;sub	ax,bx ; 28/07/2019
  8491                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8492                                  	; 15/12/2022
  8493 0000103C 29C3                    	sub	bx,ax
  8494                                  	;NEG	AX			; Sectors in data area
  8495                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8496                                  	; 15/12/2022
  8497                                  	; CL = cluster shift
  8498                                  	; BX = number of data sectors 
  8499                                  	;SHR	AX,CL			; Div by sectors/cluster
  8500 0000103E D3EB                    	shr	bx,cl 
  8501                                  setend:
  8502                                  ;	M008 - CAS
  8503                                  ;
  8504                                  	; 15/12/2022
  8505 00001040 43                      	inc	bx
  8506                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8507                                  ;
  8508                                  ;	There has been a bug in our fatsize calculation for so long
  8509                                  ;	  that we can't correct it now without causing some user to
  8510                                  ;	  experience data loss. There are even cases where allowing
  8511                                  ;	  the number of clusters to exceed the fats is the optimal
  8512                                  ;	  case -- where adding 2 more fat sectors would make the
  8513                                  ;	  data field smaller so that there's nothing to use the extra
  8514                                  ;	  fat sectors for.
  8515                                  ;
  8516                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8517                                  ;	  still report that there was a cluster left when the disk was
  8518                                  ;	  actually full. Very graceful failure for a corrupt system
  8519                                  ;	  configuration. There may be worse cases that were never
  8520                                  ;	  properly traced back to this bug. The problem cases only
  8521                                  ;	  occurred when partition sizes were very near FAT sector
  8522                                  ;	  rounding boundaries, which were rare cases.
  8523                                  ;
  8524                                  ;	Also, it's possible that some third-party partition program might
  8525                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8526                                  ;	  scheme. In this hypothetical case, the number of allocation
  8527                                  ;	  clusters which don't actually have FAT entries to represent
  8528                                  ;	  them might be larger and might create a more catastrophic
  8529                                  ;	  failure. So we'll provide the safeguard of limiting the
  8530                                  ;	  max_cluster to the amount that will fit in the FATs.
  8531                                  ;
  8532                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8533                                  
  8534                                  ;	make sure the number of fat sectors is actually enough to
  8535                                  ;	  hold that many clusters. otherwise, back the number of
  8536                                  ;	  clusters down
  8537                                  
  8538                                  	; 15/12/2022
  8539                                  	; bx = number of clusters
  8540                                  
  8541                                  	; 19/07/2018 - Retro DOS v3.0
  8542                                  	; MSDOS 6.0
  8543                                  	; 15/12/2022
  8544                                  	;mov	bx,ax			; remember calculated # clusters
  8545                                  
  8546                                  	; 01/08/2018 (MSDOS 3.3)
  8547                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8548                                  	;xor	ah,ah 
  8549                                  
  8550                                  	; 10/05/2019 - Retro DOS v4.0
  8551                                  	;mov	ax,[ES:BP+0Fh]
  8552 00001041 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8553                                  
  8554                                  	;mul	word [es:bp+2]	
  8555 00001045 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8556 00001049 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8557 0000104D 720D                    	jb	short setend_fat12
  8558 0000104F D1EA                    	shr	dx,1
  8559                                  
  8560                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8561                                  	; 15/12/2022
  8562                                  ;cs3 7/2/92
  8563 00001051 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8564                                  					; than enough for the maximum FAT,
  8565                                  					; so go ahead and use the calculated
  8566                                  					; number of clusters.
  8567                                  ;cs3 7/2/92
  8568                                  
  8569 00001053 D1D8                    	rcr	ax,1			; find number of entries
  8570 00001055 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8571                                  ;					;  into 12-bit fatland?
  8572 00001058 7215                    	jb	short setend_faterr	; then go ahead and let the
  8573                                  ;					;  inconsistency pass through
  8574                                  ;					;  rather than lose data by
  8575                                  ;					;  correcting the fat type
  8576 0000105A EB0E                    	jmp	short setend_fat16
  8577                                  
  8578                                  setend_fat12:
  8579 0000105C 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8580 0000105E 11D2                    	adc	dx,dx
  8581                                  
  8582                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8583                                  ;cs3 7/2/92
  8584                                  	; 15/12/2022
  8585 00001060 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8586 00001063 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8587                                  					; here. Check for it and use
  8588                                  					; the calculated size in this case.
  8589                                  ;cs3 7/2/92
  8590                                  
  8591 00001065 2EF736[B90F]            	div	word [cs:word3]
  8592                                  
  8593                                  setend_fat16:
  8594 0000106A 48                      	dec	ax			; limit at 1
  8595 0000106B 39D8                    	cmp	ax,bx			; is fat big enough?
  8596 0000106D 7602                    	jbe	short setend_fat	; use max value that'll fit
  8597                                  
  8598                                  setend_faterr:
  8599 0000106F 89D8                    	mov	ax,bx			; use calculated value
  8600                                  
  8601                                  setend_fat:
  8602                                  
  8603                                  ;	now ax = maximum legal cluster
  8604                                  
  8605                                  ;	end M008
  8606                                  
  8607                                  	;mov	[es:bp+0Dh], ax
  8608 00001071 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8609                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8610                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8611 00001075 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8612                                  					; Init so first ALLOC starts at
  8613                                  					; begining of FAT
  8614                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8615                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8616 0000107B 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8617                                  
  8618 00001081 C3                      	retn
  8619                                  
  8620                                  ;EndProc $SETDPB
  8621                                  
  8622                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8623                                  
  8624                                  ;
  8625                                  ;----------------------------------------------------------------------------
  8626                                  ;
  8627                                  ;**	$Dup_PDB
  8628                                  ;
  8629                                  ; Inputs:   DX is new segment address of process
  8630                                  ;	    SI is end of new allocation block
  8631                                  ;
  8632                                  ;----------------------------------------------------------------------------
  8633                                  ;
  8634                                  
  8635                                  _$DUP_PDB:
  8636                                  
  8637                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8638                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8639                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8640                                  
  8641                                  	; MSDOS 3.3
  8642                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8643                                  	;MOV	DS,[CS:CurrentPDB]
  8644                                  
  8645                                  	; 15/05/2019 - Retro DOS v4.0
  8646                                  	; MSDOS 6.0
  8647 00001082 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8648 00001087 C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8649 0000108C 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8650                                  
  8651 00001090 56                      	PUSH	SI
  8652 00001091 EB0A                    	JMP	SHORT CreateCopy
  8653                                  
  8654                                  ;
  8655                                  ;----------------------------------------------------------------------------
  8656                                  ;
  8657                                  ; Inputs:
  8658                                  ;	DX = Segment number of new base
  8659                                  ; Function:
  8660                                  ;	Set up program base and copy term and ^C from int area
  8661                                  ; Returns:
  8662                                  ;	None
  8663                                  ; Called at DOS init
  8664                                  ;
  8665                                  ;----------------------------------------------------------------------------
  8666                                  ;
  8667                                  
  8668                                  ; 15/05/2019 - Retro DOS v4.0
  8669                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8670                                  
  8671                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8672                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8673                                  
  8674                                  _$CREATE_PROCESS_DATA_BLOCK:
  8675                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8676 00001093 E8EFF3                  	CALL	Get_User_Stack
  8677                                  	;mov	ds,[si+14h]
  8678 00001096 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8679                                  	;push	word [2]
  8680 00001099 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8681                                  CreateCopy:
  8682 0000109D 8EC2                    	MOV	ES,DX
  8683                                  
  8684 0000109F 31F6                    	XOR	SI,SI			; copy entire PDB
  8685 000010A1 89F7                    	MOV	DI,SI
  8686 000010A3 B98000                  	MOV	CX,128
  8687 000010A6 F3A5                    	REP	MOVSW
  8688                                  
  8689                                  ; DOS 3.3 7/9/86
  8690                                  	;mov	cx,20
  8691                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8692                                  	; 15/12/2022
  8693 000010A8 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8694                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8695                                  	;mov	cx,FILPERPROC
  8696                                  
  8697                                  	;mov	di,18h
  8698 000010AA BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8699                                  	;;PUSH	DS ; * 15/05/2019
  8700                                  	;;lds	si,[34h]
  8701                                  	;LDS	SI,[PDB.JFN_Pointer]
  8702                                  	;REP	MOVSB
  8703                                  	;;POP	DS ; * 15/05/2019
  8704                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8705                                  	; 05/12/2022
  8706                                  	; (push ds then pop ds is not needed here!)
  8707                                  	;push	ds
  8708                                  	;lds	si,[34h]
  8709 000010AD C5363400                	lds	si,[PDB.JFN_Pointer]
  8710 000010B1 F3A4                    	rep	movsb
  8711                                  	;pop	ds
  8712                                  
  8713                                  ; DOS 3.3 7/9/86
  8714                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8715                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8716                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8717                                  
  8718 000010B3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8719                                  
  8720                                  	;;test	byte [cs:CreatePDB],0FFh
  8721                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8722                                  	; 17/12/2022
  8723 000010B8 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8724                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8725 000010BC 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8726                                  
  8727                                  ; Here we set up for a new process...
  8728                                  
  8729                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8730                                  	;POP	DS
  8731                                  
  8732                                  	; MSDOS 6.0
  8733                                  	;;getdseg <ds>			; ds -> dosdata
  8734                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8735                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8736                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8737                                  	; 15/12/2022
  8738                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8739                                  
  8740 000010BE 31DB                    	XOR	BX,BX			; dup all jfns
  8741                                  	;mov	cx,20
  8742                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8743                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8744                                  	; 15/12/2022
  8745 000010C0 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8746                                  
  8747                                  Create_dup_jfn:
  8748 000010C2 06                      	PUSH	ES ;**			; save new PDB
  8749 000010C3 E8DD54                  	call	SFFromHandle		; get sf pointer
  8750 000010C6 B0FF                    	MOV	AL,-1			; unassigned JFN
  8751 000010C8 7224                    	JC	short CreateStash	; file was not really open
  8752                                  	;;test	word [es:di+5],1000h
  8753                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8754                                  	; 15/05/2019
  8755                                  	;test	byte [es:di+6],10h
  8756 000010CA 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8757 000010CF 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8758                                  
  8759                                  ; We do not inherit network file handles.
  8760                                  
  8761                                  	;mov	ah,[es:di+2]
  8762 000010D1 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8763                                  	;and	ah,0F0h
  8764 000010D5 80E4F0                  	AND	AH,SHARING_MASK
  8765                                  	;cmp	ah,70h
  8766 000010D8 80FC70                  	CMP	AH,SHARING_NET_FCB
  8767 000010DB 7411                    	jz	short CreateStash
  8768                                  
  8769                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8770                                  ; duplication operation.
  8771                                  
  8772 000010DD 893E[9E05]              	MOV	[THISSFT],DI
  8773 000010E1 8C06[A005]              	MOV	[THISSFT+2],ES
  8774 000010E5 E8D618                  	call	DOS_DUP 		; signal duplication
  8775                                  
  8776                                  ; get the old sfn for copy
  8777                                  
  8778 000010E8 E89B54                  	call	pJFNFromHandle		; ES:DI is jfn
  8779 000010EB 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8780                                  
  8781                                  ; Take AL (old sfn or -1) and stash it into the new position
  8782                                  
  8783                                  CreateStash:
  8784 000010EE 07                      	POP	ES ;**
  8785                                  	;mov	[es:bx+18h],al
  8786 000010EF 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8787 000010F3 43                      	INC	BX			; next jfn...
  8788 000010F4 E2CC                    	LOOP	Create_dup_jfn
  8789                                  
  8790 000010F6 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8791                                  	; 06/11/2022
  8792                                  	;mov	[es:16h],bx
  8793 000010FA 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8794 000010FF 8C06[3003]              	MOV	[CurrentPDB],ES
  8795                                  	;MOV	DS,BX ; 28/07/2019
  8796                                  	; 07/12/2022
  8797                                  	;mov	ds,[cs:DosDSeg]
  8798                                  	; 15/12/2022
  8799                                  	; ds = [cs:DosDSeg]
  8800 00001103 C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8801                                  	;mov	ds,bx
  8802                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8803                                  	; 15/12/2022
  8804                                  	;mov	ds,bx
  8805                                  
  8806                                  ; end of new process create
  8807                                  
  8808                                  Create_PDB_cont:
  8809                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8810                                  
  8811                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8812                                  
  8813                                  	;; 28/07/2019
  8814                                  	;;push	ds
  8815                                  	;;mov	ds,[cs:DosDSeg]
  8816                                  	;mov	byte [CreatePDB],0
  8817                                  	;;pop	ds
  8818                                  
  8819                                  ; 05/12/2022
  8820                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8821                                  ;	; (push-pop ds is nonsense here! 
  8822                                  ;	;  but i am using same code with original MSDOS.SYS
  8823                                  ;	;  for address compatibility.)
  8824                                  ;	push	ds
  8825                                  ;	; ds = [cs:DosDSeg] !
  8826                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8827                                  ;	mov	byte [CreatePDB],0
  8828                                  ;	pop	ds
  8829                                  
  8830 00001108 58                      	POP	AX ;*
  8831                                  
  8832                                  	;entry	SETMEM
  8833                                  
  8834                                  	; 17/12/2022
  8835                                  	; cx = 0
  8836                                  
  8837                                  ;---------------------------------------------------------------------------
  8838                                  ; Inputs:
  8839                                  ;	AX = Size of memory in paragraphs
  8840                                  ;	DX = Segment
  8841                                  ; Function:
  8842                                  ;	Completely prepares a program base at the
  8843                                  ;	specified segment.
  8844                                  ; Called at DOS init
  8845                                  ; Outputs:
  8846                                  ;	DS = DX
  8847                                  ;	ES = DX
  8848                                  ;	[0] has INT int_abort
  8849                                  ;	[2] = First unavailable segment
  8850                                  ;	[5] to [9] form a long call to the entry point
  8851                                  ;	[10] to [13] have exit address (from int_terminate)
  8852                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8853                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8854                                  ; DX,BP unchanged. All other registers destroyed.
  8855                                  ;---------------------------------------------------------------------------
  8856                                  
  8857                                  SETMEM:
  8858                                  	;XOR	CX,CX
  8859                                  	; 17/12/2022
  8860                                  	; cx = 0
  8861 00001109 8ED9                    	MOV	DS,CX
  8862 0000110B 8EC2                    	MOV	ES,DX
  8863                                  	;mov	si,88h
  8864 0000110D BE8800                  	MOV	SI,addr_int_terminate
  8865                                  	;mov	di,10 ; 0Ah
  8866 00001110 BF0A00                  	MOV	DI,SAVEXIT
  8867                                  	;MOV	CX,6
  8868                                  	; 15/12/2022
  8869 00001113 B106                    	mov	cl,6
  8870 00001115 F3A5                    	REP	MOVSW
  8871 00001117 26A30200                	MOV	[ES:2],AX
  8872 0000111B 29D0                    	SUB	AX,DX
  8873 0000111D 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8874 00001120 7603                    	JBE	short HAVDIF
  8875 00001122 B8FF0F                  	MOV	AX,MAXDIF
  8876                                  HAVDIF:
  8877 00001125 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8878 00001128 BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8879 0000112B 29C3                    	SUB	BX,AX
  8880 0000112D B104                    	MOV	CL,4
  8881 0000112F D3E0                    	SHL	AX,CL
  8882 00001131 8EDA                    	MOV	DS,DX
  8883                                  
  8884                                  	; (MSDOS 6.0 note)
  8885                                  	;
  8886                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8887                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8888                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8889                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8890                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8891                                  	; making this equvalence valid for this particular case. If however
  8892                                  	; there is less than 64K remaining the address in BX:AX will not 
  8893                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8894                                  	; into the PSP.
  8895                                  	;
  8896                                  	; Therefore for the case where there is less than 64K remaining in 
  8897                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8898                                  	; requirements will not work. Call 5, however will continue to work
  8899                                  	; for all cases.
  8900                                  	;
  8901                                  
  8902                                  	;mov	[6],ax
  8903                                  	;mov	[8],bx
  8904                                  
  8905 00001133 A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8906 00001136 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8907                                  
  8908                                  	; 06/05/2019 - Retro DOS v4.0
  8909 0000113A 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8910                                  					;    memory left
  8911 0000113D 740C                    	je	short addr_ok		; Y: the above calculated address is
  8912                                  					;    OK
  8913                                  					; N: 
  8914                                  
  8915 0000113F C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8916 00001145 C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8917                                  addr_ok:
  8918                                  	;mov	word [0],20CDh
  8919 0000114B C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8920                                  	;mov	byte [5],9Ah
  8921 00001151 C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8922                                  	;mov	word [50h],21CDh
  8923 00001156 C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8924                                  	;mov	byte [52h],0CBh
  8925 0000115C C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8926                                  	;mov	word [34h],18h
  8927 00001161 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8928                                  	;mov	word [36h],ds
  8929 00001167 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8930                                  	;mov	word [32h],20
  8931 0000116B C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8932                                  ;
  8933                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8934                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8935                                  ; particular SFT.  We perform this by requiring that the server link together
  8936                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8937                                  ; initialize this pointer.
  8938                                  ;
  8939                                   	;mov	word [38h],-1
  8940 00001171 C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8941                                  	;mov	word [3Ah],-1
  8942 00001177 C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8943                                  
  8944                                  	; 06/05/2019
  8945                                  	; Set the real version number in the PSP - 5.00
  8946                                  
  8947                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8948                                  	; 07/12/2022
  8949 0000117D 26C70640000500          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8950                                  
  8951 00001184 C3                      	retn
  8952                                  
  8953                                  ; 29/04/2019 - Retro DOS v4.0
  8954                                  
  8955                                  ;BREAK <$GSetMediaID -- get set media ID>
  8956                                  
  8957                                  ;---------------------------------------------------------------------------
  8958                                  ; Inputs:
  8959                                  ;	BL= drive number as defined in IOCTL
  8960                                  ;	AL= 0 get media ID
  8961                                  ;	    1 set media ID
  8962                                  ;	DS:DX= buffer containing information
  8963                                  ;		DW  0  info level (set on input)
  8964                                  ;		DD  ?  serial #
  8965                                  ;		DB  11 dup(?)  volume id
  8966                                  ;		DB   8 dup(?)  file system type
  8967                                  ; Function:
  8968                                  ;	Get or set media ID
  8969                                  ; Returns:
  8970                                  ;	carry clear, DS:DX is filled
  8971                                  ;	carry set, error
  8972                                  ;---------------------------------------------------------------------------
  8973                                  
  8974                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8975                                  _$GSetMediaID:
  8976                                  	; RAWIO - GET_MEDIA_ID
  8977 00001185 B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  8978 00001188 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  8979 0000118A 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  8980                                  	;cmp	al,1		      ;AN000;MS.; set ?
  8981                                  	;jne	short errorfunc	      ;AN000;MS.; no
  8982                                  	; 15/12/2022
  8983 0000118C FEC8                    	dec	al
  8984 0000118E 7507                    	jnz	short errorfunc ; al > 1
  8985                                  	; RAWIO - SET_MEDIA_ID
  8986                                  	;mov	cx,0846h	      ;AN001;MS.;
  8987                                  	; 15/12/2022
  8988 00001190 B146                    	mov	cl,46h	; cx = 0846h 
  8989                                  doioctl:			      ;AN000;
  8990 00001192 B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  8991                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  8992                                  	;call	_$IOCTL
  8993                                  	;retn			      ;AN000;MS.;
  8994                                  	; 15/12/2022
  8995 00001194 E98C10                  	jmp	_$IOCTL
  8996                                  errorfunc:			      ;AN000;
  8997                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  8998                                  	;mov	al,1
  8999 00001197 B001                    	mov	al,error_invalid_function
  9000 00001199 E9A8F4                  	jmp	SYS_RET_ERR
  9001                                  
  9002                                  ; 16/05/2019 - Retro DOS v4.0
  9003                                  
  9004                                  ;============================================================================
  9005                                  ; MISC2.ASM, MSDOS 6.0, 1991
  9006                                  ;============================================================================
  9007                                  ; 20/07/2018 - Retro DOS v3.0
  9008                                  ; 29/04/2019 - Retro DOS v4.0
  9009                                  
  9010                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  9011                                  ;----------------------------------------------------------------------------
  9012                                  ;
  9013                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  9014                                  ;	     Strings of different lengths don't match.
  9015                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  9016                                  ;   Outputs: Z if strings same, NZ if different
  9017                                  ;   Registers modified: NONE
  9018                                  ;----------------------------------------------------------------------------
  9019                                  
  9020                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9021                                  StrCmp:
  9022 0000119C 56                      	push	si
  9023 0000119D 57                      	push	di
  9024 0000119E 50                      	push	ax
  9025                                  Cmplp:
  9026 0000119F AC                      	LODSB
  9027 000011A0 E8D33D                  	call	UCase			; convert to upper case
  9028 000011A3 E8253E                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9029 000011A6 88C4                    	MOV	AH,AL
  9030 000011A8 268A05                  	MOV	AL,[ES:DI]
  9031 000011AB 47                      	INC	DI
  9032 000011AC E8C73D                  	call	UCase			; convert to upper case
  9033 000011AF E8193E                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9034 000011B2 38C4                    	CMP	AH,AL
  9035 000011B4 7504                    	JNZ	short PopRet		; Strings dif
  9036                                  
  9037 000011B6 08C0                    	OR	AL,AL
  9038 000011B8 75E5                    	JNZ	short Cmplp		; More string
  9039                                  PopRet:
  9040 000011BA 58                      	pop	ax
  9041 000011BB 5F                      	pop	di
  9042 000011BC 5E                      	pop	si
  9043 000011BD C3                      	retn
  9044                                  
  9045                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  9046                                  ;----------------------------------------------------------------------------
  9047                                  ;
  9048                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  9049                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  9050                                  ;	characters.
  9051                                  ;
  9052                                  ;   Inputs:	DS:SI - pointer to source string
  9053                                  ;		ES:DI - pointer to destination string
  9054                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  9055                                  ;		DS:SI point byte after nul byte at end of source string
  9056                                  ;   Registers modified: SI,DI
  9057                                  ;----------------------------------------------------------------------------
  9058                                  
  9059                                  StrCpy:
  9060 000011BE 50                      	push	ax
  9061                                  CPYLoop:
  9062 000011BF AC                      	LODSB
  9063 000011C0 E8B33D                  	call	UCase			; convert to upper case
  9064 000011C3 E8053E                  	call	PATHCHRCMP		; convert / to \ ;
  9065 000011C6 AA                      	STOSB
  9066                                  
  9067 000011C7 08C0                    	OR	AL,AL
  9068 000011C9 75F4                    	JNZ	short CPYLoop
  9069 000011CB 58                      	pop	ax
  9070 000011CC C3                      	retn
  9071                                  
  9072                                  ;----------------------------------------------------------------------------
  9073                                  ; Procedure Name : FStrCpy
  9074                                  ;----------------------------------------------------------------------------
  9075                                  
  9076                                  FStrCpy:
  9077 000011CD 50                      	push	ax
  9078                                  FCPYLoop:
  9079 000011CE AC                      	LODSB
  9080 000011CF AA                      	STOSB
  9081 000011D0 08C0                    	OR	AL,AL
  9082 000011D2 75FA                    	JNZ	short FCPYLoop
  9083 000011D4 58                      	pop	ax
  9084 000011D5 C3                      	retn
  9085                                  
  9086                                  ; 20/07/2018 - Retro DOS v3.0
  9087                                  ;----------------------------------------------------------------------------
  9088                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  9089                                  ;----------------------------------------------------------------------------
  9090                                  ;
  9091                                  ;UCase:	
  9092                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  9093                                  ;	retn
  9094                                  
  9095                                  ;Break <StrLen - compute length of string ES:DI>
  9096                                  ;----------------------------------------------------------------------------
  9097                                  ;**	StrLen - Compute Length of String
  9098                                  ;
  9099                                  ;	StrLen computes the length of a string, including the trailing 00
  9100                                  ;
  9101                                  ;	ENTRY	(es:di) = address of string
  9102                                  ;	EXIT	(cx) = size of string
  9103                                  ;	USES	cx, flags
  9104                                  ;----------------------------------------------------------------------------
  9105                                  
  9106                                  StrLen:
  9107 000011D6 57                      	push	di
  9108 000011D7 50                      	push	ax
  9109                                  	;MOV	CX,-1
  9110 000011D8 B9FFFF                  	mov	cx,65535
  9111 000011DB 30C0                    	XOR	AL,AL
  9112 000011DD F2AE                    	REPNE	SCASB
  9113 000011DF F7D1                    	NOT	CX
  9114 000011E1 58                      	pop	ax
  9115 000011E2 5F                      	pop	di
  9116 000011E3 C3                      	retn
  9117                                  
  9118                                  ;----------------------------------------------------------------------------
  9119                                  ;**	DStrLen - Compute Length of String
  9120                                  ;
  9121                                  ;	ENTRY	(ds:si) = address of string
  9122                                  ;	EXIT	(cx) = size of string, including trailing NUL
  9123                                  ;	USES	cx, flags
  9124                                  ;----------------------------------------------------------------------------
  9125                                  
  9126                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  9127 000011E4 E80300                  	CALL	XCHGP
  9128 000011E7 E8ECFF                  	CALL	StrLen
  9129                                  	;CALL	XCHGP
  9130                                  	;retn
  9131                                  	; 18/12/2022
  9132                                  	;jmp	short XCHGP
  9133                                  
  9134                                  ;----------------------------------------------------------------------------
  9135                                  ;**	XCHGP - Exchange Source and Destination Pointers
  9136                                  ;
  9137                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  9138                                  ;
  9139                                  ;	ENTRY	none
  9140                                  ;	EXIT	pairs exchanged
  9141                                  ;	USES	SI, DI, DS, ES
  9142                                  ;----------------------------------------------------------------------------
  9143                                  
  9144                                  XCHGP:
  9145 000011EA 1E                      	push	ds
  9146 000011EB 06                      	push	es
  9147 000011EC 1F                      	pop	ds
  9148 000011ED 07                      	pop	es
  9149 000011EE 87F7                    	XCHG	SI,DI
  9150                                  xchgp_retn:
  9151 000011F0 C3                      	retn
  9152                                  
  9153                                  ;Break	<Idle - wait for a specified amount of time>
  9154                                  ;----------------------------------------------------------------------------
  9155                                  ;
  9156                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  9157                                  ;   	   we spin until RetryLoop is exhausted.
  9158                                  ;
  9159                                  ;   Inputs:	RetryLoop is the number of times we spin
  9160                                  ;   Outputs:	Wait
  9161                                  ;   Registers modified: none
  9162                                  ;----------------------------------------------------------------------------
  9163                                  
  9164                                  Idle:
  9165                                  	;test	byte [SS:FSHARING],0FFh
  9166 000011F1 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9167                                  	;retnz
  9168 000011F7 75F7                    	jnz	short xchgp_retn
  9169                                  	;SAVE	<CX>
  9170 000011F9 51                      	push	cx
  9171 000011FA 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9172 000011FF E308                    	JCXZ	Idle3
  9173                                  Idle1:	
  9174 00001201 51                      	PUSH	CX
  9175 00001202 31C9                    	XOR	CX,CX
  9176                                  Idle2:	
  9177 00001204 E2FE                    	LOOP	Idle2
  9178 00001206 59                      	POP	CX
  9179 00001207 E2F8                    	LOOP	Idle1
  9180                                  Idle3:	
  9181                                  	;RESTORE <CX>
  9182 00001209 59                      	pop	cx
  9183 0000120A C3                      	retn
  9184                                  
  9185                                  ;Break	<TableDispatch - dispatch to a table>
  9186                                  ;----------------------------------------------------------------------------
  9187                                  ;
  9188                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9189                                  ;   routine. Preserve all input registers to the routine.
  9190                                  ;
  9191                                  ;   Inputs:	Push	return address
  9192                                  ;		Push	Table address
  9193                                  ;		Push	index (byte)
  9194                                  ;   Outputs:	appropriate routine gets jumped to.
  9195                                  ;		return indicates invalid index
  9196                                  ;   Registers modified: none.
  9197                                  ;----------------------------------------------------------------------------
  9198                                  
  9199                                  struc TFrame	 ; TableFrame
  9200 00000000 ????                    .OldBP:	 resw 1  ; 0
  9201 00000002 ????                    .OldRet: resw 1  ; 2
  9202 00000004 ??                      .Index:	 resb 1  ; 4
  9203 00000005 ??                      .Pad:	 resb 1  ; 5  
  9204 00000006 ????                    .Tab:	 resw 1  ; 6
  9205 00000008 ????                    .NewRet: resw 1  ; 8
  9206                                  endstruc
  9207                                  
  9208                                  TableDispatch:
  9209 0000120B 55                      	PUSH	BP
  9210 0000120C 89E5                    	MOV	BP,SP
  9211 0000120E 53                      	PUSH	BX			; save BX
  9212                                  	;mov	bx,[bp+6]
  9213 0000120F 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9214 00001212 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9215                                  	;cmp	[bp+4],bl
  9216 00001215 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9217 00001218 7317                    	JAE	short TableError	; yes
  9218                                  	;mov	bl,[bp+4]
  9219 0000121A 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9220 0000121D 30FF                    	XOR	BH,BH			; convert to word
  9221 0000121F D1E3                    	SHL	BX,1			; convert to word pointer
  9222 00001221 43                      	INC	BX			; point past first length byte
  9223                                  	; 17/08/2018
  9224                                  	;add	bx,[bp+6]
  9225 00001222 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9226 00001225 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9227                                  	;mov	[bp+6],bx
  9228 00001228 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9229 0000122B 5B                      	POP	BX			; restore BX
  9230 0000122C 5D                      	POP	BP			; restore BP
  9231 0000122D 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9232 00001230 C3                      	retn				; do operation
  9233                                  TableError:
  9234 00001231 5B                      	POP	BX			; restore BX
  9235 00001232 5D                      	POP	BP			; restore BP
  9236 00001233 C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9237                                  
  9238                                  ;Break	<TestNet - determine if a CDS is for the network>
  9239                                  ;----------------------------------------------------------------------------
  9240                                  ;
  9241                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9242                                  ;	network CDS. This will handle NULL cds also.
  9243                                  ;
  9244                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9245                                  ;   Outputs:	ES:DI = ThisCDS
  9246                                  ;		carry Set => network
  9247                                  ;		carry Clear => local
  9248                                  ;   Registers modified: none.
  9249                                  ;----------------------------------------------------------------------------
  9250                                  
  9251                                  TestNet:
  9252                                  	;LES	DI,[CS:THISCDS]
  9253                                  
  9254                                  	; 16/05/2019 - Retro DOS v4.0
  9255 00001236 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9256 0000123B 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9257 00001240 83FFFF                  	CMP	DI,-1
  9258 00001243 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9259                                  	;;test	word [es:di+43h],8000h
  9260                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9261                                  	;test	byte [es:di+44h],80h
  9262 00001245 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9263 0000124A 7501                    	JNZ	short CMCRet		; jump has carry clear
  9264 0000124C C3                      	retn				; carry is clear
  9265                                  CMCRet: 
  9266 0000124D F5                      	CMC
  9267 0000124E C3                      	retn
  9268                                  
  9269                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9270                                  ;----------------------------------------------------------------------------
  9271                                  ;
  9272                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9273                                  ;	network file.
  9274                                  ;
  9275                                  ;   Inputs:	ES:DI point to SFT
  9276                                  ;   Outputs:	Zero set if not network sft
  9277                                  ;		zero reset otherwise
  9278                                  ;		Carry CLEAR!!!
  9279                                  ;   Registers modified: none.
  9280                                  ;----------------------------------------------------------------------------
  9281                                  
  9282                                  IsSFTNet:
  9283                                  	;;test	word [es:di+5],8000h
  9284                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9285                                  	; 16/05/2019 
  9286                                  	;test	byte [es:di+6],80h
  9287 0000124F 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9288 00001254 C3                      	retn
  9289                                  
  9290                                  ;Break	<FastInit - Initialize FastTable entries >
  9291                                  ;----------------------------------------------------------------------------
  9292                                  ;   DOS 4.00   2/9/87
  9293                                  ;   FastInit  - initialize the FASTXXX routine entry
  9294                                  ;		  in the FastTable
  9295                                  ;
  9296                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9297                                  ;		DS:SI = address of FASTXXX routine entry
  9298                                  ;		   SI = -1 for query only
  9299                                  ;   Outputs:	Carry flag clear, if success
  9300                                  ;		Carry flag set,   if failure
  9301                                  ;
  9302                                  ;
  9303                                  ;----------------------------------------------------------------------------
  9304                                  
  9305                                  ;Procedure FastInit,NEAR
  9306                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9307                                  
  9308                                  ;	; MSDOS 3.3
  9309                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9310                                  ;FastInit:
  9311                                  ;	mov	di,FastTable ; FastOpenTable
  9312                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9313                                  ;	mov	bx,cs			; get DOS segment
  9314                                  ;	cmp	ax,bx			; first time installed ?	
  9315                                  ;	je	short ok_install	; yes
  9316                                  ;	stc				; set carry
  9317                                  ;	retn				; (cf=1 means) already installed !
  9318                                  ;
  9319                                  ;ok_install:
  9320                                  ;	mov	bx,FastTable ; FastOpenTable
  9321                                  ;	mov	cx,ds
  9322                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9323                                  ;	mov	[cs:bx+4],cx
  9324                                  ;	mov	[cs:bx+2],si
  9325                                  ;	retn
  9326                                  
  9327                                  ; 16/05/2019 - Retro DOS v4.0
  9328                                  
  9329                                  FastInit:
  9330                                  	; MSDOS 6.0
  9331                                  	;hkn; set up es to dosdataseg.
  9332 00001255 06                      	push	es
  9333                                  	;getdseg <es>			; es -> dosdata
  9334 00001256 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9335                                  
  9336                                  	;hkn; FastTable is in DOSDATA
  9337 0000125B BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9338 0000125E 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9339 0000125F 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9340 00001261 D1E3                    	SHL	BX,1			;AN000;FO.;; times 4, each entry is DWORD
  9341 00001263 D1E3                    	SHL	BX,1			;AN000;FO.
  9342 00001265 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9343 00001267 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9344                                  fcheck: 				;AN000;
  9345 0000126B 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9346 0000126D 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9347 0000126F 7405                    	JZ	short ok_install	;AN000;FO.;; yes
  9348 00001271 09C0                    	OR	AX,AX			;AN000;FO.;
  9349                                  	;JZ	short ok_install	;AN000;FO.;
  9350                                  	;STC				;AN000;FO.;; already installed !
  9351                                  	;JMP	SHORT FSret		;AN000;FO. set carry
  9352                                  	; 14/01/2024
  9353 00001273 F9                      	stc
  9354 00001274 7517                    	jnz	short FSret
  9355                                  ok_install:				;AN000;
  9356 00001276 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9357 00001279 7412                    	JZ	short FSret		;AN000;FO.; yes
  9358 0000127B 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9359 0000127D 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9360 00001281 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9361                                  
  9362                                  ;hkn; FastFlg moved to DOSDATA
  9363 00001284 BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9364 00001287 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9365                                  	;or	byte [es:di],80h
  9366 00001289 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9367                                  FSret:					;AN000;
  9368 0000128D 07                      	pop	es
  9369 0000128E C3                      	retn				;AN000;FO.
  9370                                  
  9371                                  ;EndProc FastInit
  9372                                  
  9373                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9374                                  ;----------------------------------------------------------------------------
  9375                                  ;   DOS 3.3   6/10/86
  9376                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9377                                  ;
  9378                                  ;   Inputs:	None
  9379                                  ;   Outputs:	AX = -1 and carry flag set
  9380                                  ;
  9381                                  ;   Registers modified: none.
  9382                                  ;----------------------------------------------------------------------------
  9383                                  
  9384                                  FastRet:
  9385                                  	;mov	ax,-1
  9386                                  	;stc
  9387                                  	;retf
  9388 0000128F F9                      	STC
  9389 00001290 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9390 00001292 CB                      	RETF
  9391                                  
  9392                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9393                                  ;----------------------------------------------------------------------------
  9394                                  ;   DOS 3.3   6/10/86
  9395                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9396                                  ;
  9397                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9398                                  ;   Outputs:	same output as $OPEN
  9399                                  ;
  9400                                  ;----------------------------------------------------------------------------
  9401                                  
  9402                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9403                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9404                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9405                                  
  9406                                  NLS_OPEN:
  9407                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9408                                  ;	MOV	BYTE [CPSWFLAG],0
  9409                                  ;	PUSH	BX		 ; save current state
  9410                                  
  9411 00001293 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9412 00001295 E8755B                  	call	_$OPEN
  9413                                  
  9414                                  ;	POP	BX		 ; restore current state
  9415                                  ;	MOV	[CPSWFLAG],BL
  9416                                  	
  9417 00001298 C3                      	RETN
  9418                                  
  9419                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9420                                  ;----------------------------------------------------------------------------
  9421                                  ;   DOS 3.3   6/10/86
  9422                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9423                                  ;
  9424                                  ;   Inputs:	BP = open mode
  9425                                  ;   Outputs:	same output as $LSEEK
  9426                                  ;
  9427                                  ;----------------------------------------------------------------------------
  9428                                  
  9429                                  ; 16/05/2019 - Retro DOS v4.0
  9430                                  
  9431                                  NLS_LSEEK:
  9432 00001299 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9433 0000129E 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9434 000012A3 E81000                  	CALL	Fake_User_Stack
  9435 000012A6 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9436 000012A8 E80F55                  	call	_$LSEEK
  9437 000012AB 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9438 000012B0 368F06[8405]            	POP	word [SS:USER_SP]
  9439 000012B5 C3                      	RETN
  9440                                  
  9441                                  ;Break	<Fake_User_Stack - save user stack>
  9442                                  ;----------------------------------------------------------------------------
  9443                                  ;   DOS 3.3   6/10/86
  9444                                  ;   Fake_User_Stack - save user stack pointer
  9445                                  ;
  9446                                  ;----------------------------------------------------------------------------
  9447                                  
  9448                                  Fake_User_Stack:
  9449 000012B6 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9450 000012BA 36A3[8405]              	MOV	[SS:USER_SP],AX
  9451 000012BE 8CD0                    	MOV	AX,SS
  9452 000012C0 36A3[8605]              	MOV	[SS:USER_SS],AX
  9453 000012C4 C3                      	RETN
  9454                                  
  9455                                  ;Break	<GetDevList - get device header list pointer>
  9456                                  ;----------------------------------------------------------------------------
  9457                                  ;   DOS 3.3   7/25/86
  9458                                  ;   GetDevList - get device header list pointer
  9459                                  ;
  9460                                  ;   Output: AX:BX points to the device header list
  9461                                  ;----------------------------------------------------------------------------
  9462                                  
  9463                                  GetDevList:
  9464                                  	; 16/05/2019 - Retro DOS v4.0
  9465 000012C5 BE[280D]                	MOV	SI,SysInitTable
  9466 000012C8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9467 000012CD C534                    	LDS	SI,[SI]
  9468                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9469 000012CF 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9470                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9471 000012D2 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9472 000012D5 C3                      	RETN
  9473                                  
  9474                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC>
  9475                                  ;----------------------------------------------------------------------------
  9476                                  ;   DOS 3.3   7/25/86
  9477                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9478                                  ;
  9479                                  ;   Inputs:	BP = function code 0CH
  9480                                  ;   Outputs:	same output as generic $IOCTL
  9481                                  ;
  9482                                  ;----------------------------------------------------------------------------
  9483                                  
  9484                                  NLS_IOCTL:
  9485                                  	; 16/05/2019 - Retro DOS v4.0
  9486 000012D6 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9487 000012DB 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9488 000012E0 E8D3FF                  	CALL	Fake_User_Stack
  9489 000012E3 89E8                    	MOV	AX,BP		; set up correct interface for $IOCTL
  9490 000012E5 E83B0F                  	call	_$IOCTL
  9491 000012E8 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9492 000012ED 368F06[8405]            	POP	word [SS:USER_SP]
  9493 000012F2 C3                      	RETN
  9494                                  
  9495                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9496                                  ;----------------------------------------------------------------------------
  9497                                  ;   DOS 3.3   7/25/86
  9498                                  ;   NLS_GETEXT	-
  9499                                  ;
  9500                                  ;   Inputs:	none
  9501                                  ;   Outputs:	AX = extended error
  9502                                  ;
  9503                                  ;----------------------------------------------------------------------------
  9504                                  
  9505                                  NLS_GETEXT:
  9506                                  	; 16/05/2019 - Retro DOS v4.0
  9507 000012F3 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9508                                  	; 23/09/2023
  9509                                  MSG_RETRIEVAL:
  9510 000012F7 C3                      	RETN
  9511                                  
  9512                                  ; 29/04/2019 - Retro DOS v4.0
  9513                                  
  9514                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9515                                  
  9516                                  ;----------------------------------------------------------------------------
  9517                                  ;   DOS 4.00
  9518                                  ;
  9519                                  ;   Inputs:	DL=0 get extended error message addr
  9520                                  ;		  =1 set extended error message addr
  9521                                  ;		  =2 get parser error message addr
  9522                                  ;		  =3 set parser error message addr
  9523                                  ;		  =4 get critical error message addr
  9524                                  ;		  =5 set critical error message addr
  9525                                  ;		  =6 get file system error message addr
  9526                                  ;		  =7 set file system error message addr
  9527                                  ;		  =8 get address for code reduction
  9528                                  ;		  =9 set address for code reduction
  9529                                  ;   Function:	get/set message address
  9530                                  ;   Outputs:	ES:DI points to addr when get
  9531                                  ;----------------------------------------------------------------------------
  9532                                  
  9533                                  ;Procedure MSG_RETRIEVAL,NEAR
  9534                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9535                                  
  9536                                  ; 23/09/2023
  9537                                  ;MSG_RETRIEVAL:
  9538                                  
  9539                                  ;;	NOTE:  This function lives in command.com resident code now.
  9540                                  ;;	If the int 2F ever gets this far, we'll return registers
  9541                                  ;;	unchanged, which produces the same result as before, if
  9542                                  ;;	command.com wasn't present (and therefore no messages available).
  9543                                  ;;
  9544                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9545                                  ;;	No_Op zeroes AL.
  9546                                  ;;
  9547                                  ;;;hkn; set up ds to point to DOSDATA
  9548                                  ;;	push	ds
  9549                                  ;;	getdseg	<ds>			; ds -> dosdata
  9550                                  ;;
  9551                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9552                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9553                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9554                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9555                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9556                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9557                                  ;;	DEC	AL		    ;AN000;;MS.
  9558                                  ;;toget:				    ;AN000;
  9559                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9560                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9561                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9562                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9563                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9564                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9565                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9566                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9567                                  ;;getget: 				     ;AN000;
  9568                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9569                                  ;;MSGret: 				     ;AN000;
  9570                                  ;;	POP	SI			     ;AN000;;MS.
  9571                                  ;;	POP	AX			     ;AN000;;MS.
  9572                                  ;;
  9573                                  ;;	pop	ds
  9574                                  
  9575                                  ;	return				     ;AN000;;MS. exit
  9576                                  
  9577                                  ; 23/09/2023
  9578                                  ;	retn	; 29/04/2019
  9579                                  
  9580                                  ;============================================================================
  9581                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9582                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9583                                  ;============================================================================
  9584                                  ; 20/07/2018 - Retro DOS v3.0
  9585                                  
  9586                                  ;	; MSDOS 3.3
  9587                                  ;	; 08/08/2018 - Retro DOS v3.0
  9588                                  ;ECritMEM:
  9589                                  ;ECritSFT:
  9590                                  ;	;
  9591                                  ;ECritDisk:
  9592                                  ;	retn
  9593                                  ;	;push	ax
  9594                                  ;	
  9595                                  ;	mov	ax,8001h
  9596                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9597                                  ;			; AL = critical section number (00h-0Fh)
  9598                                  ;	pop	ax
  9599                                  ;	retn
  9600                                  ;
  9601                                  ;	; MSDOS 3.3
  9602                                  ;	; 08/08/2018 - Retro DOS v3.0
  9603                                  ;LCritMEM:
  9604                                  ;LCritSFT:
  9605                                  ;	;
  9606                                  ;LCritDisk:
  9607                                  ;	retn
  9608                                  ;	;push	ax
  9609                                  ;	
  9610                                  ;	mov	ax,8101h
  9611                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9612                                  ;			; AL = critical section number (00h-0Fh)
  9613                                  ;	pop	ax
  9614                                  ;	retn
  9615                                  ;
  9616                                  ;ECritDevice:
  9617                                  ;	retn
  9618                                  ;	;push	ax
  9619                                  ;	
  9620                                  ;	mov	ax,8002h
  9621                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9622                                  ;			; AL = critical section number (00h-0Fh)
  9623                                  ;	pop	ax
  9624                                  ;	retn
  9625                                  ;
  9626                                  ;LCritDevice:
  9627                                  ;	retn
  9628                                  ;	;push	ax
  9629                                  ;	
  9630                                  ;	mov	ax,8102h
  9631                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9632                                  ;			; AL = critical section number (00h-0Fh)
  9633                                  ;	pop	ax
  9634                                  ;	retn
  9635                                  
  9636                                  ;============================================================================
  9637                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9638                                  ;============================================================================
  9639                                  ; 12/05/2019 - Retro DOS v4.0
  9640                                  
  9641                                  ; Critical Section Routines
  9642                                  
  9643                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9644                                  
  9645                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9646                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9647                                  
  9648                                  ; ---------------------------------------------------------------------------
  9649                                  ; Each handler must leave everything untouched; including flags!
  9650                                  ;
  9651                                  ; Sleaze for time savings: first instruction is a return. This is patched
  9652                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9653                                  ; ---------------------------------------------------------------------------
  9654                                  
  9655                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9656                                  ; ---------------------------------------------------------------------------
  9657                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9658                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9659                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9660                                  ; ---------------------------------------------------------------------------
  9661                                  
  9662                                  ;%macro POPFF 0
  9663                                  ;	jmp	$+3
  9664                                  ;	iret
  9665                                  ;	push	cs
  9666                                  ;	call	$-2
  9667                                  ;%endmacro
  9668                                  
  9669                                  ; ---------------------------
  9670                                  
  9671                                  ;Procedure  ECritDisk,NEAR
  9672                                  	;public  ECritMEM
  9673                                  	;public  ECritSFT
  9674                                  ECritMEM:
  9675                                  ECritSFT:
  9676                                  ;
  9677                                  ECritDisk:
  9678                                  
  9679                                  ;SR; Check if critical section is to be entered
  9680                                  
  9681 000012F8 9C                      	pushf
  9682 000012F9 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9683 000012FF 740D                    	jz	short ECritDisk_2
  9684                                  
  9685                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9686                                  ;	;popff  ; * (macro)
  9687                                  ;	jmp	short ECritDisk_1 ; *
  9688                                  ;
  9689                                  ;ECritDisk_iret: ; *
  9690                                  ;	iret ; *
  9691                                  
  9692                                  	; 16/12/2022
  9693                                  	; 13/11/2022
  9694                                  	;jmp	short ECritDisk_1
  9695                                  	; 06/11/2022
  9696                                  ;ECritDisk_iret:
  9697                                  ;	iret	
  9698                                  
  9699                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9700                                  ECritDisk_1:
  9701 00001301 0E                      	push	cs ; *
  9702 00001302 E80800                  	call	ECritDisk_iret ; *		
  9703                                  	
  9704                                  ECritDisk_0:
  9705 00001305 50                      	PUSH    AX
  9706                                  	;MOV	AX,8000h+critDisk
  9707                                  	;INT	int_IBM
  9708 00001306 B80180                  	mov	ax,8001h
  9709 00001309 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9710                                  			; AL = critical section number (00h-0Fh)
  9711 0000130B 58                      	POP     AX
  9712 0000130C C3                      	retn
  9713                                  
  9714                                  	; 16/12/2022
  9715                                  	; 13/11/2022
  9716                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9717                                  LCritDisk_iret: 
  9718 0000130D CF                      	iret
  9719                                  
  9720                                  ECritDisk_2:
  9721                                  	;;popff ; *
  9722                                  	;;retn
  9723                                  ;	jmp	short ECritDisk_3 ; *
  9724                                  ;ECritDisk_iret2: ; *
  9725                                  ;	iret
  9726                                  	
  9727                                  	; 16/12/2022
  9728                                  	; 13/11/2022
  9729                                  	;jmp	short ECritDisk_3
  9730                                  ;ECritDisk_iret2:
  9731                                  	;iret
  9732                                  
  9733                                  ECritDisk_3:
  9734 0000130E 0E                      	push    cs ; *
  9735                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9736                                  	;call	ECritDisk_iret2 ; *
  9737                                  	;retn
  9738                                  	; 16/12/2022
  9739 0000130F E8FBFF                  	call	ECritDisk_iret
  9740 00001312 C3                      	retn
  9741                                  
  9742                                  ;EndProc ECritDisk
  9743                                  
  9744                                  ; ---------------------------
  9745                                  
  9746                                  ;Procedure   LCritDisk,NEAR
  9747                                  	;public  LCritMEM
  9748                                  	;public  LCritSFT
  9749                                  LCritMEM:
  9750                                  LCritSFT:
  9751                                  ;
  9752                                  LCritDisk:
  9753                                  
  9754                                  ;SR; Check if critical section is to be entered
  9755                                  
  9756 00001313 9C                      	pushf
  9757 00001314 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9758 0000131A 740C                    	jz	short LCritDisk_2
  9759                                  	;popff  ; * (macro)
  9760                                  ;	jmp	short LCritDisk_1 ; *
  9761                                  ;
  9762                                  ;LCritDisk_iret: ; *
  9763                                  ;	iret ; *
  9764                                  
  9765                                  	; 16/12/2022
  9766                                  	; 13/11/2022
  9767                                  	;jmp	short LCritDisk_1
  9768                                  ;LCritDisk_iret:
  9769                                  	;iret
  9770                                  
  9771                                  LCritDisk_1:
  9772 0000131C 0E                      	push	cs ; *
  9773 0000131D E8EDFF                  	call	LCritDisk_iret ; *		
  9774                                  	
  9775                                  LCritDisk_0:
  9776 00001320 50                      	PUSH	AX
  9777                                  	;MOV	AX,8100h+critDisk
  9778                                  	;INT	int_IBM
  9779 00001321 B80181                  	mov	ax,8101h
  9780 00001324 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9781                                  			; AL = critical section number (00h-0Fh)
  9782 00001326 58                      	POP	AX
  9783 00001327 C3                      	retn
  9784                                  
  9785                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9786                                  ;	iret
  9787                                  
  9788                                  LCritDisk_2:
  9789                                  	;;popff ; *
  9790                                  	;;retn
  9791                                  ;	jmp	short LCritDisk_3 ; *
  9792                                  ;LCritDisk_iret2: ; *
  9793                                  ;	iret
  9794                                  
  9795                                  	; 16/12/2022
  9796                                  	; 13/11/2022
  9797                                  	;jmp	short LCritDisk_3
  9798                                  ;LCritDisk_iret2:
  9799                                  	;iret
  9800                                  
  9801                                  LCritDisk_3:
  9802 00001328 0E                      	push    cs ; *
  9803                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9804                                  	;call	LCritDisk_iret2 ; *
  9805                                  	;retn
  9806                                  	; 16/12/2022
  9807 00001329 E8E1FF                  	call	LCritDisk_iret
  9808 0000132C C3                      	retn
  9809                                  
  9810                                  ;EndProc LCritDisk
  9811                                  
  9812                                  ; ---------------------------
  9813                                  
  9814                                  ;Procedure   ECritDevice,NEAR
  9815                                  
  9816                                  ECritDevice:
  9817                                  
  9818                                  ;SR; Check if critical section is to be entered
  9819                                  
  9820 0000132D 9C                      	pushf
  9821 0000132E 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9822 00001334 740D                    	jz	short ECritDevice_2
  9823                                  	;popff  ; * (macro)
  9824                                  ;	jmp	short ECritDevice_1 ; *
  9825                                  ;
  9826                                  ;ECritDevice_iret: ; *
  9827                                  ;	iret ; *
  9828                                  
  9829                                  	; 16/12/2022	
  9830                                  	; 13/11/2022
  9831                                  	;jmp	short ECritDevice_1
  9832                                  ;ECritDevice_iret:
  9833                                  	;iret
  9834                                  
  9835                                  ECritDevice_1:
  9836 00001336 0E                      	push	cs ; *
  9837 00001337 E80800                  	call	ECritDevice_iret ; *		
  9838                                  	
  9839                                  ECritDevice_0:
  9840 0000133A 50                      	PUSH	AX
  9841                                  	;MOV	AX,8000h+critDevice
  9842                                  	;INT	int_IBM
  9843 0000133B B80280                  	mov	ax,8002h
  9844 0000133E CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9845                                  			; AL = critical section number (00h-0Fh)
  9846 00001340 58                      	POP     AX
  9847 00001341 C3                      	retn
  9848                                  
  9849                                  	; 16/12/2022
  9850                                  	; 06/12/2022
  9851                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9852                                  LCritDevice_iret: 
  9853 00001342 CF                      	iret
  9854                                  
  9855                                  ECritDevice_2:
  9856                                  	;;popff ; *
  9857                                  	;;retn
  9858                                  ;	jmp	short ECritDevice_3 ; *
  9859                                  ;ECritDevice_iret2: ; *
  9860                                  ;	iret
  9861                                  
  9862                                  	; 16/12/2022
  9863                                  	; 13/11/2022
  9864                                  	;jmp	short ECritDevice_3
  9865                                  ;ECritDevice_iret2:
  9866                                  	;iret
  9867                                  
  9868                                  ECritDevice_3:
  9869 00001343 0E                      	push    cs ; *
  9870                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9871                                  	;call	ECritDevice_iret2 ; *
  9872                                  	;retn
  9873                                  	; 16/12/2022
  9874 00001344 E8FBFF                  	call	ECritDevice_iret
  9875 00001347 C3                      	retn
  9876                                  
  9877                                  ;EndProc ECritDevice
  9878                                  
  9879                                  ; ---------------------------
  9880                                  
  9881                                  ;Procedure   LCritDevice,NEAR
  9882                                  
  9883                                  LCritDevice:
  9884                                  
  9885                                  ;SR; Check if critical section is to be entered
  9886                                  
  9887 00001348 9C                      	pushf
  9888 00001349 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9889 0000134F 740C                    	jz	short LCritDevice_2
  9890                                  	;popff  ; * (macro)
  9891                                  ;	jmp	short LCritDevice_1 ; *
  9892                                  ;
  9893                                  ;LCritDevice_iret: ; *
  9894                                  ;	iret ; *
  9895                                  
  9896                                  	; 16/12/2022
  9897                                  	; 13/11/2022
  9898                                  	;jmp	short LCritDevice_1
  9899                                  ;LCritDevice_iret:
  9900                                  	;iret
  9901                                  
  9902                                  LCritDevice_1:
  9903 00001351 0E                      	push	cs ; *
  9904 00001352 E8EDFF                  	call	LCritDevice_iret ; *		
  9905                                  	
  9906                                  LCritDevice_0:
  9907 00001355 50                      	PUSH	AX
  9908                                  	;MOV	AX,8100h+critDevice
  9909                                  	;INT	int_IBM
  9910 00001356 B80281                  	mov	ax,8102h
  9911 00001359 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9912                                  			; AL = critical section number (00h-0Fh)
  9913 0000135B 58                      	POP     AX
  9914 0000135C C3                      	retn
  9915                                  
  9916                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9917                                  ;	iret
  9918                                  
  9919                                  LCritDevice_2:
  9920                                  	;;popff ; *
  9921                                  	;;retn
  9922                                  ;	jmp	short LCritDevice_3 ; *
  9923                                  ;LCritDevice_iret2: ; *
  9924                                  ;	iret
  9925                                  
  9926                                  	; 16/12/2022
  9927                                  	; 13/11/2022
  9928                                  	;jmp	short LCritDevice_3
  9929                                  ;LCritDevice_iret2:
  9930                                  	;iret
  9931                                  
  9932                                  LCritDevice_3:
  9933 0000135D 0E                      	push    cs ; *
  9934                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9935                                  	;call	LCritDevice_iret2 ; *
  9936                                  	;retn
  9937                                  	; 16/12/2022
  9938 0000135E E8E1FF                  	call	LCritDevice_iret
  9939 00001361 C3                      	retn
  9940                                  
  9941                                  ;EndProc LCritDevice
  9942                                  
  9943                                  ;============================================================================
  9944                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9945                                  ;============================================================================
  9946                                  ; 20/07/2018 - Retro DOS v3.0
  9947                                  
  9948                                  ;============================================================================
  9949                                  ; STDIO.ASM - (MSDOS 2.0)
  9950                                  ;============================================================================
  9951                                  
  9952                                  ;
  9953                                  ; Standard device IO for MSDOS (first 12 function calls)
  9954                                  ;
  9955                                  
  9956                                  ;.xlist
  9957                                  ;.xcref
  9958                                  ;INCLUDE STDSW.ASM
  9959                                  ;INCLUDE DOSSEG.ASM
  9960                                  ;.cref
  9961                                  ;.list
  9962                                  
  9963                                  ;TITLE   STDIO - device IO for MSDOS
  9964                                  ;NAME    STDIO
  9965                                  
  9966                                  ;INCLUDE IO.ASM
  9967                                  
  9968                                  ; ---------------------------------------------------------------------------
  9969                                  ;
  9970                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9971                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9972                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9973                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9974                                  ;			    to restore MSDOS 2.0 device IO source code 
  9975                                  ;
  9976                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9977                                  	
  9978                                  ;============================================================================
  9979                                  ; STDIO.ASM - (MSDOS 2.0)
  9980                                  ;============================================================================
  9981                                  
  9982                                  ;
  9983                                  ; Standard device IO for MSDOS (first 12 function calls)
  9984                                  ;
  9985                                  
  9986                                  ;.xlist
  9987                                  ;.xcref
  9988                                  ;INCLUDE STDSW.ASM
  9989                                  ;INCLUDE DOSSEG.ASM
  9990                                  ;.cref
  9991                                  ;.list
  9992                                  
  9993                                  ;TITLE   STDIO - device IO for MSDOS
  9994                                  ;NAME    STDIO
  9995                                  
  9996                                  ;INCLUDE IO.ASM
  9997                                  
  9998                                  ; ---------------------------------------------------------------------------
  9999                                  ;
 10000                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
 10001                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
 10002                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
 10003                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
 10004                                  ;			    to restore MSDOS 2.0 device IO source code 
 10005                                  ;
 10006                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
 10007                                  ;
 10008                                  ;============================================================================
 10009                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
 10010                                  ;============================================================================
 10011                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
 10012                                  
 10013                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
 10014                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
 10015                                  
 10016                                  ;============================================================================
 10017                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
 10018                                  ;============================================================================
 10019                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
 10020                                  
 10021                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10022                                  
 10023                                  ;**	Standard device IO for MSDOS (first 12 function calls)
 10024                                  ;
 10025                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
 10026                                  ;	NAME	IBMCPMIO
 10027                                  
 10028                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
 10029                                  ;
 10030                                  ;	$Std_Con_Input_No_Echo
 10031                                  ;	$Std_Con_String_Output
 10032                                  ;	$Std_Con_String_Input
 10033                                  ;	$RawConIO
 10034                                  ;	$RawConInput
 10035                                  ;	RAWOUT
 10036                                  ;	RAWOUT2
 10037                                  ;
 10038                                  
 10039                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10040                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10041                                  ; references to be SS or CS relative which is desired.
 10042                                  
 10043                                  ; ---------------------------------------------------------------------------
 10044                                  
 10045                                  ;	TITLE	CPMIO2 - device IO for MSDOS
 10046                                  ;	NAME	CPMIO2
 10047                                  
 10048                                  ;
 10049                                  ;	Microsoft Confidential
 10050                                  ;	Copyright (C) Microsoft Corporation 1991
 10051                                  ;	All Rights Reserved.
 10052                                  ;
 10053                                  
 10054                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
 10055                                  ;
 10056                                  ;	$Std_Con_Input
 10057                                  ;	$Std_Con_Output
 10058                                  ;	OUTT
 10059                                  ;	TAB
 10060                                  ;	BUFOUT
 10061                                  ;	$Std_Aux_Input
 10062                                  ;	$Std_Aux_Output
 10063                                  ;	$Std_Printer_Output
 10064                                  ;	$Std_Con_Input_Status
 10065                                  ;	$Std_Con_Input_Flush
 10066                                  ;
 10067                                  ;	Revision History:
 10068                                  ;
 10069                                  ;	  AN000	 version 4.00 - Jan. 1988
 10070                                  
 10071                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10072                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10073                                  ; references to be SS or CS relative which is desired.
 10074                                  
 10075                                  ;DOSCODE SEGMENT
 10076                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
 10077                                  
 10078                                  
 10079                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10080                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10081                                  ;hkn;	not valid. 
 10082                                  
 10083                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
 10084                                  ; 08/11/2022
 10085                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
 10086                                  
 10087                                  ;
 10088                                  ;----------------------------------------------------------------------------
 10089                                  ;
 10090                                  ; Procedure : $Std_Con_Input_No_Echo
 10091                                  ;
 10092                                  ;----------------------------------------------------------------------------
 10093                                  ;
 10094                                  
 10095                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
 10096                                  
 10097                                  ; Inputs:
 10098                                  ;	None
 10099                                  ; Function:
 10100                                  ;	Input character from console, no echo
 10101                                  ; Returns:
 10102                                  ;	AL = character
 10103                                  
 10104 00001362 1E                      	push	ds
 10105 00001363 56                      	push	si
 10106                                  INTEST:
 10107 00001364 E82E3D                  	call	STATCHK
 10108 00001367 753B                    	jnz	short GET ; 08/09/2018
 10109                                  ;*************************************************************************
 10110                                  ;hkn; SS override
 10111 00001369 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
 10112 0000136F 7505                    	jnz	short no_sys_wait
 10113 00001371 B405                    	mov	ah,5			; get input status with system wait
 10114 00001373 E84530                  	call	IOFUNC
 10115                                  no_sys_wait:
 10116                                  ;**************************************************************************
 10117 00001376 B484                    	MOV	AH,84h
 10118 00001378 CD2A                    	INT	int_IBM	 ; int 2Ah
 10119                                  
 10120                                  ;;; 7/15/86  update the date in the idle loop
 10121                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
 10122                                  ;;;;		 to shorten loop in consideration of the PC Convertible
 10123                                  
 10124                                  ;hkn; SS override
 10125 0000137A 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
 10126 00001380 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
 10127                                  
 10128 00001382 50                      	PUSH	AX
 10129 00001383 53                      	PUSH	BX			; following is tricky,
 10130 00001384 51                      	PUSH	CX			; it may be called by critical handler
 10131 00001385 52                      	PUSH	DX			; at that time, DEVCALL is used by
 10132                                  					; other's READ or WRITE
 10133 00001386 1E                      	PUSH	DS			; save DS = SFT's segment
 10134                                  
 10135                                  ;hkn; READTIME must use ds = DOSDATA
 10136                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
 10137                                  
 10138 00001387 16                      	PUSH	SS ; 04/05/2019
 10139 00001388 1F                      	POP	DS
 10140                                  
 10141 00001389 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
 10142 0000138C E89102                  	CALL	Save_Restore_Packet	; save DEVCALL packet
 10143                                  	;invoke	READTIME		; readtime
 10144 0000138F E883F7                  	call	READTIME
 10145 00001392 B80100                  	MOV	AX,1
 10146 00001395 E88802                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
 10147                                  
 10148                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
 10149                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
 10150                                  ;	push	bx
 10151                                  ;	mov	bx,DATE_FLAG
 10152                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
 10153                                  ;	cmp	word [cs:bx],5872h
 10154                                  ;	jz	short FETCHI_TAG_chk_ok
 10155                                  ;	call	DOSINIT
 10156                                  ;FETCHI_TAG_chk_ok:
 10157                                  ;	pop	bx
 10158                                  
 10159 00001398 1F                      	POP	DS			; restore DS
 10160 00001399 5A                      	POP	DX
 10161 0000139A 59                      	POP	CX
 10162 0000139B 5B                      	POP	BX
 10163 0000139C 58                      	POP	AX
 10164                                  NoUpdate:
 10165                                  
 10166                                  ;hkn; SS override
 10167 0000139D 36FF06[910D]            	INC	word [SS:DATE_FLAG]
 10168                                  
 10169                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10170 000013A2 EBC0                    	JMP	short INTEST
 10171                                  GET:
 10172 000013A4 30E4                    	XOR	AH,AH
 10173 000013A6 E81230                  	call	IOFUNC
 10174 000013A9 5E                      	POP	SI
 10175 000013AA 1F                      	POP	DS
 10176                                  ;;; 7/15/86
 10177                                  
 10178                                  ;hkn; SS override
 10179                                  	; MSDOS 6.0
 10180 000013AB 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10181                                  	;
 10182 000013B1 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10183 000013B3 7505                    	JNZ	short noscan
 10184                                  
 10185                                  ;hkn; SS override
 10186                                  	;MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10187                                  	; 20/06/2023
 10188 000013B5 36FE06[900D]            	inc	byte [SS:SCAN_FLAG]
 10189                                  noscan:
 10190 000013BA C3                      	retn
 10191                                  ;
 10192                                  ;----------------------------------------------------------------------------
 10193                                  ;
 10194                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10195                                  ;
 10196                                  ;
 10197                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10198                                  ;	EXIT	none
 10199                                  ;	USES	ALL
 10200                                  ;
 10201                                  ;----------------------------------------------------------------------------
 10202                                  ;
 10203                                  
 10204                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10205                                  
 10206 000013BB 89D6                    	mov	si,dx
 10207                                  STRING_OUT1:	
 10208 000013BD AC                      	lodsb
 10209 000013BE 3C24                    	cmp	al,'$'
 10210 000013C0 74F8                    	je	short noscan
 10211                                  NEXT_STR1:
 10212 000013C2 E88402                  	call	OUTT
 10213 000013C5 EBF6                    	jmp	short STRING_OUT1
 10214                                  
 10215                                  ;----------------------------------------------------------------------------
 10216                                  ;
 10217                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10218                                  ;
 10219                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10220                                  ;
 10221                                  ;	ENTRY	(ds:dx) = input buffer
 10222                                  ;	EXIT	none
 10223                                  ;	USES	ALL
 10224                                  ;
 10225                                  ;----------------------------------------------------------------------------
 10226                                  
 10227                                  	; 15/01/2024
 10228                                  
 10229                                  _$STD_CON_STRING_INPUT:		;System call 10
 10230                                  
 10231                                  	; 15/01/2024
 10232                                  	;mov	ax,ss
 10233                                  	;mov	es,ax
 10234 000013C7 16                      	push	ss
 10235 000013C8 07                      	pop	es
 10236                                  
 10237 000013C9 89D6                    	mov	si,dx
 10238 000013CB 30ED                    	xor	ch,ch
 10239 000013CD AD                      	lodsw
 10240                                  
 10241                                  ;	(AL) = the buffer length
 10242                                  ;	(AH) = the template length
 10243                                  
 10244 000013CE 08C0                            or	al,al
 10245 000013D0 74E8                            jz	short noscan	;Buffer is 0 length!!?
 10246 000013D2 88E3                    	mov	bl,ah		;Init template counter
 10247 000013D4 88EF                            mov	bh,ch		;Init template counter
 10248                                  
 10249                                  ;	(BL) = the number of bytes in the template
 10250                                  
 10251 000013D6 38D8                            cmp	al,bl
 10252 000013D8 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10253 000013DA 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10254 000013DD 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10255                                  
 10256                                  ; The number of chars in the template is >= the number of chars in buffer or
 10257                                  ; there is no CR at the end of the template. This is an inconsistant state
 10258                                  ; of affairs. Pretend that the template was empty:
 10259                                  ;
 10260                                  
 10261                                  NOEDIT:	
 10262 000013DF 88EB                    	mov	bl,ch		;Reset buffer
 10263                                  EDITON: 
 10264 000013E1 88C2                    	mov	dl,al
 10265 000013E3 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10266                                  
 10267                                  ;	Top level. We begin to read a line in.
 10268                                  
 10269                                  NEWLIN: 
 10270 000013E4 36A0[F901]              	mov	al,[SS:CARPOS]
 10271 000013E8 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10272                                  
 10273 000013EC 56                      	push	si
 10274 000013ED BF[FB01]                	mov	di,INBUF ;Build the new line here
 10275 000013F0 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10276 000013F5 88EF                    	mov	bh,ch		;No chars from template yet
 10277 000013F7 88EE                    	mov	dh,ch		;No chars to new line yet
 10278 000013F9 E866FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10279 000013FC 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10280 000013FE 7503                    	jnz	short GOTCH
 10281                                  
 10282                                  ;	This is the main loop of reading in a character and processing it.
 10283                                  ;
 10284                                  ;	(BH) = the index of the next byte in the template
 10285                                  ;	(BL) = the length of the template
 10286                                  ;	(DH) = the number of bytes in the buffer
 10287                                  ;	(DL) = the length of the buffer
 10288                                  
 10289                                  GETCH:
 10290 00001400 E85FFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10291                                  GOTCH:
 10292                                  ;
 10293                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10294                                  ; input queue.
 10295                                  ;
 10296 00001403 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10297 00001405 74F9                    	jz	short GETCH
 10298                                  
 10299                                  ;	If the leading char is the function-key lead byte
 10300                                  
 10301                                  	;cmp	al,[SS:ESCCHAR]
 10302                                  
 10303                                  	; 04/05/2019 - Retro DOS v4.0
 10304                                  
 10305                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10306                                  
 10307 00001407 2E3A06[1F0A]            	CMP	AL,[cs:ESCCHAR]
 10308 0000140C 7439                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10309                                  
 10310                                  ;	Rubout and ^H are both destructive backspaces.
 10311                                  
 10312 0000140E 3C7F                            cmp	al,c_DEL ; 7FH
 10313                                          ;jz	short BACKSPJ
 10314                                          ; 15/01/2024
 10315 00001410 7466                    	je	short BACKSP
 10316 00001412 3C08                    	cmp	al,c_BS  ; 8
 10317                                          ;jz	short BACKSPJ
 10318                                          ; 15/01/2024
 10319 00001414 7462                    	je	short BACKSP
 10320                                  
 10321                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10322                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10323                                  	;	   	after CMP and a CMP again!
 10324                                  	;		
 10325                                  	;		-It would be better if they use a 'JMP short' to 
 10326                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10327                                  	;		between them. Then, they would be able use a patch
 10328                                  	;		between 5271h and 5279h when if it will be required.
 10329                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10330                                  	;	
 10331                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10332                                  
 10333                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10334                                  	;
 10335                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10336                                  
 10337                                  ;DOSCODE:526D	cmp     al, 8
 10338                                  ;DOSCODE:526F	jz      short BACKSPJ
 10339                                  ;DOSCODE:5271	cmp     al, 17h
 10340                                  ;DOSCODE:5273	nop
 10341                                  ;DOSCODE:5274	nop
 10342                                  ;DOSCODE:5275	cmp     al, 15h
 10343                                  ;DOSCODE:5277	nop
 10344                                  ;DOSCODE:5278	nop
 10345                                  ;DOSCODE:5279	cmp     al, 0Dh
 10346                                  ;DOSCODE:527B	jz      short ENDLIN
 10347                                  ;DOSCODE:527D	cmp     al, 0Ah
 10348                                  ;DOSCODE:527F	jz      short PHYCRLF
 10349                                  	
 10350                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10351                                  	; DOSCODE:525Dh
 10352                                  
 10353                                  ; 16/12/2022
 10354                                  %if 0
 10355                                  	; MSDOS 6.0
 10356                                  ;	^W deletes backward once and then backs up until a letter is before the
 10357                                  ;	cursor
 10358                                  
 10359                                  	CMP     AL,"W"-"@" ; 17h
 10360                                  
 10361                                  ;	The removal of the comment characters before the jump statement will
 10362                                  ;	cause ^W to backup a word.
 10363                                  
 10364                                  ;***	JZ	short WordDel
 10365                                  	NOP
 10366                                  	NOP
 10367                                  
 10368                                  	CMP     AL,"U"-"@" ; 15h
 10369                                  
 10370                                  ;	The removal of the comment characters before the jump statement will
 10371                                  ;	cause ^U to clear a line.
 10372                                  
 10373                                  ;***	JZ	short LineDel
 10374                                  	NOP
 10375                                  	NOP
 10376                                  
 10377                                  %endif
 10378                                  
 10379                                  ;	CR terminates the line.
 10380                                  
 10381 00001416 3C0D                            cmp	al,c_CR ; 0Dh
 10382 00001418 7430                            jz	short ENDLIN
 10383                                  
 10384                                  ;	LF goes to a new line and keeps on reading.
 10385                                  
 10386 0000141A 3C0A                            cmp	al,c_LF ; 0Ah
 10387 0000141C 7442                    	jz	short PHYCRLF
 10388                                  
 10389                                  ;	^X (or ESC) deletes the line and starts over
 10390                                  
 10391                                  	; MSDOS 3.3
 10392                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10393                                  	;jz	short KILNEW
 10394                                  
 10395                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10396                                  
 10397                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10398                                  
 10399 0000141E 2E3A06[1E0A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10400 00001423 7440                    	jz	short KILNEW
 10401                                  	
 10402                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10403                                  	;jz	short KILNEW
 10404                                  
 10405                                  ; Otherwise, we save the input character.
 10406                                  
 10407                                  SAVCH:	
 10408 00001425 38D6                    	cmp	dh,dl
 10409 00001427 7317                    	jnb	short BUFFUL		; buffer is full.
 10410 00001429 AA                              stosb
 10411 0000142A FEC6                    	inc	dh                      ; increment count in buffer.
 10412 0000142C E8AE02                  	call	BUFOUT			; Print control chars nicely
 10413                                  
 10414 0000142F 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10415 00001435 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10416 00001437 38DF                            cmp	bh,bl
 10417 00001439 73C5                            jnb	short GETCH		; no more characters in template
 10418 0000143B 46                              inc	si                      ; Skip to next char in template
 10419 0000143C FEC7                            inc	bh                      ; remember position in template
 10420 0000143E EBC0                            jmp	short GETCH
 10421                                  
 10422                                  	; 15/01/2024
 10423                                  ;BACKSPJ: 
 10424                                  	;jmp	short BACKSP
 10425                                  
 10426                                  BUFFUL: 
 10427 00001440 B007                    	mov	al, 7			; Bell to signal full buffer
 10428 00001442 E80402                  	call	OUTT
 10429 00001445 EBB9                    	jmp	short GETCH
 10430                                  
 10431                                  ESCAPE: 
 10432                                  	;transfer OEMFunctionKey
 10433 00001447 E900F6                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10434                                  
 10435                                  ENDLIN:
 10436 0000144A AA                              stosb				; Put the CR in the buffer
 10437 0000144B E8FB01                  	call	OUTT                    ; Echo it
 10438 0000144E 5F                              pop	di                      ; Get start of user buffer
 10439 0000144F 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10440 00001452 FEC6                            inc	dh			; DH is length including CR
 10441                                  
 10442                                  COPYNEW:
 10443                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10444                                  	;mov	bp, es
 10445                                  	;mov	bx, ds
 10446                                  	;mov	es, bx
 10447                                  	;mov	ds, bp
 10448                                  	;mov	si, INBUF
 10449                                  	;mov	cl, dh
 10450                                  	;rep	movsb
 10451                                  	;retn
 10452                                  
 10453                                  	; CPMIO.ASM (MSDOS 6.0)
 10454                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10455                                  	;SAVE	<DS,ES>
 10456 00001454 1E                      	PUSH	DS
 10457 00001455 06                      	PUSH	ES
 10458                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10459 00001456 1F                      	POP	DS
 10460 00001457 07                      	POP	ES
 10461                                  
 10462                                  ;;hkn; INBUF is in DOSDATA
 10463 00001458 BE[FB01]                        MOV     SI,INBUF
 10464 0000145B 88F1                            MOV     CL,DH                   ; set up count
 10465 0000145D F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10466                                  OLDBAK_RETN:
 10467 0000145F C3                              RETN
 10468                                  
 10469                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10470                                  
 10471                                  PHYCRLF:
 10472 00001460 E81B01                  	CALL	CRLF
 10473 00001463 EB9B                            JMP	short GETCH
 10474                                  
 10475                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10476                                  
 10477                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10478                                  
 10479                                  	; Note: Following routines were not used in IBMDOS.COM
 10480                                  	;	-CRTL+W, CRTL+U is not activated-
 10481                                  	;	but they were in the kernel code!?)
 10482                                  
 10483                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10484                                  	; DOSCODE:52B6h
 10485                                  
 10486                                  ;;;;;;;;
 10487                                  
 10488                                  ; 16/12/2022
 10489                                  %if 0
 10490                                  ;
 10491                                  ; Delete the previous line
 10492                                  ;
 10493                                  LineDel:
 10494                                  	OR      DH,DH
 10495                                  	JZ	short GETCH	 ; 06/12/2022
 10496                                  	Call    BackSpace
 10497                                  	JMP	short LineDel
 10498                                  
 10499                                  %endif
 10500                                  
 10501                                  ;
 10502                                  ; delete the previous word.
 10503                                  ;
 10504                                  WordDel:
 10505                                  WordLoop:
 10506                                  ;	Call    BackSpace               ; backspace the one spot
 10507                                  ;	OR      DH,DH
 10508                                  ;	JZ	short GetChj
 10509                                  ;	MOV     AL,[ES:DI-1]
 10510                                  ;	cmp     al,'0'
 10511                                  ;	jb	short GetChj
 10512                                  ;	cmp     al,'9'
 10513                                  ;	jbe	short WordLoop
 10514                                  ;	OR      AL,20h
 10515                                  ;	CMP     AL,'a'
 10516                                  ;	JB	short GetChj
 10517                                  ;	CMP     AL,'z'
 10518                                  ;	JBE	short WordLoop
 10519                                  ;GetChj: 
 10520                                  ;	JMP	GETCH
 10521                                  
 10522                                  ; 16/12/2022
 10523                                  %if 0
 10524                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10525                                  	; (Worddel is not called or jumped from anywhere!)
 10526                                  WordDel:
 10527                                  WordLoop:
 10528                                  	Call    BackSpace               ; backspace the one spot
 10529                                  	OR      DH,DH
 10530                                  	JZ	short GetChj
 10531                                  	MOV     AL,[ES:DI-1]
 10532                                  	cmp     al,'0'
 10533                                  	jb	short GetChj
 10534                                  	cmp     al,'9'
 10535                                  	jbe	short WordLoop
 10536                                  	OR      AL,20h
 10537                                  	CMP     AL,'a'
 10538                                  	JB	short GetChj
 10539                                  	CMP     AL,'z'
 10540                                  	JBE	short WordLoop
 10541                                  GetChj: 
 10542                                  	JMP	GETCH
 10543                                  
 10544                                  %endif
 10545                                  
 10546                                  ;;;;;;;;
 10547                                  
 10548                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10549                                  
 10550                                  ; The user wants to throw away what he's typed in and wants to start over.
 10551                                  ; We print the backslash and then go to the next line and tab to the correct
 10552                                  ; spot to begin the buffered input.
 10553                                  
 10554                                  KILNEW:
 10555 00001465 B05C                            mov	al,'\'
 10556 00001467 E8DF01                          call	OUTT            ;Print the CANCEL indicator
 10557 0000146A 5E                              pop	si		;Remember start of edit buffer
 10558                                  PUTNEW:
 10559 0000146B E81001                  	call	CRLF            ;Go to next line on screen
 10560 0000146E 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10561 00001472 E84802                  	call	TAB             ;Tab over
 10562 00001475 E96CFF                          JMP     NEWLIN		;Start over again
 10563                                  
 10564                                  ;	Destructively back up one character position
 10565                                  
 10566                                  BACKSP:
 10567                                  	; 09/09/2018
 10568 00001478 E80800                  	Call    BackSpace
 10569 0000147B EB83                    	JMP     short GETCH	; 15/01/2024
 10570                                  
 10571                                  	; 15/01/2024
 10572                                  ;User really wants an ESC character in his line
 10573                                  TWOESC:	
 10574 0000147D 2EA0[1F0A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10575 00001481 EBA2                    	jmp	short SAVCH
 10576                                  
 10577                                  BackSpace:
 10578 00001483 08F6                    	or	dh,dh
 10579 00001485 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10580 00001487 E85800                  	call	BACKUP          ;Do the backup
 10581 0000148A 268A05                  	mov	al,[es:di]	;Get the deleted char
 10582 0000148D 3C20                            cmp	al,20h	; ' '
 10583 0000148F 730F                    	jnb	short OLDBAK	;Was a normal char
 10584 00001491 3C09                            cmp	al,c_HT ; 9
 10585 00001493 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10586                                  ;; 9/27/86 fix for ctrl-U backspace
 10587 00001495 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10588 00001497 7407                    	JZ	short OLDBAK
 10589 00001499 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10590 0000149B 7403                    	JZ	short OLDBAK
 10591                                  ;; 9/27/86 fix for ctrl-U backspace
 10592 0000149D E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10593                                  OLDBAK:
 10594 000014A0 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10595 000014A6 75B7                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10596 000014A8 08FF                    	or	bh,bh
 10597 000014AA 74B3                            jz	short OLDBAK_RETN 
 10598                                  				;Not advanced in template, stay where we are
 10599 000014AC FECF                    	dec	bh		;Go back in template
 10600 000014AE 4E                              dec	si
 10601 000014AF C3                      	retn
 10602                                  BAKTAB:
 10603 000014B0 57                              push	di
 10604 000014B1 4F                              dec	di		;Back up one char
 10605 000014B2 FD                              std			;Go backward
 10606 000014B3 88F1                            mov	cl,dh		;Number of chars currently in line
 10607 000014B5 B020                            mov	al,20h	; ' '
 10608 000014B7 53                              push	bx
 10609 000014B8 B307                            mov	bl,7		;Max
 10610 000014BA E30E                            jcxz	FIGTAB		;At start, do nothing
 10611                                  FNDPOS:
 10612 000014BC AE                              scasb			;Look back
 10613 000014BD 7609                    	jbe	short CHKCNT
 10614 000014BF 26807D0109              	cmp	byte [es:di+1],9
 10615 000014C4 7409                    	jz	short HAVTAB	;Found a tab
 10616 000014C6 FECB                    	dec	bl		;Back one char if non tab control char
 10617                                  CHKCNT:
 10618 000014C8 E2F2                            loop	FNDPOS
 10619                                  FIGTAB:		
 10620 000014CA 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10621                                  HAVTAB:
 10622 000014CF 28F3                    	sub	bl,dh
 10623 000014D1 00D9                    	add	cl,bl
 10624 000014D3 80E107                  	and	cl,7		;CX has correct number to erase
 10625 000014D6 FC                      	cld			;Back to normal
 10626 000014D7 5B                      	pop	bx
 10627 000014D8 5F                      	pop	di
 10628 000014D9 74C5                    	jz	short OLDBAK	;Nothing to erase
 10629                                  TABBAK:
 10630 000014DB E80700                  	call	BACKMES
 10631 000014DE E2FB                    	loop	TABBAK		;Erase correct number of chars
 10632 000014E0 EBBE                    	jmp	short OLDBAK
 10633                                  
 10634                                  BACKUP:
 10635 000014E2 FECE                            dec	dh		;Back up in line
 10636 000014E4 4F                              dec	di
 10637                                  BACKMES:
 10638 000014E5 B008                            mov	al,c_BS ; 8	;Backspace
 10639 000014E7 E85F01                          call	OUTT
 10640 000014EA B020                            mov	al,20h ; ' '	;Erase
 10641 000014EC E85A01                          call	OUTT
 10642 000014EF B008                            mov	al,c_BS ; 8	;Backspace
 10643 000014F1 E95501                  	jmp	OUTT		;Done
 10644                                  
 10645                                  	; 15/01/2024
 10646                                  ;User really wants an ESC character in his line
 10647                                  ;TWOESC:	
 10648                                  ;	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10649                                  ;	jmp	SAVCH
 10650                                  
 10651                                  ;Copy the rest of the template
 10652                                  COPYLIN:
 10653 000014F4 88D9                            mov	cl,bl		;Total size of template
 10654 000014F6 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10655 000014F8 EB07                            jmp	short COPYEACH
 10656                                  
 10657                                  COPYSTR:
 10658 000014FA E83200                  	call	FINDOLD         ;Find the char
 10659 000014FD EB02                    	jmp	short COPYEACH  ;Copy up to it
 10660                                  
 10661                                  ;Copy one char from template to line
 10662                                  COPYONE:
 10663 000014FF B101                            mov	cl,1
 10664                                  ;Copy CX chars from template to line
 10665                                  COPYEACH:
 10666 00001501 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10667 00001507 38D6                    	cmp	dh,dl
 10668 00001509 740F                            jz	short GETCH2		;At end of line, can't do anything
 10669 0000150B 38DF                            cmp	bh,bl
 10670 0000150D 740B                            jz	short GETCH2		;At end of template, can't do anything
 10671 0000150F AC                              lodsb
 10672 00001510 AA                              stosb
 10673 00001511 E8C901                  	call	BUFOUT
 10674 00001514 FEC7                            inc	bh			;Ahead in template
 10675 00001516 FEC6                            inc	dh			;Ahead in line
 10676 00001518 E2E7                            loop	COPYEACH
 10677                                  GETCH2:
 10678 0000151A E9E3FE                          jmp	GETCH
 10679                                  
 10680                                  ;Skip one char in template
 10681                                  SKIPONE:
 10682 0000151D 38DF                    	cmp	bh,bl
 10683 0000151F 74F9                    	jz	short GETCH2		;At end of template
 10684 00001521 FEC7                    	inc	bh			;Ahead in template
 10685 00001523 46                      	inc	si
 10686                                          ;jmp	GETCH
 10687                                  	; 15/01/2024
 10688 00001524 EBF4                    	jmp	short GETCH2
 10689                                  
 10690                                  SKIPSTR:
 10691 00001526 E80600                  	call	FINDOLD                 ;Find out how far to go
 10692 00001529 01CE                            add	si,cx			;Go there
 10693 0000152B 00CF                            add	bh,cl
 10694                                          ;jmp	GETCH
 10695                                  	; 15/01/2024
 10696 0000152D EBEB                    	jmp	short GETCH2
 10697                                  
 10698                                  ;Get the next user char, and look ahead in template for a match
 10699                                  ;CX indicates how many chars to skip to get there on output
 10700                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10701                                  ;       address is popped off and a jump to GETCH is taken.
 10702                                  ;       Make sure nothing extra on stack when this routine
 10703                                  ;       is called!!! (no PUSHes before calling it).
 10704                                  
 10705                                  FINDOLD:
 10706 0000152F E830FE                          call	_$STD_CON_INPUT_NO_ECHO
 10707                                  
 10708                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10709                                  
 10710                                  	;CMP	AL,[SS:ESCCHAR]	
 10711                                  	;JNZ	SHORT FINDSETUP
 10712                                  
 10713                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10714                                  
 10715                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10716                                  
 10717 00001532 2E3A06[1F0A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10718 00001537 7505                    	JNZ	SHORT FINDSETUP		; no, set up for scan
 10719                                  
 10720 00001539 E826FE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10721 0000153C EB1D                            JMP	SHORT NOTFND		; go try again
 10722                                  FINDSETUP:
 10723 0000153E 88D9                    	mov	cl,bl
 10724 00001540 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10725 00001542 7417                    	jz	short NOTFND	;At end of template
 10726 00001544 49                              dec	cx		;Cannot point past end, limit search
 10727 00001545 7414                            jz	short NOTFND	;If only one char in template, forget it
 10728 00001547 06                      	push	es
 10729 00001548 1E                      	push	ds
 10730 00001549 07                      	pop	es
 10731 0000154A 57                      	push	di
 10732 0000154B 89F7                    	mov	di,si		;Template to ES:DI
 10733 0000154D 47                      	inc	di
 10734 0000154E F2AE                    	repne	scasb		;Look
 10735 00001550 5F                      	pop	di
 10736 00001551 07                      	pop	es
 10737 00001552 7507                    	jnz	short NOTFND	;Didn't find the char
 10738 00001554 F6D1                            not	cl		;Turn how far to go into how far we went
 10739 00001556 00D9                            add	cl,bl		;Add size of template
 10740 00001558 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10741                                  FINDOLD_RETN:
 10742 0000155A C3                      	retn
 10743                                  
 10744                                  NOTFND:
 10745 0000155B 5D                      	pop	bp              ;Chuck return address
 10746                                  	;jmp	GETCH
 10747                                  	; 15/01/2024
 10748                                  GETCH2_j:
 10749 0000155C EBBC                    	jmp	short GETCH2
 10750                                  
 10751                                  REEDIT:
 10752 0000155E B040                    	mov	al,'@'		;Output re-edit character
 10753 00001560 E8E600                  	call	OUTT
 10754 00001563 5F                      	pop	di
 10755 00001564 57                      	push	di
 10756 00001565 06                      	push	es
 10757 00001566 1E                      	push	ds
 10758 00001567 E8EAFE                  	call	COPYNEW		;Copy current line into template
 10759 0000156A 1F                      	pop	ds
 10760 0000156B 07                      	pop	es
 10761 0000156C 5E                      	pop	si
 10762 0000156D 88F3                    	mov	bl,dh		;Size of line is new size template
 10763 0000156F E9F9FE                  	jmp	PUTNEW		;Start over again
 10764                                  
 10765                                  EXITINS:
 10766                                  ENTERINS:
 10767 00001572 36F616[7905]            	not	byte [SS:INSMODE]
 10768                                  	;jmp	GETCH
 10769                                  	; 15/01/2024
 10770 00001577 EBE3                    	jmp	short GETCH2_j
 10771                                  
 10772                                  ;Put a real live ^Z in the buffer (embedded)
 10773                                  CTRLZ:
 10774 00001579 B01A                    	mov	al,"Z"-"@" ; 1Ah
 10775 0000157B E9A7FE                          jmp	SAVCH
 10776                                  
 10777                                  ;Output a CRLF
 10778                                  CRLF:
 10779 0000157E B00D                    	mov	al,c_CR ; 0Dh 
 10780 00001580 E8C600                  	call	OUTT
 10781 00001583 B00A                    	mov	al,c_LF ; 0Ah
 10782 00001585 E9C100                  	jmp	OUTT
 10783                                  
 10784                                  ;
 10785                                  ;----------------------------------------------------------------------------
 10786                                  ;
 10787                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10788                                  ;
 10789                                  ;	Input or output raw character from console, no echo
 10790                                  ;
 10791                                  ;	ENTRY	DL = -1 if input
 10792                                  ;		   =  output character if output
 10793                                  ;	EXIT	(AL) = input character if input
 10794                                  ;	USES	all
 10795                                  ;
 10796                                  ;----------------------------------------------------------------------------
 10797                                  ; 20/07/2018 - Retro DOS v3.0
 10798                                  
 10799                                  ; 04/05/2019 - Retro DOS v4.0
 10800                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10801                                  
 10802                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10803                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10804                                  
 10805                                  _$RAW_CON_IO:			; System call 6
 10806 00001588 88D0                    	MOV	AL,DL
 10807 0000158A 3CFF                    	CMP	AL,-1
 10808 0000158C 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10809                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10810                                  	;jz	short rci1
 10811                                  	;jmp	short RAWOUT
 10812                                  	; 16/12/202
 10813                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10814                                  	;nop
 10815                                  rci1:
 10816                                  			; Get pointer to register save area
 10817 0000158E 36C43E[8405]            	LES	DI,[SS:USER_SP] ; 12/03/2018
 10818 00001593 31DB                    	XOR	BX,BX
 10819                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10820 00001595 E8FF1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10821                                          ;JC	SHORT RET17
 10822 00001598 72C0                            jc	short FINDOLD_RETN
 10823 0000159A B401                    	MOV	AH,1
 10824 0000159C E81C2E                  	CALL	IOFUNC
 10825 0000159F 750B                    	JNZ	SHORT RESFLG
 10826 000015A1 E8C33A                  	CALL	SPOOLINT
 10827                                  	;OR	BYTE [ES:DI+16H],40H
 10828 000015A4 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10829 000015A9 30C0                    	XOR	AL,AL
 10830                                  RET17:
 10831 000015AB C3                      	RETN
 10832                                  
 10833                                  RESFLG:
 10834                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10835 000015AC 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10836                                  				; Reset user's zero flag
 10837                                  ;RILP:
 10838                                  rci0:
 10839 000015B1 E8B33A                  	CALL	SPOOLINT
 10840                                  ;
 10841                                  ;----------------------------------------------------------------------------
 10842                                  ;
 10843                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10844                                  ;
 10845                                  ;	Input raw character from console, no echo
 10846                                  ;
 10847                                  ;	ENTRY	none
 10848                                  ;	EXIT	(al) = character
 10849                                  ;	USES	all
 10850                                  ;
 10851                                  ;----------------------------------------------------------------------------
 10852                                  ;
 10853                                  
 10854                                  ;rci0:	invoke	SPOOLINT
 10855                                  
 10856                                  	;entry	$RAW_CON_INPUT
 10857                                  
 10858                                  	; 04/05/2019 - Retro DOS v4.0
 10859                                  
 10860                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10861                                  
 10862                                  _$RAW_CON_INPUT:		; System call 7
 10863 000015B4 53                      	push	bx
 10864 000015B5 31DB                    	XOR	BX,BX
 10865                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10866 000015B7 E8DD1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10867 000015BA 5B                      	pop	bx
 10868 000015BB 72EE                    	JC	SHORT RET17
 10869 000015BD B401                    	MOV	AH,1
 10870 000015BF E8F92D                  	CALL	IOFUNC
 10871                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10872                                  	;XOR	AH,AH
 10873                                          ;CALL	IOFUNC
 10874                                          ;RETN
 10875 000015C2 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10876 000015C4 B484                    	MOV	AH,84h
 10877 000015C6 CD2A                    	INT	int_IBM  ; int 2Ah
 10878 000015C8 EBE7                    	JMP	short rci0
 10879                                  rci5:	
 10880 000015CA 30E4                    	XOR	AH,AH
 10881                                  	;CALL	IOFUNC
 10882                                  	;RETN
 10883                                  	; 18/12/2022
 10884 000015CC E9EC2D                  	jmp	IOFUNC
 10885                                  
 10886                                  ;       Output the character in AL to stdout
 10887                                  ;
 10888                                  	;entry	RAWOUT
 10889                                  RAWOUT:
 10890 000015CF 53                      	PUSH    BX
 10891 000015D0 BB0100                  	MOV     BX,1
 10892                                  
 10893                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10894 000015D3 E8C11F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10895 000015D6 721B                    	JC	SHORT RAWRET1
 10896                                  
 10897                                  	;
 10898                                  	; MSDOS 2.11
 10899                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10900                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10901                                          ;PUSH	DS
 10902                                          ;PUSH	SI
 10903                                          ;LDS	SI,[SI+19H]		; output to special?
 10904                                  	;TEST	BYTE [SI+4],ISSPEC
 10905                                  	;POP	SI
 10906                                  	;
 10907                                          
 10908                                  	; MSDOS 3.3 & MSDOS 6.0
 10909                                  	;mov	bx,[si+5]
 10910 000015D8 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10911                                   ;
 10912                                   ; If we are a network handle OR if we are not a local device then go do the
 10913                                   ; output the hard way.
 10914                                   ;	
 10915                                  	;and	bx,8080h
 10916 000015DB 81E38080                	AND	BX,sf_isnet+devid_device
 10917                                  	;cmp	bx,80h
 10918 000015DF 81FB8000                	CMP	BX,devid_device
 10919 000015E3 7510                    	jnz     short RAWNORM
 10920 000015E5 1E                      	push    ds
 10921                                  	;lds	bx,[si+7]
 10922 000015E6 C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10923                                  	;test	byte [bx+4],10h
 10924 000015E9 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10925                                  	;
 10926                                  
 10927 000015ED 1F                      	POP	DS
 10928 000015EE 7405                    	JZ	SHORT RAWNORM		; if not, do normally
 10929                                  
 10930 000015F0 CD29                    	INT	int_fastcon  ; int 29h	; quickly output the char
 10931                                  
 10932                                  	;JMP	SHORT RAWRET
 10933                                  ;RAWNORM:
 10934                                  ;	CALL    RAWOUT3
 10935                                  RAWRET: 
 10936 000015F2 F8                      	CLC
 10937                                  RAWRET1:
 10938 000015F3 5B                      	POP     BX
 10939                                  RAWRET2:
 10940 000015F4 C3                      	RETN
 10941                                  RAWNORM:
 10942 000015F5 E80700                  	CALL    RAWOUT3
 10943 000015F8 EBF8                    	jmp	short RAWRET
 10944                                  
 10945                                  ;	Output the character in AL to handle in BX
 10946                                  ;
 10947                                  ;	entry	RAWOUT2
 10948                                  
 10949                                  RAWOUT2:
 10950                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10951                                  	;JC	SHORT RET18
 10952 000015FA E89A1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10953 000015FD 72F5                    	JC	SHORT RAWRET2
 10954                                  RAWOUT3:
 10955 000015FF 50                      	PUSH	AX
 10956 00001600 EB0C                    	JMP	SHORT RAWOSTRT
 10957                                  ROLP:
 10958 00001602 E8623A                  	CALL	SPOOLINT
 10959                                  
 10960                                  	; 01/05/2019 - Retro DOS v4.0
 10961                                  
 10962                                  	; MSDOS 6.0
 10963                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10964                                  	; 17/12/2022
 10965 00001605 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h
 10966                                  	;or	word [ss:DOS34_FLAG],200h
 10967                                  				;AN002; set control break
 10968                                  	;invoke DSKSTATCHK
 10969 0000160B E8D639                  	call	DSKSTATCHK	;AN002; check control break
 10970                                  RAWOSTRT:
 10971 0000160E B403                    	MOV	AH,3
 10972 00001610 E8A82D                  	CALL	IOFUNC
 10973 00001613 74ED                    	JZ	SHORT ROLP
 10974                                  
 10975                                  	; MSDOS 6.0
 10976                                  ;SR;
 10977                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10978                                  ;the user failed. We do not send a char if this happens. We however return
 10979                                  ;to the caller with carry clear because this DOS call does not return any
 10980                                  ;status. 
 10981                                  ;
 10982 00001615 40                      	inc	ax		;fail on I24 if ax = -1
 10983 00001616 58                      	POP	AX
 10984 00001617 7405                    	jz	short nosend	;yes, do not send char
 10985 00001619 B402                    	MOV	AH,2
 10986 0000161B E89D2D                  	call	IOFUNC
 10987                                  nosend:
 10988 0000161E F8                      	CLC			; Clear carry indicating successful
 10989 0000161F C3                      	retn
 10990                                  
 10991                                  	; MSDOS 3.3 & MSDOS 2.11
 10992                                  	;POP	AX
 10993                                  	;MOV	AH,2
 10994                                          ;CALL	IOFUNC
 10995                                  	;CLC			; Clear carry indicating successful
 10996                                  ;RET18:    
 10997                                  	;RETN
 10998                                  
 10999                                  ;;10/08/2018
 11000                                  ; 20/07/2018 - Retro DOS v3.0
 11001                                  ; ---------------------------------------------------------------------------
 11002                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 11003                                  ; ---------------------------------------------------------------------------
 11004                                  
 11005                                  ; This routine is called at DOS init
 11006                                  
 11007                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 11008                                  ;;OUTMES:
 11009                                  ;;	;LODS	CS:BYTE PTR [SI]
 11010                                  ;;	CS	LODSB
 11011                                  ;;	CMP     AL,"$" ; 24h
 11012                                  ;;	JZ	SHORT RET18
 11013                                  ;;	CALL	OUTT
 11014                                  ;;	JMP     SHORT OUTMES
 11015                                  
 11016                                  ; ---------------------------------------------------------------------------
 11017                                  
 11018                                  ; 20/07/2018 - Retro DOS v3.0
 11019                                  
 11020                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 11021                                  
 11022                                  ;
 11023                                  ;----------------------------------------------------------------------------
 11024                                  ;
 11025                                  ; Inputs:
 11026                                  ;	AX=0 save the DEVCALL request packet
 11027                                  ;	  =1 restore the DEVCALL request packet
 11028                                  ; Function:
 11029                                  ;	save or restore the DEVCALL packet
 11030                                  ; Returns:
 11031                                  ;	none
 11032                                  ;
 11033                                  ;----------------------------------------------------------------------------
 11034                                  ;
 11035                                  
 11036                                  ; 04/05/2019 - Retro DOS v4.0
 11037                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 11038                                  
 11039                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11040                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 11041                                  
 11042                                  ; 12/05/2019
 11043                                  
 11044                                  	; 15/01/2024
 11045                                  
 11046                                  Save_Restore_Packet:
 11047 00001620 1E                      	PUSH	DS
 11048 00001621 06                      	PUSH	ES
 11049 00001622 56                      	PUSH	SI
 11050 00001623 57                      	PUSH	DI
 11051                                  
 11052                                  	; 16/12/2022
 11053                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11054                                  	; 09/09/2018
 11055 00001624 BF[6C0D]                	mov	di,FAKE_STACK_2F
 11056 00001627 BE[5A03]                	mov	si,DEVCALL
 11057                                  	;
 11058                                  	; 21/09/2023
 11059 0000162A 09C0                    	or	ax,ax
 11060                                  	;CMP	AX,0		; save packet
 11061 0000162C 7402                    	JZ	short save_packet ; 16/12/2022
 11062                                  	;je	short set_seg
 11063                                  
 11064                                  	; MSDOS 6.0
 11065                                  restore_packet:
 11066                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 11067                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 11068                                  	; MSDOS 3.3
 11069                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11070                                  	;mov	di,DEVCALL  ; 09/09/2018
 11071                                  	;
 11072                                  	;JMP	short set_seg
 11073                                  
 11074                                  	; 16/12/2022	
 11075                                  	; 09/09/2018
 11076 0000162E 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 11077                                  
 11078                                  ; 16/12/2022
 11079                                  %if 0
 11080                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11081                                  	cmp	ax,0		; save packet
 11082                                  	jz	short save_packet
 11083                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 11084                                  	mov	di,DEVCALL 
 11085                                  	jmp	short set_seg
 11086                                  
 11087                                  	; MSDOS 6.0
 11088                                  save_packet:
 11089                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 11090                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 11091                                  	; 09/09/2018
 11092                                  	; MSDOS 3.3
 11093                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11094                                  	;mov	si,DEVCALL ; 09/09/2018
 11095                                  
 11096                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11097                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11098                                  	mov	si,DEVCALL
 11099                                  %endif
 11100                                  
 11101                                  ; 15/01/2024
 11102                                  ; 16/12/2022
 11103                                  save_packet:
 11104                                  ;set_seg:
 11105                                  	; MSDOS 3.3
 11106                                  	;mov	ax,cs
 11107                                  
 11108                                  	; MSDOS 6.0
 11109                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 11110                                  	;MOV	DS,AX
 11111                                  	;MOV	ES,AX
 11112                                  	; 15/01/2024
 11113 00001630 16                      	push	ss
 11114 00001631 1F                      	pop	ds
 11115 00001632 1E                      	push	ds
 11116 00001633 07                      	pop	es
 11117                                  
 11118 00001634 B90B00                  	MOV	CX,11		; 11 words to move
 11119 00001637 F3A5                    	REP	MOVSW
 11120                                  
 11121 00001639 5F                      	POP	DI
 11122 0000163A 5E                      	POP	SI
 11123 0000163B 07                      	POP	ES
 11124 0000163C 1F                      	POP	DS
 11125 0000163D C3                      	retn
 11126                                  
 11127                                  ;============================================================================
 11128                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 11129                                  ;============================================================================
 11130                                  ; 20/07/2018 - Retro DOS v3.0
 11131                                  ; 01/05/2019 - Retro DOS v4.0
 11132                                  
 11133                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 11134                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 11135                                  ;hkn;	not valid. 
 11136                                  
 11137                                  ;
 11138                                  ;----------------------------------------------------------------------------
 11139                                  ;
 11140                                  ;**	$STD_CON_INPUT - System Call 1
 11141                                  ;
 11142                                  ;	Input character from console, echo
 11143                                  ;
 11144                                  ;	ENTRY	none
 11145                                  ;	EXIT	(al) = character
 11146                                  ;	USES	ALL
 11147                                  ;
 11148                                  ;----------------------------------------------------------------------------
 11149                                  ;
 11150                                  
 11151                                  _$STD_CON_INPUT:	;System call 1
 11152                                  	
 11153 0000163E E821FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 11154 00001641 50                      	PUSH	AX
 11155 00001642 E80400                  	CALL	OUTT
 11156 00001645 58                      	POP	AX
 11157                                  CON_INPUT_RETN:	
 11158 00001646 C3                      	RETN
 11159                                  
 11160                                  ;
 11161                                  ;----------------------------------------------------------------------------
 11162                                  ;
 11163                                  ;**	$STD_CON_OUTPUT - System Call 2
 11164                                  ;
 11165                                  ;	Output character to console
 11166                                  ;
 11167                                  ;	ENTRY	(dl) = character
 11168                                  ;	EXIT	none
 11169                                  ;	USES	all
 11170                                  ;
 11171                                  ;----------------------------------------------------------------------------
 11172                                  ;
 11173                                  
 11174                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 11175                                  
 11176                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11177                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 11178                                  
 11179                                  _$STD_CON_OUTPUT:	;System call 2
 11180                                  
 11181 00001647 88D0                    	MOV	AL,DL
 11182                                  OUTT:
 11183 00001649 3C20                    	CMP	AL,20H ; " "
 11184 0000164B 725C                    	JB	SHORT CTRLOUT
 11185 0000164D 3C7F                    	CMP	AL,c_DEL ; 7Fh
 11186 0000164F 7405                    	JZ	SHORT OUTCH
 11187                                  OUTCHA:	
 11188                                  	;INC	BYTE PTR [CARPOS]
 11189 00001651 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 11190                                  OUTCH:
 11191 00001656 1E                      	PUSH	DS
 11192 00001657 56                      	PUSH	SI
 11193                                  	;INC	BYTE PTR [CHARCO]		;invoke statchk...
 11194                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 11195 00001658 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 11196                                  	;AND	BYTE [SS:CHARCO],00111111B
 11197                                  	; 01/05/2019 - Retro DOS v4.0
 11198 0000165D 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 11199 00001663 7505                    	JNZ	SHORT OUTSKIP
 11200                                  
 11201 00001665 50                      	PUSH	AX
 11202 00001666 E82C3A                  	CALL	STATCHK
 11203 00001669 58                      	POP	AX
 11204                                  OUTSKIP:
 11205 0000166A E862FF                  	CALL	RAWOUT				;output the character
 11206                                  
 11207 0000166D 5E                      	POP	SI
 11208 0000166E 1F                      	POP	DS
 11209                                  
 11210                                  	;TEST	BYTE PTR [PFLAG],-1
 11211                                  	;retz
 11212 0000166F 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11213 00001675 74CF                    	JZ	SHORT CON_INPUT_RETN
 11214                                  
 11215 00001677 53                      	PUSH	BX
 11216 00001678 1E                      	PUSH	DS
 11217 00001679 56                      	PUSH	SI
 11218 0000167A BB0100                  	MOV	BX,1
 11219                                  	; 20/07/2018 - Retro DOS v3.0
 11220                                  	; MSDOS 3.3
 11221                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11222 0000167D E8171F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI
 11223                                  					;hkn; to sft entry
 11224 00001680 7224                    	JC	SHORT TRIPOPJ
 11225                                  
 11226                                  	; 01/05/2019 - Retro DOS v4.0
 11227                                  
 11228                                  	;mov	bx,[si+5]
 11229 00001682 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11230                                  	;test	bx,8000h
 11231                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11232 00001685 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11233 00001688 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11234                                  	;;test	bx,80h
 11235                                  	;TEST	BX,devid_device 		; output to file?
 11236 0000168A F6C380                  	test	bl,devid_device ; 80h
 11237 0000168D 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11238                                  	; 14/03/2018
 11239                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11240                                  	;jc	short TRIPOPJ
 11241                                  	; MSDOS 2.11
 11242                                  	;test	byte [SI+18H], 80h
 11243                                  	;jz	short TRIPOPJ
 11244 0000168F BB0400                  	MOV	BX,4
 11245 00001692 E8021F                  	CALL	GET_IO_SFT
 11246 00001695 720F                    	JC	SHORT TRIPOPJ
 11247                                  	;;test	word [si+5], 800h
 11248                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11249                                  	;test	byte [si+6],8 ; 08/11/2022
 11250 00001697 F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11251                                  						; StdPrn redirected?
 11252                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11253                                  	;jz	LISSTRT2 ; 10/08/2018 
 11254                                  	; 16/12/2022
 11255 0000169B 7503                    	jnz	short outch1
 11256 0000169D E98700                  	jmp	LISSTRT2
 11257                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11258                                  	;jz	short LISSTRT2J
 11259                                  outch1:
 11260                                  	;MOV	BYTE [PFLAG],0
 11261 000016A0 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11262                                  	; MSDOS 2.11
 11263                                  	;mov	bx,4
 11264                                  	;jmp	short LISSTRT2
 11265                                  	
 11266                                  TRIPOPJ:
 11267                                  	; 20/07/2018
 11268 000016A6 E98100                  	JMP	TRIPOP
 11269                                  
 11270                                  	; 16/12/2022
 11271                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11272                                  ;LISSTRT2J:
 11273                                  ;	JMP	LISSTRT2
 11274                                  
 11275                                  CTRLOUT:
 11276 000016A9 3C0D                    	CMP	AL,c_CR ; 0Dh
 11277 000016AB 7420                    	JZ	SHORT ZERPOS
 11278 000016AD 3C08                    	CMP	AL,c_BS ; 8
 11279 000016AF 7424                    	JZ	SHORT BACKPOS
 11280 000016B1 3C09                    	CMP	AL,c_HT ; 9
 11281 000016B3 75A1                    	JNZ	SHORT OUTCH
 11282                                  	;MOV	AL,[CARPOS]
 11283 000016B5 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11284 000016B9 0CF8                    	OR	AL,0F8H
 11285 000016BB F6D8                    	NEG	AL
 11286                                  TAB:
 11287 000016BD 51                      	PUSH	CX
 11288 000016BE 88C1                    	MOV	CL,AL
 11289 000016C0 B500                    	MOV	CH,0
 11290 000016C2 E307                    	JCXZ	POPTAB
 11291                                  TABLP:
 11292 000016C4 B020                    	MOV	AL," "
 11293 000016C6 E880FF                  	CALL	OUTT
 11294 000016C9 E2F9                    	LOOP	TABLP
 11295                                  POPTAB:
 11296 000016CB 59                      	POP	CX
 11297                                  
 11298 000016CC C3                      	RETN
 11299                                  
 11300                                  ZERPOS:
 11301                                  	;MOV	BYTE PTR [CARPOS],0
 11302 000016CD 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11303                                  	; 10/08/2018
 11304 000016D3 EB81                    	JMP	short OUTCH ; 04/05/2019
 11305                                  	
 11306                                  	; 18/12/2022
 11307                                  ;OUTJ:	
 11308                                  	;JMP	OUTT
 11309                                  
 11310                                  BACKPOS:
 11311                                  	;DEC	BYTE PTR [CARPOS]
 11312 000016D5 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11313 000016DA E979FF                  	JMP	OUTCH
 11314                                  
 11315                                  BUFOUT:
 11316 000016DD 3C20                    	CMP	AL," "
 11317 000016DF 7315                    	JAE	SHORT OUTJ		;Normal char
 11318 000016E1 3C09                    	CMP	AL,9
 11319 000016E3 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11320                                  	;DOS 3.3  7/14/86
 11321 000016E5 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11322 000016E7 740D                    	JZ	short CTRLU
 11323 000016E9 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11324 000016EB 7409                    	JZ	short CTRLU
 11325                                  NOT_CTRLU:
 11326                                  	;DOS 3.3  7/14/86
 11327 000016ED 50                      	PUSH	AX
 11328 000016EE B05E                    	MOV	AL,"^"
 11329 000016F0 E856FF                  	CALL	OUTT		;Print '^' before control chars
 11330 000016F3 58                      	POP	AX
 11331 000016F4 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11332                                  CTRLU:
 11333                                  	;CALL	OUTT
 11334                                  	; 18/12/2022
 11335                                  OUTJ:
 11336 000016F6 E950FF                  	jmp	OUTT
 11337                                  ;BUFOUT_RETN:
 11338                                  	;RETN
 11339                                  
 11340                                  ;
 11341                                  ;----------------------------------------------------------------------------
 11342                                  ;
 11343                                  ;**	$STD_AUX_INPUT - System Call 3
 11344                                  ;
 11345                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11346                                  ;
 11347                                  ;	ENTRY	none
 11348                                  ;	EXIT	(al) = character
 11349                                  ;	USES	all
 11350                                  ;
 11351                                  ;----------------------------------------------------------------------------
 11352                                  ;
 11353                                  
 11354                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11355                                  
 11356                                  _$STD_AUX_INPUT:	;System call 3
 11357                                  
 11358 000016F9 E89939                  	CALL	STATCHK
 11359 000016FC BB0300                  	MOV	BX,3
 11360 000016FF E8951E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11361                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11362                                  	;retc
 11363                                  	; 16/12/2022
 11364                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11365                                  	;JC	SHORT BUFOUT_RETN
 11366                                  	;JMP	SHORT TAISTRT
 11367                                  	; 07/12/2022
 11368 00001702 7304                    	jnc	SHORT TAISTRT
 11369 00001704 C3                      	retn	
 11370                                  
 11371                                  AUXILP:
 11372 00001705 E85F39                  	CALL	SPOOLINT
 11373                                  TAISTRT:
 11374 00001708 B401                    	MOV	AH,1
 11375 0000170A E8AE2C                  	CALL	IOFUNC
 11376 0000170D 74F6                    	JZ	SHORT AUXILP
 11377 0000170F 30E4                    	XOR	AH,AH
 11378                                  	; 16/12/2022
 11379                                  	;CALL	IOFUNC
 11380                                  	;RETN
 11381                                  	; 07/12/2022
 11382 00001711 E9A72C                  	jmp	IOFUNC
 11383                                  
 11384                                  ;
 11385                                  ;----------------------------------------------------------------------------
 11386                                  ;
 11387                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11388                                  ;
 11389                                  ;	ENTRY	(dl) = character
 11390                                  ;	EXIT	none
 11391                                  ;	USES	all
 11392                                  ;
 11393                                  ;----------------------------------------------------------------------------
 11394                                  ;
 11395                                  
 11396                                  _$STD_AUX_OUTPUT:	;System call 4
 11397                                  
 11398 00001714 53                      	PUSH	BX
 11399 00001715 BB0300                  	MOV	BX,3
 11400 00001718 EB04                    	JMP	SHORT SENDOUT
 11401                                  
 11402                                  ;
 11403                                  ;----------------------------------------------------------------------------
 11404                                  ;
 11405                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11406                                  ;
 11407                                  ;	ENTRY	(dl) = character
 11408                                  ;	EXIT	none
 11409                                  ;	USES	all
 11410                                  ;
 11411                                  ;----------------------------------------------------------------------------
 11412                                  ;
 11413                                  
 11414                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11415                                  
 11416 0000171A 53                      	PUSH	BX
 11417 0000171B BB0400                  	MOV	BX,4
 11418                                  
 11419                                  SENDOUT:
 11420 0000171E 88D0                    	MOV	AL,DL
 11421 00001720 50                      	PUSH	AX
 11422 00001721 E87139                  	CALL	STATCHK
 11423 00001724 58                      	POP	AX
 11424 00001725 1E                      	PUSH	DS
 11425 00001726 56                      	PUSH	SI
 11426                                  LISSTRT2:
 11427 00001727 E8D0FE                  	CALL	RAWOUT2
 11428                                  TRIPOP:
 11429 0000172A 5E                      	POP	SI
 11430 0000172B 1F                      	POP	DS
 11431 0000172C 5B                      	POP	BX
 11432                                  SCIS_RETN:	; 20/07/2018
 11433 0000172D C3                      	RETN
 11434                                  ;
 11435                                  ;----------------------------------------------------------------------------
 11436                                  ;
 11437                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11438                                  ;
 11439                                  ;	Check console input status
 11440                                  ;
 11441                                  ;	ENTRY	none
 11442                                  ;	EXIT	AL = -1 character available, = 0 no character
 11443                                  ;	USES	all
 11444                                  ;
 11445                                  ;----------------------------------------------------------------------------
 11446                                  ;
 11447                                  
 11448                                  _$STD_CON_INPUT_STATUS:		;System call 11
 11449                                  
 11450 0000172E E86439                  	CALL	STATCHK
 11451 00001731 B000                    	MOV	AL,0		; no xor!!
 11452                                  	;retz
 11453 00001733 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11454 00001735 0CFF                    	OR	AL,-1
 11455                                  ;SCIS_RETN:
 11456 00001737 C3                      	RETN
 11457                                  
 11458                                  ;
 11459                                  ;----------------------------------------------------------------------------
 11460                                  ;
 11461                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11462                                  ;
 11463                                  ;	Flush console input buffer and perform call in AL
 11464                                  ;
 11465                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11466                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11467                                  ;		return arguments for the fcn supplied in (AL)
 11468                                  ;	USES	all
 11469                                  ;
 11470                                  ;----------------------------------------------------------------------------
 11471                                  ;
 11472                                  
 11473                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11474                                  
 11475 00001738 50                      	PUSH	AX
 11476 00001739 52                      	PUSH	DX
 11477 0000173A 31DB                    	XOR	BX,BX
 11478 0000173C E8581E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11479                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11480 0000173F 7205                    	JC	SHORT BADJFNCON
 11481 00001741 B404                    	MOV	AH,4
 11482 00001743 E8752C                  	CALL	IOFUNC
 11483                                  
 11484                                  BADJFNCON:
 11485 00001746 5A                      	POP	DX
 11486 00001747 58                      	POP	AX
 11487 00001748 88C4                    	MOV	AH,AL
 11488 0000174A 3C01                    	CMP	AL,1
 11489 0000174C 7413                    	JZ	SHORT REDISPJ
 11490 0000174E 3C06                    	CMP	AL,6
 11491 00001750 740F                    	JZ	SHORT REDISPJ
 11492 00001752 3C07                    	CMP	AL,7
 11493 00001754 740B                    	JZ	SHORT REDISPJ
 11494 00001756 3C08                    	CMP	AL,8
 11495 00001758 7407                    	JZ	SHORT REDISPJ
 11496 0000175A 3C0A                    	CMP	AL,10
 11497 0000175C 7403                    	JZ	SHORT REDISPJ
 11498 0000175E B000                    	MOV	AL,0
 11499 00001760 C3                      	RETN
 11500                                  
 11501                                  REDISPJ:
 11502 00001761 FA                      	CLI
 11503                                  	;transfer REDISP
 11504 00001762 E922EC                  	JMP	REDISP
 11505                                  
 11506                                  ;============================================================================
 11507                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11508                                  ;============================================================================
 11509                                  ; 20/07/2018 - Retro DOS v3.0
 11510                                  ; 17/05/2019 - Retro DOS v4.0
 11511                                  
 11512                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11513                                  ;
 11514                                  ;	$GET_FCB_POSITION
 11515                                  ;	$FCB_DELETE
 11516                                  ;	$GET_FCB_FILE_LENGTH
 11517                                  ;	$FCB_CLOSE
 11518                                  ;	$FCB_RENAME
 11519                                  ;	SaveFCBInfo
 11520                                  ;	ResetLRU
 11521                                  ;	SetOpenAge
 11522                                  ;	LRUFCB
 11523                                  ;	FCBRegen
 11524                                  ;	BlastSFT
 11525                                  ;	CheckFCB
 11526                                  ;	SFTFromFCB
 11527                                  ;	FCBHardErr
 11528                                  ;
 11529                                  ;	Revision history:
 11530                                  ;
 11531                                  ;		Created: ARR 4 April 1983"
 11532                                  ;			 MZ  6 June  1983 completion of functions
 11533                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11534                                  ;					  times.  Change so successive closes work by
 11535                                  ;					  always returning OK.	Also, detect I/O to
 11536                                  ;					  already closed FCB and return EOF.
 11537                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11538                                  ;					  out of sft into FCB for reconnection
 11539                                  ;
 11540                                  ;		A000	 version 4.00  Jan. 1988
 11541                                  
 11542                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11543                                  ;----------------------------------------------------------------------------
 11544                                  ;
 11545                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11546                                  ;	extent and next record field and set the random record field to point
 11547                                  ;	to that record
 11548                                  ;
 11549                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11550                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11551                                  ;   Registers modified: all
 11552                                  ;
 11553                                  ;----------------------------------------------------------------------------
 11554                                  ;
 11555                                  
 11556                                  _$GET_FCB_POSITION:
 11557 00001765 E8D404                  	call	GetExtended		; point to FCB
 11558 00001768 E8A504                  	call	GetExtent		; DX:AX is current record
 11559                                  	;mov	[si+21h],ax
 11560 0000176B 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11561                                  	;mov	[si+23h],dl
 11562 0000176E 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11563                                  	;cmp	word [si+0Eh],64
 11564 00001771 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11565 00001775 7303                    	JAE	short GetFCBBye
 11566                                  	;mov	[si+24h],dh
 11567 00001777 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11568                                  GoodPath:	; 16/12/2022
 11569                                  GetFCBBye:
 11570 0000177A E9DAEE                  	jmp	FCB_RET_OK
 11571                                  
 11572                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11573                                  ;----------------------------------------------------------------------------
 11574                                  ;
 11575                                  ;**	$FCB_Delete - Delete from FCB Template
 11576                                  ;
 11577                                  ;	given an FCB, remove all directory entries in the current
 11578                                  ;	directory that have names that match the FCB's ?  marks.
 11579                                  ;
 11580                                  ;	ENTRY	(DS:DX) = address of FCB
 11581                                  ;	EXIT	entries matching the FCB are deleted
 11582                                  ;		(al) = ff iff no entries were deleted
 11583                                  ;	USES	all
 11584                                  ;
 11585                                  ;----------------------------------------------------------------------------
 11586                                  ;
 11587                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11588                                  
 11589                                  _$FCB_DELETE:		; System call 19
 11590                                  					; OpenBuf is in DOSDATA
 11591 0000177D BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11592                                  
 11593 00001780 E8B952                  	call	TransFCB		; convert FCB to path
 11594 00001783 7207                    	JC	short BadPath 		; signal no deletions
 11595                                  
 11596 00001785 16                      	push	SS
 11597 00001786 1F                      	pop	DS			; SS is DOSDATA
 11598                                  
 11599 00001787 E8370D                  	call	DOS_DELETE		; wham
 11600                                  	;JC	short BadPath
 11601                                  	; 16/12/2022
 11602 0000178A 73EE                    	jnc 	short GoodPath
 11603                                  ;GoodPath:
 11604                                  ;	;jmp	FCB_RET_OK		; do a good return
 11605                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11606                                  ;	jmp	short GetFCBBye
 11607                                  
 11608                                  BadPath:
 11609                                  	; Error code is in AX
 11610                                  
 11611 0000178C E9CBEE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11612                                  
 11613                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11614                                  ;----------------------------------------------------------------------------
 11615                                  ;
 11616                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11617                                  ;	file in records (rounded up if partial).
 11618                                  ;
 11619                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11620                                  ;   Outputs:	Random record field updated to reflect the number of records
 11621                                  ;   Registers modified: all
 11622                                  ;
 11623                                  ;----------------------------------------------------------------------------
 11624                                  ;
 11625                                  	; 15/01/2024
 11626                                  
 11627                                  _$GET_FCB_FILE_LENGTH:
 11628                                  
 11629 0000178F E8AA04                  	call	GetExtended		; get real FCB pointer
 11630                                  					; DX points to Input FCB
 11631                                  
 11632                                  					; OpenBuf is in DOSDATA
 11633 00001792 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11634                                  
 11635 00001795 1E                      	push	ds			; save pointer to true FCB
 11636 00001796 56                      	push	si
 11637 00001797 E8A252                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11638 0000179A 5E                      	pop	si
 11639 0000179B 1F                      	pop	ds
 11640 0000179C 72EE                    	JC	short BadPath
 11641 0000179E 1E                      	push	ds			; save pointer
 11642 0000179F 56                      	push	si
 11643 000017A0 16                      	push	ss		
 11644 000017A1 1F                      	pop	ds
 11645 000017A2 E81A11                  	call	GET_FILE_INFO		; grab the info
 11646 000017A5 5E                      	pop	si			; get pointer back
 11647 000017A6 1F                      	pop	ds
 11648 000017A7 72E3                    	JC	short BadPath 		; invalid something
 11649                                  	; 15/01/2024
 11650                                  	;MOV	DX,BX (*)		; get high order size
 11651                                  	;MOV	AX,DI (**)		; get low order size
 11652 000017A9 89D8                    	mov	ax,bx ; hw of file size
 11653                                  	;
 11654                                  	;mov	bx,[si+0Eh]
 11655 000017AB 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11656 000017AE 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11657 000017B0 7502                    	JNZ	short GetSize 		; not empty
 11658                                  	;MOV	BX,128
 11659 000017B2 B380                    	mov	bl,128	; 15/01/2024
 11660                                  GetSize:
 11661                                  	; 15/01/2024
 11662                                  	;MOV	DI,AX			; save low order word
 11663                                  	;MOV	AX,DX			; move high order for divide
 11664                                  	;xchg	ax,dx ; (*)
 11665                                  	; ax = hw of file size
 11666                                  
 11667 000017B4 31D2                    	XOR	DX,DX			; clear out high
 11668 000017B6 F7F3                    	DIV	BX			; wham
 11669 000017B8 50                      	PUSH	AX			; save dividend
 11670 000017B9 89F8                    	MOV	AX,DI ; (**)		; get low order piece
 11671 000017BB F7F3                    	DIV	BX			; wham
 11672 000017BD 89D1                    	MOV	CX,DX			; save remainder
 11673 000017BF 5A                      	POP	DX			; get high order dividend
 11674 000017C0 E306                    	JCXZ	LengthStore		; no roundup
 11675 000017C2 83C001                  	ADD	AX,1
 11676 000017C5 83D200                  	ADC	DX,0			; 32-bit increment
 11677                                  LengthStore:
 11678                                  	;mov	[si+21h],ax
 11679 000017C8 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11680                                  	;mov	[si+23h],dl
 11681 000017CB 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11682 000017CE 08F6                    	OR	DH,DH
 11683 000017D0 74A8                    	JZ	short GoodPath		; not storing insignificant zero
 11684                                  	;mov	[si+24h],dh
 11685 000017D2 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11686                                  	; 16/12/2022
 11687                                  GoodRet:
 11688                                  	;jmp	FCB_RET_OK
 11689 000017D5 EBA3                    	jmp	short GoodPath
 11690                                  
 11691                                  ;Break <$FCB_Close - close a file>
 11692                                  ;----------------------------------------------------------------------------
 11693                                  ;
 11694                                  ;   $FCB_Close - given an FCB, look up the SFN and close it. Do not free it
 11695                                  ;	as the FCB may be used for further I/O
 11696                                  ;
 11697                                  ;   Inputs:	DS:DX point to FCB
 11698                                  ;   Outputs:	AL = FF if file was not found on disk
 11699                                  ;   Registers modified: all
 11700                                  ;
 11701                                  ;----------------------------------------------------------------------------
 11702                                  ;
 11703                                  	; 16/01/2024
 11704                                  
 11705                                  _$FCB_CLOSE:		; System call 16
 11706                                  
 11707 000017D7 30C0                    	XOR	AL,AL			; default search attributes
 11708 000017D9 E86004                  	call	GetExtended		; DS:SI point to real FCB
 11709 000017DC 7403                    	JZ	short NoAttr		; not extended
 11710 000017DE 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11711                                  NoAttr:
 11712                                  					; SS override
 11713 000017E1 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11714 000017E5 E8C303                  	call	SFTFromFCB
 11715 000017E8 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11716                                  
 11717                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11718                                  	; there is no need to set the SFT's attribute.
 11719                                  
 11720                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11721                                  	;;; done
 11722                                  
 11723                                  	;mov	al,[es:di+4]
 11724 000017EA 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11725 000017EE 30E4                    	XOR	AH,AH
 11726 000017F0 50                      	PUSH	AX
 11727                                  
 11728                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11729                                  	;;; done
 11730                                  
 11731 000017F1 E8745A                  	call	CheckShare
 11732 000017F4 7508                    	JNZ	short NoStash
 11733 000017F6 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11734                                  	;mov	[es:di+4],al
 11735 000017FA 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11736                                  NoStash:
 11737                                  
 11738                                  ; 16/01/2024
 11739                                  %if 0
 11740                                  	;mov	ax,[si+14h]
 11741                                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11742                                  	;mov	[es:di+0Fh],ax
 11743                                  	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11744                                  	;mov	ax,[si+16h]
 11745                                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11746                                  	;mov	[es:di+0Dh],ax
 11747                                  	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11748                                  	;mov	ax,[si+10h]
 11749                                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11750                                  	;mov	[es:di+11h],ax
 11751                                  	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11752                                  	;mov	ax,[si+12h]
 11753                                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11754                                  	;mov	[es:di+13h],ax
 11755                                  	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11756                                  	;or	word [es:di+5],4000h
 11757                                  	; 17/12/2022
 11758                                  	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11759                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11760                                  %else
 11761                                  	; 16/01/2024 (PCDOS 7.1 IBMDOS.COM)
 11762 000017FE 1E                      	push	ds
 11763                                  	;lds	ax,[si+14h]
 11764 000017FF C54414                  	lds	ax,[si+SYS_FCB.FDATE]	; move in the time and date
 11765                                  	;mov	[es:di+0Fh],ax
 11766 00001802 2689450F                	mov	[es:di+SF_ENTRY.sf_date],ax
 11767                                  	;mov	[es:di+0Dh],ds		
 11768 00001806 268C5D0D                	mov	[es:di+SF_ENTRY.sf_time],ds
 11769 0000180A 1F                      	pop	ds
 11770                                  	;lds	ax,[si+10h]
 11771 0000180B C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 11772                                  	;mov	[es:di+11h],ax
 11773 0000180E 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 11774                                  	;mov	[es:di+13h],ds
 11775 00001812 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 11776                                  	; 16/01/2024
 11777                                  	;;or	word [es:di+5], 4000h
 11778                                  	;or	word [es:di+SF_ENTRY.sf_flags], sf_close_nodate
 11779 00001816 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11780                                  %endif
 11781                                  
 11782 0000181B 16                      	push	ss
 11783 0000181C 1F                      	pop	ds
 11784 0000181D E89016                  	call	DOS_CLOSE	; wham
 11785 00001820 C43E[9E05]              	LES	DI,[THISSFT]
 11786                                  
 11787                                  	;;; 9/8/86 F.C. restore SFT attribute
 11788 00001824 59                      	POP	CX
 11789                                  	;mov	[es:di+4],cl
 11790 00001825 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11791                                  	;;; 9/8/86 F.C. restore SFT attribute
 11792                                  
 11793 00001829 9C                      	PUSHF
 11794                                  	;test	word [es:di],0FFFFh
 11795                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11796                                  				; zero ref count gets blasted
 11797 0000182A 26833D00                	cmp	word [ES:DI],0
 11798 0000182E 7507                    	jnz     short CloseOK
 11799 00001830 50                      	PUSH	AX
 11800 00001831 B04D                    	MOV	AL,'M' ; 4Dh
 11801 00001833 E8F202                  	call	BlastSFT
 11802 00001836 58                      	POP	AX
 11803                                  CloseOK:
 11804 00001837 9D                      	POPF
 11805 00001838 739B                    	JNC	short GoodRet
 11806                                  	;cmp	al,6
 11807 0000183A 3C06                    	CMP	AL,error_invalid_handle
 11808 0000183C 7497                    	JZ	short GoodRet
 11809                                  	;mov	al,2
 11810 0000183E B002                    	MOV	AL,error_file_not_found
 11811                                  fren90:
 11812                                  	; 16/12/2022
 11813                                  fcb_close_err:
 11814 00001840 E917EE                  	jmp	FCB_RET_ERR
 11815                                  
 11816                                  ;
 11817                                  ;----------------------------------------------------------------------------
 11818                                  ;
 11819                                  ;**	$FCB_Rename - Rename a File
 11820                                  ;
 11821                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11822                                  ;	multiple files copying from the meta characters.
 11823                                  ;
 11824                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11825                                  ;		    name of the files to be renamed. Starting at offset 11h
 11826                                  ;		    in the FCB is the destination name.
 11827                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11828                                  ;		AL = FF -> some files may have been renamed but:
 11829                                  ;			rename to existing file or source file not found
 11830                                  ;	USES	ALL
 11831                                  ;
 11832                                  ;----------------------------------------------------------------------------
 11833                                  ;
 11834                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11835                                  
 11836                                  _$FCB_RENAME:		; System call 23
 11837                                  
 11838 00001843 E8F603                  	call	GetExtended		; get pointer to real FCB
 11839 00001846 52                      	push	dx
 11840 00001847 8A04                    	MOV	AL,[SI] 		; get drive byte
 11841 00001849 83C610                  	ADD	SI,10h			; point to destination
 11842                                  
 11843                                  					; RenBuf is in DOSDATA
 11844 0000184C BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11845 0000184F FF34                    	push	word [SI]
 11846 00001851 1E                      	push	ds
 11847                                  	;push	di			; save source pointer for TransFCB
 11848                                  	; 16/01/2024 - BugFix !
 11849 00001852 56                      	push	si
 11850 00001853 8804                    	MOV	[SI],AL			; drop in real drive
 11851 00001855 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11852 00001857 E8E251                  	call	TransFCB		; munch this pathname
 11853 0000185A 5E                      	pop	si
 11854 0000185B 1F                      	pop	ds	
 11855 0000185C 8F04                    	pop	WORD [SI]		; get path back
 11856 0000185E 5A                      	pop	dx			; Original FCB pointer
 11857 0000185F 72DF                    	JC	short fren90		; bad path -> error
 11858                                  
 11859                                  					; SS override for WFP_Start & Ren_WFP
 11860 00001861 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11861 00001866 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11862                                  
 11863                                  					; OpenBuf is in DOSDATA
 11864 0000186B BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11865 0000186E E8CB51                  	call	TransFCB		; wham
 11866                                  					; NOTE that this call is pointing
 11867                                  					;  back to the ORIGINAL FCB so
 11868                                  					;  SATTRIB gets set correctly
 11869 00001871 72CD                    	JC	short fren90		; error
 11870 00001873 E81F0E                  	call	DOS_RENAME
 11871 00001876 72C8                    	JC	short fren90
 11872                                  	; 16/12/2022
 11873 00001878 E9DCED                  	jmp	FCB_RET_OK
 11874                                  	
 11875                                  ;	Error -
 11876                                  ;
 11877                                  ;	(al) = error code
 11878                                  
 11879                                  	; 16/12/2022
 11880                                  ;fren90:	
 11881                                  ;	;jmp	FCB_RET_ERR
 11882                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11883                                  ;	jmp	short fcb_close_err
 11884                                  
 11885                                  ;Break <Misbehavior fixers>
 11886                                  ;
 11887                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11888                                  ;   user's space so he may move them at will. Second, they have a small
 11889                                  ;   reserved area that may be used for system information. Third, there was
 11890                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11891                                  ;   usage.
 11892                                  ;
 11893                                  ;   This results in the following misbehavior:
 11894                                  ;
 11895                                  ;	infinite opens of the same file:
 11896                                  ;
 11897                                  ;	While (TRUE) {			While (TRUE) {
 11898                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11899                                  ;	    Read (FCB); 		    Write (FCB);
 11900                                  ;	    }				    }
 11901                                  ;
 11902                                  ;	infinite opens of different files:
 11903                                  ;
 11904                                  ;	While (TRUE) {			While (TRUE) {
 11905                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11906                                  ;	    Read (FCB); 		    Write (FCB);
 11907                                  ;	    }				    }
 11908                                  ;
 11909                                  ;	multiple closes of the same file:
 11910                                  ;
 11911                                  ;	FCBOpen (FCB);
 11912                                  ;	while (TRUE)
 11913                                  ;	    FCBClose (FCB);
 11914                                  ;
 11915                                  ;	I/O after closing file:
 11916                                  ;
 11917                                  ;	FCBOpen (FCB);
 11918                                  ;	while (TRUE) {
 11919                                  ;	    FCBWrite (FCB);
 11920                                  ;	    FCBClose (FCB);
 11921                                  ;	    }
 11922                                  ;
 11923                                  ;   The following is am implementation of a methodology for emulating the
 11924                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11925                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11926                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11927                                  ;   the local machine.
 11928                                  ;
 11929                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11930                                  ;   structures depending on the file itself and the state of operations of the
 11931                                  ;   OS. The information contained in this reserved field is enough to
 11932                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11933                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11934                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11935                                  ;
 11936                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11937                                  ;
 11938                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11939                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11940                                  ;   regenerated.
 11941                                  ;
 11942                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11943                                  ;   longer available. We can make up for this by using the following
 11944                                  ;   information:
 11945                                  ;
 11946                                  ;	The Drive number (from the DPB).
 11947                                  ;	The physical sector of the directory that contains the entry.
 11948                                  ;	The relative position of the entry in the sector.
 11949                                  ;	The first cluster field.
 11950                                  ;	The last used SFT.
 11951                                  ;      OR In the case of a device FCB
 11952                                  ;	The low 6 bits of sf_flags (indicating device type)
 11953                                  ;	The pointer to the device header
 11954                                  ;
 11955                                  ;   We read in the particular directory sector and examine the indicated
 11956                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11957                                  ;
 11958                                  ;   Some key items need to be remembered:
 11959                                  ;
 11960                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11961                                  ;	information. We enforce good behavior on the FCBs.
 11962                                  ;
 11963                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11964                                  ;	open VCs. The VCs may be closed only at process termination.
 11965                                  ;
 11966                                  ;	If this is not an installed version of the DOS, file sharing will
 11967                                  ;	always be present.
 11968                                  ;
 11969                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11970                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11971                                  ;
 11972                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11973                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11974                                  ;	proper OI record.
 11975                                  ;
 11976                                  ;   The test bits are:
 11977                                  ;
 11978                                  ;	00 -> local file
 11979                                  ;	40 -> sharing local
 11980                                  ;	80 -> network
 11981                                  ;	C0 -> local device
 11982                                  
 11983                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 11984                                  ;----------------------------------------------------------------------------
 11985                                  ;
 11986                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 11987                                  ;	pieces of information into the FCB to allow for subsequent
 11988                                  ;	regeneration. Poke LRU also.
 11989                                  ;
 11990                                  ;   Inputs:	ThisSFT points to a complete SFT.
 11991                                  ;		DS:SI point to the FCB (not an extended one)
 11992                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 11993                                  ;		DS:SI preserved
 11994                                  ;		ES:DI point to sft
 11995                                  ;   Registers modified: All
 11996                                  ;
 11997                                  ;
 11998                                  ;----------------------------------------------------------------------------
 11999                                  ;
 12000                                  	; 20/01/2024
 12001                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12002                                  
 12003                                  SaveFCBInfo:
 12004                                  
 12005 0000187B 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 12006 00001880 E8CCF9                  	call	IsSFTNet
 12007 00001883 740B                    	JZ	short SaveLocal		; if not network then save local info
 12008                                  ;
 12009                                  ;----- In net support -----
 12010                                  ;
 12011                                  	; 17/05/2019 - Retro DOS v4.0
 12012                                  
 12013                                  	; MSDOS 3.3
 12014                                  	;;mov	ax,[es:di+1Dh]
 12015                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 12016                                  	;;mov	[si+1Ah],ax
 12017                                  	;mov	[si+fcb_net_handle],ax
 12018                                  	;push	es
 12019                                  	;push	di
 12020                                  	;;les	di,[es:di+19h]
 12021                                  	;LES	DI,[ES:DI+sf_netid]
 12022                                  	;;mov	[si+1Ch],di
 12023                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 12024                                  	;;mov 	[si+1Eh],es
 12025                                  	;MOV	[SI+fcb_netID+2],ES
 12026                                  	;pop	di
 12027                                  	;pop	es
 12028                                  
 12029                                  	; MSDOS 6.0
 12030                                  	;mov	ax,[es:di+0Bh]
 12031 00001885 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 12032                                  	;mov	[si+1Ch],ax
 12033 00001889 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 12034                                  	
 12035                                  	;mov	bl,80h
 12036 0000188C B380                    	MOV	BL,FCBNETWORK
 12037                                  ;
 12038                                  ;----- END In net support -----
 12039                                  ;
 12040 0000188E EB63                    	jmp	SHORT SaveSFN
 12041                                  
 12042                                  SaveLocal:
 12043                                  	;IF	Installed
 12044 00001890 E8D559                  	call	CheckShare
 12045                                  	;JZ	short SaveNoShare	; no sharer
 12046                                  	;JMP	short SaveShare		; sharer present
 12047                                  	; 16/12/2022
 12048                                  	; 28/07/2019
 12049 00001893 7559                    	jnz	short SaveShare
 12050                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12051                                  	;JZ	short SaveNoShare	; no sharer
 12052                                  	;JMP	short SaveShare		; sharer present
 12053                                  
 12054                                  SaveNoShare:
 12055                                  	;;test 	word [es:di+5],80h
 12056                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12057 00001895 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 12058 0000189A 7542                    	JNZ	short SaveNoShareDev	; Device
 12059                                  
 12060                                  	; Save no sharing local file information
 12061                                  
 12062                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 12063                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 12064 0000189C 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 12065                                  	;mov	[si+1Dh],ax
 12066 000018A0 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 12067                                  
 12068                                  	; MSDOS 6.0
 12069                                  
 12070                                  	;SR; Store high byte of directory sector
 12071                                  	;mov	ax,[es:di+1Dh]
 12072 000018A3 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 12073                                  	
 12074                                  	; SR;
 12075                                  	; We have to store the read-only and archive attributes of the file.
 12076                                  	; We extract it from the SFT and store it in the top two bits of the 
 12077                                  	; sector number ( sector number == 22 bits only )
 12078                                  
 12079                                  	;mov	bl,[es:di+4]
 12080 000018A7 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 12081 000018AB 88DF                    	mov	bh,bl
 12082 000018AD D0CB                    	ror	bl,1
 12083 000018AF D0E7                    	shl	bh,1
 12084 000018B1 08FB                    	or	bl,bh
 12085 000018B3 80E3C0                  	and	bl,0C0h
 12086 000018B6 08D8                    	or	al,bl
 12087                                  	;mov	[si+18h],al ; 08/11/2022
 12088 000018B8 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 12089                                  
 12090                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12091                                  	;mov	al,[es:di+1Fh]
 12092 000018BB 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 12093                                  	;mov	[si+1Fh],al
 12094 000018BF 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 12095                                  	;mov	ax,[es:di+0Bh]
 12096 000018C2 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 12097                                  	;mov	[si+1Bh],ax
 12098 000018C6 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 12099 000018C9 B300                    	MOV	BL,0
 12100                                  
 12101                                  	; Create the bits field from the dirty/device bits of the flags word 
 12102                                  	; and the mode byte
 12103                                  
 12104                                  SetFCBBits:
 12105                                  	;mov	ax,[es:di+5]
 12106 000018CB 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12107 000018CF 24C0                    	AND	AL,0C0h 		; mask off drive bits
 12108                                  	;or	al,[es:di+2]
 12109 000018D1 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 12110                                  	;mov	[si+1Ah], al
 12111 000018D5 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 12112                                  
 12113                                  	; MSDOS 6.0
 12114                                  	
 12115                                  	; SR;
 12116                                  	; Check if we came here for local file or device. If for local file, 
 12117                                  	; skip setting of SFT index
 12118                                  	
 12119 000018D8 08DB                    	or	bl,bl
 12120 000018DA 7428                    	jz	short SaveNoSFN		; do not save SFN if local file
 12121                                  
 12122 000018DC EB15                    	JMP	short SaveSFN 		; go and save SFN
 12123                                  
 12124                                  	; Save no sharing local device information
 12125                                  
 12126                                  SaveNoShareDev:
 12127                                  	; 20/01/2024
 12128                                  	;;mov	ax,[es:di+7]
 12129                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 12130                                  	;;mov	[si+1Ah],ax
 12131                                  	;MOV	[SI+fcb_nsld_drvptr],AX
 12132                                  	;;mov	ax,[es:di+9]
 12133                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 12134                                  	;MOV	[SI+fcb_nsld_drvptr+2],AX
 12135                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12136 000018DE 06                      	push	es
 12137 000018DF 26C44507                	les	ax,[es:di+SF_ENTRY.sf_devptr]
 12138 000018E3 89441A                  	mov	[si+fcb_nsld_drvptr],ax
 12139 000018E6 8C441C                  	mov	[si+fcb_nsld_drvptr+2],es
 12140 000018E9 07                      	pop	es
 12141                                  	
 12142                                  	;mov	bl,40h
 12143 000018EA B340                    	MOV	BL,FCBDEVICE
 12144                                  	; 28/12/2022
 12145 000018EC EBDD                    	JMP	short SetFCBBits	; go and save SFN
 12146                                  
 12147                                  SaveShare:
 12148                                  	;ENDIF
 12149                                  
 12150                                  ;----- In share support -----
 12151                                  
 12152                                  	;call	far [ss:ShSave]
 12153 000018EE 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 12154                                  
 12155                                  ;----- end in share support -----
 12156                                  
 12157                                  	; 17/05/2019
 12158                                  
 12159                                  SaveSFN:
 12160                                  	;lea	ax,[di-6]
 12161 000018F3 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 12162                                  	
 12163                                  	; Adjust for offset to table.
 12164                                  	
 12165 000018F6 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 12166                                  
 12167 000018FB 53                      	push	bx			;bx = FCB type (net/Share or local)
 12168                                  	;;mov	bl,53 ; MSDOS 3.3
 12169                                  	;mov	bl,59 ; MSDOS 6.0
 12170 000018FC B33B                    	MOV	BL,SF_ENTRY.size
 12171 000018FE F6F3                    	DIV	BL
 12172                                  	;mov	[si+18h],al
 12173 00001900 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 12174 00001903 5B                      	pop	bx			;restore bx
 12175                                  
 12176                                  SaveNoSFN:
 12177                                  	;mov	ax,[es:di+5]
 12178 00001904 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12179 00001908 243F                    	AND	AL,3Fh			; get real drive
 12180 0000190A 08D8                    	OR	AL,BL
 12181                                  	;mov	[si+19h],al
 12182 0000190C 884419                  	MOV	[SI+fcb_l_drive],AL
 12183                                  
 12184 0000190F 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 12185 00001913 40                      	INC	AX
 12186                                  	;mov	[es:di+15h],ax
 12187 00001914 26894515                	MOV	[ES:DI+sf_LRU],AX
 12188 00001918 7506                    	JNZ	short SimpleStuff
 12189                                  	
 12190                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 12191                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 12192                                  	
 12193                                  	;mov	bx,15h
 12194 0000191A BB1500                  	MOV	BX,SF_ENTRY.sf_position
 12195 0000191D E80500                  	call	ResetLRU
 12196                                  
 12197                                  	; Set new LRU to AX
 12198                                  SimpleStuff:
 12199 00001920 36A3[1000]              	MOV	[SS:FCBLRU],AX
 12200 00001924 C3                      	retn
 12201                                  
 12202                                  ;Break	<ResetLRU - reset overflowed lru counts>
 12203                                  ;----------------------------------------------------------------------------
 12204                                  ;
 12205                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 12206                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 12207                                  ;   at 0.
 12208                                  ;
 12209                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 12210                                  ;		ES:DI point to SFT currently being updated
 12211                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 12212                                  ;		AX has 8000h
 12213                                  ;   Registers modified: none
 12214                                  ;
 12215                                  ;----------------------------------------------------------------------------
 12216                                  ;
 12217                                  
 12218                                  	; 17/05/2019 - Retro DOS v4.0
 12219                                  ResetLRU:
 12220                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 12221                                  	; DOSDATA
 12222                                  
 12223 00001925 B80080                  	MOV	AX,8000h
 12224 00001928 06                      	push	es
 12225 00001929 57                      	push	di
 12226                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 12227 0000192A 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 12228                                  	;mov	cx,[es:di+4]
 12229 0000192F 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 12230                                  	;lea	di,[di+6]
 12231 00001933 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 12232                                  ovScan:
 12233 00001936 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 12234 00001939 7703                    	JA	short ovLoop
 12235 0000193B 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 12236                                  ovLoop:
 12237                                  	;;add	di,53	; MSDOS 3.3
 12238                                  	;add	di,59	; MSDOS 6.0	
 12239 0000193E 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 12240 00001941 E2F3                    	LOOP	ovScan
 12241 00001943 5F                      	pop	di
 12242 00001944 07                      	pop	es
 12243 00001945 268901                  	MOV	[ES:DI+BX],AX
 12244 00001948 C3                      	retn
 12245                                  
 12246                                  ;IF  0  ; We dont need this routine any more.
 12247                                  ;
 12248                                  ;Break	<SetOpenAge - update the open age of a SFT>
 12249                                  ;----------------------------------------------------------------------------
 12250                                  ;
 12251                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 12252                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 12253                                  ;   count here and fill in the appropriate field.
 12254                                  ;
 12255                                  ;   Inputs:	ES:DI point to SFT
 12256                                  ;   Outputs:	ES:DI has the open age field filled in.
 12257                                  ;		If open age has wraparound, we will have subtracted 8000h
 12258                                  ;		    from all open ages.
 12259                                  ;   Registers modified: AX
 12260                                  ;
 12261                                  ;----------------------------------------------------------------------------
 12262                                  ;
 12263                                  ;SetOpenAge:
 12264                                  ;	; 20/07/2018 - Retro DOS v3.0
 12265                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12266                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12267                                  ;
 12268                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12269                                  ;
 12270                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12271                                  ;	INC	AX
 12272                                  ;	;mov	[es:di+17h],ax
 12273                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12274                                  ;	JNZ	short SetDone
 12275                                  ;	;mov	bx,17h
 12276                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12277                                  ;	call	ResetLRU
 12278                                  ;SetDone:
 12279                                  ;	MOV	[CS:OpenLRU],AX
 12280                                  ;	retn
 12281                                  ;
 12282                                  ;ENDIF	; SetOpenAge no longer needed
 12283                                  
 12284                                  ; 21/07/2018 - Retro DOS v3.0
 12285                                  ; LRUFCB for MSDOS 6.0 !
 12286                                  
 12287                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12288                                  ;----------------------------------------------------------------------------
 12289                                  ;
 12290                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12291                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12292                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12293                                  ;
 12294                                  ;   Inputs:	none
 12295                                  ;   Outputs:	ES:DI point to SFT
 12296                                  ;		ThisSFT points to SFT
 12297                                  ;		SFT is zeroed
 12298                                  ;		Carry set of closes failed
 12299                                  ;   Registers modified: none
 12300                                  ;
 12301                                  ;----------------------------------------------------------------------------
 12302                                  ;
 12303                                  ; MSDOS 6.0
 12304                                  ;IF 0	; rewritten this routine
 12305                                  ;
 12306                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12307                                  ;	call	save_world
 12308                                  ;	
 12309                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12310                                  ; to find the lease recently used one that is younger than the open age.  We
 12311                                  ; operate be scanning the list n times finding the least age that is greater
 12312                                  ; or equal to the previous minimum age.
 12313                                  ;
 12314                                  ;   BP is the count of times we need to go through this loop.
 12315                                  ;   AX is the current acceptable minimum age to consider
 12316                                  ;
 12317                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12318                                  ;	XOR	AX,AX			; low = 0;
 12319                                  ;
 12320                                  ; If we've scanned the table n times, then we are done.
 12321                                  ;
 12322                                  ;lru1:
 12323                                  ;	CMP	bp,0			; while (k--) {
 12324                                  ;	JZ	short lru75
 12325                                  ;	DEC	bp
 12326                                  ;
 12327                                  ; Set up for scan.
 12328                                  ;
 12329                                  ;   AX is the minimum age for consideration
 12330                                  ;   BX is the minimum age found during the scan
 12331                                  ;   SI is the position of the entry that corresponds to BX
 12332                                  ;
 12333                                  ;	MOV	BX,-1			;     min = 0xffff;
 12334                                  ;	MOV	si,BX			;     pos = 0xffff;
 12335                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12336                                  ;	;mov	cx,[es:di+4]
 12337                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12338                                  ;	;lea	di,[di+6]
 12339                                  ;	LEA	DI,[DI+SFT.SFTable]
 12340                                  ;
 12341                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12342                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12343                                  ; are done.  In both cases, we use the found entry.
 12344                                  ;
 12345                                  ;lru2:
 12346                                  ;	cmp	word [es:di],0
 12347                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12348                                  ;	jz	short lru25
 12349                                  ;	;cmp	word [es:di],-1
 12350                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 12351                                  ;	cmp	word [es:di],sf_busy
 12352                                  ;	jnz	short lru3
 12353                                  ;
 12354                                  ; The entry is usable without further scan.  Go and use it.
 12355                                  ;
 12356                                  ;lru25:
 12357                                  ;	MOV	si,DI			;	      pos = i;
 12358                                  ;	JMP	short lru11		;	      goto got;
 12359                                  ;
 12360                                  ; See if the entry is for the network or for the sharer.
 12361                                  ;
 12362                                  ;  If for the sharer or network then
 12363                                  ;	if the age < current minimum AND >= allowed minimum then
 12364                                  ;	    this entry becomes current minimum
 12365                                  ;
 12366                                  ;lru3:
 12367                                  ;	;test	word [es:di+5],8000h
 12368                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12369                                  ;					;	  if (!net[i]
 12370                                  ;	JNZ	short lru35
 12371                                  ;if installed
 12372                                  ;	call	CheckShare		;		&& !sharing)
 12373                                  ;	JZ	short lru5		;	  else
 12374                                  ;ENDIF
 12375                                  ;
 12376                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12377                                  ; current minimum.
 12378                                  ;
 12379                                  ;lru35:
 12380                                  ;	;mov	dx,[es:di+17h]
 12381                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12382                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12383                                  ;	JB	short lru5
 12384                                  ;	CMP	DX,BX
 12385                                  ;	JAE	short lru5		;	      age[i] < min) {
 12386                                  ;
 12387                                  ; entry is new minimum.  Remember his age.
 12388                                  ;
 12389                                  ;	mov	bx,DX			;	      min = age[i];
 12390                                  ;	mov	si,di			;	      pos = i;
 12391                                  ;
 12392                                  ; End of loop.	gp back for more
 12393                                  ;
 12394                                  ;lru5:
 12395                                  ;	;add	di,53
 12396                                  ;	add	di,SF_ENTRY.size
 12397                                  ;	loop	lru2			;	      }
 12398                                  ;
 12399                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12400                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12401                                  ; complete.  Go find LRU.
 12402                                  ;
 12403                                  ;lru6:	
 12404                                  ;	cmp	si,-1			; position not -1?
 12405                                  ;	jz	short lru75		; no, done with everything
 12406                                  ;	lea	ax,[bx+1]		; set new threshold age
 12407                                  ;	jmp	short lru1		; go and loop for more
 12408                                  ;lru65:	
 12409                                  ;	stc
 12410                                  ;	jmp	short LRUDead		;	  return -1;
 12411                                  ;
 12412                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12413                                  ; network entry. We now make a second pass through to find the LRU entry
 12414                                  ; that is local-no-share or has age >= AX
 12415                                  ;
 12416                                  ;lru75:
 12417                                  ;	mov	bx,-1			; min = 0xffff;
 12418                                  ;	mov	si,bx			; pos = 0xffff;
 12419                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12420                                  ;	;mov	cx,[es:di+4]
 12421                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12422                                  ;	;lea	di,[di+6]
 12423                                  ;	LEA	DI,[DI+SFT.SFTable]
 12424                                  ;
 12425                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12426                                  ; then check for lru.
 12427                                  ;
 12428                                  ;lru8:
 12429                                  ;	;test	word [es:di+5],8000h
 12430                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12431                                  ;	jnz	short lru85		; is for network, go check age
 12432                                  ;	call	CheckShare		; sharer here?
 12433                                  ;	jz	short lru86		; no, go check lru
 12434                                  ;
 12435                                  ; Network or sharer.  Check age
 12436                                  ;
 12437                                  ;lru85:
 12438                                  ;	;cmp	[es:di+17h],ax
 12439                                  ;	cmp	[es:di+sf_OpenAge],ax
 12440                                  ;	jb	short lru9		; age is before threshold, skip it
 12441                                  ;
 12442                                  ; Check LRU
 12443                                  ;
 12444                                  ;lru86:
 12445                                  ;	;cmp	[es:di+15h],bx
 12446                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12447                                  ;	jae	short lru9		; no, skip this
 12448                                  ;	mov	si,di			; remember position
 12449                                  ;	;mov	bx,[es:di+15h]
 12450                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12451                                  ;
 12452                                  ; Done with this entry, go back for more.
 12453                                  ;
 12454                                  ;lru9:
 12455                                  ;	;add	di, 53
 12456                                  ;	add	di,SF_ENTRY.size
 12457                                  ;	loop	lru8
 12458                                  ;
 12459                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12460                                  ; out. The conditions here are:
 12461                                  ;
 12462                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12463                                  ;
 12464                                  ;lru10:
 12465                                  ;	cmp	si,-1			; if no one f
 12466                                  ;	jz	short lru65		;     return -1;
 12467                                  ;lru11:
 12468                                  ;	mov	di,si
 12469                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12470                                  ;	MOV	[CS:THISSFT+2],ES
 12471                                  ;
 12472                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12473                                  ; is 0.
 12474                                  ;
 12475                                  ;	;test	word [es:di+5],8000h
 12476                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12477                                  ;	JNZ	short LRUClose
 12478                                  ;IF INSTALLED
 12479                                  ;	call	CheckShare
 12480                                  ;	JZ	short LRUDone
 12481                                  ;ENDIF
 12482                                  ;
 12483                                  ; Repeat close until ref count is 0
 12484                                  ;
 12485                                  ;LRUClose:
 12486                                  ;	push	ss
 12487                                  ;	pop	ds
 12488                                  ;	LES	DI,[THISSFT]
 12489                                  ;	cmp     word [es:di],0
 12490                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12491                                  ;	JZ	short LRUDone 		; nope, all done
 12492                                  ;	call	DOS_CLOSE
 12493                                  ;	jnc	short LRUClose		; no error => clean up
 12494                                  ;	;cmp	al,6
 12495                                  ;	cmp	al,error_invalid_handle
 12496                                  ;	jz	short LRUClose
 12497                                  ;	stc
 12498                                  ;	JMP	short LRUDead
 12499                                  ;LRUDone:
 12500                                  ;	XOR	AL,AL
 12501                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12502                                  ;
 12503                                  ;LRUDead:
 12504                                  ;	call	restore_world
 12505                                  ;	LES     DI,[CS:THISSFT]
 12506                                  ;	jnc	short LRUFCB_retn
 12507                                  ;LRUFCB_err:
 12508                                  ;	; mov	al, 23h	
 12509                                  ;	MOV	AL,error_FCB_unavailable
 12510                                  ;LRUFCB_retn:	
 12511                                  ;	retn:
 12512                                  ;
 12513                                  ;ENDIF	; LRUFCB has been rewritten below.
 12514                                  
 12515                                  ; 17/05/2019 - Retro DOS v4.0
 12516                                  ; LRUFCB for MSDOS 6.0 !
 12517                                  ;----------------------------------------------------------------------------
 12518                                  ;
 12519                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12520                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12521                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12522                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12523                                  ; optimize regeneration operations by keeping track of the current local
 12524                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12525                                  ; local SFT in the SFT Block.
 12526                                  ;
 12527                                  ; Inputs: al = 0 => Regenerate SFT operation
 12528                                  ;	    = 1 => Allocate new SFT for Open/Create
 12529                                  ;
 12530                                  ; Outputs: Carry clear
 12531                                  ;	 	es:di = Address of allocated SFT
 12532                                  ;	  	ThisSFT = Address of allocated SFT
 12533                                  ;
 12534                                  ;	  carry set if closes of net/Share files failed 
 12535                                  ;		al = error_FCB_unavailable
 12536                                  ;
 12537                                  ; Registers affected: None
 12538                                  ;
 12539                                  ;----------------------------------------------------------------------------
 12540                                  
 12541                                  ;LruFCB	PROC	NEAR
 12542                                  LRUFCB:
 12543                                  	; 17/05/2019 - Retro DOS v4.0
 12544                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12545                                  
 12546                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12547                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12548                                  
 12549                                  	; 20/01/2024
 12550                                  
 12551 00001949 06                      	push	es	; * (MSDOS 6.21)
 12552                                  	
 12553 0000194A E819EB                  	call	save_world
 12554                                  	
 12555                                  	;getdseg <ds>		;ds = DOSDATA
 12556 0000194D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12557                                  
 12558 00001952 08C0                    	or	al,al		;Check if regenerate allocation
 12559 00001954 7516                    	jnz	short lru1	;Try to find SFT to use
 12560                                  
 12561                                  	; This is a regen call. If LocalSFT contains the address of a valid
 12562                                  	; local SFT, just return that SFT to reuse
 12563                                  
 12564                                  	; 20/01/2024
 12565                                  	;mov	di,[LocalSFT]
 12566                                  	;or	di,[LocalSFT+2]	;is address == 0?
 12567                                  	;jz	short lru1	;invalid local SFT, find one
 12568                                  
 12569                                  	; We have found a valid local SFT. Recycle this SFT
 12570                                  
 12571 00001956 C43E[4410]              	les	di,[LocalSFT]
 12572                                  
 12573                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12574 0000195A 8CC1                    	mov	cx,es
 12575 0000195C 09F9                    	or	cx,di		; is address == 0?
 12576 0000195E 740C                    	jz	short lru1	; invalid local SFT, find one
 12577                                  
 12578                                  gotlocalSFT:
 12579 00001960 893E[9E05]              	mov	[THISSFT],di
 12580 00001964 8C06[A005]              	mov	[THISSFT+2],es
 12581 00001968 F8                      	clc
 12582 00001969 E9A900                  	jmp	LRUDone		;clear up SFT and return
 12583                                  
 12584                                  lru1:
 12585 0000196C C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12586                                  	;mov	cx,[es:di+4]
 12587 00001970 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12588                                  	;lea	di,[di+6]
 12589 00001974 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12590                                  
 12591                                  	; We scan through all the SFTs scanning for a free one. It also 
 12592                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately.
 12593                                  	; bx = min. LRU for local SFTs
 12594                                  	; si = pos. of local SFT with min. LRU
 12595                                  	; dx = min. LRU for net/Share SFTs
 12596                                  	; bp = pos. of net/Share SFT with min. LRU
 12597                                  
 12598 00001977 BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12599 0000197A 89DE                    	mov	si,bx
 12600 0000197C 89DA                    	mov	dx,bx
 12601 0000197E 89DD                    	mov	bp,bx
 12602                                  
 12603                                  findSFT:
 12604                                  	;See if this SFT is a free one. If so, return it
 12605 00001980 26830D00                	or	word [es:di],0
 12606                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12607 00001984 744C                    	jz	short gotSFT	;yes, SFT is free
 12608                                  	;;cmp	word [es:di],-1
 12609                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12610 00001986 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12611 0000198A 7446                    	jz	short gotSFT	;no, can use it
 12612                                  
 12613                                  	; Check if this SFT is local and store its address in LocalSFT. Can be 
 12614                                  	; used for a later regen.
 12615                                  
 12616                                  	; 16/12/2022
 12617                                  	; 08/11/2022
 12618                                  	;test	byte [es:di+6],80h
 12619 0000198C 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12620                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12621                                  	;;test	word [es:di+5],8000h
 12622                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12623 00001991 7531                    	jnz	short lru5	;yes, get net/Share LRU
 12624                                  
 12625                                  ;IF installed
 12626 00001993 E8D258                  	call	CheckShare	;Share present?
 12627                                  ;ENDIF
 12628 00001996 752C                    	jnz	short lru5	;yes, get net/Share LRU
 12629                                  
 12630                                  	;Local SFT, register its address
 12631                                  
 12632                                  	; !!HACK!!!
 12633                                  	; There is a slightly dirty hack out here in a desperate bid to save
 12634                                  	; code space. There is similar code duplicated at label 'gotSFT'. We
 12635                                  	; enter from there if al = 0, update the LocalSFT variable, and since
 12636                                  	; al = 0, we jump out of the loop to the exit point. I have commented
 12637                                  	; out the code that previously existed at label 'gotSFT'
 12638                                  
 12639                                  hackpoint:
 12640 00001998 893E[4410]              	mov	[LocalSFT],di
 12641 0000199C 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12642                                  
 12643 000019A0 08C0                    	or	al,al		;Is operation = REGEN?
 12644 000019A2 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12645                                  
 12646                                  	;Get LRU for local files
 12647                                  	
 12648                                  	;cmp	[es:di+15h],bx
 12649 000019A4 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12650 000019A8 7306                    	jae	short lru4	;no, skip
 12651                                  
 12652                                  	;mov	bx,[es:di+15h]
 12653 000019AA 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12654 000019AE 89FE                    	mov	si,di		;store SFT position
 12655                                  lru4:
 12656                                  	;add	di,59
 12657 000019B0 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12658 000019B3 E2CB                    	loop	findSFT
 12659                                  	
 12660                                  	; 20/01/2024
 12661 000019B5 49                      	dec	cx ; -1
 12662                                  
 12663                                  	; Check whether we got a net/Share or local SFT. If local SFT
 12664                                  	; available, we will reuse it instead of net/Share LRU
 12665                                  
 12666 000019B6 89F7                    	mov	di,si
 12667                                  	;cmp	si,-1		;local SFT available?
 12668 000019B8 39CE                    	cmp	si,cx ; 20/01/2024
 12669 000019BA 7516                    	jnz	short gotSFT	;yes, return it
 12670                                  
 12671                                  	;No local SFT, see if we got a net/Share SFT
 12672                                  
 12673 000019BC 89EF                    	mov	di,bp
 12674                                  
 12675 000019BE 39CD                    	cmp	bp,cx ; -1 ; 20/01/2024
 12676                                  	;cmp	bp,-1		;net/Share SFT available?
 12677 000019C0 752D                    	jnz	short gotnetSFT	;yes, return it
 12678                                  noSFT:
 12679                                  	; NB: This error should never occur. We always must have an LRU SFT.
 12680                                  	; This error can occur only if the SFT has been corrupted or the LRU
 12681                                  	; count is not maintained properly.
 12682                                  
 12683 000019C2 EB4E                    	jmp	short errorbadSFT ;error, no FCB available.
 12684                                  
 12685                                  	; Handle the LRU for net/Share SFTs
 12686                                  lru5:
 12687                                  	;cmp	[es:di+15h],dx
 12688 000019C4 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12689 000019C8 73E6                    	jae	short lru4	;no, skip
 12690                                  
 12691                                  	;mov	dx,[es:di+15h]
 12692 000019CA 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12693                                  
 12694 000019CE 89FD                    	mov	bp,di		;store SFT position
 12695 000019D0 EBDE                    	jmp	short lru4	;continue with next SFT
 12696                                  
 12697                                  gotSFT:
 12698 000019D2 08C0                    	or	al,al
 12699 000019D4 74C2                    	jz	short hackpoint	;save es:di in LocalSFT
 12700                                  
 12701                                  	; HACK!!!
 12702                                  	; The code here differs from the code at 'hackpoint' only in the
 12703                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint'
 12704                                  	; and then from there jump out to 'gotlocalSFT'. The original code
 12705                                  	; has been commented out below and replaced by the code just above.
 12706                                  
 12707                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12708                                  ;
 12709                                  ;	or	al,al		  ;Regen?
 12710                                  ;	jnz	short notlocaluse ;yes, register it and return
 12711                                  ;
 12712                                  ;Register this SFT as a local one
 12713                                  ;
 12714                                  ;	mov	[LocalSFT],di
 12715                                  ;	mov	[LocalSFT+2],es
 12716                                  ;	jmp	gotlocalSFT	;return to caller
 12717                                  ;
 12718                                  ;notlocaluse:
 12719                                  
 12720                                  	; The caller is probably going to use this SFT for a net/Share file.
 12721                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN)
 12722                                  	; does not really know whether it is a local file or not. We
 12723                                  	; invalidate LocalSFT if the SFT we are going to use was previously
 12724                                  	; registered as a local SFT that can be recycled.
 12725                                  
 12726 000019D6 8CC0                    	mov	ax,es
 12727 000019D8 393E[4410]              	cmp	[LocalSFT],di		;Offset same?
 12728 000019DC 750E                    	jne	short notinvalid
 12729 000019DE 3906[4610]              	cmp	[LocalSFT+2],ax		;Segments same?
 12730                                  	;je	short zerolocalSFT	;no, no need to invalidate
 12731                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12732 000019E2 7508                    	jne	short notinvalid
 12733                                  zerolocalSFT:	
 12734 000019E4 31C0                    	xor	ax,ax ; 0
 12735 000019E6 A3[4410]                	mov	[LocalSFT],ax
 12736 000019E9 A3[4610]                	mov	[LocalSFT+2],ax
 12737                                  	
 12738                                  notinvalid:
 12739 000019EC E971FF                  	jmp	gotlocalSFT
 12740                                  
 12741                                  	; The SFT we are going to use was registered in the LocalSFT variable.
 12742                                  	; Invalidate this variable i.e LocalSFT = NULL
 12743                                  
 12744                                  ;zerolocalSFT:
 12745                                  	;xor	ax,ax ; 0
 12746                                  	;mov	[LocalSFT],ax
 12747                                  	;mov	[LocalSFT+2],ax
 12748                                  	;
 12749                                  	;jmp	gotlocalSFT
 12750                                  
 12751                                  gotnetSFT:
 12752                                  	; We have an SFT that is currently net/Share. If it is going to be
 12753                                  	; used for a regen, we know it has to be a local SFT. Update the
 12754                                  	; LocalSFT variable
 12755                                  
 12756 000019EF 08C0                    	or	al,al
 12757 000019F1 7508                    	jnz	short closenet
 12758                                  
 12759 000019F3 893E[4410]              	mov	[LocalSFT],di
 12760 000019F7 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12761                                  closenet:
 12762 000019FB 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12763 000019FF 8C06[A005]              	mov	[THISSFT+2],es
 12764                                  
 12765                                  	; If we have sharing or thisSFT is a net sft, then close it until ref
 12766                                  	; count is 0.
 12767                                  	; NB: We come here only if it is a net/Share SFT that is going to be
 12768                                  	; recycled -- no need to check for this.
 12769                                  
 12770                                  LRUClose:
 12771 00001A03 26833D00                	cmp	word [es:di],0
 12772                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12773 00001A07 740C                    	jz	short LRUDone	; nope, all done
 12774                                  
 12775 00001A09 E8A414                  	call	DOS_CLOSE
 12776 00001A0C 73F5                    	jnc	short LRUClose	; no error => clean up
 12777                                  
 12778                                  	; Bugbug: I dont know why we are trying to close after we get an
 12779                                  	; error closing. Seems like we could have a potential infinite loop
 12780                                  	; here. This has to be verified.
 12781                                  
 12782 00001A0E 3C06                    	cmp	al,error_invalid_handle ; 6
 12783 00001A10 74F1                    	je	short LRUClose
 12784                                  errorbadSFT:
 12785 00001A12 F9                      	stc
 12786 00001A13 EB05                    	JMP	short LRUDead
 12787                                  LRUDone:
 12788 00001A15 30C0                    	XOR	AL,AL
 12789 00001A17 E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12790                                  
 12791                                  LRUDead:
 12792 00001A1A E832EA                  	call	restore_world		; use macro
 12793                                  	
 12794 00001A1D 07                      	pop	es ; * (MSDOS 6.21)
 12795                                  
 12796                                  	;getdseg <es>
 12797 00001A1E 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12798 00001A23 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12799                                  
 12800                                  	;;retnc
 12801                                  	;jc	short LruFCB_err
 12802                                  	;retn
 12803                                  
 12804                                  	; 16/12/2022
 12805                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12806 00001A28 7302                    	jnc	short LruFCB_retn
 12807                                  	;jc	short LruFCB_err
 12808                                  	;retn
 12809                                  		
 12810                                  LruFCB_err:
 12811 00001A2A B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12812                                  LruFCB_retn:
 12813 00001A2C C3                      	retn
 12814                                  	
 12815                                  ;LruFCB	ENDP
 12816                                  
 12817                                  ; 17/05/2019 - Retro DOS v4.0
 12818                                  
 12819                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12820                                  
 12821                                  ; --------------------------------------------------------------------------
 12822                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12823                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12824                                  ; to copy the name to different destinations
 12825                                  ;
 12826                                  ; Inputs: ds:si = source string
 12827                                  ;	 es:di = destination string
 12828                                  ;	 cx = length of string
 12829                                  ;
 12830                                  ; Outputs: String copied to destination
 12831                                  ;
 12832                                  ; Registers affected: cx,di,si
 12833                                  ; --------------------------------------------------------------------------
 12834                                  
 12835                                  RegenCopyName:
 12836                                  CopyName:
 12837 00001A2D AC                      	lodsb			;load character
 12838 00001A2E E84535                  	call	UCase		; convert char to upper case
 12839                                  StuffChar2:
 12840 00001A31 AA                      	STOSB			;store converted character
 12841 00001A32 E2F9                    	LOOP	CopyName	;
 12842                                  DoneName:
 12843 00001A34 C3                      	retn
 12844                                  
 12845                                  ; --------------------------------------------------------------------------
 12846                                  
 12847                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12848                                  FCBRegen:
 12849                                  	; called from SFTFromFCB. SS already DOSDATA
 12850                                  
 12851                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12852                                  	; we do not fill, size we do no fill, position we do not fill,
 12853                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12854                                  
 12855                                  	;mov	al,[si+19h]
 12856 00001A35 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12857                                  
 12858                                  	; We discriminate based on the first two bits in the reserved field.
 12859                                  	
 12860                                  	;test	al,80h
 12861 00001A38 A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12862 00001A3A 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12863                                  
 12864                                  	; The FCB is for a network or a sharing based system. At this point 
 12865                                  	; we have already closed the SFT for this guy and reconnection is 
 12866                                  	; impossible.
 12867                                  	;
 12868                                  	; Remember that he may have given us a FCB with bogus information in
 12869                                  	; it. Check to see if sharing is present or if the redir is present.
 12870                                  	; If either is around, presume that we have cycled out the FCB and 
 12871                                  	; give the hard error. Otherwise, just return with carry set.
 12872                                  
 12873 00001A3C E82958                  	call	CheckShare		; test for sharer
 12874 00001A3F 7509                    	JNZ	short RegenFail		; yep, fail this.
 12875                                  	
 12876                                  	;mov	ax,1100h
 12877 00001A41 B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12878 00001A44 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12879                                  			; Return: AL = 00h  not installed, OK to install
 12880                                  			; 01h  not installed, not OK to install
 12881                                  			; FFh  installed
 12882 00001A46 08C0                    	OR	AL,AL			; is it there?
 12883 00001A48 740C                    	JZ	short RegenDead		; no, just fail the operation
 12884                                  RegenFail:
 12885                                  	; 17/05/2019 - Retro DOS v4.0
 12886                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12887 00001A4A 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12888                                  
 12889                                  	;cmp	ah,10h
 12890 00001A4E 80FC10                  	cmp	AH,FCB_CLOSE
 12891 00001A51 7403                    	jz	short RegenDead
 12892 00001A53 E88B01                  	call	FCBHardErr		; massive hard error.
 12893                                  RegenDead:
 12894 00001A56 F9                      	STC				; carry set
 12895                                  FCBRegen_retn:
 12896 00001A57 C3                      	retn
 12897                                  
 12898                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12899                                  	; so fail the operation.
 12900                                  
 12901                                  RegenNoSharing:
 12902 00001A58 E80D58                  	call	CheckShare		; Sharing around?
 12903 00001A5B 75ED                    	JNZ	short RegenFail
 12904                                  	
 12905                                  	; Find an SFT for this guy.
 12906                                  	
 12907                                  	; 17/05/2019 - Retro DOS v4.0
 12908                                  
 12909                                  	; MSDOS 3.3
 12910                                  	;call	LRUFCB
 12911                                  	;jc	short FCBRegen_retn
 12912                                  	
 12913                                  	; MSDOS 6.0
 12914 00001A5D 50                      	push	ax
 12915 00001A5E B000                    	mov	al,0			;indicate it is a regen operation
 12916 00001A60 E8E6FE                  	call	LRUFCB
 12917 00001A63 58                      	pop	ax
 12918 00001A64 72F1                    	jc	short FCBRegen_retn
 12919                                  
 12920                                  	;mov	word [es:di+2],8002h
 12921 00001A66 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12922 00001A6C 243F                    	AND	AL,3Fh			; get drive number for flags
 12923 00001A6E 98                      	CBW
 12924                                  	;or	ax,4000h
 12925 00001A6F 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12926                                  
 12927                                  	; The bits field consists of the upper two bits (dirty and device) 
 12928                                  	; from the SFT and the low 4 bits from the open mode.
 12929                                  
 12930                                  	;mov	cl,[si+1Ah]
 12931 00001A72 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12932 00001A75 88CD                    	MOV	CH,CL
 12933 00001A77 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12934 00001A7A 08E8                    	OR	AL,CH
 12935                                  	;and	cl,0Fh
 12936 00001A7C 80E10F                  	AND	CL,access_mask		; get the mode bits
 12937                                  	;mov	[es:di+2],cl
 12938 00001A7F 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12939                                  	;mov	[es:di+5],ax
 12940 00001A83 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12941                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12942 00001A87 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12943                                  	;mov	[es:di+31h],ax
 12944 00001A8B 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12945 00001A8F 1E                      	push	ds
 12946 00001A90 56                      	push	si
 12947 00001A91 06                      	push	es
 12948 00001A92 57                      	push	di
 12949 00001A93 16                      	push	ss
 12950 00001A94 07                      	pop	es
 12951 00001A95 BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12952                                  
 12953 00001A98 B90800                  	MOV	CX,8
 12954 00001A9B 46                      	INC	SI			; Skip past drive byte to name in FCB
 12955                                  
 12956                                  	; MSDOS 3.3
 12957                                  ;RegenCopyName:
 12958                                  	;lodsb
 12959                                  	;call	UCase
 12960                                  	;stosb
 12961                                  	;loop	RegenCopyName
 12962                                  
 12963                                  	; MSDOS 6.0
 12964 00001A9C E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 12965                                  
 12966 00001A9F 16                      	push	ss	; SS is DOSDATA
 12967 00001AA0 1F                      	pop	ds
 12968                                  
 12969                                  	;mov	byte [ATTRIB],16h
 12970 00001AA1 C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12971                                  					; Must set this to something interesting
 12972                                  					; to call DEVNAME.
 12973 00001AA6 E84A26                  	call	DEVNAME 		; check for device
 12974 00001AA9 5E                      	pop	si
 12975 00001AAA 07                      	pop	es
 12976 00001AAB 5E                      	pop	si
 12977 00001AAC 1F                      	pop	ds
 12978 00001AAD 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 12979                                  
 12980                                  	; Device found. We can ignore disk-specific info
 12981                                  
 12982                                  	;mov	[es:di+5],bh
 12983 00001AAF 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 12984                                  	;mov	byte [es:di+4],0
 12985 00001AB3 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 12986                                  					; SS override
 12987                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 12988 00001AB8 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 12989                                  	;mov	[es:di+7],si
 12990 00001ABD 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12991                                  	;mov	[es:di+9],ds
 12992 00001AC1 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12993 00001AC5 C3                      	retn				; carry is clear
 12994                                  
 12995                                  RegenDeadJ:
 12996 00001AC6 EB8E                    	JMP	short RegenDead
 12997                                  
 12998                                  	; File found. Just copy in the remaining pieces.
 12999                                  
 13000                                  RegenFileNoSharing:
 13001                                  	;mov	ax,[es:di+5]
 13002 00001AC8 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 13003 00001ACC 83E03F                  	AND	AX,03Fh
 13004 00001ACF 1E                      	push	ds
 13005 00001AD0 56                      	push	si
 13006 00001AD1 E8214E                  	call	FIND_DPB
 13007                                  	;mov	[es:di+7],si
 13008 00001AD4 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 13009                                  	;mov	[es:di+9],ds
 13010 00001AD8 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 13011 00001ADC 5E                      	pop	si
 13012 00001ADD 1F                      	pop	ds
 13013 00001ADE 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 13014                                  					; indicator was bogus
 13015                                  	;mov	ax,[si+1Dh]
 13016 00001AE0 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 13017                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 13018                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 13019 00001AE3 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 13020                                  
 13021                                  	; MSDOS 6.0
 13022                                  
 13023                                  	; SR;
 13024                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 13025                                  	; number
 13026                                  
 13027                                  	;mov	al,[si+18h]
 13028 00001AE7 8A4418                  	mov	al,[si+fcb_sfn]
 13029 00001AEA 24C0                    	and	al,0C0h		;get the 2 attribute bits
 13030 00001AEC 88C4                    	mov	ah,al
 13031 00001AEE D0C4                    	rol	ah,1
 13032 00001AF0 D0E8                    	shr	al,1
 13033 00001AF2 08E0                    	or	al,ah
 13034 00001AF4 243F                    	and	al,03Fh		;mask off unused bits
 13035                                  	;mov	[es:di+4],al
 13036 00001AF6 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 13037                                  
 13038                                  	; SR;
 13039                                  	; Update the higher word of the directory sector from the FCB
 13040                                  
 13041                                  	;;mov	al,[si+18h]
 13042 00001AFA 8A4418                  	mov	al,[si+fcb_sfn]
 13043 00001AFD 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 13044 00001AFF 28E4                    	sub	ah,ah
 13045                                  	;mov	[es:di+1Dh],ax
 13046 00001B01 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 13047                                  
 13048                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13049                                  	;mov	ax,[si+1Bh]
 13050 00001B05 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 13051                                  	;mov	[es:di+0Bh],ax
 13052 00001B08 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 13053                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 13054                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 13055 00001B0C 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 13056                                  	;mov	al,[si+1Fh]
 13057 00001B10 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 13058                                  	;mov  	[es:di+1Fh],al
 13059 00001B13 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 13060                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13061 00001B17 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 13062                                  					; Existing FCB entries would be
 13063                                  					; flushed unnecessarily because of
 13064                                  					; check in CheckFCB of the ref_count.
 13065                                  					; July 22/85 - BAS
 13066                                  	;lea	si,[si+1]
 13067 00001B1A 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 13068                                  	;lea	di,[di+20h]
 13069 00001B1D 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 13070                                  	;mov	cx,11
 13071 00001B20 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13072                                  	
 13073                                  	; MSDOS 6.0
 13074 00001B23 E807FF                  	call	RegenCopyName	;copy name to SFT 
 13075                                  	
 13076                                  	; MSDOS 3.3
 13077                                  ;RegenCopyName2:
 13078                                  	;lodsb
 13079                                  	;call    UCase
 13080                                  	;stosb
 13081                                  	;loop    RegenCopyName2
 13082                                  
 13083 00001B26 F8                      	clc
 13084 00001B27 C3                      	retn
 13085                                  
 13086                                  ; 17/05/2019 - Retro DOS v4.0
 13087                                  
 13088                                  ;**	BlastSFT - FIll SFT with Garbage
 13089                                  ; --------------------------------------------------------------------------
 13090                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 13091                                  ;	various garbage values to put into the SFT.  I don't know why,
 13092                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 13093                                  ;	necessary to show that the SFT is free after filling it.
 13094                                  ;
 13095                                  ;	ENTRY	(es:di) = address of SFT
 13096                                  ;		(al) = fill character
 13097                                  ;	EXIT	(ax) = -1
 13098                                  ;		'C' clear
 13099                                  ;	USES	AX, CX, Flags
 13100                                  
 13101                                  BlastSFT:
 13102 00001B28 57                      	push	di
 13103                                  	;mov	cx,53 ; MSDOS 3.3
 13104                                  	;mov	cx,59 ; MSDOS 6.0
 13105 00001B29 B93B00                  	mov	cx,SF_ENTRY.size
 13106 00001B2C F3AA                    	rep	stosb
 13107 00001B2E 5F                      	pop	di
 13108 00001B2F 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 13109 00001B31 268905                  	mov	[es:di],ax
 13110                                  	;mov	[es:di+SF_ENTRY.sf_ref_count],ax ; set ref count    ;
 13111                                  	;mov	[es:di+15h],ax
 13112 00001B34 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 13113 00001B38 48                      	dec	ax	; -1					    ;
 13114                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 13115 00001B39 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 13116                                  BlastSFT_retn:
 13117 00001B3D C3                      	retn				; return with 'C' clear     ;
 13118                                  
 13119                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 13120                                  ; --------------------------------------------------------------------------
 13121                                  ;
 13122                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 13123                                  ;   regenerated.
 13124                                  ;
 13125                                  ;   Inputs:	DS:SI point to FCB (not extended)
 13126                                  ;		AL is SFT index
 13127                                  ;   Outputs:	Carry Set - FCB needs to be regened
 13128                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 13129                                  ;   Registers modified: AX and BX
 13130                                  ;
 13131                                  ; --------------------------------------------------------------------------
 13132                                  
 13133                                  	; 21/01/2024
 13134                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13135                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 13136                                  CheckFCB:
 13137                                  		
 13138                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 13139                                  
 13140                                  	; MSDOS 3.3
 13141                                  
 13142                                  	; LES	DI,[CS:SFTFCB]
 13143                                  
 13144                                  	; MSDOS 6.0
 13145                                  	
 13146                                  	; SR;
 13147                                  	; We check if the given FCB is for a local file. If so, we return a 
 13148                                  	; bad SFT status forcing the caller to regenerate the SFT.
 13149                                  
 13150                                  	;test	byte [si+19h],0C0h
 13151 00001B3E F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 13152 00001B42 7447                    	jz	short BadSFT		;Local file, return bad SFT
 13153 00001B44 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 13154                                  
 13155                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13156                                  	;cmp	[es:di+4],al
 13157 00001B49 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 13158 00001B4D 723C                    	JC	short BadSFT
 13159                                  	;;mov	bl,53 ; MSDOS 3.3
 13160                                  	;mov	bl,59 ; MSDOS 6.0
 13161 00001B4F B33B                    	MOV	BL,SF_ENTRY.size
 13162 00001B51 F6E3                    	MUL	BL
 13163                                  	;lea	di,[di+6]
 13164 00001B53 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 13165 00001B56 01C7                    	ADD	DI,AX
 13166                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 13167 00001B58 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 13168                                  	;cmp	[es:di+31h],ax
 13169 00001B5C 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 13170 00001B60 7529                    	JNZ	short BadSFT		; must match process
 13171 00001B62 26833D00                	cmp	word [es:di],0
 13172                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 13173 00001B66 7423                    	JZ	short BadSFT		; must also be in use
 13174                                  	;mov	al,[si+19h]
 13175 00001B68 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 13176                                  	;test	al,80h
 13177 00001B6B A880                    	test	AL,FCBSPECIAL		; a special FCB?
 13178 00001B6D 7428                    	JZ	short CheckNoShare	; No. try local or device
 13179                                  
 13180                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 13181                                  	; FCBSHARE is a superset of FCBNETWORK.
 13182                                  
 13183 00001B6F 50                      	PUSH	AX
 13184                                  	;and	al,0C0h
 13185 00001B70 24C0                    	AND	AL,FCBMASK
 13186                                  	;cmp	al,0C0h
 13187 00001B72 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 13188 00001B74 58                      	POP	AX
 13189 00001B75 7516                    	JNZ	short CheckNet		; yes
 13190                                  ;
 13191                                  ;----- In share support -----
 13192                                  ;
 13193                                  	;call	far [cs:JShare+(11*4)]
 13194 00001B77 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 13195 00001B7C 720D                    	JC	short BadSFT
 13196                                  
 13197                                  ; 21/01/2024
 13198                                  %if 0
 13199                                  	JMP	SHORT CheckD
 13200                                  ;
 13201                                  ;----- End in share support -----
 13202                                  ;
 13203                                  	; 09/11/2022
 13204                                  	; (There is not any procedure/sub
 13205                                  	;  which calls or jumps to CheckFirClus here)
 13206                                  	;;;
 13207                                  CheckFirClus:
 13208                                  	;cmp     bx,[es:di+0Bh]
 13209                                  	; 07/12/2022
 13210                                  	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 13211                                  	JNZ	short BadSFT
 13212                                  	;;;
 13213                                  %endif
 13214                                  
 13215                                  CheckD: 
 13216 00001B7E 243F                    	AND	AL,3Fh
 13217                                  	;mov	ah,[es:di+5]
 13218 00001B80 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 13219 00001B84 80E43F                  	AND	AH,3Fh
 13220 00001B87 38C4                    	CMP	AH,AL
 13221                                  	; 16/12/2022
 13222 00001B89 74B2                    	jz	short BlastSFT_retn	; carry is clear
 13223                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13224                                  	;jnz	short BadSFT
 13225                                  ;CheckD_retn:
 13226                                  	;retn
 13227                                  BadSFT: 
 13228 00001B8B F9                      	STC
 13229 00001B8C C3                      	retn
 13230                                  				
 13231                                  CheckNet:
 13232                                  	; 17/05/2019 - Retro DOS v4.0
 13233                                  	
 13234                                  ;----- In net support -----
 13235                                  
 13236                                  	; MSDOS 3.3
 13237                                  	;;mov	ax,[si+1Ah]
 13238                                  	;mov	ax,[si+fcb_net_handle]
 13239                                  	;;cmp	ax,[es:di+1Dh]
 13240                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 13241                                  	;jnz	short BadSFT
 13242                                  	;;cmp	ax,[es:di+19h]
 13243                                  	;cmp	ax,[ES:DI+sf_netid]
 13244                                  	;jnz     short BadSFT
 13245                                  	;;mov	ax,[si+1Eh]
 13246                                  	;mov	ax,[si+fcb_l_attr]
 13247                                  	;;cmp	ax,[es:di+1Bh]
 13248                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 13249                                  	;jnz     short BadSFT
 13250                                  
 13251                                  	; MSDOS 6.0
 13252                                  	;mov	ax,[si+1Ch]
 13253 00001B8D 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 13254                                  	; 09/11/2022
 13255                                  	;cmp	ax,[es:di+0Bh] 
 13256 00001B90 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 13257 00001B94 75F5                    	JNZ	short BadSFT
 13258                                  
 13259                                  ;----- END In net support -----
 13260                                  
 13261                                  CheckNet_retn:
 13262 00001B96 C3                      	retn
 13263                                  
 13264                                  CheckNoShare:
 13265                                  
 13266                                  ; 16/12/2022
 13267                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 13268                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 13269                                  ;	;test	al,40h
 13270                                  ;	test	AL,FCBDEVICE		; Device?
 13271                                  ;	;jnz	short $+2 ; 09/11/2022
 13272                                  ;	JNZ	short CheckNoShareDev 	; Yes
 13273                                  
 13274                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 13275                                  	;;mov	bx,[si+1Dh]
 13276                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 13277                                  	;;cmp	bx,[es:di+1Dh]
 13278                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 13279                                  	;jnz	short BadSFT
 13280                                  	;;mov	bl,[si+1Fh]
 13281                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13282                                  	;;cmp	bl,[es:di+1Fh]
 13283                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13284                                  	;jnz	short BadSFT
 13285                                  	;;mov	bl,[si+1Ah]
 13286                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13287                                  	;;mov	bh,[es:di+5]
 13288                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13289                                  	;xor	bh,bl
 13290                                  	;and	bh,0C0h
 13291                                  	;jnz	short BadSFT
 13292                                  	;;xor	bl,[es:di+2]
 13293                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13294                                  	;and	bl,0Fh
 13295                                  	;jnz	short BadSFT
 13296                                  	;push	di
 13297                                  	;push	si
 13298                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13299                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13300                                  	;;lea	si,[si+1]
 13301                                  	;LEA	SI,[SI+SYS_FCB.name]
 13302                                  	;;mov	cx,11
 13303                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13304                                  	;repe	cmpsb
 13305                                  	;pop	si
 13306                                  	;pop	di
 13307                                  	;jnz	short BadSFT
 13308                                  	;;mov	bx,[si+1Bh]
 13309                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13310                                  	;jmp	short CheckFirClus
 13311                                  
 13312                                  	; MSDOS 6.0
 13313                                  
 13314                                  	; SR;
 13315                                  	; The code below to match a local FCB with its SFT can no longer be
 13316                                  	; used. We just return a no-match status. This check is done right
 13317                                  	; at the top.
 13318                                  
 13319                                  CheckNoShareDev:
 13320                                  	;mov	bx,[si+1Ah]
 13321 00001B97 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13322                                  	;cmp	bx,[es:di+7]
 13323 00001B9A 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13324 00001B9E 75EB                    	JNZ	short BadSFT
 13325                                  	;mov	bx,[si+1Ch]
 13326 00001BA0 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13327                                  	;cmp	bx,[es:di+9]
 13328 00001BA3 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13329 00001BA7 75E2                    	JNZ	short BadSFT
 13330 00001BA9 EBD3                    	JMP	short CheckD
 13331                                  
 13332                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13333                                  ;----------------------------------------------------------------------------
 13334                                  ;
 13335                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13336                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13337                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13338                                  ;	with PID
 13339                                  ;
 13340                                  ;   Inputs:	DS:SI point to FCB
 13341                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13342                                  ;		Carry clear -> OK ES:DI -> SFT
 13343                                  ;		Carry set -> error in ax
 13344                                  ;   Registers modified: ES,DI, AX
 13345                                  ;
 13346                                  ;----------------------------------------------------------------------------
 13347                                  
 13348                                  SFTFromFCB:
 13349                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13350                                  
 13351                                  	; 17/05/2019 - Retro DOS v4.0
 13352                                  
 13353 00001BAB 50                      	push	ax
 13354 00001BAC 53                      	push	bx
 13355                                  	;mov	al,[si+18h]
 13356 00001BAD 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13357 00001BB0 E88BFF                  	call	CheckFCB
 13358 00001BB3 5B                      	pop	bx
 13359 00001BB4 58                      	pop	ax
 13360                                  	;MOV	[CS:THISSFT],DI		; SS override
 13361                                  	;MOV	[CS:THISSFT+2],ES
 13362 00001BB5 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13363 00001BBA 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13364 00001BBF 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13365                                  	
 13366                                  	; 09/11/2022 (MSDOS 5.0)
 13367                                  	; 31/05/2019
 13368 00001BC1 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13369 00001BC2 E8A1E8                  	call	save_world
 13370 00001BC5 E86DFE                  	call	FCBRegen
 13371 00001BC8 E884E8                  	call	restore_world		; use macro restore world
 13372 00001BCB 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13373                                  
 13374                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13375 00001BCC 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13376 00001BD0 72C4                    	jc	short CheckNet_retn
 13377                                  
 13378                                  Set_SFT: 
 13379                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13380 00001BD2 36C43E[9E05]            	les	di,[ss:THISSFT]
 13381                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13382 00001BD7 36FF36[3C03]            	push	word [ss:PROC_ID]
 13383                                  	;pop	word [es:di+31h]
 13384 00001BDC 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13385 00001BE0 C3                      	retn				; carry is clear
 13386                                  
 13387                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13388                                  ;----------------------------------------------------------------------------
 13389                                  ;
 13390                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13391                                  ;	unavailable FCB.
 13392                                  ;
 13393                                  ;   Inputs:	none.
 13394                                  ;   Outputs:	none.
 13395                                  ;   Registers modified: all
 13396                                  ;
 13397                                  ;----------------------------------------------------------------------------
 13398                                  
 13399                                  FCBHardErr:
 13400                                  	; 17/05/2019 - Retro DOS v4.0
 13401 00001BE1 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13402                                  	;
 13403                                  	;mov	ax,23h
 13404 00001BE6 B82300                  	MOV	AX,error_FCB_unavailable
 13405                                  	;;mov	byte [cs:ALLOWED],8
 13406                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13407 00001BE9 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13408                                  	
 13409                                  	;LES	BP,[CS:THISDPB]
 13410 00001BEF 26C42E[8A05]            	les	bp,[es:THISDPB]
 13411                                  	
 13412 00001BF4 BF0100                  	MOV	DI,1			; Fake some registers
 13413 00001BF7 89F9                    	MOV	CX,DI
 13414                                  	;mov	dx,[es:bp+0Bh]
 13415 00001BF9 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13416 00001BFD E83436                  	call	HARDERR
 13417 00001C00 F9                      	STC
 13418 00001C01 C3                      	retn
 13419                                  
 13420                                  ;============================================================================
 13421                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13422                                  ;============================================================================
 13423                                  ; 21/07/2018 - Retro DOS v3.0
 13424                                  ; 17/05/2019 - Retro DOS v4.0
 13425                                  
 13426                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13427                                  ;
 13428                                  ;	GetRR
 13429                                  ;	GetExtent
 13430                                  ;	SetExtent
 13431                                  ;	GetExtended
 13432                                  ;	GetRecSize
 13433                                  ;	FCBIO
 13434                                  ;	$FCB_OPEN
 13435                                  ;	$FCB_CREATE
 13436                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13437                                  ;	$FCB_RANDOM_READ_BLOCK
 13438                                  ;	$FCB_SEQ_READ
 13439                                  ;	$FCB_SEQ_WRITE
 13440                                  ;	$FCB_RANDOM_READ
 13441                                  ;	$FCB_RANDOM_WRITE
 13442                                  ;
 13443                                  ;	Revision history:
 13444                                  ;
 13445                                  ;		Created: ARR 4 April 1983
 13446                                  ;			 MZ  6 June  1983 completion of functions
 13447                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13448                                  ;				  times.  Change so successive closes work by
 13449                                  ;				  always returning OK.	Also, detect I/O to
 13450                                  ;				  already closed FCB and return EOF.
 13451                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13452                                  ;				  out of sft into FCB for reconnection
 13453                                  ;
 13454                                  ;	    A000   version 4.00	Jan. 1988
 13455                                  
 13456                                  ; Defintions for FCBOp flags
 13457                                  
 13458                                  RANDOM	equ 2				; random operation
 13459                                  FCBREAD equ 4				; doing a read
 13460                                  BLOCK	equ 8				; doing a block I/O
 13461                                  
 13462                                  ;Break <GetRR - return the random record field in DX:AX>
 13463                                  ;---------------------------------------------------------------------------
 13464                                  ;
 13465                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13466                                  ;	from the FCB pointed to by DS:SI
 13467                                  ;
 13468                                  ;   Inputs:	DS:SI point to an FCB
 13469                                  ;		BX has record size
 13470                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13471                                  ;   Registers modified: none
 13472                                  ;---------------------------------------------------------------------------
 13473                                  
 13474                                  GetRR:
 13475                                  	;mov	ax,[si+21h]
 13476 00001C02 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13477                                  	;mov	dx,[si+23h]
 13478 00001C05 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13479 00001C08 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13480 00001C0B 7202                    	JB	short GetRRBye
 13481                                  GetExtent_bye:	; 21/01/2024
 13482 00001C0D 30F6                    	XOR	DH,DH
 13483                                  GetRRBye:
 13484 00001C0F C3                      	retn
 13485                                  
 13486                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13487                                  ;---------------------------------------------------------------------------
 13488                                  ;
 13489                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13490                                  ;	NR fields in the FCB.
 13491                                  ;
 13492                                  ;   Inputs:	DS:SI - point to FCB
 13493                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13494                                  ;   Registers modified: none
 13495                                  ;---------------------------------------------------------------------------
 13496                                  
 13497                                  GetExtent:
 13498                                  	;mov	al,[si+20h]
 13499 00001C10 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13500                                  	;mov	dx,[si+0Ch]
 13501 00001C13 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13502 00001C16 D0E0                    	SHL	AL,1
 13503 00001C18 D1EA                    	SHR	DX,1
 13504 00001C1A D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13505 00001C1C 88D4                    	MOV	AH,DL
 13506 00001C1E 88F2                    	MOV	DL,DH
 13507                                  	; 21/01/2024
 13508                                  	;XOR	DH,DH
 13509                                  	;retn
 13510 00001C20 EBEB                    	jmp	short GetExtent_bye
 13511                                  
 13512                                  ;Break <SetExtent - update the extent/NR field>
 13513                                  ;---------------------------------------------------------------------------
 13514                                  ;
 13515                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13516                                  ;	fields
 13517                                  ;
 13518                                  ;   Inputs:	DS:SI point to FCB
 13519                                  ;		DX:AX is a record location in file
 13520                                  ;   Outputs:	Extent/NR fields are filled in
 13521                                  ;   Registers modified: CX
 13522                                  ;---------------------------------------------------------------------------
 13523                                  
 13524                                  SetExtent:
 13525 00001C22 50                      	push	ax
 13526 00001C23 52                      	push	dx
 13527 00001C24 89C1                    	MOV	CX,AX
 13528 00001C26 247F                    	AND	AL,7FH			; next rec field
 13529                                  	;mov	[si+20h],al
 13530 00001C28 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13531 00001C2B 80E180                  	AND	CL,80H			; save upper bit
 13532 00001C2E D1E1                    	SHL	CX,1
 13533 00001C30 D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13534 00001C32 88E8                    	MOV	AL,CH
 13535 00001C34 88D4                    	MOV	AH,DL
 13536                                  	;mov	[si+0Ch], ax
 13537 00001C36 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13538 00001C39 5A                      	pop	dx
 13539 00001C3A 58                      	pop	ax
 13540 00001C3B C3                      	retn
 13541                                  
 13542                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13543                                  ;---------------------------------------------------------------------------
 13544                                  ;
 13545                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13546                                  ;
 13547                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13548                                  ;   Outputs:	DS:SI point to the FCB part
 13549                                  ;		zeroflag set if not extended fcb
 13550                                  ;   Registers modified: SI
 13551                                  ;---------------------------------------------------------------------------
 13552                                  
 13553                                  GetExtended:
 13554 00001C3C 89D6                    	MOV	SI,DX			; point to Something
 13555 00001C3E 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13556 00001C41 7503                    	JNZ	short GetBye		; not there
 13557 00001C43 83C607                  	ADD	SI,7			; point to FCB
 13558                                  GetBye:
 13559 00001C46 39D6                    	CMP	SI,DX			; set condition codes
 13560                                  getextd_retn:
 13561 00001C48 C3                      	retn
 13562                                  
 13563                                  ;Break <GetRecSize - return in BX the FCB record size>
 13564                                  ;---------------------------------------------------------------------------
 13565                                  ;
 13566                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13567                                  ;
 13568                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13569                                  ;   Outputs:	BX contains the record size
 13570                                  ;   Registers modified: None
 13571                                  ;---------------------------------------------------------------------------
 13572                                  
 13573                                  	; 22/01/2024
 13574                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13575                                  GetRecSize:
 13576                                  	;mov	bx,[si+0Eh]
 13577 00001C49 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13578 00001C4C 09DB                    	OR	BX,BX			; is it nul?
 13579                                  	;jz	short getextd_retn
 13580                                  	; 22/01/2024 (BugFix)
 13581 00001C4E 75F8                    	jnz	short getextd_retn
 13582                                  	;MOV	BX,128			; use default size
 13583 00001C50 B380                    	mov	bl,128
 13584                                  	;mov	[si+0Eh],bx
 13585 00001C52 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13586 00001C55 C3                      	retn
 13587                                  
 13588                                  ; 23/01/2024 - Retro DOS v5.0
 13589                                  ; PCDOS 7.1 IBMDOS.COM - DOSCODE:61B3h
 13590                                  ; 23/01/2024 - Retro DOS v4.2
 13591                                  ; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DC1h
 13592                                  ; 23/01/2024 - Retro DOS v4.1
 13593                                  ; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DADh
 13594                                  
 13595                                  ; 22/07/2018 - Retro DOS v3.0
 13596                                  
 13597                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13598                                  ;----------------------------------------------------------------------------
 13599                                  ;
 13600                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13601                                  ;	and write a number of blocks from it.
 13602                                  ;
 13603                                  ;   Inputs:	DS:DX point to an FCB
 13604                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13605                                  ;		AL <> 0 Not enough room on disk for the output
 13606                                  ;
 13607                                  ;----------------------------------------------------------------------------
 13608                                  
 13609                                  _$FCB_RANDOM_WRITE_BLOCK:
 13610                                  	;mov	AL,0Ah
 13611 00001C56 B00A                    	MOV	AL,RANDOM+BLOCK
 13612 00001C58 EB12                    	JMP	short FCBIO	; 23/01/2024
 13613                                  
 13614                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13615                                  ;----------------------------------------------------------------------------
 13616                                  ;
 13617                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13618                                  ;	and read a number of blocks from it.
 13619                                  ;
 13620                                  ;   Inputs:	DS:DX point to an FCB
 13621                                  ;   Outputs:	AL = error codes defined above
 13622                                  ;
 13623                                  ;----------------------------------------------------------------------------
 13624                                  
 13625                                  _$FCB_RANDOM_READ_BLOCK:
 13626                                  	;mov	AL,0Eh
 13627 00001C5A B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13628 00001C5C EB0E                    	JMP	short FCBIO	; 23/01/2024
 13629                                  
 13630                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13631                                  ;----------------------------------------------------------------------------
 13632                                  ;
 13633                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13634                                  ;	memory
 13635                                  ;
 13636                                  ;   Inputs:	DS:DX point to an FCB
 13637                                  ;   Outputs:	AL = error codes defined above
 13638                                  ;
 13639                                  ;----------------------------------------------------------------------------
 13640                                  
 13641                                  _$FCB_SEQ_READ:
 13642                                  	;mov	AL,4
 13643 00001C5E B004                    	MOV	AL,FCBREAD
 13644 00001C60 EB0A                    	JMP	short FCBIO	; 23/01/2024
 13645                                  
 13646                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13647                                  ;----------------------------------------------------------------------------
 13648                                  ;
 13649                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13650                                  ;	file
 13651                                  ;
 13652                                  ;   Inputs:	DS:DX point to an FCB
 13653                                  ;   Outputs:	AL = error codes defined above
 13654                                  ;
 13655                                  ;----------------------------------------------------------------------------
 13656                                  
 13657                                  _$FCB_SEQ_WRITE:
 13658 00001C62 B000                    	MOV	AL,0
 13659 00001C64 EB06                    	JMP	short FCBIO	; 23/01/2024
 13660                                  
 13661                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13662                                  ;----------------------------------------------------------------------------
 13663                                  ;
 13664                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13665                                  ;	record from it.
 13666                                  ;
 13667                                  ;   Inputs:	DS:DX point to an FCB
 13668                                  ;   Outputs:	AL = error codes defined above
 13669                                  ;
 13670                                  ;----------------------------------------------------------------------------
 13671                                  
 13672                                  _$FCB_RANDOM_READ:
 13673                                  	;mov	AL,6
 13674 00001C66 B006                    	MOV	AL,RANDOM+FCBREAD
 13675                                  	; 23/01/2024
 13676                                  	;jmp	FCBIO 		; single block
 13677 00001C68 EB02                    	jmp	short FCBIO
 13678                                  
 13679                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13680                                  ;----------------------------------------------------------------------------
 13681                                  ;
 13682                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13683                                  ;	a record to it.
 13684                                  ;
 13685                                  ;   Inputs:	DS:DX point to an FCB
 13686                                  ;   Outputs:	AL = error codes defined above
 13687                                  ;
 13688                                  ;----------------------------------------------------------------------------
 13689                                  
 13690                                  _$FCB_RANDOM_WRITE:
 13691                                  	;mov	AL,2
 13692 00001C6A B002                    	MOV	AL,RANDOM
 13693                                  	; 23/01/2024
 13694                                  	;;jmp	FCBIO
 13695                                  	;jmp	short FCBIO
 13696                                  
 13697                                  ;BREAK <FCBIO - do internal FCB I/O>
 13698                                  ;---------------------------------------------------------------------------
 13699                                  ;
 13700                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13701                                  ;
 13702                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13703                                  ;		DS:DX point to FCB
 13704                                  ;		CX may have count of number of records to xfer
 13705                                  ;   Outputs:	AL has error code
 13706                                  ;   Registers modified: all
 13707                                  ;---------------------------------------------------------------------------
 13708                                  
 13709                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13710                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13711                                  
 13712                                  	; 23/01/2024
 13713                                  	; DOSCODE:5B2Bh (MSDOS 6.22 MSDOS.SYS)
 13714                                  
 13715                                  	; 23/01/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 13716                                  	; DOSCODE:61C9h (PCDOS 7.1 IBMDOS.COM)
 13717                                  
 13718                                  FCBIO:
 13719                                  
 13720                                  FEOF	EQU	1
 13721                                  FTRIM	EQU	2
 13722                                  
 13723                                  %define	FCBErr	byte [bp-1]  ; byte
 13724                                  %define	cRec	word [bp-3]  ; word
 13725                                  ;%define RecPos	word [bp-7]  ; dword
 13726                                  %define RecPosL	word [bp-7]  ; word
 13727                                  %define RecPosH	word [bp-5]  ; word
 13728                                  %define	RecSize	word [bp-9]  ; word
 13729                                  ;%define bPos	word [bp-13] ; dword
 13730                                  %define bPosL	word [bp-13] ; word
 13731                                  %define bPosH	word [bp-11] ; word
 13732                                  %define cByte	word [bp-15] ; word
 13733                                  %define cResult word [bp-17] ; word
 13734                                  %define	cRecRes	word [bp-19] ; word
 13735                                  %define	FCBOp	byte [bp-20] ; byte
 13736                                  ; 23/01/2024
 13737                                  %define bPos bp-13
 13738                                  
 13739                                  	;Enter
 13740                                  
 13741 00001C6C 55                      	push	bp
 13742 00001C6D 89E5                    	mov	bp,sp
 13743 00001C6F 83EC14                  	sub	sp,20
 13744                                  	;mov	[bp-20],al
 13745 00001C72 8846EC                  	MOV	FCBOp,AL
 13746                                  	;mov	byte [bp-1],0
 13747 00001C75 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13748 00001C79 E8C0FF                  	call	GetExtended		;   FCB = GetExtended ();
 13749                                  	;test	byte [bp-20],8
 13750 00001C7C F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13751 00001C80 7503                    	JNZ	short GetPos
 13752 00001C82 B90100                  	MOV	CX,1			;	cRec = 1;
 13753                                  GetPos:
 13754                                  	;mov	[bp-3],cx
 13755 00001C85 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13756 00001C88 E885FF                  	call	GetExtent		;   RecPos = GetExtent ();
 13757 00001C8B E8BBFF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13758                                  	;mov	[bp-9],bx
 13759 00001C8E 895EF7                  	MOV	RecSize,BX
 13760                                  	;test	byte [bp-20],2
 13761 00001C91 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13762 00001C95 7403                    	JZ	short GetRec
 13763 00001C97 E868FF                  	call	GetRR			;	RecPos = GetRR ();
 13764                                  GetRec:
 13765                                  	;mov	[bp-7],ax
 13766 00001C9A 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13767                                  	;mov	[bp-5],dx
 13768 00001C9D 8956FB                  	MOV	RecPosH,DX
 13769 00001CA0 E87FFF                  	call	SetExtent		;   SetExtent (RecPos);
 13770                                  	;mov	ax,[bp-5]
 13771 00001CA3 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13772 00001CA6 F7E3                    	MUL	BX
 13773 00001CA8 89C7                    	MOV	DI,AX
 13774                                  	;mov	ax,[bp-7]
 13775 00001CAA 8B46F9                  	MOV	AX,RecPosL
 13776 00001CAD F7E3                    	MUL	BX
 13777 00001CAF 01FA                    	ADD	DX,DI
 13778                                  	;mov	[bp-13],ax
 13779 00001CB1 8946F3                  	MOV	bPosL,AX
 13780                                  	;mov	[bp-11],dx
 13781 00001CB4 8956F5                  	MOV	bPosH,DX
 13782                                  	;mov	ax,[bp-3]
 13783 00001CB7 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13784 00001CBA F7E3                    	MUL	BX
 13785                                  	;mov	[bp-15],ax
 13786 00001CBC 8946F1                  	MOV	cByte,AX
 13787                                  
 13788                                  ;hkn; 	SS override
 13789 00001CBF 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13790 00001CC4 83D200                  	ADC	DX,0
 13791 00001CC7 7419                    	JZ	short DoOper
 13792                                  	;mov	byte [bp-1],2
 13793 00001CC9 C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13794                                  
 13795                                  ;hkn; 	SS override
 13796 00001CCD 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13797 00001CD1 F7D8                    	NEG	AX
 13798 00001CD3 7501                    	JNZ	short DoDiv
 13799 00001CD5 48                      	DEC	AX
 13800                                  DoDiv:
 13801 00001CD6 31D2                    	XOR	DX,DX
 13802 00001CD8 F7F3                    	DIV	BX
 13803                                  	;mov	[bp-3],ax
 13804 00001CDA 8946FD                  	MOV	cRec,AX
 13805 00001CDD F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13806                                  	;mov	[bp-15],ax
 13807 00001CDF 8946F1                  	MOV	cByte,AX		;	}
 13808                                  DoOper:
 13809 00001CE2 31DB                    	XOR	BX,BX
 13810                                  	;mov	[bp-17],bx
 13811 00001CE4 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13812                                  	;cmp	[bp-15],bx
 13813 00001CE7 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13814 00001CEA 7506                    	JNZ	short DoGetExt
 13815                                  	;test	byte [bp-1],2
 13816 00001CEC F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13817                                  	;JZ	short DoGetExt
 13818                                  	;JMP	short SkipOp
 13819                                  	; 16/12/2022
 13820 00001CF0 7572                    	jnz	short SkipOp
 13821                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13822                                  	;JZ	short DoGetExt
 13823                                  	;JMP	short SkipOp
 13824                                  DoGetExt:
 13825 00001CF2 E8B6FE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13826 00001CF5 730F                    	JNC	short ContinueOp
 13827                                  FCBDeath:
 13828 00001CF7 E860E9                  	call	FCB_RET_ERR		; signal error, map for extended
 13829                                  	;mov	word [bp-19],0
 13830 00001CFA C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13831                                  	;mov	byte [bp-1],1
 13832 00001CFF C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13833 00001D03 E9EB00                  	JMP	FCBSave 		; bam!
 13834                                  ContinueOp:
 13835                                  	; 23/01/2024
 13836                                  	; (PCDOS 7.1 IBMDOS.COM)
 13837                                  	;
 13838                                  	;;mov	ax,[si+10h]
 13839                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ]
 13840                                  	;;mov	[es:di+11h],ax
 13841                                  	;MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13842                                  	;;mov	ax,[si+12h]
 13843                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13844                                  	;;mov	[es:di+13h],ax
 13845                                  	;MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13846                                  	;;;
 13847 00001D06 1E                      	push	ds
 13848 00001D07 C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 13849 00001D0A 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 13850 00001D0E 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 13851 00001D12 C546F3                  	lds	ax,[bPos] ; lds ax,[bp-13]
 13852 00001D15 8CDA                    	mov	dx,ds
 13853 00001D17 1F                      	pop	ds
 13854                                  	;;;
 13855                                  	;;mov	ax,[bp-13]
 13856                                  	;MOV	AX,bPosL
 13857                                  	;;mov	dx,[bp-11]
 13858                                  	;MOV	DX,bPosH
 13859                                  
 13860                                  	;mov	[es:di+15h],ax
 13861 00001D18 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13862                                  	;xchg	dx,[es:di+17h]
 13863 00001D1C 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13864 00001D20 52                      	PUSH	DX			; save away Open age.
 13865                                  	;mov	cx,[bp-15]
 13866 00001D21 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13867                                  
 13868                                  ;hkn; DOS_Read is in DOSCODE
 13869 00001D24 BF[4432]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13870                                  	;test	byte [bp-20],4
 13871 00001D27 F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13872 00001D2B 7503                    	JNZ	short DoContext
 13873                                  
 13874                                  ;hkn; DOS_Write is in DOSCODE
 13875 00001D2D BF[4534]                	MOV	DI,DOS_WRITE
 13876                                  DoContext:
 13877 00001D30 55                      	push	bp
 13878 00001D31 1E                      	push	ds
 13879 00001D32 56                      	push	si
 13880                                  
 13881                                  ;hkn; SS is DOSDATA
 13882 00001D33 16                      	push	ss
 13883 00001D34 1F                      	pop	ds
 13884                                  
 13885                                  ;; Fix for disk full
 13886 00001D35 FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE
 13887                                  	
 13888 00001D37 5E                      	pop	si
 13889 00001D38 1F                      	pop	ds
 13890 00001D39 5D                      	pop	bp
 13891 00001D3A 72BB                    	JC	short FCBDeath
 13892                                  	
 13893 00001D3C 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13894 00001D42 740A                    	JZ	short NODSKFULL
 13895 00001D44 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13896                                  
 13897                                  	; (MSDOS 5.0-6.22 MSDOS.SYS) ; 23/01/2024
 13898                                  	;mov	byte [bp-1],1 
 13899 00001D4A C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13900                                  
 13901                                  	; 23/01/2024
 13902                                  	; (PCDOS 7.1 IBMDOS.COM)
 13903                                  	;;mov	byte [bp-1],1 
 13904                                  	;MOV	FCBErr,FEOF		; set disk full flag
 13905                                  
 13906                                  NODSKFULL:
 13907                                  ;; Fix for disk full
 13908                                  	;mov	[bp-17],cx
 13909 00001D4E 894EEF                  	MOV	cResult,CX
 13910 00001D51 E827FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13911                                  	;pop	word [es:di+17h]	
 13912 00001D54 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13913                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)
 13914                                  
 13915                                  	; 23/01/2024
 13916                                  	; (PCDOS 7.1 IBMDOS.COM)
 13917                                  	;
 13918                                  	;;mov	ax,[es:di+11h]
 13919                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13920                                  	;;mov	[si+10h],ax
 13921                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 13922                                  	;;mov	ax,[es:di+13h]
 13923                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13924                                  	;;mov	[si+12h],ax
 13925                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13926                                  	;;;
 13927 00001D58 06                      	push	es
 13928 00001D59 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size]
 13929 00001D5D 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 13930 00001D60 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 13931 00001D63 07                      	pop	es
 13932                                  	;;;
 13933                                  					;	}
 13934                                  SkipOp:
 13935                                  	;mov	ax,[bp-17]
 13936 00001D64 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13937 00001D67 31D2                    	XOR	DX,DX
 13938                                  	;div	word [bp-9]
 13939 00001D69 F776F7                  	DIV	RecSize
 13940                                  	;mov	[bp-19],ax
 13941 00001D6C 8946ED                  	MOV	cRecRes,AX
 13942                                  	;add	[bp-7],ax
 13943 00001D6F 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13944                                  	;adc	word [bp-5],0
 13945 00001D72 8356FB00                	ADC	RecPosH,0
 13946                                  
 13947                                  ; If we have not gotten the expected number of records, we signal an EOF
 13948                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13949                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13950                                  ; do we.
 13951                                  
 13952                                  	;cmp	ax,[bp-3]
 13953 00001D76 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 13954 00001D79 7411                    	JZ	short TryBlank
 13955                                  	;test	byte [bp-20],4
 13956 00001D7B F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 13957 00001D7F 7507                    	JNZ	short SetEOF
 13958                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13959                                  	; MSDOS 3.3
 13960                                  	;;test	word [es:di+5],80h
 13961                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13962                                  	;JNZ	short TryBlank
 13963                                  	; MSDOS 5.0 & MSDOS 6.0
 13964                                  	;test	byte [es:di+5],80h
 13965 00001D81 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 13966 00001D86 7504                    	jnz	short TryBlank
 13967                                  
 13968                                  SetEOF:
 13969                                  	;mov	byte [bp-1],1
 13970 00001D88 C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 13971                                  TryBlank:				;
 13972 00001D8C 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 13973 00001D8E 7426                    	JZ	short SetExt
 13974                                  	;add	word [bp-7],1
 13975 00001D90 8346F901                	ADD	RecPosL,1		;	RecPos++;
 13976                                  	;adc	word [bp-5],0
 13977 00001D94 8356FB00                	ADC	RecPosH,0
 13978                                  	;test	byte [bp-20],4
 13979 00001D98 F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 13980 00001D9C 7418                    	JZ	short SetExt
 13981                                  	;inc	word [bp-19]
 13982 00001D9E FF46ED                  	INC	cRecRes 		;	cRecRes++;
 13983                                  	;mov	byte [bp-1],3
 13984 00001DA1 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 13985                                  	;mov	cx,[bp-9]
 13986 00001DA5 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 13987 00001DA8 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 13988 00001DAA 30C0                    	XOR	AL,AL
 13989                                  ;hkn; 	SS override
 13990 00001DAC 36C43E[2C03]            	les     di,[ss:DMAADD]
 13991                                  	;add	di,[bp-17]
 13992 00001DB1 037EEF                  	ADD	DI,cResult
 13993 00001DB4 F3AA                    	REP	STOSB			;   }	}
 13994                                  SetExt:
 13995                                  	;mov	dx,[bp-5]
 13996 00001DB6 8B56FB                  	MOV	DX,RecPosH
 13997                                  	;mov	ax,[bp-7]
 13998 00001DB9 8B46F9                  	MOV	AX,RecPosL
 13999                                  	;test	byte [bp-20],2
 14000 00001DBC F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 14001 00001DC0 7406                    	JZ	short DoSetExt
 14002                                  	;test	byte [bp-20],8
 14003 00001DC2 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 14004 00001DC6 7403                    	JZ	short TrySetRR
 14005                                  DoSetExt:
 14006 00001DC8 E857FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 14007                                  TrySetRR:
 14008                                  	;test	byte [bp-20],8
 14009 00001DCB F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14010 00001DCF 740F                    	JZ	short TryReturn
 14011                                  	;mov	[si+21h],ax
 14012 00001DD1 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 14013                                  	;mov	[si+23h],dl
 14014 00001DD4 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 14015                                  	;cmp	word [si+0Eh],64
 14016 00001DD7 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 14017 00001DDB 7303                    	JAE	short TryReturn
 14018                                  	;mov	[si+24h],dh
 14019 00001DDD 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 14020                                  TryReturn: 
 14021                                  	;test	byte [bp-20],4
 14022 00001DE0 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 14023 00001DE4 750B                    	JNZ	short FCBSave
 14024 00001DE6 1E                      	push	ds			;	FCB->FDate = date;
 14025 00001DE7 E801ED                  	call	DATE16			;	FCB->FTime = time;
 14026 00001DEA 1F                      	pop	ds
 14027                                  	;mov	[si+14h],ax
 14028 00001DEB 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 14029                                  	;mov	[si+16h],dx
 14030 00001DEE 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 14031                                  FCBSave: 
 14032                                  	;test	byte [bp-20],8
 14033 00001DF1 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14034 00001DF5 7409                    	jz	short DoReturn
 14035                                  	;mov	cx,[bp-19]
 14036 00001DF7 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 14037 00001DFA E888E6                  	call    Get_User_Stack
 14038                                  	;mov	[si+4],cx
 14039 00001DFD 894C04                  	MOV	[SI+user_env.user_CX],CX
 14040                                  DoReturn:
 14041                                  	;mov	al,[bp-1]
 14042 00001E00 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 14043                                  	;Leave	
 14044 00001E03 89EC                    	mov     sp,bp
 14045 00001E05 5D                      	pop     bp
 14046 00001E06 C3                      	retn
 14047                                  
 14048                                  ; 22/07/2018 - Retro DOS v3.0
 14049                                  
 14050                                  ;Break <$FCB_Open - open an old-style FCB>
 14051                                  ;---------------------------------------------------------------------------
 14052                                  ;
 14053                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 14054                                  ;	for us and asked to have the rest filled in.
 14055                                  ;
 14056                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14057                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14058                                  ;		FCB has the following fields filled in:
 14059                                  ;		    Time/Date Extent/NR Size
 14060                                  ;---------------------------------------------------------------------------
 14061                                  
 14062                                  _$FCB_OPEN:			; System call 15
 14063                                  
 14064 00001E07 B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 14065                                  
 14066                                  ;hkn; DOS_Open is in DOSCODE
 14067 00001E0A B9[FA2A]                	MOV	CX,DOS_OPEN
 14068                                  
 14069                                  ; The following is common code for Creation and openning of FCBs. AX is
 14070                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 14071                                  ; the FCB
 14072                                  
 14073                                  DoAccess:
 14074 00001E0D 1E                      	push	ds
 14075 00001E0E 52                      	push	dx
 14076 00001E0F 51                      	push	cx
 14077 00001E10 50                      	push	ax			; save FCB pointer away
 14078                                  
 14079                                  ;hkn; 	OpenBuf is in DOSDATA
 14080 00001E11 BF[BE03]                	MOV	DI,OPENBUF
 14081 00001E14 E8254C                  	call	TransFCB		; crunch the fcb
 14082 00001E17 58                      	pop	ax
 14083 00001E18 59                      	pop	cx
 14084 00001E19 5A                      	pop	dx
 14085 00001E1A 1F                      	pop	ds			; get fcb
 14086 00001E1B 7303                    	JNC	short FindFCB		; everything seems ok
 14087                                  FCBOpenErr:
 14088                                  	; AL has error code
 14089 00001E1D E93AE8                  	jmp	FCB_RET_ERR
 14090                                  FindFCB:
 14091 00001E20 E819FE                  	call	GetExtended		; DS:SI will point to FCB
 14092                                  
 14093                                  	; 17/05/2019 - Retro DOS v4.0
 14094                                  
 14095                                  	; MSDOS 3.3
 14096                                  	;call	LRUFCB
 14097                                  	;jc	short HardMessage
 14098                                  
 14099                                  	; MSDOS 6.0
 14100 00001E23 50                      	push	ax
 14101 00001E24 B001                    	mov	al,1			;indicate Open/Create operation
 14102 00001E26 E820FB                  	call	LRUFCB			; get a sft entry (no error)
 14103 00001E29 58                      	pop	ax
 14104 00001E2A 722A                    	jc	short HardMessage
 14105                                  	
 14106                                  	;mov	word [es:di+2],8000h
 14107 00001E2C 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 14108 00001E32 1E                      	push	ds
 14109 00001E33 56                      	push	si	
 14110 00001E34 53                      	push	bx			; save fcb pointer
 14111 00001E35 89CE                    	MOV	SI,CX
 14112                                  
 14113                                  ;hkn; SS is DOSDATA
 14114 00001E37 16                      	push	ss
 14115 00001E38 1F                      	pop	ds			    ; let DOS_Open see variables
 14116 00001E39 FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 14117 00001E3B 5B                      	pop	bx
 14118 00001E3C 5E                      	pop	si
 14119 00001E3D 1F                      	pop	ds			; get fcb
 14120                                  
 14121                                  ;hkn; SS override
 14122 00001E3E 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 14123 00001E43 7318                    	JNC	short FCBOK		; operation succeeded
 14124                                  failopen:
 14125 00001E45 50                      	PUSH	AX
 14126 00001E46 B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 14127 00001E48 E8DDFC                  	call	BlastSFT
 14128 00001E4B 58                      	POP	AX
 14129                                  	;cmp	ax,4
 14130 00001E4C 83F804                  	CMP	AX,error_too_many_open_files
 14131 00001E4F 7405                    	JZ	short HardMessage
 14132                                  	;cmp	ax,24h
 14133 00001E51 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 14134 00001E54 7505                    	jnz	short DeadFCB
 14135                                  HardMessage:
 14136 00001E56 50                      	PUSH	AX
 14137 00001E57 E887FD                  	call	FCBHardErr
 14138 00001E5A 58                      	POP	AX
 14139                                  DeadFCB:
 14140                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14141                                  	;jmp	FCB_RET_ERR
 14142 00001E5B EBC0                    	jmp	short FCBOpenErr
 14143                                  FCBOK:
 14144                                  	; MSDOS 6.0
 14145 00001E5D E8EFF3                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 14146 00001E60 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 14147 00001E62 E80354                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 14148 00001E65 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 14149                                  ;SR;
 14150                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 14151                                  ; LocalSFT variable to reflect this.
 14152                                  
 14153 00001E67 36893E[4410]            	mov	[ss:LocalSFT],di
 14154 00001E6C 368C06[4610]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 14155                                  ;;SR;
 14156                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 14157                                  ;;
 14158                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 14159                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 14160                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 14161                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 14162                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 14163                                  
 14164                                  FCBOK2:
 14165                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14166 00001E71 26FF05                  	inc	word [es:di]
 14167                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 14168 00001E74 E804FA                  	call	SaveFCBInfo
 14169                                  	; MSDOS 3.3
 14170                                  	;call	SetOpenAge
 14171                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14172                                  	;test	word [es:di+5],80h
 14173                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 14174 00001E77 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 14175 00001E7C 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 14176 00001E7E 8A04                    	MOV	AL,[SI]			; get drive byte
 14177 00001E80 E8444B                  	call	GETTHISDRV		; convert
 14178                                  	;INC	AL
 14179                                  	; 17/12/2022
 14180 00001E83 40                      	inc	ax
 14181 00001E84 8804                    	MOV	[SI],AL			; stash in good drive letter
 14182                                  
 14183                                  FCBNoDrive:
 14184                                  	;mov	word [si+0Eh],128
 14185 00001E86 C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 14186                                  
 14187                                  	; 23/01/2024
 14188                                  	; (PCDOS 7.1 IBMDOS.COM)
 14189                                  	;;;
 14190                                  	;;mov	ax,[es:di+0Dh]
 14191                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 14192                                  	;;mov	[si+16h],ax
 14193                                  	;MOV	[SI+SYS_FCB.FTIME],AX
 14194                                  	;;mov	ax,[es:di+0Fh]
 14195                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 14196                                  	;;mov	[si+14h],ax
 14197                                  	;MOV	[SI+SYS_FCB.FDATE],AX
 14198                                  	;;mov	ax,[es:di+11h]
 14199                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 14200                                  	;;mov	[si+10h],ax
 14201                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 14202                                  	;;mov	ax,[es:di+13h]
 14203                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 14204                                  	;;mov	[si+12h],ax
 14205                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 14206                                  	;
 14207 00001E8B 06                      	push	es
 14208                                  	;les	ax,[es:di+0Dh]
 14209 00001E8C 26C4450D                	les	ax,[es:di+SF_ENTRY.sf_time]
 14210                                  	;mov	[si+16h],ax
 14211 00001E90 894416                  	mov	[si+SYS_FCB.FTIME],ax	; set time
 14212                                  	;mov	[si+14h],es
 14213 00001E93 8C4414                  	mov	[si+SYS_FCB.FDATE],es	; set date
 14214 00001E96 07                      	pop	es
 14215 00001E97 06                      	push	es
 14216                                  	;les	ax,[es:di+11h]
 14217 00001E98 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size] ; set size
 14218                                  	;mov	[si+10h],ax
 14219 00001E9C 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 14220                                  	;mov	[si+12h],ax
 14221 00001E9F 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 14222 00001EA2 07                      	pop	es
 14223                                  	;;;
 14224                                  	
 14225 00001EA3 31C0                    	XOR	AX,AX			; convenient zero
 14226                                  	;mov	[si+0Ch],ax
 14227 00001EA5 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 14228                                  
 14229                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 14230                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 14231                                  
 14232                                  ;hkn; 	SS override
 14233 00001EA8 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 14234                                  	;mov	ah,[es:di+4]
 14235 00001EAD 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 14236                                  OpenScan:
 14237                                  	;cmp	al,[si+18h]
 14238 00001EB1 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 14239 00001EB4 7407                    	JZ	short SkipCheck
 14240 00001EB6 50                      	push	ax			; preserve count
 14241 00001EB7 E884FC                  	call	CheckFCB		; do they match
 14242 00001EBA 58                      	pop	ax			; get count back
 14243 00001EBB 7309                    	JNC	short OpenFound		; found a match!
 14244                                  SkipCheck:
 14245 00001EBD FEC0                    	INC	AL			; advance to next FCB
 14246 00001EBF 38E0                    	CMP	AL,AH			; table full?
 14247 00001EC1 75EE                    	JNZ	short OpenScan		; no, go for more
 14248                                  OpenDone:
 14249 00001EC3 30C0                    	xor	al,al			; return success
 14250 00001EC5 C3                      	retn
 14251                                  
 14252                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 14253                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 14254                                  ; Consider:
 14255                                  ;
 14256                                  ;   open (foo)	delete (foo) open (bar)
 14257                                  ;
 14258                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 14259                                  ; foo even though foo is no longer needed; this is due to the server closing
 14260                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 14261                                  ; If we were to CLOSE bar, the server would then close the only reference to
 14262                                  ; bar and subsequent I/O would be lost to the redirector.
 14263                                  ;
 14264                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 14265                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 14266                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 14267                                  ; around. This will allow us to access the same file through multiple network
 14268                                  ; connections and NOT prematurely terminate when the ref count on one
 14269                                  ; connection goes to zero.
 14270                                  
 14271                                  OpenFound:
 14272                                  	;mov	[si+18h],al
 14273 00001EC6 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 14274 00001EC9 26FF05                  	inc	word [es:di]
 14275                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14276                                  					; remember this new invocation
 14277                                  	; 24/01/2024
 14278 00001ECC 16                      	push	ss
 14279 00001ECD 1F                      	pop	ds
 14280                                  	
 14281                                  	;MOV	AX,[SS:FCBLRU]		; update LRU counts
 14282 00001ECE A1[1000]                	mov	ax,[FCBLRU] ; 24/01/2024
 14283                                  	;mov	[es:di+15h],ax
 14284 00001ED1 26894515                	MOV	[ES:DI+sf_LRU],AX
 14285                                  ;
 14286                                  ; We have an FCB sft that is now of no use. We release sharing info and then
 14287                                  ; blast it to prevent other reuse.
 14288                                  ;
 14289                                  	;push	ss
 14290                                  	;pop	ds
 14291                                  
 14292 00001ED5 C43E[9E05]              	LES	DI,[THISSFT]
 14293 00001ED9 26FF0D                  	dec	word [es:di]
 14294                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14295                                  					; free the newly allocated SFT
 14296 00001EDC E8C153                  	call	ShareEnd
 14297 00001EDF B043                    	MOV	AL,'C'	 ; 43h
 14298 00001EE1 E844FC                  	call	BlastSFT
 14299 00001EE4 EBDD                    	JMP	short OpenDone
 14300                                  
 14301                                  ;BREAK	<$FCB_Create - create a new directory entry>
 14302                                  ;----------------------------------------------------------------------------
 14303                                  ;
 14304                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 14305                                  ;	FCB for us and asked to have the rest filled in.
 14306                                  ;
 14307                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14308                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14309                                  ;		FCB has the following fields filled in:
 14310                                  ;		    Time/Date Extent/NR Size
 14311                                  ;----------------------------------------------------------------------------
 14312                                  
 14313                                  _$FCB_CREATE:		; System call 22
 14314                                  
 14315                                  ;hkn; DOS_Create is in DOSCODE
 14316 00001EE6 B9[D429]                	MOV	CX,DOS_CREATE		; routine to call
 14317 00001EE9 31C0                    	XOR	AX,AX			; attributes to create
 14318 00001EEB E84EFD                  	call	GetExtended		; get extended FCB
 14319 00001EEE 7403                    	JZ	short DoAccessJ		; not an extended FCB
 14320 00001EF0 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 14321                                  DoAccessJ:
 14322 00001EF3 E917FF                  	JMP	DoAccess		; do dirty work
 14323                                  
 14324                                  ;============================================================================
 14325                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 14326                                  ;============================================================================
 14327                                  ; 22/07/2018 - Retro DOS v3.0
 14328                                  ; 17/05/2019 - Retro DOS v4.0
 14329                                  
 14330                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 14331                                  
 14332                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14333                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 14334                                  
 14335                                  ;**	Search.asm
 14336                                  ;----------------------------------------------------------------------------
 14337                                  ;	Directory search system calls.
 14338                                  ;	These will be passed direct text of the pathname from the user. 
 14339                                  ;	They will need to be passed through the macro expander prior to
 14340                                  ;	being sent through the low-level stuff. 
 14341                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 14342                                  ;
 14343                                  ;	$Dir_Search_First	  written
 14344                                  ;	$Dir_Search_Next	  written
 14345                                  ;	$Find_First	  written
 14346                                  ;	$Find_Next		  written
 14347                                  ;	PackName		  written
 14348                                  ;
 14349                                  ;	Modification history:
 14350                                  ;
 14351                                  ;	  Created: ARR 4 April 1983
 14352                                  
 14353                                  ;----------------------------------------------------------------------------
 14354                                  ; Procedure Name : $DIR_SEARCH_FIRST
 14355                                  ;
 14356                                  ; Inputs:
 14357                                  ;	DS:DX Points to unopenned FCB
 14358                                  ; Function:
 14359                                  ;	Directory is searched for first matching entry and the directory
 14360                                  ;	entry is loaded at the disk transfer address
 14361                                  ; Returns:
 14362                                  ;	AL = -1 if no entries matched, otherwise 0
 14363                                  ;----------------------------------------------------------------------------
 14364                                  
 14365                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 14366                                  
 14367                                  	; 24/01/2024
 14368                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DCBh
 14369                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DDFh
 14370                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:647Bh
 14371                                  
 14372                                  _$DIR_SEARCH_FIRST:
 14373 00001EF6 368916[A605]            	MOV	[SS:THISFCB],DX
 14374 00001EFB 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14375 00001F00 89D6                    	MOV	SI,DX
 14376 00001F02 803CFF                  	CMP	BYTE [SI],0FFH
 14377 00001F05 7503                    	JNZ	short NORMFCB4
 14378 00001F07 83C607                  	ADD	SI,7			; Point to drive select byte
 14379                                  NORMFCB4:
 14380 00001F0A FF34                    	push	word [SI]		; Save original drive byte for later
 14381                                  
 14382 00001F0C 16                      	push	ss
 14383 00001F0D 07                      	pop	es			; get es to address DOSGroup
 14384                                  
 14385 00001F0E BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14386 00001F11 E8284B                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14387 00001F14 7304                    	JNC	short SearchIt		; no error, go and look
 14388 00001F16 5B                      	pop	bx			; Clean stack
 14389                                  
 14390                                  ; Error code is in AX
 14391                                  
 14392                                  	; 09/11/2022
 14393                                  dcf_errj:
 14394 00001F17 E940E7                  	jmp	FCB_RET_ERR		; error
 14395                                  
 14396                                  SearchIt:
 14397 00001F1A 16                      	push	ss
 14398 00001F1B 1F                      	pop	ds			; get ready for search
 14399                                  	;push	word [DMAADD]
 14400                                  	;push	word [DMAADD+2]
 14401                                  	; 24/01/2024
 14402 00001F1C C43E[2C03]              	les	di,[DMAADD]
 14403 00001F20 57                      	push	di
 14404 00001F21 06                      	push	es
 14405 00001F22 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14406 00001F28 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14407                                  	; MSDOS 3.3
 14408                                  	;call	DOS_SEARCH_FIRST
 14409                                  	; MSDOS 6.0
 14410 00001F2C E8930D                  	call	GET_FAST_SEARCH		; search
 14411 00001F2F 8F06[2E03]              	pop	word [DMAADD+2]
 14412 00001F33 8F06[2C03]              	pop	word [DMAADD]
 14413 00001F37 735C                    	JNC	short SearchSet		; no error, transfer info
 14414 00001F39 5B                      	pop	bx			; Clean stack
 14415                                  
 14416                                  ; Error code is in AX
 14417                                  
 14418                                  	; 09/11/2022
 14419                                  	;jmp	FCB_RET_ERR
 14420 00001F3A EBDB                    	jmp	short dcf_errj
 14421                                  
 14422                                  ;----------------------------------------------------------------------------
 14423                                  ;
 14424                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14425                                  ;
 14426                                  ; Inputs:
 14427                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14428                                  ; Function:
 14429                                  ;	Directory is searched for the next matching entry and the directory
 14430                                  ;	entry is loaded at the disk transfer address
 14431                                  ; Returns:
 14432                                  ;	AL = -1 if no entries matched, otherwise 0
 14433                                  ;----------------------------------------------------------------------------
 14434                                  
 14435                                  	; 24/01/2024
 14436                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5E5Fh
 14437                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5E73h
 14438                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6517h
 14439                                  
 14440                                  _$DIR_SEARCH_NEXT:
 14441 00001F3C 368916[A605]            	MOV	[SS:THISFCB],DX
 14442 00001F41 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14443 00001F46 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14444 00001F4C 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14445                                  
 14446 00001F52 16                      	push	ss
 14447 00001F53 07                      	pop	es
 14448                                  
 14449 00001F54 BF[BE04]                	MOV	DI,SEARCHBUF
 14450                                  
 14451 00001F57 89D6                    	MOV	SI,DX
 14452 00001F59 803CFF                  	CMP	BYTE [SI],0FFh
 14453 00001F5C 750D                    	JNZ	short NORMFCB6
 14454 00001F5E 83C606                  	ADD	SI,6
 14455 00001F61 AC                      	LODSB
 14456                                  
 14457 00001F62 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14458 00001F66 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14459                                  NORMFCB6:
 14460 00001F6B AC                      	LODSB				; Get original user drive byte
 14461 00001F6C 50                      	push	ax			; Put it on stack
 14462 00001F6D 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14463 00001F70 AA                      	STOSB				; Put in correct place
 14464 00001F71 B90A00                  	MOV	CX,20/2
 14465 00001F74 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14466                                  
 14467 00001F76 16                      	push	ss
 14468 00001F77 1F                      	pop	ds
 14469                                  
 14470                                  	;push	word [DMAADD]
 14471                                  	;push	word [DMAADD+2]
 14472                                  	; 24/01/2024
 14473 00001F78 C43E[2C03]              	les	di,[DMAADD]
 14474 00001F7C 57                      	push	di
 14475 00001F7D 06                      	push	es
 14476 00001F7E C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14477 00001F84 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14478 00001F88 E8330E                  	call	DOS_SEARCH_NEXT 	; Find it
 14479 00001F8B 8F06[2E03]              	pop	word [DMAADD+2]
 14480 00001F8F 8F06[2C03]              	pop	word [DMAADD]
 14481 00001F93 724A                    	JC	short SearchNoMore
 14482                                  	; 24/01/2024
 14483                                  	;JMP	SearchSet		; Ok set return
 14484                                  
 14485                                  ;;;	; 24/01/2024
 14486                                  
 14487                                  ; The search was successful (or the search-next). We store the information
 14488                                  ; into the user's FCB for continuation.
 14489                                  
 14490                                  SearchSet:
 14491 00001F95 BE[BE04]                	MOV	SI,SEARCHBUF
 14492 00001F98 C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14493 00001F9C F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14494 00001FA1 7403                    	JZ	short NORMFCB1
 14495 00001FA3 83C707                  	ADD	DI,7			; Point past the extension
 14496                                  NORMFCB1:
 14497 00001FA6 5B                      	pop	bx			; Get original drive byte
 14498 00001FA7 08DB                    	OR	BL,BL
 14499 00001FA9 7506                    	JNZ	short SearchDrv
 14500 00001FAB 8A1E[3603]              	MOV	BL,[CURDRV]
 14501 00001FAF FEC3                    	INC	BL
 14502                                  SearchDrv:
 14503 00001FB1 AC                      	LODSB				; Get correct search contin drive byte
 14504 00001FB2 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14505 00001FB4 47                      	INC	DI
 14506                                  	;STOSB				; Store the correct "user" drive byte
 14507                                  					;  at the start of the search info
 14508 00001FB5 B90A00                  	MOV	CX,20/2
 14509 00001FB8 F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14510 00001FBA 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14511                                  					;   byte to AL
 14512 00001FBC AA                      	STOSB				; Search contin drive byte at end of
 14513                                  					;   contin info
 14514 00001FBD C43E[2C03]              	LES	DI,[DMAADD]
 14515 00001FC1 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14516 00001FC6 740D                    	JZ	short NORMFCB2
 14517 00001FC8 B0FF                    	MOV	AL,0FFh
 14518 00001FCA AA                      	STOSB
 14519 00001FCB FEC0                    	INC	AL
 14520                                  	;MOV	CX,5
 14521                                  	; 17/12/2022
 14522 00001FCD B105                    	mov	cl,5
 14523 00001FCF F3AA                    	REP	STOSB
 14524 00001FD1 A0[6D05]                	MOV	AL,[SATTRIB]
 14525 00001FD4 AA                      	STOSB
 14526                                  NORMFCB2:
 14527 00001FD5 88D8                    	MOV	AL,BL			; User Drive byte
 14528 00001FD7 AA                      	STOSB
 14529                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14530                                  	; 17/12/2022
 14531 00001FD8 B110                    	mov	cl,16
 14532 00001FDA F3A5                    	REP	MOVSW
 14533 00001FDC E978E6                  	jmp	FCB_RET_OK
 14534                                  ;;;
 14535                                  
 14536                                  SearchNoMore:
 14537 00001FDF C43E[A605]              	LES	DI,[THISFCB]
 14538 00001FE3 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14539 00001FE8 7403                    	JZ	short NORMFCB8
 14540 00001FEA 83C707                  	ADD	DI,7			; Point past the extension
 14541                                  NORMFCB8:
 14542 00001FED 5B                      	pop	bx			; Get original drive byte
 14543 00001FEE 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14544                                  					;  at the right spot
 14545                                  ; error code is in AX
 14546                                  
 14547 00001FF1 E966E6                  	jmp	FCB_RET_ERR
 14548                                  
 14549                                  ; 17/05/2019 - Retro DOS v4.0
 14550                                  
 14551                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14552                                  
 14553                                  ;---------------------------------------------------------------------------
 14554                                  ;
 14555                                  ;   Procedure Name : $FIND_FIRST
 14556                                  ; 
 14557                                  ;   Assembler usage:
 14558                                  ;	    MOV AH, FindFirst
 14559                                  ;	    LDS DX, name
 14560                                  ;	    MOV CX, attr
 14561                                  ;	    INT 21h
 14562                                  ;	; DMA address has datablock
 14563                                  ;
 14564                                  ;   Error Returns:
 14565                                  ;	    AX = error_path_not_found
 14566                                  ;	       = error_no_more_files
 14567                                  ;---------------------------------------------------------------------------
 14568                                  
 14569                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14570                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14571                                  
 14572                                  	; 24/01/2024
 14573                                  	; DOSCODE:5EE6h (MSDOS 6.22, MSDOS.SYS)
 14574                                  
 14575                                  _$FIND_FIRST:
 14576 00001FF4 89D6                    	MOV	SI,DX			; get name in appropriate place
 14577 00001FF6 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14578                                  
 14579 00001FFB BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14580                                  
 14581 00001FFE E8A14A                  	call	TransPathSet		; convert the path
 14582 00002001 7305                    	JNC	short Find_it 		; no error, go and look
 14583                                  FindError:
 14584                                  	;mov	al,3
 14585 00002003 B003                    	mov	al, error_path_not_found ; error and map into one.
 14586                                  	; 09/11/2022
 14587                                  FF_errj:
 14588 00002005 E93CE6                  	jmp	SYS_RET_ERR
 14589                                  Find_it:
 14590 00002008 16                      	push	ss
 14591 00002009 1F                      	pop	ds
 14592                                  
 14593                                  	;push	word [DMAADD]
 14594                                  	;push	word [DMAADD+2]
 14595                                  	; 24/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14596 0000200A C43E[2C03]              	les	di,[DMAADD]
 14597 0000200E 57                      	push	di
 14598 0000200F 06                      	push	es
 14599 00002010 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14600 00002016 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14601                                  	; MSDOS 3.3
 14602                                  	;call	DOS_SEARCH_FIRST
 14603                                  	; MSDOS 6.0
 14604 0000201A E8A50C                  	call	GET_FAST_SEARCH 	; search
 14605 0000201D 8F06[2E03]              	pop	word [DMAADD+2]
 14606 00002021 8F06[2C03]              	pop	word [DMAADD]
 14607                                  	
 14608                                  	; 16/12/2022
 14609                                  	;JNC	short FindSet 		; no error, transfer info
 14610 00002025 72DE                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14611                                  	;
 14612                                  	;jmp	SYS_RET_ERR
 14613                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14614                                  ;FFF_errj:
 14615                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14616                                  
 14617                                  FindSet:
 14618 00002027 BE[BE04]                	MOV	SI,SEARCHBUF
 14619 0000202A C43E[2C03]              	LES	DI,[DMAADD]
 14620 0000202E B91500                  	MOV	CX,21
 14621 00002031 F3A4                    	REP	MOVSB
 14622 00002033 56                      	PUSH	SI			; Save pointer to start of entry
 14623                                  	;mov	al,[si+0Bh]
 14624 00002034 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14625 00002037 AA                      	STOSB
 14626                                  	;add	si,16h ; 22
 14627 00002038 83C616                  	ADD	SI,dir_entry.dir_time
 14628 0000203B A5                      	MOVSW				; dir_time
 14629 0000203C A5                      	MOVSW				; dir_date
 14630 0000203D 46                      	INC	SI
 14631 0000203E 46                      	INC	SI			; Skip dir_first
 14632 0000203F A5                      	MOVSW				; dir_size (2 words)
 14633 00002040 A5                      	MOVSW
 14634 00002041 5E                      	POP	SI			; Point back to dir_name
 14635 00002042 E83300                   	CALL	PackName
 14636 00002045 E9F3E5                  	jmp	SYS_RET_OK		; bye with no errors
 14637                                  
 14638                                  ;---------------------------------------------------------------------------
 14639                                  ;
 14640                                  ;   Procedure Name : $FIND_NEXT
 14641                                  ;
 14642                                  ;   Assembler usage:
 14643                                  ;	; dma points at area returned by find_first
 14644                                  ;	    MOV AH, findnext
 14645                                  ;	    INT 21h
 14646                                  ;	; next entry is at dma
 14647                                  ;
 14648                                  ;   Error Returns:
 14649                                  ;	    AX = error_no_more_files
 14650                                  ;---------------------------------------------------------------------------
 14651                                  
 14652                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14653                                  
 14654                                  	; 24/01/2024
 14655                                  	; DOSCODE:5F3Eh (MSDOS 6.22, MSDOS.SYS)
 14656                                  
 14657                                  _$FIND_NEXT:
 14658 00002048 16                      	push	ss
 14659 00002049 07                      	pop	es
 14660                                  
 14661 0000204A BF[BE04]                	MOV	DI,SEARCHBUF
 14662                                  
 14663 0000204D 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14664                                  
 14665 00002052 B91500                  	MOV	CX,21
 14666 00002055 F3A4                    	REP	MOVSB			; Put the search continuation info
 14667                                  					;  in the right place
 14668 00002057 16                      	push	ss
 14669 00002058 1F                      	pop	ds			; get ready for search
 14670                                  	
 14671                                  	;push	word [DMAADD]
 14672                                  	;push	word [DMAADD+2]
 14673                                  	; 24/01/2024
 14674 00002059 C43E[2C03]              	les	di,[DMAADD]
 14675 0000205D 57                      	push	di
 14676 0000205E 06                      	push	es
 14677 0000205F C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14678 00002065 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14679 00002069 E8520D                  	call	DOS_SEARCH_NEXT 	; Find it
 14680 0000206C 8F06[2E03]              	pop	word [DMAADD+2]
 14681 00002070 8F06[2C03]              	pop	word [DMAADD]
 14682 00002074 73B1                    	JNC	short FindSet 		; No error, set info
 14683                                  	;jmp	SYS_RET_ERR
 14684                                  	; 16/12/2022
 14685 00002076 EB8D                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14686                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14687                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14688                                  
 14689                                  ;---------------------------------------------------------------------------
 14690                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14691                                  ;
 14692                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14693                                  ;	the ASCIZ format.
 14694                                  ;
 14695                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14696                                  ;		(ES:DI) = destination area (13 bytes)
 14697                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14698                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14699                                  ;---------------------------------------------------------------------------
 14700                                  
 14701                                  	; 25/01/2024 - Retro DOS v4.1
 14702                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5F5Ch
 14703                                  
 14704                                  PackName:
 14705                                  ;	Move over 8 characters to cover the name component, then trim it's
 14706                                  ;	trailing blanks.
 14707                                  
 14708                                  	;MOV	CX,8			; Pack the name
 14709                                  	;REP	MOVSB			; Move all of it
 14710                                  	; 25/01/2024
 14711 00002078 B90400                  	mov	cx,4
 14712 0000207B F3A5                    	rep	movsw
 14713                                  main_kill_tail:
 14714 0000207D 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14715 00002082 7507                    	JNZ	short find_check_dot
 14716 00002084 4F                      	DEC	DI			; Back up over trailing space
 14717 00002085 41                      	INC	CX
 14718 00002086 83F908                  	CMP	CX,8
 14719 00002089 72F2                    	JB	short main_kill_tail
 14720                                  find_check_dot:
 14721                                  	;CMP	WORD [SI],(" " << 8) | " "
 14722 0000208B 813C2020                	cmp     word [si],2020h 
 14723 0000208F 7506                    	JNZ	short got_ext 		; Some chars in extension
 14724 00002091 807C0220                	CMP	BYTE [SI+2]," "
 14725 00002095 740F                    	JZ	short find_done		; No extension
 14726                                  got_ext:
 14727 00002097 B02E                    	MOV	AL,"."	; 2Eh
 14728 00002099 AA                      	STOSB
 14729                                  	;MOV	CX,3
 14730                                  	;; 18/12/2022
 14731                                  	;;mov	cl,3
 14732                                  	;;REP	MOVSB
 14733                                  	;movsb
 14734                                  	;movsb
 14735                                  	;movsb
 14736                                  	; 25/01/2024
 14737 0000209A A5                      	movsw
 14738 0000209B A4                      	movsb
 14739                                  ext_kill_tail:
 14740 0000209C 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14741 000020A1 7503                    	JNZ	short find_done
 14742 000020A3 4F                      	DEC	DI			; Back up over trailing space
 14743 000020A4 EBF6                    	JMP	short ext_kill_tail
 14744                                  find_done:
 14745 000020A6 31C0                    	XOR	AX,AX
 14746 000020A8 AA                      	STOSB				; NUL terminate
 14747 000020A9 C3                      	retn
 14748                                  
 14749                                  ;---------------------------------------------------------------------------
 14750                                  
 14751                                  ; 24/01/2024
 14752                                  %if 0
 14753                                  	; 17/05/2019 - Retro DOS v4.0
 14754                                  GET_FAST_SEARCH:
 14755                                  	; 22/07/2018
 14756                                  	; MSDOS 6.0
 14757                                  	; 17/12/2022
 14758                                  	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14759                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14760                                  					;FO.trigger fastopen ;AN000;
 14761                                  	;call	DOS_SEARCH_FIRST
 14762                                  	;retn
 14763                                  	; 17/12/2022
 14764                                  	jmp	DOS_SEARCH_FIRST
 14765                                  %endif
 14766                                  
 14767                                  ;============================================================================
 14768                                  ; PATH.ASM, MSDOS 6.0, 1991
 14769                                  ;============================================================================
 14770                                  ; 06/08/2018 - Retro DOS v3.0
 14771                                  ; 17/05/2019 - Retro DOS v4.0
 14772                                  
 14773                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14774                                  
 14775                                  ;**	Directory related system calls. These will be passed direct text of the
 14776                                  ;	pathname from the user. They will need to be passed through the macro
 14777                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14778                                  ;	defined in DISPATCH. The system calls are:
 14779                                  ;
 14780                                  ;	$CURRENT_DIR  Written
 14781                                  ;	$RMDIR	  Written
 14782                                  ;	$CHDIR	  Written
 14783                                  ;	$MKDIR	  Written
 14784                                  ;
 14785                                  ;
 14786                                  ;	Modification history:
 14787                                  ;
 14788                                  ;	    Created: ARR 4 April 1983
 14789                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14790                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14791                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14792                                  ;				    current directory.
 14793                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14794                                  
 14795                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14796                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14797                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14798                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14799                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14800                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14801                                  ;	I_Need	cMeta,BYTE
 14802                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14803                                  
 14804                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14805                                  ;----------------------------------------------------------------------------
 14806                                  ;
 14807                                  ;   Procedure Name : $CURRENT_DIR
 14808                                  ;
 14809                                  ;   Assembler usage:
 14810                                  ;		LDS	SI,area
 14811                                  ;		MOV	DL,drive
 14812                                  ;		INT	21h
 14813                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14814                                  ;	    ; current directory.
 14815                                  ;   Error returns:
 14816                                  ;	    AX = error_invalid_drive
 14817                                  ;
 14818                                  ;----------------------------------------------------------------------------
 14819                                  
 14820                                  	; 06/08/2018 - Retro DOS v3.0
 14821                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14822                                  
 14823                                  	; 25/01/2024 - Retro DOS v4.1
 14824                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5F9Ch
 14825                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5FB0h
 14826                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6664h
 14827                                  
 14828                                  _$CURRENT_DIR:
 14829 000020AA E84BF2                  	call	ECritDisk
 14830 000020AD 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14831 000020AF E8F948                  	call	GetVisDrv		; grab it
 14832 000020B2 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14833                                  CurdirErr:
 14834 000020B4 E85CF2                  	call	LCritDisk
 14835                                  
 14836                                  	; MSDOS 3.3
 14837                                  	;mov	al,0Fh
 14838                                  	
 14839                                  	; MSDOS 6.0
 14840 000020B7 1E                      	push	ds
 14841 000020B8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14842 000020BD A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14843 000020C0 1F                      	pop	ds
 14844                                  
 14845                                  curdir_errj:
 14846 000020C1 E980E5                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14847                                  
 14848                                  CurrentValidate:
 14849 000020C4 1E                      	push	ds			; save destination
 14850 000020C5 56                      	push	si
 14851                                  	
 14852                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14853                                  	
 14854                                  	; MSDOS 6.0
 14855 000020C6 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14856                                  	; 25/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14857 000020CB C606[4C03]00            	mov	byte [NoSetDir],0 ; *
 14858                                  	
 14859                                  	; 25/01/2024
 14860                                  	;lds     si,[THISCDS]
 14861                                  
 14862                                  ; 16/12/2022
 14863                                  %if 0
 14864                                  	; 09/11/2022 (following test instruction is nonsense!)
 14865                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14866                                  
 14867                                  	;test	word [si+43h],8000h
 14868                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14869                                  	;jnz	short $+2  ; 09/11/2022	
 14870                                  	jnz	short DoCheck
 14871                                  %endif
 14872                                  
 14873                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14874                                  ; media check.
 14875                                  ;	CMP	word [SI+curdir.ID],0
 14876                                  ;	JZ	short GetDst
 14877                                  DoCheck:
 14878                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14879                                  
 14880                                  	; 25/01/2024
 14881                                  	; MSDOS 6.0
 14882                                  	;push	ds
 14883                                  	;mov	ds,[cs:DosDSeg]
 14884                                  	;mov	byte [NoSetDir],0 ; *
 14885                                  	;pop	ds
 14886                                  
 14887 000020D0 BF[BE03]                	MOV	DI,OPENBUF
 14888 000020D3 E8AA20                  	call	ValidateCDS		; output is ES:DI -> CDS
 14889                                  
 14890 000020D6 06                      	push	es	 		; swap source and destination
 14891 000020D7 57                      	push	di
 14892 000020D8 5E                      	pop	si
 14893 000020D9 1F                      	pop	ds
 14894                                  GetDst:
 14895 000020DA 5F                      	pop	di
 14896 000020DB 07                      	pop	es			; get real destination
 14897 000020DC 72D6                    	JC	short CurdirErr
 14898                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14899                                  	;
 14900                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14901                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14902                                  	; 16/12/2022
 14903                                  	;add	si,0  ; add si,curdir.text
 14904                                  	;
 14905                                  	;add	si,[si+4Fh] ; 17/05/2019
 14906 000020DE 03744F                  	ADD	SI,[SI+curdir.end]
 14907 000020E1 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14908 000020E4 7501                    	JNZ	short CurrentCopy
 14909 000020E6 46                      	INC	SI
 14910                                  CurrentCopy:
 14911                                  ;	call	FStrCpy
 14912                                  ;; 10/29/86 E5 char
 14913 000020E7 50                      	PUSH	AX
 14914 000020E8 AC                      	LODSB				; get char
 14915 000020E9 08C0                    	OR	AL,AL
 14916 000020EB 7413                    	JZ	short FOK
 14917 000020ED 3C05                    	CMP	AL,05H
 14918 000020EF 740D                    	JZ	short FCHANGE
 14919 000020F1 EB01                    	JMP	short FFF
 14920                                  FCPYNEXT:
 14921 000020F3 AC                      	LODSB				; get char
 14922                                  FFF:
 14923 000020F4 3C5C                    	CMP	AL,'\'			; beginning of directory
 14924 000020F6 7508                    	JNZ	short FOK		; no
 14925 000020F8 AA                      	STOSB				; put into user's buffer
 14926 000020F9 AC                      	LODSB				; 1st char of dir is 05?
 14927 000020FA 3C05                    	CMP	AL,05H
 14928 000020FC 7502                    	JNZ	short FOK		; no
 14929                                  FCHANGE:
 14930 000020FE B0E5                    	MOV	AL,0E5H			; make it E5
 14931                                  FOK:
 14932 00002100 AA                      	STOSB				; put into user's buffer
 14933 00002101 08C0                    	OR	AL,AL			; final char
 14934 00002103 75EE                    	JNZ	short FCPYNEXT		; no
 14935 00002105 58                      	POP	AX
 14936                                  
 14937                                  ;; 10/29/86 E5 char
 14938 00002106 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14939 00002108 E808F2                  	call	LCritDisk
 14940 0000210B E92DE5                  	jmp	SYS_RET_OK		; no more, bye!
 14941                                  
 14942                                  ; 17/05/2019 - Retro DOS v4.0
 14943                                  
 14944                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14945                                  
 14946                                  ;BREAK <$RmDir -- Remove a directory>
 14947                                  ;----------------------------------------------------------------------------
 14948                                  ;
 14949                                  ; Procedure Name : $RmDir
 14950                                  ;
 14951                                  ; Inputs:
 14952                                  ;	DS:DX Points to asciz name
 14953                                  ; Function:
 14954                                  ;	Delete directory if empty
 14955                                  ; Returns:
 14956                                  ;	STD XENIX Return
 14957                                  ;	AX = error_path_not_found If path bad
 14958                                  ;	AX = error_access_denied If
 14959                                  ;		Directory not empty
 14960                                  ;		Path not directory
 14961                                  ;		Root directory specified
 14962                                  ;		Directory malformed (. and .. not first two entries)
 14963                                  ;		User tries to delete a current directory
 14964                                  ;	AX = error_current_directory
 14965                                  ;
 14966                                  ;----------------------------------------------------------------------------
 14967                                  
 14968                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14969                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 14970                                  
 14971                                  _$RMDIR:
 14972 0000210E 52                      	push	dx			; Save ptr to name
 14973 0000210F 1E                      	push	ds
 14974 00002110 89D6                    	mov	si,dx			; Load ptr into si
 14975 00002112 BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 14976 00002115 57                      	push	di
 14977 00002116 E89149                  	call	TransPathNoSet		; Translate the name
 14978 00002119 5F                      	pop	di			; di = ptr to buf for trans name
 14979 0000211A 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 14980 0000211C 1F                      	pop	ds
 14981 0000211D 5A                      	pop	dx			; Restore the name
 14982                                  	;mov	al,3
 14983 0000211E B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 14984                                  	; 16/12/2022
 14985                                  rmdir_errj: ; 10/08/2018
 14986                                  chdir_errj:
 14987 00002120 EB9F                    	jmp	short curdir_errj
 14988                                  	;jmp	SYS_RET_ERR
 14989                                  rmlset:
 14990 00002122 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 14991 00002128 7512                    	Jnz	short rmerr		;	return (-1);
 14992 0000212A 16                      	push	ss
 14993 0000212B 07                      	pop	es
 14994 0000212C 30C0                    	xor	al,al			; al = 0 , ie drive a:
 14995                                  rmloop: 
 14996 0000212E E8EB48                  	call	GetCDSFromDrv		; Get curdir for drive in al
 14997 00002131 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 14998 00002133 E866F0                  	call	StrCmp			; Are the 2 paths the same?
 14999 00002136 7404                    	jz	short rmerr		; Yes, report error.
 15000 00002138 FEC0                    	inc	al			; No, inc al to next drive number
 15001 0000213A EBF2                    	jmp	short rmloop		; Go check next drive.
 15002                                  rmerr:
 15003 0000213C 1F                      	pop	ds
 15004 0000213D 5A                      	pop	dx			; Restore the name
 15005                                  	;mov	al,10h
 15006 0000213E B010                    	mov	al,error_current_directory ; error
 15007                                  	; 16/12/2022
 15008                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15009                                  ;chdir_errj:
 15010 00002140 EBDE                    	jmp	short rmdir_errj
 15011                                  rmcont:
 15012 00002142 1F                      	pop	ds
 15013 00002143 5A                      	pop	dx			; Restore the name
 15014 00002144 BE[6D31]                	MOV	SI,DOS_RMDIR
 15015 00002147 EB7C                    	JMP	DoDirCall
 15016                                  
 15017                                  ; 17/05/2019 - Retro DOS v4.0
 15018                                  
 15019                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 15020                                  
 15021                                  ;BREAK <$ChDir -- Change current directory on a drive>
 15022                                  ;----------------------------------------------------------------------------
 15023                                  ;
 15024                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 15025                                  ; for setting up the CDS for the specified drive appropriately.  There are
 15026                                  ; several cases to consider:
 15027                                  ;
 15028                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 15029                                  ;	it into a WFP.	We verify the existance of this directory and then
 15030                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 15031                                  ;	directory cluster.
 15032                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 15033                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 15034                                  ;	WFP back into the CDS.
 15035                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 15036                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 15037                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 15038                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 15039                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 15040                                  ;	to process the path but to return the logical CDS and the logical
 15041                                  ;	path.  We then copy the logical path into the logical CDS.
 15042                                  ;
 15043                                  ; Inputs:
 15044                                  ;	DS:DX Points to asciz name
 15045                                  ; Returns:
 15046                                  ;	STD XENIX Return
 15047                                  ;	AX = chdir_path_not_found if error
 15048                                  ;
 15049                                  ;----------------------------------------------------------------------------
 15050                                  
 15051                                  _$CHDIR:
 15052 00002149 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15053 0000214C 89D6                    	MOV	SI,DX			; get source
 15054 0000214E E84D49                  	call	TransPath		; go munge the path and get real CDS
 15055 00002151 7304                    	JNC	short ChDirCrack	; no errors, try path
 15056                                  ChDirErrP:
 15057                                  	;mov	al,3
 15058 00002153 B003                    	MOV	AL,error_path_not_found
 15059                                  ChDirErr:
 15060                                  	;jmp	SYS_RET_ERR 	; oops!
 15061                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15062 00002155 EBC9                    	jmp	short chdir_errj
 15063                                  
 15064                                  ChDirCrack:
 15065 00002157 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 15066 0000215C 75F5                    	JNZ	short ChDirErrP
 15067                                  
 15068                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 15069                                  ; found.
 15070                                  
 15071 0000215E C43E[A205]              	LES	DI,[THISCDS]
 15072 00002162 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 15073 00002165 74EC                    	JZ	short ChDirErrP		;	error ();
 15074                                  
 15075                                  ; Find out if the directory exists.
 15076                                  
 15077 00002167 E8C00F                  	call	DOS_CHDIR
 15078                                  	;Jc	short ChDirErr
 15079                                  	; 16/12/2022
 15080 0000216A 72B4                    	jc	short chdir_errj
 15081                                  ;
 15082                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 15083                                  ; not network). If one was seen, all we need to do is copy in the text
 15084                                  ;
 15085 0000216C C43E[A205]              	LES	DI,[THISCDS]
 15086                                  	;test	word [es:di+43h],2000h
 15087                                  	; 17/12/2022
 15088 00002170 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15089                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 15090 00002175 7425                    	JZ	short GotCDS
 15091                                  
 15092                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 15093                                  
 15094 00002177 06                      	push	es	
 15095 00002178 57                      	push	di
 15096 00002179 51                      	push	cx			; save CDS and cluster...
 15097 0000217A E808E3                  	call	Get_User_Stack		; get original text
 15098                                  	
 15099                                  	;mov	di,[si+6]
 15100 0000217D 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 15101                                  	;mov	ds,[si+0Eh]
 15102 00002180 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 15103                                  	
 15104 00002183 BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 15105 00002186 87F7                    	XCHG	SI,DI
 15106 00002188 30C0                    	XOR	AL,AL			; do no splicing
 15107 0000218A 57                      	push	di
 15108 0000218B E81C49                  	call	TransPathNoSet		; Munge path
 15109 0000218E 5E                      	pop	si
 15110                                  
 15111                                  ; There should NEVER be an error here.
 15112                                  
 15113                                  ;IF FALSE
 15114                                  ;	JNC SKipErr
 15115                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 15116                                  ;SkipErr:
 15117                                  ;ENDIF
 15118 0000218F C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 15119                                  	;mov	word [es:di+49h],-1
 15120 00002193 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 15121                                  					; no valid cluster here...
 15122 00002199 59                      	pop	cx
 15123 0000219A 5F                      	pop	di
 15124 0000219B 07                      	pop	es
 15125                                  
 15126                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 15127                                  
 15128                                  GotCDS:
 15129                                  
 15130                                  ; wfp_start points to the text. See if it is long enough
 15131                                  
 15132                                  	; MSDOS 3.3
 15133                                  	;push	ss
 15134                                  	;pop	ds
 15135                                  	;mov	si,[WFP_START]
 15136                                  	;push	cx
 15137                                  	;call	DStrLen
 15138                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 15139                                  	;pop	cx
 15140                                  	;ja	short ChDirErrP
 15141                                  
 15142                                  	; MSDOS 6.0
 15143 0000219C E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 15144 0000219F 77B2                    	JA	short ChDirErrP
 15145                                  	; MSDOS 3.3 & MSDOS 6.0
 15146                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 15147                                  	; 17/12/2022
 15148 000021A1 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 15149 000021A6 7512                    	JNZ	short SkipRecency
 15150                                  	; MSDOS 6.0
 15151                                  	;test	word [es:di+43h],2000h
 15152                                  	; 17/12/2022
 15153 000021A8 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15154                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 15155                                  					;PTM. for Join and Subst ;AN000;
 15156 000021AD 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 15157 000021AF B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 15158                                  setdirclus:
 15159                                  	;mov	[es:di+49h],cx
 15160 000021B2 26894D49                	MOV	[ES:DI+curdir.ID],CX
 15161 000021B6 C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 15162                                  SkipRecency:
 15163 000021BA E810F0                  	call	FStrCpy
 15164 000021BD 30C0                    	XOR	AL,AL
 15165                                  mkdir_ok:
 15166 000021BF E979E4                  	jmp	SYS_RET_OK
 15167                                  
 15168                                  ; 17/05/2019 - Retro DOS v4.0
 15169                                  
 15170                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 15171                                  
 15172                                  ;BREAK <$MkDir - Make a directory entry>
 15173                                  ;---------------------------------------------------------------------------
 15174                                  ;
 15175                                  ; Procedure Name : $MkDir
 15176                                  ; Inputs:
 15177                                  ;	DS:DX Points to asciz name
 15178                                  ; Function:
 15179                                  ;	Make a new directory
 15180                                  ; Returns:
 15181                                  ;	STD XENIX Return
 15182                                  ;	AX = mkdir_path_not_found if path bad
 15183                                  ;	AX = mkdir_access_denied  If
 15184                                  ;		Directory cannot be created
 15185                                  ;		Node already exists
 15186                                  ;		Device name given
 15187                                  ;		Disk or directory(root) full
 15188                                  ;---------------------------------------------------------------------------
 15189                                  
 15190                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15191                                  
 15192                                  _$MKDIR:
 15193 000021C2 BE[3D30]                	MOV	SI,DOS_MKDIR
 15194                                  DoDirCall:
 15195 000021C5 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15196                                  
 15197 000021C8 56                      	push	si
 15198 000021C9 89D6                    	MOV	SI,DX			; get source
 15199 000021CB E8D048                  	call	TransPath		; go munge the path
 15200 000021CE 5E                      	pop	si
 15201 000021CF 7305                    	JNC	short MkDirCrack	; no errors, try path
 15202                                  MkErrP:
 15203 000021D1 B003                    	MOV	AL,error_path_not_found	; oops!
 15204                                  MkErr:
 15205 000021D3 E96EE4                  	jmp	SYS_RET_ERR
 15206                                  MkDirCrack:
 15207 000021D6 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 15208 000021DC 75F3                    	JNZ	short MkErrP
 15209                                  
 15210                                  	; MSDOS 3.3
 15211                                  	;push	ss
 15212                                  	;pop	ds
 15213                                  	;call	si
 15214                                  	;jb	short MkErr
 15215                                  	;;jmp	short mkdir_ok
 15216                                  	;jmp	SYS_RET_OK
 15217                                  
 15218                                  	; MSDOS 6.0
 15219 000021DE 56                      	PUSH	SI			;PTM.			;AN000;
 15220 000021DF E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 15221 000021E2 5E                      	POP	SI			;PTM.			;AN000;
 15222 000021E3 7604                    	JBE	short pathok		;PTM.			;AN000;
 15223                                  	;mov	al,5
 15224 000021E5 B005                    	MOV	AL,error_access_denied	;PTM. ops!
 15225                                  	;jmp	SYS_RET_ERR		;PTM.
 15226 000021E7 EBEA                    	jmp	short MkErr
 15227                                  pathok:
 15228 000021E9 FFD6                    	CALL	SI			; go get file
 15229 000021EB 72E6                    	JC	short MkErr		; no errors
 15230                                  	; 16/12/2022
 15231                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15232 000021ED EBD0                    	jmp	short mkdir_ok
 15233                                  	;jmp	SYS_RET_OK
 15234                                  
 15235                                  ;----------------------------------------------------------------------------
 15236                                  ;
 15237                                  ; Procedure Name : Check_PathLen
 15238                                  ;
 15239                                  ; Inputs:
 15240                                  ;	nothing
 15241                                  ; Function:
 15242                                  ;	check if final path length greater than 67
 15243                                  ; Returns:
 15244                                  ;	Above flag set if > 67
 15245                                  ;
 15246                                  ;---------------------------------------------------------------------------
 15247                                  
 15248                                  Check_PathLen:
 15249                                  	; 09/09/2018
 15250                                  	;mov	SI,[WFP_START]
 15251 000021EF 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 15252                                  Check_PathLen2:
 15253 000021F4 16                      	push	ss
 15254 000021F5 1F                      	pop	ds
 15255                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 15256 000021F6 51                      	push	CX	
 15257 000021F7 E8EAEF                  	CALL	DStrLen
 15258 000021FA 83F943                  	CMP	CX,DIRSTRLEN ; 67
 15259 000021FD 59                      	POP	CX
 15260 000021FE C3                      	retn
 15261                                  
 15262                                  ;============================================================================
 15263                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 15264                                  ;============================================================================
 15265                                  ; 07/08/2018 - Retro DOS v3.0
 15266                                  ; 17/05/2019 - Retro DOS v4.0
 15267                                  
 15268                                  ;**	IOCTL system call.
 15269                                  ;----------------------------------------------------------------------------
 15270                                  ;	$IOCTL
 15271                                  ;
 15272                                  ;	  Revision history:
 15273                                  ;
 15274                                  ;		Created: ARR 4 April 1983
 15275                                  ;
 15276                                  ;		GenericIOCTL added:		KGS	22 April 1985
 15277                                  ;
 15278                                  ;		A000	version 4.00	Jan. 1988
 15279                                  ;
 15280                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 15281                                  ;
 15282                                  
 15283                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 15284                                  ;---------------------------------------------------------------------------
 15285                                  ;
 15286                                  ;   Assembler usage:
 15287                                  ;	    MOV     BX, Handle
 15288                                  ;	    MOV     DX, Data
 15289                                  ;
 15290                                  ;	(or LDS     DX,BUF
 15291                                  ;	    MOV     CX,COUNT)
 15292                                  ;
 15293                                  ;	    MOV     AH, Ioctl
 15294                                  ;	    MOV     AL, Request
 15295                                  ;	    INT     21h
 15296                                  ;
 15297                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 15298                                  ;	    attribute word in DX, handle in BX:
 15299                                  ;	    DH = high word of device driver attributes
 15300                                  ;	    DL = low byte of sf_flags
 15301                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 15302                                  ;	    in BX.
 15303                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 15304                                  ;	    into DS:DX.  Return number read in AX.
 15305                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 15306                                  ;	    DS:DX.  Return bytes written in AX.
 15307                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 15308                                  ;	    into DS:DX.  Return number read in AX.
 15309                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 15310                                  ;	    DS:DX.  Return bytes written in AX.
 15311                                  ;	 6  Return input status of handle in BX. If a read will go to the
 15312                                  ;	    device, AL = 0FFh, otherwise 0.
 15313                                  ;	 7  Return output status of handle in BX. If a write will go to the
 15314                                  ;	    device, AL = 0FFh, otherwise 0.
 15315                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 15316                                  ;	    removable media, 0 otherwise.
 15317                                  ;	 9  Return the contents of the device attribute word in DX for the
 15318                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 15319                                  ;	    network. 8000h is the bit for local use.
 15320                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 15321                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 15322                                  ;	    the count and CX is the delay.
 15323                                  ;
 15324                                  ;   Error returns:
 15325                                  ;	    AX = error_invalid_handle
 15326                                  ;	       = error_invalid_function
 15327                                  ;	       = error_invalid_data
 15328                                  ;
 15329                                  ;-------------------------------------------------------------------------------
 15330                                  ;
 15331                                  ;   This is the documentation copied from DOS 4.0 it is much better
 15332                                  ;   than the above
 15333                                  ;
 15334                                  ;	There are several basic forms of IOCTL calls:
 15335                                  ;
 15336                                  ;
 15337                                  ;	** Get/Set device information:	**
 15338                                  ;
 15339                                  ;	ENTRY	(AL) = function code
 15340                                  ;		  0 - Get device information
 15341                                  ;		  1 - Set device information
 15342                                  ;		(BX) = file handle
 15343                                  ;		(DX) = info for "Set Device Information"
 15344                                  ;	EXIT	'C' set if error
 15345                                  ;		  (AX) = error code
 15346                                  ;		'C' clear if OK
 15347                                  ;		  (DX) = info for "Get Device Information"
 15348                                  ;	USES	ALL
 15349                                  ;
 15350                                  ;
 15351                                  ;	**  Read/Write Control Data From/To Handle  **
 15352                                  ;
 15353                                  ;	ENTRY	(AL) = function code
 15354                                  ;		  2 - Read device control info
 15355                                  ;		  3 - Write device control info
 15356                                  ;		(BX) = file handle
 15357                                  ;		(CX) = transfer count
 15358                                  ;		(DS:DX) = address for data
 15359                                  ;	EXIT	'C' set if error
 15360                                  ;		  (AX) = error code
 15361                                  ;		'C' clear if OK
 15362                                  ;		  (AX) = count of bytes transfered
 15363                                  ;	USES	ALL
 15364                                  ;
 15365                                  ;
 15366                                  ;	**  Read/Write Control Data From/To Block Device  **
 15367                                  ;
 15368                                  ;	ENTRY	(AL) = function code
 15369                                  ;		  4 - Read device control info
 15370                                  ;		  5 - Write device control info
 15371                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15372                                  ;		(CX) = transfer count
 15373                                  ;		(DS:DX) = address for data
 15374                                  ;	EXIT	'C' set if error
 15375                                  ;		  (AX) = error code
 15376                                  ;		'C' clear if OK
 15377                                  ;		  (AX) = count of bytes transfered
 15378                                  ;	USES	ALL
 15379                                  ;
 15380                                  ;
 15381                                  ;	**  Get Input/Output Status  **
 15382                                  ;
 15383                                  ;	ENTRY	(AL) = function code
 15384                                  ;		  6 - Get Input status
 15385                                  ;		  7 - Get Output Status
 15386                                  ;		(BX) = file handle
 15387                                  ;	EXIT	'C' set if error
 15388                                  ;		  (AX) = error code
 15389                                  ;		'C' clear if OK
 15390                                  ;		  (AL) = 00 if not ready
 15391                                  ;		  (AL) = FF if ready
 15392                                  ;	USES	ALL
 15393                                  ;
 15394                                  ;
 15395                                  ;	**  Get Drive Information  **
 15396                                  ;
 15397                                  ;	ENTRY	(AL) = function code
 15398                                  ;		  8 - Check for removable media
 15399                                  ;		  9 - Get device attributes
 15400                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15401                                  ;	EXIT	'C' set if error
 15402                                  ;		  (AX) = error code
 15403                                  ;		'C' clear if OK
 15404                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 15405                                  ;		  (DX) = device attribute word (func. 9)
 15406                                  ;	USES	ALL
 15407                                  ;
 15408                                  ;
 15409                                  ;	**  Get Redirected bit	**
 15410                                  ;
 15411                                  ;	ENTRY	(AL) = function code
 15412                                  ;		  0Ah - Network stuff
 15413                                  ;		(BX) = file handle
 15414                                  ;	EXIT	'C' set if error
 15415                                  ;		  (AX) = error code
 15416                                  ;		'C' clear if OK
 15417                                  ;		  (DX) = SFT flags word, 8000h set if network file
 15418                                  ;	USES	ALL
 15419                                  ;
 15420                                  ;
 15421                                  ;	**  Change sharer retry parameters  **
 15422                                  ;
 15423                                  ;	ENTRY	(AL) = function code
 15424                                  ;		  0Bh - Set retry parameters
 15425                                  ;		(CX) = retry loop count
 15426                                  ;		(DX) = number of retries
 15427                                  ;	EXIT	'C' set if error
 15428                                  ;		  (AX) = error code
 15429                                  ;		'C' clear if OK
 15430                                  ;	USES	ALL
 15431                                  ;
 15432                                  ;
 15433                                  ;   =================================================================
 15434                                  ;
 15435                                  ;	**  New Standard Control  **
 15436                                  ;
 15437                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15438                                  ;	FORMS ARE OBSOLETE.
 15439                                  ;
 15440                                  ;   =================================================================
 15441                                  ;
 15442                                  ;	ENTRY	(AL) = function code
 15443                                  ;		  0Ch - Control Function subcode
 15444                                  ;		(BX) = File Handle
 15445                                  ;		(CH) = Category Indicator
 15446                                  ;		(CL) = Function within category
 15447                                  ;		(DS:DX) = address for data, if any
 15448                                  ;		(SI) = Passed to device as argument, use depends upon function
 15449                                  ;		(DI) = Passed to device as argument, use depends upon function
 15450                                  ;	EXIT	'C' set if error
 15451                                  ;		  (AX) = error code
 15452                                  ;		'C' clear if OK
 15453                                  ;		  (SI) = Return value, meaning is function dependent
 15454                                  ;		  (DI) = Return value, meaning is function dependent
 15455                                  ;		  (DS:DX) = Return address, use is function dependent
 15456                                  ;	USES	ALL
 15457                                  ;
 15458                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15459                                  ;     (See inc\ioctl.inc for more info)
 15460                                  ;
 15461                                  ;	ENTRY	(AL) = function code
 15462                                  ;		  0Dh - Control Function subcode
 15463                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15464                                  ;		(CH) = Category Indicator
 15465                                  ;		(CL) = Function within category
 15466                                  ;		(DS:DX) = address for data, if any
 15467                                  ;		(SI) = Passed to device as argument, use depends upon function
 15468                                  ;		(DI) = Passed to device as argument, use depends upon function
 15469                                  ;
 15470                                  ;	EXIT	'C' set if error
 15471                                  ;		  (AX) = error code
 15472                                  ;		'C' clear if OK
 15473                                  ;		  (DS:DX) = Return address, use is function dependent
 15474                                  ;	USES	ALL
 15475                                  ;
 15476                                  ;---------------------------------------------------------------------------
 15477                                  	
 15478                                  	; 17/05/2019 - Retro DOS v4.0
 15479                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15480                                  
 15481                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15482                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15483                                  
 15484                                  IOCTLJMPTABLE:	;label	word
 15485                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15486 000021FF [3B22]                  	dw	ioctl_getset_data	; 0
 15487 00002201 [3B22]                  	dw	ioctl_getset_data   	; 1
 15488 00002203 [8B22]                  	dw	ioctl_control_string	; 2
 15489 00002205 [8B22]                  	dw	ioctl_control_string	; 3
 15490 00002207 [D923]                  	dw	ioctl_get_dev		; 4
 15491 00002209 [D923]                  	dw	ioctl_get_dev		; 5
 15492 0000220B [A522]                  	dw	ioctl_status		; 6
 15493 0000220D [A522]                  	dw	ioctl_status		; 7
 15494 0000220F [4623]                  	dw	ioctl_rem_media		; 8
 15495 00002211 [8123]                  	dw	ioctl_drive_attr	; 9
 15496 00002213 [CB23]                  	dw	ioctl_handle_redir	; A
 15497 00002215 [C122]                  	dw	Set_Retry_Parameters	; B
 15498 00002217 [CF22]                  	dw	GENERICIOCTLHANDLE	; C
 15499 00002219 [E622]                  	dw	GENERICIOCTL		; D
 15500                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15501 0000221B [7C24]                  	dw	ioctl_drive_owner	; E
 15502 0000221D [7C24]                  	dw	ioctl_drive_owner	; F
 15503                                  	; MSDOS 6.0
 15504 0000221F [CF22]                  	dw	query_handle_support	; 10h
 15505 00002221 [E622]                  	dw	query_device_support	; 11h
 15506                                  
 15507                                  	; 11/11/2022
 15508                                  _$IOCTL:
 15509 00002223 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15510 00002225 16                      	push	ss
 15511 00002226 1F                      	pop	ds			;hkn; SS is DOSDATA
 15512                                  
 15513                                  	; MSDOS 3.3
 15514                                  	;cmp	al,0Fh 
 15515                                  	; MSDOS 6.0
 15516 00002227 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15517 00002229 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 15518                                  
 15519                                  	; 14/01/2024
 15520                                  	; 28/05/2019
 15521                                  	;push	AX	; 14/01/2024	; Need to save AL for generic IOCTL
 15522 0000222B 89C7                    	mov	di,ax			; di NOT a PARM
 15523 0000222D 81E7FF00                	and	di,0FFh			; di = al
 15524 00002231 D1E7                    	shl	di,1			; di = index into jmp table
 15525                                  	;pop	AX			; Restore AL for generic IOCTL
 15526                                  
 15527 00002233 2EFFA5[FF21]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15528                                  
 15529                                  ioctl_bad_funj2:
 15530 00002238 E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15531                                  
 15532                                  ;--------------------------------------------------------------------------
 15533                                  ;
 15534                                  ; IOCTL: AL = 0,1
 15535                                  ;
 15536                                  ; ENTRY: DS = DOSDATA
 15537                                  ;
 15538                                  ;--------------------------------------------------------------------------
 15539                                  
 15540                                  ioctl_getset_data:
 15541                                  	; MSDOS 6.0
 15542 0000223B E86543                  	call	SFFromHandle		; ES:DI -> SFT
 15543 0000223E 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15544                                  ioctl_bad_handle:
 15545                                  	;mov	al,6
 15546 00002240 B006                    	mov	al,error_invalid_handle
 15547                                  ioctl_error:
 15548 00002242 E9FFE3                  	jmp	SYS_RET_ERR
 15549                                  
 15550                                  ioctl_check_permissions:
 15551 00002245 3C00                    	CMP	AL,0
 15552                                  	;mov	al,[es:di+5]
 15553 00002247 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15554 0000224B 741B                    	JZ	short ioctl_read	; read the byte
 15555                                  
 15556 0000224D 08F6                    	or	dh,dh
 15557 0000224F 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15558                                  	;mov	al,0Dh
 15559 00002251 B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15560                                  	;jmp	SYS_RET_ERR
 15561 00002253 EBED                    	jmp	short ioctl_error
 15562                                  
 15563                                  ioctl_check_device:
 15564 00002255 A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15565 00002257 74DF                    	jz	short ioctl_bad_funj2
 15566 00002259 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15567                                  					;   device bit!! He can muck with the
 15568                                  					;   others at will.
 15569 0000225C C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15570 00002261 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15571                                  ioctl_ok:
 15572 00002265 E9D3E3                  	jmp	SYS_RET_OK
 15573                                  
 15574                                  ioctl_read:
 15575 00002268 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15576 0000226D 30E4                    	XOR	AH,AH
 15577 0000226F A880                    	test	AL,devid_device 	; Should I set high byte
 15578 00002271 740D                    	JZ	short ioctl_no_high	; no
 15579 00002273 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15580                                  	;les	di,[es:di+7]
 15581 00002278 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15582                                  	;mov	ah,[es:di+5]
 15583 0000227C 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15584                                  ioctl_no_high:
 15585 00002280 89C2                    	MOV	DX,AX
 15586                                  ioctl_set_dx:	; 16/12/2022
 15587 00002282 E800E2                  	call	Get_User_Stack
 15588                                  	;mov	[si+6],dx
 15589 00002285 895406                  	MOV	[SI+user_env.user_DX],DX
 15590                                  	;;jmp	SYS_RET_OK
 15591                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15592                                  ioctl_ok_j:
 15593                                  	; 16/12/2022
 15594 00002288 E9B3E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15595                                  	;jmp	short ioctl_ok
 15596                                  	; 26/07/2019
 15597                                  	;jmp	SYS_RET_OK_clc
 15598                                  
 15599                                  ;--------------------------------------------------------------------------
 15600                                  ;
 15601                                  ; IOCTL: AL = 2,3
 15602                                  ;
 15603                                  ; ENTRY: DS = DOSDATA
 15604                                  ;	 SI = user's DS
 15605                                  ;
 15606                                  ;--------------------------------------------------------------------------
 15607                                  
 15608                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15609                                  ioctl_control_string:
 15610 0000228B E81543                  	call	SFFromHandle		; ES:DI -> SFT
 15611 0000228E 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15612                                  	; 07/12/2022
 15613                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15614                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15615                                  	; MSDOS 5.0 & MSDOS 6.0
 15616 00002290 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15617 00002295 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15618 00002297 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15619 0000229C 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15620 000022A0 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15621 000022A2 E93C01                  	JMP	ioctl_do_string
 15622                                  
 15623                                  ;--------------------------------------------------------------------------
 15624                                  ;
 15625                                  ; IOCTL: AL = 6,7
 15626                                  ;
 15627                                  ; ENTRY: DS = DOSDATA
 15628                                  ;
 15629                                  ;--------------------------------------------------------------------------
 15630                                  
 15631                                  ioctl_status:
 15632 000022A5 B401                    	MOV	AH,1
 15633 000022A7 2C06                    	SUB	AL,6			; 6=0,7=1
 15634 000022A9 7402                    	JZ	short ioctl_get_status
 15635 000022AB B403                    	MOV	AH,3
 15636                                  ioctl_get_status:
 15637 000022AD 50                      	PUSH	AX
 15638 000022AE E8E612                  	call	GET_IO_SFT
 15639 000022B1 58                      	POP	AX
 15640                                  	;JNC	short DO_IOFUNC
 15641                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15642                                  	; 16/12/2022
 15643 000022B2 728C                    	jc	short ioctl_bad_handle
 15644                                  DO_IOFUNC:
 15645 000022B4 E80421                  	call	IOFUNC
 15646 000022B7 88C4                    	MOV	AH,AL
 15647 000022B9 B0FF                    	MOV	AL,0FFH
 15648                                  	;JNZ	short ioctl_status_ret
 15649                                  	; 29/01/2024
 15650 000022BB 75A8                    	jnz	short ioctl_ok
 15651 000022BD FEC0                    	INC	AL
 15652                                  ioctl_status_ret:
 15653                                  	;jmp	SYS_RET_OK
 15654                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15655                                  	;jmp	short ioctl_ok_j
 15656                                  	; 16/12/2022
 15657 000022BF EBA4                    	jmp	short ioctl_ok
 15658                                  
 15659                                  ;--------------------------------------------------------------------------
 15660                                  ;
 15661                                  ; IOCTL: AL = B
 15662                                  ;
 15663                                  ; ENTRY: DS = DOSDATA
 15664                                  ;
 15665                                  ;--------------------------------------------------------------------------
 15666                                  
 15667                                  Set_Retry_Parameters:
 15668                                  	; 09/09/2018
 15669 000022C1 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15670 000022C5 09D2                    	OR	DX,DX			; zero retries not allowed
 15671 000022C7 7475                    	JZ	short ioctl_bad_fun
 15672 000022C9 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15673                                  doneok:
 15674                                  	;jmp	SYS_RET_OK		; Done
 15675                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15676                                  	;jmp	short ioctl_status_ret
 15677                                  	; 16/12/2022
 15678 000022CD EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15679                                  
 15680                                  ;--------------------------------------------------------------------------
 15681                                  ;
 15682                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15683                                  ;
 15684                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15685                                  ;	SI:DX -> Users Device Parameter Table
 15686                                  ;	IOCALL -> IOCTL_Req structure
 15687                                  ;
 15688                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15689                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15690                                  ;	call.
 15691                                  ;
 15692                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15693                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15694                                  ;         return address off the stack if the drive is invalid.
 15695                                  ;
 15696                                  ;--------------------------------------------------------------------------
 15697                                  
 15698                                  query_handle_support:	; Entry point for handles
 15699                                  GENERICIOCTLHANDLE:
 15700 000022CF E8D142                  	call	SFFromHandle		; Get SFT for device.
 15701 000022D2 726F                    	jc	short ioctl_bad_handlej
 15702                                  
 15703                                  	;test	word [es:di+5],8000h
 15704                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15705                                  	;test	byte [es:di+6],80h
 15706 000022D4 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15707 000022D9 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15708                                  
 15709 000022DB C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15710                                  	;les	di,[es:di+7]
 15711 000022E0 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15712 000022E4 EB0F                    	jmp	short Do_GenIOCTL
 15713                                  
 15714                                  query_device_support:	; Entry point for devices:
 15715                                  GENERICIOCTL:
 15716 000022E6 C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15717 000022EB 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15718 000022EE 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15719                                  
 15720 000022F0 E87A01                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15721 000022F3 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15722                                  
 15723                                  Do_GenIOCTL:
 15724                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15725                                  					; Can device handle Generic IOCTL funcs
 15726                                  	; 09/09/2018
 15727                                  	;test	byte [es:di+4],40h
 15728 000022F5 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15729 000022FA 7442                    	jz	short ioctl_bad_fun
 15730                                  
 15731                                  	; 17/05/2019 - Retro DOS v4.0
 15732                                  
 15733                                  	; MSDOS 6.0
 15734                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15735 000022FC C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15736                                  	;cmp	al,10h
 15737 00002301 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15738 00002303 7C0C                    	jl	short SetIOCtlBlock
 15739                                  	
 15740                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15741                                  	;test	byte [es:di+4],80h 
 15742 00002305 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15743 0000230A 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15744                                  	;
 15745                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15746 0000230C C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15747                                  
 15748                                  SetIOCtlBlock:
 15749 00002311 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15750 00002312 57                      	PUSH	DI			; in DS:SI
 15751                                  					; Setup Generic IOCTL Request Block
 15752                                  	;mov	byte [IOCALL_REQLEN],23
 15753 00002313 C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15754                                  	; 07/09/2018 (MSDOS 3.3)
 15755                                  	;;mov	byte [IOCALL_REQFUNC],19
 15756                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15757                                  	;
 15758 00002318 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15759 0000231C 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15760 00002320 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15761 00002324 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15762 00002328 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15763 0000232C 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15764 00002330 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15765                                  
 15766                                  ;hkn; IOCALL is in DOSDATA
 15767 00002334 BB[7C03]                	MOV	BX,IOCALL
 15768                                  
 15769 00002337 16                      	PUSH	SS
 15770 00002338 07                      	POP	ES
 15771                                  					; DS:SI -> Device header.
 15772 00002339 5E                      	POP	SI
 15773 0000233A 1F                      	POP	DS
 15774                                  	; 10/08/2018
 15775 0000233B E9DC00                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15776                                  
 15777                                  ioctl_bad_fun:
 15778 0000233E B001                    	mov	al, error_invalid_function  ; 1
 15779 00002340 E901E3                  	jmp	SYS_RET_ERR	
 15780                                  
 15781                                  ioctl_bad_handlej:
 15782 00002343 E9FAFE                  	jmp	ioctl_bad_handle
 15783                                  
 15784                                  ;---------------------------------------------------------------------------
 15785                                  ;
 15786                                  ; IOCTL: AL = 8
 15787                                  ;
 15788                                  ; ENTRY: DS = DOSDATA
 15789                                  ;
 15790                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15791                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15792                                  ;         return address off the stack if the drive is invalid.
 15793                                  ;
 15794                                  ;-------------------------------------------------------------------------
 15795                                  
 15796                                  	; 30/01/2024
 15797                                  ioctl_rem_media:
 15798                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15799 00002346 E82401                  	CALL	Check_If_Net
 15800 00002349 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15801                                  					;   certainly don't know how to do this
 15802                                  					;   call.
 15803                                  	;test	word [es:di+4],800h
 15804                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15805                                  	;test	byte [es:di+5],8
 15806 0000234B 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15807 00002350 74EC                    	JZ	short ioctl_bad_fun		; NO
 15808                                  
 15809                                  ;hkn; SS override for IOCALL
 15810                                  	; 30/01/2024
 15811                                  	; ds = ss = DOSDATA segment ('Get_Driver_BL' in 'Check_If_Net')
 15812                                  	;MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15813 00002352 C606[7E03]0F            	mov	byte [IOCALL_REQFUNC],DEVRMD ; 15
 15814 00002357 B00D                    	MOV	AL,REMHL  ; 13
 15815 00002359 88DC                    	MOV	AH,BL			; Unit number
 15816                                  	;MOV	[SS:IOCALL_REQLEN],AX
 15817 0000235B A3[7C03]                	mov	[IOCALL_REQLEN],ax	
 15818 0000235E 31C0                    	XOR	AX,AX
 15819                                  	;MOV	[SS:IOCALL_REQSTAT],AX
 15820 00002360 A3[7F03]                	mov	[IOCALL_REQSTAT],ax ; 0
 15821                                  	
 15822 00002363 06                      	PUSH	ES
 15823 00002364 1F                      	POP	DS
 15824 00002365 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15825 00002367 16                      	PUSH	SS
 15826 00002368 07                      	POP	ES
 15827                                  
 15828                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15829 00002369 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15830 0000236C 1E                      	push	ds
 15831 0000236D 56                      	push	si
 15832 0000236E E81F22                  	call	DEVIOCALL2
 15833 00002371 5E                      	pop	si
 15834 00002372 1F                      	pop	ds
 15835                                  
 15836                                  ;hkn; SS override
 15837                                  	; 30/01/2024
 15838                                  	; (ds <> ss, ss = DOSDATA segment)
 15839 00002373 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15840                                  	;AND	AX,STBUI ; 200h		; Mask to busy bit
 15841                                  	; 29/01/2024
 15842 00002377 80E402                  	and	ah,STBUI>>8
 15843 0000237A B109                    	MOV	CL,9
 15844 0000237C D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15845                                  ioctl_da_ok_j:	; 11/11/2022
 15846 0000237E E9BAE2                  	jmp	SYS_RET_OK
 15847                                  
 15848                                  ;-------------------------------------------------------------------------
 15849                                  ;
 15850                                  ; IOCTL: AL = 9
 15851                                  ;
 15852                                  ; ENTRY: DS = DOSDATA
 15853                                  ;
 15854                                  ;-------------------------------------------------------------------------
 15855                                  
 15856                                  ioctl_drive_attr:
 15857                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15858 00002381 88D8                    	mov	al,bl
 15859 00002383 E84146                  	call	GETTHISDRV
 15860 00002386 723E                    	jc	short ioctl_drv_err
 15861 00002388 E8B500                  	call	Get_Driver_BL
 15862                                  	; MSDOS 6.0
 15863 0000238B 7239                    	JC	short ioctl_drv_err	; drive not valid
 15864                                  
 15865                                  	;mov	dx,[es:di+4]
 15866 0000238D 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15867                                  					; get device attribute word
 15868 00002391 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15869                                  
 15870                                  ;hkn; SS override
 15871                                  	;LES	DI,[SS:THISCDS]
 15872                                  	; 30/01/2024
 15873 00002393 C43E[A205]              	les	di,[THISCDS] ; (Get_Driver_BL)
 15874                                  
 15875                                  	;test	word [es:di+43h],8000h
 15876                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15877                                  	;test	byte [es:di+44h],80h
 15878 00002397 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15879 0000239C 7403                    	JZ	short IOCTLShare
 15880                                  
 15881                                  	;or	dx,1000h ; (MSDOS 3.3)
 15882                                  
 15883                                  ;	Net devices don't return a device attribute word.
 15884                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15885                                  
 15886 0000239E BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15887                                  
 15888                                  IOCTLShare:
 15889                                  	; 30/01/2024
 15890                                  	; ds = ss = DOSDATA segment
 15891                                  	;push	ss
 15892                                  	;pop	ds
 15893                                  
 15894 000023A1 BE[BE03]                	MOV	SI,OPENBUF
 15895 000023A4 80C341                  	ADD	BL,"A"	; 41h
 15896 000023A7 881C                    	MOV	[SI],BL
 15897 000023A9 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15898 000023AE B80003                  	MOV	AX,0300h
 15899 000023B1 F8                      	CLC
 15900                                  	;INT	int_IBM
 15901 000023B2 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15902                                  			; DS:SI -> ASCIZ disk device name 
 15903                                  			; (may be full path or only drive
 15904                                  			; specifier--must include the colon)
 15905                                  			; Return: CF clear if absolute disk access allowed
 15906 000023B4 7303                    	JNC	short IOCTLLocal	; Not shared
 15907                                  	;OR	DX,0200H		; Shared, bit 9
 15908                                  	; 17/12/2022
 15909 000023B6 80CE02                  	or	dh,02h
 15910                                  IOCTLLocal:
 15911                                  	;test	word [es:di+43h],1000h
 15912                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15913                                  	;test	byte [es:di+44h],10h
 15914 000023B9 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15915                                  	;JZ	short ioctl_set_DX
 15916                                  	; 16/12/2022
 15917 000023BE 7403                    	jz	short _ioctl_set_DX
 15918                                  	;OR	DX,8000h
 15919                                  	; 17/12/2022
 15920 000023C0 80CE80                  	or	dh,80h
 15921                                  ;ioctl_set_DX:
 15922                                  _ioctl_set_DX:
 15923                                  	; 16/12/2022
 15924 000023C3 E9BCFE                  	jmp	ioctl_set_dx
 15925                                  ; 16/12/2022
 15926                                  %if 0	
 15927                                  	call	Get_User_Stack
 15928                                  	MOV	[SI+user_env.user_DX],DX
 15929                                  	;;jmp	SYS_RET_OK
 15930                                  	;; 25/06/2019
 15931                                  	;jmp	SYS_RET_OK_clc
 15932                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15933                                  ioctl_gd_ok_j:
 15934                                  	jmp	short ioctl_da_ok_j
 15935                                  %endif
 15936                                  
 15937                                  ioctl_drv_err:
 15938 000023C6 B00F                    	mov	al,error_invalid_drive ; 0Fh
 15939                                  ioctl_gd_err_j:	; 11/11/2022
 15940 000023C8 E979E2                  	jmp	SYS_RET_ERR
 15941                                  
 15942                                  ;--------------------------------------------------------------------------
 15943                                  ;
 15944                                  ; IOCTL: AL = A
 15945                                  ;
 15946                                  ; ENTRY: DS = DOSDATA
 15947                                  ;
 15948                                  ;--------------------------------------------------------------------------
 15949                                  
 15950                                  ioctl_handle_redir:
 15951 000023CB E8D541                  	call	SFFromHandle		; ES:DI -> SFT
 15952 000023CE 7303                    	JNC	short ioctl_got_sft	; have valid handle
 15953 000023D0 E96DFE                  	jmp	ioctl_bad_handle ; 10/08/2018
 15954                                  
 15955                                  ioctl_got_sft:
 15956                                  	;mov	dx,[es:di+5]
 15957 000023D3 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 15958                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 15959                                  	; 16/12/2022
 15960 000023D7 EBEA                    	jmp	short _ioctl_set_DX
 15961                                  
 15962                                  	; 16/12/2022
 15963                                  ;ioctl_bad_funj:
 15964                                  	;JMP	ioctl_bad_fun
 15965                                  
 15966                                  ;--------------------------------------------------------------------------
 15967                                  ;
 15968                                  ; IOCTL: AL= 4,5
 15969                                  ;
 15970                                  ; ENTRY: DS = DOSDATA
 15971                                  ;	 SI = user's DS
 15972                                  ;
 15973                                  ;
 15974                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 15975                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15976                                  ;         return address off the stack if the drive is invalid.
 15977                                  ;
 15978                                  ;-------------------------------------------------------------------------
 15979                                  
 15980                                  ioctl_get_dev:
 15981 000023D9 E89100                  	CALL	Check_If_Net
 15982                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 15983                                  					; certainly don't know how to do this
 15984                                  					; call.
 15985                                  	; 16/12/2022
 15986 000023DC 7403                    	jz	short ioctl_do_string
 15987                                  ioctl_bad_funj:
 15988 000023DE E95DFF                  	JMP	ioctl_bad_fun
 15989                                  
 15990                                  ioctl_do_string:
 15991                                  	;test	word [es:di+4],4000h
 15992                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 15993                                  	;test	byte [es:di+5],40h
 15994 000023E1 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 15995 000023E6 74F6                    	JZ	short ioctl_bad_funj		; NO
 15996                                  					; assume IOCTL read
 15997 000023E8 C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 15998                                  
 15999 000023ED A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 16000 000023EF 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 16001                                  
 16002                                  					; it is an IOCTL write
 16003 000023F1 C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 16004                                  
 16005                                  ioctl_control_call:
 16006 000023F6 B016                    	MOV	AL,DRDWRHL ; 22
 16007                                  ioctl_setup_pkt:
 16008 000023F8 88DC                    	MOV	AH,BL			; Unit number
 16009 000023FA A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16010 000023FD 31C0                    	XOR	AX,AX
 16011 000023FF A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16012 00002402 A2[8903]                	MOV	[IOMED],AL
 16013 00002405 890E[8E03]              	MOV	[IOSCNT],CX
 16014 00002409 8916[8A03]              	MOV	[IOXAD],DX
 16015 0000240D 8936[8C03]              	MOV	[IOXAD+2],SI
 16016 00002411 06                      	PUSH	ES
 16017 00002412 1F                      	POP	DS
 16018 00002413 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16019 00002415 16                      	PUSH	SS
 16020 00002416 07                      	POP	ES
 16021                                  
 16022 00002417 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16023                                  ioctl_do_IO:
 16024 0000241A E87321                  	call	DEVIOCALL2
 16025                                  
 16026                                  ;hkn; SS override for IOCALL
 16027                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 16028                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16029                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16030 0000241D 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16031 00002423 7507                    	JNZ	short ioctl_string_err
 16032                                  
 16033                                  ;hkn; SS override
 16034 00002425 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 16035                                  	; 16/12/2022
 16036 00002429 E90FE2                  	jmp	SYS_RET_OK
 16037                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16038                                  	;jmp	short ioctl_gd_ok_j
 16039                                  
 16040                                  ioctl_string_err:
 16041 0000242C 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 16042                                  device_err:
 16043 00002431 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 16044 00002435 89F8                    	MOV	AX,DI
 16045 00002437 E8F62F                  	call	SET_I24_EXTENDED_ERROR
 16046                                  
 16047                                  ;hkn; use SS override
 16048                                  ;hkn;	mov	ax,[CS:EXTERR]
 16049 0000243A 36A1[2403]              	mov	ax,[SS:EXTERR]
 16050                                  	;jmp	SYS_RET_ERR
 16051                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16052 0000243E EB88                    	jmp	short ioctl_gd_err_j
 16053                                  
 16054                                  ; 17/05/2019 - Retro DOS v4.0
 16055                                  
 16056                                  ;--------------------------------------------------------------------------
 16057                                  ; Proc name : Get_Driver_BL
 16058                                  ;
 16059                                  ;	DS is DOSDATA
 16060                                  ;	BL is drive number (0=default)
 16061                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 16062                                  ;	No regs modified
 16063                                  ;
 16064                                  ;---------------------------------------------------------------------------
 16065                                  
 16066                                  	; 30/01/2024
 16067                                  Get_Driver_BL:
 16068 00002440 50                      	PUSH	AX
 16069 00002441 88D8                    	MOV	AL,BL			; Drive
 16070 00002443 E88145                  	call	GETTHISDRV
 16071 00002446 7223                    	jc	short ioctl_bad_drv
 16072 00002448 30DB                    	XOR	BL,BL			; Unit zero on Net device
 16073 0000244A C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 16074 0000244F C43E[A205]              	LES	DI,[THISCDS]
 16075                                  	;test	word [es:di+43h],8000h
 16076                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16077                                  	;test	byte [es:di+44h],80h
 16078 00002453 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16079                                  	;les	di,[es:di+45h]
 16080 00002458 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 16081 0000245C 750D                    	JNZ	short got_dev_ptr	 ; Is net
 16082 0000245E C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16083                                  	;mov	bl,[es:di+1]
 16084 00002463 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 16085                                  	;les	di,[es:di+13h]
 16086 00002467 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 16087                                  got_dev_ptr:
 16088                                  	; 30/01/2024
 16089                                  	; cf=0
 16090                                  	;CLC
 16091                                  ioctl_bad_drv:
 16092 0000246B 58                      	POP	AX
 16093 0000246C C3                      	retn
 16094                                  
 16095                                  ;-------------------------------------------------------------------------
 16096                                  ; Proc Name : Check_If_Net:
 16097                                  ;
 16098                                  ;
 16099                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 16100                                  ; If no device is found, the return address is popped off the stack, and a
 16101                                  ; jump is made to ioctl_drv_err.
 16102                                  ;
 16103                                  ; On Entry:
 16104                                  ; Registers same as those for Get_Driver_BL
 16105                                  ;
 16106                                  ; On Exit:
 16107                                  ; ZERO flag	- set if not a net device
 16108                                  ;		- reset if net device
 16109                                  ; ES:DI -> the device
 16110                                  ;
 16111                                  ;
 16112                                  ; BUGBUG: This function assumes the following stack setup on entry
 16113                                  ;
 16114                                  ;	  SP+2 -> Error return address
 16115                                  ;	  SP   -> Normal return address
 16116                                  ;
 16117                                  ;-------------------------------------------------------------------------
 16118                                  
 16119                                  Check_If_Net:
 16120                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16121 0000246D E8D0FF                  	CALL	Get_Driver_BL
 16122 00002470 7201                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 16123                                  
 16124                                  ; 30/01/2024 ('Get_Driver_BL' returns with
 16125                                  ;	      'curdir_isnet' condition/ZF, no need to a second test)
 16126                                  %if 0
 16127                                  	;;;
 16128                                  	; (PCDOS 7.1 IBMDOS.COM, Windows ME IO.SYS)
 16129                                  	PUSH	ES
 16130                                  	PUSH	DI
 16131                                  	LES	DI,[THISCDS]
 16132                                  	;test	word [es:di+43h],8000h
 16133                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16134                                  	;test	byte [es:di+44h],80h
 16135                                  	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16136                                  	POP	DI
 16137                                  	POP	ES
 16138                                  	;;;
 16139                                  %endif
 16140 00002472 C3                      	retn
 16141                                  
 16142                                  ioctl_drv_err_pop:
 16143 00002473 58                      	pop	ax			; pop off return address
 16144 00002474 E94FFF                  	jmp	ioctl_drv_err
 16145                                  
 16146                                  ioctl_bad_funj3:
 16147 00002477 E9C4FE                  	jmp	ioctl_bad_fun
 16148                                  
 16149                                  ioctl_string_errj:
 16150 0000247A EBB0                    	jmp	short ioctl_string_err  ; 25/05/2019
 16151                                  
 16152                                  ;--------------------------------------------------------------------------
 16153                                  ;
 16154                                  ; IOCTL: AL = E, F
 16155                                  ;
 16156                                  ; ENTRY: DS = DOSDATA
 16157                                  ;
 16158                                  ;
 16159                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 16160                                  ;         the call to Check_If_Net because Check_If_Net gets our
 16161                                  ;         return address off the stack if the drive is invalid.
 16162                                  ;
 16163                                  ;--------------------------------------------------------------------------
 16164                                  
 16165                                  ioctl_drive_owner:
 16166                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16167 0000247C E8EEFF                  	Call	Check_If_Net
 16168 0000247F 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 16169                                  					;   certainly don't know how to do this
 16170                                  					;   call.
 16171                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 16172                                  	; 09/09/2018
 16173                                  	;test	byte [es:di+4],40h
 16174 00002481 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 16175 00002486 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 16176                                  	;mov	byte [IOCALL_REQFUNC],23
 16177 00002488 C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 16178 0000248D 3C0E                    	cmp	al,0Eh			; Get Owner ?
 16179 0000248F 7405                    	jz	short GetOwner
 16180                                  SetOwner:
 16181 00002491 C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 16182                                  GetOwner:
 16183 00002496 B00D                    	MOV	AL,OWNHL ; 13
 16184 00002498 88DC                    	MOV	AH,BL			; Unit number
 16185 0000249A A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16186 0000249D 31C0                    	XOR	AX,AX
 16187 0000249F A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16188 000024A2 06                      	PUSH	ES
 16189 000024A3 1F                      	POP	DS
 16190 000024A4 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16191 000024A6 16                      	PUSH	SS
 16192 000024A7 07                      	POP	ES
 16193 000024A8 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16194 000024AB 1E                      	push	ds
 16195 000024AC 56                      	push	si
 16196 000024AD E8E020                  	call	DEVIOCALL2
 16197 000024B0 5E                      	pop	si
 16198 000024B1 1F                      	pop	ds
 16199                                  ;hkn; SS override
 16200                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16201                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16202 000024B2 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16203 000024B8 75C0                    	jnz	short ioctl_string_errj
 16204 000024BA 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 16205                                  					; owner returned is 1-based.
 16206 000024BE E97AE1                  	jmp	SYS_RET_OK
 16207                                  
 16208                                  ;============================================================================
 16209                                  ; DELETE.ASM, MSDOS 6.0, 1991
 16210                                  ;============================================================================
 16211                                  ; 07/08/2018 - Retro DOS v3.0
 16212                                  ; 17/05/2019 - Retro DOS v4.0
 16213                                  
 16214                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 16215                                  ;	NAME	DOS_DELETE
 16216                                  
 16217                                  ;
 16218                                  ;	Microsoft Confidential
 16219                                  ;	Copyright (C) Microsoft Corporation 1991
 16220                                  ;	All Rights Reserved.
 16221                                  ;
 16222                                  
 16223                                  ;**	DELETE.ASM - Low level routine for deleting files
 16224                                  ;----------------------------------------------------------------------------
 16225                                  ;		DOS_DELETE
 16226                                  ;		REN_DEL_Check
 16227                                  ;		FastOpen_Delete	       ; DOS 3.3
 16228                                  ;		FastOpen_Update	       ; DOS 3.3
 16229                                  
 16230                                  ;   Revision history:
 16231                                  ;
 16232                                  ;   A000  version 4.00	Jan. 1988
 16233                                  ;   A001  Fastopen Rename fix	April 1989
 16234                                  
 16235                                  ;Installed = TRUE
 16236                                  
 16237                                  ;	i_need	NoSetDir,BYTE
 16238                                  ;	i_need	Creating,BYTE
 16239                                  ;	i_need	DELALL,BYTE
 16240                                  ;	i_need	THISDPB,DWORD
 16241                                  ;	i_need	THISSFT,DWORD
 16242                                  ;	i_need	THISCDS,DWORD
 16243                                  ;	i_need	CURBUF,DWORD
 16244                                  ;	i_need	ATTRIB,BYTE
 16245                                  ;	i_need	SATTRIB,BYTE
 16246                                  ;	i_need	WFP_START,WORD
 16247                                  ;	i_need	REN_WFP,WORD			 ;BN001
 16248                                  ;	i_need	NAME1,BYTE			 ;BN001
 16249                                  ;	i_need	FoundDel,BYTE
 16250                                  ;	i_need	AUXSTACK,BYTE
 16251                                  ;	i_need	VOLCHNG_FLAG,BYTE
 16252                                  ;	i_need	JShare,DWORD
 16253                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 16254                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 16255                                  ;
 16256                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 16257                                  ;
 16258                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 16259                                  ;	i_need	DMAADD,DWORD
 16260                                  ;	i_need	RENAMEDMA,BYTE
 16261                                  
 16262                                  ;----------------------------------------------------------------------------
 16263                                  ;
 16264                                  ; Procedure Name : DOS_DELETE
 16265                                  ;
 16266                                  ; Inputs:
 16267                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16268                                  ;		terminated)
 16269                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16270                                  ;		( = -1 if current dir not involved, else
 16271                                  ;		 Points to first char after last "/" of current dir part)
 16272                                  ;	[THISCDS] Points to CDS being used
 16273                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16274                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16275                                  ; Function:
 16276                                  ;	Delete the specified file(s)
 16277                                  ; Outputs:
 16278                                  ;	CARRY CLEAR
 16279                                  ;		OK
 16280                                  ;	CARRY SET
 16281                                  ;	    AX is error code
 16282                                  ;		error_file_not_found
 16283                                  ;			Last element of path not found
 16284                                  ;		error_path_not_found
 16285                                  ;			Bad path (not in curr dir part if present)
 16286                                  ;		error_bad_curr_dir
 16287                                  ;			Bad path in current directory part of path
 16288                                  ;		error_access_denied
 16289                                  ;			Attempt to delete device or directory
 16290                                  ;		***error_sharing_violation***
 16291                                  ;			Deny both access required, generates an INT 24.
 16292                                  ;			This error is NOT returned. The INT 24H is generated,
 16293                                  ;			  and the file is ignored (not deleted). Delete will
 16294                                  ;			  simply continue on looking for more files.
 16295                                  ;			  Carry will NOT be set in this case.
 16296                                  ; DS preserved, others destroyed
 16297                                  ;
 16298                                  ;----------------------------------------------------------------------------
 16299                                  
 16300                                  FILEFOUND   equ 01h
 16301                                  FILEDELETED equ 10h
 16302                                  
 16303                                  
 16304                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16305                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 16306                                  
 16307                                  	; 30/01/2024
 16308                                  
 16309                                  DOS_DELETE:
 16310                                  
 16311                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 16312                                  ;hkn; appropriately at this point.
 16313                                  
 16314 000024C1 E872ED                  	call	TestNet
 16315 000024C4 7306                    	JNC	short LOCAL_DELETE
 16316                                  
 16317                                  ;IF NOT Installed
 16318                                  ;	transfer NET_DELETE
 16319                                  ;ELSE
 16320                                  	;MOV	AX,(MultNET SHL 8) | 19
 16321                                  	;INT	2FH
 16322                                  	;return
 16323                                  
 16324 000024C6 B81311                  	mov	ax,1113h
 16325 000024C9 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 16326                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 16327                                  			;		fully-qualified filename in DOS CS
 16328                                  			; SDA CDS pointer -> current directory structure for drive with file
 16329                                  			; Return: CF set on error
 16330 000024CB C3                      	retn
 16331                                  ;ENDIF
 16332                                  
 16333                                  LOCAL_DELETE:
 16334 000024CC C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 16335 000024D1 E824EE                  	call	ECritDisk
 16336                                  	;mov	word [CREATING],0E500h
 16337 000024D4 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 16338 000024DA 8B36[B205]              	MOV	SI,[WFP_START]
 16339                                  SKPNUL:
 16340 000024DE AC                      	LODSB
 16341 000024DF 08C0                    	OR	AL,AL
 16342 000024E1 75FB                    	JNZ	short SKPNUL		; go to end
 16343 000024E3 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 16344 000024E6 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 16345 000024EA 7506                    	JNZ	short TEST_QUEST
 16346 000024EC 807C022A                	CMP	BYTE [SI+2],"*"
 16347 000024F0 741F                    	JZ	short CHECK_ATTS
 16348                                  TEST_QUEST:
 16349 000024F2 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 16350 000024F5 87FE                    	XCHG	DI,SI
 16351                                  
 16352 000024F7 16                      	push	ss
 16353                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 16354 000024F8 07                      	pop	es ; 17/05/2019
 16355                                  
 16356 000024F9 B83F3F                  	MOV	AX,"??" ; 3F3Fh
 16357 000024FC B90400                  	MOV	CX,4		; four sets of "??"
 16358 000024FF F3AF                    	REPE	SCASW
 16359 00002501 751C                    	JNZ	short NOT_ALL
 16360 00002503 87FE                    	XCHG	DI,SI
 16361 00002505 AD                      	LODSW
 16362 00002506 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 16363 00002509 7514                    	JNZ	short NOT_ALL
 16364 0000250B AD                      	LODSW
 16365 0000250C 3D3F3F                  	CMP	AX,"??"
 16366 0000250F 750E                    	JNZ	short NOT_ALL
 16367                                  CHECK_ATTS:
 16368 00002511 A0[6D05]                	MOV	AL,[SATTRIB]
 16369                                  	;and	al,1Fh
 16370 00002514 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16371                                  					; Look only at hidden bits
 16372                                  	;cmp	al,1Fh
 16373 00002516 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16374                                  					; All must be set
 16375 00002518 7505                    	JNZ	short NOT_ALL
 16376                                  
 16377                                  ; NOTE WARNING DANGER-----
 16378                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 16379                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 16380                                  
 16381 0000251A C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 16382                                  NOT_ALL:
 16383 0000251F C606[4C03]01            	MOV	byte [NoSetDir],1
 16384 00002524 E81D19                  	call	GetPathNoSet
 16385 00002527 7312                    	JNC	short Del_found
 16386 00002529 750B                    	JNZ	short _bad_path
 16387 0000252B 08C9                    	OR	CL,CL
 16388 0000252D 7407                    	JZ	short _bad_path
 16389                                  No_file:
 16390 0000252F B80200                  	MOV	AX,error_file_not_found
 16391                                  ErrorReturn:
 16392 00002532 F9                      	STC
 16393                                  	;call	LCritDisk
 16394                                  	;retn
 16395                                  	; 18/12/2022
 16396 00002533 E9DDED                  	jmp	LCritDisk
 16397                                  
 16398                                  _bad_path:
 16399 00002536 B80300                  	MOV	AX,error_path_not_found
 16400 00002539 EBF7                    	JMP	short ErrorReturn
 16401                                  
 16402                                  Del_found:
 16403 0000253B 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 16404 0000253D 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 16405 00002542 7405                    	JZ	short NOT_DIR
 16406                                  Del_access_err:
 16407 00002544 B80500                  	MOV	AX,error_access_denied
 16408 00002547 EBE9                    	JMP	short ErrorReturn
 16409                                  
 16410                                  NOT_DIR:
 16411 00002549 08E4                    	OR	AH,AH			; Check if device name
 16412 0000254B 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 16413                                  
 16414                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 16415                                  
 16416                                  DELFILE:
 16417 0000254D 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 16418                                  
 16419                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 16420                                  ; DOS issue a build BPB call the next time this drive is accessed.
 16421                                  
 16422 00002552 1E                      	PUSH	DS
 16423 00002553 8A26[7F05]              	MOV	AH,[DELALL]
 16424 00002557 C53E[E205]              	LDS	DI,[CURBUF]
 16425                                  	
 16426                                  ;hkn; SS override
 16427 0000255B 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 16428 00002561 7509                    	JNZ	short DoDelete		; yes
 16429                                  
 16430 00002563 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 16431 00002567 7403                    	JZ	short DoDelete		; not read only
 16432                                  
 16433                                  	; 30/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16434                                  Skip_it:
 16435 00002569 1F                      	POP	DS
 16436 0000256A EB2F                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 16437                                  
 16438                                  DoDelete:
 16439 0000256C E88100                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 16440                                  	;JNC	short DEL_SHARE_OK
 16441                                  	;POP	DS
 16442                                  	;JMP	SHORT DELNXT		; Skip it
 16443                                  	; 30/01/2024
 16444 0000256F 72F8                    	jc	short Skip_it
 16445                                  
 16446                                  DEL_SHARE_OK:
 16447                                  	; 17/05/2019 - Retro DOS v4.0
 16448                                  	; MSDOS 6.0
 16449                                  	;test	byte [di+5],40h
 16450 00002571 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16451                                  					;LB. if already dirty		  ;AN000;
 16452 00002575 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 16453 00002577 E80835                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 16454                                  	;or	byte [di+5],40h
 16455 0000257A 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16456                                  yesdirty:
 16457 0000257E 8827                    	mov	[bx],ah 
 16458                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 16459 00002580 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 16460 00002582 1F                      	POP	DS
 16461 00002583 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 16462                                  
 16463 00002588 83FB02                  	CMP	BX,2
 16464 0000258B 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 16465                                  	;cmp	bx,[es:bp+0Dh]
 16466 0000258D 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16467 00002591 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16468                                  
 16469 00002593 E85A28                  	call	RELEASE 		; Free file data
 16470 00002596 7252                    	JC	short No_fileJ
 16471                                  
 16472                                  ; DOS 3.3  FastOpen
 16473                                  
 16474 00002598 E8C200                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16475                                  
 16476                                  ; DOS 3.3  FastOpen
 16477                                  
 16478                                  DELNXT:
 16479 0000259B C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16480 0000259F E80D18                  	call	GETENTRY		; Registers need to be reset
 16481 000025A2 7246                    	JC	short No_fileJ
 16482 000025A4 E84617                  	call	NEXTENT
 16483 000025A7 73A4                    	JNC	short DELFILE
 16484 000025A9 C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16485                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16486                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16487                                  	;;mov	al,[es:bp+0]
 16488                                  	; 15/12/2022
 16489 000025AD 268A4600                	MOV	AL,[ES:BP]
 16490 000025B1 E8C933                  	call	FLUSHBUF
 16491 000025B4 7234                    	JC	short No_fileJ
 16492                                  ;
 16493                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16494                                  ;
 16495                                  ;   not found not deleted		file not found
 16496                                  ;   not found	  deleted		*** impossible ***
 16497                                  ;	found not deleted		access denied (read-only)
 16498                                  ;	found	  deleted		no error
 16499                                  ;
 16500 000025B6 F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16501 000025BB 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16502                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16503                                  ; and to force the DOS to issue a media check.
 16504 000025BD F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16505 000025C2 741C                    	jz	short No_Set_Flag
 16506 000025C4 50                      	PUSH	AX
 16507 000025C5 06                      	PUSH	ES
 16508 000025C6 57                      	PUSH	DI
 16509 000025C7 C43E[A205]              	LES	DI,[THISCDS]
 16510 000025CB 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16511 000025CE 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16512 000025D1 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16513                                  	
 16514                                  	; MSDOS 6.0
 16515 000025D5 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16516 000025D7 E8C804                  	call	Set_Media_ID		;>32mb set volume id to boot record	 ;AN000;
 16517                                  	 
 16518 000025DA E82730                  	call	FATREAD_CDS		; force media check
 16519 000025DD 5F                      	POP	DI
 16520 000025DE 07                      	POP	ES
 16521 000025DF 58                      	POP	AX
 16522                                  No_Set_Flag:
 16523                                  	;call	LCritDisk		; carry is clear
 16524                                  	;retn
 16525                                  	; 18/12/2022
 16526 000025E0 E930ED                  	jmp	LCritDisk
 16527                                  DelError:
 16528 000025E3 F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16529 000025E8 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16530                                  No_fileJ:
 16531 000025EA E942FF                  	JMP	No_file ; 10/08/2018 		; Nope
 16532                                  Del_access_errJ:
 16533 000025ED E954FF                  	JMP	Del_access_err ; 10/08/2018
 16534                                  
 16535                                  ; 08/08/2018 - Retro DOS v3.0
 16536                                  
 16537                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16538                                  ;---------------------------------------------------------------------------
 16539                                  ; Procedure Name : REN_DEL_Check
 16540                                  ;
 16541                                  ; Inputs:
 16542                                  ;	[THISDPB] set
 16543                                  ;	[CURBUF+2]:BX points to entry
 16544                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16545                                  ;	[WFP_Start] points to name
 16546                                  ; Function:
 16547                                  ;	Check for Exclusive access on given file.
 16548                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16549                                  ; Outputs:
 16550                                  ;	ES:BP = [THISDPB]
 16551                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16552                                  ;		last element will be loaded from the directory entry.  This is
 16553                                  ;		so the name given to the sharer doesn't have any meta chars in
 16554                                  ;		it.
 16555                                  ;	Carry set if sharing violation, INT 24H generated
 16556                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16557                                  ;		This is because input AX is preserved.
 16558                                  ;		Caller must set the error if needed.
 16559                                  ;	Carry clear
 16560                                  ;		OK
 16561                                  ; AX,DS,BX,SI,DI preserved
 16562                                  ;---------------------------------------------------------------------------
 16563                                  
 16564                                  REN_DEL_Check:
 16565                                  
 16566 000025F0 1E                      	PUSH	DS
 16567 000025F1 57                      	PUSH	DI
 16568 000025F2 50                      	PUSH	AX
 16569 000025F3 53                      	PUSH	BX
 16570 000025F4 56                      	PUSH	SI		; Save CURBUF pointers
 16571                                  	
 16572 000025F5 16                      	push	ss
 16573 000025F6 07                      	pop	es
 16574                                  
 16575                                  ;hkn; context ES will assume ES to DOSDATA
 16576                                  ;hkn; ASSUME	ES:DOSGROUP
 16577                                  
 16578                                  ;hkn; SS override
 16579 000025F7 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16580 000025FC 89DE                    	MOV	SI,BX
 16581                                  
 16582                                  ;hkn; SS override
 16583 000025FE 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16584 00002603 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16585                                  	;ADD	BX,2		; Skip over d: to point to leading '\'
 16586                                  	; 31/01/2024
 16587 00002605 43                      	inc	bx
 16588 00002606 43                      	inc	bx
 16589 00002607 E8CCEB                  	call	StrLen		; CX is length of ES:DI including NUL
 16590 0000260A 49                      	DEC	CX		; Don't include nul in count
 16591 0000260B 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16592 0000260D E87146                  	call	SkipBack	; Back up one element
 16593 00002610 47                      	INC	DI		; Point to start of last element
 16594                                  
 16595                                  	; 17/05/2019 - Retro DOS v4.0
 16596                                  ;hkn; SS override
 16597                                  	; MSDOS 6.0
 16598 00002611 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16599                                  	;
 16600 00002616 E85FFA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16601 00002619 5E                      	POP	SI		; Get back entry pointers
 16602 0000261A 5B                      	POP	BX
 16603 0000261B 53                      	PUSH	BX
 16604 0000261C 56                      	PUSH	SI		; Back on stack
 16605                                  	
 16606 0000261D 16                      	push	ss
 16607 0000261E 1F                      	pop	ds
 16608                                  
 16609                                  ;hkn; context DS will assume ES to DOSDATA
 16610                                  ;hkn; ASSUME	DS:DOSGROUP
 16611                                  
 16612                                  ; Close the file if possible by us.
 16613                                  ;
 16614                                  ;if installed
 16615 0000261F FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16616                                  ;else
 16617                                  ;	Call	ShCloseFile
 16618                                  ;endif
 16619 00002623 8C1E[A005]              	MOV	[THISSFT+2],DS
 16620                                  
 16621                                  ;hkn; AUXSTACK is in DOSDATA
 16622 00002627 C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16623                                  				; Scratch space
 16624 0000262D 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16625 0000262F E84524                  	call	DOOPEN		; Fill in SFT for share check
 16626 00002632 C43E[9E05]              	LES	DI,[THISSFT]
 16627                                  	;mov	word [es:di+2],10h
 16628 00002636 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16629                                  				; requires exclusive access
 16630                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16631 0000263C 26C7050100              	mov	word [ES:DI],1
 16632 00002641 E8614C                  	call	ShareEnter
 16633 00002644 720D                    	jc	short CheckDone
 16634 00002646 C43E[9E05]              	LES	DI,[THISSFT]
 16635                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16636 0000264A 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16637                                  	
 16638 0000264F E84E4C                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16639 00002652 F8                      	CLC
 16640                                  CheckDone:
 16641 00002653 C42E[8A05]              	LES	BP,[THISDPB]
 16642 00002657 5E                      	POP	SI
 16643 00002658 5B                      	POP	BX
 16644 00002659 58                      	POP	AX
 16645 0000265A 5F                      	POP	DI
 16646 0000265B 1F                      	POP	DS
 16647 0000265C C3                      	retn
 16648                                  
 16649                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16650                                  ;---------------------------------------------------------------------------
 16651                                  ; Procedure Name : FastOpen_Delete
 16652                                  ; Inputs:
 16653                                  ;	None
 16654                                  ; Function:
 16655                                  ;	Call FastOpen to delete the dir info.
 16656                                  ; Outputs:
 16657                                  ;	None
 16658                                  ;---------------------------------------------------------------------------
 16659                                  
 16660                                  	; 31/01/2024
 16661                                  
 16662                                  FastOpen_Delete:
 16663 0000265D 9C                      	PUSHF			; save flag
 16664 0000265E 56                      	PUSH	SI		; save registers
 16665 0000265F 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16666 00002660 53                      	PUSH	BX
 16667 00002661 50                      	PUSH	AX
 16668                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16669                                  ;hkn; SS override
 16670                                  	; 17/05/2019 - Retro DOS v4.0
 16671                                  	; MSDOS 6.0
 16672 00002662 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16673                                  	
 16674 00002667 B003                    	MOV	AL,FONC_delete	; al = 3
 16675                                  
 16676                                  ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16677                                  %if 0 
 16678                                  fastinvoke:
 16679                                  ;hkn; FastTable is in DOSDATA
 16680                                  	MOV	BX,FastTable+2
 16681                                  	CALL	far [BX]	; call fastopen
 16682                                  	POP	AX		; restore registers
 16683                                  	POP	BX
 16684                                  	;pop	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16685                                  	POP	SI
 16686                                  	POPF			; restore flag
 16687                                  	retn
 16688                                  %else
 16689 00002669 EB0F                    	jmp	short fastinvoke ; 31/01/2024
 16690                                  %endif
 16691                                  
 16692                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16693                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16694                                  
 16695                                  	; 31/01/2024 Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 16696                                  	; DOSCODE:65B4h (MSDOS 6.22 MSDOS.SYS)
 16697                                  	; DOSCODE:6D07h (PCDOS 7.1 IBMDOS.COM)
 16698                                  
 16699                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16700                                  ;---------------------------------------------------------------------------
 16701                                  ; PROCEDURE Name : FastOpen_Rename
 16702                                  ;
 16703                                  ; Inputs:
 16704                                  ;	 REN_WFP   = Path Name
 16705                                  ;	 NAME1	   = New Name
 16706                                  ; Function:
 16707                                  ;	Call FastOpen to rename the dir entry in the cache
 16708                                  ; Outputs:
 16709                                  ;	None
 16710                                  ;---------------------------------------------------------------------------
 16711                                  
 16712                                  FastOpen_Rename:
 16713                                  	; 17/05/2019 - Retro DOS v4.0
 16714                                  	; 08/08/2018 - Retro DOS v3.0
 16715                                  	; MSDOS 6.0
 16716 0000266B 9C                      	PUSHF			;AN001 save flag
 16717 0000266C 56                      	PUSH	SI		;AN001 save registers
 16718 0000266D 57                      	PUSH	DI		;AN001
 16719 0000266E 53                      	PUSH	BX		;AN001
 16720 0000266F 50                      	PUSH	AX		;AN001
 16721                                  	;
 16722                                  ;hkn; SS override
 16723 00002670 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16724                                  
 16725                                  ;hkn; NAME1 is in DOSDATA
 16726 00002675 BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16727                                  	;mov	al,6
 16728 00002678 B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16729                                  
 16730                                  fastinvoke:	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16731                                  	
 16732                                  ;hkn; FastTable is in DOSDATA
 16733 0000267A BB[320D]                	MOV	BX,FastTable+2
 16734 0000267D FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16735                                  	
 16736 0000267F 58                      	POP	AX		; restore registers  ;AN001
 16737 00002680 5B                      	POP	BX				     ;AN001
 16738 00002681 5F                      	POP	DI				     ;AN001
 16739 00002682 5E                      	POP	SI				     ;AN001
 16740 00002683 9D                      	POPF			; restore flag	     ;AN001
 16741 00002684 C3                      	retn					     ;AN001
 16742                                  
 16743                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16744                                  ;---------------------------------------------------------------------------
 16745                                  ; Procedure Name : FastOpen_Update
 16746                                  ;
 16747                                  ; Inputs:
 16748                                  ;	DL     drive number (A=0,B=1,,,)
 16749                                  ;	CX     first cluster #
 16750                                  ;	AH     0 updates dir entry
 16751                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16752                                  ;	ES:DI  directory entry
 16753                                  ; Function:
 16754                                  ;	Call FastOpen to update the dir info.
 16755                                  ; Outputs:
 16756                                  ;	None
 16757                                  ;---------------------------------------------------------------------------
 16758                                  
 16759                                  FastOpen_Update:
 16760 00002685 9C                      	PUSHF			; save flag
 16761 00002686 56                      	PUSH	SI
 16762 00002687 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16763 00002688 53                      	PUSH	BX		; save regs
 16764 00002689 50                      	PUSH	AX
 16765 0000268A B004                    	MOV	AL,FONC_update	; al = 4
 16766 0000268C EBEC                    	JMP	short fastinvoke
 16767                                  
 16768                                  	; 17/05/2019
 16769                                  
 16770                                  	; MSDOS 6.0
 16771                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16772                                  ;---------------------------------------------------------------------------
 16773                                  Fast_Dispatch:
 16774                                  ;hkn; FastTable is in DOSDATA
 16775 0000268E BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16776                                  ;hkn; use SS override
 16777 00002691 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16778 00002694 C3                      	retn
 16779                                  
 16780                                  ;============================================================================
 16781                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16782                                  ;============================================================================
 16783                                  ; 08/08/2018 - Retro DOS v3.0
 16784                                  ; 17/05/2019 - Retro DOS v4.0
 16785                                  
 16786                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16787                                  ;	NAME	DOS_RENAME
 16788                                  
 16789                                  ;**	Low level routine for renaming files
 16790                                  ;----------------------------------------------------------------------------
 16791                                  ;	DOS_RENAME
 16792                                  ;
 16793                                  ;	Modification history:
 16794                                  ;
 16795                                  ;	    Created: ARR 30 March 1983
 16796                                  
 16797                                  ;----------------------------------------------------------------------------
 16798                                  ;
 16799                                  ; Procedure Name : DOS_RENAME
 16800                                  ;
 16801                                  ; Inputs:
 16802                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16803                                  ;		chars, NUL terminated)
 16804                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16805                                  ;		( = -1 if current dir not involved, else
 16806                                  ;		 Points to first char after last "/" of current dir part)
 16807                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16808                                  ;		chars, NUL terminated)
 16809                                  ;	[THISCDS] Points to CDS being used
 16810                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16811                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16812                                  ; Function:
 16813                                  ;	Rename the specified file(s)
 16814                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16815                                  ; Outputs:
 16816                                  ;	CARRY CLEAR
 16817                                  ;	    OK
 16818                                  ;	CARRY SET
 16819                                  ;	    AX is error code
 16820                                  ;		error_file_not_found
 16821                                  ;			No match for source, or dest path invalid
 16822                                  ;		error_not_same_device
 16823                                  ;			Source and dest are on different devices
 16824                                  ;		error_access_denied
 16825                                  ;			Directory specified (not simple rename),
 16826                                  ;			Device name given, Destination exists.
 16827                                  ;			NOTE: In third case some renames may have
 16828                                  ;			 been done if metas.
 16829                                  ;		error_path_not_found
 16830                                  ;			Bad path (not in curr dir part if present)
 16831                                  ;			SOURCE ONLY
 16832                                  ;		error_bad_curr_dir
 16833                                  ;			Bad path in current directory part of path
 16834                                  ;			SOURCE ONLY
 16835                                  ;		error_sharing_violation
 16836                                  ;			Deny both access required, generates an INT 24.
 16837                                  ; DS preserved, others destroyed
 16838                                  ;
 16839                                  ;----------------------------------------------------------------------------
 16840                                  
 16841                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16842                                  
 16843                                  	; 31/01/2024
 16844                                  
 16845                                  DOS_RENAME:
 16846                                  
 16847                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16848                                  ;hkn; at this point to DOSDATA.
 16849                                  
 16850 00002695 E89EEB                  	call	TestNet
 16851 00002698 7306                    	JNC	short LOCAL_RENAME
 16852                                  
 16853                                  ;IF NOT Installed
 16854                                  ;	transfer NET_RENAME
 16855                                  ;ELSE
 16856                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16857                                  	;INT	2FH
 16858                                  	;return
 16859                                  
 16860 0000269A B81111                  	mov     ax, 1111h
 16861 0000269D CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16862                                  			; SS = DS = DOS CS, 
 16863                                  			; SDA first filename pointer = offset of fully-qualified old name
 16864                                  			; SDA CDS pointer -> current directory
 16865                                  			; Return: CF set on error
 16866 0000269F C3                      	retn
 16867                                  ;ENDIF
 16868                                  
 16869                                  LOCAL_RENAME:
 16870 000026A0 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16871 000026A5 8B36[B205]              	MOV	SI,[WFP_START]
 16872 000026A9 8B3E[B405]              	MOV	DI,[REN_WFP]
 16873 000026AD 8A04                    	MOV	AL,[SI]
 16874 000026AF 8A25                    	MOV	AH,[DI]
 16875 000026B1 0D2020                  	OR	AX,2020H		; Lower case
 16876 000026B4 38E0                    	CMP	AL,AH
 16877 000026B6 7405                    	JZ	short SAMEDRV
 16878 000026B8 B81100                  	MOV	AX,error_not_same_device ; 11h
 16879 000026BB F9                      	STC
 16880 000026BC C3                      	retn
 16881                                  
 16882                                  SAMEDRV:
 16883 000026BD FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16884 000026C1 FF36[2C03]              	PUSH	WORD [DMAADD]
 16885 000026C5 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16886                                  
 16887                                  ;hkn; RENAMEDMA is in DOSDATA
 16888 000026C9 C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16889 000026CF C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16890 000026D4 E821EC                  	call	ECritDisk
 16891 000026D7 E8EE05                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16892                                  					;    points to entry
 16893 000026DA 7314                    	JNC	short Check_Dev
 16894 000026DC 83F812                  	CMP	AX,error_no_more_files ; 12h
 16895 000026DF 7503                    	JNZ	short GOTERR
 16896 000026E1 B80200                  	MOV	AX,error_file_not_found ; 2
 16897                                  GOTERR:
 16898 000026E4 F9                      	STC
 16899                                  RENAME_POP:
 16900 000026E5 8F06[2C03]              	POP	WORD [DMAADD]
 16901 000026E9 8F06[2E03]              	POP	WORD [DMAADD+2]
 16902                                  	;call	LCritDisk
 16903                                  	;retn
 16904                                  	; 16/12/2022
 16905 000026ED E923EC                  	jmp	LCritDisk
 16906                                  
 16907                                  Check_Dev:
 16908                                  	; 17/05/2019 - Retro DOS v4.0
 16909                                  	;mov	ax,5
 16910 000026F0 B80500                  	MOV	AX,error_access_denied	; Assume error
 16911                                  	
 16912                                  	; MSDOS 6.0
 16913 000026F3 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16914 000026F4 C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  check if source a dir  ;AN000;
 16915                                  	;add	si,21
 16916 000026F8 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16917                                  	;test	byte [si+11],10h
 16918 000026FB F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16919 000026FF 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16920 00002701 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16921 00002705 E8ECFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16922                                  notdir:
 16923 00002708 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16924 00002709 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16925                                  
 16926                                  	; MSDOS 3.3 & MSDOS 6.0
 16927 0000270B 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16928 00002710 75D2                    	JNZ	short GOTERR
 16929                                  
 16930                                  ; At this point a source has been found. There is search continuation info (a
 16931                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16932                                  ; directory entry found.
 16933                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16934                                  ; throughout the RENAME since it is known at this point that the source and
 16935                                  ; destination are both on the same device.
 16936                                  ; [SATTRIB] is also set.
 16937                                  
 16938 00002712 89DE                    	MOV	SI,BX
 16939                                  	;add	si,26
 16940 00002714 83C61A                  	ADD	SI,dir_entry.dir_first
 16941 00002717 E8D6FE                  	call	REN_DEL_Check
 16942 0000271A 7305                    	JNC	short REN_OK1
 16943 0000271C B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16944 0000271F EBC4                    	JMP	short RENAME_POP
 16945                                  
 16946                                  ;------------------------------------------------------------------------------
 16947                                  ; Check if the source is a file or directory. If file, delete the entry
 16948                                  ; from the Fastopen cache. If directory, rename it later
 16949                                  ;------------------------------------------------------------------------------
 16950                                  
 16951                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 16952                                  	; MSDOS 6.0
 16953                                  	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16954                                  	;PUSH	SI
 16955 00002721 C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 16956                                  	;add	si,21
 16957 00002725 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16958                                  	;test	byte [si+11],10h
 16959 00002728 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 16960                                  	;JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 16961 0000272C 7503                    	jnz	short SWAP_SOURCE ; 31/01/2024
 16962                                  	;POP	SI			;BN00X
 16963                                  	;JMP	SHORT SWAP_SOURCE	;BN00X
 16964                                  ;NOT_DIR1:				;;BN00X it is a file, delete the entry
 16965                                  	;POP	SI
 16966                                  
 16967                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16968 0000272E E82CFF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 16969                                  SWAP_SOURCE:
 16970                                  	; MSDOS 3.3
 16971                                  	;MOV	SI,[REN_WFP]
 16972                                  	;MOV	[WFP_START],SI
 16973                                  	; MSDOS 6.0
 16974 00002731 A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 16975 00002734 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 16976 00002738 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 16977 0000273C A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 16978                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16979 0000273F C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 16980                                  	;mov	word [CREATING],0E5FFh
 16981 00002745 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 16982                                  					; A rename is like a CREATE_NEW as far
 16983                                  					; as the destination is concerned.
 16984 0000274B E8F616                  	call	GetPathNoSet
 16985                                  
 16986                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 16987                                  ;   since no files match the destination name. If it fails for any other
 16988                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 16989                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 16990                                  ;   if the rename should fail because we haven't built an explicit name by
 16991                                  ;   substituting for the meta chars in it. In this case the destination file
 16992                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 16993                                  ;   in the directory entry part.
 16994                                  	
 16995 0000274E 7223                    	JC	short NODEST
 16996                                  	
 16997                                  	; MSDOS 6.0
 16998                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 16999                                  	; !! MSDOS 3.3 !!
 17000                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 17001                                  
 17002 00002750 08E4                    	OR	AH,AH			; Device?
 17003 00002752 792C                    	JNS	short SAVEDEST		; No, continue
 17004                                  BAD_ACC:
 17005 00002754 B80500                  	MOV	AX,error_access_denied
 17006 00002757 F9                      	STC
 17007                                  RENAME_CLEAN:
 17008 00002758 9C                      	PUSHF				; Save carry state
 17009 00002759 50                      	PUSH	AX			; and error code (if carry set)
 17010 0000275A A0[7605]                	MOV	AL,[THISDRV]
 17011 0000275D E81D32                  	call	FLUSHBUF
 17012 00002760 58                      	POP	AX
 17013 00002761 803E[4A03]00            	CMP	byte [FAILERR],0
 17014 00002766 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 17015 00002768 9D                      	POPF
 17016 00002769 E979FF                  	JMP	RENAME_POP
 17017                                  
 17018                                  BAD_ERR:
 17019 0000276C 58                      	POP	AX			; Saved flags
 17020                                  	; 16/12/202
 17021                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17022                                  BAD_PATH: ; *
 17023 0000276D B80300                  	MOV	AX,error_path_not_found
 17024 00002770 E971FF                  	JMP	GOTERR
 17025                                  
 17026                                  NODEST:
 17027 00002773 75F8                    	JNZ	short BAD_PATH
 17028 00002775 803E[4A03]00            	CMP	byte [FAILERR],0
 17029 0000277A 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 17030                                  					; because user FAILed on I 24
 17031                                  	; 14/11/2022
 17032 0000277C 08C9                    	OR	CL,CL
 17033                                  	;JNZ	short SAVEDEST
 17034                                  	; 17/05/2019
 17035 0000277E 74ED                    	jz	short BAD_PATH ; *
 17036                                  ;BAD_PATH: ; *
 17037                                  ;	MOV	AX,error_path_not_found
 17038                                  ;	;STC
 17039                                  ;	;JMP	RENAME_POP
 17040                                  ;	; 17/05/2019
 17041                                  ;	jmp	GOTERR 
 17042                                  
 17043                                  ; 16/12/2022
 17044                                  %if 0
 17045                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17046                                  	or	cl,cl
 17047                                  	jnz	short SAVEDEST
 17048                                  	;jz	short BAD_PATH ; *
 17049                                  BAD_PATH: ; *
 17050                                  	;mov	ax,3
 17051                                  	mov	ax,error_path_not_found
 17052                                  	stc
 17053                                  	jmp	RENAME_POP
 17054                                  %endif
 17055                                  
 17056                                  SAVEDEST:
 17057 00002780 16                      	push	ss
 17058 00002781 07                      	pop	es
 17059                                  
 17060                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 17061 00002782 BF[5705]                	MOV	DI,NAME2
 17062 00002785 BE[4B05]                	MOV	SI,NAME1
 17063                                  
 17064 00002788 B90B00                  	MOV	CX,11
 17065 0000278B F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 17066 0000278D A1[C205]                	MOV	AX,[DIRSTART]
 17067 00002790 A3[6405]                	MOV	[DESTSTART],AX
 17068                                  BUILDDEST:
 17069                                  	; 31/01/2024
 17070                                  	;push	ss
 17071                                  	;pop	es			; needed due to JMP BUILDDEST below
 17072                                  
 17073                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 17074 00002793 BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 17075 00002796 BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 17076 00002799 BE[5705]                	MOV	SI,NAME2		; Raw dest
 17077                                  
 17078 0000279C B90B00                  	MOV	CX,11
 17079                                  
 17080                                  	; 17/05/2019 - Retro DOS v4.0
 17081                                  	
 17082                                  	; MSDOS 6.0
 17083 0000279F E81101                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 17084                                  
 17085                                  	; MSDOS 3.3
 17086                                  
 17087                                  ; 08/08/2018 - Retro DOS v3.0
 17088                                  ; MSDOS 6.0 
 17089                                  ;---------------------------------------------------------------------------
 17090                                  ;Procedure: NEW_RENAME
 17091                                  ;
 17092                                  ;Input: DS:SI -> raw string with ?
 17093                                  ;	ES:DI -> destination string
 17094                                  ;	DS:BX -> source string
 17095                                  ;Function: replace ? chars of raw string with chars in source string and
 17096                                  ;	   put in destination string
 17097                                  ;Output: ES:DI-> new string
 17098                                  ;---------------------------------------------------------------------------
 17099                                  ;
 17100                                  ;NEW_RENAME:
 17101                                  ;NEWNAM:
 17102                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 17103                                  ;	LODSB
 17104                                  ;	CMP	AL,"?"
 17105                                  ;	JNZ	short NOCHG
 17106                                  ;	MOV	AL,[BX] 		; Get replace char
 17107                                  ;NOCHG:
 17108                                  ;	STOSB
 17109                                  ;	INC	BX			; Next replace char
 17110                                  ;	LOOP	NEWNAM
 17111                                  ;	; MSDOS 6.0
 17112                                  ;	;retn
 17113                                  
 17114                                  	; MSDOS 3.3 & MSDOS 6.0
 17115                                  	;mov	byte [ATTRIB],16h
 17116 000027A2 C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 17117 000027A7 C606[7E05]FF            	MOV	byte [CREATING],0FFH
 17118 000027AC E84419                  	call	DEVNAME 		; Check if we built a device name
 17119 000027AF 73A3                    	JNC	short BAD_ACC
 17120 000027B1 8B1E[6405]              	MOV	BX,[DESTSTART]
 17121 000027B5 C42E[8A05]              	LES	BP,[THISDPB]
 17122 000027B9 E82516                  	call	SETDIRSRCH		; Reset search to start of dir
 17123 000027BC 7296                    	JC	short BAD_ACC 		; Screw up
 17124 000027BE E8E214                  	call	FINDENTRY		; See if new name already exists
 17125 000027C1 7391                    	JNC	short BAD_ACC 		; Error if found
 17126 000027C3 803E[4A03]00            	CMP	byte [FAILERR],0
 17127 000027C8 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 17128 000027CA A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 17129 000027CD 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 17130 000027D1 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 17131                                  
 17132                                  	;mov	al,[RENAMEDMA+32]
 17133 000027D3 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 17134 000027D6 A810                    	TEST	AL,attr_directory ; 10h
 17135 000027D8 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 17136                                  					; otherwise the . and .. entries get
 17137                                  					; wiped.
 17138 000027DA A2[6B05]                	MOV	[ATTRIB],AL
 17139 000027DD 8C1E[A005]              	MOV	[THISSFT+2],DS
 17140                                  
 17141                                  ;hkn; AUXSTACK is in DOSDATA
 17142                                  	;mov	si,RENAMEDMA+145h
 17143 000027E1 BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 17144 000027E4 8936[9E05]              	MOV	[THISSFT],SI
 17145                                  	;mov	word [SI+2],2
 17146 000027E8 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17147 000027ED 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 17148 000027EF E8ED20                  	call	RENAME_MAKE		; This is in mknode
 17149 000027F2 7303                    	JNC	short GOT_DEST
 17150                                  BAD_ACCJ:
 17151 000027F4 E95DFF                  	JMP	BAD_ACC
 17152                                  
 17153                                  GOT_DEST:
 17154 000027F7 53                      	push	bx
 17155 000027F8 C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 17156 000027FC E8A14A                  	call	ShareEnd		; we need to remove it.
 17157 000027FF 5B                      	pop	bx
 17158                                  
 17159                                  ; A zero length entry with the correct new name has now been made at
 17160                                  ;   [CURBUF+2]:BX.
 17161                                  
 17162 00002800 C43E[E205]              	LES	DI,[CURBUF]
 17163                                  
 17164                                  	; MSDOS 6.0
 17165                                  	;test	byte [es:di+5],40h
 17166 00002804 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17167                                  					;LB. if already dirty		  ;AN000;
 17168 00002809 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 17169 0000280B E87432                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17170                                  	;or	byte [es:di+5],40h
 17171 0000280E 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17172                                  yesdirty1:
 17173 00002813 89DF                    	MOV	DI,BX
 17174                                  	;add	di,11
 17175 00002815 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 17176                                  
 17177                                  ;hkn; RENAMEDMA is in DOSDATA
 17178                                  	;mov	si,[RENAMEDMA+32]
 17179 00002818 BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 17180                                  	;mov	cx,21
 17181 0000281B B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 17182 0000281E F3A4                    	REP	MOVSB
 17183 00002820 E87A00                  	CALL	GET_SOURCE
 17184 00002823 7275                    	JC	short RENAME_OVER
 17185 00002825 89DF                    	MOV	DI,BX
 17186 00002827 8E06[E405]              	MOV	ES,[CURBUF+2]
 17187 0000282B B0E5                    	MOV	AL,DIRFREE ; 0E5h
 17188 0000282D AA                      	STOSB				; "free" the source
 17189 0000282E EB13                    	JMP	SHORT DIRTY_IT
 17190                                  
 17191                                  SIMPLE_RENAME:
 17192 00002830 E86A00                  	CALL	GET_SOURCE		; Get the source back
 17193 00002833 7265                    	JC	short RENAME_OVER
 17194 00002835 89DF                    	MOV	DI,BX
 17195 00002837 8E06[E405]              	MOV	ES,[CURBUF+2]
 17196                                  
 17197                                  ;hkn; NAME1 is in DOSDATA
 17198 0000283B BE[4B05]                	MOV	SI,NAME1		; New Name
 17199 0000283E B90B00                  	MOV	CX,11
 17200 00002841 F3A4                    	REP	MOVSB
 17201                                  DIRTY_IT:
 17202 00002843 8B3E[E205]              	MOV	DI,[CURBUF]
 17203                                  
 17204                                  	; MSDOS 6.0
 17205 00002847 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17206                                  					;LB. if already dirty		  ;AN000;
 17207 0000284C 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 17208 0000284E E83132                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17209                                  	
 17210 00002851 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17211                                  
 17212                                  ;------------------------------------------------------------------------------
 17213                                  ; Check if the source is a directory of file. If directory rename it to the
 17214                                  ; the new name in the Fastopen cache buffer. If file name it has been
 17215                                  ; previously deleted.
 17216                                  ;------------------------------------------------------------------------------
 17217                                  
 17218                                  yesdirty2:
 17219                                  	; MSDOS 6.0
 17220 00002856 56                      	PUSH	SI
 17221 00002857 C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 17222 0000285B 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 17223 0000285E F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 17224 00002862 7403                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 17225 00002864 E804FE                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 17226                                  	; 31/01/2024
 17227                                  	;POP	SI
 17228                                  	;JMP	SHORT NOT_DIRTY1
 17229                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 17230 00002867 5E                      	POP	SI
 17231                                  NOT_DIRTY1:				;;BN00X
 17232                                  NEXT_SOURCE:
 17233                                  ;hkn; RENAMEDMA is in DOSDATA
 17234 00002868 BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 17235                                  
 17236                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 17237                                  ; to enter it before going to RENAME_Next.
 17238                                  
 17239 0000286B E88AEA                  	call	ECritDisk
 17240 0000286E C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 17241                                  				  ;  to FF when we made the prev new file).
 17242 00002873 E89405                  	call	RENAME_NEXT
 17243                                  
 17244                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 17245                                  ; we were before.
 17246                                  
 17247 00002876 7222                    	JC	short RENAME_OVER
 17248                                  
 17249                                  	;lea	si,[bx+26]
 17250 00002878 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 17251 0000287B E872FD                  	call	REN_DEL_Check
 17252 0000287E 7306                    	JNC	short REN_OK2
 17253 00002880 B82000                  	MOV	AX,error_sharing_violation ; 20h
 17254                                  jmp_to_rename_clean: ; 28/12/2022
 17255 00002883 E9D2FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 17256                                  
 17257                                  ;------------------------------------------------------------------------------
 17258                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 17259                                  ; if directory, rename directory name in the Fastopen cache.
 17260                                  ;-----------------------------------------------------------------------------
 17261                                  
 17262                                  REN_OK2:
 17263                                  	; MSDOS 6.0
 17264                                  	;mov	al,[RERNAMEDMA+32]
 17265 00002886 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 17266                                  	;test	al,10h
 17267 00002889 A810                    	TEST	AL,attr_directory	;;BN00X directory
 17268 0000288B 7408                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 17269                                  	
 17270                                  	; MSDOS 3.3 & MSDOS 6.0
 17271 0000288D E8CDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 17272                                  jmp_to_builddest: ; 28/12/2022
 17273                                  	; 31/01/2024
 17274 00002890 16                      	push	ss
 17275 00002891 07                      	pop	es
 17276 00002892 E9FEFE                  	JMP	BUILDDEST		;;BN00X
 17277                                  
 17278                                  	; MSDOS 6.0
 17279                                  Ren_Directory:
 17280 00002895 E8D3FD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 17281                                  	;JMP	BUILDDEST
 17282                                  	; 28/12/2022
 17283 00002898 EBF6                    	jmp	short jmp_to_builddest
 17284                                  
 17285                                  RENAME_OVER:
 17286 0000289A F8                      	CLC
 17287                                  	;JMP	RENAME_CLEAN ; 10/08/2018
 17288                                  	; 28/12/2022
 17289 0000289B EBE6                    	jmp	short jmp_to_rename_clean
 17290                                  
 17291                                  ;----------------------------------------------------------------------------
 17292                                  ; Procedure: GET_SOURCE
 17293                                  ;
 17294                                  ; Inputs:
 17295                                  ;	RENAMEDMA has source info
 17296                                  ; Function:
 17297                                  ;	Re-find the source
 17298                                  ; Output:
 17299                                  ;	[CURBUF] set
 17300                                  ;	[CURBUF+2]:BX points to entry
 17301                                  ;	Carry set if error (currently user FAILed to I 24)
 17302                                  ; DS preserved, others destroyed
 17303                                  ;----------------------------------------------------------------------------
 17304                                  
 17305                                  GET_SOURCE:
 17306 0000289D 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 17307 000028A1 C42E[8A05]              	LES	BP,[THISDPB]
 17308 000028A5 E83915                  	call	SETDIRSRCH
 17309 000028A8 7214                    	JC	short gs_ret_label	; retc
 17310 000028AA E82518                  	call	STARTSRCH
 17311 000028AD A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 17312                                  	;call	GETENT
 17313                                  	; 18/12/2022
 17314 000028B0 E9FF14                  	jmp	GETENT
 17315                                  ;gs_ret_label:
 17316                                  	;retn
 17317                                  
 17318                                  ; MSDOS 6.0 
 17319                                  ;---------------------------------------------------------------------------
 17320                                  ;Procedure: NEW_RENAME
 17321                                  ;
 17322                                  ;Input: DS:SI -> raw string with ?
 17323                                  ;	ES:DI -> destination string
 17324                                  ;	DS:BX -> source string
 17325                                  ;Function: replace ? chars of raw string with chars in source string and
 17326                                  ;	   put in destination string
 17327                                  ;Output: ES:DI-> new string
 17328                                  ;---------------------------------------------------------------------------
 17329                                  
 17330                                  NEW_RENAME:
 17331                                  	; 17/05/2019 - Retro DOS v4.0
 17332                                  NEWNAM:
 17333                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 17334 000028B3 AC                      	LODSB
 17335 000028B4 3C3F                    	CMP	AL,"?" ; 3Fh
 17336 000028B6 7502                    	JNZ	short NOCHG
 17337 000028B8 8A07                    	MOV	AL,[BX] 		; Get replace char
 17338                                  NOCHG:
 17339 000028BA AA                      	STOSB
 17340 000028BB 43                      	INC	BX			; Next replace char
 17341 000028BC E2F5                    	LOOP	NEWNAM
 17342                                  	; MSDOS 6.0
 17343                                  gs_ret_label:	; 18/12/2022
 17344 000028BE C3                      	retn
 17345                                  
 17346                                  ;============================================================================
 17347                                  ; FINFO.ASM, MSDOS 6.0, 1991
 17348                                  ;============================================================================
 17349                                  ; 08/08/2018 - Retro DOS v3.0
 17350                                  ; 17/05/2019 - Retro DOS v4.0
 17351                                  
 17352                                  ;**	Low level routines for returning file information and setting file
 17353                                  ;	attributes
 17354                                  ;
 17355                                  ;	GET_FILE_INFO
 17356                                  ;	SET_FILE_ATTRIBUTE
 17357                                  ;
 17358                                  ;	Modification history:
 17359                                  ;
 17360                                  ;	    Created: ARR 30 March 1983
 17361                                  ;
 17362                                  ;	M025: Return access_denied if attempting to set
 17363                                  ;	      attribute of root directory.
 17364                                  ;
 17365                                  
 17366                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 17367                                  
 17368                                  ;---------------------------------------------------------------------------
 17369                                  ; Procedure Name : GET_FILE_INFO
 17370                                  ;
 17371                                  ; Inputs:
 17372                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17373                                  ;		terminated)
 17374                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17375                                  ;		( = -1 if current dir not involved, else
 17376                                  ;		 Points to first char after last "/" of current dir part)
 17377                                  ;	[THISCDS] Points to CDS being used
 17378                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17379                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17380                                  ; Function:
 17381                                  ;	Get Information about a file
 17382                                  ; Returns:
 17383                                  ;	CARRY CLEAR
 17384                                  ;	    AX = Attribute of file
 17385                                  ;	    CX = Time stamp of file
 17386                                  ;	    DX = Date stamp of file
 17387                                  ;	    BX:DI = Size of file (32 bit)
 17388                                  ;	CARRY SET
 17389                                  ;	    AX is error code
 17390                                  ;		error_file_not_found
 17391                                  ;			Last element of path not found
 17392                                  ;		error_path_not_found
 17393                                  ;			Bad path (not in curr dir part if present)
 17394                                  ;		error_bad_curr_dir
 17395                                  ;			Bad path in current directory part of path
 17396                                  ; DS preserved, others destroyed
 17397                                  ;---------------------------------------------------------------------------
 17398                                  
 17399                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17400                                  
 17401                                  GET_FILE_INFO:
 17402                                  
 17403                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 17404                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17405                                  
 17406 000028BF E874E9                  	call	TestNet
 17407 000028C2 7306                    	JNC	short LOCAL_INFO
 17408                                  
 17409                                  ;IF NOT Installed
 17410                                  ;	transfer NET_GET_FILE_INFO
 17411                                  ;ELSE
 17412                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 17413                                  ;	INT	2FH
 17414                                  ;	return
 17415                                  
 17416 000028C4 B80F11                  	mov     ax, 110Fh
 17417 000028C7 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 17418                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17419                                  			; SDA CDS pointer -> current directory
 17420                                  			; Return: CF set on error, AX = file attributes
 17421 000028C9 C3                      	retn
 17422                                  ;ENDIF
 17423                                  
 17424                                  LOCAL_INFO:
 17425 000028CA E82BEA                  	call	ECritDisk
 17426 000028CD C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17427                                  	; MSDOS 3.3
 17428                                  	;call	GETPATH
 17429                                  	; MSDOS 6.0
 17430 000028D2 E8D700                  	call	GET_FAST_PATH
 17431                                  	; MSDOS 3.3 & MSDOS 6.0
 17432 000028D5 7312                    	JNC	short info_check_dev
 17433                                  NO_PATH:
 17434 000028D7 750B                    	JNZ	short bad_path1
 17435 000028D9 08C9                    	OR	CL,CL
 17436 000028DB 7407                    	JZ	short bad_path1
 17437                                  info_no_file:
 17438 000028DD B80200                  	MOV	AX,error_file_not_found
 17439                                  BadRet:
 17440 000028E0 F9                      	STC
 17441                                  JustRet:
 17442                                  	;call	LCritDisk
 17443                                  	;retn
 17444                                  	; 18/12/2022
 17445 000028E1 E92FEA                  	jmp	LCritDisk
 17446                                  
 17447                                  bad_path1:
 17448 000028E4 B80300                  	MOV	AX,error_path_not_found
 17449 000028E7 EBF7                    	jmp	short BadRet
 17450                                  
 17451                                  info_check_dev:
 17452 000028E9 08E4                    	OR	AH,AH
 17453 000028EB 78F0                    	JS	short info_no_file	; device
 17454                                  
 17455                                  	; MSDOS 6.0
 17456                                  ;SR;
 17457                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 17458                                  ;for a root dir
 17459                                  
 17460 000028ED 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 17461 000028F2 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 17462                                  
 17463 000028F4 30E4                    	xor	ah,ah
 17464 000028F6 B010                    	mov	al,attr_directory ; 10h
 17465                                  	;clc
 17466                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17467                                  	; (DOSCODE:683Eh)
 17468                                  	; 16/12/2022
 17469                                  	;clc
 17470 000028F8 EBE7                    	jmp	short JustRet
 17471                                  
 17472                                  not_root:
 17473                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17474 000028FA 1E                      	PUSH	DS
 17475 000028FB 8E1E[E405]              	MOV	DS,[CURBUF+2]
 17476 000028FF 89DE                    	MOV	SI,BX
 17477 00002901 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 17478 00002903 89DF                    	MOV	DI,BX
 17479                                  	;mov	cx,[si+16h]
 17480 00002905 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 17481                                  	;mov	dx,[si+18h]
 17482 00002908 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 17483 0000290B 30E4                    	XOR	AH,AH
 17484                                  	;mov	al,[si+0Bh]
 17485 0000290D 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 17486                                  	;test	al,10h
 17487 00002910 A810                    	TEST	AL,attr_directory
 17488 00002912 7506                    	JNZ	short NO_SIZE
 17489                                  	;mov	di,[si+1Ch]
 17490 00002914 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 17491                                  	;mov	bx,[si+1Eh]
 17492 00002917 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 17493                                  NO_SIZE:
 17494 0000291A 1F                      	POP	DS
 17495                                  	;CLC
 17496                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17497                                  	; (DOSCODE:6864h)
 17498                                  	; 16/12/2022
 17499                                  	;clc
 17500 0000291B EBC4                    	jmp	short JustRet
 17501                                  
 17502                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17503                                  ;-------------------------------------------------------------------------------
 17504                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17505                                  ; Inputs:
 17506                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17507                                  ;		terminated)
 17508                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17509                                  ;		( = -1 if current dir not involved, else
 17510                                  ;		 Points to first char after last "/" of current dir part)
 17511                                  ;	[THISCDS] Points to CDS being used
 17512                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17513                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17514                                  ;	AX is new attributes to give to file
 17515                                  ; Function:
 17516                                  ;	Set File Attributes
 17517                                  ; Returns:
 17518                                  ;	CARRY CLEAR
 17519                                  ;	    No error
 17520                                  ;	CARRY SET
 17521                                  ;	    AX is error code
 17522                                  ;		error_file_not_found
 17523                                  ;			Last element of path not found
 17524                                  ;		error_path_not_found
 17525                                  ;			Bad path (not in curr dir part if present)
 17526                                  ;		error_bad_curr_dir
 17527                                  ;			Bad path in current directory part of path
 17528                                  ;		error_access_denied
 17529                                  ;			Attempt to set an attribute which cannot be set
 17530                                  ;			(attr_directory, attr_volume_ID)
 17531                                  ;		error_sharing_violation
 17532                                  ;			Sharing mode of file did not allow the change
 17533                                  ;			(this request requires exclusive write/read access)
 17534                                  ;			(INT 24H generated)
 17535                                  ; DS preserved, others destroyed
 17536                                  ;----------------------------------------------------------------------------
 17537                                  
 17538                                  SET_FILE_ATTRIBUTE:
 17539                                  
 17540                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17541                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17542                                  
 17543 0000291D A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17544 00002920 7414                    	JZ	short set_look
 17545                                  _BAD_ACC:
 17546 00002922 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17547 00002927 C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17548 0000292C C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17549 00002931 B80500                  	MOV	AX,error_access_denied ; 5
 17550 00002934 F9                      	STC
 17551 00002935 C3                      	retn
 17552                                  
 17553                                  set_look:
 17554 00002936 E8FDE8                  	call	TestNet
 17555 00002939 7308                    	JNC	short LOCAL_SET
 17556                                  
 17557                                  ;IF NOT Installed
 17558                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17559                                  ;ELSE
 17560 0000293B 50                      	PUSH	AX
 17561                                  	
 17562                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17563                                  	;INT	2FH
 17564                                  
 17565 0000293C B80E11                  	mov     ax, 110Eh
 17566 0000293F CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17567                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17568                                  			; SDA CDS pointer -> current directory
 17569                                  			; STACK: WORD new file attributes
 17570                                  			; Return: CF set on error
 17571                                  
 17572 00002941 5B                      	POP	BX			; clean stack
 17573 00002942 C3                      	retn
 17574                                  ;ENDIF
 17575                                  
 17576                                  LOCAL_SET:
 17577 00002943 E8B2E9                  	call	ECritDisk
 17578 00002946 50                      	PUSH	AX			; Save new attributes
 17579 00002947 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17580 0000294C E8EF14                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17581 0000294F 7308                    	JNC	short set_check_device
 17582 00002951 5B                      	POP	BX			; Clean stack (don't zap AX)
 17583 00002952 EB83                    	JMP	short NO_PATH
 17584                                  
 17585                                  	; MSDOS 6.0
 17586                                  cannot_set_root:			; M025:
 17587 00002954 B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17588                                  	;stc				; M025: to set attr. of root
 17589                                  	;jmp	short OK_BYE		; M025:
 17590                                  	; 01/02/2024
 17591 00002957 EB87                    	jmp	short BadRet
 17592                                  
 17593                                  set_check_device:
 17594 00002959 08E4                    	OR	AH,AH
 17595 0000295B 7906                    	JNS	short set_check_share
 17596 0000295D 58                      	POP	AX
 17597 0000295E E8B2E9                  	call	LCritDisk
 17598 00002961 EBBF                    	JMP	short _BAD_ACC 		; device
 17599                                  
 17600                                  set_check_share:
 17601 00002963 58                      	POP	AX			; Get new attributes
 17602                                  
 17603                                  	; MSDOS 6.0
 17604 00002964 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17605 00002969 74E9                    	je	short cannot_set_root	; M025: Y: return error
 17606                                  
 17607                                  	; MSDOS 3.3 & MSDOS 6.0
 17608 0000296B E882FC                  	call	REN_DEL_Check
 17609 0000296E 7305                    	JNC	short set_do
 17610 00002970 B82000                  	MOV	AX,error_sharing_violation ; 32
 17611 00002973 EB34                    	jmp	short OK_BYE
 17612                                  
 17613                                  set_do:
 17614                                  	; MSDOS 3.3 & MSDOS 6.0
 17615 00002975 C43E[E205]              	LES	DI,[CURBUF]
 17616 00002979 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17617 0000297E 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17618                                  
 17619                                  	; MSDOS 6.0
 17620 00002982 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17621                                  					;LB. if already dirty		  ;AN000;
 17622 00002987 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17623 00002989 E8F630                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17624                                  	
 17625 0000298C 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17626                                  yesdirty3:
 17627 00002991 A0[7605]                	MOV	AL,[THISDRV]
 17628                                  ;;;; 10/1/86 F.C update fastopen cache
 17629 00002994 52                      	PUSH	DX
 17630 00002995 57                      	PUSH	DI
 17631 00002996 B400                    	MOV	AH,0		  ; dir entry update
 17632 00002998 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17633 0000299A 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17634 0000299C E8E6FC                  	call	FastOpen_Update
 17635 0000299F 5F                      	POP	DI
 17636 000029A0 5A                      	POP	DX
 17637                                  ;;;; 9/11/86 F.C update fastopen cache
 17638 000029A1 E8D92F                  	call	FLUSHBUF
 17639 000029A4 7303                    	JNC	short OK_BYE
 17640 000029A6 B80200                  	MOV	AX,error_file_not_found
 17641                                  OK_BYE:
 17642                                  	;call	LCritDisk
 17643                                  	;retn
 17644                                  	; 16/12/2022
 17645 000029A9 E967E9                  	jmp	LCritDisk
 17646                                  
 17647                                  	; 17/05/2019 - Retro DOS v4.0
 17648                                  
 17649                                  	; MSDOS 6.0
 17650                                  GET_FAST_PATH:
 17651                                  ;hkn; use SS override for FastOpenFlg
 17652 000029AC 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17653                                  					;FO. trigger fastopen	;AN000;
 17654 000029B2 E88914                  	call	GETPATH
 17655 000029B5 9C                      	PUSHF			 	;FO.			;AN000;
 17656 000029B6 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17657                                  					;FO. clear all fastopen flags ;AN000;
 17658 000029BC 9D                      	POPF				;FO.			;AN000;
 17659 000029BD C3                      	retn
 17660                                  
 17661                                  ;============================================================================
 17662                                  ; DUP.ASM, MSDOS 6.0, 1991
 17663                                  ;============================================================================
 17664                                  ; 08/08/2018 - Retro DOS v3.0
 17665                                  ; 17/05/2019 - Retro DOS v4.0
 17666                                  
 17667                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17668                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17669                                  ;
 17670                                  ;	DOS_DUP
 17671                                  ;
 17672                                  ;	Modification history:
 17673                                  ;
 17674                                  ;	  Created: ARR 30 March 1983
 17675                                  
 17676                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17677                                  ;---------------------------------------------------------------------------
 17678                                  ; Procedure Name : DOS_DUP
 17679                                  ;
 17680                                  ; Inputs:
 17681                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17682                                  ;		(a non net SFT is OK, in this case the ref
 17683                                  ;		 count is simply incremented)
 17684                                  ; Function:
 17685                                  ;	Signal to the devices that a logical open is occurring
 17686                                  ; Returns:
 17687                                  ;	ES:DI point to SFT
 17688                                  ;    Carry clear
 17689                                  ;	SFT ref_count is incremented
 17690                                  ; Registers modified: None.
 17691                                  ; NOTE:
 17692                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17693                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17694                                  ;	that time.
 17695                                  ;---------------------------------------------------------------------------
 17696                                  
 17697                                  DOS_DUP:
 17698                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17699                                  
 17700                                  	; MSDOS 6.0
 17701 000029BE 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17702 000029C3 26C43E[9E05]            	les	di,[es:THISSFT]
 17703                                  
 17704                                  	;Entry	Dos_Dup_Direct
 17705                                  DOS_Dup_Direct:
 17706 000029C8 E884E8                  	call	IsSFTNet
 17707 000029CB 7503                    	JNZ	short DO_INC
 17708 000029CD E83C1B                  	call	DEV_OPEN_SFT
 17709                                  DO_INC:
 17710                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17711 000029D0 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17712                                  					;   we're in big trouble anyway)
 17713 000029D3 C3                      	retn
 17714                                  
 17715                                  ;============================================================================
 17716                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17717                                  ;============================================================================
 17718                                  ; 08/08/2018 - Retro DOS v3.0
 17719                                  ; 18/05/2019 - Retro DOS v4.0
 17720                                  
 17721                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17722                                  ;NAME	DOS_CREATE
 17723                                  ;----------------------------------------------------------------------------
 17724                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17725                                  ;
 17726                                  ;	DOS_CREATE
 17727                                  ;	DOS_CREATE_NEW
 17728                                  ;	SET_MKND_ERR
 17729                                  ;	SET_Media_ID
 17730                                  ;	SET_EXT_Mode
 17731                                  ;
 17732                                  ;	Revision history:
 17733                                  ;
 17734                                  ;	    A000 version 4.00	  Jan. 1988
 17735                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17736                                  
 17737                                  ;Installed = TRUE
 17738                                  
 17739                                  ;	i_need	THISSFT,DWORD
 17740                                  ;	i_need	THISCDS,DWORD
 17741                                  ;	I_need	EXTERR,WORD
 17742                                  ;	I_Need	ExtErr_locus,BYTE
 17743                                  ;	I_need	JShare,DWORD
 17744                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17745                                  ;	I_need	SATTRIB,BYTE
 17746                                  ;	I_need	CALLVIDM,DWORD
 17747                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17748                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17749                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17750                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17751                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17752                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17753                                  
 17754                                  ;***	DOS_CREATE - Create a File
 17755                                  ;----------------------------------------------------------------------------
 17756                                  ;	DOS_Create is called to create the specified file, truncating
 17757                                  ;	the old one if it exists.
 17758                                  ;
 17759                                  ;	ENTRY	AX is Attribute to create
 17760                                  ;		(ds) = DOSDATA
 17761                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17762                                  ;			terminated)
 17763                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17764                                  ;			( = -1 if current dir not involved, else
 17765                                  ;			 Points to first char after last "/" of current dir part)
 17766                                  ;		[THISCDS] Points to CDS being used
 17767                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17768                                  ;		[THISSFT] Points to SFT to fill in if file created
 17769                                  ;			(sf_mode field set so that FCB may be detected)
 17770                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17771                                  ;
 17772                                  ;	EXIT	sf_ref_count is NOT altered
 17773                                  ;		CARRY CLEAR
 17774                                  ;		    THISSFT filled in.
 17775                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17776                                  ;		CARRY SET
 17777                                  ;		    AX is error code
 17778                                  ;			error_path_not_found
 17779                                  ;				Bad path (not in curr dir part if present)
 17780                                  ;			error_bad_curr_dir
 17781                                  ;				Bad path in current directory part of path
 17782                                  ;			error_access_denied
 17783                                  ;				Attempt to re-create read only file , or
 17784                                  ;				create a second volume id or create a dir
 17785                                  ;			error_sharing_violation
 17786                                  ;				The sharing mode was correct but not allowed
 17787                                  ;				generates an INT 24
 17788                                  ;	USES	all but DS
 17789                                  ;----------------------------------------------------------------------------
 17790                                  
 17791                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17792                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17793                                  
 17794                                  DOS_CREATE:
 17795                                  	; 18/05/2019 - Retro DOS v4.0
 17796                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17797                                  
 17798                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17799                                  ;hkn; this point.
 17800                                  
 17801 000029D4 30E4                    	XOR	AH,AH		; Truncate is OK
 17802                                  
 17803                                  ;	Enter here from Dos_Create_New
 17804                                  ;
 17805                                  ;	(ah) = 0 iff truncate OK
 17806                                  
 17807                                  Create_inter:
 17808 000029D6 A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17809                                  				; Mask out any meaningless bits
 17810 000029D8 7511                    	JNZ	short AttErr
 17811 000029DA A808                    	TEST	AL,attr_volume_id
 17812 000029DC 7407                    	JZ	short NoReset
 17813                                  	
 17814                                  	; MSDOS 6.0
 17815                                  	; 16/12/2022
 17816 000029DE 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17817                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17818                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17819                                  	
 17820 000029E3 B008                    	MOV	AL,attr_volume_id ; 8
 17821                                  NoReset:
 17822 000029E5 0C20                    	OR	AL,attr_archive ; File changed  ; 20h
 17823 000029E7 A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17824 000029E9 740A                    	JZ	short ATT_OK
 17825                                  AttErr:
 17826 000029EB B80500                  	MOV	AX,5		; Attribute problem
 17827 000029EE C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17828 000029F3 EB62                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17829                                  				   ;	attr_device to be set.
 17830                                  ATT_OK:
 17831 000029F5 C43E[9E05]              	LES	DI,[THISSFT]
 17832 000029F9 06                      	PUSH	ES
 17833 000029FA C436[A205]              	LES	SI,[THISCDS]
 17834 000029FE 83FEFF                  	CMP	SI,-1
 17835 00002A01 751B                    	JNE	short TEST_RE_NET
 17836                                  
 17837                                  ;	No CDS, it must be redirected.
 17838                                  
 17839 00002A03 07                      	POP	ES
 17840                                  
 17841                                  	; MSDOS 6.0
 17842                                  ;Extended open hooks
 17843                                  	;test	byte [EXTOPEN_ON],1
 17844 00002A04 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17845 00002A09 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17846                                  IFS_extopen:				    ;AN000;EO.
 17847 00002A0B 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17848                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17849 00002A0C B82E11                  	mov	ax,112Eh
 17850                                  NOEXTOP2:	; 01/02/2024 (PCDOS 7.1 IBMDOS.COM)
 17851 00002A0F CD2F                    	INT	2FH			    ;AN000;EO.
 17852 00002A11 5B                      	POP	BX			    ;AN000;EO. trash bx
 17853 00002A12 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17854 00002A17 C3                      	retn				    ;AN000;EO.
 17855                                  NOEXTOP:				    ;AN000;
 17856                                  ;Extended open hooks
 17857                                  
 17858                                  ;IF NOT Installed
 17859                                  ;	transfer NET_SEQ_CREATE
 17860                                  ;ELSE
 17861 00002A18 50                      	PUSH	AX
 17862                                  
 17863                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17864                                  	;INT	2FH
 17865                                  
 17866 00002A19 B81811                  	mov	ax,1118h
 17867                                  	; 01/02/2024
 17868                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17869                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17870                                  			; SDA first filename pointer -> fully-qualified name of file
 17871                                  			; STACK: WORD file creation mode???
 17872                                  
 17873                                  	;POP	BX			; BX is trashed anyway
 17874                                  	;retn
 17875 00002A1C EBF1                    	jmp	short NOEXTOP2 ; 01/02/2024
 17876                                  ;ENDIF
 17877                                  
 17878                                  ;	We have a CDS. See if it's network
 17879                                  
 17880                                  TEST_RE_NET:
 17881                                  	;;test	word [es:si+43h],8000h
 17882                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17883                                  	; 07/12/2022
 17884                                  	;test	byte [es:si+44h],80h
 17885                                  	; 17/12/2022
 17886 00002A1E 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17887 00002A23 07                      	POP	ES
 17888 00002A24 7417                    	JZ	short LOCAL_CREATE
 17889                                  
 17890                                  	; MSDOS 6.0
 17891 00002A26 E8BD00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17892 00002A29 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17893                                  	;;or	word [es:di+2],2
 17894                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17895                                  	; 17/12/2022
 17896 00002A2B 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17897                                  
 17898                                  ;Extended open hooks
 17899                                  dochk:
 17900 00002A30 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17901 00002A35 75D4                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17902                                  ;Extended open hooks
 17903                                  
 17904                                  ;IF NOT Installed
 17905                                  ;	transfer NET_CREATE
 17906                                  ;ELSE
 17907 00002A37 50                      	PUSH	AX
 17908                                  	
 17909                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17910                                  	;INT	2FH
 17911                                  	
 17912 00002A38 B81711                  	mov	ax,1117h
 17913                                  	
 17914                                  	; 01/02/2024
 17915                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17916                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17917                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17918                                  			; SDA CDS pointer -> current directory
 17919                                  			; Return: CF set on error
 17920                                  
 17921                                  	;POP	BX			; BX is trashed anyway
 17922                                  ;nomore:
 17923                                  	;retn
 17924 00002A3B EBD2                    	jmp	short NOEXTOP2 ; 01/02/2024
 17925                                  ;ENDIF
 17926                                  
 17927                                  ;**	It's a local create. We have a local CDS for it.
 17928                                  
 17929                                  LOCAL_CREATE:
 17930                                  	; MSDOS 6.0
 17931 00002A3D E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17932 00002A40 7205                    	JC	short setdone	;AN000;EO.
 17933                                  	
 17934                                  	; MSDOS 3.3 & MSDOS 6.0
 17935                                  	; 17/12/2022
 17936                                  	;;or	word [es:di+2],2
 17937                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17938                                  	;or	byte [es:di+2],2
 17939 00002A42 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17940                                  setdone:
 17941 00002A47 E8AEE8                  	call	ECritDisk
 17942 00002A4A E86C1E                  	call	MakeNode
 17943 00002A4D 7317                    	JNC	short Create_ok
 17944 00002A4F C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17945 00002A54 E8BCE8                  	call	LCritDisk
 17946                                  
 17947                                  	;entry	SET_MKND_ERR
 17948                                  SET_MKND_ERR:
 17949                                  
 17950                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 17951                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 17952                                  
 17953                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 17954 00002A57 BB[5E2A]                	MOV     BX,CRTERRTAB
 17955                                  	;XLAT  ; MSDOS 3.3
 17956                                  	; 18/05/2019 - Retro DOS v4.0
 17957 00002A5A 2E                      	CS
 17958 00002A5B D7                      	XLAT
 17959                                  CreatBadRet:
 17960 00002A5C F9                      	STC
 17961 00002A5D C3                      	retn
 17962                                  
 17963                                  ; 13/05/2019 - Retro DOS v4.0
 17964                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 17965                                  ; ---------------------------------------------------------------------------
 17966                                  
 17967                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 17968                                  
 17969                                  ; 17/07/2018 - Retro DOS v3.0
 17970                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 17971                                  
 17972                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 17973                                  ;	db	0,5,52h,50h,3,5,20h
 17974                                  
 17975                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 17976                                  ;	db	0,5,52h,50h,3,5,20h,2
 17977                                  
 17978                                  ; 08/08/2018
 17979                                  
 17980                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 17981 00002A5E 00                      	DB	0			; none
 17982 00002A5F 05                      	DB	error_access_denied	; MakeNode error 1
 17983 00002A60 52                      	DB	error_cannot_make	; MakeNode error 2
 17984 00002A61 50                      	DB	error_file_exists	; MakeNode error 3
 17985 00002A62 03                      	DB	error_path_not_found	; MakeNode error 4
 17986 00002A63 05                      	DB	error_access_denied	; MakeNode error 5
 17987 00002A64 20                      	DB	error_sharing_violation ; MakeNode error 6
 17988                                  	; MSDOS 6.0
 17989 00002A65 02                      	DB	error_file_not_found	; MakeNode error 7
 17990                                  
 17991                                  ; ---------------------------------------------------------------------------
 17992                                  
 17993                                  ; We have just created a new file. This results in the truncation of old
 17994                                  ; files. We must inform the sharer to slash all the open SFT's for this
 17995                                  ; file to the current size.
 17996                                  
 17997                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 17998                                  ; drive number to force a Build BPB after Media Check.
 17999                                  
 18000                                  ;;; FASTOPEN 8/29/86
 18001                                  Create_ok:
 18002 00002A66 E8F4FB                  	call	FastOpen_Delete
 18003                                  ;;; FASTOPEN 8/29/86
 18004 00002A69 A0[6D05]                	mov	al,[SATTRIB]
 18005 00002A6C A808                    	test	al,attr_volume_id
 18006 00002A6E 741C                    	jz	short NoVolLabel
 18007 00002A70 C43E[A205]              	LES	DI,[THISCDS]
 18008                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 18009 00002A74 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 18010 00002A77 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 18011 00002A7A 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 18012                                  	
 18013                                  	; 18/05/2019 - Retro DOS v4.0
 18014                                  
 18015                                  	; MSDOS 6.0
 18016 00002A7E B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 18017 00002A80 E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 18018                                  	
 18019 00002A83 E872E8                  	call	ECritDisk
 18020 00002A86 E87B2B                  	call	FATREAD_CDS		; force a media check
 18021 00002A89 E887E8                  	call	LCritDisk
 18022                                  
 18023                                  NoVolLabel:
 18024 00002A8C B80200                  	MOV	ax,2
 18025 00002A8F C43E[9E05]              	LES	DI,[THISSFT]
 18026                                  ;if installed
 18027                                  	;call	JShare + 14 * 4
 18028 00002A93 FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 18029                                  ;else
 18030                                  ;	Call	ShSU
 18031                                  ;endif
 18032 00002A97 E879E8                  	call	LCritDisk
 18033 00002A9A E94901                  	jmp	SET_SFT_MODE
 18034                                  
 18035                                  ;---------------------------------------------------------------------------
 18036                                  ; Procedure Name : Dos_Create_New
 18037                                  ;
 18038                                  ; Inputs:
 18039                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18040                                  ;		terminated)
 18041                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18042                                  ;		( = -1 if current dir not involved, else
 18043                                  ;		 Points to first char after last "/" of current dir part)
 18044                                  ;	[THISCDS] Points to CDS being used
 18045                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18046                                  ;	[THISSFT] Points to SFT to fill in if file created
 18047                                  ;		(sf_mode field set so that FCB may be detected)
 18048                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18049                                  ;	AX is Attribute to create
 18050                                  ; Function:
 18051                                  ;	Try to create the specified file truncating an old one that exists
 18052                                  ; Outputs:
 18053                                  ;	sf_ref_count is NOT altered
 18054                                  ;	CARRY CLEAR
 18055                                  ;	    THISSFT filled in.
 18056                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 18057                                  ;	CARRY SET
 18058                                  ;	    AX is error code
 18059                                  ;		error_path_not_found
 18060                                  ;			Bad path (not in curr dir part if present)
 18061                                  ;		error_bad_curr_dir
 18062                                  ;			Bad path in current directory part of path
 18063                                  ;		error_access_denied
 18064                                  ;			Create a second volume id or create a dir
 18065                                  ;		error_file_exists
 18066                                  ;			Already a file by this name
 18067                                  ; DS preserved, others destroyed
 18068                                  ;---------------------------------------------------------------------------
 18069                                  
 18070                                  DOS_Create_New:
 18071 00002A9D B401                    	MOV	AH,1		; Truncate is NOT OK
 18072 00002A9F E934FF                  	JMP	Create_inter
 18073                                  
 18074                                  ; MSDOS 6.0
 18075                                  ;---------------------------------------------------------------------------
 18076                                  ; Procedure Name : Set_Media_ID
 18077                                  ;
 18078                                  ; Inputs:
 18079                                  ;	NAME1= Volume ID
 18080                                  ;	BH= 0, delete volume id
 18081                                  ;	    1, set new volume id
 18082                                  ;	DS= DOSGROUP
 18083                                  ; Function:
 18084                                  ;	Set Volume ID to DOS 4.00 Boot record.
 18085                                  ; Outputs:
 18086                                  ;	CARRY CLEAR
 18087                                  ;	    volume id set
 18088                                  ;	CARRY SET
 18089                                  ;	    AX is error code
 18090                                  ;---------------------------------------------------------------------------
 18091                                  
 18092                                  	; 18/05/2019 - Retro DOS v4.0
 18093                                  Set_Media_ID:
 18094 00002AA2 50                      	PUSH	AX		;AN000;;>32mb
 18095 00002AA3 06                      	PUSH	ES		;AN000;;>32mb
 18096 00002AA4 57                      	PUSH	DI		;AN000;;>32mb
 18097                                  
 18098 00002AA5 FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 18099 00002AA7 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 18100 00002AA9 B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 18101 00002AAB B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 18102                                  
 18103                                  ;hkn; PACKET_TEMP is in DOSDATA
 18104 00002AAE BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 18105                                  
 18106 00002AB1 53                      	PUSH	BX		;AN000;;>32mb
 18107 00002AB2 52                      	PUSH	DX		;AN000;;>32mb
 18108 00002AB3 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18109                                  
 18110                                  	;invoke	$IOCTL		;AN000;;>32mb
 18111 00002AB5 E86BF7                  	call	_$IOCTL	
 18112                                  
 18113 00002AB8 5A                      	POP	DX		;AN000;;>32mb
 18114 00002AB9 5B                      	POP	BX		;AN000;;>32mb
 18115 00002ABA 7224                    	JC	short geterr	;AN000;;>32mb
 18116                                  
 18117 00002ABC 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 18118 00002ABE 7405                    	JZ	short NoName	;AN000;>32mb yes
 18119                                  
 18120                                  ;hkn; NAME1 is in DOSDATA
 18121 00002AC0 BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 18122                                  
 18123 00002AC3 EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 18124                                  NoName: 			;AN000;
 18125                                  
 18126                                  ;hkn; NO_NAME_ID is in DOSDATA
 18127 00002AC5 BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 18128                                  
 18129                                  doset:				;AN000;
 18130 00002AC8 89D7                    	MOV	DI,DX		;AN000;;>32mb
 18131                                  	;add	di,6
 18132 00002ACA 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 18133                                  
 18134                                  ;hkn; ES & DS must point to SS
 18135                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 18136 00002ACD 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 18137                                  
 18138 00002ACE 1F                      	POP	DS		;AN000;;>32mb
 18139                                  
 18140                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 18141 00002ACF 16                      	PUSH	SS		;AN000;;>32mb
 18142                                  
 18143 00002AD0 07                      	POP	ES		;AN000;;>32mb
 18144 00002AD1 B90B00                  	MOV	CX,11		;AN000;;>32mb
 18145 00002AD4 F3A4                    	REP	MOVSB		;AN000;;>32mb
 18146 00002AD6 B94608                  	MOV	CX,0846H	;AN001;;>32mb
 18147 00002AD9 B00D                    	MOV	AL,0DH		;AN000;;>32mb
 18148 00002ADB 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18149                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 18150 00002ADD E843F7                  	call	_$IOCTL	
 18151                                  geterr: 			;AN000;
 18152                                  ;hkn;	PUSH	CS		;AN000;>32mb
 18153 00002AE0 16                      	PUSH	SS		;AN000;>32mb
 18154                                  
 18155 00002AE1 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 18156                                  
 18157 00002AE2 5F                      	POP	DI		;AN000;;>32mb
 18158 00002AE3 07                      	POP	ES		;AN000;;>32mb
 18159 00002AE4 58                      	POP	AX		;AN000;;>32mb
 18160 00002AE5 C3                      	retn			;AN000;>32mb
 18161                                  
 18162                                  ; MSDOS 6.0
 18163                                  ;---------------------------------------------------------------------------
 18164                                  ; Procedure Name : Set_EXT_mode
 18165                                  ;
 18166                                  ; Inputs:
 18167                                  ;	[EXTOPEN_ON]= flag for extended open
 18168                                  ;	SAVE_BX= mode specified in Extended Open
 18169                                  ; Function:
 18170                                  ;	Set mode in ThisSFT
 18171                                  ; Outputs:
 18172                                  ;	carry set,mode is set if from Extended Open
 18173                                  ;	carry clear, mode not set yet
 18174                                  ;---------------------------------------------------------------------------
 18175                                  
 18176                                  ; 13/05/2019 - Retro DOS v4.0
 18177                                  
 18178                                  Set_EXT_mode:
 18179                                  
 18180                                  ;hkn; SS override
 18181 00002AE6 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 18182 00002AEC 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 18183 00002AEE 50                      	PUSH	AX			    ;AN000;EO.
 18184                                  
 18185                                  ;hkn; SS override
 18186 00002AEF 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 18187                                  	;or	[es:di+2],ax
 18188 00002AF3 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 18189 00002AF7 58                      	POP	AX			    ;AN000;EO.
 18190 00002AF8 F9                      	STC				    ;AN000;EO.
 18191                                  NOTEX:					    ;AN000;
 18192 00002AF9 C3                      	retn				    ;AN000;EO.
 18193                                  
 18194                                  ;============================================================================
 18195                                  ; OPEN.ASM, MSDOS 6.0, 1991
 18196                                  ;============================================================================
 18197                                  ; 08/08/2018 - Retro DOS v3.0
 18198                                  ; 18/05/2019 - Retro DOS v4.0
 18199                                  
 18200                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 18201                                  ;	NAME	DOS_OPEN
 18202                                  
 18203                                  ;**	OPEN.ASM - File Open
 18204                                  ;----------------------------------------------------------------------------
 18205                                  ;	Low level routines for openning a file from a file spec.
 18206                                  ;	Also misc routines for sharing errors
 18207                                  ;
 18208                                  ;	DOS_Open
 18209                                  ;	Check_Access_AX
 18210                                  ;	SHARE_ERROR
 18211                                  ;	SET_SFT_MODE
 18212                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 18213                                  ;
 18214                                  ;	Revision history:
 18215                                  ;
 18216                                  ;	    Created: ARR 30 March 1983
 18217                                  ;	    A000	version 4.00   Jan. 1988
 18218                                  ;
 18219                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 18220                                  ; 	       remote extended opens and not save_cx.
 18221                                  ;
 18222                                  ;	M035 - if open made from exec then we must set the appropriate bits
 18223                                  ;	       on the stack before calling off to the redir.
 18224                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 18225                                  ;	       to handle open from exec. In this case set the appropriate bit
 18226                                  ;	       else do not.
 18227                                  ;----------------------------------------------------------------------------	
 18228                                  
 18229                                  ;Installed = TRUE
 18230                                  
 18231                                  ;	i_need	NoSetDir,BYTE
 18232                                  ;	i_need	THISSFT,DWORD
 18233                                  ;	i_need	THISCDS,DWORD
 18234                                  ;	i_need	CURBUF,DWORD
 18235                                  ;	i_need	CurrentPDB,WORD
 18236                                  ;	i_need	CURR_DIR_END,WORD
 18237                                  ;	I_need	RetryCount,WORD
 18238                                  ;	I_need	Open_Access,BYTE
 18239                                  ;	I_need	fSharing,BYTE
 18240                                  ;	i_need	JShare,DWORD
 18241                                  ;	I_need	FastOpenFlg,byte
 18242                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 18243                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 18244                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 18245                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 18246                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 18247                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 18248                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 18249                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 18250                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 18251                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 18252                                  ;	I_need	SAVE_BX,WORD			  ;M034
 18253                                  ;
 18254                                  ;	I_need	DOS_FLAG,BYTE
 18255                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 18256                                  
 18257                                  ;Break	<DOS_Open - internal file access>
 18258                                  ;---------------------------------------------------------------------------
 18259                                  ; Procedure Name : DOS_Open
 18260                                  ;
 18261                                  ; Inputs:
 18262                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18263                                  ;		terminated)
 18264                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18265                                  ;		( = -1 if current dir not involved, else
 18266                                  ;		 Points to first char after last "/" of current dir part)
 18267                                  ;	[THISCDS] Points to CDS being used
 18268                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18269                                  ;	[THISSFT] Points to SFT to fill in if file found
 18270                                  ;		(sf_mode field set so that FCB may be detected)
 18271                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18272                                  ;	AX is Access and Sharing mode
 18273                                  ;	  High NIBBLE of AL (Sharing Mode)
 18274                                  ;		sharing_compat	   file is opened in compatibility mode
 18275                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18276                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18277                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18278                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18279                                  ;	  Low NIBBLE of AL (Access Mode)
 18280                                  ;		open_for_read	file is opened for reading
 18281                                  ;		open_for_write	file is opened for writing
 18282                                  ;		open_for_both	file is opened for both reading and writing.
 18283                                  ;
 18284                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 18285                                  ;		(not checked)
 18286                                  ; Function:
 18287                                  ;	Try to open the specified file
 18288                                  ; Outputs:
 18289                                  ;	sf_ref_count is NOT altered
 18290                                  ;	CARRY CLEAR
 18291                                  ;	    THISSFT filled in.
 18292                                  ;	CARRY SET
 18293                                  ;	    AX is error code
 18294                                  ;		error_file_not_found
 18295                                  ;			Last element of path not found
 18296                                  ;		error_path_not_found
 18297                                  ;			Bad path (not in curr dir part if present)
 18298                                  ;		error_bad_curr_dir
 18299                                  ;			Bad path in current directory part of path
 18300                                  ;		error_invalid_access
 18301                                  ;			Bad sharing mode or bad access mode or bad combination
 18302                                  ;		error_access_denied
 18303                                  ;			Attempt to open read only file for writting, or
 18304                                  ;			open a directory
 18305                                  ;		error_sharing_violation
 18306                                  ;			The sharing mode was correct but not allowed
 18307                                  ;			generates an INT 24 on compatibility mode SFTs
 18308                                  ; DS preserved, others destroyed
 18309                                  ;----------------------------------------------------------------------------
 18310                                  
 18311                                  ; 18/05/2019 - Retro DOS v4.0
 18312                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 18313                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18314                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 18315                                  
 18316                                  DOS_OPEN:
 18317                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 18318                                  
 18319 00002AFA C606[4C03]00            	MOV	byte [NoSetDir],0
 18320 00002AFF E83301                  	CALL	Check_Access_AX
 18321 00002B02 722B                    	JC	short do_ret_label	    ; retc
 18322                                  
 18323 00002B04 C43E[9E05]              	LES	DI,[THISSFT]
 18324 00002B08 30E4                    	XOR	AH,AH
 18325                                  
 18326                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 18327                                  
 18328 00002B0A 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 18329 00002B0E 06                      	PUSH	ES
 18330 00002B0F C436[A205]              	LES	SI,[THISCDS]
 18331                                  	; 18/08/2018
 18332 00002B13 83FEFF                  	CMP	SI,-1
 18333 00002B16 7530                    	JNZ	short TEST_RE_NET1
 18334 00002B18 07                      	POP	ES
 18335                                  
 18336                                  	; MSDOS 6.0
 18337                                  ;Extended open hooks
 18338 00002B19 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 18339 00002B1E 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 18340                                  _IFS_extopen:									;AN000;
 18341 00002B20 A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 18342                                  					    ; with which call was made. This
 18343                                  					    ; has the open access bits. 
 18344                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 18345                                  	
 18346 00002B23 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 18347                                  	;mov	ax,112Eh
 18348                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 18349 00002B24 B82E11                  	mov	ax,(MultNET*256)+46 
 18350 00002B27 CD2F                    	INT	2FH			    ;FT.				;AN000;
 18351 00002B29 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 18352 00002B2A C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 18353                                  
 18354                                  do_ret_label:
 18355 00002B2F C3                      	retn				    ;FT.				;AN000;
 18356                                  _NOEXTOP:
 18357                                  ;Extended open hooks
 18358                                  	;
 18359                                  ;IF NOT Installed
 18360                                  	;transfer NET_SEQ_OPEN
 18361                                  ;ELSE
 18362                                  	
 18363                                  do_net_int2f:
 18364 00002B30 F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 18365 00002B35 7409                    	jz	short not_exec_open	; N: just do net open
 18366                                  					; Y: check to see if redir is aware
 18367                                  					;    of this 
 18368                                  	
 18369                                  					; M042 - start
 18370                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 18371 00002B37 F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 18372                                  					; Q: does this redir know how to 
 18373                                  					;    this
 18374 00002B3C 7402                    	jz	short not_exec_open	; N: just do net open
 18375                                  					; Y: set bit 3 of access byte and 
 18376                                  					;    set sharing mode to DENY_WRITE
 18377                                  					; M042 - end
 18378                                  	
 18379                                  	; NOTE: This specific mode has not been set for the code assembled
 18380                                  	; under the "NOT Installed" conditional. Currently Installed is 
 18381                                  	; always one.
 18382                                  					; M035 - set the bits on the stack
 18383                                  	;mov	al,23h
 18384 00002B3E B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 18385                                  	
 18386                                  not_exec_open:
 18387                                  	; MSDOS 3.3 & MSDOS 6.0
 18388 00002B40 50                      	PUSH	AX
 18389                                  
 18390                                  	;MOV	AX,(MultNET SHL 8) OR 22
 18391                                  	;INT	2FH
 18392                                  
 18393 00002B41 B81611                  	mov     ax,1116h
 18394 00002B44 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 18395                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 18396                                  			; SDA first filename pointer -> fully-qualified name of file to open
 18397                                  			; STACK: WORD file open mode
 18398                                  			; Return: CF set on error
 18399                                  
 18400 00002B46 5B                      	POP	BX			; clean stack
 18401                                  ;do_ret_label: ; 09/08/2018
 18402 00002B47 C3                      	retn
 18403                                  ;ENDIF
 18404                                  
 18405                                  TEST_RE_NET1:
 18406                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 18407                                  	; 17/12/2022
 18408 00002B48 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 18409 00002B4D 07                      	POP	ES
 18410                                  	; 18/05/2019
 18411 00002B4E 7409                    	JZ	short LOCAL_OPEN
 18412                                  
 18413                                  ;Extended open hooks
 18414                                  	; MSDOS 6.0
 18415 00002B50 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 18416 00002B55 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 18417                                  ;Extended open hooks
 18418                                  
 18419                                  ;IF NOT Installed
 18420                                  ;	transfer NET_OPEN
 18421                                  ;ELSE
 18422 00002B57 EBD7                    	jmp	short do_net_int2f
 18423                                  ;ENDIF
 18424                                  
 18425                                  LOCAL_OPEN:
 18426                                  	; MSDOS 3.3 & MSDOS 6.0
 18427 00002B59 E89CE7                  	call	ECritDisk
 18428                                  
 18429                                  ; DOS 3.3 FastOPen 6/16/86
 18430                                  
 18431                                  	;or	byte [FastOpenFlg],5
 18432 00002B5C 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 18433                                  
 18434 00002B61 E8DA12                  	call	GETPATH
 18435                                  
 18436                                  ; DOS 3.3 FastOPen 6/16/86
 18437                                  
 18438 00002B64 731D                    	JNC	short Open_found
 18439 00002B66 7511                    	JNZ	short bad_path2
 18440 00002B68 08C9                    	OR	CL,CL
 18441 00002B6A 740D                    	JZ	short bad_path2
 18442                                  OpenFNF:
 18443 00002B6C B80200                  	MOV	AX,error_file_not_found	; 2
 18444                                  OpenBadRet:
 18445                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 18446                                  	; 12/08/2018
 18447                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 18448                                  	; MSDOS 6.0
 18449 00002B6F 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 18450 00002B75 F9                      	STC
 18451                                  	;call	LCritDisk
 18452                                  	; 16/12/2022
 18453 00002B76 E99AE7                  	jmp	LCritDisk
 18454                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 18455                                  	;retn 	; 08/09/2018
 18456                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18457                                  	;jmp	Clear_FastOpen
 18458                                  
 18459                                  bad_path2:
 18460 00002B79 B80300                  	MOV	AX,error_path_not_found	; 3
 18461 00002B7C EBF1                    	JMP	short OpenBadRet
 18462                                  
 18463                                  Open_Bad_Access:
 18464 00002B7E B80500                  	MOV	AX,error_access_denied	; 5
 18465 00002B81 EBEC                    	JMP	short OpenBadRet
 18466                                  
 18467                                  Open_found:
 18468 00002B83 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 18469 00002B85 08E4                    	OR	AH,AH
 18470 00002B87 783E                    	JS	short open_ok		; Devices don't have attributes
 18471 00002B89 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 18472                                  	;mov	al,[es:bx+0Bh]
 18473 00002B8D 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 18474 00002B91 A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 18475 00002B93 75E9                    	JNZ	short Open_Bad_Access
 18476 00002B95 A801                    	TEST	AL,attr_read_only	; check write on read only
 18477 00002B97 742E                    	JZ	short open_ok
 18478                                  
 18479                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 18480                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 18481                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 18482                                  ; processing until the actual write operation:
 18483                                  ;
 18484                                  ; If FCB, then we change the mode to be read_only.
 18485                                  ; If net_FCB, then we change the mode to be read_only.
 18486                                  ; If not open for read then error.
 18487                                  
 18488 00002B99 1E                      	push	ds
 18489 00002B9A 56                      	push	si
 18490 00002B9B C536[9E05]              	LDS	SI,[THISSFT]
 18491                                  	;mov	cx,[si+2]
 18492 00002B9F 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 18493                                  	; 17/12/2022
 18494                                  	;test	ch,80h
 18495 00002BA2 F6C580                  	test	ch,sf_isFCB>>8
 18496                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 18497 00002BA5 750A                    	JNZ	short ResetAccess	; yes, reset the access
 18498 00002BA7 88CA                    	MOV	DL,CL
 18499 00002BA9 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 18500 00002BAC 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 18501 00002BAF 7508                    	JNZ	short NormalOpen	; no
 18502                                  ResetAccess:
 18503                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 18504                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 18505                                  	; 16/12/2022
 18506 00002BB1 80E1F0                  	and	cl,0F0h ; 18/05/2019
 18507                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 18508 00002BB4 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18509 00002BB7 EB0C                    	JMP	SHORT FillSFT
 18510                                  
 18511                                  ; The SFT is normal. See if the requested access is open_for_read
 18512                                  
 18513                                  NormalOpen:
 18514 00002BB9 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18515 00002BBC 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18516 00002BBF 7404                    	JZ	short FillSFT
 18517 00002BC1 5E                      	pop	si
 18518 00002BC2 1F                      	pop	ds
 18519 00002BC3 EBB9                    	JMP	short Open_Bad_Access
 18520                                  ;
 18521                                  ; All done, restore registers and fill the SFT.
 18522                                  ;
 18523                                  FillSFT:
 18524 00002BC5 5E                      	pop	si
 18525 00002BC6 1F                      	pop	ds
 18526                                  open_ok:
 18527 00002BC7 E8AD1E                  	call	DOOPEN			; Fill in SFT
 18528                                  
 18529                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18530                                  	; 18/05/2019
 18531                                  	;and	byte [ss:FastOpenFlag],80h
 18532 00002BCA 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18533                                  	; 12/08/2018
 18534                                  	;and	byte [FastOpenFlg],Fast_yes	
 18535                                  
 18536                                  	; MSDOS 6.0
 18537 00002BD0 E84300                  	CALL	DO_SHARE_CHECK
 18538 00002BD3 7303                    	JNC	short SHARE_OK
 18539                                  	;call	LCritDisk
 18540                                  	; 16/12/2022
 18541 00002BD5 E93BE7                  	jmp	LCritDisk
 18542                                  	;;JMP	short Clear_FastOpen
 18543                                  	;retn	; 18/05/2019
 18544                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18545                                  	;jmp	short Clear_FastOpen	
 18546                                  
 18547                                  	; MSDOS 3.3
 18548                                  ;DO_SHARE_CHECK:
 18549                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18550                                  ;OpenShareRetry:
 18551                                  ;	push	cx			; Save number left to do
 18552                                  ;	call	SHARE_CHECK		; Final Check
 18553                                  ;	pop	cx			; CX = # left
 18554                                  ;	JNC	short SHARE_OK		; No problem with access
 18555                                  ;	call	Idle
 18556                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18557                                  ;OpenShareFail:
 18558                                  ;	LES	DI,[THISSFT]
 18559                                  ;	call	SHARE_ERROR
 18560                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18561                                  	
 18562                                  	;12/08/2018
 18563                                  	;mov	byte [ss:FastOpenFlg],0
 18564                                  	;08/09/2018
 18565                                  	;mov	byte [FastOpenFlg],0
 18566                                  	;call	LCritDisk
 18567                                  	;JMP	short Clear_FastOpen
 18568                                  	;retn
 18569                                  
 18570                                  SHARE_OK:
 18571                                  	; MSDOS 3.3 & MSDOS 6.0
 18572 00002BD8 B80300                  	MOV	AX,3
 18573 00002BDB C43E[9E05]              	LES	DI,[THISSFT]
 18574                                  ;if installed
 18575                                  	;call	JShare + 14 * 4
 18576 00002BDF FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18577                                  ;else
 18578                                  ;	Call	ShSU
 18579                                  ;endif
 18580 00002BE3 E82DE7                  	call	LCritDisk
 18581                                  	
 18582                                  	;FallThru Set_SFT_Mode
 18583                                  
 18584                                  ;----------------------------------------------------------------------------
 18585                                  ; Procedure Name : SET_SFT_MODE
 18586                                  ;
 18587                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18588                                  ;
 18589                                  ;   Inputs:
 18590                                  ;	ThisSFT points to SFT
 18591                                  ;
 18592                                  ;   Outputs:
 18593                                  ;	Carry clear
 18594                                  ;   Registers modified: AX.
 18595                                  ;---------------------------------------------------------------------------
 18596                                  
 18597                                  ;hkn; called from create. DS already set up to DOSDATA.
 18598                                  
 18599                                  SET_SFT_MODE:
 18600 00002BE6 C43E[9E05]              	LES	DI,[THISSFT]
 18601 00002BEA E81F19                  	call	DEV_OPEN_SFT
 18602                                  	;test	word [es:di+2],8000h
 18603                                  	; 17/12/2022
 18604                                  	;test	byte [es:di+3],80h
 18605 00002BED 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18606                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18607 00002BF2 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18608 00002BF4 A1[3003]                	MOV	AX,[CurrentPDB]
 18609                                  	;mov	[es:di+31h],ax
 18610 00002BF7 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18611                                  
 18612                                  Clear_FastOpen:
 18613 00002BFB C3                      	retn			       ;;;;; DOS 3.3
 18614                                  
 18615                                  ;----------------------------------------------------------------------------
 18616                                  ; Procedure Name : SHARE_ERROR
 18617                                  ;
 18618                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18619                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18620                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18621                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18622                                  ;---------------------------------------------------------------------------
 18623                                  
 18624                                  SHARE_ERROR:
 18625                                  	; 17/12/2022
 18626                                  	;test	byte [es:di+3],80h
 18627 00002BFC 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18628                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18629 00002C01 7509                    	JNZ	short _HARD_ERR
 18630 00002C03 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18631 00002C07 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18632                                  	;CMP	CL,SHARING_COMPAT ; 0
 18633                                  	;JNE	short _NO_HARD_ERR
 18634                                  	; 21/09/2023
 18635 00002C0A 7505                    	jnz	short _NO_HARD_ERR
 18636                                  _HARD_ERR:
 18637 00002C0C E86B46                  	call	SHARE_VIOLATION
 18638                                  	;retnc				; User wants retry
 18639 00002C0F 73EA                    	jnc	short Clear_FastOpen
 18640                                  _NO_HARD_ERR:
 18641 00002C11 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18642 00002C14 F9                      	STC
 18643 00002C15 C3                      	retn
 18644                                  
 18645                                  ; MSDOS 6.0
 18646                                  ;----------------------------------------------------------------------------
 18647                                  ; Procedure Name : DO_SHARE_CHECK
 18648                                  ;
 18649                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18650                                  ; Functions: check file sharing mode is valid
 18651                                  ; Output: carry set, error
 18652                                  ;	  carry clear, share ok
 18653                                  ;----------------------------------------------------------------------------
 18654                                  
 18655                                  	; 18/05/2019 - Retro DOS v4.0
 18656                                  DO_SHARE_CHECK:
 18657 00002C16 E8DFE6                  	call	ECritDisk		; enter critical section
 18658                                  OPN_RETRY:
 18659 00002C19 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18660                                  OpenShareRetry:
 18661 00002C1D 51                      	push	cx			; Save number left to do
 18662 00002C1E E85446                  	call	SHARE_CHECK		; Final Check
 18663 00002C21 59                      	pop	cx			; CX = # left
 18664 00002C22 730E                    	JNC	short Share_Ok2		; No problem with access
 18665 00002C24 E8CAE5                  	call	Idle
 18666 00002C27 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18667                                  OpenShareFail:
 18668 00002C29 C43E[9E05]              	LES	DI,[THISSFT]
 18669 00002C2D E8CCFF                  	call	SHARE_ERROR
 18670 00002C30 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18671                                  Share_Ok2:
 18672                                  	;call	LCritDisk		; leave critical section
 18673                                  	;retn
 18674                                  	; 18/12/2022
 18675 00002C32 E9DEE6                  	jmp	LCritDisk
 18676                                  
 18677                                  ;-----------------------------------------------------------------------------
 18678                                  ; Procedure Name : Check_Access
 18679                                  ;
 18680                                  ; Inputs:
 18681                                  ;	AX is mode
 18682                                  ;	  High NIBBLE of AL (Sharing Mode)
 18683                                  ;		sharing_compat	   file is opened in compatibility mode
 18684                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18685                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18686                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18687                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18688                                  ;	  Low NIBBLE of AL (Access Mode)
 18689                                  ;		open_for_read	file is opened for reading
 18690                                  ;		open_for_write	file is opened for writing
 18691                                  ;		open_for_both	file is opened for both reading and writing.
 18692                                  ; Function:
 18693                                  ;	Check this access mode for correctness
 18694                                  ; Outputs:
 18695                                  ;	[open_access] = AL input
 18696                                  ;	Carry Clear
 18697                                  ;		Mode is correct
 18698                                  ;		AX unchanged
 18699                                  ;	Carry Set
 18700                                  ;		Mode is bad
 18701                                  ;		AX = error_invalid_access
 18702                                  ; No other registers effected
 18703                                  ;----------------------------------------------------------------------------
 18704                                  
 18705                                  Check_Access_AX:
 18706 00002C35 A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18707 00002C38 53                      	PUSH	BX
 18708                                  
 18709                                  ;	If sharing, then test for special sharing mode for FCBs
 18710                                  
 18711 00002C39 88C3                    	MOV	BL,AL
 18712 00002C3B 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18713 00002C3E 803E[7205]FF            	CMP	byte [FSHARING],-1
 18714 00002C43 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18715 00002C45 80FB70                  	CMP	BL,SHARING_NET_FCB
 18716 00002C48 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18717                                  CheckShareMode:
 18718 00002C4A 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18719 00002C4D 770D                    	JA	short Make_Bad_Access
 18720                                  CheckAccessMode:
 18721 00002C4F 88C3                    	MOV	BL,AL
 18722 00002C51 80E30F                  	AND	BL,access_mask
 18723 00002C54 80FB02                  	CMP	BL,2
 18724 00002C57 7703                    	JA	short Make_Bad_Access
 18725 00002C59 5B                      	POP	BX
 18726 00002C5A F8                      	CLC
 18727 00002C5B C3                      	retn
 18728                                  
 18729                                  Make_Bad_Access:
 18730 00002C5C B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18731 00002C5F 5B                      	POP	BX
 18732 00002C60 F9                      	STC
 18733 00002C61 C3                      	retn
 18734                                  
 18735                                  ;============================================================================
 18736                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18737                                  ;============================================================================
 18738                                  ; 08/08/2018 - Retro DOS v3.0
 18739                                  ; 18/05/2019 - Retro DOS v4.0
 18740                                  
 18741                                  ;**	Low level routine for returning disk drive information from a local
 18742                                  ;	  or NET device
 18743                                  ;
 18744                                  ;	DISK_INFO
 18745                                  ;
 18746                                  ;	  Modification history:
 18747                                  ;
 18748                                  ;		Created: ARR 30 March 1983
 18749                                  
 18750                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18751                                  ;---------------------------------------------------------------------------
 18752                                  ; Procedure Name : DISK_INFO
 18753                                  ;
 18754                                  ; Inputs:
 18755                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18756                                  ;		(It MAY NOT be NUL, error not detected)
 18757                                  ; Function:
 18758                                  ;	Get Interesting Drive Information
 18759                                  ; Returns:
 18760                                  ;	DX = Number of free allocation units
 18761                                  ;	BX = Total Number of allocation units on disk
 18762                                  ;	CX = Sector size
 18763                                  ;	AL = Sectors per allocation unit
 18764                                  ;	AH = FAT ID BYTE
 18765                                  ;	Carry set if error (currently user FAILed to I 24)
 18766                                  ; Segs except ES preserved, others destroyed
 18767                                  ;----------------------------------------------------------------------------
 18768                                  
 18769                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18770                                  ;hkn; DOSDATA. 
 18771                                  
 18772                                  DISK_INFO:
 18773                                  	; 08/08/2018 - Retro DOS v3.0
 18774                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18775                                  
 18776 00002C62 E8D1E5                  	call	TestNet
 18777 00002C65 7306                    	JNC	short LOCAL_DSK_INFO
 18778                                  
 18779                                  ;IF NOT Installed
 18780                                  ;	transfer NET_DISK_INFO
 18781                                  ;ELSE
 18782                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18783                                  	;INT	2FH
 18784                                  	;return
 18785                                  
 18786 00002C67 B80C11                  	mov     ax,110Ch
 18787 00002C6A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18788                                  			; ES:DI -> current directory
 18789                                  			; Return: AL = sectors per cluster, BX = total clusters
 18790                                  			; CX = bytes per sector, DX = number of available clusters
 18791 00002C6C C3                      	retn
 18792                                  ;ENDIF
 18793                                  
 18794                                  LOCAL_DSK_INFO:
 18795 00002C6D C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18796 00002C72 E883E6                  	call	ECritDisk
 18797 00002C75 E88C29                  	call	FATREAD_CDS		; perform media check.
 18798 00002C78 7241                    	JC	short CRIT_LEAVE
 18799 00002C7A BB0200                  	MOV	BX,2
 18800 00002C7D E8EE27                  	call	UNPACK			; Get first FAT sector into CURBUF
 18801 00002C80 7239                    	JC	short CRIT_LEAVE
 18802 00002C82 C536[E205]              	LDS	SI,[CURBUF]
 18803                                  	;mov	ah,[si+20]
 18804 00002C86 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18805                                  
 18806                                  ;hkn; SS is DOSDATA
 18807 00002C89 16                      	push	ss
 18808 00002C8A 1F                      	pop	ds
 18809                                  	;mov	cx,[es:bp+0Dh]
 18810 00002C8B 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18811                                  
 18812                                  ; Examine the current free count. If it indicates that we have an invalid
 18813                                  ; count, do the expensive calculation.
 18814                                  
 18815                                  	;mov	dx,[es:bp+1Fh]
 18816 00002C8F 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18817 00002C93 83FAFF                  	CMP	DX,-1			; is it valid?
 18818 00002C96 7404                    	JZ	short DoScan
 18819                                  
 18820                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18821                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18822                                  ; the count.
 18823                                  
 18824 00002C98 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18825 00002C9A 7222                    	JB	short GotVal		; yes, trust it.
 18826                                  DoScan:
 18827 00002C9C 31D2                    	XOR	DX,DX
 18828 00002C9E 49                      	DEC	CX
 18829                                  SCANFREE:
 18830 00002C9F E8CC27                  	call	UNPACK
 18831 00002CA2 7217                    	JC	short CRIT_LEAVE
 18832 00002CA4 7501                    	JNZ	short NOTFREECLUS
 18833 00002CA6 42                      	INC	DX			; A free one
 18834                                  NOTFREECLUS:
 18835 00002CA7 43                      	INC	BX			; Next cluster
 18836 00002CA8 E2F5                    	LOOP	SCANFREE
 18837 00002CAA 4B                      	DEC	BX			; BX was next cluster. Convert to
 18838                                  ReturnVals:
 18839 00002CAB 4B                      	DEC	BX			; count
 18840                                  	;mov	al,[es:bp+4]
 18841 00002CAC 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18842 00002CB0 FEC0                    	INC	AL			; Sectors/cluster
 18843                                  	;mov	cx,[es:bp+2]
 18844 00002CB2 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18845                                  	;mov	[es:bp+1Fh],dx
 18846 00002CB6 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18847 00002CBA F8                      	CLC
 18848                                  CRIT_LEAVE:
 18849                                  	;call	LCritDisk
 18850                                  	;retn
 18851                                  	; 17/12/2022
 18852 00002CBB E955E6                  	jmp	LCritDisk
 18853                                  
 18854                                  ; We have correctly computed everything previously. Load up registers for
 18855                                  ; return.
 18856                                  
 18857                                  GotVal: 
 18858 00002CBE 89CB                    	MOV	BX,CX			; get cluster count
 18859 00002CC0 EBE9                    	JMP	short ReturnVals
 18860                                  
 18861                                  ;============================================================================
 18862                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18863                                  ;============================================================================
 18864                                  ; 22/07/2018 - Retro DOS v3.0
 18865                                  
 18866                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18867                                  ;	NAME	DOS_SEARCH
 18868                                  
 18869                                  ;**	Low level routines for doing local and NET directory searches
 18870                                  ;
 18871                                  ;	DOS_SEARCH_FIRST
 18872                                  ;	DOS_SEARCH_NEXT
 18873                                  ;	RENAME_NEXT
 18874                                  ;
 18875                                  ;	Revision history:
 18876                                  ;
 18877                                  ;	    Created: ARR 30 March 1983
 18878                                  ;	    A000	version 4.00  Jan. 1988
 18879                                  ;	    A001	PTM 3564 -- search for fastopen
 18880                                  
 18881                                  ;Installed = TRUE
 18882                                  
 18883                                  ;--------------------------------------------------------------------------
 18884                                  ;
 18885                                  ; Procedure Name : DOS_SEARCH_FIRST
 18886                                  ;
 18887                                  ; Inputs:
 18888                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18889                                  ;		terminated)
 18890                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18891                                  ;		( = -1 if current dir not involved, else
 18892                                  ;		 Points to first char after last "/" of current dir part)
 18893                                  ;	[THISCDS] Points to CDS being used
 18894                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18895                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18896                                  ;	[DMAADD] Points to 53 byte buffer
 18897                                  ; Function:
 18898                                  ;	Initiate a search for the given file spec
 18899                                  ; Outputs:
 18900                                  ;	CARRY CLEAR
 18901                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18902                                  ;
 18903                                  ;	LOCAL
 18904                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18905                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18906                                  ;	    11 byte search name with Meta chars in it
 18907                                  ;	    Search Attribute Byte, attribute of search
 18908                                  ;	    WORD LastEnt value
 18909                                  ;	    WORD DirStart
 18910                                  ;	    4 byte pad
 18911                                  ;	    32 bytes of the directory entry found
 18912                                  ;	NET
 18913                                  ;	    21 bytes First byte has high bit set
 18914                                  ;	    32 bytes of the directory entry found
 18915                                  ;
 18916                                  ;	CARRY SET
 18917                                  ;	    AX = error code
 18918                                  ;		error_no_more_files
 18919                                  ;			No match for this file
 18920                                  ;		error_path_not_found
 18921                                  ;			Bad path (not in curr dir part if present)
 18922                                  ;		error_bad_curr_dir
 18923                                  ;			Bad path in current directory part of path
 18924                                  ; DS preserved, others destroyed
 18925                                  ;---------------------------------------------------------------------------
 18926                                  
 18927                                  ; 24/01/2024
 18928                                  %if 1
 18929                                  	; 17/05/2019 - Retro DOS v4.0
 18930                                  GET_FAST_SEARCH:
 18931                                  	; 22/07/2018
 18932                                  	; MSDOS 6.0
 18933                                  	; 17/12/2022
 18934 00002CC2 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 18935                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 18936                                  					;FO.trigger fastopen ;AN000;
 18937                                  	;call	DOS_SEARCH_FIRST
 18938                                  	;retn
 18939                                  	; 24/01/2024
 18940                                  	; 17/12/2022
 18941                                  	;jmp	DOS_SEARCH_FIRST
 18942                                  %endif
 18943                                  
 18944                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18945                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 18946                                  
 18947                                  DOS_SEARCH_FIRST:
 18948                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 18949                                  
 18950 00002CC8 C43E[A205]              	LES	DI,[THISCDS]
 18951 00002CCC 83FFFF                  	CMP	DI,-1
 18952 00002CCF 7506                    	JNZ	short TEST_RE_NET2
 18953                                  
 18954                                  ;IF NOT Installed
 18955                                  ;	transfer NET_SEQ_SEARCH_FIRST
 18956                                  ;ELSE
 18957                                  	;mov	ax,1119h
 18958 00002CD1 B81911                  	MOV	AX,(MultNET<<8)|25
 18959 00002CD4 CD2F                    	INT	2Fh
 18960 00002CD6 C3                      	retn
 18961                                  ;ENDIF
 18962                                  
 18963                                  TEST_RE_NET2:
 18964                                  	;test	word [es:di+43h],8000h
 18965                                  	; 17/12/2022
 18966                                  	;test	byte [es:di+44h],80h
 18967                                  	; 28/12/2022
 18968 00002CD7 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 18969                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 18970 00002CDC 7406                    	JZ	short LOCAL_SEARCH_FIRST
 18971                                  
 18972                                  ;IF NOT Installed
 18973                                  ;	transfer NET_SEARCH_FIRST
 18974                                  ;ELSE
 18975                                  	;mov	ax,111Bh
 18976 00002CDE B81B11                  	MOV	AX,(MultNET<<8)|27
 18977 00002CE1 CD2F                    	INT	2FH
 18978 00002CE3 C3                      	retn
 18979                                  ;ENDIF
 18980                                  	; 18/05/2019 - Retro DOS v4.0
 18981                                  LOCAL_SEARCH_FIRST:
 18982 00002CE4 E811E6                  	call	ECritDisk
 18983                                  	; MSDOS 6.0
 18984                                  	;;test	word [DOS34_FLAG],400h
 18985                                  	; 17/12/2022
 18986                                  	;test	byte [DOS34_FLAG+1],04h
 18987 00002CE7 F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 18988                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 18989 00002CEC 7405                    	JZ	short NOFN			;AN000;
 18990                                  	;or	byte [FastOpenFlg],1
 18991 00002CEE 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 18992                                  NOFN:						;AN000;
 18993 00002CF3 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18994                                  
 18995                                  ; 03/02/2024
 18996                                  %if 0
 18997                                  	; MSDOS 6.0
 18998                                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 18999                                  	JNC	short norm_GETPATH	;AN000;;FO. no
 19000                                  %else
 19001                                  	; 03/02/2024
 19002 00002CF8 16                      	push	ss
 19003 00002CF9 1F                      	pop	ds			;AN000;;FO. ds:si -> final path
 19004 00002CFA 8B36[B205]              	mov	si,[WFP_START]		;AN000;;FO.
 19005                                  getnext:				;AN000;
 19006 00002CFE AC                      	lodsb				;AN000;;FO. get char
 19007 00002CFF 08C0                    	or	al,al			;AN000;;FO. is it null
 19008 00002D01 7409                    	jz	short NO_Question	;AN000;;FO. yes
 19009 00002D03 3C3F                    	cmp	al,'?'                  ;AN000;;FO. is '?'
 19010 00002D05 75F7                    	jne	short getnext 		;AN000;;FO. no
 19011                                  %endif
 19012                                  	;and	byte [FastOpenFlg],80h
 19013 00002D07 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19014                                  NO_Question:	; 03/02/2024
 19015                                  norm_GETPATH:
 19016 00002D0C E82F11                  	call	GETPATH
 19017                                  	; BX = offset NAME1
 19018                                  ;_getdone:
 19019 00002D0F 7318                    	JNC	short find_check_dev
 19020 00002D11 7511                    	JNZ	short bad_path3
 19021 00002D13 08C9                    	OR	CL,CL
 19022 00002D15 740D                    	JZ	short bad_path3
 19023                                  find_no_more:
 19024                                  	;mov	ax,12h
 19025 00002D17 B81200                  	MOV	AX,error_no_more_files
 19026                                  BadBye:
 19027                                  	; MSDOS 6.0
 19028 00002D1A 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 19029                                  
 19030 00002D20 F9                      	STC
 19031                                  	;call	LCritDisk
 19032                                  	;retn
 19033                                  	; 18/12/2022
 19034 00002D21 E9EFE5                  	jmp	LCritDisk
 19035                                  
 19036                                  bad_path3:
 19037                                  	;mov	ax,3
 19038 00002D24 B80300                  	MOV	AX,error_path_not_found
 19039 00002D27 EBF1                    	JMP	short BadBye
 19040                                  
 19041                                  find_check_dev:
 19042 00002D29 08E4                    	OR	AH,AH
 19043 00002D2B 790A                    	JNS	short found_entry
 19044 00002D2D C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 19045 00002D33 FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 19046                                  found_entry:
 19047                                  
 19048                                  ; We set the physical drive byte here Instead of after found_it; Doing
 19049                                  ; a search-next may not have wfp_start set correctly
 19050                                  
 19051 00002D37 C43E[2C03]              	LES	DI,[DMAADD]
 19052 00002D3B 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 19053 00002D3F AC                      	LODSB
 19054 00002D40 2C40                    	SUB	AL,'A'-1                ; logical drive
 19055 00002D42 AA                      	STOSB				; High bit not set (local)
 19056                                  found_it:
 19057 00002D43 C43E[2C03]              	LES	DI,[DMAADD]
 19058 00002D47 47                      	INC	DI
 19059                                  
 19060                                  	; MSDOS 6.0
 19061 00002D48 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 19062                                  	;test	byte [FastOpenFlg],10h
 19063 00002D49 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 19064 00002D4E 7408                    	JZ	short notfast			  ;FO.;AN001;
 19065 00002D50 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 19066 00002D52 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 19067 00002D56 EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 19068                                  
 19069                                  notfast:
 19070 00002D58 BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 19071                                  movmov:
 19072                                  ; Special E5 code
 19073 00002D5B A4                      	MOVSB
 19074 00002D5C 26807DFF05              	CMP	BYTE [ES:DI-1],5
 19075 00002D61 7505                    	JNZ	short NOTKANJB
 19076 00002D63 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 19077                                  NOTKANJB:
 19078                                  	;MOV	CX,10
 19079                                  	;REP	MOVSB
 19080                                  	; 03/02/2024
 19081 00002D68 B90500                  	mov	cx,5
 19082 00002D6B F3A5                    	rep	movsw
 19083                                  
 19084                                  	; 08/09/2018
 19085 00002D6D 1F                      	POP	DS			;FO.;AN001; restore ds
 19086                                  
 19087 00002D6E A0[6B05]                	MOV	AL,[ATTRIB]
 19088 00002D71 AA                      	STOSB
 19089 00002D72 50                      	PUSH	AX			; Save AH device info
 19090 00002D73 A1[4803]                	MOV	AX,[LASTENT]
 19091 00002D76 AB                      	STOSW
 19092 00002D77 A1[C205]                	MOV	AX,[DIRSTART]
 19093 00002D7A AB                      	STOSW
 19094                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 19095 00002D7B 83C704                  	ADD	DI,4
 19096 00002D7E 58                      	POP	AX			; Recover AH device info
 19097 00002D7F 08E4                    	OR	AH,AH
 19098 00002D81 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 19099 00002D83 833E[E205]FF            	CMP	WORD [CURBUF],-1
 19100 00002D88 7510                    	JNZ	short OKSTORE
 19101                                  
 19102                                  	; MSDOS 6.0
 19103 00002D8A F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 19104                                  					;AN000;;FO. from fastopen and is good
 19105 00002D8F 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 19106                                  
 19107                                  	; The user has specified the root directory itself, rather than some
 19108                                  	; contents of it. We can't "find" that.
 19109                                  
 19110 00002D91 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 19111                                  					;   stuffing a -1 at Lastent
 19112 00002D97 E97DFF                  	JMP	find_no_more
 19113                                  
 19114                                  OKSTORE:
 19115 00002D9A 8E1E[E405]              	MOV	DS,[CURBUF+2]
 19116                                  DOSREL:
 19117                                  	; BX = offset NAME1 (from GETPATH)
 19118 00002D9E 89DE                    	MOV	SI,BX			; SI-> start of entry
 19119                                  
 19120                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 19121                                  
 19122                                  	;;mov	cx,32
 19123                                  	;MOV	CX,dir_entry.size
 19124                                  	; 03/02/2024
 19125 00002DA0 B91000                  	mov	cx,dir_entry.size>>1
 19126                                  ;;;;; 7/29/86
 19127 00002DA3 89F8                    	MOV	AX,DI			; save the 1st byte addr
 19128                                  	;REP	MOVSB
 19129 00002DA5 F3A5                    	rep	movsw
 19130                                  	;
 19131 00002DA7 89C7                    	MOV	DI,AX			; restore 1st byte addr
 19132 00002DA9 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 19133 00002DAD 7504                    	JNZ	short NO05
 19134 00002DAF 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 19135                                  NO05:
 19136                                  
 19137                                  ;;;;; 7/29/86
 19138                                  
 19139                                  ;hkn; FastOpenflg is in DOSDATA use SS
 19140                                  	; 16/12/2022
 19141                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19142                                  	; MSDOS 6.0
 19143                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19144                                  	; 18/05/2019 - Retro DOS v4.0
 19145 00002DB3 16                      	push	ss
 19146 00002DB4 1F                      	pop	ds
 19147                                  	; 16/12/2022
 19148 00002DB5 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 19149                                  
 19150                                  ;hkn; SS is DOSDATA
 19151                                  	;push	ss
 19152                                  	;pop	ds
 19153 00002DBA F8                      	CLC
 19154                                  	;call	LCritDisk
 19155                                  	;retn
 19156                                  	; 16/12/2022
 19157 00002DBB E955E5                  	jmp	LCritDisk
 19158                                  
 19159                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 19160                                  ;----------------------------------------------------------------------------
 19161                                  ;
 19162                                  ; Procedure Name : DOS_SEARCH_NEXT
 19163                                  ;
 19164                                  ; Inputs:
 19165                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 19166                                  ;	    (only first 21 bytes must have valid information)
 19167                                  ; Function:
 19168                                  ;	Look for subsequent matches
 19169                                  ; Outputs:
 19170                                  ;	CARRY CLEAR
 19171                                  ;	    The 53 bytes at DMAADD are updated for next call
 19172                                  ;		(see DOS_SEARCH_FIRST)
 19173                                  ;	CARRY SET
 19174                                  ;	    AX = error code
 19175                                  ;		error_no_more_files
 19176                                  ;			No more files to find
 19177                                  ; DS preserved, others destroyed
 19178                                  ;---------------------------------------------------------------------------
 19179                                  
 19180                                  ;hkn; called from search.asm. DS already set up at this point.
 19181                                  
 19182                                  DOS_SEARCH_NEXT:
 19183 00002DBE C43E[2C03]              	LES	DI,[DMAADD]
 19184 00002DC2 268A05                  	MOV	AL,[ES:DI]
 19185 00002DC5 A880                    	TEST	AL,80H			; Test for NET
 19186 00002DC7 7406                    	JZ	short LOCAL_SEARCH_NEXT
 19187                                  ;IF NOT Installed
 19188                                  ;	transfer NET_SEARCH_NEXT
 19189                                  ;ELSE
 19190                                  	;mov	ax,111Ch
 19191 00002DC9 B81C11                  	MOV	AX,(MultNET<<8)|28
 19192 00002DCC CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 19193                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 19194                                  		     ; Return: CF set on error, AX = DOS error code
 19195                                  		     ; CF clear if successful
 19196 00002DCE C3                      	retn
 19197                                  ;ENDIF
 19198                                  
 19199                                  LOCAL_SEARCH_NEXT:
 19200                                  	;AL is drive A=1
 19201                                  	;mov	byte [EXTERR_LOCUS],2
 19202 00002DCF C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19203 00002DD4 E821E5                  	call	ECritDisk
 19204                                  
 19205                                  ;hkn; DummyCDS is in DOSDATA
 19206 00002DD7 C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 19207                                  ;hkn; Segment address is DOSDATA - use ds
 19208                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 19209 00002DDD 8C1E[A405]              	mov	[THISCDS+2],DS
 19210                                  
 19211 00002DE1 0440                    	ADD	AL,'A'-1
 19212 00002DE3 E8243B                  	call	InitCDS
 19213                                  
 19214                                  ;	call	GETTHISDRV		; Set CDS pointer
 19215                                  
 19216 00002DE6 7246                    	JC	short No_files		; Bogus drive letter
 19217 00002DE8 C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 19218                                  	;les	bp,[es:di+45h]
 19219 00002DEC 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 19220 00002DF0 E83FD8                  	call	GOTDPB			; [THISDPB] = ES:BP
 19221                                  
 19222                                  	; 16/12/2022
 19223 00002DF3 268A4600                	mov	al,[ES:BP]
 19224                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19225                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 19226 00002DF7 A2[7605]                	mov	[THISDRV],AL
 19227                                  	;mov	word [CREATING],0E500h
 19228 00002DFA C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 19229 00002E00 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 19230 00002E05 C536[2C03]              	LDS	SI,[DMAADD]
 19231 00002E09 AC                      	LODSB				; Drive Byte
 19232                                  
 19233                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 19234                                  RENAME_NEXT:
 19235                                  	;context ES
 19236 00002E0A 16                      	push	ss
 19237 00002E0B 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 19238                                  
 19239                                  ;hkn; NAME1 is in DOSDATA
 19240 00002E0C BF[4B05]                	MOV	DI,NAME1
 19241                                  
 19242 00002E0F B90B00                  	MOV	CX,11
 19243 00002E12 F3A4                    	REP	MOVSB			; Search name
 19244 00002E14 AC                      	LODSB				; Attribute
 19245                                  
 19246                                  ;hkn; SS override
 19247 00002E15 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19248 00002E19 AD                      	LODSW				; LastEnt
 19249 00002E1A 09C0                    	OR	AX,AX
 19250                                  	; 03/02/2024
 19251                                  	;JNS	short cont_load
 19252 00002E1C 7810                    	js	short No_files
 19253                                  ;No_files:
 19254                                  	;JMP	find_no_more
 19255                                  
 19256                                  cont_load:
 19257 00002E1E 50                      	PUSH	AX			; Save LastEnt
 19258 00002E1F AD                      	LODSW				; DirStart
 19259 00002E20 89C3                    	MOV	BX,AX
 19260                                  
 19261                                  ;hkn; SS is DOSDATA
 19262                                  	;context DS
 19263 00002E22 16                      	push	ss
 19264 00002E23 1F                      	pop	ds
 19265 00002E24 C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 19266                                  	;invoke	SetDirSrch
 19267 00002E28 E8B60F                  	call	SETDIRSRCH
 19268 00002E2B 7304                    	JNC	short SEARCH_GOON
 19269 00002E2D 58                      	POP	AX			; Clean stack
 19270                                  	;JMP	short No_files
 19271                                  	; 03/02/2024
 19272                                  No_files:
 19273 00002E2E E9E6FE                  	JMP	find_no_more
 19274                                  
 19275                                  SEARCH_GOON:
 19276 00002E31 E89E12                  	call	STARTSRCH
 19277 00002E34 58                      	POP	AX
 19278 00002E35 E87A0F                  	call	GETENT
 19279 00002E38 72F4                    	JC	short No_files
 19280 00002E3A E8B00E                  	call	NEXTENT
 19281 00002E3D 72EF                    	JC	short No_files
 19282 00002E3F 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 19283 00002E41 E9FFFE                  	JMP	found_it ; 10/08/2018
 19284                                  
 19285                                  ; MSDOS 6.0
 19286                                  ;---------------------------------------------------------------------------
 19287                                  ;
 19288                                  ; Procedure Name : CHECK_QUESTION
 19289                                  ;
 19290                                  ; Input: [WFP_START]= pointer to final path
 19291                                  ; Function: check '?' char
 19292                                  ; Output: carry clear, if no '?'
 19293                                  ;	 carry set, if '?' exists
 19294                                  ;---------------------------------------------------------------------------
 19295                                  
 19296                                  ; 03/02/2024
 19297                                  %if 0
 19298                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19299                                  CHECK_QUESTION:
 19300                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 19301                                  ;hkn;	PUSH	CS			;AN000;;FO.
 19302                                  	push	ss
 19303                                  	POP	DS			;AN000;;FO. ds:si -> final path
 19304                                  	; 16/12/2022
 19305                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19306                                  	MOV	SI,[WFP_START]		;AN000;;FO.
 19307                                  	;mov	si,[ss:WFP_START]
 19308                                  getnext:				;AN000;
 19309                                  	LODSB				;AN000;;FO. get char
 19310                                  	OR	AL,AL			;AN000;;FO. is it null
 19311                                  	JZ	short NO_Question	;AN000;;FO. yes
 19312                                  	CMP	AL,'?'                  ;AN000;;FO. is '?'
 19313                                  	JNZ	short getnext 		;AN000;;FO. no
 19314                                  	STC				;AN000;;FO.
 19315                                  NO_Question:				;AN000;
 19316                                  	retn				;AN000;;FO.
 19317                                  %endif
 19318                                  
 19319                                  ;============================================================================
 19320                                  ; ABORT.ASM, MSDOS 6.0, 1991
 19321                                  ;============================================================================
 19322                                  ; 23/07/2018 - Retro DOS v3.0
 19323                                  ; 18/05/2019 - Retro DOS v4.0
 19324                                  
 19325                                  ;**
 19326                                  ;
 19327                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 19328                                  ;  If process has NET resources a close all is sent out over the net.
 19329                                  ;
 19330                                  ;   DOS_ABORT
 19331                                  ;
 19332                                  ;   Modification history:
 19333                                  ;
 19334                                  ;       Created: ARR 30 March 1983
 19335                                  ;
 19336                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 19337                                  ;				being terminated only if it is busy.
 19338                                  ;
 19339                                  
 19340                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 19341                                  ;--------------------------------------------------------------------------
 19342                                  ;
 19343                                  ; Procedure Name : DOS_ABORT
 19344                                  ;
 19345                                  ; Inputs:
 19346                                  ;       [CurrentPDB] set to PID of process aborting
 19347                                  ; Function:
 19348                                  ;       Close all files and free all SFTs for this PID
 19349                                  ; Returns:
 19350                                  ;       None
 19351                                  ; All destroyed except stack
 19352                                  ;---------------------------------------------------------------------------
 19353                                  
 19354                                  DOS_ABORT:
 19355 00002E44 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 19356 00002E49 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 19357                                  reset_free_jfn:
 19358 00002E4E 89CB                    	MOV     BX,CX
 19359 00002E50 51                      	PUSH    CX
 19360 00002E51 4B                      	DEC     BX                      ; get jfn (start with last one)
 19361                                  
 19362 00002E52 E8E937                  	CALL	_$CLOSE
 19363 00002E55 59                      	POP     CX
 19364 00002E56 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 19365                                  
 19366                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 19367                                  ; are running in the no-sharing no-network environment, we are simulating the
 19368                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 19369                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 19370                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 19371                                  ;
 19372                                  ; If sharing is loaded, then the following call to close process will
 19373                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 19374                                  ;
 19375                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 19376                                  ; known network resources. These resources are then responsible for cleaning
 19377                                  ; up after this process.
 19378                                  ;
 19379                                  ; Sleazy, eh?
 19380                                  
 19381                                  	;context DS			; SS is DOSDATA
 19382 00002E58 16                      	push	ss
 19383 00002E59 1F                      	pop	ds  ; 09/09/2018
 19384                                  
 19385                                  	;CallInstall Net_Abort, MultNET, 29
 19386 00002E5A B81D11                  	mov	ax,111Dh
 19387 00002E5D CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 19388                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 19389                                  			; DS???, SS = DOS CS
 19390                                  ;if installed
 19391 00002E5F FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 19392                                  ;else
 19393                                  ;	call 	MFTCloseP
 19394                                  ;endif
 19395                                  
 19396                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 19397                                  ; counts.
 19398                                  					; SS override
 19399 00002E63 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 19400                                  	;mov	cx,[es:di+4]
 19401 00002E68 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 19402 00002E6C E317                    	jcxz    FCBScanDone
 19403                                  	;lea	di,[di+6]
 19404 00002E6E 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 19405 00002E71 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19406                                  FCBTest:
 19407                                  	;cmp	[es:di+31h],ax
 19408 00002E75 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 19409 00002E79 7505                    	jnz	short FCBNext		; no, skip it
 19410 00002E7B 26C7050000              	mov	word [es:di],0
 19411                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 19412                                  FCBNext:
 19413 00002E80 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 19414 00002E83 E2F0                    	loop    FCBTest
 19415                                  FCBScanDone:
 19416                                  
 19417                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 19418                                  
 19419 00002E85 31DB                    	XOR     BX,BX
 19420                                  Scan:
 19421 00002E87 53                      	push    bx
 19422 00002E88 E82E37                  	call	SFFromSFN
 19423 00002E8B 5B                      	pop     bx
 19424                                  	;jnc	short Scan1
 19425                                  	;retn
 19426                                  
 19427                                  	; 18/12/2022
 19428                                  	;jc	short NO_Question ; retn
 19429                                  	; 03/02/2024
 19430 00002E8C 7234                    	jc	short RET2
 19431                                  
 19432                                  ;M038
 19433                                  ; Do what the comment above says, check for busy state
 19434                                  
 19435                                  Scan1:
 19436                                  	;cmp	word [es:di],0
 19437                                  	;jz	short scan_next  ; MSDOS 3.3
 19438                                  	; MSDOS 6.0
 19439 00002E8E 26833DFF                	cmp	word [es:di],sf_busy ; -1
 19440                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 19441                                  				; Is Sft busy? ;M038
 19442 00002E92 7519                    	jnz	short scan_next
 19443                                  ;
 19444                                  ; we have a SFT that is busy. See if it is for the current process
 19445                                  ;
 19446 00002E94 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19447                                  	;cmp	[es:di+31h],ax
 19448 00002E98 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 19449 00002E9C 750F                    	jnz	short scan_next
 19450 00002E9E 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 19451                                  	;cmp	[es:di+2Fh],ax
 19452 00002EA2 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 19453 00002EA6 7505                    	jnz	short scan_next
 19454                                  
 19455                                  ; This SFT is labelled as ours.
 19456                                  
 19457 00002EA8 26C7050000              	mov	word [es:di],0
 19458                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 19459                                  scan_next:
 19460 00002EAD 43                      	inc     bx
 19461 00002EAE EBD7                    	jmp     short Scan
 19462                                  
 19463                                  ;============================================================================
 19464                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 19465                                  ;============================================================================
 19466                                  ; 23/07/2018 - Retro DOS v3.0
 19467                                  ; 18/05/2019 - Retro DOS v4.0
 19468                                  
 19469                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 19470                                  ;
 19471                                  ;	DOS_CLOSE
 19472                                  ;	DOS_COMMIT
 19473                                  ;	FREE_SFT
 19474                                  ;	SetSFTTimes
 19475                                  ;
 19476                                  ;	Revision history:
 19477                                  ;
 19478                                  ;	   AN000  version 4.00	Jan. 1988
 19479                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 19480                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 19481                                  
 19482                                  ;Installed = TRUE
 19483                                  
 19484                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 19485                                  ;---------------------------------------------------------------------------
 19486                                  ;
 19487                                  ; Procedure Name : DOS_CLOSE
 19488                                  ;
 19489                                  ; Inputs:
 19490                                  ;	[THISSFT] set to the SFT for the file being used
 19491                                  ; Function:
 19492                                  ;	Close the indicated file via the SFT
 19493                                  ; Returns:
 19494                                  ;	sf_ref_count decremented otherwise
 19495                                  ;	ES:DI point to SFT
 19496                                  ;	Carry set if error
 19497                                  ;	    AX has error code
 19498                                  ; DS preserved, others destroyed
 19499                                  ;---------------------------------------------------------------------------
 19500                                  
 19501                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS already set up.
 19502                                  
 19503                                  ; 18/05/2019 - Retro DOS v4.0
 19504                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 19505                                  
 19506                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19507                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 19508                                  
 19509                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 19510                                  
 19511                                  DOS_CLOSE:
 19512 00002EB0 C43E[9E05]              	LES	DI,[THISSFT]
 19513                                  	;mov	bx,[ES:DI+5]
 19514 00002EB4 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19515                                  
 19516                                  ; Network closes are handled entirely by the net code.
 19517                                  
 19518                                  	;;test	bx,8000h
 19519                                  	;TEST	BX,sf_isnet
 19520                                  	; 17/12/2022
 19521                                  	;test	bh,80h
 19522 00002EB8 F6C780                  	test	bh,(sf_isnet>>8)
 19523 00002EBB 7406                    	JZ	short LocalClose
 19524                                  
 19525                                  	;CallInstall Net_Close,MultNET,6
 19526 00002EBD B80611                  	mov     ax,1106h
 19527 00002EC0 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 19528                                  			; ES:DI -> SFT
 19529                                  			; SFT DPB field -> DPB of drive containing file
 19530                                  			; Return: CF set on error, AX = DOS error code
 19531                                  			; CF clear if successful
 19532                                  RET2:		; 03/02/2024
 19533 00002EC2 C3                      	retn
 19534                                  
 19535                                  ; All closes release the sharing information.
 19536                                  ; No commit releases sharing information
 19537                                  ;
 19538                                  ; All closes decrement the ref count.
 19539                                  ; No commit decrements the ref count.
 19540                                  
 19541                                  LocalClose:
 19542 00002EC3 E832E4                  	call	ECritDisk
 19543 00002EC6 E85801                  	CALL	SetSFTTimes
 19544 00002EC9 E8D900                  	CALL	FREE_SFT		; dec ref count or mark as busy
 19545                                  
 19546                                  ;hkn; SS is DOSDATA
 19547                                  	;Context DS
 19548 00002ECC 16                      	push	ss
 19549 00002ECD 1F                      	pop	ds
 19550                                  
 19551 00002ECE 50                      	push	ax
 19552 00002ECF 53                      	push	bx
 19553 00002ED0 E8CD43                  	call	ShareEnd
 19554 00002ED3 5B                      	pop	bx
 19555 00002ED4 58                      	pop	ax
 19556                                  
 19557                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 19558                                  
 19559                                  CloseEntry:
 19560 00002ED5 50                      	PUSH	AX
 19561                                  
 19562                                  ; File clean or device does not get stamped nor disk looked at.
 19563                                  
 19564                                  	;test	bx,0C0h
 19565                                  	; 17/12/2022
 19566 00002ED6 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19567                                  	;TEST	BX,devid_file_clean+devid_device
 19568 00002ED9 7403                    	JZ	short rdir
 19569                                  	; 14/11/2022
 19570 00002EDB E9B500                  	JMP	FREE_SFT_OK		; either clean or device
 19571                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19572                                  
 19573                                  ; Retrieve the directory entry for the file
 19574                                  
 19575                                  rdir:
 19576 00002EDE E8D100                  	CALL	DirFromSFT
 19577                                  	;mov	al,5
 19578 00002EE1 B005                    	MOV	AL,error_access_denied
 19579 00002EE3 7303                    	JNC	short clook
 19580                                  	; 14/11/2022
 19581 00002EE5 E9AC00                  	JMP	CloseFinish		; pretend the close worked.
 19582                                  	;jc	short CloseFinish ; 24/07/2019
 19583                                  clook:
 19584                                  
 19585                                  ; ES:DI points to entry
 19586                                  ; DS:SI points to SFT
 19587                                  ; ES:BX points to buffer header
 19588                                  
 19589 00002EE8 57                      	push	di
 19590 00002EE9 56                      	push	si
 19591                                  	;lea	si,[si+20h]
 19592 00002EEA 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19593                                  
 19594                                  ; ES:DI point to directory entry
 19595                                  ; DS:SI point to unpacked name
 19596                                  
 19597 00002EED E8FAE2                  	call	XCHGP
 19598                                  
 19599                                  ; ES:DI point to unpacked name
 19600                                  ; DS:SI point to directory entry
 19601                                  
 19602 00002EF0 E8580E                  	call	MetaCompare
 19603 00002EF3 E8F4E2                  	call	XCHGP
 19604 00002EF6 5E                      	pop	si
 19605 00002EF7 5F                      	pop	di
 19606 00002EF8 740C                    	JZ	short CLOSE_GO		; Name OK
 19607                                  Bye:	
 19608 00002EFA 89F7                    	MOV	DI,SI
 19609 00002EFC 1E                      	PUSH	DS
 19610 00002EFD 07                      	POP	ES			; ES:DI points to SFT
 19611 00002EFE 16                      	PUSH	SS
 19612 00002EFF 1F                      	POP	DS
 19613 00002F00 F9                      	STC
 19614                                  	;mov	al,2
 19615 00002F01 B002                    	MOV	AL,error_file_not_found
 19616 00002F03 E98E00                  	JMP	CloseFinish ; 24/07/2019
 19617                                  
 19618                                  	; 18/05/2019 - Retro DOS v4.0
 19619                                  CLOSE_GO:
 19620                                  	; 03/02/2024
 19621                                  	;mov	al,[si+4]
 19622 00002F06 8A4404                  	mov	al,[si+SF_ENTRY.sf_attr]
 19623                                  	
 19624                                  	; MSDOS 6.0
 19625                                  	;test	word [si+2],8000h
 19626                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19627                                  	; 17/12/2022
 19628                                  	;test	byte [si+3],80h
 19629 00002F09 F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19630 00002F0D 740A                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19631                                  	; MSDOS 3.3 & MSDOS 6.0
 19632                                  	;mov	ch,[es:di+0Bh]
 19633 00002F0F 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19634                                  
 19635                                  	; 03/02/2024
 19636                                  	;;mov	al,[si+4]
 19637                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr]
 19638                                  
 19639                                  ;hkn; SS override
 19640 00002F13 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19641                                  	; MSDOS 3.3
 19642                                  	;;call	MatchAttributes
 19643                                  	;;JNZ	short Bye		; attributes do not match
 19644                                  	; 18/05/2019
 19645 00002F17 EB04                    	JMP	SHORT setattr		;FT.
 19646                                  nofcb:
 19647                                  	; 03/02/2024
 19648                                  	; MSDOS 6.0
 19649                                  	;;mov	al,[si+4]
 19650                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19651                                  
 19652 00002F19 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19653                                  setattr:
 19654                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19655                                  	;or	byte [es:di+0Bh],20h
 19656 00002F1D 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19657                                  	; MSDOS 6.0
 19658                                  	;mov	ax,[es:di+1Ah]
 19659 00002F22 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19660                                  					;F.O. save old first cluster
 19661                                  ;hkn; SS override
 19662 00002F26 36A3[BE0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19663                                  
 19664                                  ; 03/02/2024
 19665                                  %if 0
 19666                                  	;mov	ax,[si+0Bh]
 19667                                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19668                                  	;mov	[es:di+1Ah],ax
 19669                                  	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19670                                  	;mov	ax,[si+11h]
 19671                                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19672                                  	;mov	[es:di+1Ch],ax
 19673                                  	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19674                                  	;mov	ax,[si+13h]
 19675                                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19676                                  	;mov	[es:di+1Eh],ax
 19677                                  	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19678                                  	;mov	ax,[si+0Fh]
 19679                                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19680                                  	;mov	[es:di+18h],ax
 19681                                  	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19682                                  	;mov	ax,[si+0Dh]
 19683                                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19684                                  	;mov	[es:di+16h],ax
 19685                                  	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19686                                  %else
 19687                                  	; 03/02/2024 - Retro DOS v4.1
 19688 00002F2A 56                      	push	si
 19689 00002F2B 83C60B                  	add	si,0Bh
 19690 00002F2E AD                      	lodsw	; [si+SF_ENTRY.sf_firclus]
 19691                                  	;mov	[es:di+1Ah],ax
 19692 00002F2F 2689451A                	mov	[es:di+dir_entry.dir_first],ax	; Set first cluster
 19693 00002F33 AD                      	lodsw	; [si+SF_ENTRY.sf_time]
 19694 00002F34 26894516                	mov	[es:di+dir_entry.dir_time],ax	; Set time
 19695 00002F38 AD                      	lodsw	; [si+SF_ENTRY.sf_date]
 19696 00002F39 26894518                	mov	[es:di+dir_entry.dir_date],ax	; Set date
 19697 00002F3D AD                      	lodsw	; [si+SF_ENTRY.sf_size]
 19698 00002F3E 2689451C                	mov	[es:di+dir_entry.dir_size_l],ax	; Set size
 19699 00002F42 AD                      	lodsw	; [si+SF_ENTRY.sf_size+2]
 19700 00002F43 2689451E                	mov	[es:di+dir_entry.dir_size_h],ax
 19701 00002F47 5E                      	pop	si
 19702                                  %endif
 19703                                  
 19704                                  	; MSDOS 6.0
 19705                                  ;; File Tagging
 19706 00002F48 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty
 19707                                  				  ;LB. if already dirty		    ;AN000;
 19708 00002F4D 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19709                                  	; 02/06/2019
 19710 00002F4F E8302B                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19711                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19712                                  	;or	byte [es:bx+5],40h
 19713 00002F52 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19714                                  yesdirty4:
 19715 00002F57 1E                      	push	ds
 19716 00002F58 56                      	push	si
 19717                                  	; MSDOS 6.0
 19718                                  	;mov	cx,[si+0Bh]
 19719                                  	; 07/12/2022
 19720 00002F59 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19721                                  ;hkn; SS override
 19722 00002F5C 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19723                                  	; MSDOS 3.3 
 19724                                  	;push	ss
 19725                                  	;pop	ds
 19726                                  	;MOV	AL,[THISDRV]
 19727                                  ;;; 10/1/86  update fastopen cache
 19728                                  	; MSDOS 3.3 & MSDOS 6.0
 19729 00002F60 52                      	PUSH	DX
 19730 00002F61 B400                    	MOV	AH,0			; dir entry update
 19731 00002F63 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19732                                  	; MSDOS 6.0
 19733 00002F65 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19734 00002F67 750D                    	JNZ	short do_update2	;AN005; no, do update
 19735 00002F69 B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19736                                  	;mov	di,[si+1Bh]
 19737 00002F6B 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19738                                  	;mov	cx,[si+1Dh]
 19739 00002F6E 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19740                                  	;mov	dh,[si+1Fh]
 19741 00002F71 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19742 00002F74 EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19743                                  do_update2:				;AN011;F.O.
 19744                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19745                                  	; 
 19746 00002F76 363B0E[BE0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19747 00002F7B 7407                    	JZ	short do_update		;AN011;F.O. yes
 19748 00002F7D B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19749 00002F7F 368B0E[BE0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19750                                  do_update:				;AN005;
 19751                                  ;hkn; SS is DOSDATA
 19752                                  	;Context DS
 19753 00002F84 16                      	push	ss
 19754 00002F85 1F                      	pop	ds
 19755                                  	; MSDOS 3.3 & MSDOS 6.0
 19756 00002F86 E8FCF6                  	call	FastOpen_Update 	; invoke fastopen
 19757 00002F89 5A                      	POP	DX
 19758                                  
 19759                                  ;;; 10/1/86  update fastopen cache
 19760 00002F8A E8F029                  	call	FLUSHBUF		; flush all relevant buffers
 19761 00002F8D 5F                      	pop	di
 19762 00002F8E 07                      	pop	es
 19763                                  	;mov	al,5
 19764 00002F8F B005                    	MOV	AL,error_access_denied
 19765 00002F91 7201                    	JC	short CloseFinish
 19766                                  FREE_SFT_OK:
 19767 00002F93 F8                      	CLC				; signal no error.
 19768                                  CloseFinish:
 19769                                  
 19770                                  ; Indicate to the device that the SFT is being closed.
 19771                                  
 19772                                  ;;;; 7/21/86
 19773 00002F94 9C                      	PUSHF				; save flag from DirFromSFT
 19774 00002F95 E87C15                  	call	DEV_CLOSE_SFT
 19775 00002F98 9D                      	POPF
 19776                                  ;;;; 7/21/86
 19777                                  ;
 19778                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19779                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19780                                  ; going to be moving from busy to free.
 19781                                  ;
 19782 00002F99 59                      	POP	CX			; get old ref count
 19783 00002F9A 9C                      	PUSHF
 19784                                  	; 03/02/2024
 19785                                  	;DEC	CX			; if cx != 1
 19786                                  	;JNZ	short NoFree		; then do NOT free SFT
 19787 00002F9B E203                    	loop	NoFree ; PCDOS 7.1 IBMDOS.COM
 19788                                  
 19789 00002F9D 26890D                  	mov	[es:di],cx ; 0
 19790                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19791                                  NoFree:
 19792 00002FA0 E870E3                  	call	LCritDisk
 19793 00002FA3 9D                      	POPF
 19794 00002FA4 C3                      	retn
 19795                                  
 19796                                  ;---------------------------------------------------------------------------
 19797                                  ;
 19798                                  ; Procedure Name : FREE_SFT
 19799                                  ;
 19800                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19801                                  ; Flags preserved. Return old ref count in AX
 19802                                  ;
 19803                                  ; Note that busy is indicated by the SFT ref count being -1.
 19804                                  ;
 19805                                  ;---------------------------------------------------------------------------
 19806                                  
 19807                                  FREE_SFT:
 19808 00002FA5 9C                      	PUSHF		; Save carry state
 19809 00002FA6 268B05                  	mov	ax,[es:di]
 19810                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19811 00002FA9 48                      	DEC	AX
 19812 00002FAA 7501                    	JNZ	short SetCount
 19813 00002FAC 48                      	DEC	AX
 19814                                  SetCount:
 19815 00002FAD 268705                  	xchg	ax,[es:di]
 19816                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19817 00002FB0 9D                      	POPF
 19818 00002FB1 C3                      	retn
 19819                                  
 19820                                  	; 18/05/2019 - Retro DOS v4.0
 19821                                  
 19822                                  ;----------------------------------------------------------------------------
 19823                                  ;
 19824                                  ; Procedure Name : DirFromSFT
 19825                                  ;
 19826                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19827                                  ;
 19828                                  ;   Inputs:	ES:DI point to SFT
 19829                                  ;		DS = DOSDATA
 19830                                  ;   Outputs:
 19831                                  ;		EXTERR_LOCUS = errLOC_Disk
 19832                                  ;		CurBuf points to buffer
 19833                                  ;		Carry Clear -> operation OK
 19834                                  ;		    ES:DI point to entry
 19835                                  ;		    ES:BX point to buffer
 19836                                  ;		    DS:SI point to SFT
 19837                                  ;		Carry SET   -> operation failed
 19838                                  ;		    registers trashified
 19839                                  ;   Registers modified: ALL
 19840                                  ;----------------------------------------------------------------------------
 19841                                  
 19842                                  DirFromSFT:
 19843                                  	;mov	byte [EXTERR_LOCUS],2
 19844 00002FB2 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19845 00002FB7 06                      	push	es
 19846 00002FB8 57                      	push	di
 19847                                  	; MSDOS 3.3
 19848                                  	;;mov	dx,[es:di+1Dh]
 19849                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19850                                  	; MSDOS 6.0
 19851                                  	;mov	dx,[es:[di+1Dh]
 19852 00002FB9 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19853 00002FBD 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19854                                  	; 04/02/2024
 19855 00002FC1 52                      	push	dx
 19856                                  	;mov	dx,[es:di+1Bh]
 19857 00002FC2 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19858                                  	; 04/02/2024
 19859                                  	; 19/05/2019
 19860                                  	;PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19861                                  	; MSDOS 3.3 & MSDOS 6.0
 19862 00002FC6 52                      	PUSH	DX
 19863 00002FC7 E82A26                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19864                                  					; [THISDPB] set
 19865 00002FCA 5A                      	POP	DX
 19866 00002FCB 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19867 00002FCF 721E                    	JC	short PopDone
 19868                                  	; 22/09/2023
 19869                                  	;XOR	AL,AL	; *		; Pre read
 19870                                  	;;mov	byte [ALLOWED],18h
 19871                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19872                                  	;call	GETBUFFR
 19873                                  	; 22/09/2023
 19874 00002FD1 E8A528                  	call	GETBUFFER ; * 		; Pre read
 19875 00002FD4 7219                    	JC	short PopDone
 19876 00002FD6 5E                      	pop	si
 19877 00002FD7 1F                      	pop	ds			; Get back SFT pointer
 19878                                  
 19879                                  ;hkn; SS override
 19880 00002FD8 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19881                                  	;or	byte [es:di+5],4
 19882 00002FDD 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19883 00002FE2 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19884                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19885                                  	;lea	di,[di+20] ; MSDOS 6.0
 19886 00002FE4 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19887                                  	;mov	al,32
 19888 00002FE7 B020                    	MOV	AL,dir_entry.size
 19889                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19890 00002FE9 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19891 00002FEC 01C7                    	ADD	DI,AX			; Point at the entry
 19892 00002FEE C3                      	retn				; carry is clear
 19893                                  PopDone:
 19894 00002FEF 5F                      	pop	di
 19895 00002FF0 07                      	pop	es
 19896                                  PopDone_retn:
 19897 00002FF1 C3                      	retn
 19898                                  
 19899                                  ;----------------------------------------------------------------------------
 19900                                  ;
 19901                                  ;**	DOS_Commit - UPdate Directory Entries
 19902                                  ;
 19903                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19904                                  ;		(DS) = DOSGROUP
 19905                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19906                                  ;	USES	all but DS
 19907                                  ;
 19908                                  ;----------------------------------------------------------------------------
 19909                                  
 19910                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19911                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19912                                  
 19913                                  DOS_COMMIT:
 19914                                  	;hkn; called from srvcall. DS already set up.
 19915 00002FF2 C43E[9E05]              	LES	DI,[THISSFT]
 19916                                  	;mov	bx,[es:di+5]
 19917 00002FF6 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19918                                  	;test	bx,0C0h
 19919                                  	; 17/12/2022
 19920 00002FFA F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19921                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19922 00002FFD 75F2                    	jnz	short PopDone_retn
 19923                                  	;test	bx,8000h
 19924                                  	; 17/12/2022
 19925                                  	;test	bh,80h
 19926 00002FFF F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19927                                  	;TEST	BX,sf_isnet ; 8000h
 19928 00003002 7406                    	JZ	short LOCAL_COMMIT
 19929                                  
 19930                                  ;IF NOT Installed
 19931                                  ;	transfer NET_COMMIT
 19932                                  ;ELSE
 19933                                  	;mov	ax,1107h
 19934 00003004 B80711                  	MOV	AX,(MultNET<<8)|7
 19935 00003007 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19936                                  			; ES:DI -> SFT
 19937                                  			; SFT DPB field -> DPB of drive containing file
 19938                                  			; Return: CF set on error, AX = DOS error code
 19939                                  			; CF clear if successful
 19940                                  localcommit_retn: ; 18/12/2022	
 19941 00003009 C3                      	retn
 19942                                  ;ENDIF
 19943                                  
 19944                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19945                                  ; There are three ways we can do this. One is to enter a critical section to
 19946                                  ; protect a potential free. The second is to increment the ref count to mask
 19947                                  ; the close decrementing.
 19948                                  ;
 19949                                  ; The proper way is to let the caller's of close decide if a decrement should
 19950                                  ; be done. We do this by providing another entry into close after the
 19951                                  ; decrement and after the share information release.
 19952                                  
 19953                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 19954                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 19955                                  
 19956                                  LOCAL_COMMIT:
 19957 0000300A E8EBE2                  	call	ECritDisk
 19958                                  	; MSDOS 6.0
 19959 0000300D E8E8E2                  	call	ECritDisk	;PTM.
 19960 00003010 E80E00                  	call	SetSFTTimes
 19961 00003013 B8FFFF                  	MOV	AX,-1
 19962 00003016 E8BCFE                  	call	CloseEntry
 19963                                  	; MSDOS 6.0
 19964 00003019 9C                      	PUSHF			;PTM.				;AN000;
 19965 0000301A E8EF14                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 19966 0000301D 9D                      	POPF			;PTM.				;AN000;
 19967                                  	;call	LCritDisk	;PTM.				;AN000;
 19968                                  	; 18/12/2022
 19969 0000301E E9F2E2                  	jmp	LCritDisk
 19970                                  ;localcommit_retn:
 19971                                  ;	retn
 19972                                  
 19973                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 19974                                  ;----------------------------------------------------------------------------
 19975                                  ;
 19976                                  ; Procedure Name : SetSFTTimes
 19977                                  ;
 19978                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 19979                                  ;   Reflect these times in other SFT's for the same file.
 19980                                  ;
 19981                                  ;   Inputs:	ES:DI point to SFT
 19982                                  ;		BX = sf_flags set apprpriately
 19983                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 19984                                  ;   Registers modified: All except ES:DI, BX, AX
 19985                                  ;
 19986                                  ;----------------------------------------------------------------------------
 19987                                  
 19988                                  	; 04/02/2024 - Retro DOS v4.1
 19989                                  
 19990                                  SetSFTTimes:
 19991                                  
 19992                                  ; 04/02/2024
 19993                                  %if 0
 19994                                  ;	File clean or device does not get stamped nor disk looked at.
 19995                                  	
 19996                                  	;test	bx,0C0h
 19997                                  	; 17/12/2022
 19998                                  	test	bl,devid_file_clean+devid_device
 19999                                  	;TEST	BX,devid_file_clean+devid_device
 20000                                  	;retnz				; clean or device => no timestamp
 20001                                  	jnz	short localcommit_retn
 20002                                  
 20003                                  ;	file and dirty. See if date is good
 20004                                  
 20005                                  	;test	bx,4000h
 20006                                  	; 17/12/2022
 20007                                  	;test	bh,40h
 20008                                  	test	bh,(sf_close_nodate>>8)
 20009                                  	;TEST	BX,sf_close_nodate
 20010                                  	;retnz				; nodate => no timestamp
 20011                                  	jnz	short localcommit_retn
 20012                                  %else
 20013                                  	; 04/02/2024
 20014                                  	; (PCDOS 7.1 IBMDOS.COM)
 20015                                  	;test	bx,40C0h
 20016 00003021 F7C3C040                	test	bx,sf_close_nodate+devid_file_clean+devid_device
 20017 00003025 75E2                    	jnz	short localcommit_retn
 20018                                  %endif
 20019                                  
 20020 00003027 50                      	push	ax
 20021 00003028 53                      	push	bx
 20022 00003029 E8BFDA                  	call	DATE16			; Date/Time to AX/DX
 20023                                  	;mov	[es:di+0Fh],ax
 20024 0000302C 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 20025                                  	;mov	[es:di+0Dh],dx
 20026 00003030 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 20027 00003034 31C0                    	XOR	AX,AX
 20028                                  ;if installed
 20029                                  	;call	JShare + 14 * 4
 20030 00003036 FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 20031                                  ;else
 20032                                  ;	call	ShSU
 20033                                  ;endif
 20034 0000303A 5B                      	pop	bx
 20035 0000303B 58                      	pop	ax
 20036 0000303C C3                      	retn
 20037                                  
 20038                                  ;============================================================================
 20039                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 20040                                  ;============================================================================
 20041                                  ; 23/07/2018 - Retro DOS v3.0
 20042                                  ; 18/05/2019 - Retro DOS v4.0
 20043                                  
 20044                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 20045                                  
 20046                                  ;TITLE DIRCALL - Directory manipulation internal calls
 20047                                  ;NAME  DIRCALL
 20048                                  
 20049                                  ;**	Low level directory manipulation routines for making removing and
 20050                                  ;	  verifying local or NET directories
 20051                                  ;
 20052                                  ;	DOS_MKDIR
 20053                                  ;	DOS_CHDIR
 20054                                  ;	DOS_RMDIR
 20055                                  ;
 20056                                  ;	Modification history:
 20057                                  ;
 20058                                  ;		Created: ARR 30 March 1983
 20059                                  
 20060                                  ;BREAK <DOS_MkDir - Make a directory entry>
 20061                                  ;---------------------------------------------------------------------------
 20062                                  ;
 20063                                  ; Procedure Name : DOS_MkDir
 20064                                  ;
 20065                                  ; Inputs:
 20066                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20067                                  ;		terminated)
 20068                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20069                                  ;		( = -1 if current dir not involved, else
 20070                                  ;		 Points to first char after last "/" of current dir part)
 20071                                  ;	[THISCDS] Points to CDS being used
 20072                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20073                                  ; Function:
 20074                                  ;	Make a new directory
 20075                                  ; Returns:
 20076                                  ;	Carry Clear
 20077                                  ;		No error
 20078                                  ;	Carry Set
 20079                                  ;	    AX is error code
 20080                                  ;		error_path_not_found
 20081                                  ;			Bad path (not in curr dir part if present)
 20082                                  ;		error_bad_curr_dir
 20083                                  ;			Bad path in current directory part of path
 20084                                  ;		error_access_denied
 20085                                  ;			Already exists, device name
 20086                                  ; DS preserved, Others destroyed
 20087                                  ;---------------------------------------------------------------------------
 20088                                  
 20089                                  ;hkn; called from path.asm. DS already set up.
 20090                                  
 20091                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20092                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 20093                                  
 20094                                  ; 04/02/2024 - Retro DOS v4.1
 20095                                  
 20096                                  DOS_MKDIR:
 20097 0000303D E8F6E1                  	call	TestNet
 20098 00003040 7313                    	JNC	short LOCAL_MKDIR
 20099                                  
 20100                                  ;IF NOT Installed
 20101                                  ;	transfer NET_MKDIR
 20102                                  ;ELSE
 20103                                  	;mov	ax,1103h
 20104 00003042 B80311                  	MOV	AX,(MultNET<<8)|3
 20105 00003045 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 20106                                  			; SS = DOS CS
 20107                                  			; SDA first filename pointer -> fully-qualified directory name
 20108                                  			; SDA CDS pointer -> current directory
 20109                                  			; Return: CF set on error, AX = DOS error code
 20110                                  			; CF clear if successful
 20111 00003047 C3                      	retn
 20112                                  ;ENDIF
 20113                                  
 20114                                  NODEACCERRJ:
 20115                                  	;mov	ax,5
 20116 00003048 B80500                  	MOV	AX,error_access_denied
 20117                                  _BadRet:
 20118 0000304B F9                      	STC
 20119                                  	;call	LCritDisk
 20120                                  	;retn
 20121                                  	; 18/12/2022
 20122 0000304C E9C4E2                  	jmp	LCritDisk
 20123                                  
 20124                                  PATHNFJ:
 20125 0000304F E8C1E2                  	call	LCritDisk
 20126 00003052 E902FA                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 20127                                  
 20128                                  LOCAL_MKDIR:
 20129 00003055 E8A0E2                  	call	ECritDisk
 20130                                  
 20131                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 20132                                  
 20133 00003058 8C16[A005]              	MOV	[THISSFT+2],SS
 20134                                  
 20135                                  ;hkn; DOSDATA
 20136 0000305C C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 20137                                  
 20138                                  ;  NOTE: Need WORD PTR because MASM takes type of
 20139                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 20140                                  
 20141                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 20142 00003062 C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 20143                                  				; make sure SHARER won't complain.
 20144                                  	;mov	al,10h
 20145 00003068 B010                    	MOV	AL,attr_directory
 20146 0000306A E84C18                  	call	MakeNode
 20147 0000306D 72E0                    	JC	short PATHNFJ
 20148 0000306F 83F803                  	CMP	AX,3
 20149 00003072 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 20150 00003074 C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 20151 00003078 C53E[E205]              	LDS	DI,[CURBUF]
 20152 0000307C 29FE                    	SUB	SI,DI
 20153 0000307E 56                      	PUSH	SI		; Pointer to dir_first
 20154                                  
 20155                                  ; 04/02/2024
 20156                                  %if 0
 20157                                  	; MSDOS 6.0
 20158                                  	;push	word [DI+8]
 20159                                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 20160                                  	; MSDOS 3.3 & MSDOS 6.0
 20161                                  	;push	word [di+6]
 20162                                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 20163                                  %else
 20164                                  	; 04/02/2024
 20165                                  	; (PCDOS 7.1 IBMDOS.COM)
 20166 0000307F C54506                  	lds	ax,[di+BUFFINFO.buf_sector] ; Sector of new node
 20167 00003082 1E                      	push	ds
 20168 00003083 50                      	push	ax
 20169                                  %endif
 20170                                  
 20171 00003084 16                      	push	ss
 20172 00003085 1F                      	pop	ds
 20173                                  
 20174                                  	; 04/02/2024
 20175                                  	;PUSH	word [DIRSTART]	; Parent for .. entry
 20176 00003086 31C0                    	XOR	AX,AX
 20177                                  	;MOV	[DIRSTART],AX	; Null directory
 20178 00003088 8706[C205]              	xchg	ax,[DIRSTART]
 20179 0000308C 50                      	push	ax
 20180                                  
 20181 0000308D E86517                  	call	NEWDIR
 20182 00003090 726F                    	JC	short NODEEXISTSPOPDEL ; No room
 20183 00003092 E81D0D                  	call	GETENT		; First entry
 20184 00003095 726A                    	JC	short NODEEXISTSPOPDEL ; Screw up
 20185 00003097 C43E[E205]              	LES	DI,[CURBUF]
 20186                                  
 20187                                  	; MSDOS 6.0
 20188 0000309B 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 20189                                  				 ;LB. if already dirty		    ;AN000;
 20190 000030A0 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 20191 000030A2 E8DD29                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 20192                                  	
 20193                                  	; MSDOS 3.3 & MSDOS 6.0
 20194                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 20195 000030A5 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 20196                                  yesdirty5:
 20197                                  	;;add	di,16 ; MSDOS 3.3
 20198                                  	;add	di,20 ; MSDOS 6.0
 20199 000030AA 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 20200 000030AD B82E20                  	MOV	AX,202EH	; ". "
 20201 000030B0 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 20202 000030B4 E8DE17                  	call	SETDOTENT
 20203 000030B7 B82E2E                  	MOV	AX,2E2EH	; ".."
 20204 000030BA 5A                      	POP	DX		; Parent
 20205 000030BB E8D717                  	call	SETDOTENT
 20206 000030BE C42E[8A05]              	LES	BP,[THISDPB]
 20207                                  	; 22/09/2023
 20208                                  	;;mov	byte [ALLOWED],18h
 20209                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20210 000030C2 5A                      	POP	DX		; Entry sector
 20211                                  	; MSDOS 6.0
 20212 000030C3 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 20213                                  
 20214                                  	;XOR	AL,AL ; *	; Pre read
 20215                                  	;call	GETBUFFR
 20216                                  	; 22/09/2023
 20217 000030C7 E8AF27                  	call	GETBUFFER ; *	 ;Pre read
 20218 000030CA 725B                    	JC	short NODEEXISTSP
 20219 000030CC 8B16[C205]              	MOV	DX,[DIRSTART]
 20220 000030D0 C53E[E205]              	LDS	DI,[CURBUF]
 20221                                  	;or	byte [di+5],4
 20222 000030D4 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20223 000030D8 5E                      	POP	SI		; dir_first pointer
 20224 000030D9 01FE                    	ADD	SI,DI
 20225 000030DB 8914                    	MOV	[SI],DX
 20226 000030DD 31D2                    	XOR	DX,DX
 20227 000030DF 895402                  	MOV	[SI+2],DX	; Zero size
 20228 000030E2 895404                  	MOV	[SI+4],DX
 20229                                  DIRUP:
 20230                                  	; MSDOS 6.0
 20231 000030E5 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 20232                                  	;			 ;LB. if already dirty 		   ;AN000;
 20233 000030E9 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 20234 000030EB E89429                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 20235                                  	
 20236                                  	; MSDOS 3.3 & MSDOS 6.0
 20237                                  	;or	byte [di+5],40h
 20238 000030EE 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 20239                                  yesdirty6:
 20240 000030F2 16                      	push	ss
 20241 000030F3 1F                      	pop	ds
 20242 000030F4 268A4600                	mov	al,[es:bp]
 20243                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 20244 000030F8 E88228                  	call	FLUSHBUF
 20245                                  	;mov	ax,5
 20246 000030FB B80500                  	MOV	AX,error_access_denied
 20247                                  	;call	LCritDisk
 20248                                  	;retn
 20249                                  	; 18/12/2022
 20250 000030FE E912E2                  	jmp	LCritDisk
 20251                                  
 20252                                  NODEEXISTSPOPDEL:
 20253 00003101 5A                      	POP	DX		; Parent
 20254 00003102 5A                      	POP	DX		; Entry sector
 20255                                  	; MSDOS 6.0 
 20256 00003103 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 20257 00003107 C42E[8A05]              	LES	BP,[THISDPB]
 20258                                  	; 22/09/2023
 20259                                  	;;mov	byte [ALLOWED],18h
 20260                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20261                                  	;XOR	AL,AL ; *	; Pre read
 20262                                  	;call	GETBUFFR
 20263                                  	; 22/09/2023
 20264 0000310B E86B27                  	call	GETBUFFER ; *	; Pre read
 20265 0000310E 7217                    	JC	short NODEEXISTSP
 20266 00003110 C53E[E205]              	LDS	DI,[CURBUF]
 20267                                  	;or	byte [di+5],4
 20268 00003114 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20269 00003118 5E                      	POP	SI		; dir_first pointer
 20270 00003119 01FE                    	ADD	SI,DI
 20271                                  	;sub	si,1Ah ; 26
 20272 0000311B 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 20273 0000311E C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 20274 00003121 E8C1FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 20275                                  NODEEXISTS:
 20276 00003124 E921FF                  	JMP	NODEACCERRJ ; 10/08/2018
 20277                                  
 20278                                  NODEEXISTSP:
 20279 00003127 5E                      	POP	SI		; Clean stack
 20280 00003128 EBFA                    	JMP	short NODEEXISTS
 20281                                  
 20282                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20283                                  
 20284                                  ;BREAK <DOS_ChDir -- Verify a directory>
 20285                                  ;----------------------------------------------------------------------------
 20286                                  ;
 20287                                  ; Procedure Name : DOS_ChDir
 20288                                  ;
 20289                                  ; Inputs:
 20290                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20291                                  ;		terminated)
 20292                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20293                                  ;		( = -1 if current dir not involved, else
 20294                                  ;		 Points to first char after last "/" of current dir part)
 20295                                  ;	[THISCDS] Points to CDS being used May not be NUL
 20296                                  ; Function:
 20297                                  ;	Validate the path for potential new current directory
 20298                                  ; Returns:
 20299                                  ;	NOTE:
 20300                                  ;	    [SATTRIB] is modified by this call
 20301                                  ;	Carry Clear
 20302                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 20303                                  ;		Caller must NOT set ID fields on a NET CDS.
 20304                                  ;	Carry Set
 20305                                  ;	    AX is error code
 20306                                  ;		error_path_not_found
 20307                                  ;			Bad path
 20308                                  ;		error_access_denied
 20309                                  ;			device or file name
 20310                                  ; DS preserved, Others destroyed
 20311                                  ;----------------------------------------------------------------------------
 20312                                  
 20313                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 20314                                  
 20315                                  ; 18/05/2019 - Retro DOS v4.0
 20316                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 20317                                  
 20318                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20319                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 20320                                  
 20321                                  DOS_CHDIR:
 20322 0000312A E809E1                  	call	TestNet
 20323 0000312D 7306                    	JNC	short LOCAL_CHDIR
 20324                                  
 20325                                  ;IF NOT Installed
 20326                                  ;	transfer NET_CHDIR
 20327                                  ;ELSE
 20328                                  	;mov	ax,1105h
 20329 0000312F B80511                  	MOV	AX,(MultNET<<8)|5
 20330 00003132 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 20331                                  			; SS = DOS CS
 20332                                  			; SDA first filename pointer -> fully-qualified directory name
 20333                                  			; SDA CDS pointer -> current directory
 20334                                  			; Return: CF set on error, AX = DOS error code
 20335                                  			; CF clear if successful
 20336 00003134 C3                      	retn
 20337                                  ;ENDIF
 20338                                  
 20339                                  LOCAL_CHDIR:
 20340 00003135 E8C0E1                  	call	ECritDisk
 20341                                  	; MSDOS 6.0
 20342                                  	;;test	word [es:di+43h],2000h
 20343                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 20344                                  	; 17/12/2022
 20345                                  	;test	byte [es:di+44h],20h
 20346 00003138 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 20347 0000313D 7406                    	JZ	short nojoin		   ;PTM.
 20348                                  	;mov	word [es:di+49h], 0FFFFh
 20349 0000313F 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 20350                                  nojoin:
 20351                                  	; MSDOS 3.3 & MSDOS 6.0
 20352 00003145 C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 20353                                  	;mov	byte [SATTRIB],16h
 20354 0000314A C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20355                                  				; Dir calls can find these
 20356                                  ; DOS 3.3  6/24/86 FastOpen
 20357 0000314F 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 20358 00003154 E8E70C                  	call	GETPATH
 20359                                  	
 20360                                  	; 04/02/2024
 20361                                  	;PUSHF						;AN000;
 20362 00003157 9F                      	lahf						
 20363 00003158 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 20364                                  	;POPF						;AN000;
 20365 0000315D 9E                      	sahf
 20366                                  
 20367                                  ; DOS 3.3  6/24/86 FastOpen
 20368                                  
 20369                                  	; MSDOS 3.3
 20370                                  	;mov	byte [FastOpenFlg],0
 20371                                  	
 20372                                  	;mov	ax,3
 20373 0000315E B80300                  	MOV	AX,error_path_not_found
 20374 00003161 7207                    	JC	short ChDirDone
 20375 00003163 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20376 00003165 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 20377 00003169 F8                      	CLC
 20378                                  ChDirDone:
 20379                                  	;call	LCritDisk
 20380                                  	;retn
 20381                                  	; 18/12/2022
 20382 0000316A E9A6E1                  	jmp	LCritDisk
 20383                                  
 20384                                  ;BREAK <DOS_RmDir -- Remove a directory>
 20385                                  ;----------------------------------------------------------------------------
 20386                                  ;
 20387                                  ; Procedure Name : DOS_RmDir
 20388                                  ;
 20389                                  ; Inputs:
 20390                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20391                                  ;		terminated)
 20392                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20393                                  ;		( = -1 if current dir not involved, else
 20394                                  ;		 Points to first char after last "/" of current dir part)
 20395                                  ;	[THISCDS] Points to CDS being used
 20396                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20397                                  ; Function:
 20398                                  ;	Remove a directory
 20399                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 20400                                  ; Returns:
 20401                                  ;	NOTE:
 20402                                  ;	    [SATTRIB] is modified by this call
 20403                                  ;	Carry Clear
 20404                                  ;		No error
 20405                                  ;	Carry Set
 20406                                  ;	    AX is error code
 20407                                  ;		error_path_not_found
 20408                                  ;			Bad path (not in curr dir part if present)
 20409                                  ;		error_bad_curr_dir
 20410                                  ;			Bad path in current directory part of path
 20411                                  ;		error_access_denied
 20412                                  ;			device or file name, root directory
 20413                                  ;			Bad directory ('.' '..' messed up)
 20414                                  ; DS preserved, Others destroyed
 20415                                  ;----------------------------------------------------------------------------
 20416                                  
 20417                                  ;hkn; called from path.asm. DS already set up.
 20418                                  
 20419                                  ; 18/05/2019 - Retro DOS v4.0
 20420                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 20421                                  
 20422                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20423                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 20424                                  
 20425                                  DOS_RMDIR:
 20426 0000316D E8C6E0                  	call	TestNet
 20427 00003170 7306                    	JNC	short LOCAL_RMDIR
 20428                                  
 20429                                  ;IF NOT Installed
 20430                                  ;	transfer NET_RMDIR
 20431                                  ;ELSE
 20432                                  	;mov	ax,1101h
 20433 00003172 B80111                  	MOV	AX,(MultNET<<8)|1
 20434 00003175 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 20435                                  			; SS = DOS CS
 20436                                  			; SDA first filename pointer -> fully-qualified directory name
 20437                                  			; SDA CDS pointer -> current directory
 20438                                  			; Return: CF set on error, AX = DOS error code
 20439                                  			; CF clear if successful
 20440 00003177 C3                      	retn
 20441                                  ;ENDIF
 20442                                  
 20443                                  LOCAL_RMDIR:
 20444 00003178 E87DE1                  	call	ECritDisk
 20445 0000317B C606[4C03]00            	MOV	byte [NoSetDir],0
 20446                                  	;mov	byte [SATTRIB],16h
 20447 00003180 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20448                                  					; Dir calls can find these
 20449 00003185 E8B60C                  	call	GETPATH
 20450 00003188 720C                    	JC	short NOPATH		; Path not found
 20451 0000318A 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20452 0000318C 8B3E[C205]              	MOV	DI,[DIRSTART]
 20453 00003190 09FF                    	OR	DI,DI			; Root ?
 20454 00003192 750E                    	JNZ	short rmdir_get_buf	; No
 20455 00003194 EB09                    	JMP	SHORT NOTDIRPATH
 20456                                  
 20457                                  NOPATH:
 20458                                  	;mov	ax,3
 20459 00003196 B80300                  	MOV	AX,error_path_not_found
 20460 00003199 E9AFFE                  	JMP	_BadRet
 20461                                  
 20462                                  NOTDIRPATHPOP:
 20463 0000319C 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 20464 0000319D 58                      	POP	AX
 20465                                  NOTDIRPATHPOP2:
 20466 0000319E 58                      	POP	AX
 20467                                  NOTDIRPATH:
 20468 0000319F E9A6FE                  	JMP	NODEACCERRJ
 20469                                  
 20470                                  rmdir_get_buf:
 20471 000031A2 C53E[E205]              	LDS	DI,[CURBUF]
 20472 000031A6 29FB                    	SUB	BX,DI		; Compute true offset
 20473 000031A8 53                      	PUSH	BX		; Save entry pointer
 20474                                  	
 20475                                  	; MSDOS 6.0
 20476                                  	;push	word [di+8]
 20477 000031A9 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 20478                                  	
 20479                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20480                                  	;push	word [di+6]
 20481 000031AC FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 20482                                  
 20483                                  ;hkn; SS is DOSDATA
 20484                                  	;context DS
 20485 000031AF 16                      	push	ss
 20486 000031B0 1F                      	pop	ds
 20487                                  	;context ES
 20488 000031B1 16                      	push	ss
 20489 000031B2 07                      	pop	es
 20490                                  
 20491                                  ;hkn; NAME1 is in DOSDATA
 20492 000031B3 BF[4B05]                	MOV	DI,NAME1
 20493 000031B6 B03F                    	MOV	AL,'?'
 20494 000031B8 B90B00                  	MOV	CX,11
 20495 000031BB F3AA                    	REP	STOSB
 20496 000031BD 30C0                    	XOR	AL,AL
 20497 000031BF AA                      	STOSB				; Nul terminate it
 20498 000031C0 E80F0F                  	call	STARTSRCH		; Set search
 20499 000031C3 E8E90B                  	call	GETENTRY		; Get start of directory
 20500 000031C6 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 20501 000031C8 8E1E[E405]              	MOV	DS,[CURBUF+2]
 20502 000031CC 89DE                    	MOV	SI,BX
 20503 000031CE AD                      	LODSW
 20504                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 20505 000031CF 3D2E20                  	cmp	ax,202Eh ; ". "
 20506 000031D2 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 20507                                  	;add	si,30
 20508 000031D4 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 20509 000031D7 AD                      	LODSW
 20510                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 20511                                  	;cmp	ax, '..'
 20512 000031D8 3D2E2E                  	cmp	ax,2E2Eh
 20513 000031DB 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 20514                                  
 20515                                  ;hkn; SS is DOSDATA
 20516                                  	;context DS
 20517 000031DD 16                      	push	ss
 20518 000031DE 1F                      	pop	ds
 20519 000031DF C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 20520 000031E5 E8C70B                  	call	GETENTRY		; Get next entry
 20521 000031E8 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 20522                                  	;mov	byte [ATTRIB],16h
 20523 000031EA C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 20524 000031EF E8C50A                  	call	SRCH			; Do a search
 20525 000031F2 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 20526 000031F4 803E[4A03]00            	CMP	byte [FAILERR],0
 20527 000031F9 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 20528 000031FB C42E[8A05]              	LES	BP,[THISDPB]
 20529 000031FF 8B1E[C205]              	MOV	BX,[DIRSTART]
 20530 00003203 E8EA1B                  	call	RELEASE 		; Release data in sub dir
 20531 00003206 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 20532 00003208 5A                      	POP	DX			; Sector # of entry
 20533 00003209 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 20534                                  	; 22/09/2023
 20535                                  	;;mov	byte [ALLOWED],18h
 20536                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20537                                  	;XOR	AL,AL ; *		; Pre read
 20538                                  	;call	GETBUFFR		; Get sector back
 20539 0000320D E86926                  	call	GETBUFFER ; *		; Pre Read
 20540 00003210 728C                    	JC	short NOTDIRPATHPOP2	; Screw up
 20541 00003212 C53E[E205]              	LDS	DI,[CURBUF]
 20542                                  	;or	byte [di+5],4
 20543 00003216 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20544 0000321A 5B                      	POP	BX			; Pointer to start of entry
 20545 0000321B 01FB                    	ADD	BX,DI			; Corrected
 20546 0000321D C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 20547                                  
 20548                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20549 00003220 1E                      	PUSH	DS
 20550                                  
 20551                                  ;hkn; SS is DOSDATA
 20552                                  	;context DS
 20553 00003221 16                      	push	ss
 20554 00003222 1F                      	pop	ds
 20555                                  
 20556                                  	; MSDOS 6.0
 20557 00003223 E837F4                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 20558                                  
 20559                                  ;	; MSDOS 3.3
 20560                                  ;_FastOpen_Delete:
 20561                                  ;	push	ax
 20562                                  ;	mov	si,[WFP_START]
 20563                                  ;	mov	bx,FastTable
 20564                                  ;	;mov	al,3  ; FONC_delete
 20565                                  ;	mov	al,FONC_delete
 20566                                  ;	call	far [BX+2]  ; FastTable+2
 20567                                  ;	pop	ax
 20568                                  
 20569 00003226 1F                      	POP	DS
 20570                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20571                                  
 20572 00003227 E9BBFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 20573                                  
 20574                                  ;============================================================================
 20575                                  ; DISK.ASM, MSDOS 6.0, 1991
 20576                                  ;============================================================================
 20577                                  ; 23/07/2018 - Retro DOS v3.0 
 20578                                  ; 04/05/2019 - Retro DOS v4.0
 20579                                  
 20580                                  ;	TITLE	DISK - Disk utility routines
 20581                                  ;	NAME	Disk
 20582                                  
 20583                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 20584                                  ;
 20585                                  ;	SWAPCON
 20586                                  ;	SWAPBACK
 20587                                  ;	DOS_READ
 20588                                  ;	DOS_WRITE
 20589                                  ;	get_io_sft
 20590                                  ;	DirRead
 20591                                  ;	FIRSTCLUSTER
 20592                                  ;	SET_BUF_AS_DIR
 20593                                  ;	FATSecRd
 20594                                  ;	DREAD
 20595                                  ;	CHECK_WRITE_LOCK
 20596                                  ;	CHECK_READ_LOCK
 20597                                  ;
 20598                                  ;	Revision history:
 20599                                  ;
 20600                                  ;		A000   version 4.00  Jan. 1988
 20601                                  ;
 20602                                  ;----------------------------------------------------------------------------
 20603                                  ;
 20604                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 20605                                  ;		error happens, DOS retries the entire block assuming that
 20606                                  ;		zero characters were transferred. Modified the code to take
 20607                                  ;		into account the number of characters transfered before
 20608                                  ;		retrying the operation.
 20609                                  ;
 20610                                  ;----------------------------------------------------------------------------
 20611                                  ;
 20612                                  
 20613                                  ;Installed = TRUE
 20614                                  
 20615                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 20616                                  
 20617                                  ; **** Drivers for file input from devices ****
 20618                                  ;----------------------------------------------------------------------------
 20619                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 20620                                  ;   of handles 0 and 1
 20621                                  ;
 20622                                  ;   Inputs:	DS is DOSDATA
 20623                                  ;   Outputs:	CONSWAP is set to false.
 20624                                  ;   Registers modified: none
 20625                                  ;----------------------------------------------------------------------------
 20626                                  
 20627                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 20628                                  
 20629                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 20630                                  ; 04/05/2019 - Retro DOS v4.0
 20631                                  
 20632                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 20633                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20634                                  
 20635                                  SWAPBACK:
 20636 0000322A C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 20637 0000322F C3                      	retn
 20638                                  
 20639                                  ;----------------------------------------------------------------------------
 20640                                  ;
 20641                                  ; Procedure Name : SWAPCON
 20642                                  ;
 20643                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20644                                  ;
 20645                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20646                                  ;		DS is DOSDATA
 20647                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20648                                  ;   Registers modified: none
 20649                                  ;--------------------------------------------------------------------------
 20650                                  
 20651                                  SWAPCON:
 20652                                  	; MSDOS 3.3
 20653                                  	;push	es
 20654                                  	;push	di
 20655                                  	;mov	byte [CONSWAP],1
 20656                                  	;les	di,[THISSFT]
 20657                                  	;mov	word [CONSFT],di
 20658                                  	;mov	word [CONSFT+2],es
 20659                                  	;pop	di
 20660                                  	;pop	es
 20661                                  	;retn
 20662                                  
 20663                                  	; MSDOS 6.0
 20664 00003230 C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20665 00003235 50                      	push	ax
 20666 00003236 A1[9E05]                	mov	ax,[THISSFT]
 20667 00003239 A3[E605]                	mov	[CONSFT],ax
 20668 0000323C A1[A005]                	mov	ax,[THISSFT+2]
 20669 0000323F A3[E805]                	mov	[CONSFT+2],ax
 20670 00003242 58                      	pop	ax
 20671 00003243 C3                      	retn
 20672                                  
 20673                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20674                                  ; 04/05/2019 - Retro DOS v4.0
 20675                                  
 20676                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20677                                  ;-----------------------------------------------------------------------------
 20678                                  ;
 20679                                  ; Inputs:
 20680                                  ;	ThisSFT set to the SFT for the file being used
 20681                                  ;	[DMAADD] contains transfer address
 20682                                  ;	CX = No. of bytes to read
 20683                                  ;	DS = DOSDATA
 20684                                  ; Function:
 20685                                  ;	Perform read operation
 20686                                  ; Outputs:
 20687                                  ;    Carry clear
 20688                                  ;	SFT Position and cluster pointers updated
 20689                                  ;	CX = No. of bytes read
 20690                                  ;	ES:DI point to SFT
 20691                                  ;    Carry set
 20692                                  ;	AX is error code
 20693                                  ;	CX = 0
 20694                                  ;	ES:DI point to SFT
 20695                                  ; DS preserved, all other registers destroyed
 20696                                  ;
 20697                                  ;-----------------------------------------------------------------------------
 20698                                  
 20699                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20700                                  
 20701                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20702                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20703                                  
 20704                                  DOS_READ:
 20705 00003244 C43E[9E05]              	LES	DI,[THISSFT]
 20706                                  
 20707                                  ; Verify that the sft has been opened in a mode that allows reading.
 20708                                  
 20709                                  	;mov	al,[es:di+2]
 20710 00003248 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20711                                  	;and	al,0Fh
 20712 0000324C 240F                    	AND	AL,access_mask
 20713                                  	;cmp	al,1
 20714 0000324E 3C01                    	CMP	AL,open_for_write
 20715 00003250 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20716 00003252 E9CE05                  	jmp	SET_ACC_ERR
 20717                                  
 20718                                  READ_NO_MODE:
 20719 00003255 E8B304                  	call	SETUP
 20720 00003258 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20721 0000325A E8F2DF                  	call	IsSFTNet
 20722 0000325D 7408                    	JZ	short LOCAL_READ
 20723                                  
 20724                                  ;IF NOT Installed
 20725                                  ;	transfer NET_READ
 20726                                  ;ELSE
 20727                                  	;mov	ax,1108h
 20728 0000325F B80811                  	MOV	AX,(MultNET<<8)|8
 20729 00003262 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20730                                  			; ES:DI -> SFT
 20731                                  			; SFT DPB field -> DPB of drive containing file
 20732                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20733                                  			; Return: CF set on error, CX = bytes read
 20734 00003264 C3                      	retn
 20735                                  ;ENDIF
 20736                                  
 20737                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20738                                  ; except return immediately.
 20739                                  
 20740                                  NoIORet:
 20741 00003265 F8                      	CLC
 20742 00003266 C3                      	retn
 20743                                  
 20744                                  LOCAL_READ:
 20745                                  	;test	word [es:di+5],80h
 20746                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20747 00003267 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20748 0000326C 750E                    	JNZ	short READDEV
 20749                                  
 20750                                  	;mov	byte [EXTERR_LOCUS],2
 20751 0000326E C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20752 00003273 E882E0                  	call	ECritDisk
 20753 00003276 E86D05                  	call	DISKREAD
 20754                                  
 20755                                  critexit:
 20756                                  	;call	LCritDisk
 20757                                  	;retn
 20758                                  	; 16/12/2022
 20759 00003279 E997E0                  	jmp	LCritDisk
 20760                                  
 20761                                  ; We are reading from a device. Examine the status of the device to see if we
 20762                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20763                                  ; null device, we can safely indicate no transfer.
 20764                                  
 20765                                  READDEV:
 20766                                  	;mov	byte [EXTERR_LOCUS],4
 20767 0000327C C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20768                                  	;mov	bl,[es:di+5]
 20769 00003281 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20770 00003285 C43E[2C03]              	LES	DI,[DMAADD]
 20771                                  	;test	bl,40h
 20772 00003289 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20773 0000328C 7407                    	JZ	short ENDRDDEVJ3
 20774                                  	;test	bl,4
 20775 0000328E F6C304                  	test	BL,devid_device_null	; NUL device?
 20776 00003291 7405                    	JZ	short TESTRAW 		; NO
 20777 00003293 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20778                                  ENDRDDEVJ3:
 20779                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20780                                  	;JMP	short ENDRDDEVJ2
 20781                                  	; 16/12/2022
 20782 00003295 E93F01                  	jmp	ENDRDDEV ; 04/05/2019
 20783                                  
 20784                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20785                                  ; bizarre std_con_string_input.
 20786                                  
 20787                                  TESTRAW:
 20788                                  	;test	bl,20h
 20789 00003298 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20790 0000329B 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20791                                  	;test	bl,1
 20792 0000329D F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20793 000032A0 7458                    	JZ	short NOTRDCON
 20794 000032A2 E96701                  	JMP	READCON
 20795                                  
 20796                                  DVRDRAW:
 20797 000032A5 06                      	PUSH	ES
 20798 000032A6 1F                      	POP	DS			; Xaddr to DS:DI
 20799                                  
 20800                                  	; 04/05/2019 - Retro DOS v4.0
 20801                                  
 20802                                  	; MSDOS 6.0
 20803                                  ;SR;
 20804                                  ;Check for win386 presence -- if present, do polled read of characters
 20805                                  
 20806 000032A7 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20807 000032AD 7408                    	jz	short ReadRawRetry	;not present
 20808 000032AF F6C301                  	test	bl,devid_device_con_in	;is it console device
 20809 000032B2 7403                    	jz	short ReadRawRetry	;no, do normal read
 20810 000032B4 E9A800                  	jmp	do_polling		;yes, do win386 polling loop
 20811                                  
 20812                                  ReadRawRetry:
 20813                                  
 20814                                  ; 07/02/2024
 20815                                  %if 0
 20816                                  	MOV	BX,DI			; DS:BX transfer addr
 20817                                  	; 06/02/2024 ; *
 20818                                  	;XOR	AX,AX			; Media Byte, unit = 0
 20819                                  	;;MOV	DX,AX			; Start at 0
 20820                                  	;; 06/02/2024
 20821                                  	;cwd
 20822                                  	;call	SETREAD
 20823                                  	; 06/02/2024 ; *
 20824                                  	call	SETREAD_X
 20825                                  %else
 20826 000032B7 E84C13                  	call	SETREAD_XJ
 20827                                  %endif
 20828                                  
 20829 000032BA 1E                      	PUSH	DS			; Save Seg part of Xaddr
 20830                                  
 20831                                  ;hkn; SS override
 20832 000032BB 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20833 000032C0 E8CA12                  	call	DEVIOCALL
 20834 000032C3 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20835 000032C5 B486                    	MOV	AH,86H			; Read error
 20836                                  
 20837                                  ;hkn; SS override
 20838 000032C7 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20839                                  	; MSDOS 3.3
 20840                                  	;test	di,8000h
 20841                                  	;jz	short CRDROK
 20842                                  	; MSDOS 6.0
 20843 000032CC 09FF                    	or	di,di
 20844 000032CE 7920                    	jns	short CRDROK		; no errors
 20845                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20846 000032D0 E8301F                  	call	CHARHARD
 20847                                  
 20848                                  ; 06/02/2024 - Retrro DOS v5.0
 20849                                  %if 0
 20850                                  	MOV	DI,DX			; DS:DI is Xaddr
 20851                                  	; 04/05/2019
 20852                                  	; MSDOS 6.0
 20853                                  	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20854                                  	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20855                                  %else
 20856 000032D3 368B3E[6C03]            	mov	di,[ss:CALLSCNT]
 20857 000032D8 29F9                    	sub	cx,di			; update transfer count
 20858 000032DA 01D7                    	add	di,dx			; update pointer
 20859                                  %endif
 20860                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20861 000032DC 08C0                    	OR	AL,AL
 20862 000032DE 7410                    	JZ	short CRDROK		; Ignore
 20863 000032E0 3C03                    	CMP	AL,3
 20864 000032E2 7403                    	JZ	short CRDFERR 		; fail.
 20865 000032E4 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20866 000032E5 EBD0                    	JMP	short ReadRawRetry	; Retry
 20867                                  
 20868                                  ; We have encountered a device-driver error. We have informed the user of it
 20869                                  ; and he has said for us to fail the system call.
 20870                                  
 20871                                  CRDFERR:
 20872 000032E7 5F                      	POP	DI			; Clean stack
 20873                                  DEVIOFERR:
 20874                                  
 20875                                  ;hkn; SS override
 20876 000032E8 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20877 000032ED E93105                  	jmp	SET_ACC_ERR_DS
 20878                                  
 20879                                  CRDROK:
 20880 000032F0 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20881 000032F1 89D7                    	MOV	DI,DX
 20882                                  
 20883                                  ;hkn; SS override
 20884 000032F3 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20885                                  	;JMP	SHORT ENDRDDEVJ3
 20886                                  	; 16/12/2022
 20887 000032F8 EB63                    	jmp	short ENDRDDEVJ2
 20888                                  
 20889                                  ; We are going to do a cooked read on some character device. There is a
 20890                                  ; problem here, what does the data look like? Is it a terminal device, line
 20891                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20892                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20893                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20894                                  ; included in data). this "simulates" the way con works in cooked mode
 20895                                  ; reading one line at a time. With file data, however, the lines will look
 20896                                  ; like, LF line CR. This is a little weird.
 20897                                  
 20898                                  NOTRDCON:
 20899                                  	;MOV	AX,ES
 20900                                  	;MOV	DS,AX
 20901                                  	; 07/02/2024
 20902 000032FA 06                      	push	es
 20903 000032FB 1F                      	pop	ds
 20904                                  
 20905                                  ; 07/02/2024
 20906                                  %if 0
 20907                                  	MOV	BX,DI
 20908                                  	; 06/02/2024 ; *
 20909                                  	;;XOR	DX,DX
 20910                                  	;;MOV	AX,DX
 20911                                  	;; 06/02/2024
 20912                                  	;xor	ax,ax
 20913                                  	;cwd
 20914                                  	PUSH	CX
 20915                                  	MOV	CX,1
 20916                                  	;call	SETREAD
 20917                                  	; 06/02/2024 ; *
 20918                                  	call	SETREAD_X
 20919                                  	POP	CX
 20920                                  %else
 20921 000032FC 51                      	push	cx
 20922 000032FD B90100                  	mov	cx,1
 20923 00003300 E80313                  	call	SETREAD_XJ
 20924 00003303 59                      	pop	cx
 20925                                  %endif
 20926                                  
 20927                                  ;hkn; SS override
 20928 00003304 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20929                                  	;lds	si,[si+7]
 20930 00003309 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20931                                  DVRDLP:
 20932 0000330C E8D51C                  	call	DSKSTATCHK
 20933 0000330F E87E12                  	call	DEVIOCALL2
 20934 00003312 57                      	PUSH	DI			; Save "count" done
 20935 00003313 B486                    	MOV	AH,86H
 20936                                  
 20937                                  ;hkn; SS override
 20938 00003315 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20939                                  	
 20940                                  	; MSDOS 3.3
 20941                                  	;test	di,8000h
 20942                                  	;jz	short CRDOK
 20943                                  	; MSDOS 6.0
 20944 0000331A 09FF                    	or	di,di
 20945 0000331C 7917                    	jns	short CRDOK
 20946                                  	
 20947 0000331E E8E21E                  	call	CHARHARD
 20948 00003321 5F                      	POP	DI
 20949                                  
 20950                                  ;hkn; SS override
 20951 00003322 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20952 00003329 3C01                    	CMP	AL,1
 20953 0000332B 74DF                    	JZ	short DVRDLP		; Retry
 20954 0000332D 3C03                    	CMP	AL,3
 20955 0000332F 74B7                    	JZ	short DEVIOFERR		; FAIL
 20956 00003331 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 20957 00003333 EB12                    	JMP	SHORT DVRDIGN
 20958                                  
 20959                                  CRDOK:
 20960 00003335 5F                      	POP	DI
 20961                                  
 20962                                  ;hkn; SS override
 20963 00003336 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 20964                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20965 0000333C 751F                    	JNZ	short ENDRDDEVJ2
 20966                                  	; 16/12/2022
 20967                                  	;jnz	short ENDRDDEV ; 24/07/2019
 20968                                  
 20969 0000333E 1E                      	PUSH	DS
 20970                                  
 20971                                  ;hkn; SS override
 20972 0000333F 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20973 00003344 8A05                    	MOV	AL,[DI]			; Get the character we just read
 20974 00003346 1F                      	POP	DS
 20975                                  DVRDIGN:
 20976                                  
 20977                                  ;hkn; SS override
 20978 00003347 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 20979 0000334C 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20980 00003353 47                      	INC	DI			; Next character
 20981 00003354 3C1A                    	CMP	AL,1Ah			; ^Z?
 20982                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20983 00003356 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 20984                                  	; 16/12/2022
 20985                                  	;jz	short ENDRDDEV ; 24/07/2019	
 20986 00003358 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 20987 0000335A E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 20988 0000335C 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 20989                                  					;  AX=FFFF which is not likely
 20990                                  ENDRDDEVJ2:
 20991                                  	; 16/12/2022
 20992                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 20993                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20994 0000335D EB78                    	jmp	ENDRDDEV
 20995                                  
 20996                                  	; 04/05/2019
 20997                                  
 20998                                  	; MSDOS 6.0
 20999                                  ;SR;
 21000                                  ;Polling code for raw read on CON when WIN386 is present
 21001                                  ;
 21002                                  ;At this point -- ds:di is transfer address
 21003                                  ;		  cx is count
 21004                                  
 21005                                  do_polling:
 21006                                  
 21007                                  ; 07/02/2024
 21008                                  %if 0
 21009                                  	mov	bx,di			;ds:bx is Xfer address
 21010                                  	; 06/02/2024 ; *
 21011                                  	;xor	ax,ax
 21012                                  	;;mov	dx,ax
 21013                                  	;; 06/02/2024
 21014                                  	;cwd
 21015                                  	;call	SETREAD			;prepare device packet
 21016                                  	; 06/02/2024 ; *
 21017                                  	call	SETREAD_X
 21018                                  %else
 21019 0000335F E8A412                  	call	SETREAD_XJ
 21020                                  %endif
 21021                                  
 21022                                  do_io:
 21023                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 21024                                  
 21025 00003362 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 21026 00003367 1E                      	push	ds
 21027 00003368 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 21028 0000336D E81D12                  	call	DEVIOCALL		;call device driver
 21029 00003370 1F                      	pop	ds
 21030                                  	
 21031                                  	;test	word [es:bx+3],8000h
 21032                                  	; 16/12/2022
 21033                                  	;test	byte [es:bx+4],80h
 21034 00003371 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 21035                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 21036 00003376 7413                    	jz	short check_busy	;no
 21037                                  
 21038 00003378 1E                      	push	ds
 21039 00003379 89FA                    	mov	dx,di
 21040                                  
 21041                                  invoke_charhard:	; 07/02/2024
 21042                                  	;invoke charhard		;invoke int 24h handler
 21043 0000337B E8851E                  	call	CHARHARD
 21044 0000337E 89D7                    	mov	di,dx
 21045 00003380 08C0                    	or	al,al
 21046 00003382 744D                    	jz	short pop_done_read	;ignore by user, assume read done
 21047 00003384 3C03                    	cmp	al,3
 21048 00003386 7438                    	jz	short devrderr		;user asked to fail
 21049 00003388 1F                      	pop	ds
 21050 00003389 EBD7                    	jmp	short do_io		;user asked to retry
 21051                                  
 21052                                  check_busy:
 21053                                  	;test	word [es:bx+3],200h
 21054                                  	; 16/12/2022
 21055 0000338B 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 21056                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 21057 00003390 7537                    	jnz	short no_char		;yes, no character available
 21058                                  
 21059                                  ;Character is available. Read in 1 character at a time until all characters
 21060                                  ;are read in or no character is available
 21061                                  
 21062 00003392 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 21063 00003397 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 21064 0000339D 1E                      	push	ds
 21065 0000339E 36C536[9E05]            	lds	si,[ss:THISSFT]
 21066 000033A3 E8E711                  	call	DEVIOCALL
 21067                                  
 21068 000033A6 89FA                    	mov	dx,di
 21069 000033A8 B486                    	mov	ah,86h
 21070                                  	;mov	di,[es:bx+3]
 21071 000033AA 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 21072 000033AE F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 21073                                  	;jz	short next_char		;no,read next character
 21074                                  	; 07/02/2024
 21075 000033B2 75C7                    	jnz	short invoke_charhard
 21076                                  
 21077                                  ; 07/02/2024
 21078                                  %if 0
 21079                                  	;invoke	charhard		;invoke int 24h handler
 21080                                  	call	CHARHARD
 21081                                  	mov	di,dx			;restore di
 21082                                  	or	al,al			;
 21083                                  	jz	short pop_done_read	;ignore by user,assume read is done
 21084                                  	cmp	al,3
 21085                                  	jz	short devrderr		;user issued a 'fail',indicate error
 21086                                  	pop	ds
 21087                                  	jmp	short do_io		;user issued a retry
 21088                                  %endif
 21089                                  
 21090                                  next_char:
 21091 000033B4 1F                      	pop	ds
 21092 000033B5 89D7                    	mov	di,dx
 21093 000033B7 49                      	dec	cx			;decrement count
 21094                                  	;jcxz	done_read		;all characters read in
 21095                                  	; 07/02/2024
 21096 000033B8 7418                    	jz	short done_read
 21097 000033BA 26FF470E                	inc	word [es:bx+14]		;update transfer address
 21098 000033BE EBA2                    	jmp	short do_io		;read next character in
 21099                                  
 21100                                  devrderr:
 21101 000033C0 5F                      	pop	di			;discard segment address
 21102 000033C1 36C43E[9E05]            	les	di,[ss:THISSFT]
 21103                                  	;transfer SET_ACC_ERR_DS	;indicate error
 21104 000033C6 E95804                  	jmp     SET_ACC_ERR_DS
 21105                                  
 21106                                  no_char:
 21107                                  ;Since no character is available, we let win386 switch the VM out
 21108                                  
 21109 000033C9 50                      	push	ax
 21110 000033CA B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 21111 000033CC CD2A                    	int	2Ah			;indicate idle to WIN386
 21112                                  
 21113                                  ;When control returns from WIN386, we continue the raw read
 21114                                  
 21115 000033CE 58                      	pop	ax
 21116 000033CF EB91                    	jmp	do_io
 21117                                  
 21118                                  pop_done_read:
 21119 000033D1 1F                      	pop	ds
 21120                                  done_read:
 21121 000033D2 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 21122                                  
 21123                                  	; 16/12/2022
 21124                                  
 21125                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21126                                  	;jmp	ENDRDDEV ; 04/05/2019
 21127                                  
 21128                                  	; 04/05/2019 - Retro DOS v4.0
 21129                                  ENDRDDEV:
 21130 000033D7 16                      	push	ss
 21131 000033D8 1F                      	pop	ds
 21132 000033D9 EB1F                    	jmp	short endrddev1
 21133                                  
 21134                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21135                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21136                                  
 21137                                  TRANBUF:
 21138 000033DB AC                      	LODSB
 21139 000033DC AA                      	STOSB
 21140 000033DD 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 21141 000033DF 7503                    	JNZ	short NORMCH
 21142 000033E1 C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 21143                                  NORMCH:
 21144 000033E4 3C0A                    	CMP	AL,c_LF ; 0Ah
 21145 000033E6 E0F3                    	LOOPNZ	TRANBUF
 21146 000033E8 7507                    	JNZ	short ENDRDCON
 21147 000033EA 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 21148 000033EC E85AE2                  	call	OUTT		; Transmit linefeed
 21149 000033EF 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 21150                                  ENDRDCON:
 21151                                  ;hkn; SS is DOSDATA
 21152 000033F1 16                      	push	ss
 21153 000033F2 1F                      	pop	ds
 21154 000033F3 E834FE                  	CALL	SWAPBACK
 21155 000033F6 8936[2200]              	MOV	[CONTPOS],SI
 21156                                  
 21157                                  	; 16/12/2022
 21158                                  ;ENDRDDEV:
 21159                                  ;;hkn; SS is DOSDATA
 21160                                  ;	push	ss
 21161                                  ;	pop	ds
 21162                                  endrddev1:	; 04/05/2019
 21163 000033FA 893E[B805]              	MOV	[NEXTADD],DI
 21164 000033FE 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21165 00003400 C43E[9E05]              	LES	DI,[THISSFT]
 21166                                  	;and	byte [es:di+5],0BFh
 21167 00003404 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF
 21168                                  				; Mark as no more data available
 21169                                  SETSFTC:
 21170                                  	; 31/07/2019
 21171                                  	;call	SETSFT
 21172                                  	;retn
 21173 00003409 E9A904                  	jmp	SETSFT
 21174                                  
 21175                                  ; 16/12/2022
 21176                                  %if 0
 21177                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21178                                  ENDRDDEV:
 21179                                  ;hkn; SS is DOSDATA
 21180                                  	push	ss
 21181                                  	pop	ds
 21182                                  	MOV	[NEXTADD],DI
 21183                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21184                                  	LES	DI,[THISSFT]
 21185                                  	;and	byte [es:di+5],0BFh
 21186                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF
 21187                                  				; Mark as no more data available
 21188                                  SETSFTC:
 21189                                  	;call	SETSFT
 21190                                  	;retn
 21191                                  	jmp	SETSFT	
 21192                                  %endif
 21193                                  
 21194                                  READCON:
 21195 0000340C E821FE                  	CALL	SWAPCON
 21196 0000340F 8B36[2200]              	MOV	SI,[CONTPOS]
 21197 00003413 09F6                    	OR	SI,SI
 21198 00003415 75C4                    	JNZ	short TRANBUF
 21199 00003417 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 21200 0000341C 7406                    	JZ	short GETBUF
 21201 0000341E C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 21202                                  GETBUF:
 21203 00003424 51                      	PUSH	CX
 21204 00003425 06                      	PUSH	ES
 21205 00003426 57                      	PUSH	DI
 21206                                  
 21207                                  ;hkn; CONBUF is in DOSDATA
 21208 00003427 BA[7B02]                	MOV	DX,CONBUF
 21209                                  
 21210 0000342A E89ADF                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 21211 0000342D 5F                      	POP	DI
 21212 0000342E 07                      	POP	ES
 21213 0000342F 59                      	POP	CX
 21214                                  
 21215                                  ;hkn; CONBUF is in DOSDATA
 21216 00003430 BE[7D02]                	MOV	SI,CONBUF+2
 21217                                  
 21218 00003433 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 21219 00003436 75A3                    	JNZ	short TRANBUF
 21220 00003438 B01A                    	MOV	AL,1AH
 21221 0000343A AA                      	STOSB
 21222 0000343B 4F                      	DEC	DI
 21223 0000343C B00A                    	MOV	AL,c_LF
 21224 0000343E E808E2                  	call	OUTT		; Send linefeed
 21225 00003441 31F6                    	XOR	SI,SI
 21226 00003443 EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 21227                                  
 21228                                  ; 24/07/2018 - Retro DOS v3.0
 21229                                  
 21230                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 21231                                  ;---------------------------------------------------------------------------
 21232                                  ;
 21233                                  ; Procedure Name : DOS_WRITE
 21234                                  ;
 21235                                  ; Inputs:
 21236                                  ;	ThisSFT set to the SFT for the file being used
 21237                                  ;	[DMAADD] contains transfer address
 21238                                  ;	CX = No. of bytes to write
 21239                                  ; Function:
 21240                                  ;	Perform write operation
 21241                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 21242                                  ;		to current sf_position
 21243                                  ; Outputs:
 21244                                  ;    Carry clear
 21245                                  ;	SFT Position and cluster pointers updated
 21246                                  ;	CX = No. of bytes written
 21247                                  ;	ES:DI point to SFT
 21248                                  ;    Carry set
 21249                                  ;	AX is error code
 21250                                  ;	CX = 0
 21251                                  ;	ES:DI point to SFT
 21252                                  ; DS preserved, all other registers destroyed
 21253                                  ;---------------------------------------------------------------------------
 21254                                  
 21255                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 21256                                  ;hkn; point to DOSDATA.
 21257                                  
 21258                                  ; 04/05/2019 - Retro DOS v4.0
 21259                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 21260                                  
 21261                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21262                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 21263                                  
 21264                                  DOS_WRITE:
 21265 00003445 C43E[9E05]              	LES	DI,[THISSFT]
 21266                                  	;mov	al,[ES:DI+2]
 21267 00003449 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 21268                                  	;and	al,0Fh
 21269 0000344D 240F                    	AND	AL,access_mask
 21270                                  	;cmp	al,0
 21271 0000344F 3C00                    	CMP	AL,open_for_read
 21272 00003451 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 21273                                  BadMode:
 21274 00003453 E9CD03                  	jmp	SET_ACC_ERR
 21275                                  
 21276                                  ; NOTE: The following check for writting to a Read Only File is performed
 21277                                  ;	    ONLY on FCBs!!!!
 21278                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 21279                                  ;	    of a read only file which can then be written to.
 21280                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 21281                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 21282                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 21283                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 21284                                  ;	    to a read-only file.
 21285                                  
 21286                                  Check_FCB_RO:
 21287                                  	;;test	word [es:di+2],8000h
 21288                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21289                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 21290                                  	
 21291                                  	;test	byte [es:di+3],80h
 21292 00003456 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21293 0000345B 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 21294                                  
 21295                                  	;test	byte [es:di+4],1
 21296 0000345D 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 21297 00003462 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 21298                                  WRITE_NO_MODE:
 21299 00003464 E8A402                  	call	SETUP
 21300 00003467 E8E5DD                  	call	IsSFTNet
 21301 0000346A 7406                    	JZ	short LOCAL_WRITE
 21302                                  
 21303                                  ;IF NOT Installed
 21304                                  ;	transfer NET_WRITE
 21305                                  ;ELSE
 21306                                  	;mov	ax,1109h
 21307 0000346C B80911                  	MOV	AX,(MultNET<<8)|9
 21308 0000346F CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 21309                                  			; ES:DI -> SFT
 21310                                  			; SFT DPB field -> DPB of drive containing file
 21311                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 21312                                  			; Return: CF set on error, CX = bytes written
 21313 00003471 C3                      	retn
 21314                                  ;ENDIF
 21315                                  
 21316                                  LOCAL_WRITE:
 21317                                  	;;test	word [es:di+5],80h
 21318                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 21319                                  	;jnz	short WRTDEV
 21320                                  
 21321                                  	;test	byte [es:di+5],80h
 21322 00003472 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 21323 00003477 756D                    	jnz	short WRTDEV
 21324                                  
 21325                                  	;mov	byte [EXTERR_LOCUS],2
 21326 00003479 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 21327 0000347E E877DE                  	call	ECritDisk
 21328                                  
 21329 00003481 E8E104                  	call	DISKWRITE
 21330                                  
 21331                                  	; 04/05/2019 - Retro DOS v4.0
 21332                                  
 21333                                  	; MSDOS 6.0
 21334                                  ; Extended Open
 21335 00003484 7210                    	JC	short nocommit
 21336                                  	
 21337 00003486 C43E[9E05]              	LES	DI,[THISSFT]
 21338                                  	
 21339                                  	;;test	word [ES:DI+2],4000h
 21340                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 21341                                  	;JZ	short nocommit
 21342                                  	
 21343                                  	;test	byte [ES:DI+3],40h
 21344 0000348A 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 21345 0000348F 7405                    	JZ	short nocommit
 21346                                  	
 21347 00003491 51                      	PUSH	CX
 21348 00003492 E85DFB                  	call	DOS_COMMIT
 21349 00003495 59                      	POP	CX
 21350                                  nocommit:
 21351                                  ; Extended Open
 21352                                  	;call	LCritDisk
 21353                                  	;retn
 21354                                  	; 18/12/2022
 21355 00003496 E97ADE                  	jmp	LCritDisk
 21356                                  
 21357                                  DVWRTRAW:
 21358 00003499 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 21359 0000349B E8A911                  	call	SETWRITE
 21360 0000349E 1E                      	PUSH	DS			; Save seg of transfer
 21361                                  
 21362                                  ;hkn; SS override
 21363 0000349F 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21364 000034A4 E8E610                  	call	DEVIOCALL		; DS:SI -> DEVICE
 21365                                  
 21366 000034A7 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 21367 000034A9 B487                    	MOV	AH,87H
 21368                                  
 21369                                  ;hkn; SS override
 21370 000034AB 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21371                                  
 21372                                  	; MSDOS 3.3
 21373                                  	;test	di,8000h
 21374                                  	;jz	short CWRTROK
 21375                                  
 21376                                  	; MSDOS 6.0
 21377 000034B0 09FF                    	or	di,di
 21378 000034B2 791F                    	jns	short CWRTROK
 21379                                  	
 21380                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21381 000034B4 E84C1D                  	call	CHARHARD
 21382                                  
 21383                                  	; 04/05/2019  - Retro DOS v4.0
 21384                                  
 21385                                  	; MSDOS 6.0
 21386                                  	;sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 21387                                  	; 08/02/2024
 21388 000034B7 368B3E[6C03]            	mov	di,[ss:CALLSCNT]
 21389 000034BC 29F9                    	sub	cx,di
 21390 000034BE 89D3                    	mov	bx,dx			; number of chars xferred	M065
 21391                                  	;add	bx,[ss:CALLSCNT]	;				M065
 21392 000034C0 01FB                    	add	bx,di
 21393 000034C2 89DF                    	mov	di,bx			;				M065
 21394                                  	
 21395                                  	; MSDOS 3.3
 21396                                  	;MOV	BX,DX			; Recall transfer addr		M065
 21397                                  
 21398                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21399 000034C4 08C0                    	OR	AL,AL
 21400 000034C6 740B                    	JZ	short CWRTROK 		; Ignore
 21401 000034C8 3C03                    	CMP	AL,3
 21402 000034CA 7403                    	JZ	short CWRFERR
 21403 000034CC 1F                      	POP	DS			; Recover saved seg of transfer
 21404 000034CD EBCA                    	JMP	short DVWRTRAW		; Try again
 21405                                  CWRFERR:
 21406 000034CF 58                      	POP	AX			; Chuck saved seg of transfer
 21407 000034D0 E914FE                  	JMP	CRDFERR 		; Will pop one more stack element
 21408                                  CWRTROK:
 21409 000034D3 58                      	POP	AX			; Chuck saved seg of transfer
 21410 000034D4 1F                      	POP	DS
 21411 000034D5 A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 21412                                  ENDWRDEV:
 21413 000034D8 C43E[9E05]              	LES	DI,[THISSFT]
 21414 000034DC 89C1                    	MOV	CX,AX
 21415                                  	;call	ADDREC
 21416                                  	;retn
 21417                                  	; 16/12/2022
 21418                                  	; 10/06/2019
 21419 000034DE E9F503                  	jmp	ADDREC
 21420                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21421                                  	;call	ADDREC
 21422                                  	;retn
 21423                                  	
 21424                                  WRTNUL:
 21425 000034E1 89CA                    	MOV	DX,CX			; Entire transfer done
 21426                                  WRTCOOKJ:
 21427 000034E3 E98D00                  	JMP	WRTCOOKDONE
 21428                                  WRTDEV:
 21429                                  	;mov	byte [EXTERR_LOCUS],4
 21430 000034E6 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 21431                                  	;or	byte [es:di+5],40h
 21432 000034EB 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 21433                                  					; Reset EOF for input
 21434                                  	;mov	bl,[es:di+5]
 21435 000034F0 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 21436 000034F4 31C0                    	XOR	AX,AX
 21437 000034F6 E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 21438 000034F8 1E                      	PUSH	DS
 21439 000034F9 88D8                    	MOV	AL,BL
 21440 000034FB C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 21441 000034FF 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 21442 00003501 31D2                    	XOR	DX,DX			; Set starting point
 21443                                  	;test	al,20h
 21444 00003503 A820                    	test	AL,devid_device_raw	; Raw?
 21445                                  	;JZ	short TEST_DEV_CON
 21446                                  	;JMP	DVWRTRAW
 21447                                  	; 16/12/2022
 21448 00003505 7592                    	jnz	short DVWRTRAW
 21449                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21450                                  	;JZ	short TEST_DEV_CON
 21451                                  	;JMP	short DVWRTRAW
 21452                                  
 21453                                  TEST_DEV_CON:
 21454                                  	;test	al,2
 21455 00003507 A802                    	test	AL,devid_device_con_out ; Console output device?
 21456 00003509 756E                    	jnz	short WRITECON
 21457                                  	;test	al,4
 21458 0000350B A804                    	test	AL,devid_device_null
 21459 0000350D 75D2                    	JNZ	short WRTNUL
 21460 0000350F 89D0                    	MOV	AX,DX
 21461 00003511 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 21462 00003514 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 21463 00003516 51                      	PUSH	CX
 21464 00003517 B90100                  	MOV	CX,1
 21465 0000351A E82A11                  	call	SETWRITE
 21466 0000351D 59                      	POP	CX
 21467                                  
 21468                                  ;hkn; SS override
 21469 0000351E 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21470                                  ;
 21471                                  ;SR; Removed X25 support from here
 21472                                  ;
 21473                                  	;lds	si,[si+7]
 21474 00003523 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 21475                                  DVWRTLP:
 21476 00003526 E8BB1A                  	call	DSKSTATCHK
 21477 00003529 E86410                  	call	DEVIOCALL2
 21478 0000352C 57                      	PUSH	DI
 21479 0000352D B487                    	MOV	AH,87H
 21480                                  
 21481                                  ;hkn; SS override
 21482 0000352F 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21483                                  	
 21484                                  	; MSDOS 3.3
 21485                                  	;test	di,8000h
 21486                                  	;jz	short CWROK
 21487                                  
 21488                                  	; MSDOS 6.0
 21489 00003534 09FF                    	or	di,di
 21490 00003536 7916                    	jns	short CWROK
 21491                                  	
 21492                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21493 00003538 E8C81C                  	call	CHARHARD
 21494 0000353B 5F                      	POP	DI
 21495                                  
 21496                                  ;hkn; SS override
 21497 0000353C 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 21498 00003543 3C01                    	CMP	AL,1
 21499 00003545 74DF                    	JZ	short DVWRTLP 	; Retry
 21500 00003547 08C0                    	OR	AL,AL
 21501 00003549 740C                    	JZ	short DVWRTIGN	; Ignore
 21502                                  	; 10/08/2018
 21503 0000354B E999FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 21504                                  CWROK:
 21505 0000354E 5F                      	POP	DI
 21506                                  
 21507                                  ;hkn; SS override
 21508 0000354F 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 21509 00003555 741C                    	JZ	short WRTCOOKDONE
 21510                                  DVWRTIGN:
 21511 00003557 42                      	INC	DX
 21512                                  
 21513                                  ;hkn; SS override for CALLXAD
 21514 00003558 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 21515 0000355D 47                      	INC	DI
 21516 0000355E 1E                      	PUSH	DS
 21517 0000355F 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21518 00003564 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 21519 00003567 1F                      	POP	DS
 21520 00003568 7409                    	JZ	short WRTCOOKDONE
 21521                                  
 21522                                  ;hkn; SS override
 21523 0000356A 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21524 00003571 E2B3                    	LOOP	DVWRTLP
 21525                                  WRTCOOKDONE:
 21526 00003573 89D0                    	MOV	AX,DX
 21527 00003575 1F                      	POP	DS
 21528 00003576 E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 21529                                  
 21530                                  WRITECON:
 21531 00003579 1E                      	PUSH	DS
 21532                                  
 21533                                  ;hkn; SS is DOSDATA
 21534 0000357A 16                      	push	ss
 21535 0000357B 1F                      	pop	ds
 21536 0000357C E8B1FC                  	CALL	SWAPCON
 21537 0000357F 1F                      	POP	DS
 21538 00003580 89DE                    	MOV	SI,BX
 21539 00003582 51                      	PUSH	CX
 21540                                  WRCONLP:
 21541 00003583 AC                      	LODSB
 21542 00003584 3C1A                    	CMP	AL,1Ah		; ^Z?
 21543 00003586 7405                    	JZ	short CONEOF
 21544 00003588 E8BEE0                  	call	OUTT
 21545 0000358B E2F6                    	LOOP	WRCONLP
 21546                                  CONEOF:
 21547 0000358D 58                      	POP	AX			; Count
 21548 0000358E 29C8                    	SUB	AX,CX			; Amount actually written
 21549 00003590 1F                      	POP	DS
 21550 00003591 E896FC                  	CALL	SWAPBACK
 21551 00003594 E941FF                  	JMP	ENDWRDEV
 21552                                  
 21553                                  ;---------------------------------------------------------------------------
 21554                                  ;
 21555                                  ; Procedure Name : get_io_sft
 21556                                  ;
 21557                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 21558                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 21559                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 21560                                  ;
 21561                                  ;---------------------------------------------------------------------------
 21562                                  
 21563                                  ; 04/05/2019 - Retro DOS v4.0
 21564                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 21565                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21566                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 21567                                  
 21568                                  GET_IO_SFT:
 21569                                  	;test	byte [SS:CONSWAP],0FFh
 21570 00003597 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 21571 0000359D 7512                    	JNZ	short GetRedir
 21572                                  GetNormal:
 21573 0000359F 16                      	push	ss
 21574 000035A0 1F                      	pop	ds
 21575 000035A1 06                      	PUSH	ES
 21576 000035A2 57                      	PUSH	DI
 21577 000035A3 E8FD2F                  	call	SFFromHandle
 21578 000035A6 7206                    	JC	short RET44P
 21579 000035A8 8CC6                    	MOV	SI,ES
 21580 000035AA 8EDE                    	MOV	DS,SI
 21581 000035AC 89FE                    	MOV	SI,DI
 21582                                  RET44P:
 21583 000035AE 5F                      	POP	DI
 21584 000035AF 07                      	POP	ES
 21585 000035B0 C3                      	retn
 21586                                  GetRedir:
 21587 000035B1 83FB01                  	CMP	BX,1
 21588 000035B4 77E9                    	JA	short GetNormal
 21589 000035B6 36C536[E605]            	LDS	SI,[SS:CONSFT]
 21590 000035BB F8                      	CLC
 21591                                  get_io_sft_retn:
 21592 000035BC C3                      	retn
 21593                                  
 21594                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 21595                                  ;---------------------------------------------------------------------------
 21596                                  ;
 21597                                  ; Procedure Name : DIRREAD
 21598                                  ;
 21599                                  ; Inputs:
 21600                                  ;	AX = Directory block number (relative to first block of directory)
 21601                                  ;	ES:BP = Base of drive parameters
 21602                                  ;	[DIRSEC] = First sector of first cluster of directory
 21603                                  ;	[CLUSNUM] = Next cluster
 21604                                  ;	[CLUSFAC] = Sectors/Cluster
 21605                                  ; Function:
 21606                                  ;	Read the directory block into [CURBUF].
 21607                                  ; Outputs:
 21608                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 21609                                  ;	[SECCLUSPOS] Set
 21610                                  ;	ES:BP unchanged
 21611                                  ;	[CURBUF] Points to Buffer with dir sector
 21612                                  ;	Carry set if error (user said FAIL to I 24)
 21613                                  ; DS preserved, all other registers destroyed.
 21614                                  ;---------------------------------------------------------------------------
 21615                                  
 21616                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 21617                                  
 21618                                  DIRREAD:
 21619                                  
 21620                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 21621                                  ; the same as what is in the DPB! In the case of the root directory, we have
 21622                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 21623                                  ; by DIRStart = 0.
 21624                                  
 21625 000035BD 31D2                    	XOR	DX,DX
 21626                                  	;CMP	word [DIRSTART],0
 21627                                  	; 21/09/2023
 21628 000035BF 3916[C205]              	cmp	[DIRSTART],dx ; 0
 21629 000035C3 7503                    	jnz	short SubDir
 21630 000035C5 92                      	XCHG	AX,DX
 21631 000035C6 EB0C                    	JMP	short DoRead
 21632                                  
 21633                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 21634                                  
 21635                                  SubDir:
 21636 000035C8 88C2                    	MOV	DL,AL
 21637                                  	;and	dl,[es:bp+4]
 21638 000035CA 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 21639                                  
 21640                                  ;	(DX) = sector-in-cluster
 21641                                  
 21642                                  	;mov	cl,[es:bp+5]
 21643 000035CE 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21644 000035D2 D3E8                    	SHR	AX,CL
 21645                                  
 21646                                  ;	(DX) = position in cluster
 21647                                  ;	(AX) = number of clusters to skip
 21648                                  
 21649                                  DoRead:
 21650 000035D4 8816[7305]              	MOV	[SECCLUSPOS],DL
 21651 000035D8 89C1                    	MOV	CX,AX
 21652 000035DA 88D4                    	MOV	AH,DL
 21653                                  
 21654                                  ;	(CX) = number of clusters to skip.
 21655                                  ;	(AH) = remainder
 21656                                  
 21657                                  	; 04/05/2019 - Retro DOS v4.0
 21658                                  
 21659                                  	; MSDOS 6.0
 21660                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 21661                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 21662                                  	;MOV	DX,[DIRSEC]
 21663                                  	;ADD	DL,AH
 21664                                  	;ADC	DH,0
 21665                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 21666                                  	; 21/09/2023
 21667 000035DC 31DB                    	xor	bx,bx ; 0
 21668 000035DE 8B16[BE05]              	mov	dx,[DIRSEC]
 21669 000035E2 00E2                    	add	dl,ah
 21670 000035E4 10DE                    	adc	dh,bl ; 0
 21671 000035E6 131E[C005]              	adc	bx,[DIRSEC+2]
 21672 000035EA 891E[0706]              	mov	[HIGH_SECTOR],bx
 21673                                  
 21674 000035EE 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21675 000035F2 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21676 000035F6 E319                    	JCXZ	FIRSTCLUSTER
 21677                                  SKPCLLP:
 21678 000035F8 E8731E                  	call	UNPACK
 21679 000035FB 72BF                    	jc	short get_io_sft_retn
 21680 000035FD 87DF                    	XCHG	BX,DI
 21681 000035FF E8551E                  	call	IsEOF			; test for eof based on fat size
 21682 00003602 7302                    	JAE	short HAVESKIPPED
 21683 00003604 E2F2                    	LOOP	SKPCLLP
 21684                                  HAVESKIPPED:
 21685 00003606 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21686 0000360A 89FA                    	MOV	DX,DI
 21687 0000360C 88E3                    	MOV	BL,AH
 21688 0000360E E80617                  	call	FIGREC
 21689                                  
 21690                                  	;entry	FIRSTCLUSTER
 21691                                  
 21692                                  FIRSTCLUSTER:
 21693                                  	; 22/09/2023
 21694                                  	;;mov	byte [ALLOWED],18h
 21695                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 21696                                  	;XOR	AL,AL ; *	; Indicate pre-read
 21697                                  	;call	GETBUFFR
 21698 00003611 E86522                  	call	GETBUFFER ; *	; pre-read
 21699 00003614 72A6                    	jc	short get_io_sft_retn
 21700                                  
 21701                                  	;entry	SET_BUF_AS_DIR
 21702                                  
 21703                                  SET_BUF_AS_DIR:
 21704                                  
 21705                                  ;	Set the type of CURBUF to be a directory sector.
 21706                                  ;	Only flags are modified.
 21707                                  
 21708 00003616 1E                      	PUSH	DS
 21709 00003617 56                      	PUSH	SI
 21710 00003618 C536[E205]              	LDS	SI,[CURBUF]
 21711                                  	;or	byte [si+5],4
 21712 0000361C 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21713 00003620 5E                      	POP	SI
 21714 00003621 1F                      	POP	DS
 21715                                  dirread_retn:
 21716 00003622 C3                      	retn
 21717                                  
 21718                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21719                                  ;----------------------------------------------------------------------------
 21720                                  ;
 21721                                  ; Procedure Name : FATSECRD
 21722                                  ; Inputs:
 21723                                  ;	Same as DREAD
 21724                                  ;	DS:BX = Transfer address
 21725                                  ;	CX = Number of sectors
 21726                                  ;	DX = Absolute record number
 21727                                  ;	ES:BP = Base of drive parameters
 21728                                  ; Function:
 21729                                  ;	Calls BIOS to perform FAT read.
 21730                                  ; Outputs:
 21731                                  ;	Same as DREAD
 21732                                  ;---------------------------------------------------------------------------
 21733                                  
 21734                                  	; 04/05/2019 - Retro DOS v4.0
 21735                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21736                                  
 21737                                  FATSECRD:
 21738                                  ;hkn; SS override
 21739                                  	;mov	byte [ss:ALLOWED],18h
 21740 00003623 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21741 00003629 89CF                    	MOV	DI,CX
 21742                                  	;mov	cl,[es:bp+8]
 21743 0000362B 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21744                                  	; MSDOS 3.3
 21745                                  	;;mov	al,[es:bp+0Fh]
 21746                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE]
 21747                                  	;XOR	AH,AH
 21748                                  	; MSDOS 6.0
 21749                                  	;mov	ax,[es:bp+0Fh]
 21750 0000362F 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21751 00003633 30ED                    	XOR	CH,CH
 21752 00003635 52                      	PUSH	DX
 21753                                  NXTFAT:
 21754                                  	; MSDOS 6.0
 21755                                  ;hkn; SS override
 21756 00003636 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21757 0000363D 51                      	PUSH	CX			;32mb
 21758 0000363E 50                      	PUSH	AX
 21759 0000363F 89F9                    	MOV	CX,DI
 21760 00003641 E85B00                  	call	DSKREAD
 21761 00003644 58                      	POP	AX
 21762 00003645 59                      	POP	CX
 21763 00003646 7420                    	JZ	short RET41P		; Carry clear
 21764 00003648 01C2                    	ADD	DX,AX
 21765 0000364A E2EA                    	LOOP	NXTFAT
 21766 0000364C 5A                      	POP	DX
 21767 0000364D 89F9                    	MOV	CX,DI
 21768                                  
 21769                                  ; NOTE FALL THROUGH
 21770                                  
 21771                                  ;Break	<DREAD -- DO A DISK READ>
 21772                                  ;---------------------------------------------------------------------------
 21773                                  ;
 21774                                  ; Procedure Name : DREAD
 21775                                  ;
 21776                                  ; Inputs:
 21777                                  ;	DS:BX = Transfer address
 21778                                  ;	CX = Number of sectors
 21779                                  ;	DX = Absolute record number	      (LOW)
 21780                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21781                                  ;	ES:BP = Base of drive parameters
 21782                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21783                                  ; Function:
 21784                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21785                                  ;	errors, will call HARDERRRW for further action.
 21786                                  ; Outputs:
 21787                                  ;	Carry set if error (currently user FAILED to INT 24)
 21788                                  ; DS,ES:BP preserved. All other registers destroyed.
 21789                                  ;---------------------------------------------------------------------------
 21790                                  
 21791                                  	;entry	DREAD
 21792                                  DREAD:
 21793 0000364F E84D00                  	call	DSKREAD
 21794 00003652 74CE                    	jz	short dirread_retn	; Carry clear
 21795                                  ;hkn; SS override
 21796 00003654 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21797 0000365A E89500                  	call	HARDERRRW
 21798 0000365D 3C01                    	CMP	AL,1			; Check for retry
 21799 0000365F 74EE                    	JZ	short DREAD
 21800                                  
 21801                                  fail_ignore:	; 09/02/2024
 21802 00003661 3C03                    	CMP	AL,3			; Check for FAIL
 21803 00003663 F8                      	CLC
 21804 00003664 7501                    	JNZ	short NO_CAR		; Ignore
 21805 00003666 F9                      	STC
 21806                                  NO_CAR:
 21807 00003667 C3                      	retn
 21808                                  RET41P: 
 21809 00003668 5A                      	POP	DX
 21810 00003669 C3                      	retn
 21811                                  
 21812                                  ; 24/07/2018 - Retro DOS v3.0
 21813                                  
 21814                                  ;Break	<CHECK_WRITE_LOCK>
 21815                                  ;---------------------------------------------------------------------------
 21816                                  ;
 21817                                  ; Procedure Name : CHECK_WRITE_LOCK
 21818                                  ;
 21819                                  ; Inputs:
 21820                                  ;	output of SETUP
 21821                                  ;	ES:DI -> SFT
 21822                                  ; Function:
 21823                                  ;	check write lock
 21824                                  ; Outputs:
 21825                                  ;	Carry set if error
 21826                                  ;	Carry clear if ok
 21827                                  ;
 21828                                  ;----------------------------------------------------------------------------
 21829                                  
 21830                                  	; 04/05/2019 - Retro DOS v4.0
 21831                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21832                                  
 21833                                  CHECK_WRITE_LOCK:
 21834                                  	; MSDOS 6.0
 21835                                  	;test	byte [es:di+4],8
 21836 0000366A 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21837                                  	;JZ	short write_cont			     ;no
 21838                                  	;;call	SET_ACC_ERR_DS
 21839                                  	;;retn
 21840                                  	;;jnz	SET_ACC_ERR_DS
 21841                                  	; 19/08/2018
 21842                                  	;jz	short write_cont
 21843                                  	;jmp	SET_ACC_ERR_DS
 21844                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21845 0000366F 7403                    	JZ	short write_cont
 21846                                  	;call	SET_ACC_ERR_DS
 21847                                  	;retn
 21848                                  	; 16/12/2022
 21849 00003671 E9AD01                  	jmp	SET_ACC_ERR_DS
 21850                                  
 21851                                  write_cont:				;
 21852 00003674 51                      	PUSH	CX			;save reg
 21853 00003675 09C9                    	OR	CX,CX			;
 21854 00003677 7501                    	JNZ	short Not_Truncate	;
 21855 00003679 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21856                                  Not_Truncate:				;
 21857 0000367A B080                    	MOV	AL,80H			;check write access
 21858 0000367C E8AD3B                  	call	LOCK_CHECK		;check lock
 21859 0000367F 59                      	POP	CX			;restore reg
 21860 00003680 7305                    	JNC	short WRITE_OK		;lock ok
 21861 00003682 E85A01                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21862 00003685 73ED                    	JNC	short write_cont	;retry
 21863                                  WRITE_OK:				;
 21864 00003687 C3                      	retn				;
 21865                                  
 21866                                  ;Break	<CHECK_READ_LOCK>
 21867                                  ;---------------------------------------------------------------------------
 21868                                  ;
 21869                                  ; Procedure Name : CHECK_READ_LOC
 21870                                  ;
 21871                                  ; Inputs:
 21872                                  ;	ES:DI -> SFT
 21873                                  ;	output of SETUP
 21874                                  ; Function:
 21875                                  ;	check read lock
 21876                                  ; Outputs:
 21877                                  ;	Carry set if error
 21878                                  ;	Carry clear if ok
 21879                                  ;----------------------------------------------------------------------------
 21880                                  
 21881                                  CHECK_READ_LOCK:
 21882                                  	; MSDOS 6.0
 21883                                  	;test	byte [es:di+4],8
 21884 00003688 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21885                                  	;JZ	short do_retry			   	     ; no
 21886                                  	;;call	SET_ACC_ERR
 21887                                  	;;retn
 21888                                  	;;jnz	SET_ACC_ERR
 21889                                  	; 16/12/2022
 21890                                  	; 28/07/2019
 21891 0000368D 7403                    	jz	short do_retry
 21892 0000368F E99101                  	jmp	SET_ACC_ERR
 21893                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21894                                  	;JZ	short do_retry
 21895                                  	;call	SET_ACC_ERR
 21896                                  	;retn
 21897                                  do_retry:				;
 21898 00003692 30C0                    	xor	al,al			;check read access
 21899 00003694 E8953B                  	call	LOCK_CHECK		;check lock
 21900 00003697 7305                    	JNC	short READLOCK_OK 	;lock ok
 21901 00003699 E82301                  	call	READ_LOCK_VIOLATION	;issue I24
 21902 0000369C 73F4                    	JNC	short do_retry		;retry
 21903                                  READLOCK_OK:				;
 21904                                  dw_ret_label:	; 09/02/2024
 21905 0000369E C3                      	retn				;
 21906                                  
 21907                                  ;============================================================================
 21908                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21909                                  ;============================================================================
 21910                                  ; 24/07/2018 - Retro DOS v3.0
 21911                                  ; 04/05/2019 - Retro DOS v4.0
 21912                                  
 21913                                  ;	TITLE	DISK2 - Disk utility routines
 21914                                  ;	NAME	Disk2
 21915                                  
 21916                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21917                                  ;
 21918                                  ;	DskRead
 21919                                  ;	DWRITE
 21920                                  ;	DSKWRITE
 21921                                  ;	HarderrRW
 21922                                  ;	SETUP
 21923                                  ;	BREAKDOWN
 21924                                  ;	READ_LOCK_VIOLATION
 21925                                  ;	WRITE_LOCK_VIOLATION
 21926                                  ;	DISKREAD
 21927                                  ;	SET_ACC_ERR_DS
 21928                                  ;	SET_ACC_ERR
 21929                                  ;	SETSFT
 21930                                  ;	SETCLUS
 21931                                  ;	AddRec
 21932                                  ;
 21933                                  ;	Revision history:
 21934                                  ;
 21935                                  ;		AN000 version 4.00 Jan. 1988
 21936                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21937                                  
 21938                                  ; 04/05/2019 - Retro DOS v4.0
 21939                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21940                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21941                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21942                                  
 21943                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21944                                  ;---------------------------------------------------------------------------
 21945                                  ;
 21946                                  ; Procedure Name : DSKREAD
 21947                                  ;
 21948                                  ; Inputs:
 21949                                  ;	DS:BX = Transfer addr
 21950                                  ;	CX = Number of sectors
 21951                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21952                                  ;	DX = Absolute record number	       (LOW)
 21953                                  ;	ES:BP = Base of drive parameters
 21954                                  ; Function:
 21955                                  ;	Call BIOS to perform disk read
 21956                                  ; Outputs:
 21957                                  ;	DI = CX on entry
 21958                                  ;	CX = Number of sectors unsuccessfully transfered
 21959                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21960                                  ;	Zero set if OK (from BIOS) (carry clear)
 21961                                  ;	Zero clear if error (carry clear)
 21962                                  ; SI Destroyed, others preserved
 21963                                  ;---------------------------------------------------------------------------
 21964                                  
 21965                                  DSKREAD:
 21966 0000369F 51                      	PUSH	CX
 21967                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21968 000036A0 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21969                                  	;mov	al,[es:bp+1]
 21970 000036A4 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21971 000036A8 53                      	PUSH	BX
 21972 000036A9 06                      	PUSH	ES
 21973 000036AA E8670F                  	call	SETREAD
 21974 000036AD EB22                    	JMP	short DODSKOP
 21975                                  
 21976                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 21977                                  ;--------------------------------------------------------------------------
 21978                                  ;
 21979                                  ; Procedure Name : DWRITE
 21980                                  ;
 21981                                  ; Inputs:
 21982                                  ;	DS:BX = Transfer address
 21983                                  ;	CX = Number of sectors
 21984                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21985                                  ;	DX = Absolute record number	       (LOW)
 21986                                  ;	ES:BP = Base of drive parameters
 21987                                  ;	[ALLOWED] must be set in case HARDERR called
 21988                                  ; Function:
 21989                                  ;	Calls BIOS to perform disk write. If BIOS reports
 21990                                  ;	errors, will call HARDERRRW for further action.
 21991                                  ; Output:
 21992                                  ;	Carry set if error (currently, user FAILed to I 24)
 21993                                  ; BP preserved. All other registers destroyed.
 21994                                  ;----------------------------------------------------------------------------
 21995                                  
 21996                                  	;entry	DWRITE
 21997                                  DWRITE:
 21998 000036AF E81100                  	CALL	DSKWRITE
 21999 000036B2 74EA                    	jz	short dw_ret_label	; Carry clear (retz)
 22000                                  
 22001                                  ;hkn; SS override
 22002 000036B4 36C606[7505]01          	MOV	BYTE [SS:READOP],1	; Write
 22003 000036BA E83500                  	call	HARDERRRW
 22004 000036BD 3C01                    	CMP	AL,1			; Check for retry
 22005 000036BF 74EE                    	JZ	short DWRITE
 22006                                  
 22007                                  ; 09/02/2024
 22008                                  %if 0
 22009                                  	CMP	AL,3			; Check for FAIL
 22010                                  	CLC
 22011                                  	JNZ	short NO_CAR2 		; Ignore
 22012                                  	STC
 22013                                  NO_CAR2:
 22014                                  dw_ret_label:
 22015                                  	retn
 22016                                  %else
 22017                                  	; 09/02/2024 - Retro DOS v4.1
 22018 000036C1 EB9E                    	jmp	short fail_ignore
 22019                                  %endif
 22020                                  
 22021                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 22022                                  ;---------------------------------------------------------------------------
 22023                                  ;
 22024                                  ; Procedure Name : DSKWRITE
 22025                                  ;
 22026                                  ; Inputs:
 22027                                  ;	DS:BX = Transfer addr
 22028                                  ;	CX = Number of sectors
 22029                                  ;	DX = Absolute record number	       (LOW)
 22030                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22031                                  ;	ES:BP = Base of drive parameters
 22032                                  ; Function:
 22033                                  ;	Call BIOS to perform disk read
 22034                                  ; Outputs:
 22035                                  ;	DI = CX on entry
 22036                                  ;	CX = Number of sectors unsuccessfully transfered
 22037                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 22038                                  ;	Zero set if OK (from BIOS) (carry clear)
 22039                                  ;	Zero clear if error (carry clear)
 22040                                  ; SI Destroyed, others preserved
 22041                                  ;
 22042                                  ;----------------------------------------------------------------------------
 22043                                  
 22044                                  	;entry	DSKWRITE
 22045                                  DSKWRITE:
 22046 000036C3 51                      	PUSH	CX
 22047                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 22048 000036C4 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 22049                                  	;mov	al,[es:bp+1]
 22050 000036C8 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 22051 000036CC 53                      	PUSH	BX
 22052 000036CD 06                      	PUSH	ES
 22053 000036CE E8760F                  	call	SETWRITE
 22054                                  DODSKOP:
 22055 000036D1 8CD9                    	MOV	CX,DS		; Save DS
 22056 000036D3 1F                      	POP	DS		; DS:BP points to DPB
 22057 000036D4 1E                      	PUSH	DS
 22058                                  
 22059                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 22060 000036D5 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 22061 000036D9 E8B40E                  	call	DEVIOCALL2
 22062                                  
 22063 000036DC 8ED9                    	MOV	DS,CX		; Restore DS
 22064 000036DE 07                      	POP	ES		; Restore ES
 22065 000036DF 5B                      	POP	BX
 22066                                  
 22067                                  ;hkn; SS override
 22068 000036E0 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 22069 000036E5 5F                      	POP	DI
 22070 000036E6 29F9                    	SUB	CX,DI
 22071 000036E8 F7D9                    	NEG	CX		; Number of sectors not transferred
 22072                                  
 22073                                  ;hkn; SS override
 22074 000036EA 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 22075                                  	;test	ax,8000h
 22076                                  	; 17/12/2022
 22077                                  	;test	ah,80h
 22078 000036EE F6C480                  	test	ah,(STERR>>8)
 22079                                  	;test	AX,STERR
 22080 000036F1 C3                      	retn
 22081                                  
 22082                                  ;Break	<HardErrRW - map extended errors and call harderr>
 22083                                  ;---------------------------------------------------------------------------
 22084                                  ;
 22085                                  ; Procedure Name : HardErrRW
 22086                                  ;
 22087                                  ; Inputs:
 22088                                  ;	AX is error code from read or write
 22089                                  ;	Other registers set as per HARDERR
 22090                                  ; Function:
 22091                                  ;	Checks the error code for special extended
 22092                                  ;	errors and maps them if needed. Then invokes
 22093                                  ;	Harderr
 22094                                  ; Outputs:
 22095                                  ;	Of HARDERR
 22096                                  ; AX may be modified prior to call to HARDERR.
 22097                                  ; No other registers altered.
 22098                                  ;
 22099                                  ;---------------------------------------------------------------------------
 22100                                  
 22101                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22102                                  HARDERRRW:
 22103                                  	;cmp	al,0Fh
 22104 000036F2 3C0F                    	CMP	AL,error_I24_wrong_disk
 22105 000036F4 7512                    	JNZ	short DO_ERR				; Nothing to do
 22106                                  
 22107                                  	; MSDOS 3.3
 22108                                  	;push	ds
 22109                                  	;push	si
 22110                                  	;lds	si,[ss:CALLVIDRW]
 22111                                  	;mov	[ss:EXTERRPT+2], ds
 22112                                  	;mov	[ss:EXTERRPT], si
 22113                                  	;pop	si
 22114                                  	;pop	ds
 22115                                  
 22116                                  	; MSDOS 6.0
 22117 000036F6 50                      	push	ax
 22118 000036F7 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 22119 000036FB 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 22120 000036FF 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 22121 00003703 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 22122 00003707 58                      	pop	ax
 22123                                  DO_ERR:
 22124                                  	;;call	HARDERR
 22125                                  	;;retn
 22126                                  	; 16/12/2022
 22127                                  	; 10/06/2019
 22128 00003708 E9291B                  	jmp	HARDERR	
 22129                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22130                                  	;call	HARDERR
 22131                                  	;retn
 22132                                  
 22133                                  ; 24/07/2018 - Retro DOS v3.0
 22134                                  
 22135                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 22136                                  ;----------------------------------------------------------------------------
 22137                                  ;
 22138                                  ; Procedure Name : SETUP
 22139                                  ;
 22140                                  ; Inputs:
 22141                                  ;	ES:DI point to SFT (value also in THISSFT)
 22142                                  ;	DMAAdd contains transfer address
 22143                                  ;	CX = Byte count
 22144                                  ;	DS = DOSDATA
 22145                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 22146                                  ;		2nd of caller of caller.
 22147                                  ; Outputs:
 22148                                  ;	    CX = byte count
 22149                                  ;	    [THISDPB] = Base of drive parameters if file
 22150                                  ;		      = Pointer to device header if device or NET
 22151                                  ;	    ES:DI Points to SFT
 22152                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 22153                                  ;	    [TRANS] = 0 (No transfers yet)
 22154                                  ;	    BytPos = Byte position in file
 22155                                  ;
 22156                                  ;	The following fields are relevant to local files (not devices) only:
 22157                                  ;
 22158                                  ;	    SecPos = Position of first sector (local files only)
 22159                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 22160                                  ;	    [CLUSNUM] = First cluster (local files only)
 22161                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 22162                                  ;	    [THISDRV] = Physical unit number (local files only)
 22163                                  ;
 22164                                  ;      RETURNS ONE LEVEL UP WITH:
 22165                                  ;	   CX = 0
 22166                                  ;	   CARRY = Clear
 22167                                  ;	IF AN ERROR IS DETECTED
 22168                                  ; All other registers destroyed
 22169                                  ;----------------------------------------------------------------------------
 22170                                  
 22171                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 22172                                  
 22173                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 22174                                  
 22175                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22176                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 22177                                  
 22178                                  SETUP:
 22179                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 22180                                  
 22181                                  	;lds 	si,[es:di+7]
 22182 0000370B 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 22183                                  
 22184                                  ;hkn; SS override
 22185 0000370F 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 22186                                  
 22187                                  ;hkn; SS is DOSDATA
 22188 00003714 16                      	push	ss
 22189 00003715 1F                      	pop	ds
 22190                                  
 22191 00003716 8936[8A05]              	MOV	[THISDPB],SI
 22192                                  
 22193 0000371A 8B1E[2C03]              	MOV	BX,[DMAADD]
 22194 0000371E 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 22195 00003722 C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 22196                                  	;mov	ax,[es:di+15h]
 22197 00003727 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 22198                                  	;mov	dx,[es:di+17h]
 22199 0000372B 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 22200 0000372F 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 22201 00003733 A3[CE05]                	MOV	[BYTPOS],AX
 22202                                  	;test	word [es:di+5],8080h
 22203 00003736 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 22204 0000373C 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 22205 0000373E 06                      	PUSH	ES
 22206 0000373F C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 22207                                  
 22208                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22209                                  	;;mov	bl,[es:bp+0]
 22210                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 22211                                  	; 05/12/2022
 22212 00003743 268A5E00                	mov	bl,[es:bp]
 22213                                  	
 22214 00003747 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 22215                                  	;mov	bx,[es:bp+2]
 22216 0000374B 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 22217                                  
 22218                                  	;; MSDOS 3.3
 22219                                  	;cmp	dx,bx
 22220                                  	;jnb	short EOFERR
 22221                                  	;div	bx
 22222                                  	;mov	[SECPOS],ax
 22223                                  	;mov	[BYTSECPOS],dx
 22224                                  	;mov	dx,ax
 22225                                  	;;and	al,[es:bp+4]
 22226                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 22227                                  	;mov	[SECCLUSPOS],al
 22228                                  	;mov	ax,cx
 22229                                  	;;mov	cl,[es:bp+5]
 22230                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22231                                  	;shr	dx,cl
 22232                                  	;mov	[CLUSNUM],dx
 22233                                  	;pop	es
 22234                                  	;mov	cx,ax
 22235                                  
 22236                                  	; 04/05/2019 - Retro DOS v4.0
 22237                                  
 22238                                  	; MSDOS 6.0
 22239                                  ;M039: Optimized this section.
 22240 0000374F 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 22241 00003750 E81A05                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 22242 00003753 8916[CC05]              	MOV	[BYTSECPOS],DX
 22243 00003757 A3[C405]                	MOV	[SECPOS],AX
 22244 0000375A 890E[C605]              	MOV	[SECPOS+2],CX
 22245 0000375E 89CA                    	MOV	DX,CX
 22246                                  
 22247 00003760 89C3                    	MOV	BX,AX
 22248                                  	;and	bl,[es:bp+4]
 22249 00003762 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 22250 00003766 881E[7305]              	MOV	[SECCLUSPOS],BL
 22251                                  
 22252 0000376A E82705                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 22253 0000376D 59                      	POP	CX			;CX = byte count.
 22254 0000376E 751F                    	JNZ	short EOFERR		;cluster number above 64k
 22255                                  	;cmp	ax,[es:bp+0Dh]
 22256 00003770 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 22257 00003774 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 22258                                  
 22259 00003776 A3[BC05]                	MOV	[CLUSNUM],AX
 22260 00003779 07                      	POP	ES			; ES:DI point to SFT
 22261                                  ;M039
 22262                                  
 22263                                  NOSETSTUFF:
 22264 0000377A 89C8                    	MOV	AX,CX		; AX = Byte count.
 22265 0000377C 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 22266 00003780 730C                    	JNC	short setup_OK	; Must be less than 64
 22267 00003782 A1[2C03]                	MOV	AX,[DMAADD]
 22268 00003785 F7D8                    	NEG	AX		; Amount of room left in segment (know
 22269                                  				;    less than 64K since max value of CX
 22270                                  				;    is FFFF).
 22271 00003787 7501                    	JNZ	short NoDec
 22272 00003789 48                      	DEC	AX
 22273                                  NoDec:
 22274 0000378A 89C1                    	MOV	CX,AX		; Can do this much
 22275 0000378C E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 22276                                  setup_OK:
 22277 0000378E C3                      	retn
 22278                                  
 22279                                  EOFERR:
 22280 0000378F 07                      	POP	ES		; ES:DI point to SFT
 22281 00003790 31C9                    	XOR	CX,CX		; No bytes read
 22282                                  ;;;;;;;;;;; 7/18/86
 22283                                  	; MSDOS 3.3
 22284                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 22285                                  ;;;;;;;;;;;
 22286                                  NOROOM:
 22287 00003792 5B                      	POP	BX		; Kill return address
 22288 00003793 F8                      	CLC
 22289 00003794 C3                      	retn			; RETURN TO CALLER OF CALLER
 22290                                  
 22291                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 22292                                  ;---------------------------------------------------------------------------
 22293                                  ;
 22294                                  ; Procedure Name : BREAKDOWN
 22295                                  ;
 22296                                  ; Inputs:
 22297                                  ;	CX = Length of disk transfer in bytes
 22298                                  ;	ES:BP = Base of drive parameters
 22299                                  ;	[BYTSECPOS] = Byte position within first sector
 22300                                  ;	DS = DOSDATA
 22301                                  ; Outputs:
 22302                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 22303                                  ;	[SECCNT] = No. of whole sectors to transfer
 22304                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 22305                                  ; AX, BX, DX destroyed. No other registers affected.
 22306                                  ;---------------------------------------------------------------------------
 22307                                  
 22308                                  BREAKDOWN:
 22309 00003795 A1[CC05]                	MOV	AX,[BYTSECPOS]
 22310 00003798 89CB                    	MOV	BX,CX
 22311 0000379A 09C0                    	OR	AX,AX
 22312 0000379C 740E                    	JZ	short SAVFIR	; Partial first sector?
 22313                                  	;sub	ax,[es:bp+2]
 22314 0000379E 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 22315 000037A2 F7D8                    	NEG	AX		; Max number of bytes left in first sector
 22316 000037A4 29C3                    	SUB	BX,AX		; Subtract from total length
 22317 000037A6 7304                    	JAE	short SAVFIR
 22318 000037A8 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 22319 000037AA 31DB                    	XOR	BX,BX		; And no bytes are left
 22320                                  SAVFIR:
 22321 000037AC A3[D205]                	MOV	[BYTCNT1],AX
 22322 000037AF 89D8                    	MOV	AX,BX
 22323 000037B1 31D2                    	XOR	DX,DX
 22324                                  	;div	word [ES:BP+2]
 22325 000037B3 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 22326 000037B7 A3[D605]                	MOV	[SECCNT],AX
 22327 000037BA 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 22328                                  	; MSDOS 3.3
 22329                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 22330                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 22331                                  	;CMP	AX,1
 22332                                  	;retnz
 22333                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 22334                                  	;MOV	[BYTCNT2],AX
 22335                                  	;MOV	[SECCNT],DX	; DX = 0
 22336                                  _RET45:
 22337 000037BE C3                      	retn
 22338                                  
 22339                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 22340                                  
 22341                                  ;----------------------------------------------------------------------------
 22342                                  ;
 22343                                  ; Procedure Name : READ_LOCK_VIOLATION
 22344                                  ;
 22345                                  ; ES:DI points to SFT. This entry used by NET_READ
 22346                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 22347                                  ; Else do retrys.
 22348                                  ; ES:DI,DS,CX preserved
 22349                                  ;
 22350                                  ;----------------------------------------------------------------------------
 22351                                  
 22352                                  READ_LOCK_VIOLATION:
 22353 000037BF C606[7505]00            	MOV	byte [READOP],0
 22354                                  ERR_ON_CHECK:
 22355                                  	;;test	word [es:di+2],8000h
 22356                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 22357                                  	;JNZ	short HARD_ERR
 22358                                  
 22359                                  	; 04/05/2019
 22360                                  	;test	byte [es:di+3],80h
 22361 000037C4 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 22362 000037C9 7508                    	JNZ	short HARD_ERR
 22363                                  
 22364                                  	;PUSH	CX
 22365                                  	;;mov	cl,[es:di+2]
 22366                                  	;MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 22367                                  	;;and	cl,0F0h
 22368                                  	;AND	CL,SHARING_MASK
 22369                                  	;;cmp	cl,0
 22370                                  	;CMP	CL,SHARING_COMPAT
 22371                                  	;POP	CX
 22372                                  	;JNE	short NO_HARD_ERR
 22373                                  	; 21/09/2023
 22374 000037CB 268A4502                	mov	al,[ES:DI+SF_ENTRY.sf_mode]
 22375 000037CF 24F0                    	and	al,SHARING_MASK
 22376                                  	;cmp	al,SHARING_COMPAT
 22377                                  	;jne	short NO_HARD_ERR
 22378 000037D1 7505                    	jnz	short NO_HARD_ERR
 22379                                  HARD_ERR:
 22380 000037D3 E86C3A                  	call	LOCK_VIOLATION
 22381 000037D6 73E6                    	jnc	short _RET45		; User wants Retrys
 22382                                  NO_HARD_ERR:
 22383 000037D8 31C9                    	XOR	CX,CX			;No bytes transferred
 22384                                  	;mov	ax,21h
 22385 000037DA B82100                  	MOV	AX,error_lock_violation
 22386 000037DD F9                      	STC
 22387                                  RET3:		; 06/02/2024
 22388 000037DE C3                      	retn
 22389                                  
 22390                                  ;----------------------------------------------------------------------------
 22391                                  ;
 22392                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 22393                                  ;
 22394                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 22395                                  ; This entry used by NET_WRITE
 22396                                  ;
 22397                                  ;----------------------------------------------------------------------------
 22398                                  
 22399                                  WRITE_LOCK_VIOLATION:
 22400 000037DF C606[7505]01            	MOV	byte [READOP],1
 22401 000037E4 EBDE                    	JMP	short ERR_ON_CHECK
 22402                                  
 22403                                  ; 04/05/2019 - Retro DOS v4.0
 22404                                  
 22405                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 22406                                  
 22407                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 22408                                  ;----------------------------------------------------------------------------
 22409                                  ;
 22410                                  ; Procedure Name : DISKREAD
 22411                                  ;
 22412                                  ; Inputs:
 22413                                  ;	Outputs of SETUP
 22414                                  ; Function:
 22415                                  ;	Perform disk read
 22416                                  ; Outputs:
 22417                                  ;    Carry clear
 22418                                  ;	CX = No. of bytes read
 22419                                  ;	ES:DI point to SFT
 22420                                  ;	SFT offset and cluster pointers updated
 22421                                  ;    Carry set
 22422                                  ;	CX = 0
 22423                                  ;	ES:DI point to SFT
 22424                                  ;	AX has error code
 22425                                  ;----------------------------------------------------------------------------
 22426                                  
 22427                                  ;hkn; called from disk.asm. DS already set up.
 22428                                  
 22429                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22430                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 22431                                  
 22432                                  DISKREAD:
 22433                                  	;mov	ax,[es:di+11h]
 22434 000037E6 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 22435                                  	;mov	bx,[es:di+13h]
 22436 000037EA 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 22437 000037EE 2B06[CE05]              	SUB	AX,[BYTPOS]
 22438 000037F2 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 22439 000037F6 721F                    	JB	short RDERR		;Read starts past EOF
 22440 000037F8 750A                    	JNZ	short ENUF		;More than 64k to EOF
 22441 000037FA 09C0                    	OR	AX,AX
 22442 000037FC 7419                    	JZ	short RDERR		;Read starts at EOF
 22443 000037FE 39C8                    	CMP	AX,CX
 22444 00003800 7302                    	JAE	short ENUF		;I/O fits
 22445 00003802 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 22446                                  ENUF:
 22447                                  	; MSDOS 3.3
 22448                                  	;test	byte [es:di+4],8
 22449                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22450                                  	;jnz	short SET_ACC_ERR
 22451                                  	;call	LOCK_CHECK
 22452                                  	;jnb	short _READ_OK
 22453                                  	;call	READ_LOCK_VIOLATION
 22454                                  	;jnb	short ENUF
 22455                                  	;retn
 22456                                  
 22457                                  	; MSDOS 6.0
 22458 00003804 E881FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 22459                                  	;JNC	short _READ_OK 		; There are no locks
 22460                                  	;retn
 22461                                  	; 06/02/2024
 22462 00003807 72D5                    	jc	short RET3
 22463                                  
 22464                                  _READ_OK:
 22465 00003809 C42E[8A05]              	LES	BP,[THISDPB]
 22466 0000380D E885FF                  	CALL	BREAKDOWN
 22467                                  
 22468                                  ; 10/02/2024
 22469                                  %if 0
 22470                                  	MOV	CX,[CLUSNUM] ; *
 22471                                  	call	FNDCLUS
 22472                                       	; MSDOS 6.0			;M022 conditional removed here
 22473                                  	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 22474                                  					; migrated from 330a - HKN
 22475                                  %else
 22476                                  	; 10/02/2024 - Retro DOS v4.1
 22477 00003810 E86713                  	call	FNDCLUS_X ; *
 22478 00003813 720E                    	jc	short SET_ACC_ERR ; ds=ss
 22479                                  %endif
 22480                                  	;OR	CX,CX
 22481                                  	;JZ	short SKIPERR
 22482                                  	; 06/02/2024
 22483 00003815 E313                    	jcxz	SKIPERR
 22484                                  
 22485                                  RDERR:
 22486 00003817 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 22487 00003819 E91802                  	jmp	WRTERR22
 22488                                  
 22489                                  ;RDLASTJ: 
 22490                                  	;JMP	RDLAST                  ;M039
 22491                                  
 22492                                  SETSFTJ2: 
 22493 0000381C E99600                  	JMP	SETSFT
 22494                                  
 22495                                  CANOT_READ:
 22496                                  	; MSDOS 3.3
 22497                                  	;POP	CX		;M039.
 22498                                  	; MSDOS 3.3 & MSDOS 6.0
 22499 0000381F 59                      	POP	CX              ;Clean stack.
 22500 00003820 5B                      	POP	BX
 22501                                  
 22502                                  	;entry	SET_ACC_ERR_DS
 22503                                  SET_ACC_ERR_DS:
 22504                                  
 22505                                  ;hkn; SS is DOSDATA
 22506                                  	;Context DS
 22507 00003821 16                      	push	ss
 22508 00003822 1F                      	pop	ds
 22509                                  
 22510                                  	;entry	SET_ACC_ERR
 22511                                  SET_ACC_ERR:
 22512 00003823 31C9                    	XOR	CX,CX
 22513                                  	;mov	ax,5
 22514 00003825 B80500                  	MOV	AX,error_access_denied
 22515 00003828 F9                      	STC
 22516 00003829 C3                      	retn
 22517                                  
 22518                                  SKIPERR:
 22519 0000382A 8916[BA05]              	MOV	[LASTPOS],DX
 22520 0000382E 891E[BC05]              	MOV	[CLUSNUM],BX
 22521 00003832 833E[D205]00            	CMP	word [BYTCNT1],0
 22522 00003837 7405                    	JZ	short RDMID
 22523                                  
 22524 00003839 E8B813                  	call	BUFRD
 22525                                  	;JC	short SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 22526                                  	; 10/02/2024
 22527                                  	; ds=ss
 22528 0000383C 72E5                    	jc	short SET_ACC_ERR
 22529                                  
 22530                                  RDMID:
 22531 0000383E 833E[D605]00            	CMP	word [SECCNT],0
 22532                                  	;JZ	RDLAST ; 10/08/2018
 22533 00003843 7453                    	jz	short RDLAST
 22534                                  
 22535 00003845 E84014                  	call	NEXTSEC
 22536 00003848 72D2                    	JC	short SETSFTJ2
 22537                                  
 22538 0000384A C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 22539                                  ONSEC:
 22540 0000384F 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 22541 00003853 8B0E[D605]              	MOV	CX,[SECCNT]
 22542 00003857 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 22543                                  RDLP:
 22544 0000385B E85B14                  	call	OPTIMIZE
 22545                                  	;JC	short SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 22546                                  	; 10/02/2024
 22547                                  	; ds=ss
 22548 0000385E 72C3                    	jc	short SET_ACC_ERR
 22549                                  
 22550 00003860 57                      	PUSH	DI                      ;DI = Next physical cluster.
 22551 00003861 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 22552 00003862 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 22553                                  	;mov	byte [ALLOWED],38h
 22554 00003863 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22555 00003868 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 22556                                  
 22557 0000386C 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 22558 0000386D 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 22559                                  
 22560                                  	; 04/05/2019 - Retro DOS v4.0
 22561                                  
 22562                                  	; MSDOS 6.0
 22563 0000386E E8FE21                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 22564                                  
 22565                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22566 00003871 E8DBFD                  	call	DREAD
 22567                                  
 22568                                  	; 10/02/2024
 22569                                  	; ds<>ss
 22570                                  
 22571                                  	; MSDOS 3.3 
 22572                                  	;pop	bx
 22573                                  	;pop	dx
 22574                                  	;jc	short CANOT_READ
 22575                                  	;add	bx,dx	; (bx = Extent end)
 22576                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 22577                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 22578                                  	;call	SETVISIT
 22579                                  	; ->***
 22580                                  ;M039
 22581                                  	; MSDOS 6.0 
 22582 00003874 59                      	pop	cx
 22583 00003875 5A                      	pop	dx
 22584 00003876 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 22585 0000387B 72A2                    	jc	short CANOT_READ
 22586                                  
 22587 0000387D 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 22588                                  
 22589                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22590                                  ;            sectors, also termed an "Extent".)
 22591                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22592                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22593                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22594                                  ;
 22595                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 22596                                  ;	buffers must be "read" into the transfer memory block, so that the
 22597                                  ;       transfer memory reflects the most recent data.
 22598                                  
 22599 00003882 E85E00                  	call	DskRdBufScan
 22600                                  
 22601                                  	;Context DS
 22602 00003885 16                      	push	ss
 22603 00003886 1F                      	pop	ds
 22604                                          
 22605 00003887 59                      	pop	cx
 22606 00003888 5B                              pop	bx
 22607                                  
 22608                                  ;       CX = # of sector remaining.
 22609                                  ;       BX = Next physical cluster.
 22610                                  
 22611                                  ;M039
 22612                                  
 22613                                  ;;;;;;;;
 22614                                  ;	; 25/07/2018 - Retro DOS v3.0
 22615                                  ;	; ***->
 22616                                  ;	; MSDOS 3.3
 22617                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 22618                                  ;bufq:
 22619                                  ;;	DX = Extent start.
 22620                                  ;;	BX = Extent end.
 22621                                  ;;	 AL = Drive #.
 22622                                  ;;     DS:DI-> 1st buffer in queue.
 22623                                  ;
 22624                                  ;	;or	byte [di+5],20h
 22625                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22626                                  ;	;cmp	al,[di+4]	
 22627                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 22628                                  ;	jnz	short bufq3
 22629                                  ;	;cmp	[di+6],dx
 22630                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 22631                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 22632                                  ;	;cmp	[di+6],bx
 22633                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 22634                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 22635                                  ;	
 22636                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 22637                                  ;
 22638                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 22639                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 22640                                  ;;      as MRU (Most Recently Used).
 22641                                  ;
 22642                                  ;	;test	byte [di+5],40h
 22643                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 22644                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 22645                                  ;	pop	ax ; transfer address
 22646                                  ;	push	ax
 22647                                  ;	push	di
 22648                                  ;	push	dx
 22649                                  ;	;sub	dx,[di+6]
 22650                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 22651                                  ;	neg	dx
 22652                                  ;
 22653                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 22654                                  ;;           block.
 22655                                  ;
 22656                                  ;	mov	si,di
 22657                                  ;	mov	di,ax
 22658                                  ;	mov	ax,dx
 22659                                  ;	;mov	cx,[es:bp+6]	
 22660                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 22661                                  ;	mul	cx
 22662                                  ;	add	di,ax
 22663                                  ;
 22664                                  ;	lea	si,[si+16]
 22665                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 22666                                  ;	shr	cx,1
 22667                                  ;	push	es
 22668                                  ;	mov	es,[SS:DMAADD+2]
 22669                                  ;
 22670                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22671                                  ;;      DS:SI-> Buffer sector data.
 22672                                  ;;      ES:DI-> Destination within Transfer memory block.
 22673                                  ;
 22674                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 22675                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22676                                  ;	;rep	movsb                   ;Copy last byte.
 22677                                  ;	jnc	short bufq1
 22678                                  ;	movsb
 22679                                  ;bufq1:
 22680                                  ;	pop	es
 22681                                  ;	pop	dx
 22682                                  ;	pop	di
 22683                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 22684                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 22685                                  ;bufq2:
 22686                                  ;	call	SCANPLACE
 22687                                  ;bufq3:
 22688                                  ;	call	SKIPVISIT
 22689                                  ;	jnz	short bufq
 22690                                  ;	
 22691                                  ;	push	ss
 22692                                  ;	pop	ds
 22693                                  ;	pop	cx
 22694                                  ;	pop	cx
 22695                                  ;	pop	bx	
 22696                                  ;bufq4:
 22697                                  ;;;;;;;
 22698 00003889 E30D                    	JCXZ	RDLAST
 22699                                  
 22700 0000388B E8C91B                  	call	IsEOF			; test for eof on fat size
 22701 0000388E 7325                    	JAE	short SETSFT
 22702                                  
 22703 00003890 B200                    	MOV	DL,0
 22704 00003892 FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 22705 00003896 EBC3                    	JMP	short RDLP ; 19/05/2019
 22706                                  
 22707                                  RDLAST:
 22708 00003898 A1[D405]                	MOV	AX,[BYTCNT2]
 22709 0000389B 09C0                    	OR	AX,AX
 22710 0000389D 7416                    	JZ	short SETSFT
 22711 0000389F A3[D205]                	MOV	[BYTCNT1],AX
 22712                                  
 22713 000038A2 E8E313                  	call	NEXTSEC
 22714 000038A5 720E                    	JC	short SETSFT
 22715                                  
 22716 000038A7 C706[CC05]0000          	MOV	word [BYTSECPOS],0
 22717 000038AD E84413                  	call	BUFRD
 22718                                  	; 10/08/2018
 22719 000038B0 7303                    	JNC	short SETSFT
 22720                                  	;JMP	SET_ACC_ERR_DS
 22721                                  	; 10/02/2024
 22722                                  	; ds=ss
 22723 000038B2 E96EFF                  	jmp	SET_ACC_ERR
 22724                                  
 22725                                  ;------------------------------------------------------------------------------
 22726                                  ;
 22727                                  ; Procedure Name : SETSFT
 22728                                  ; Inputs:
 22729                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 22730                                  ;		and set cluster fields
 22731                                  ; Function:
 22732                                  ;	Update [THISSFT] based on the transfer
 22733                                  ; Outputs:
 22734                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 22735                                  ;	ES:DI points to [THISSFT]
 22736                                  ;	CX No. of bytes transferred
 22737                                  ;	Carry clear
 22738                                  ;
 22739                                  ;----------------------------------------------------------------------------
 22740                                  
 22741                                  	;entry	SETSFT
 22742                                  
 22743                                  ; 26/07/2018 - Retro DOS v3.0
 22744                                  SETSFT:
 22745 000038B5 C43E[9E05]              	LES	DI,[THISSFT]
 22746                                  
 22747                                  ; Same as SETSFT except ES:DI already points to SFT
 22748                                  	;entry	SETCLUS
 22749                                  SETCLUS:	
 22750 000038B9 8B0E[B805]              	MOV	CX,[NEXTADD]
 22751 000038BD 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22752                                  	;;test	word [es:di+5],80h
 22753                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22754                                  	;JNZ	short ADDREC		; don't set clusters if device
 22755                                  
 22756                                  	; 04/05/2019 - Retro DOS v4.0
 22757                                  	;test	byte [es:di+5],80h
 22758 000038C1 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22759 000038C6 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22760                                  
 22761 000038C8 A1[BC05]                	MOV	AX,[CLUSNUM]
 22762                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22763                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22764 000038CB 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22765 000038CF A1[BA05]                	MOV	AX,[LASTPOS]
 22766                                  	;mov	[es:di+19h],ax
 22767 000038D2 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22768                                  
 22769                                  ;----------------------------------------------------------------------------
 22770                                  ;
 22771                                  ; Procedure : AddRec
 22772                                  ; Inputs:
 22773                                  ;	ES:DI points to SFT
 22774                                  ;	CX is No. Bytes transferred
 22775                                  ; Function:
 22776                                  ;	Update the SFT offset based on the transfer
 22777                                  ; Outputs:
 22778                                  ;	sf_position updated to point to first byte after transfer
 22779                                  ;	ES:DI points to SFT
 22780                                  ;	CX No. of bytes transferred
 22781                                  ;	Carry clear
 22782                                  ;----------------------------------------------------------------------------
 22783                                  
 22784                                  	;entry	AddRec
 22785                                  ADDREC:
 22786 000038D6 E309                    	JCXZ	RET28		; If no records read,  don't change position
 22787                                  	;add	[es:di+15h],cx
 22788 000038D8 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22789                                  	;adc	word [es:di+17h], 0
 22790 000038DC 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22791                                  RET28:	
 22792 000038E1 F8                      	CLC
 22793 000038E2 C3                      	retn
 22794                                  
 22795                                  ; 25/07/2018
 22796                                  ; MSDOS 6.0
 22797                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22798                                  ;----------------------------------------------------------------------------
 22799                                  ;
 22800                                  ; Procedure Name : DskRdBufScan
 22801                                  ;
 22802                                  ; Inputs:
 22803                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22804                                  ;            sectors, also termed an "Extent".)
 22805                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22806                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22807                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22808                                  ;
 22809                                  ; Function:
 22810                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22811                                  ;	"read" into the transfer memory block, so that the transfer memory
 22812                                  ;	reflects the most recent data.
 22813                                  ;
 22814                                  ; Outputs:
 22815                                  ;       Transfer memory updated as required.
 22816                                  ;
 22817                                  ; Uses:
 22818                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22819                                  ;       SS override for all global variables.
 22820                                  ;
 22821                                  ; Notes:
 22822                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22823                                  ;	than the FIRST.
 22824                                  ;----------------------------------------------------------------------------
 22825                                  ;M039: Created
 22826                                  
 22827                                  ; 04/05/2019 - Retro DOS v4.0
 22828                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22829                                  
 22830                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22831                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22832                                  
 22833                                  ;procedure DskRdBufScan,NEAR
 22834                                  ;
 22835                                  ;ASSUME  DS:NOTHING
 22836                                  
 22837                                  DskRdBufScan:
 22838 000038E3 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22839 000038E9 743C                    	je	short bufx		     ; -no, skip all work.
 22840                                  
 22841 000038EB 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22842 000038F0 89DE                    	mov     si,bx
 22843 000038F2 01D1                    	add     cx,dx
 22844 000038F4 83D600                  	adc     si,0
 22845                                  
 22846 000038F7 E80D1F                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22847                                  	;mov	ax,[di+2]
 22848 000038FA 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22849 000038FD 36A3[BB0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22850                                  		
 22851                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22852                                  	;;mov	al,[es:bp+0]
 22853                                  	;mov	al,[es:bp+DPB.DRIVE]
 22854                                  	; 15/12/2022
 22855 00003901 268A4600                	mov	al,[es:bp]
 22856                                  
 22857                                  ;       BX:DX = Extent start.
 22858                                  ;       SI:CX = Extent end + 1.
 22859                                  ;          AL = Drive #.
 22860                                  ;       DS:DI-> 1st buffer in queue.
 22861                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22862                                  
 22863                                  bufq:	
 22864                                  	;cmp	al,[di+4]
 22865 00003905 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22866 00003908 7514                    	jne	short bufq1        	;  -no, jump.
 22867                                  
 22868                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22869                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22870                                  
 22871                                  	;cmp	bx,[di+8]
 22872 0000390A 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22873 0000390D 7503                    	jne	short bufq01
 22874                                  	;cmp	dx,[di+6]
 22875 0000390F 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22876                                  bufq01:
 22877 00003912 770A                    	ja	short bufq1
 22878                                  
 22879                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22880                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22881                                  
 22882                                  	;cmp	si,[di+8]
 22883 00003914 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22884 00003917 7503                    	jne	short bufq02
 22885                                  	;cmp	cx,[di+6]
 22886 00003919 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22887                                  bufq02:
 22888 0000391C 770A                    	ja	short bufq2
 22889                                  bufq1:	
 22890 0000391E 363B3E[BB0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22891 00003923 8B3D                    	mov	di,[di]
 22892                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22893 00003925 75DE                    	jne	short bufq		; -no, do next buffer
 22894                                  bufx:
 22895 00003927 C3                      	retn				;Exit.
 22896                                  
 22897                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22898                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22899                                  ;       as MRU (Most Recently Used).
 22900                                  
 22901                                  bufq2:	
 22902 00003928 50                      	push	ax
 22903                                  	;test	byte [di+5],40h
 22904 00003929 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22905 0000392D 7428                    	jz	short bufq3                    ; -no, jump.
 22906                                  
 22907                                  ;       SaveReg <cx,dx,si,di,es>
 22908 0000392F 51                      	push	cx
 22909 00003930 52                      	push	dx
 22910 00003931 56                      	push	si
 22911 00003932 57                      	push	di
 22912 00003933 06                      	push	es
 22913                                  
 22914 00003934 89D0                    	mov     ax,dx
 22915                                  	;sub	ax,[di+6]
 22916 00003936 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22917 00003939 F7D8                    	neg	ax
 22918                                  
 22919                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22920                                  ;            block. (Note: the upper word of the sector # may be ignored
 22921                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22922                                  ;            is imposed by the input parameters of the disk read operation.)
 22923                                  
 22924                                  	;lea	si,[di+20]
 22925 0000393B 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22926                                  	;mov	cx,[es:bp+2]
 22927 0000393E 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22928 00003942 F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22929                                  	;mov	di,[ss:TEMP_VAR]
 22930                                  	; 09/02/2024
 22931 00003944 36C43E[0C06]            	les	di,[ss:TEMP_VAR]
 22932 00003949 01C7                    	add	di,ax
 22933                                  	;mov	es,[ss:TEMP_VAR2]
 22934 0000394B D1E9                    	shr	cx,1
 22935                                  
 22936                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22937                                  ;       DS:SI-> Buffer sector data.
 22938                                  ;       ES:DI-> Destination within Transfer memory block.
 22939                                  
 22940 0000394D F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22941                                  	;; 04/05/2019
 22942                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22943                                  	;;rep	movsb                   ;Copy last byte.
 22944                                  	;jnc	short bufq03	
 22945                                  	;movsb
 22946                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22947                                  	;adc	cx,0
 22948                                  	;rep	movsb
 22949                                  	; 22/09/2023
 22950 0000394F 7301                    	jnc	short bufq03
 22951 00003951 A4                      	movsb
 22952                                  bufq03:
 22953                                  	;RestoreReg <es,di,si,dx,cx>
 22954 00003952 07                      	pop	es
 22955 00003953 5F                      	pop	di
 22956 00003954 5E                      	pop	si
 22957 00003955 5A                      	pop	dx
 22958 00003956 59                      	pop	cx
 22959                                  
 22960                                  ;       DS:DI -> current buffer.
 22961                                  bufq3:	
 22962 00003957 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 22963                                          ;invoke SCANPLACE
 22964 00003959 E8BD1E                  	call	SCANPLACE
 22965 0000395C 363B06[BB0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 22966 00003961 58                      	pop	ax
 22967                                  	;jne	short bufq		; -no, jump.
 22968                                  	;;jmp	short bufx		; -yes, exit.
 22969                                  	;; 12/06/2019
 22970                                  	;retn
 22971                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22972 00003962 75A1                    	jne	short bufq
 22973                                  	;jmp	short bufx
 22974                                  	; 09/02/2024
 22975 00003964 C3                      	retn	; Exit
 22976                                  
 22977                                  ;EndProc DskRdBufScan
 22978                                  
 22979                                  ;============================================================================
 22980                                  ; DISK3.ASM, MSDOS 6.0, 1991
 22981                                  ;============================================================================
 22982                                  ; 04/05/2019 - Retro DOS v4.0
 22983                                  ; 24/07/2018 - Retro DOS v3.0
 22984                                  
 22985                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 22986                                  ;----------------------------------------------------------------------------
 22987                                  ;
 22988                                  ; Procedure Name : DISKWRITE
 22989                                  ;
 22990                                  ; Inputs:
 22991                                  ;       Outputs of SETUP
 22992                                  ; Function:
 22993                                  ;       Perform disk write
 22994                                  ; Outputs:
 22995                                  ;    Carry clear
 22996                                  ;       CX = No. of bytes written
 22997                                  ;       ES:DI point to SFT
 22998                                  ;       SFT offset and cluster pointers updated
 22999                                  ;    Carry set
 23000                                  ;       CX = 0
 23001                                  ;       ES:DI point to SFT
 23002                                  ;       AX has error code
 23003                                  ;----------------------------------------------------------------------------
 23004                                  
 23005                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 23006                                  
 23007                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 23008                                  
 23009                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23010                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 23011                                  
 23012                                  DISKWRITE:
 23013                                  	; MSDOS 3.3
 23014                                  	; IBMDOS.COM - Offset 436Dh
 23015                                  	;;test	byte [es:di+4],8
 23016                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 23017                                  	;jz	short write_cont
 23018                                  	;jmp	SET_ACC_ERR_DS
 23019                                  ;write_cont:
 23020                                  	;push	cx
 23021                                  	;or	cx,cx
 23022                                  	;jnz	short Not_Truncate
 23023                                  	;;mov	cx,-1
 23024                                  	;dec	cx
 23025                                  ;Not_Truncate:
 23026                                  	;call	LOCK_CHECK
 23027                                  	;pop	cx
 23028                                  	;jnb	short _WRITE_OK
 23029                                  	;call	WRITE_LOCK_VIOLATION
 23030                                  	;jnb	short DISKWRITE
 23031                                  	;retn
 23032                                  
 23033                                  	; MSDOS 6.0
 23034 00003965 E802FD                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 23035                                  	; 19/08/2018
 23036 00003968 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 23037 0000396A C3                      	retn
 23038                                  
 23039                                  WRTEOFJ:
 23040 0000396B E9D101                  	JMP     WRTEOF
 23041                                  
 23042                                  _WRITE_OK:
 23043                                   	; 27/07/2018
 23044                                  	; IBMDOS.COM - Offset 438Eh
 23045                                  	
 23046                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23047                                  	;and	word [es:di+5],0BFBFh
 23048 0000396E 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 23049                                  				; Mark file as dirty, clear no date on close
 23050                                  ; 10/02/2024
 23051                                  %if 0
 23052                                  	; 04/05/2019 - Retro DOS v4.0
 23053                                  
 23054                                  	; MSDOS 6.0
 23055                                  	;mov 	ax,[es:di+11h]
 23056                                  	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 23057                                          MOV	[TEMP_VAR],AX                           ;M039
 23058                                  	;mov	ax,[es:di+13h]
 23059                                  	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 23060                                          MOV	[TEMP_VAR2],AX                          ;M039
 23061                                  %else
 23062                                  	; 10/02/2024 (PCDOS 7.1 IBMDOS COM)
 23063                                  	;les	ax,[es:di+11h]
 23064 00003974 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size]
 23065 00003978 8C06[0E06]              	mov	[TEMP_VAR2],es
 23066 0000397C A3[0C06]                	mov	[TEMP_VAR],ax
 23067                                  %endif
 23068                                  
 23069                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 23070                                  
 23071                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23072 0000397F C42E[8A05]              	LES     BP,[THISDPB]
 23073                                  
 23074 00003983 E80FFE                  	call	BREAKDOWN
 23075                                  
 23076 00003986 A1[CE05]                	MOV     AX,[BYTPOS]
 23077 00003989 8B16[D005]              	MOV     DX,[BYTPOS+2]
 23078 0000398D E3DC                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 23079 0000398F 01C8                    	ADD     AX,CX
 23080 00003991 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 23081                                  
 23082                                  	;mov	bx,[es:bp+2]
 23083 00003994 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 23084                                  
 23085                                  	; MSDOS 3.3
 23086                                  	;cmp	dx,bx
 23087                                  	;jnb	short WRTERR33
 23088                                  	;div	bx
 23089                                  	;mov	bx,ax
 23090                                  	;OR	DX,DX
 23091                                  	;JNZ	short CALCLUS
 23092                                  	;dec	ax
 23093                                  ;CALCLUS:
 23094                                  	; MSDOS 3.3
 23095                                  	;mov	cl,[es:bp+5]
 23096                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 23097                                  	;shr	ax,cl
 23098                                  	;push	ax
 23099                                  	;push	dx
 23100                                  	;push	es
 23101                                  	;les	di,[THISSFT]
 23102                                  	;;mov	ax,[es:di+11h]
 23103                                  	;;mov	dx,[es:di+13h]
 23104                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 23105                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 23106                                  	;pop	es
 23107                                  	;;DX:AX = current file size (in bytes).
 23108                                  	;;div	word [es:bp+2]
 23109                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23110                                  	;mov	cx,ax
 23111                                  	;or	dx,dx
 23112                                  	;jz	short NORND
 23113                                  	;inc	ax
 23114                                  ;NORND:
 23115                                  	; MSDOS 6.0
 23116 00003998 E8D202                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 23117 0000399B 89C6                    	MOV	SI,AX
 23118 0000399D 890E[0706]                      MOV	[HIGH_SECTOR],CX
 23119                                  
 23120                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 23121                                  
 23122 000039A1 09D2                    	OR	DX,DX
 23123 000039A3 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 23124 000039A4 89CA                    	MOV	DX,CX			;M039
 23125 000039A6 7506                    	JNZ	short CALCLUS
 23126 000039A8 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 23127 000039AB 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 23128                                  
 23129                                  CALCLUS:
 23130                                  	; MSDOS 6.0
 23131 000039AE E8E302                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 23132 000039B1 5A                      	POP	DX
 23133                                  
 23134                                  ;       AX = Last cluster to write.
 23135                                  ;       DX = # of bytes in last sector to write (the "tail").
 23136                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 23137                                  
 23138 000039B2 50                      	PUSH	AX
 23139 000039B3 52                      	PUSH	DX
 23140                                  ;M039
 23141 000039B4 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 23142 000039B8 A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 23143 000039BB E8AF02                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 23144 000039BE 890E[0E06]              	mov	[TEMP_VAR2],cx
 23145 000039C2 890E[CA05]              	mov	[VALSEC+2],cx
 23146 000039C6 89C1                    	mov	cx,ax
 23147 000039C8 89F3                    	mov	bx,si
 23148                                  
 23149                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 23150                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 23151                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 23152                                  ;                     DX = # of bytes in last sector of current file.
 23153                                  ;M039
 23154 000039CA 09D2                    	OR	DX,DX
 23155 000039CC 7407                    	JZ	short NORND
 23156                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 23157                                  	;ADC	word [VALSEC+2],0
 23158                                  	; 22/09/2023
 23159 000039CE 40                      	inc	ax  ; 0FFFFh -> 0
 23160 000039CF 7504                    	jnz	short NORND
 23161 000039D1 FF06[CA05]              	inc	word [VALSEC+2]
 23162                                  NORND:		
 23163                                  	; MSDOS 3.3 & MSDOS 6.0
 23164 000039D5 A3[C805]                	MOV     [VALSEC],AX
 23165                                  
 23166                                  ;       [VALSEC] = Last sector of current file.
 23167                                  
 23168 000039D8 31C0                    	XOR     AX,AX
 23169 000039DA A3[DE05]                	MOV     [GROWCNT],AX
 23170 000039DD A3[E005]                	MOV     [GROWCNT+2],AX
 23171 000039E0 58                      	POP     AX
 23172                                  
 23173                                  	; MSDOS 6.0
 23174 000039E1 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 23175 000039E5 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 23176 000039E9 7263                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 23177 000039EB 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 23178 000039ED 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 23179 000039EF 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 23180 000039F3 EB08                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 23181                                  lowsec:
 23182                                  	;MOV	DI,0			;F.C. >32mb
 23183                                  	; 22/09/2023
 23184 000039F5 31FF                    	xor	di,di
 23185                                  	; MSDOS 3.3 & MSDOS 6.0
 23186 000039F7 29CB                    	SUB	BX,CX			; Number of full sectors
 23187 000039F9 7253                    	JB	short NOGROW
 23188 000039FB 7444                    	JZ	short TESTTAIL
 23189                                  yesgrow:
 23190                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23191 000039FD 89D1                    	MOV     CX,DX
 23192 000039FF 93                      	XCHG    AX,BX
 23193                                  	;mul	word [es:bp+2]
 23194 00003A00 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 23195                                  	
 23196                                  	; MSDOS 6.0
 23197 00003A04 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb save dx		;AN000;
 23198 00003A08 A3[0E06]                	MOV	[TEMP_VAR2],AX		;M039; F.C. >32mb save ax	;AN000;
 23199 00003A0B 89F8                    	MOV	AX,DI			;F.C. >32mb			;AN000;
 23200                                  	;mul	word [es:bp+2]
 23201 00003A0D 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 23202                                  	
 23203 00003A11 0306[0706]              	ADD	AX,[HIGH_SECTOR]	;F.C. >32mb add lower value	;AN000;
 23204 00003A15 89C2                    	MOV	DX,AX			;F.C. >32mb DX:AX is the result of ;AN000;
 23205 00003A17 A1[0E06]                	MOV	AX,[TEMP_VAR2]		;M039; F.C. >32mb a 32 bit multiply ;AN000;
 23206                                  
 23207                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23208 00003A1A 29C8                    	SUB     AX,CX			; Take off current "tail"
 23209 00003A1C 83DA00                  	SBB     DX,0			; 32-bit extension
 23210 00003A1F 01D8                    	ADD     AX,BX			; Add on new "tail"
 23211 00003A21 83D200                  	ADC     DX,0			; ripple tim's head off
 23212 00003A24 EB21                    	JMP     SHORT SETGRW
 23213                                  
 23214                                  HAVSTART:
 23215                                  	;int 3
 23216 00003A26 89C1                    	MOV     CX,AX
 23217 00003A28 E87311                  	call	SKPCLP
 23218                                  	;JCXZ	DOWRTJ
 23219                                  	; 16/12/2022
 23220 00003A2B E353                    	jcxz	DOWRT
 23221                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23222                                  	;jcxz	DOWRTJ
 23223                                  
 23224 00003A2D E81413                  	call	ALLOCATE
 23225                                  	;JNC	short DOWRTJ
 23226                                  	; 16/12/2022
 23227 00003A30 734E                    	jnc	short DOWRT
 23228                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23229                                  	;jnc	short DOWRTJ
 23230                                  
 23231                                  	;entry   WRTERR
 23232                                  WRTERR:
 23233 00003A32 B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort	;AN000;
 23234                                  
 23235                                  	;entry WRTERR22
 23236                                  WRTERR22:
 23237 00003A34 A0[7605]                	MOV     AL,[THISDRV]		;MS.				;AN000;
 23238                                  
 23239                                  	; 27/07/2018
 23240                                  WRTERR33:
 23241                                  	;MOV	CX,0			;No bytes transferred
 23242 00003A37 31C9                    	XOR     CX,CX
 23243                                  
 23244 00003A39 C43E[9E05]              	LES     DI,[THISSFT]
 23245                                  	;CLC ; 19/05/2019
 23246                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23247                                  	; 16/12/2022
 23248                                  	;clc
 23249 00003A3D C3                      	retn
 23250                                  
 23251                                  	; 16/12/2022
 23252                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23253                                  ;DOWRTJ:
 23254                                  	;JMP	short DOWRT
 23255                                  
 23256                                  ACC_ERRWJ:
 23257                                  	; 10/08/2018
 23258                                  	;JMP	SET_ACC_ERRW
 23259                                  	; 16/12/2022
 23260                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 23261                                  	; 10/02/2024
 23262                                  	; ds=ss
 23263 00003A3E E9E2FD                  	jmp	SET_ACC_ERR
 23264                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23265                                  	;;jmp	SET_ACC_ERRW	
 23266                                  
 23267                                  TESTTAIL:
 23268 00003A41 29D0                    	SUB     AX,DX
 23269 00003A43 7609                    	JBE	short NOGROW
 23270 00003A45 31D2                    	XOR     DX,DX
 23271                                  SETGRW:
 23272 00003A47 A3[DE05]                	MOV	[GROWCNT],AX
 23273 00003A4A 8916[E005]              	MOV	[GROWCNT+2],DX
 23274                                  NOGROW:
 23275 00003A4E 58                      	POP     AX
 23276                                  
 23277                                  ; 10/02/2024
 23278                                  %if 0
 23279                                  	MOV     CX,[CLUSNUM] ; *+ ; First cluster accessed
 23280                                  	call	FNDCLUS
 23281                                  %else
 23282                                  	; 10/02/2024 - Retro DOS v4.1
 23283 00003A4F E82811                  	call	FNDCLUS_X ; *+
 23284                                  %endif
 23285 00003A52 72EA                    	JC	short ACC_ERRWJ ; ds=ss ; 10/02/2024
 23286                                  
 23287 00003A54 891E[BC05]              	MOV     [CLUSNUM],BX
 23288 00003A58 8916[BA05]              	MOV     [LASTPOS],DX
 23289                                  
 23290 00003A5C 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 23291 00003A5E 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 23292 00003A60 E3C4                    	JCXZ    HAVSTART        ; See if no more data
 23293 00003A62 51                      	PUSH    CX              ; No. of clusters short of first
 23294 00003A63 89C1                    	MOV     CX,AX
 23295 00003A65 E8DC12                  	call	ALLOCATE
 23296 00003A68 59                      	POP     CX
 23297 00003A69 72C7                    	JC	short WRTERR
 23298 00003A6B 8B16[BA05]              	MOV     DX,[LASTPOS]
 23299 00003A6F 42                      	INC     DX
 23300 00003A70 49                      	DEC     CX
 23301 00003A71 7405                    	JZ	short NOSKIP
 23302 00003A73 E82811                  	call	SKPCLP
 23303 00003A76 72C6                    	JC	short ACC_ERRWJ ; ds=ss ; 10/02/2024
 23304                                  NOSKIP:
 23305 00003A78 891E[BC05]              	MOV     [CLUSNUM],BX
 23306 00003A7C 8916[BA05]              	MOV     [LASTPOS],DX
 23307                                  DOWRT:
 23308 00003A80 833E[D205]00            	CMP     word [BYTCNT1],0
 23309 00003A85 7405                    	JZ	short WRTMID
 23310                                  	; 09/02/2024
 23311                                  	;MOV	BX,[CLUSNUM]	 ; (not used in 'BUFWRT') ; 09/02/2024
 23312 00003A87 E8A311                  	call	BUFWRT
 23313 00003A8A 72B2                    	JC	short ACC_ERRWJ
 23314                                  WRTMID:
 23315 00003A8C A1[D605]                	MOV     AX,[SECCNT]
 23316 00003A8F 09C0                    	OR      AX,AX
 23317                                  	; 20/11/2022
 23318 00003A91 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 23319 00003A93 0106[C405]              	ADD     [SECPOS],AX
 23320                                  	; 19/05/2019
 23321                                  	; MSDOS 6.0
 23322 00003A97 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 23323 00003A9C E8E911                  	call	NEXTSEC
 23324                                  	; 16/12/2022
 23325 00003A9F 729D                    	JC	short ACC_ERRWJ
 23326                                  	;JC	short SET_ACC_ERRW	;M039
 23327 00003AA1 C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 23328 00003AA6 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 23329 00003AAA 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 23330 00003AAE 8B0E[D605]              	MOV     CX,[SECCNT]
 23331                                  WRTLP:
 23332 00003AB2 E80412                  	call	OPTIMIZE
 23333 00003AB5 7248                    	JC	short SET_ACC_ERRW
 23334                                  	; 16/12/2022
 23335                                  	;JC	short ACC_ERRWJ
 23336                                  
 23337                                  ;M039
 23338                                  ;       DI = Next physical cluster.
 23339                                  ;       AX = # sectors remaining.
 23340                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 23341                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23342                                  ;	     sectors, also termed an "Extent".)
 23343                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23344                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23345                                  ;
 23346                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23347                                  ;	are in Extent; they are being over-written.
 23348                                  
 23349 00003AB7 57                      	push    di
 23350 00003AB8 50                      	push    ax
 23351                                  
 23352                                  	; MSDOS 3.3
 23353                                  	; IBMDOS.COM (1987) - Offset 4497h
 23354                                  	;push	dx
 23355                                  	;push	bx
 23356                                  	;mov	al,[es:bp]
 23357                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 23358                                  	;mov	bx,cx
 23359                                  	;add	bx,dx	; (bx = Extent end)
 23360                                  
 23361                                  ;	DX = Extent start.
 23362                                  ;	BX = Extent end.
 23363                                  ;	AL = Drive #.
 23364                                  
 23365                                  	;call	SETVISIT
 23366                                  
 23367                                  ;wbufq1:
 23368                                  	;;or	byte [di+5],20h
 23369                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 23370                                  	;;cmp	al,[di+4]	
 23371                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 23372                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 23373                                  	;;cmp	[di+6],dx
 23374                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 23375                                  	;jb	short wbufq2
 23376                                  	;;cmp	[di+6],bx
 23377                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 23378                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 23379                                  
 23380                                  	;; Buffer sector is in the Extent
 23381                                  
 23382                                  	;;mov	word [di+4],20FFh
 23383                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 23384                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 23385                                  	;				; .buf_flags, AH = 0, reset/clear
 23386                                  	;call	SCANPLACE
 23387                                  ;wbufq2:
 23388                                  	;call	SKIPVISIT
 23389                                  	;jnz	short wbufq1
 23390                                  	;pop	bx
 23391                                  	;pop	dx
 23392                                  
 23393                                          ; MSDOS 6.0
 23394 00003AB9 E82B01                  	call	DskWrtBufPurge		;DS trashed.
 23395                                  
 23396                                  ;ASSUME DS:NOTHING
 23397                                  ;M039
 23398                                  	; MSDOS 3.3 & MSDOS 6.0
 23399                                  ;hkn; SS override for DMAADD and ALLOWED
 23400 00003ABC 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 23401                                  	;mov	byte [ss:ALLOWED],38h
 23402 00003AC1 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 23403                                  
 23404                                  ;	put logic from DWRITE in-line here so we can modify it
 23405                                  ;	for DISK FULL conditions.
 23406                                  
 23407                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23408                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 23409                                  
 23410                                  	; 16/12/2022
 23411                                  	; MSDOS 3.3 (& MSDOS 5.0)
 23412                                  	;call	DWRITE
 23413                                  
 23414                                  ;DWRITE_OKAY:
 23415                                  
 23416                                  	; 16/12/2022
 23417                                  	; MSDOS 5.0 (& MSDOS 3.3)
 23418                                  	;pop	cx
 23419                                  	;pop	bx
 23420                                  	;push	ss
 23421                                  	;pop	ds
 23422                                  	;jc	short SET_ACC_ERRW
 23423                                  	;jcxz	WRTLAST
 23424                                  	;mov	dl,0
 23425                                  	;inc	word [LASTPOS]
 23426                                  	;jmp	short WRTLP
 23427                                  
 23428                                  	; 16/12/2022
 23429                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23430                                  DWRITE_LUP:
 23431                                  	; 23/07/2019 - Retro DOS v3.2
 23432                                  
 23433                                  	; MSDOS 6.0
 23434 00003AC7 E8F9FB                  	call	DSKWRITE
 23435 00003ACA 7417                    	jz	short DWRITE_OKAY
 23436                                  
 23437                                  ;;	int	3
 23438                                  
 23439 00003ACC 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 23440 00003ACE 7423                    	jz	short DWRITE_DISK_FULL
 23441                                  
 23442                                  	; 16/12/2022
 23443                                  
 23444                                  ;;hkn; SS override
 23445 00003AD0 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 23446 00003AD6 E819FC                  	call	HARDERRRW
 23447 00003AD9 3C01                    	CMP	AL,1		; Check for retry
 23448 00003ADB 74EA                    	JZ	short DWRITE_LUP
 23449                                  
 23450                                  	; 16/12/2022
 23451                                  	; 23/07/2019
 23452                                  	;POP	CX ; *4*
 23453                                  	;POP	BX ; *5*
 23454                                  	;
 23455                                  	;push	ss
 23456                                  	;pop	ds
 23457                                  	;
 23458                                  
 23459                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23460                                  
 23461                                  	; 16/12/2022
 23462 00003ADD 3C03                    	CMP	AL,3		; Check for FAIL
 23463 00003ADF F8                      	CLC
 23464 00003AE0 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 23465 00003AE2 F9                      	STC
 23466                                  
 23467                                  DWRITE_OKAY:
 23468                                  	; 16/12/2022
 23469                                  	; 23/07/2019
 23470                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23471 00003AE3 59                      	POP	CX ; *4*
 23472 00003AE4 5B                      	POP	BX ; *5*
 23473                                  
 23474                                  ;       CX = # sectors remaining.
 23475                                  ;       BX = Next physical cluster.
 23476                                  
 23477                                  ;hkn; SS override
 23478                                          ;Context DS
 23479                                  	; 16/12/2022
 23480                                  	;push	ss
 23481                                  	;pop	ds
 23482                                  
 23483                                  	; 10/02/2024
 23484                                  	; 16/12/2022
 23485                                  	;jc	short SET_ACC_ERRW
 23486                                  
 23487                                  	; 16/12/2022
 23488 00003AE5 16                      	push	ss
 23489 00003AE6 1F                      	pop	ds
 23490                                  
 23491                                  	; 10/02/2024
 23492 00003AE7 7216                    	jc	short SET_ACC_ERRW
 23493                                  
 23494 00003AE9 E317                    	JCXZ    WRTLAST
 23495                                  
 23496                                  	; 10/02/2024
 23497 00003AEB B200                    	MOV	DL,0
 23498                                  	;xor	dl,dl ; 23/07/2019
 23499 00003AED FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 23500 00003AF1 EBBF                    	JMP     short WRTLP
 23501                                  
 23502                                  	; 23/07/2019 - Retro DOS v3.2
 23503                                  	; 09/08/2018
 23504                                  	; MSDOS 6.0
 23505                                  DWRITE_DISK_FULL:
 23506                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 23507                                  	; 16/12/2022
 23508 00003AF3 16                      	push	ss
 23509 00003AF4 1F                      	pop	ds
 23510 00003AF5 59                      	pop	cx		; unjunk stack
 23511 00003AF6 5B                      	pop	bx
 23512 00003AF7 C606[0B06]01            	mov	byte [DISK_FULL],1
 23513                                  	;stc
 23514 00003AFC E933FF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 23515                                  
 23516                                  	; 16/12/2022
 23517                                  SET_ACC_ERRW:
 23518                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 23519                                  	; 10/02/2024
 23520                                  	; ds=ss
 23521 00003AFF E921FD                  	jmp	SET_ACC_ERR
 23522                                  
 23523                                  WRTLAST:
 23524 00003B02 A1[D405]                	MOV     AX,[BYTCNT2]
 23525 00003B05 09C0                    	OR      AX,AX
 23526 00003B07 7413                    	JZ	short FINWRT
 23527 00003B09 A3[D205]                	MOV     [BYTCNT1],AX
 23528 00003B0C E87911                  	call	NEXTSEC
 23529 00003B0F 72EE                    	JC	short SET_ACC_ERRW
 23530 00003B11 C706[CC05]0000          	MOV     word [BYTSECPOS],0
 23531 00003B17 E81311                  	call	BUFWRT
 23532 00003B1A 72E3                    	JC	short SET_ACC_ERRW
 23533                                  FINWRT:
 23534 00003B1C C43E[9E05]              	LES     DI,[THISSFT]
 23535 00003B20 A1[DE05]                	MOV     AX,[GROWCNT]
 23536 00003B23 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 23537 00003B27 09C0                    	OR      AX,AX
 23538 00003B29 7502                    	JNZ	short UPDATE_size
 23539 00003B2B E30F                    	JCXZ    SAMSIZ
 23540                                  UPDATE_size:
 23541                                  	;add	[es:di+11h],ax
 23542 00003B2D 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 23543                                  	;adc	[es:di+13h],cx
 23544 00003B31 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 23545                                  
 23546                                  ; Make sure that all other SFT's see this growth also.
 23547                                  
 23548 00003B35 B80100                  	MOV     AX,1
 23549                                  ;if installed
 23550                                  	;Call	JShare + 14 * 4
 23551 00003B38 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23552                                  ;else
 23553                                  ;	Call    ShSU
 23554                                  ;endif
 23555                                  
 23556                                  SAMSIZ:
 23557 00003B3C E97AFD                  	jmp	SETCLUS	; ES:DI already points to SFT
 23558                                  
 23559                                  	; 16/12/2022
 23560                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23561                                  ;SET_ACC_ERRW:
 23562                                  	;jmp	SET_ACC_ERR_DS
 23563                                  
 23564                                  WRTEOF:
 23565 00003B3F 89C1                    	MOV     CX,AX
 23566 00003B41 09D1                    	OR      CX,DX
 23567 00003B43 746A                    	JZ	short KILLFIL
 23568 00003B45 83E801                  	SUB     AX,1
 23569 00003B48 83DA00                  	SBB     DX,0
 23570                                  
 23571                                  	; MSDOS 3.3
 23572                                  	;;div	word [es:bp+2]
 23573                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23574                                  	;;mov	cl,[es:bp+5]
 23575                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23576                                  	;shr	ax,cl
 23577                                  
 23578                                  	; MSDOS 6.0
 23579 00003B4B 53                      	PUSH	BX
 23580                                  	;mov	bx,[es:bp+2]
 23581 00003B4C 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 23582 00003B50 E81A01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 23583 00003B53 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 23584 00003B54 89CA                    	MOV	DX,CX			      ;M039
 23585 00003B56 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 23586 00003B5A E83701                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 23587                                  
 23588 00003B5D 89C1                    	MOV     CX,AX
 23589 00003B5F E81C10                  	call	FNDCLUS
 23590                                  SET_ACC_ERRWJ2:
 23591 00003B62 729B                    	JC	short SET_ACC_ERRW
 23592                                  
 23593 00003B64 E324                    	JCXZ    RELFILE
 23594 00003B66 E8DB11                  	call	ALLOCATE
 23595                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 23596                                  	; 16/12/2022
 23597 00003B69 7303                    	jnc	short UPDATE
 23598 00003B6B E9C4FE                  	JMP	WRTERR
 23599                                  UPDATE:
 23600 00003B6E C43E[9E05]              	LES	DI,[THISSFT]
 23601 00003B72 A1[CE05]                	MOV	AX,[BYTPOS]
 23602                                  	;mov	[es:di+11h],ax
 23603 00003B75 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 23604 00003B79 A1[D005]                	MOV	AX,[BYTPOS+2]
 23605                                  	;mov	[es:di+13h],ax
 23606 00003B7C 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 23607                                  ;
 23608                                  ; Make sure that all other SFT's see this growth also.
 23609                                  ;
 23610 00003B80 B80200                  	MOV     AX,2
 23611                                  ;if installed
 23612                                  	;Call	JShare + 14 * 4
 23613 00003B83 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23614                                  ;else
 23615                                  ;	Call    ShSU
 23616                                  ;endif
 23617 00003B87 31C9                    	XOR     CX,CX ; 0
 23618                                  	;jmp	ADDREC
 23619                                  	; 08/02/2024
 23620 00003B89 C3                      	retn
 23621                                  
 23622                                  	; 16/12/2022
 23623                                  ;WRTERRJ: 
 23624                                  	;JMP	WRTERR
 23625                                  
 23626                                  ;;;;;;;;;;;;;;;; 7/18/86
 23627                                  ;;;;;;;;;;;;;;;;
 23628                                  
 23629                                  RELFILE:
 23630                                  	; MSDOS 6.0
 23631 00003B8A 06                      	PUSH	ES			;AN002; BL Reset Lstclus and cluspos to
 23632 00003B8B C43E[9E05]              	LES	DI,[THISSFT]		;AN002; BL beginning of file if current
 23633                                  	;cmp	dx,[es:di+19h]
 23634 00003B8F 263B5519                	CMP	DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 23635 00003B93 730E                    	JAE	short SKIPRESET			;AN002; BL
 23636                                  	;mov	[es:di+19h],0
 23637 00003B95 26C745190000            	MOV	word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 23638                                  	;mov	dx,[es:di+0Bh]
 23639 00003B9B 268B550B                	MOV	DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 23640                                  	;mov	[es:di+35h],dx
 23641 00003B9F 26895535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 23642                                  SKIPRESET:					;AN002; BL
 23643 00003BA3 07                      	POP	ES                    		;AN002; BL
 23644                                  ;
 23645 00003BA4 BAFFFF                  	MOV	DX,0FFFFH
 23646 00003BA7 E84812                  	call	RELBLKS
 23647                                  	; 16/12/2022
 23648                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23649 00003BAA 73C2                    	jnc	short UPDATE
 23650                                  SET_ACC_ERRWJ:
 23651                                  	;JC	short SET_ACC_ERRWJ2
 23652                                  	;JMP	SHORT UPDATE
 23653                                  	; 16/12/2022
 23654                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss
 23655                                  	; 10/02/2024
 23656                                  	; ds=ss
 23657 00003BAC E974FC                  	jmp	SET_ACC_ERR
 23658                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23659                                  	;JC	short SET_ACC_ERRWJ2
 23660                                  	;JMP	SHORT UPDATE
 23661                                  
 23662                                  KILLFIL:
 23663 00003BAF 31DB                    	XOR	BX,BX
 23664 00003BB1 06                      	PUSH	ES
 23665 00003BB2 C43E[9E05]              	LES	DI,[THISSFT]
 23666                                  	;mov	[es:di+19h],bx
 23667 00003BB6 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 23668                                  	;mov	[es:di+35h],bx ; 04/05/2019
 23669 00003BBA 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 23670                                  	;xchg	bx,[es:di+0Bh]
 23671 00003BBE 26875D0B                	XCHG	BX,[ES:DI+SF_ENTRY.sf_firclus]
 23672 00003BC2 07                      	POP	ES
 23673                                  
 23674 00003BC3 09DB                    	OR	BX,BX
 23675                                  	;JZ	short UPDATEJ
 23676                                  	; 16/12/2022
 23677 00003BC5 74A7                    	jz	short UPDATE
 23678                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23679                                  	;jz	short UPDATEJ
 23680                                  
 23681                                  ;; 10/23/86 FastOpen update
 23682 00003BC7 06                      	PUSH	ES			; since first cluster # is 0
 23683 00003BC8 55                      	PUSH	BP			; we must delete the old cache entry
 23684 00003BC9 50                      	PUSH	AX
 23685 00003BCA 51                      	PUSH	CX
 23686 00003BCB 52                      	PUSH	DX
 23687 00003BCC C42E[8A05]              	LES	BP,[THISDPB]		; get current DPB
 23688                                  	; 15/12/2022
 23689 00003BD0 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 23690                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23691                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 23692 00003BD4 89D9                    	MOV	CX,BX			; first cluster #
 23693 00003BD6 B402                    	MOV	AH,2			; delete cache entry by drive:firclus
 23694 00003BD8 E8AAEA                  	call	FastOpen_Update		; call fastopen
 23695 00003BDB 5A                      	POP	DX
 23696 00003BDC 59                      	POP	CX
 23697 00003BDD 58                      	POP	AX
 23698 00003BDE 5D                      	POP	BP
 23699 00003BDF 07                      	POP	ES
 23700                                  ;; 10/23/86 FastOpen update
 23701                                  
 23702 00003BE0 E80D12                  	call	RELEASE
 23703 00003BE3 72C7                    	JC	short SET_ACC_ERRWJ
 23704                                  UPDATEJ:
 23705                                  	; 20/11/2022
 23706 00003BE5 EB87                    	JMP	short UPDATE ; 10/08/2018
 23707                                  
 23708                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 23709                                  ;----------------------------------------------------------------------------
 23710                                  ;
 23711                                  ; Procedure Name : DskWrtBufPurge
 23712                                  ;
 23713                                  ; Inputs:
 23714                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23715                                  ;	     sectors, also termed an "Extent".)
 23716                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23717                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23718                                  ;
 23719                                  ; Function:
 23720                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23721                                  ;	are in Extent; they are being over-written.
 23722                                  ;
 23723                                  ; Outputs:
 23724                                  ;       (Same as Input.)
 23725                                  ; Uses:
 23726                                  ;       All registers except DS,AX,SI,DI preserved.
 23727                                  ;       SS override for all global variables.
 23728                                  ;----------------------------------------------------------------------------
 23729                                  ;M039: Created
 23730                                  
 23731                                  ;procedure   DskWrtBufPurge,NEAR
 23732                                  ;
 23733                                  ;ASSUME  DS:NOTHING
 23734                                  
 23735                                  ; 04/05/2019 - Retro DOS v4.0
 23736                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 23737                                  
 23738                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23739                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 23740                                  
 23741                                  DskWrtBufPurge:
 23742                                  	;SaveReg <bx,cx>
 23743 00003BE7 53                      	push	bx
 23744 00003BE8 51                      	push	cx
 23745                                  
 23746 00003BE9 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 23747 00003BEE 89DE                    	mov	si,bx
 23748 00003BF0 01D1                    	add	cx,dx
 23749 00003BF2 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 23750                                  
 23751                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23752                                  	;;mov	al,[es:bp+0]
 23753                                  	;mov	al,[es:bp+DPB.DRIVE]
 23754                                  	; 15/12/2022
 23755 00003BF5 268A4600                	mov	al,[es:bp]
 23756                                  
 23757                                  ;	BX:DX = Extent start.
 23758                                  ;	SI:CX = Extent end + 1.
 23759                                  ;	AL = Drive #
 23760                                  
 23761 00003BF9 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 23762 00003BFF 7431                    	je	short nosc		; -no, jump.
 23763                                  
 23764                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 23765                                  ;	invalidate the entire SC. (This is an optimization; we really only
 23766                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 23767                                  
 23768 00003C01 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 23769 00003C06 752A                    	jne	short nosc		; -no, jump.
 23770                                  
 23771 00003C08 50                      	push    ax
 23772 00003C09 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 23773 00003C0D 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 23774                                  
 23775                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 23776                                  	;jbe	short sc5		; -yes, jump.
 23777                                  
 23778 00003C12 39FE                    	cmp	si,di
 23779 00003C14 7502                    	jne	short sc01
 23780 00003C16 39C1                    	cmp	cx,ax
 23781                                  sc01: 
 23782 00003C18 7617                    	jbe	short sc5
 23783                                  
 23784 00003C1A 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 23785 00003C1F 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 23786                                  	
 23787                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 23788                                  	;jae	short sc5		; -yes, jump.
 23789                                  
 23790 00003C22 39FB                    	cmp	bx,di
 23791 00003C24 7502                    	jne	short sc02
 23792 00003C26 39C2                    	cmp	dx,ax
 23793                                  sc02:
 23794 00003C28 7307                    	jnb	short sc5
 23795                                  
 23796 00003C2A 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 23797                                  sc5:	
 23798 00003C31 58                      	pop     ax
 23799                                  
 23800                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23801                                  ;	written.
 23802                                  
 23803                                  nosc:	
 23804 00003C32 E8D21B                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23805                                  
 23806                                  _bufq:	
 23807                                  	;cmpo	al,[di+4]
 23808 00003C35 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23809 00003C38 7527                    	jne	short bufq5		; -no, jump.
 23810                                  
 23811                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23812                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23813                                  
 23814                                  	;cmp	bx,[di+8]
 23815 00003C3A 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23816 00003C3D 7503                    	jne	short bufq04
 23817                                  	;cmp	dx,[di+6]
 23818 00003C3F 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23819                                  bufq04:
 23820 00003C42 771D                    	ja	short bufq5
 23821                                  
 23822                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23823                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23824                                  
 23825                                  	;cmp	si,[di+8]
 23826 00003C44 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23827 00003C47 7503                    	jne	short bufq05
 23828                                  	;cmp	cx,[di+6]
 23829 00003C49 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23830                                  bufq05:
 23831 00003C4C 7613                    	jbe	short bufq5
 23832                                  
 23833                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23834                                  
 23835                                  	;test	byte [di+5],40h
 23836 00003C4E F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23837 00003C52 7403                    	jz	short bufq4		; -no, jump.
 23838 00003C54 E8311E                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23839                                  bufq4:
 23840                                  	;mov	word [di+4],20FFh
 23841 00003C57 C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23842                                  
 23843 00003C5C E8BA1B                  	call	SCANPLACE
 23844 00003C5F EB02                    	jmp     short bufq6
 23845                                  bufq5: 
 23846 00003C61 8B3D                    	mov     di,[di]
 23847                                  	;mov	di,[di+BUFFINFO.buf_next]
 23848                                  bufq6: 
 23849 00003C63 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23850 00003C68 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23851                                  	
 23852                                  	;RestoreReg <cx,bx>
 23853 00003C6A 59                      	pop	cx
 23854 00003C6B 5B                      	pop	bx
 23855 00003C6C C3                      	retn
 23856                                  
 23857                                  ;EndProc DskWrtBufPurge
 23858                                  
 23859                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23860                                  ;----------------------------------------------------------------------------
 23861                                  ;
 23862                                  ; Procedure Name : DIV32
 23863                                  ;
 23864                                  ; Inputs:
 23865                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23866                                  ; Function:
 23867                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23868                                  ; Outputs:
 23869                                  ;       CX:AX = quotient , DX= remainder
 23870                                  ; Uses:
 23871                                  ;       All registers except AX,CX,DX preserved.
 23872                                  ;----------------------------------------------------------------------------
 23873                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23874                                  
 23875                                  ; 04/05/2019 - Retro DOS v4.0
 23876                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23877                                  
 23878                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23879                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23880                                  
 23881                                  DIV32:
 23882 00003C6D 81FB0002                	cmp	bx,512
 23883 00003C71 7515                    	jne	short div5
 23884                                  
 23885 00003C73 89D1                    	mov	cx,dx
 23886 00003C75 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23887 00003C77 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23888 00003C7B 88E0                    	mov	al,ah
 23889 00003C7D 88CC                    	mov	ah,cl
 23890 00003C7F 88E9                    	mov	cl,ch
 23891 00003C81 30ED                    	xor	ch,ch
 23892 00003C83 D1E9                    	shr	cx,1
 23893 00003C85 D1D8                    	rcr	ax,1
 23894 00003C87 C3                      	retn
 23895                                  div5:	
 23896 00003C88 89C1                    	mov	cx,ax
 23897 00003C8A 89D0                    	mov	ax,dx
 23898 00003C8C 31D2                    	xor	dx,dx
 23899 00003C8E F7F3                    	div	bx              ; 0:AX/BX
 23900 00003C90 91                      	xchg	cx,ax
 23901 00003C91 F7F3                    	div	bx              ; DX:AX/BX
 23902 00003C93 C3                      	retn
 23903                                  
 23904                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23905                                  ;----------------------------------------------------------------------------
 23906                                  ;
 23907                                  ; Procedure Name : SHR32
 23908                                  ;
 23909                                  ; Inputs:
 23910                                  ;	DX:AX = 32 bit sector number
 23911                                  ; Function:
 23912                                  ;       Perform 32 bit shift right
 23913                                  ; Outputs:
 23914                                  ;	AX = cluster number
 23915                                  ;	ZF = 1 if no error
 23916                                  ;	   = 0 if error (cluster number > 64k)
 23917                                  ; Uses:
 23918                                  ;       DX,CX
 23919                                  ;---------------------------------------------------------------------------
 23920                                  ; M017	- SHR32 rewritten for better performance
 23921                                  ; M039	- Additional optimization
 23922                                  
 23923                                  ; 04/05/2019 - Retro DOS v4.0
 23924                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23925                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23926                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS)
 23927                                  SHR32:
 23928                                  	;mov	cl,[es:bp+5]
 23929 00003C94 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23930 00003C98 30ED                    	xor	ch,ch	    ;ZF=1
 23931 00003C9A E306                    	jcxz	norota
 23932                                  
 23933                                  rotashft2:
 23934 00003C9C D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23935 00003C9E D1D8                    	rcr	ax,1	    ;ZF not affected.
 23936 00003CA0 E2FA                    	loop	rotashft2
 23937                                  norota:
 23938 00003CA2 C3                      	retn
 23939                                  
 23940                                  ;============================================================================
 23941                                  ; DIR.ASM, MSDOS 6.0, 1991
 23942                                  ;============================================================================
 23943                                  ; 27/07/2018 - Retro DOS v3.0
 23944                                  ; 19/05/2019 - Retro DOS v4.0
 23945                                  
 23946                                  ;	TITLE	DIR - Directory and path cracking
 23947                                  ;	NAME	Dir
 23948                                  
 23949                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 23950                                  ;---------------------------------------------------------------------------
 23951                                  ;
 23952                                  ; Procedure Name : FINDENTRY,SEARCH
 23953                                  ;
 23954                                  ; Inputs:
 23955                                  ;	[THISDPB] set
 23956                                  ;	[SECCLUSPOS] = 0
 23957                                  ;	[DIRSEC] = Starting directory sector number
 23958                                  ;	[CLUSNUM] = Next cluster of directory
 23959                                  ;	[CLUSFAC] = Sectors/Cluster
 23960                                  ;	[NAME1] = Name to look for
 23961                                  ; Function:
 23962                                  ;	Find file name in disk directory.
 23963                                  ;	"?" matches any character.
 23964                                  ; Outputs:
 23965                                  ;	Carry set if name not found
 23966                                  ;	ELSE
 23967                                  ;	Zero set if attributes match (always except when creating)
 23968                                  ;	AH = Device ID (bit 7 set if not disk)
 23969                                  ;	[THISDPB] = Base of drive parameters
 23970                                  ;	DS = DOSGROUP
 23971                                  ;	ES = DOSGROUP
 23972                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 23973                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 23974                                  ;	[CURBUF] has directory record with match
 23975                                  ;	[NAME1] has file name
 23976                                  ;	[LASTENT] is entry number of the entry
 23977                                  ; All other registers destroyed.
 23978                                  ;----------------------------------------------------------------------------
 23979                                  
 23980                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 23981                                  ;hkn; this point.
 23982                                  
 23983                                  SEARCH:
 23984                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23985                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 23986                                  
 23987                                  	; 19/05/2019 - Retro DOS v4.0
 23988                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 23989                                  
 23990                                  	; 27/07/2018 - Retro DOS v3.0
 23991                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 23992                                  	; 15/03/2018 - Retro DOS v2.0
 23993                                  
 23994                                  	; 24/01/2024
 23995                                  
 23996                                  	;entry	FindEntry
 23997                                  FINDENTRY:
 23998 00003CA3 E82C04                  	call	STARTSRCH
 23999 00003CA6 A0[6B05]                	MOV	AL,[ATTRIB]
 24000                                  	;and	al,9Eh
 24001 00003CA9 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 24002                                  	;cmp	al,8
 24003 00003CAB 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 24004 00003CAD 7503                    	JNZ	short NOTVOLSRCH	; No
 24005 00003CAF E86A01                  	CALL	SETROOTSRCH		; Yes force search of root
 24006                                  NOTVOLSRCH:
 24007 00003CB2 E8FA00                  	CALL	GETENTRY
 24008                                  	;JNC	short SRCH
 24009                                  	;JMP	SETESRET
 24010                                  	; 24/01/2024
 24011 00003CB5 723F                    	jc	short SETESRET
 24012                                  
 24013                                  	;entry	Srch
 24014                                  SRCH:
 24015 00003CB7 1E                      	PUSH	DS
 24016 00003CB8 8E1E[E405]              	MOV	DS,[CURBUF+2]
 24017                                  
 24018                                  ;	(DS:BX) = directory entry address
 24019                                  
 24020 00003CBC 8A27                    	mov	ah,[BX]
 24021                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 24022 00003CBE 08E4                    	OR	AH,AH			; End of directory?
 24023 00003CC0 7437                    	JZ	short FREE
 24024                                  
 24025                                  ;hkn; SS override
 24026 00003CC2 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 24027 00003CC7 7430                    	JZ	short FREE
 24028                                  	;test	byte [bx+0Bh],8
 24029 00003CC9 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 24030                                  					; Volume ID file?
 24031 00003CCD 7405                    	JZ	short CHKFNAM 		; NO
 24032                                  
 24033                                  ;hkn; SS override
 24034 00003CCF 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 24035                                  CHKFNAM:
 24036                                  ;	Context ES
 24037 00003CD4 8CD6                    	MOV	SI,SS
 24038 00003CD6 8EC6                    	MOV	ES,SI
 24039 00003CD8 89DE                    	MOV	SI,BX
 24040                                  
 24041                                  ;hkn; NAME1 is in DOSDATA
 24042 00003CDA BF[4B05]                	MOV	DI,NAME1
 24043                                  ;;;;; 7/29/86
 24044                                  
 24045                                  ;hkn; SS override for NAME1
 24046                                  	;CMP	BYTE [SS:NAME1],0E5H	; special char check
 24047                                  	;JNZ	short NO_E5
 24048                                  	;MOV	BYTE [SS:NAME1],05H
 24049                                  	; 22/09/2023
 24050 00003CDD 26803DE5                	cmp	byte [es:di],0E5h
 24051 00003CE1 7504                    	jnz	short NO_E5
 24052 00003CE3 26C60505                	mov	byte [es:di],05h
 24053                                  NO_E5:
 24054                                  ;;;;; 7/29/86
 24055 00003CE7 E86100                  	CALL	MetaCompare
 24056 00003CEA 7429                    	JZ	short FOUND
 24057 00003CEC 1F                      	POP	DS
 24058                                  
 24059                                  	;entry	NEXTENT
 24060                                  NEXTENT:
 24061 00003CED C42E[8A05]              	LES	BP,[THISDPB]
 24062 00003CF1 E86600                  	CALL	NEXTENTRY
 24063 00003CF4 73C1                    	JNC	short SRCH
 24064                                  	;JMP	SHORT SETESRET
 24065                                  	; 24/01/2024
 24066                                  SETESRET:
 24067 00003CF6 16                      	PUSH	SS
 24068 00003CF7 07                      	POP	ES
 24069 00003CF8 C3                      	retn
 24070                                  FREE:
 24071 00003CF9 1F                      	POP	DS
 24072 00003CFA 8B0E[4803]              	MOV	CX,[LASTENT]
 24073 00003CFE 3B0E[D805]              	CMP	CX,[ENTFREE]
 24074 00003D02 7304                    	JAE	short TSTALL
 24075 00003D04 890E[D805]              	MOV	[ENTFREE],CX
 24076                                  TSTALL:
 24077 00003D08 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 24078                                  NEXTENTJ:
 24079 00003D0C 74DF                    	je	short NEXTENT 		; No - continue search
 24080 00003D0E 890E[DA05]              	MOV	[ENTLAST],CX
 24081 00003D12 F9                      	STC
 24082 00003D13 EBE1                    	JMP	SHORT SETESRET
 24083                                  
 24084                                  FOUND:
 24085                                  ; We have a file with a matching name. We must now consider the attributes:
 24086                                  ; ATTRIB	Action
 24087                                  ; ------	------
 24088                                  ; Volume_ID	Is Volume_ID in test?
 24089                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 24090                                  ;		If create then Is ATTRIB equal to test?
 24091                                  
 24092 00003D15 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 24093 00003D17 1F                      	POP	DS
 24094 00003D18 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 24095                                  	;and	ah,9Eh
 24096 00003D1C 80E4DE                  	AND	AH,~attr_ignore
 24097                                  	;lea	si,[si+15]
 24098 00003D1F 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 24099                                  					; point to first cluster field
 24100                                  	;test	ch,8
 24101 00003D22 F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 24102 00003D25 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 24103                                  	;test	ah,8
 24104 00003D27 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 24105                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 24106                                  	; 16/12/2022
 24107 00003D2A 74C1                    	jz	short NEXTENT ; 19/05/2019
 24108                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24109                                  	;JZ	short NEXTENTJ
 24110 00003D2C 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 24111 00003D2E EB11                    	JMP	SHORT RETFF		; Found Volume ID
 24112                                  check_one_volume_id:
 24113                                  	;CMP	ah,8
 24114 00003D30 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 24115                                  	;JZ	short NEXTENTJ		; Yes, continue search
 24116                                  	; 16/12/2022
 24117 00003D33 74B8                    	je	short NEXTENT ; 19/05/2019
 24118                                  	;JZ	short NEXTENTJ
 24119 00003D35 E8AE03                  	CALL	MatchAttributes
 24120 00003D38 7407                    	JZ	SHORT RETFF
 24121 00003D3A F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 24122                                  	; 16/12/2022
 24123                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 24124 00003D3F 74AC                    	jz	short NEXTENT ; 19/05/2019
 24125                                  RETFF:
 24126 00003D41 C42E[8A05]              	LES	BP,[THISDPB]
 24127                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24128                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 24129                                  	; 15/12/2022
 24130 00003D45 268A6600                	MOV	AH,[ES:BP]
 24131                                  ;SETESRET:
 24132                                  	;PUSH	SS
 24133                                  	;POP	ES
 24134                                  	;retn
 24135                                  	; 24/01/2024
 24136 00003D49 EBAB                    	jmp	short SETESRET	
 24137                                  
 24138                                  ;----------------------------------------------------------------------------
 24139                                  ;
 24140                                  ; Procedure Name : MetaCompare
 24141                                  ;
 24142                                  ; Inputs:
 24143                                  ;	DS:SI -> 11 character FCB style name NO '?'
 24144                                  ;	    Typically this is a directory entry. It MUST be in upper case
 24145                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 24146                                  ;	    Typically this is a FCB or SFT. It MUST be in upper case
 24147                                  ; Function:
 24148                                  ;	Compare FCB style names allowing for ? match to any char
 24149                                  ; Outputs:
 24150                                  ;	Zero if match else NZ
 24151                                  ; Destroys CX,SI,DI all others preserved
 24152                                  ;----------------------------------------------------------------------------
 24153                                  
 24154                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24155                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 24156                                  
 24157                                  MetaCompare:
 24158 00003D4B B90B00                  	MOV	CX,11
 24159                                  WILDCRD:
 24160 00003D4E F3A6                    	REPE	CMPSB
 24161 00003D50 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 24162                                  CHECK_META:
 24163 00003D52 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 24164 00003D57 74F5                    	JZ	short WILDCRD
 24165                                  MetaRet:
 24166 00003D59 C3                       	retn				; Zero set, Match
 24167                                  
 24168                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 24169                                  ;----------------------------------------------------------------------------
 24170                                  ;
 24171                                  ; Procedure Name : NEXTENTRY
 24172                                  ;
 24173                                  ; Inputs:
 24174                                  ;	Same as outputs of GETENTRY, above
 24175                                  ; Function:
 24176                                  ;	Update BX, and [LASTENT] for next directory entry.
 24177                                  ;	Carry set if no more.
 24178                                  ;----------------------------------------------------------------------------
 24179                                  
 24180                                  NEXTENTRY:
 24181                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24182                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 24183                                  
 24184                                  	; 19/05/2019 - Retro DOS v4.0
 24185                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 24186                                  
 24187                                  	; 27/07/2018 - Retro DOS v3.0
 24188                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 24189                                  	; 15/03/2018 - Retro DOS v2.0
 24190                                  
 24191 00003D5A A1[4803]                	MOV	AX,[LASTENT]
 24192 00003D5D 3B06[DA05]              	CMP	AX,[ENTLAST]
 24193 00003D61 7422                    	JZ	short NONE
 24194 00003D63 40                      	INC	AX
 24195                                  	;ADD	BX,32
 24196 00003D64 8D5F20                  	LEA	BX,[BX+32]
 24197 00003D67 39D3                    	CMP	BX,DX
 24198                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 24199                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 24200                                  	; 16/12/2022
 24201 00003D69 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 24202 00003D6B 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 24203 00003D6F FEC3                    	INC	BL
 24204 00003D71 3A1E[7705]              	CMP	BL,[CLUSFAC]
 24205 00003D75 7215                    	JB	short SAMECLUS
 24206 00003D77 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 24207 00003D7B E8D916                  	call	IsEOF
 24208 00003D7E 7305                    	JAE	short NONE
 24209                                  	; 23/07/2019
 24210 00003D80 83FB02                  	CMP	BX,2
 24211                                  	;JB	short NONE
 24212                                  	;JMP	short GETENT
 24213                                  	; 16/12/2022
 24214 00003D83 732D                    	jnb	short GETENT
 24215                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24216                                  	;JB	short NONE
 24217                                  	;JMP	short GETENT
 24218                                  NONE:
 24219 00003D85 F9                      	STC
 24220 00003D86 C3                      	retn
 24221                                  HAVIT:
 24222 00003D87 A3[4803]                	MOV	[LASTENT],AX
 24223 00003D8A F8                      	CLC
 24224                                  nextentry_retn:
 24225 00003D8B C3                      	retn
 24226                                  SAMECLUS:
 24227 00003D8C 881E[7305]              	MOV	[SECCLUSPOS],BL
 24228 00003D90 A3[4803]                	MOV	[LASTENT],AX
 24229 00003D93 1E                      	PUSH	DS
 24230 00003D94 C53E[E205]              	LDS	DI,[CURBUF]
 24231                                  	; 19/05/2019
 24232                                  	; MSDOS 6.0
 24233                                  	;;mov	dx,[di+8]
 24234                                  	; 23/09/2023
 24235                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 24236                                  ;hkn; SS override
 24237                                  	;MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 24238                                  	; 23/09/2023
 24239 00003D98 8B7508                  	mov	si,[di+BUFFINFO.buf_sector+2]	
 24240                                  	
 24241                                  	;mov	dx,[di+6]
 24242 00003D9B 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 24243                                  	;inc	dx ; MSDOS 3.3
 24244                                  	; MSDOS 6.0
 24245                                  	;ADD	DX,1				;AN000; >32mb
 24246                                  	;ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 24247                                  	; 23/09/2023
 24248 00003D9E 42                      	inc	dx
 24249 00003D9F 7501                    	jnz	short nextexntry_fc
 24250 00003DA1 46                      	inc	si
 24251                                  	;inc	word [SS:HIGH_SECTOR]
 24252                                  nextexntry_fc:
 24253                                  	; 23/09/2023
 24254 00003DA2 368936[0706]            	mov	[SS:HIGH_SECTOR],si
 24255                                  	; MSDOS 3.3 & MSDOS 6.0
 24256 00003DA7 1F                      	POP	DS
 24257 00003DA8 E866F8                  	call	FIRSTCLUSTER
 24258 00003DAB 31DB                    	XOR	BX,BX
 24259 00003DAD EB23                    	JMP	short SETENTRY
 24260                                  
 24261                                  ;----------------------------------------------------------------------------
 24262                                  ;
 24263                                  ; Procedure Name : GETENTRY
 24264                                  ;
 24265                                  ; Inputs:
 24266                                  ;	[LASTENT] has directory entry
 24267                                  ;	ES:BP points to drive parameters
 24268                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 24269                                  ; Function:
 24270                                  ;	Locates directory entry in preparation for search
 24271                                  ;	GETENT provides entry for passing desired entry in AX
 24272                                  ; Outputs:
 24273                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 24274                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 24275                                  ;	[LASTENT] = New directory entry number
 24276                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 24277                                  ;	Carry set if error (currently user FAILed to I 24)
 24278                                  ;----------------------------------------------------------------------------
 24279                                  
 24280                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24281                                  GETENTRY:
 24282                                  	; 27/07/2018 - Retro DOS v3.0
 24283 00003DAF A1[4803]                	MOV	AX,[LASTENT]
 24284                                  
 24285                                  	;entry	GETENT
 24286                                  GETENT:
 24287 00003DB2 A3[4803]                	MOV	[LASTENT],AX
 24288                                  ;
 24289                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 24290                                  ; directory.
 24291                                  ;
 24292 00003DB5 B105                    	mov	cl,5			; shift left by 5 = mult by 32
 24293 00003DB7 D3C0                    	rol	ax,cl			; keep hight order bits
 24294 00003DB9 89C2                    	mov	dx,ax
 24295                                  	; 19/05/2019 - Retro DOS v4.0
 24296                                  	;and	ax,0FFE0h
 24297                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24298                                  	;and	ax,~(32-1)		; mask off high order bits
 24299                                  	; 16/12/2022
 24300 00003DBB 24E0                    	and	al,0E0h ; ~31
 24301 00003DBD 83E21F                  	and	dx,1Fh
 24302                                  	;and	dx,32-1			; mask off low order bits
 24303                                  ;
 24304                                  ; DX:AX contain the byte offset of the required directory entry from the
 24305                                  ; beginning of the directory. Convert this to a sector number. Round the
 24306                                  ; sector size down to a multiple of 32.
 24307                                  ;
 24308                                  	;mov	bx,[es:bp+2]
 24309 00003DC0 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 24310 00003DC4 80E3E0                  	and	bl,0E0h
 24311                                  	;AND	BL,255-31		; Must be multiple of 32
 24312 00003DC7 F7F3                    	DIV	BX
 24313 00003DC9 89D3                    	MOV	BX,DX			; Position within sector
 24314 00003DCB 53                      	PUSH	BX
 24315 00003DCC E8EEF7                  	call	DIRREAD
 24316 00003DCF 5B                      	POP	BX
 24317                                  	;retc
 24318 00003DD0 72B9                    	jc	short nextentry_retn	
 24319                                  SETENTRY:
 24320 00003DD2 8B16[E205]              	MOV	DX,[CURBUF]
 24321                                  	;add	dx,16 ; MSDOS 3.3
 24322                                  	;add	dx,20 ; MSDOS 6.0 
 24323 00003DD6 83C214                  	ADD	DX,BUFINSIZ
 24324 00003DD9 01D3                    	ADD	BX,DX
 24325                                  	;add	dx,[es:bp+2]
 24326 00003DDB 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 24327                                  	; 29/12/2022
 24328                                  	; MSDOS 6.21 MSDOS.SYS contains a 'CLC' here, at DOSCODE:7E15h
 24329 00003DDF F8                      	clc
 24330 00003DE0 C3                      	retn
 24331                                  
 24332                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 24333                                  ;----------------------------------------------------------------------------
 24334                                  ;
 24335                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 24336                                  ;
 24337                                  ; Inputs:
 24338                                  ;	BX cluster number of start of directory
 24339                                  ;	ES:BP Points to DPB
 24340                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 24341                                  ; Function:
 24342                                  ;	Set up a directory search
 24343                                  ; Outputs:
 24344                                  ;	[DIRSTART] = BX
 24345                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 24346                                  ;	Carry set if error (currently user FAILed to I 24)
 24347                                  ; destroys AX,DX,BX
 24348                                  ;----------------------------------------------------------------------------
 24349                                  
 24350                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24351                                  SETDIRSRCH:
 24352 00003DE1 09DB                    	OR	BX,BX
 24353 00003DE3 7437                    	JZ	short SETROOTSRCH
 24354 00003DE5 891E[C205]              	MOV	[DIRSTART],BX
 24355                                  	;mov	al,[es:bp+4]
 24356 00003DE9 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 24357 00003DED FEC0                    	INC	AL
 24358 00003DEF A2[7705]                	MOV	[CLUSFAC],AL
 24359                                  
 24360                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24361                                  	;SAVE	<SI>
 24362 00003DF2 56                      	push	si
 24363                                  	;test	byte [FastOpenFlg],2
 24364 00003DF3 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24365 00003DF8 7507                    	JNZ	short UNP_OK
 24366                                  
 24367                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24368                                  	;invoke	UNPACK
 24369 00003DFA E87116                  	call	UNPACK
 24370 00003DFD 7302                    	JNC	short UNP_OK
 24371                                  	;RESTORE <SI>
 24372 00003DFF 5E                      	pop	si
 24373                                  	;return
 24374 00003E00 C3                      	retn
 24375                                  
 24376                                  UNP_OK:
 24377 00003E01 893E[BC05]              	MOV	[CLUSNUM],DI
 24378 00003E05 89DA                    	MOV	DX,BX
 24379 00003E07 30DB                    	XOR	BL,BL
 24380 00003E09 881E[7305]              	MOV	[SECCLUSPOS],BL
 24381                                  	;invoke	FIGREC
 24382 00003E0D E8070F                  	call	FIGREC
 24383                                  	;RESTORE <SI>
 24384 00003E10 5E                      	pop	si
 24385                                  	
 24386                                  	; 19/05/2019 - Retro DOS v4.0
 24387                                  
 24388                                  	; MSDOS 6.0
 24389                                  	;PUSH	DX			   ;AN000; >32mb
 24390                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 24391                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 24392                                  	;POP	DX			   ;AN000; >32mb
 24393                                  
 24394                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24395                                  	;push	dx
 24396                                  	;mov	dx,[HIGH_SECTOR]
 24397                                  	;mov	[DIRSEC+2],dx
 24398                                  	;pop	dx
 24399                                  	;MOV	[DIRSEC],dx
 24400                                  	; 16/12/2022
 24401 00003E11 A1[0706]                	mov	ax,[HIGH_SECTOR]
 24402 00003E14 A3[C005]                	mov	[DIRSEC+2],AX
 24403 00003E17 8916[BE05]              	MOV	[DIRSEC],DX
 24404                                  
 24405                                  	; 16/12/2022
 24406                                  	; cf=0 (at the return of FIGREC)
 24407                                  	;CLC
 24408 00003E1B C3                      	retn
 24409                                  
 24410                                  	;entry	SETROOTSRCH
 24411                                  SETROOTSRCH:
 24412 00003E1C 31C0                    	XOR	AX,AX
 24413 00003E1E A3[C205]                	MOV	[DIRSTART],AX
 24414                                  	; 22/09/2023
 24415 00003E21 A3[C005]                	mov	[DIRSEC+2],ax ; 0
 24416 00003E24 A2[7305]                	MOV	[SECCLUSPOS],AL
 24417 00003E27 48                      	DEC	AX
 24418 00003E28 A3[BC05]                	MOV	[CLUSNUM],AX
 24419                                  	;mov	ax,[es:bp+0Bh]
 24420 00003E2B 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 24421                                  	; 19/05/2019
 24422                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 24423                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 24424 00003E2F 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 24425 00003E33 29D0                    	SUB	AX,DX
 24426 00003E35 A2[7705]                	MOV	[CLUSFAC],AL
 24427 00003E38 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 24428                                  	; 22/09/2023
 24429                                  	; MSDOS 6.0
 24430                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 24431 00003E3C F8                      	CLC
 24432 00003E3D C3                      	retn
 24433                                  
 24434                                  ;============================================================================
 24435                                  ; DIR2.ASM, MSDOS 6.0, 1991
 24436                                  ;============================================================================
 24437                                  ; 27/07/2018 - Retro DOS v3.0
 24438                                  ; 19/05/2019 - Retro DOS v4.0 
 24439                                  
 24440                                  ;	TITLE	DIR2 - Directory and path cracking
 24441                                  ;	NAME	Dir2
 24442                                  
 24443                                  ;Break	<GETPATH -- PARSE A WFP>
 24444                                  ;----------------------------------------------------------------------------
 24445                                  ;
 24446                                  ; Procedure Name : GETPATH
 24447                                  ;
 24448                                  ; Inputs:
 24449                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 24450                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 24451                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24452                                  ;		( = -1 if current dir not involved, else
 24453                                  ;		 Points to first char after last "/" of current dir part)
 24454                                  ;	[THISCDS] Points to CDS being used
 24455                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 24456                                  ;	[NoSetDir] set
 24457                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 24458                                  ; Function:
 24459                                  ;	Crack the path
 24460                                  ; Outputs:
 24461                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 24462                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 24463                                  ;	ID1 field of [THISCDS] updated appropriately
 24464                                  ;	[ATTRIB] = [SATTRIB]
 24465                                  ;	ES:BP Points to DPB
 24466                                  ;	Carry set if bad path
 24467                                  ;	   SI Points to path element causing failure
 24468                                  ;	   Zero set
 24469                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24470                                  ;	      start a search on the last directory
 24471                                  ;	      CL is zero if there is a bad name in the path
 24472                                  ;	      CL is non-zero if the name was simply not found
 24473                                  ;		 [ENTFREE] may have free spot in directory
 24474                                  ;		 [NAME1] is the name.
 24475                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24476                                  ;	   Zero reset
 24477                                  ;	      File in middle of path or bad name in path or attribute mismatch
 24478                                  ;		or path too long or malformed path
 24479                                  ;	ELSE
 24480                                  ;	   [CurBuf] = -1 if root directory
 24481                                  ;	   [CURBUF] contains directory record with match
 24482                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24483                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 24484                                  ;	   AH = device ID
 24485                                  ;	      bit 7 of AH set if device SI and BX
 24486                                  ;	      will point DOSGROUP relative The firclus
 24487                                  ;	      field of the device entry contains the device pointer
 24488                                  ;	   [NAME1] Has name looked for
 24489                                  ;	   If last element is a directory zero is set and:
 24490                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24491                                  ;	      are set up to start a search on it.
 24492                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24493                                  ;	      like that for a file (except for zero flag)
 24494                                  ;	   If last element is a file zero is reset
 24495                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24496                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24497                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24498                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24499                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24500                                  ; DS preserved, Others destroyed
 24501                                  ;---------------------------------------------------------------------------
 24502                                  
 24503                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 24504                                  ;hkn; DS already set up at this point.
 24505                                  
 24506                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24507                                  GETPATH:
 24508                                  	;mov	word [CREATING],0E500h
 24509 00003E3E C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 24510                                  
 24511                                  ; Same as GetPath only CREATING and DELALL already set
 24512                                  
 24513                                  	;entry	GetPathNoSet
 24514                                  GetPathNoSet:
 24515                                  	;mov	byte [EXTERR_LOCUS],2	
 24516 00003E44 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 24517 00003E49 C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 24518                                  
 24519                                  ; See if the input indicates a device that has already been detected. If so,
 24520                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 24521                                  
 24522 00003E4F 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 24523                                  	;cmp	word [DI+1],5C3Ah
 24524                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 24525 00003E53 817D013A5C              	cmp	word [DI+1],':\'
 24526 00003E58 7438                    	JZ	short CrackIt
 24527                                  
 24528                                  ; Let ChkDev find it in the device list
 24529                                  
 24530 00003E5A 83C703                  	ADD	DI,3
 24531                                  	; 18/08/2018
 24532                                  	;MOV	SI,DI			; let CHKDEV see the original name
 24533                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24534                                  	; 16/12/2022
 24535                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 24536 00003E5D E8AB00                  	CALL	CHKDEV
 24537 00003E60 722E                    	JC	short InternalError
 24538                                  
 24539                                  Build_devJ:
 24540 00003E62 A0[6D05]                	MOV	AL,[SATTRIB]
 24541 00003E65 A2[6B05]                	MOV	[ATTRIB],AL
 24542                                  	;mov	byte [EXTERR_LOCUS],1
 24543 00003E68 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 24544                                  					; "finding" a char device
 24545                                  					; set LOCUS to Unknown. This makes
 24546                                  					; certain idiotic problems reported
 24547                                  					; by a certain 3 letter OEM go away.
 24548                                  
 24549                                  ; Take name in name1 and pack it back into where wfp_start points. This
 24550                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 24551                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 24552                                  ; wfp into the share set.
 24553                                  ;
 24554                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 24555                                  ; non-space seen +1.  This position is kept in DX.
 24556                                  
 24557                                  ;hkn; SS is DOSDATA
 24558 00003E6D 16                      	push	ss
 24559 00003E6E 07                      	pop	es
 24560                                  
 24561                                  ;hkn; NAME1 is in DOSDATA
 24562 00003E6F BE[4B05]                	mov	si,NAME1
 24563 00003E72 8B3E[B205]              	mov	di,[WFP_START]
 24564 00003E76 89FA                    	mov	dx,di
 24565 00003E78 B90800                  	mov	cx,8			; 8 chars in device name
 24566                                  MoveLoop:
 24567 00003E7B AC                      	lodsb
 24568 00003E7C AA                      	stosb
 24569 00003E7D 3C20                    	cmp	al," "
 24570 00003E7F 7402                    	jz	short NoSave
 24571                                  
 24572 00003E81 89FA                    	mov	dx,di
 24573                                  NoSave:
 24574 00003E83 E2F6                    	loop	MoveLoop
 24575                                  
 24576                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 24577                                  ; at this point.
 24578                                  
 24579 00003E85 89D7                    	mov	di,dx
 24580 00003E87 C60500                  	mov	byte [di],0		; end of string
 24581 00003E8A E8C502                  	call	Build_device_ent	; Clears carry sets zero
 24582 00003E8D FEC0                    	INC	AL			; reset zero
 24583 00003E8F C3                      	retn
 24584                                  
 24585                                  InternalError:
 24586                                  InternalError_loop:
 24587 00003E90 EBFE                    	JMP	short InternalError_loop	; freeze
 24588                                  
 24589                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 24590                                  
 24591                                  CrackIt:
 24592 00003E92 8B36[B605]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 24593 00003E96 83FEFF                  	CMP	SI,-1			; valid?
 24594 00003E99 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 24595 00003E9B 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 24596                                  LOOK_SING:
 24597                                  	;mov	byte [ATTRIB],16h
 24598 00003E9E C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 24599                                  					; Attributes to search through Dirs
 24600 00003EA3 C43E[A205]              	LES	DI,[THISCDS]
 24601 00003EA7 B8FFFF                  	MOV	AX,-1
 24602                                  	;mov	bx,[es:di+73]
 24603 00003EAA 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 24604 00003EAE 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 24605                                  
 24606                                  ; AX = -1
 24607                                  ; BX = cluster number of current directory. THis number is -1 if the media
 24608                                  ;      has been uncertainly changed.
 24609                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 24610                                  ;      may be -1 if no current directory part has been used.
 24611                                  
 24612 00003EB2 39C6                    	CMP	SI,AX			; if Current directory is not part
 24613 00003EB4 743B                    	JZ	short NO_CURR_D		; then we must crack from root
 24614 00003EB6 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 24615                                  
 24616                                  ; DOS 3.3  6/25/86
 24617 00003EB8 7437                    	JZ	short NO_CURR_D		; no, crack form the root
 24618                                  	;test	byte [FastOpenFlg],1
 24619 00003EBA F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 24620 00003EBF 743D                    	JZ	short GOT_SEARCH_CLUSTER	; no
 24621 00003EC1 06                      	PUSH	ES			; save registers
 24622 00003EC2 57                      	PUSH	DI
 24623 00003EC3 51                      	PUSH	CX
 24624 00003EC4 FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 24625 00003EC7 56                      	PUSH	SI
 24626 00003EC8 53                      	PUSH	BX
 24627                                  
 24628 00003EC9 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 24629 00003ECD 8B36[B205]              	MOV	SI,[WFP_START]
 24630                                  
 24631                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 24632 00003ED1 BB[300D]                	MOV	BX,FastOpenTable
 24633 00003ED4 BF[460D]                	MOV	DI,Dir_Info_Buff
 24634 00003ED7 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24635                                  	;mov	al,1
 24636 00003EDA B001                    	MOV	AL,FONC_Look_up
 24637 00003EDC 1E                      	PUSH	DS
 24638 00003EDD 07                      	POP	ES
 24639                                  	;call	far [BX+2]
 24640 00003EDE FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 24641 00003EE1 7203                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 24642                                  					; Go to Got_Srch_cluster
 24643                                  	; 29/12/2022
 24644                                  	;CMP	BYTE [SI],0		;fastopen has current dir info?
 24645                                  	;JE	short GO_Chk_end	;yes. Go to got_search_cluster
 24646                                  	;stc
 24647                                  	;jmp	short GO_Chk_end	;Go to No_Curr_D
 24648                                  
 24649 00003EE3 803C01                  	cmp	byte [si],1
 24650                                  GO_Chk_end1:	; 29/12/2022
 24651 00003EE6 F5                      	cmc 
 24652                                  	; [si] = 0 -> cf = 0
 24653                                  	; [si] > 0 -> cf = 1
 24654                                  
 24655                                  ;GO_Chk_end1:
 24656                                  	; 29/12/2022
 24657                                  	;clc
 24658                                  
 24659                                  GO_Chk_end:				; restore registers
 24660 00003EE7 5B                      	POP	BX
 24661 00003EE8 5E                      	POP	SI
 24662 00003EE9 8F44FF                  	POP	word [SI-1]
 24663 00003EEC 59                      	POP	CX
 24664 00003EED 5F                      	POP	DI
 24665 00003EEE 07                      	POP	ES
 24666 00003EEF 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 24667                                  
 24668                                  ; DOS 3.3  6/25/86
 24669                                  ;
 24670                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 24671                                  ; of path and go crack from root.
 24672                                  
 24673                                  NO_CURR_D:
 24674 00003EF1 8B36[B205]              	MOV	SI,[WFP_START]
 24675 00003EF5 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 24676 00003EF8 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24677 00003EFC EB3B                    	JMP	short ROOTPATH
 24678                                  
 24679                                  ; We are able to crack from the current directory part. Go set up for search
 24680                                  ; of specified cluster.
 24681                                  
 24682                                  GOT_SEARCH_CLUSTER:
 24683 00003EFE C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24684 00003F02 E8DCFE                  	call	SETDIRSRCH
 24685                                  	;JC	short SETFERR
 24686                                  	;JMP	short FINDPATH
 24687                                  	; 16/12/2022
 24688 00003F05 7343                    	jnc	short FINDPATH ; 17/08/2018
 24689                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24690                                  	;JC	short SETFERR
 24691                                  	;JMP	short FINDPATH
 24692                                  SETFERR:
 24693 00003F07 30C9                    	XOR	CL,CL			; set zero
 24694 00003F09 F9                      	STC
 24695 00003F0A C3                      	retn
 24696                                  
 24697                                  ;---------------------------------------------------------------------------
 24698                                  ;
 24699                                  ; Procedure Name : ChkDev
 24700                                  ;
 24701                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 24702                                  ;   device.
 24703                                  ; Blasts CX,SI,DI,AX,BX
 24704                                  ;---------------------------------------------------------------------------
 24705                                  
 24706                                  CHKDEV:
 24707 00003F0B 89FE                    	MOV	SI,DI
 24708 00003F0D 8CD7                    	MOV	DI,SS
 24709 00003F0F 8EC7                    	MOV	ES,DI
 24710                                  
 24711 00003F11 BF[4B05]                	MOV	DI,NAME1
 24712 00003F14 B90900                  	MOV	CX,9
 24713                                  TESTLOOP:
 24714 00003F17 E85B10                  	call	GETLET
 24715                                  
 24716 00003F1A 3C2E                    	CMP	AL,'.'
 24717 00003F1C 740E                    	JZ	short TESTDEVICE
 24718 00003F1E E8AA10                  	call	PATHCHRCMP
 24719 00003F21 7407                    	JZ	short NOTDEV
 24720 00003F23 08C0                    	OR	AL,AL
 24721 00003F25 7405                    	JZ	short TESTDEVICE
 24722                                  
 24723 00003F27 AA                      	STOSB
 24724 00003F28 E2ED                    	LOOP	TESTLOOP
 24725                                  NOTDEV:
 24726 00003F2A F9                      	STC
 24727 00003F2B C3                      	retn
 24728                                  
 24729                                  TESTDEVICE:
 24730                                  	;ADD	CX,2
 24731                                  	; 23/09/2023
 24732 00003F2C 41                      	inc	cx
 24733 00003F2D 41                      	inc	cx
 24734 00003F2E B020                    	MOV	AL,' '
 24735 00003F30 F3AA                    	REP	STOSB
 24736 00003F32 8CD0                    	MOV	AX,SS
 24737 00003F34 8ED8                    	MOV	DS,AX
 24738                                  	;call	DEVNAME
 24739                                  	;retn
 24740                                  	; 18/12/2022
 24741 00003F36 E9BA01                  	jmp	DEVNAME
 24742                                  
 24743                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 24744                                  ;----------------------------------------------------------------------------
 24745                                  ;
 24746                                  ; Procedure Name : ROOTPATH,FINDPATH
 24747                                  ;
 24748                                  ; Inputs:
 24749                                  ;	Same as FINDPATH but,
 24750                                  ;	SI Points to asciz string of path which is assumed to start at
 24751                                  ;		the root (no leading '/').
 24752                                  ; Function:
 24753                                  ;	Search from root for path
 24754                                  ; Outputs:
 24755                                  ;	Same as FINDPATH but:
 24756                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 24757                                  ;	[NoSetDir] is ignored.
 24758                                  ;----------------------------------------------------------------------------
 24759                                  
 24760                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24761                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 24762                                  
 24763                                  ROOTPATH:
 24764 00003F39 E8E0FE                  	call	SETROOTSRCH
 24765 00003F3C 803C00                  	CMP	BYTE [SI],0
 24766 00003F3F 7509                    	JNZ	short FINDPATH
 24767                                  
 24768                                  ; Root dir specified
 24769 00003F41 A0[6D05]                	MOV	AL,[SATTRIB]
 24770 00003F44 A2[6B05]                	MOV	[ATTRIB],AL
 24771 00003F47 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 24772                                  					; (dir), clears carry.
 24773 00003F49 C3                      	retn
 24774                                  
 24775                                  ; Inputs:
 24776                                  ;	[ATTRIB] Set to get through directories
 24777                                  ;	[SATTRIB] Set to find last element
 24778                                  ;	ES:BP Points to DPB
 24779                                  ;	SI Points to asciz string of path (no leading '/').
 24780                                  ;	[SECCLUSPOS] = 0
 24781                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 24782                                  ;	[CLUSNUM] = Cluster # of next cluster
 24783                                  ;	[CLUSFAC] = Sectors per cluster
 24784                                  ;	[NoSetDir] set
 24785                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24786                                  ;		( = -1 if current dir not involved, else
 24787                                  ;		 Points to first char after last "/" of current dir part)
 24788                                  ;	[THISCDS] Points to CDS being used
 24789                                  ;	[CREATING] and [DELALL] set
 24790                                  ; Function:
 24791                                  ;	Parse path name
 24792                                  ; Outputs:
 24793                                  ;	ID1 field of [THISCDS] updated appropriately
 24794                                  ;	[ATTRIB] = [SATTRIB]
 24795                                  ;	ES:BP Points to DPB
 24796                                  ;	[THISDPB] = ES:BP
 24797                                  ;	Carry set if bad path
 24798                                  ;	   SI Points to path element causing failure
 24799                                  ;	   Zero set
 24800                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24801                                  ;	      start a search on the last directory
 24802                                  ;	      CL is zero if there is a bad name in the path
 24803                                  ;	      CL is non-zero if the name was simply not found
 24804                                  ;		 [ENTFREE] may have free spot in directory
 24805                                  ;		 [NAME1] is the name.
 24806                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24807                                  ;	   Zero reset
 24808                                  ;	      File in middle of path or bad name in path
 24809                                  ;		or path too long or malformed path
 24810                                  ;	ELSE
 24811                                  ;	   [CURBUF] contains directory record with match
 24812                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24813                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 24814                                  ;	   [NAME1] Has name looked for
 24815                                  ;	   AH = device ID
 24816                                  ;	      bit 7 of AH set if device SI and BX
 24817                                  ;	      will point DOSGROUP relative The firclus
 24818                                  ;	      field of the device entry contains the device pointer
 24819                                  ;	   If last element is a directory zero is set and:
 24820                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24821                                  ;	      are set up to start a search on it,
 24822                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24823                                  ;	      like that for a file (except for zero flag)
 24824                                  ;	   If last element is a file zero is reset
 24825                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24826                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24827                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24828                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24829                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24830                                  ; Destroys all other registers
 24831                                  
 24832                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24833                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 24834                                  
 24835                                      	;entry	FINDPATH
 24836                                  FINDPATH:
 24837 00003F4A 06                      	PUSH	ES			; Save ES:BP
 24838 00003F4B 56                      	PUSH	SI
 24839 00003F4C 89F7                    	MOV	DI,SI
 24840 00003F4E 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 24841 00003F52 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 24842 00003F57 740E                    	JZ	short NOIDS		; No current dir part
 24843 00003F59 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24844 00003F5D 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24845 00003F5F C43E[A205]              	LES	DI,[THISCDS]
 24846                                  	;mov	[es:di+73],cx
 24847 00003F63 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 24848                                  NOIDS:
 24849                                  
 24850                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24851                                  ; character in the string. CX,DI may be destroyed.
 24852                                  ;
 24853                                  ;	invoke	NAMETRANS
 24854                                  ;	MOV	CL,AL
 24855                                  ;
 24856                                  ; The above is the slow method. The name has *already* been munged by
 24857                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24858                                  ; the name until ., \ or 0 is hit.
 24859                                  
 24860 00003F67 8CD0                    	MOV	AX,SS
 24861 00003F69 8EC0                    	MOV	ES,AX
 24862                                  
 24863                                  ;hkn; Name1 is in DOSDATA
 24864 00003F6B BF[4B05]                	MOV	DI,NAME1
 24865 00003F6E B82020                  	MOV	AX,'  ' ; 2020h
 24866 00003F71 AA                      	STOSB
 24867 00003F72 AB                      	STOSW
 24868 00003F73 AB                      	STOSW
 24869 00003F74 AB                      	STOSW
 24870 00003F75 AB                      	STOSW
 24871 00003F76 AB                      	STOSW
 24872                                  
 24873                                  ;hkn; Name1 is in DOSDATA
 24874 00003F77 BF[4B05]                	MOV	DI,NAME1
 24875 00003F7A 30E4                    	XOR	AH,AH			; bits for CL
 24876                                  GetNam:
 24877                                  	; 19/05/2019 - Retro DOS v4.0
 24878                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24879                                  
 24880                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24881                                  	; 16/12/2022
 24882                                  	;inc	cl ; not required !	
 24883                                  	
 24884 00003F7C AC                      	LODSB
 24885 00003F7D 3C2E                    	CMP	AL,'.'	; 2Eh
 24886 00003F7F 7412                    	JZ	short _SetExt
 24887 00003F81 08C0                    	OR	AL,AL
 24888 00003F83 7424                    	JZ	short _GetDone
 24889 00003F85 3C5C                    	CMP	AL,'\'	; 5Ch
 24890 00003F87 7420                    	JZ	short _GetDone
 24891 00003F89 3C3F                    	CMP	AL,'?'	; 3Fh
 24892 00003F8B 7503                    	JNZ	short StoNam
 24893 00003F8D 80CC01                  	OR	AH,1
 24894                                  StoNam: 
 24895 00003F90 AA                      	STOSB
 24896 00003F91 EBE9                    	JMP	short GetNam
 24897                                  _SetExt:
 24898 00003F93 BF[5305]                	MOV	DI,NAME1+8
 24899                                  GetExt:
 24900 00003F96 AC                      	LODSB
 24901 00003F97 08C0                    	OR	AL,AL
 24902 00003F99 740E                    	JZ	short _GetDone
 24903 00003F9B 3C5C                    	CMP	AL,'\'
 24904 00003F9D 740A                    	JZ	short _GetDone
 24905 00003F9F 3C3F                    	CMP	AL,'?'
 24906 00003FA1 7503                    	JNZ	short StoExt
 24907 00003FA3 80CC01                  	OR	AH,1
 24908                                  StoExt: 
 24909 00003FA6 AA                      	STOSB
 24910 00003FA7 EBED                    	JMP	short GetExt
 24911                                  _GetDone:
 24912 00003FA9 4E                      	DEC	SI
 24913 00003FAA 88E1                    	MOV	CL,AH  ; 0 or 1 ; 29/12/2022
 24914 00003FAC 80C980                  	OR	CL,80H
 24915 00003FAF 5F                      	POP	DI			; Start of this element
 24916 00003FB0 07                      	POP	ES			; Restore ES:BP
 24917 00003FB1 39FE                    	CMP	SI,DI
 24918 00003FB3 7503                    	JNZ	short check_device
 24919 00003FB5 E9E200                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 24920                                  check_device:
 24921 00003FB8 56                      	PUSH	SI			; Start of next element
 24922                                  	;MOV	AL,[SI]
 24923                                  	;OR	AL,AL
 24924                                  	; 23/09/2023
 24925 00003FB9 803C00                  	cmp	byte [si],0
 24926 00003FBC 7508                    	JNZ	short NOT_LAST
 24927                                  
 24928                                  ; for last element of the path switch to the correct search attributes
 24929                                  
 24930 00003FBE 8A3E[6D05]              	MOV	BH,[SATTRIB]
 24931 00003FC2 883E[6B05]              	MOV	[ATTRIB],BH
 24932                                  
 24933                                  NOT_LAST:
 24934                                  
 24935                                  ; check name1 to see if we have a device...
 24936                                  
 24937 00003FC6 06                      	PUSH	ES			; Save ES:BP
 24938                                  
 24939                                  ;hkn; SS is DOSDATA
 24940                                  	;context ES
 24941 00003FC7 16                      	push	ss
 24942 00003FC8 07                      	pop	es
 24943 00003FC9 E82701                  	call	DEVNAME 		; blast BX
 24944 00003FCC 07                      	POP	ES			; Restore ES:BP
 24945 00003FCD 720B                    	JC	short FindFile		; Not a device
 24946 00003FCF 08C0                    	OR	AL,AL			; Test next char again
 24947 00003FD1 7403                    	JZ	short GO_BDEV
 24948 00003FD3 E9C800                  	JMP	FILEINPATH		; Device name in middle of path
 24949                                  
 24950                                  GO_BDEV:
 24951 00003FD6 5E                      	POP	SI			; Points to NUL at end of path
 24952 00003FD7 E988FE                  	JMP	Build_devJ
 24953                                  
 24954                                  FindFile:
 24955                                  ;;;; 7/28/86
 24956 00003FDA 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 24957 00003FDF 7505                    	JNZ	short NOE5		; no
 24958 00003FE1 C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 24959                                  NOE5:
 24960                                  ;;;; 7/28/86
 24961 00003FE6 57                      	PUSH	DI			; Start of this element
 24962 00003FE7 06                      	PUSH	ES			; Save ES:BP
 24963 00003FE8 51                      	PUSH	CX			; CL return from NameTrans
 24964                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24965                                  
 24966 00003FE9 E89502                  	CALL	LookupPath		; call fastopen to get dir entry
 24967 00003FEC 7303                    	JNC	short DIR_FOUND		; found dir entry
 24968                                  
 24969                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24970 00003FEE E8B2FC                  	call	FINDENTRY
 24971                                  DIR_FOUND:
 24972 00003FF1 59                      	POP	CX
 24973 00003FF2 07                      	POP	ES
 24974 00003FF3 5F                      	POP	DI
 24975 00003FF4 7303                    	JNC	short LOAD_BUF
 24976 00003FF6 E9CA00                  	JMP	BADPATHPOP
 24977                                  
 24978                                  LOAD_BUF:
 24979 00003FF9 C53E[E205]              	LDS	DI,[CURBUF]
 24980                                  	;test	byte [bx+0Bh],10h
 24981 00003FFD F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 24982 00004001 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 24983 00004003 E99800                  	JMP	FILEINPATH		; Error or end of path
 24984                                  
 24985                                  ; if we are not setting the directory, then check for end of string
 24986                                  
 24987                                  GO_NEXT:
 24988                                  ;hkn; SS override
 24989 00004006 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 24990 0000400C 7423                    	JZ	short SetDir
 24991 0000400E 89FA                    	MOV	DX,DI			; Save pointer to entry
 24992 00004010 8CD9                    	MOV	CX,DS
 24993                                  
 24994                                  ;hkn; SS is DOSDATA
 24995                                  	;context DS
 24996 00004012 16                      	push	ss
 24997 00004013 1F                      	pop	ds
 24998 00004014 5F                      	POP	DI			; Start of next element
 24999                                  	; 19/05/2019 - Retro DOS v4.0
 25000                                  	; MSDOS 6.0
 25001 00004015 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25002 0000401A 740B                    	JZ	short _nofast			; the FastOpen
 25003 0000401C F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 25004 00004021 7404                    	JZ	short _nofast			; no
 25005 00004023 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 25006                                  _nofast:
 25007 00004027 803D00                  	CMP	BYTE [DI],0
 25008                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 25009                                  	;;JMP	_SETRET  ; retn		; Got it
 25010                                  	;retn	; 05/09/2018
 25011                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25012                                  	;jmp	_SETRET
 25013                                  	; 16/12/2022
 25014 0000402A 7421                    	jz	short _SETRET
 25015                                  
 25016                                  NEXT_ONE:
 25017 0000402C 57                      	PUSH	DI			; Put start of next element back on stack
 25018 0000402D 89D7                    	MOV	DI,DX
 25019 0000402F 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 25020                                  SetDir:
 25021 00004031 8B14                    	MOV	DX,[SI] 		; Dir_first
 25022                                  
 25023                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25024 00004033 1E                      	PUSH	DS		      ; save [curbuf+2]
 25025                                  ;hkn; SS is DOSDATA
 25026 00004034 16                      	push	ss
 25027 00004035 1F                      	pop	ds		      ; set DS Dosgroup
 25028                                  	;test	byte [FastOpenFlg],2
 25029 00004036 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 25030 0000403B 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 25031 0000403D 89D3                    	MOV	BX,DX		      ; not found
 25032 0000403F 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 25033 00004043 50                      	PUSH	AX		      ; save device id (AH)
 25034 00004044 E89AFD                  	call	SETDIRSRCH
 25035 00004047 58                      	POP	AX		      ; restore device id (AH)
 25036 00004048 83C402                  	ADD	SP,2		      ; pop ds in stack
 25037 0000404B EB37                    	JMP	short FAST_OPEN_SKIP
 25038                                  
 25039                                  	; 16/12/2022
 25040                                  _SETRET:
 25041 0000404D C3                      	retn
 25042                                  
 25043                                  DO_NORMAL:
 25044 0000404E 1F                      	POP	DS			; DS = [curbuf + 2]
 25045                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25046                                  
 25047 0000404F 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 25048 00004051 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 25049 00004053 53                      	PUSH	BX
 25050 00004054 50                      	PUSH	AX
 25051 00004055 56                      	PUSH	SI
 25052 00004056 51                      	PUSH	CX
 25053                                  	;push	word [di+6]
 25054 00004057 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 25055                                  	; 19/05/2019
 25056                                  	; MSDOS 6.0
 25057                                  	;push	word [di+8]
 25058 0000405A FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 25059 0000405D 89D3                    	MOV	BX,DX
 25060                                  
 25061                                  ;hkn; SS is DOSDATA
 25062                                  	;context DS
 25063 0000405F 16                      	push	ss
 25064 00004060 1F                      	pop	ds
 25065                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 25066 00004061 E87DFD                  	call	SETDIRSRCH		; the entry sector buffer
 25067                                  	; 19/05/2019
 25068                                  	; MSDOS 6.0
 25069 00004064 8F06[0706]              	POP	word [HIGH_SECTOR]
 25070 00004068 5A                      	POP	DX
 25071 00004069 7203                    	JC	short SKIP_GETB
 25072                                  	; 22/09/2023
 25073                                  	;;mov	byte [ALLOWED],18h
 25074                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 25075                                  	;XOR	AL,AL ; *
 25076                                  	;;invoke GETBUFFR		; Get the entry buffer back
 25077                                  	;call	GETBUFFR
 25078 0000406B E80B18                  	call	GETBUFFER ; * ; pre-read
 25079                                  SKIP_GETB:
 25080 0000406E 59                      	POP	CX
 25081 0000406F 5E                      	POP	SI
 25082 00004070 58                      	POP	AX
 25083 00004071 5B                      	POP	BX
 25084 00004072 7305                    	JNC	short SET_THE_BUF
 25085 00004074 5F                      	POP	DI			; Start of next element
 25086 00004075 89FE                    	MOV	SI,DI			; Point with SI
 25087 00004077 EB21                    	JMP	SHORT _BADPATH
 25088                                  
 25089                                  SET_THE_BUF:
 25090 00004079 E89AF5                  	call	SET_BUF_AS_DIR
 25091 0000407C 8B3E[E205]              	MOV	DI,[CURBUF]
 25092 00004080 01FE                    	ADD	SI,DI			; Get the offsets back
 25093 00004082 01FB                    	ADD	BX,DI
 25094                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 25095                                  FAST_OPEN_SKIP:
 25096 00004084 5F                      	POP	DI			; Start of next element
 25097 00004085 E89D02                  	CALL	InsertPath		; insert dir entry info
 25098                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 25099 00004088 8A05                    	MOV	AL,[DI]
 25100 0000408A 08C0                    	OR	AL,AL
 25101 0000408C 74BF                    	JZ	short _SETRET		; At end
 25102 0000408E 47                      	INC	DI			; Skip over "/"
 25103 0000408F 89FE                    	MOV	SI,DI			; Point with SI
 25104 00004091 E8370F                  	call	PATHCHRCMP
 25105 00004094 7503                    	JNZ	short find_bad_name	; oops
 25106 00004096 E9B1FE                  	JMP	FINDPATH		; Next element
 25107                                  
 25108                                  find_bad_name:
 25109 00004099 4E                      	DEC	SI			; Undo above INC to get failure point
 25110                                  _BADPATH:
 25111 0000409A 30C9                    	XOR	CL,CL			; Set zero
 25112 0000409C EB2C                    	JMP	SHORT BADPRET
 25113                                  
 25114                                  FILEINPATH:
 25115 0000409E 5F                      	POP	DI			; Start of next element
 25116                                  
 25117                                  ;hkn; SS is DOSDATA
 25118                                  	;context DS			; Got to from one place with DS gone
 25119 0000409F 16                      	push	ss
 25120 000040A0 1F                      	pop	ds
 25121                                  
 25122                                  ; DOS 3.3 FastOpen
 25123                                  	;test	byte [FastOpenFlg],1
 25124 000040A1 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 25125 000040A6 740B                    	JZ	short NO_FAST		; device info to fastopen
 25126                                  	;test	byte [FastOpenFlg],2
 25127 000040A8 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 25128 000040AD 7404                    	JZ	short NO_FAST
 25129 000040AF 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 25130                                  					 ; success
 25131                                  NO_FAST:
 25132                                  ; DOS 3.3 FastOpen
 25133 000040B3 8A05                    	MOV	AL,[DI]
 25134 000040B5 08C0                    	OR	AL,AL
 25135 000040B7 7404                    	JZ	short INCRET
 25136 000040B9 89FE                    	MOV	SI,DI			; Path too long
 25137 000040BB EB0D                    	JMP	SHORT BADPRET
 25138                                  
 25139                                  INCRET:
 25140                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25141                                  
 25142 000040BD E86502                  	CALL   InsertPath		; insert dir entry info
 25143                                  
 25144                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25145 000040C0 FEC0                    	INC	AL			; Reset zero
 25146                                  	; 16/12/2022	
 25147                                  ;_SETRET:
 25148 000040C2 C3                      	retn
 25149                                  
 25150                                  BADPATHPOP:
 25151 000040C3 5E                      	POP	SI			; Start of next element
 25152 000040C4 8A04                    	MOV	AL,[SI]
 25153 000040C6 89FE                    	MOV	SI,DI			; Start of bad element
 25154 000040C8 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 25155                                  BADPRET:
 25156 000040CA A0[6D05]                	MOV	AL,[SATTRIB]
 25157 000040CD A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 25158 000040D0 F9                      	STC
 25159 000040D1 C3                      	retn
 25160                                  
 25161                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 25162                                  ;---------------------------------------------------------------------------
 25163                                  ;
 25164                                  ; Procedure Name : STARTSRCH
 25165                                  ;
 25166                                  ; Inputs:
 25167                                  ;	[THISDPB] Set
 25168                                  ; Function:
 25169                                  ;	Set up a search for GETENTRY and NEXTENTRY
 25170                                  ; Outputs:
 25171                                  ;	ES:BP = Drive parameters
 25172                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 25173                                  ; Destroys ES,BP,AX
 25174                                  ;--------------------------------------------------------------------------
 25175                                  
 25176                                  STARTSRCH:
 25177 000040D2 C42E[8A05]              	LES	BP,[THISDPB]
 25178 000040D6 31C0                    	XOR	AX,AX
 25179 000040D8 A3[4803]                	MOV	[LASTENT],AX
 25180 000040DB A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 25181 000040DE 48                      	DEC	AX
 25182 000040DF A3[D805]                	MOV	[ENTFREE],AX
 25183 000040E2 A3[DA05]                	MOV	[ENTLAST],AX
 25184 000040E5 C3                      	retn
 25185                                  
 25186                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 25187                                  ;----------------------------------------------------------------------------
 25188                                  ; Procedure Name : MatchAttributes
 25189                                  ;
 25190                                  ; Input:    [Attrib] = attribute to search for
 25191                                  ;	    CH = found attribute
 25192                                  ; Output:   JZ <match>
 25193                                  ;	    JNZ <nomatch>
 25194                                  ; Registers modified: noneski
 25195                                  ;----------------------------------------------------------------------------
 25196                                  
 25197                                  MatchAttributes:
 25198 000040E6 50                      	PUSH	AX
 25199                                  
 25200                                  ;hkn; SS override
 25201 000040E7 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 25202 000040EB F6D0                    	NOT	AL			; AL <- SearchSet'
 25203 000040ED 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 25204                                  	;and	al,16h
 25205 000040EF 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 25206                                  ;
 25207                                  ; the result is non-zero if an attribute is not in the search set
 25208                                  ; and in the found set and in the important set. This means that we do not
 25209                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 25210                                  ;
 25211 000040F1 58                      	POP	AX
 25212 000040F2 C3                      	retn
 25213                                  
 25214                                  ; 19/05/2019 - Retro DOS v4.0
 25215                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 25216                                  
 25217                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25218                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 25219                                  
 25220                                  ;Break <DevName - Look for name of device>
 25221                                  ;---------------------------------------------------------------------------
 25222                                  ;
 25223                                  ; Procedure Name : DevName
 25224                                  ;
 25225                                  ; Inputs:
 25226                                  ;	DS,ES:DOSDATA
 25227                                  ;	Filename in NAME1
 25228                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 25229                                  ; Function:
 25230                                  ;	Determine if file is in list of I/O drivers
 25231                                  ; Outputs:
 25232                                  ;	Carry set if not a device
 25233                                  ;	ELSE
 25234                                  ;	Zero flag set
 25235                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 25236                                  ;	     bits 0-4 set from low byte of attribute word
 25237                                  ;	DEVPT = DWORD pointer to Device header of device
 25238                                  ; BX destroyed, others preserved
 25239                                  ;---------------------------------------------------------------------------
 25240                                  
 25241                                  DEVNAME:
 25242                                  	; 28/07/2018 - Retro DOS v3.0
 25243                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 25244                                  
 25245 000040F3 56                      	PUSH	SI
 25246 000040F4 57                      	PUSH	DI
 25247 000040F5 51                      	PUSH	CX
 25248 000040F6 50                      	PUSH	AX
 25249                                  
 25250                                  ; E5 special code
 25251 000040F7 FF36[4B05]              	PUSH	WORD [NAME1]
 25252 000040FB 803E[4B05]05            	CMP	byte [NAME1],5
 25253 00004100 7505                    	JNZ	short NOKTR
 25254 00004102 C606[4B05]E5            	MOV	byte [NAME1],0E5h
 25255                                  NOKTR:
 25256                                  	;test	byte [ATTRIB],8
 25257 00004107 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 25258                                  					; If looking for VOL id don't find devs
 25259 0000410C 7521                    	JNZ	short RET31
 25260                                  
 25261                                  ;hkn; NULDEV is in DOSDATA
 25262 0000410E BE[4800]                	MOV	SI,NULDEV
 25263                                  LOOKIO:
 25264                                  	; 21/11/2022
 25265                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 25266                                  	; 17/12/2022
 25267                                  	;test	byte [si+5],80h
 25268 00004111 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25269                                  	;;test	word [si+4],8000h
 25270                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25271 00004115 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 25272 00004117 89F0                    	MOV	AX,SI
 25273                                  	;add	si,10
 25274 00004119 83C60A                  	ADD	SI,SYSDEV.NAME
 25275                                  
 25276                                  ;hkn; NAME1 is in DOSDATA
 25277 0000411C BF[4B05]                	MOV	DI,NAME1
 25278 0000411F B90400                  	MOV	CX,4			; All devices are 8 letters
 25279 00004122 F3A7                    	REPE	CMPSW			; Check for name in list
 25280 00004124 89C6                    	MOV	SI,AX
 25281 00004126 7415                    	JZ	short IOCHK		; Found it?
 25282                                  SKIPDEV:
 25283 00004128 C534                    	LDS	SI,[SI]			; Get address of next device
 25284 0000412A 83FEFF                  	CMP	SI,-1			; At end of list?
 25285 0000412D 75E2                    	JNZ	short LOOKIO
 25286                                  RET31:	
 25287 0000412F F9                      	STC				; Not found
 25288                                  RETNV:	
 25289 00004130 8CD1                    	MOV	CX,SS
 25290 00004132 8ED9                    	MOV	DS,CX
 25291                                  
 25292 00004134 8F06[4B05]              	POP	WORD [NAME1]
 25293 00004138 58                      	POP	AX
 25294 00004139 59                      	POP	CX
 25295 0000413A 5F                      	POP	DI
 25296 0000413B 5E                      	POP	SI
 25297 0000413C C3                      	RETN
 25298                                  
 25299                                  IOCHK:
 25300                                  ;hkn; SS override for DEVPT
 25301 0000413D 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 25302                                  	;mov	bh,[si+4]
 25303 00004142 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 25304 00004145 80CFC0                  	OR	BH,0C0h
 25305 00004148 80E7DF                  	and	bh,0DFh
 25306                                  	;AND	BH,~(020h)		; Clears Carry
 25307 0000414B 368936[9A05]            	MOV	[SS:DEVPT],SI
 25308 00004150 EBDE                    	JMP	short RETNV
 25309                                  
 25310                                  ;BREAK <Build_device_ent - Make a Directory entry>
 25311                                  ;---------------------------------------------------------------------------
 25312                                  ; Procedure Name : Build_device_ent
 25313                                  ;
 25314                                  ; Inputs:
 25315                                  ;	[NAME1] has name
 25316                                  ;	BH is attribute field (supplied by DEVNAME)
 25317                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 25318                                  ; Function:
 25319                                  ;	Build a directory entry for a device at DEVFCB
 25320                                  ; Outputs:
 25321                                  ;	BX points to DEVFCB
 25322                                  ;	SI points to dir_first field
 25323                                  ;	AH = input BH
 25324                                  ;	AL = 0
 25325                                  ;	dir_first = DEVPT
 25326                                  ;	Zero Set, Carry Clear
 25327                                  ; DS,ES,BP preserved, others destroyed
 25328                                  ;--------------------------------------------------------------------------
 25329                                  
 25330                                  Build_device_ent:
 25331 00004152 B82020                  	MOV	AX,"  " ; 2020h
 25332                                  
 25333                                  ;hkn; DEVFCB is in DOSDATA
 25334 00004155 BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 25335                                  
 25336                                  ;	Fill dir_ext  BUGBUG - use ERRNZs for this stuff!
 25337                                  
 25338 00004158 AB                      	STOSW
 25339 00004159 AA                      	STOSB				; Blank out extent field
 25340                                  	;mov	al,40h
 25341 0000415A B040                    	MOV	AL,attr_device
 25342                                  
 25343                                  ;	Fill Dir_attr
 25344                                  
 25345 0000415C AA                      	STOSB				; Set attribute field
 25346 0000415D 31C0                    	XOR	AX,AX
 25347 0000415F B90A00                  	MOV	CX,10
 25348                                  
 25349                                  ; Fill dir_pad
 25350                                  
 25351 00004162 F3AB                    	REP	STOSW			; Fill rest with zeros
 25352 00004164 E884C9                  	call	DATE16
 25353                                  
 25354                                  ;hkn; DEVFCB is in DOSDATA
 25355 00004167 BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 25356 0000416A 92                      	XCHG	AX,DX
 25357                                  
 25358                                  ; Fill dir_time
 25359                                  
 25360 0000416B AB                      	STOSW
 25361 0000416C 92                      	XCHG	AX,DX
 25362                                  
 25363                                  ; Fill dir_date
 25364                                  
 25365 0000416D AB                      	STOSW
 25366 0000416E 89FE                    	MOV	SI,DI			; SI points to dir_first field
 25367 00004170 A1[9A05]                	MOV	AX,[DEVPT]
 25368                                  
 25369                                  ; Fill dir_first
 25370                                  
 25371 00004173 AB                      	STOSW				; Dir_first points to device
 25372 00004174 A1[9C05]                	MOV	AX,[DEVPT+2]
 25373                                  ;
 25374                                  ; Fill dir_size_l
 25375                                  ;
 25376 00004177 AB                      	STOSW
 25377 00004178 88FC                    	MOV	AH,BH			; Put device atts in AH
 25378                                  
 25379                                  ;hkn; DEVFCB is in DOSDATA
 25380 0000417A BB[4B05]                	MOV	BX,DEVFCB
 25381 0000417D 30C0                    	XOR	AL,AL			; Set zero, clear carry
 25382 0000417F C3                      	retn
 25383                                  
 25384                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 25385                                  ;----------------------------------------------------------------------------
 25386                                  ;
 25387                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 25388                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 25389                                  ;   If invalid, reset original CDS to root.
 25390                                  ;
 25391                                  ;   Inputs:	ThisCDS points to CDS of interest
 25392                                  ;		SS:DI points to temp buffer
 25393                                  ;   Outputs:	The current directory string is validated on the appropriate
 25394                                  ;		    drive
 25395                                  ;		ThisDPB changed
 25396                                  ;		ES:DI point to CDS
 25397                                  ;		Carry set if error (currently user FAILed to I 24)
 25398                                  ;   Registers modified: all
 25399                                  ;----------------------------------------------------------------------------
 25400                                  
 25401                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25402                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 25403                                  
 25404                                  ValidateCDS:
 25405                                  	; 19/05/2019 - Retro DOS v4.0
 25406                                  	; 28/07/2018 - Retro DOS v3.0
 25407                                  
 25408                                     %define  Temp	[bp-2]	; word
 25409                                     %define  SaveCDS	[bp-6]	; dword
 25410                                     %define  SaveCDSL	[bp-6]	; word
 25411                                     %define  SaveCDSH	[bp-4]	; word
 25412                                  
 25413                                  	;Enter
 25414 00004180 55                      	push	bp
 25415 00004181 89E5                    	mov	bp,sp
 25416 00004183 83EC06                  	sub	sp,6
 25417                                  
 25418 00004186 897EFE                  	MOV	Temp,DI
 25419                                  
 25420                                  ;hkn; SS override
 25421 00004189 36C536[A205]            	LDS	SI,[SS:THISCDS]
 25422 0000418E 8976FA                  	MOV	SaveCDSL,SI
 25423 00004191 8C5EFC                  	MOV	SaveCDSH,DS
 25424                                  	;EnterCrit critDisk
 25425 00004194 E861D1                  	call	ECritDisk
 25426                                  	; 21/11/2022
 25427                                  	;test	byte [SI+curdir.flags+1],80h
 25428                                  	;test	word [si+67],8000h
 25429                                  	; 17/12/2022
 25430                                  	;test	byte [SI+68],80h
 25431 00004197 F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 25432                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 25433 0000419B 7403                    	JZ	short _DoSplice
 25434 0000419D E99200                  	JMP	FatFail
 25435                                  _DoSplice:
 25436 000041A0 30D2                    	XOR	DL,DL
 25437 000041A2 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 25438                                  
 25439                                  ;hkn; SS is DOSDATA
 25440                                  	;Context ES
 25441 000041A7 16                      	push	ss
 25442 000041A8 07                      	pop	es
 25443                                  	;Invoke	FStrcpy
 25444 000041A9 E821D0                  	call	FStrCpy
 25445 000041AC 8B76FE                  	MOV	SI,Temp
 25446                                  
 25447                                  ;hkn; SS is DOSDATA
 25448                                  	;Context DS
 25449 000041AF 16                      	push	ss
 25450 000041B0 1F                      	pop	ds	
 25451                                  	;Invoke	Splice
 25452 000041B1 E86E2B                  	call	Splice
 25453                                  
 25454                                   ;hkn; SS is DOSDATA
 25455                                  	;Context DS			;   FatReadCDS (ThisCDS);
 25456 000041B4 16                      	push	ss
 25457 000041B5 1F                      	pop	ds
 25458 000041B6 8816[4C03]              	MOV	[NoSetDir],DL
 25459 000041BA C43E[A205]              	LES	DI,[THISCDS]
 25460                                  	;SAVE	<BP>
 25461 000041BE 55                      	push	bp
 25462                                  	;Invoke	FATREAD_CDS
 25463 000041BF E84214                  	call	FATREAD_CDS	
 25464                                  	;RESTORE <BP>
 25465 000041C2 5D                      	pop	bp
 25466 000041C3 726D                    	JC	short FatFail
 25467                                  
 25468 000041C5 C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 25469                                  	;cmp	word [si+73],-1
 25470 000041C9 837C49FF                	CMP	word [SI+curdir.ID],-1
 25471 000041CD 7555                    	JNZ	short RestoreCDS
 25472                                  
 25473                                  ;hkn; SS is DOSDATA
 25474                                  	;Context ES
 25475 000041CF 16                      	push	ss
 25476 000041D0 07                      	pop	es
 25477                                  
 25478                                  ;hkn; SS override
 25479                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 25480 000041D1 36FF36[B205]            	push	word [SS:WFP_START]
 25481                                  	;cmp	si,[bp-6]
 25482 000041D6 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 25483 000041D9 750B                    	JNZ	short DoChdir
 25484                                  	;mov	di,[bp-2]
 25485 000041DB 8B7EFE                  	MOV	DI,Temp
 25486                                  
 25487                                  ;hkn; SS override
 25488 000041DE 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 25489                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 25490 000041E3 E8E7CF                  	call	FStrCpy
 25491                                  DoChdir:
 25492                                  ;hkn; SS is DOSDATA
 25493                                  	;Context DS
 25494 000041E6 16                      	push	ss
 25495 000041E7 1F                      	pop	ds
 25496                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 25497 000041E8 FF36[6D05]              	push	word [SATTRIB]
 25498 000041EC 55                      	push	bp
 25499                                  	;Invoke	DOS_ChDir
 25500 000041ED E83AEF                  	call	DOS_CHDIR
 25501                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 25502 000041F0 5D                      	pop	bp
 25503 000041F1 5B                      	pop	bx
 25504 000041F2 8F06[B205]              	pop	word [WFP_START]
 25505 000041F6 881E[6D05]              	MOV	[SATTRIB],BL
 25506 000041FA C576FA                  	LDS	SI,SaveCDS
 25507 000041FD 730F                    	JNC	short SetCluster	;	if (c == -1) {
 25508                                  
 25509                                  ;hkn; SS override for THISCDS
 25510 000041FF 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 25511 00004204 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 25512 00004209 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 25513 0000420B 884C03                  	MOV	[SI+3],CL		;	    }
 25514                                  SetCluster:
 25515                                  	;mov	word [si+73],0FFFFh
 25516 0000420E C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 25517 00004213 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 25518                                  	; 21/11/2022
 25519                                  	;test	byte [si+curdir.flags+1],20h
 25520                                  	; 19/05/2019
 25521                                  	; MSDOS 6.0
 25522                                  	; 17/12/2022
 25523                                  	;test	byte [si+68],20h
 25524 00004218 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 25525                                  	;;test	word [si+67],2000h
 25526                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 25527 0000421C 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 25528 0000421E B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 25529                                  _setdirclus:
 25530                                  	;mov	[si+73],cx
 25531 00004221 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 25532                                  RestoreCDS:
 25533 00004224 C47EFA                  	LES	DI,SaveCDS
 25534 00004227 36893E[A205]            	MOV	[SS:THISCDS],DI
 25535 0000422C 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 25536 00004231 F8                      	CLC
 25537                                  FatFail:
 25538                                  	;LeaveCrit critDisk
 25539 00004232 E8DED0                  	call	LCritDisk
 25540                                  
 25541                                  	;les	di,[bp-6]
 25542 00004235 C47EFA                  	LES	DI,SaveCDS
 25543                                  	;Leave
 25544 00004238 89EC                    	mov	sp,bp
 25545 0000423A 5D                      	pop	bp
 25546 0000423B C3                      	retn
 25547                                  
 25548                                  ; 28/07/2018 - Retro DOS v3.0
 25549                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 25550                                  
 25551                                  ;Break	<CheckThisDevice - Check for being a device>
 25552                                  ;---------------------------------------------------------------------------
 25553                                  ;
 25554                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 25555                                  ;   device specified. We will return carry if there is a device present. 
 25556                                  ;   The forms of devices we will recognize are:
 25557                                  ;
 25558                                  ;	[path]device
 25559                                  ;
 25560                                  ;   Note that the drive letter has *already* been removed. All other forms
 25561                                  ;   are not considered to be devices. If such a device is found we change
 25562                                  ;   the source pointer to point to the device component.
 25563                                  ;
 25564                                  ;   Inputs:	ES is DOSDATA
 25565                                  ;		DS:SI contains name
 25566                                  ;   Outputs:	ES is DOSDATA
 25567                                  ;		DS:SI point to name or device
 25568                                  ;		Carry flag set if device was found
 25569                                  ;		Carry flag reset otherwise
 25570                                  ;   Registers Modified: all except ES:DI, DS
 25571                                  ;----------------------------------------------------------------------------
 25572                                  
 25573                                  CheckThisDevice:
 25574 0000423C 57                      	push	di
 25575 0000423D 56                      	push	si
 25576 0000423E 89F7                    	MOV	DI,SI
 25577                                  
 25578                                  ; Check for presence of \dev\ (Dam multiplan!)
 25579                                  
 25580 00004240 8A04                    	MOV	AL,[SI]
 25581 00004242 E8860D                  	call	PATHCHRCMP		; is it a path char?
 25582 00004245 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 25583 00004247 46                      	INC	SI			; simulate LODSB
 25584                                  
 25585                                  ; We have the leading path separator. Look for DEV part.
 25586                                  
 25587 00004248 AD                      	LODSW
 25588 00004249 0D2020                  	OR	AX,2020h
 25589 0000424C 3D6465                  	cmp	ax,"de"
 25590                                  	;CMP	AX,"e"<< 8 + "d"
 25591 0000424F 752D                    	JNZ	short NotDevice		; not "de", assume not device
 25592 00004251 AC                      	LODSB
 25593 00004252 0C20                    	OR	AL,20h
 25594 00004254 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 25595 00004256 7526                    	JNZ	short NotDevice
 25596 00004258 AC                      	LODSB
 25597 00004259 E86F0D                  	call	PATHCHRCMP		; do we have the last path separator?
 25598 0000425C 7520                    	JNZ	short NotDevice		; no. go for it.
 25599                                  
 25600                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 25601                                  ; SI and DevName may destroy DS.
 25602                                  
 25603                                  ParseDev:
 25604 0000425E 1E                      	push	ds
 25605 0000425F 56                      	push	si			; preserve the source pointer
 25606 00004260 E8A60C                  	call	NameTrans		; advance DS:SI
 25607 00004263 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 25608 00004266 F9                      	STC				; simulate a Carry return from DevName
 25609 00004267 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 25610                                  
 25611                                  ;hkn; SS is DOSDATA
 25612 00004269 16                      	push	ss
 25613 0000426A 1F                      	pop	ds
 25614                                  
 25615                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 25616                                  ;
 25617                                  ; SR;
 25618                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 25619                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 25620                                  ; old call set the volume attribute bit.
 25621                                  
 25622 0000426B A0[6D05]                	mov	al,[SATTRIB]
 25623 0000426E A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 25624                                  
 25625                                  ; M026 - end
 25626                                  
 25627 00004271 E87FFE                  	call	DEVNAME
 25628                                  
 25629                                  SkipSearch:
 25630 00004274 5E                      	pop	si
 25631 00004275 1F                      	pop	ds
 25632                                  
 25633                                  ; SI points to the beginning of the potential device. If we have a device
 25634                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 25635                                  ; original value. At this point Carry set indicates FILE.
 25636                                  
 25637                                  CheckReturn:
 25638 00004276 5F                      	pop	di			; get original SI
 25639 00004277 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 25640 00004279 89FE                    	MOV	SI,DI
 25641                                  Check_Done:
 25642 0000427B 5F                      	pop	di
 25643 0000427C F5                      	CMC				; invert carry. Carry => device
 25644 0000427D C3                      	retn
 25645                                  NotDevice:
 25646 0000427E F9                      	STC
 25647 0000427F EBF5                    	JMP	short CheckReturn
 25648                                  
 25649                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 25650                                  ;-----------------------------------------------------------------------------
 25651                                  ;
 25652                                  ; Procedure Name : LookupPath
 25653                                  ;
 25654                                  ; Output  DS:SI -> path name,
 25655                                  ;	  ES:DI -> dir entry info buffer
 25656                                  ;	  ES:CX -> extended dir info buffer
 25657                                  ;
 25658                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 25659                                  ;			     FastOpen, DS:SI points to char just one after
 25660                                  ;			     the last char of path name which is fully or
 25661                                  ;			     partially found in FastOPen
 25662                                  ;	  carry flag set : FastOpen not in memory or path name not found
 25663                                  ;
 25664                                  ;----------------------------------------------------------------------------
 25665                                  
 25666                                  LookupPath:
 25667                                  ;	PUSH	AX
 25668                                  
 25669                                  ;hkn; SS override
 25670                                  	;test	byte [ss:FastOpenFlg],1
 25671 00004281 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 25672 00004287 7503                    	JNZ	short FASTINST			    ; and this routine is
 25673                                  NOLOOK:
 25674 00004289 E99700                  	JMP	NOLOOKUP			    ; executed once
 25675                                  
 25676                                  FASTINST:
 25677                                  ;hkn; SS override
 25678                                  	;test	byte [ss:FastOpenFlg],8
 25679 0000428C 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 25680 00004292 75F5                    	JNZ	short NOLOOK			    ; yes
 25681                                  
 25682 00004294 BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 25683                                  
 25684                                  ;hkn; SS override
 25685 00004297 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 25686 0000429C BF[460D]                	MOV	DI,Dir_Info_Buff
 25687 0000429F B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 25688 000042A2 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 25689 000042A4 1E                      	PUSH	DS
 25690 000042A5 07                      	POP	ES
 25691                                  
 25692                                  ;hkn; SS override
 25693                                  	;call	far [bx+2]
 25694 000042A6 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 25695 000042A9 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 25696                                  
 25697 000042AB 8D5CFE                  	LEA	BX,[SI-2]
 25698                                  
 25699                                  ;hkn; SS override
 25700 000042AE 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 25701 000042B3 745D                    	JZ	short NOTFOUND			    ; no
 25702                                  
 25703                                  	; 19/05/2019 - Retro DOS v4.0
 25704                                  
 25705                                  	; MSDOS 6.0				    ; fully or partially found
 25706 000042B5 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 25707 000042B8 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 25708 000042BA 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 25709                                  
 25710                                  ;hkn; SS override for attrib/sattrib
 25711 000042BB 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 25712 000042C0 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 25713 000042C5 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 25714                                  	;mov	ch,[es:di+0Bh]
 25715 000042CA 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 25716 000042CE E815FE                  	call	MatchAttributes 		    ;AN000;FO.;
 25717                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 25718 000042D1 59                      	POP	CX				    ;AN000;FO.;
 25719 000042D2 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 25720                                  parfnd:
 25721                                  
 25722                                  ;hkn; SS override
 25723 000042D4 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 25724 000042D9 89CB                    	MOV	BX,CX
 25725                                  	; MSDOS 6.0
 25726                                  	;mov	ax,[bx+7]
 25727 000042DB 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 25728                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 25729 000042DE 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 25730 000042E2 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 25731 000042E5 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 25732                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25733                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 25734                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 25735 000042E9 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 25736 000042EC 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 25737                                  
 25738 000042F0 06                      	PUSH	ES				    ; save ES
 25739                                  ;hkn; SS override
 25740 000042F1 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 25741 000042F6 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 25742                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 25743 000042F9 07                      	POP	ES				    ; pop ES
 25744                                  ;SR;
 25745                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 25746                                  ;indicate it is not a root dir
 25747                                  
 25748 000042FA 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 25749 00004301 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 25750 00004306 89FB                    	MOV	BX,DI				    ; start of entry
 25751                                  	;lea	si,[di+1Ah]
 25752 00004308 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 25753                                  						    ; dir_first field in the
 25754                                  						    ; dir entry
 25755                                  ;hkn; SS override for FastOpenFlg
 25756                                  	;or	byte [ss:FastOpenFlg],12h ; 29/12/2022
 25757 0000430B 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 25758                                  ;	POP	AX
 25759 00004311 C3                      	RETN
 25760                                  NOTFOUND:
 25761 00004312 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 25762 00004315 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 25763 00004317 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 25764                                  Partial_Success:
 25765                                  	;and	byte [SS:FastOpenFlg],0FBh
 25766 0000431D 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 25767                                  NOLOOKUP:
 25768                                  ;	POP	AX
 25769 00004323 F9                      	STC
 25770 00004324 C3                      	RETN
 25771                                  
 25772                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 25773                                  ;-----------------------------------------------------------------------------
 25774                                  ;
 25775                                  ; Procedure Name : InsertPath
 25776                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 25777                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 25778                                  ;	  DS = DOSDATA
 25779                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 25780                                  ;
 25781                                  ;-----------------------------------------------------------------------------
 25782                                  
 25783                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25784                                  
 25785                                  InsertPath:
 25786 00004325 9C                      	PUSHF
 25787                                  ;hkn; SS override for FastOpenFlag
 25788                                  	;test	byte [SS:FastOpenFlg], 1
 25789 00004326 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25790 0000432C 7479                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 25791                                  	;test	byte [ss:FastOpenFlg],2
 25792 0000432E 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 25793 00004334 740D                    	JZ	short INSERT_DIR_INFO		; no
 25794                                  	;and	byte [ss:FastOpenFlg],0FDh
 25795 00004336 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 25796 0000433C 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 25797 00004341 EB5E                    	JMP	short GET_NEXT2
 25798                                  INSERT_DIR_INFO:				; save registers
 25799 00004343 1E                      	PUSH	DS
 25800 00004344 06                      	PUSH	ES
 25801 00004345 53                      	PUSH	BX
 25802 00004346 56                      	PUSH	SI
 25803 00004347 57                      	PUSH	DI
 25804 00004348 51                      	PUSH	CX
 25805 00004349 50                      	PUSH	AX
 25806                                  
 25807                                  ;hkn; SS override
 25808 0000434A 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 25809 0000434F BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 25810                                  	;mov	ax,[di+6]
 25811 00004352 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 25812                                  	; MSDOS 6.0
 25813                                  	;mov	[ss:si+1],ax
 25814 00004355 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 25815                                  	; 19/05/2019 - Retro DOS v4.0
 25816 00004359 8B4508                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 25817                                  
 25818                                  ;hkn; SS is DOSDATA
 25819 0000435C 16                      	push	ss
 25820 0000435D 1F                      	pop	ds
 25821                                  	; MSDOS 3.3	
 25822                                  	;;mov	[si+1],ax	
 25823                                  	;MOV	[SI+FEI.dirsec],AX
 25824                                  	; MSDOS 6.0
 25825                                  	;mov	[si+3],ax
 25826 0000435E 894403                  	MOV	[SI+FEI.dirsec+2],AX		;AN000;>32mb save high dir sector
 25827                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25828 00004361 A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 25829                                  	;;mov	[si+5],ax ; MSDOS 6.0
 25830                                  	;mov	[si+3],ax ; MSDOS 3.3
 25831 00004364 894405                  	MOV	[SI+FEI.clusnum],AX
 25832                                  	; MSDOS 6.0
 25833 00004367 A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 25834                                  	;mov	[si+7],ax
 25835 0000436A 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 25836 0000436D A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 25837                                  	;mov	[si+9],ax
 25838 00004370 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 25839                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25840 00004373 89D8                    	MOV	AX,BX
 25841                                  	;;add	di,16  ; MSDOS 3.3
 25842                                  	;add	di,20  ; MSDOS 6.0
 25843 00004375 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 25844 00004378 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 25845                                  	;mov	cl,32
 25846 0000437A B120                    	MOV	CL,dir_entry.size
 25847 0000437C F6F1                    	DIV	CL
 25848                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 25849 0000437E 8804                    	mov	[si],al
 25850                                  
 25851 00004380 1E                      	PUSH	DS
 25852 00004381 07                      	POP	ES
 25853                                  
 25854 00004382 8E1E[E405]              	MOV	DS,[CURBUF+2]
 25855 00004386 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 25856                                  	;cmp	word [di+1Ah],0
 25857 00004388 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 25858                                  					; never insert info when file is empty
 25859 0000438C 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25860                                  
 25861 0000438E 56                      	PUSH	SI			; ES:BX -> extended info
 25862 0000438F 5B                      	POP	BX
 25863                                  
 25864                                  	;mov	al,2
 25865 00004390 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25866 00004392 BE[300D]                	MOV	SI,FastOpenTable
 25867                                  	;call	far [es:si+2]	 ; call dword ptr es:[si+2] ; 29/12/2022
 25868                                  	; 07/12/2022
 25869 00004395 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25870                                  
 25871 00004399 F8                      	CLC
 25872                                  SKIP_INSERT:
 25873 0000439A 58                      	POP	AX
 25874 0000439B 59                      	POP	CX			; restore registers
 25875 0000439C 5F                      	POP	DI
 25876 0000439D 5E                      	POP	SI
 25877 0000439E 5B                      	POP	BX
 25878 0000439F 07                      	POP	ES
 25879 000043A0 1F                      	POP	DS
 25880                                  GET_NEXT2:
 25881                                  	;or	[ss:FastOpenFlg],8
 25882 000043A1 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 25883                                  					; we got dir info from fastopen so
 25884                                  GET_NEXT_ELEMENT:
 25885 000043A7 9D                      	POPF
 25886 000043A8 C3                      	RETN
 25887                                  
 25888                                  ;============================================================================
 25889                                  ; DEV.ASM (MSDOS 6.0, 1991)
 25890                                  ;============================================================================
 25891                                  ; 17/07/2018 - Retro DOS v3.0
 25892                                  ; 30/04/2019 - Retro DOS v4.0
 25893                                  
 25894                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 25895                                  
 25896                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 25897                                  
 25898                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 25899                                  
 25900                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 25901                                  ;DEV001s:
 25902                                  ;		length of packets
 25903 000043A9 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 25904                                  ;LenTab: db	22,14,22,13,15,14
 25905                                  
 25906                                  ;	Error Function
 25907                                  
 25908                                  CmdTab:
 25909 000043AF 8604                    	DB	86h, DEVRD	; 0 input
 25910 000043B1 8605                    	DB	86h, DEVRDND	; 1 input status
 25911 000043B3 8708                    	DB	87h, DEVWRT	; 2 output
 25912 000043B5 870A                    	DB	87h, DEVOST	; 3 output status
 25913 000043B7 8607                    	DB	86h, DEVIFL	; 4 input flush
 25914 000043B9 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 25915                                  
 25916                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 25917                                  
 25918                                  ;CmdTab:
 25919                                  ;	db	86h, 4
 25920                                  ;	db	86h, 5
 25921                                  ;	db	87h, 8
 25922                                  ;	db	87h, 10
 25923                                  ;	db	86h, 7
 25924                                  ;	db	86h, 5
 25925                                  
 25926                                  ;DEV001E:
 25927                                  
 25928                                  ; 30/04/2019 - Retro DOS v4.0
 25929                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 25930                                  
 25931                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 25932                                  ;----------------------------------------------------------------------------
 25933                                  ;
 25934                                  ; Procedure Name : IOFUNC
 25935                                  ;
 25936                                  ; Inputs:
 25937                                  ;	DS:SI Points to SFT
 25938                                  ;	AH is function code
 25939                                  ;		= 0 Input
 25940                                  ;		= 1 Input Status
 25941                                  ;		= 2 Output
 25942                                  ;		= 3 Output Status
 25943                                  ;		= 4 Flush
 25944                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 25945                                  ;				   present.
 25946                                  ;	AL = character if output
 25947                                  ; Function:
 25948                                  ;	Perform indicated I/O to device or file
 25949                                  ; Outputs:
 25950                                  ;	AL is character if input
 25951                                  ;	If a status call
 25952                                  ;		zero set if not ready
 25953                                  ;		zero reset if ready (character in AL for input status)
 25954                                  ; For regular files:
 25955                                  ;	Input Status
 25956                                  ;		Gets character but restores position
 25957                                  ;		Zero set on EOF
 25958                                  ;	Input
 25959                                  ;		Gets character advances position
 25960                                  ;		Returns ^Z on EOF
 25961                                  ;	Output Status
 25962                                  ;		Always ready
 25963                                  ; AX altered, all other registers preserved
 25964                                  ;----------------------------------------------------------------------------
 25965                                  
 25966                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25967                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 25968                                  
 25969                                  IOFUNC:
 25970 000043BB 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 25971                                  					; DEVIOBUF
 25972 000043C0 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 25973 000043C7 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 25974 000043CE 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 25975                                  	;test	byte [si+6],80h
 25976                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 25977 000043D2 F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25978 000043D6 7403                    	JZ	short IOTO22		;AN000;
 25979 000043D8 E9A500                  	JMP	IOTOFILE		;AN000;
 25980                                  IOTO22:
 25981                                  	;test	word [si+5],80h
 25982                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 25983 000043DB F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 25984 000043DF 7503                    	JNZ	short IOTO33		;AN000;
 25985 000043E1 E99C00                  	JMP	IOTOFILE		;AN000;
 25986                                  IOTO33:
 25987 000043E4 06                      	push	es ; * (MSDOS 6.21)
 25988 000043E5 E87EC0                  	call	save_world
 25989 000043E8 8CDA                    	MOV	DX,DS
 25990 000043EA 8CD3                    	MOV	BX,SS
 25991 000043EC 8EDB                    	MOV	DS,BX
 25992 000043EE 8EC3                    	MOV	ES,BX
 25993 000043F0 31DB                    	XOR	BX,BX
 25994 000043F2 80FC05                  	cmp	ah,5		    ; system wait enabled?
 25995 000043F5 7503                    	jnz	short _no_sys_wait
 25996                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25997                                  	; 16/12/2022
 25998 000043F7 80CF04                  	or	bh,04h
 25999                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 26000                                  				    ; It is up to device driver to carry out
 26001                                  				    ; appropriate action.
 26002                                  _no_sys_wait:
 26003 000043FA 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 26004 000043FE 31DB                    	XOR	BX,BX
 26005 00004400 881E[8903]              	MOV	[IOMED],BL
 26006                                  
 26007 00004404 88E3                    	MOV	BL,AH		 	; get function
 26008 00004406 2E8AA7[A943]            	MOV	AH,[cs:BX+LenTab]
 26009 0000440B D1E3                    	SHL	BX,1
 26010 0000440D 2E8B8F[AF43]            	MOV	CX,[cs:BX+CmdTab]
 26011 00004412 BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 26012 00004415 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 26013 00004419 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 26014                                  
 26015 0000441D 8EDA                    	MOV	DS,DX
 26016 0000441F E86B01                  	CALL	DEVIOCALL
 26017 00004422 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 26018 00004427 21FF                    	and	di,di
 26019 00004429 7834                    	js	short DevErr
 26020                                  OKDevIO:
 26021 0000442B 8CD0                    	MOV	AX,SS
 26022 0000442D 8ED8                    	MOV	DS,AX
 26023                                  
 26024                                  	;cmp	ch,5
 26025 0000442F 80FD05                  	CMP	CH,DEVRDND
 26026 00004432 7506                    	JNZ	short DNODRD
 26027 00004434 A0[8903]                	MOV	AL,[IORCHR]
 26028 00004437 A2[BC03]                	MOV	[DEVIOBUF],AL
 26029                                  
 26030                                  DNODRD: 
 26031 0000443A 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 26032 0000443E F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 26033                                  	;and	ah,2
 26034 00004440 80E402                  	AND	AH,STBUI>>8
 26035                                  
 26036                                  QuickReturn:				;AN000; 2/13/KK
 26037 00004443 E809C0                  	call	restore_world
 26038 00004446 07                      	pop	es ; * (MSDOS 6.21)
 26039                                  
 26040                                  	; SR;
 26041                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 26042                                  	; IoStatFail = -1 (set after return from the I24)
 26043                                  
 26044                                  	; MSDOS 6.0
 26045 00004447 9C                      	pushf
 26046 00004448 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 26047 0000444C 98                      	cbw				;sign extend to word
 26048 0000444D 83F8FF                  	cmp	ax,-1
 26049 00004450 7507                    	jne	short not_fail_ret
 26050 00004452 36FE06[8300]            	inc	byte [ss:IoStatFail]
 26051 00004457 9D                      	popf
 26052 00004458 C3                      	retn
 26053                                  
 26054                                  not_fail_ret:
 26055 00004459 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 26056 0000445D 9D                      	popf
 26057 0000445E C3                      	retn
 26058                                  
 26059                                  DevErr:
 26060 0000445F 88CC                    	MOV	AH,CL
 26061 00004461 E89F0D                  	call	CHARHARD
 26062 00004464 3C01                    	CMP	AL,1
 26063 00004466 7507                    	JNZ	short NO_RETRY
 26064 00004468 E8E4BF                  	call	restore_world
 26065                                  	; 12/05/2019
 26066 0000446B 07                      	pop	es ; * (MSDOS 6.21)		
 26067 0000446C E94CFF                  	JMP	IOFUNC	; 10/08/2018
 26068                                  
 26069                                  NO_RETRY:
 26070                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 26071                                  	; ready so that DOS doesn't get caught in a status loop when user 
 26072                                  	; simply wants to ignore the error.
 26073                                  	;
 26074                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 26075                                  	; should be checked by the caller on return
 26076                                  
 26077                                  					; SS override
 26078 0000446F 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 26079                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 26080                                  
 26081                                  	; SR;
 26082                                  	; Check if user failed
 26083                                  
 26084                                  	; MSDOS 6.0
 26085 00004475 3C03                    	cmp	al,3
 26086 00004477 7505                    	jnz	short not_fail
 26087 00004479 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 26088                                  not_fail:
 26089 0000447E EBAB                    	JMP	short OKDevIO
 26090                                  
 26091                                  IOTOFILE:
 26092 00004480 08E4                    	OR	AH,AH
 26093 00004482 7421                    	JZ	short IOIN
 26094 00004484 FECC                    	DEC	AH
 26095 00004486 7405                    	JZ	short IOIST
 26096 00004488 FECC                    	DEC	AH
 26097 0000448A 7411                    	JZ	short IOUT
 26098                                  IOUT_retn:	; 18/12/2022
 26099 0000448C C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 26100                                  IOIST:
 26101                                  	;push	word [si+15h]
 26102 0000448D FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 26103                                  	;push	word [si+17h]
 26104 00004490 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 26105 00004493 E80F00                  	CALL	IOIN
 26106                                  	;pop	word [si+17h]
 26107 00004496 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 26108                                  	;pop	word [si+15h]
 26109 00004499 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 26110 0000449C C3                      	retn
 26111                                  IOUT:
 26112 0000449D E82500                  	CALL	SETXADDR
 26113 000044A0 E8A2EF                  	call	DOS_WRITE
 26114                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 26115                                  	; 18/12/2022
 26116 000044A3 EB52                    	jmp	RESTXADDR
 26117                                  ;IOUT_retn:
 26118                                  	;retn			; come crying to me when things don't
 26119                                  				; work ARR
 26120                                  IOIN:
 26121 000044A5 E81D00                  	CALL	SETXADDR
 26122                                  					; SS override for DOS34_FLAG
 26123                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 26124                                  	;or	word [ss:DOS34_FLAG],40h
 26125                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26126                                  	; 16/12/2022
 26127 000044A8 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 26128 000044AE E893ED                  	CALL	DOS_READ
 26129                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 26130                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 26131                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26132                                  	; 16/12/2022
 26133 000044B1 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 26134 000044B7 09C9                    	OR	CX,CX			; Check EOF
 26135 000044B9 E83B00                  	CALL	RESTXADDR
 26136                                  					; SS override
 26137 000044BC 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 26138 000044C0 75CA                    	jnz	short IOUT_retn	
 26139 000044C2 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 26140 000044C4 C3                      	retn
 26141                                  
 26142                                  SETXADDR:
 26143                                  					; SS override
 26144 000044C5 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 26145                                  
 26146 000044CA 06                      	push	es ; * (MSDOS 6.21)
 26147                                  
 26148 000044CB E898BF                  	call	save_world
 26149                                  					; SS override for DMAADD and THISSFT
 26150                                  	; 24/09/2023
 26151                                  	;PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 26152                                  	;PUSH	WORD [SS:DMAADD+2]
 26153 000044CE 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 26154                                  
 26155 000044D3 16                      	push	ss
 26156 000044D4 1F                      	pop	ds
 26157                                  
 26158                                  	; 24/09/2023
 26159 000044D5 FF36[2C03]              	push	word [DMAADD]
 26160 000044D9 FF36[2E03]              	push	word [DMAADD+2]
 26161                                  
 26162 000044DD 8936[9E05]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 26163 000044E1 8B0E[8C03]              	MOV	CX,[IOXAD+2]
 26164 000044E5 890E[2E03]              	MOV	[DMAADD+2],CX
 26165 000044E9 8B0E[8A03]              	MOV	CX,[IOXAD]
 26166 000044ED 890E[2C03]              	MOV	[DMAADD],CX		; Set byte trans addr
 26167 000044F1 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 26168 000044F5 EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 26169                                  
 26170                                  RESTXADDR:
 26171 000044F7 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 26172 000044FB 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 26173 000044FF 8F06[2C03]              	POP	WORD [DMAADD]
 26174                                  
 26175 00004503 E849BF                  	call	restore_world
 26176                                  
 26177 00004506 07                      	pop	es ; * (MSDOS 6.21)
 26178                                  					; SS override
 26179                                  RESTRET:
 26180 00004507 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 26181                                  
 26182                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 26183                                  ; 21/11/2022
 26184                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 26185                                  
 26186                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 26187                                  
 26188                                  ;----------------------------------------------------------------------------
 26189                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 26190                                  ;
 26191                                  ;	Dev_Open_SFT issues an open call to the device associated with
 26192                                  ;	the SFT.
 26193                                  ;
 26194                                  ;	ENTRY	(ES:DI) = SFT
 26195                                  ;	EXIT	none
 26196                                  ;	USES	all
 26197                                  ;----------------------------------------------------------------------------
 26198                                  
 26199                                  DEV_OPEN_SFT:
 26200 0000450C 06                      	push	es ; * (MSDOS 6.21)
 26201 0000450D E856BF                  	call	save_world
 26202                                  	;mov	al,0Dh	
 26203 00004510 B00D                    	MOV	AL,DEVOPN
 26204 00004512 EB06                    	JMP	SHORT DO_OPCLS
 26205                                  
 26206                                  ;----------------------------------------------------------------------------
 26207                                  ; Procedure Name : DEV_CLOSE_SFT
 26208                                  ;
 26209                                  ; Inputs:
 26210                                  ;	ES:DI Points to SFT
 26211                                  ; Function:
 26212                                  ;	Issue a CLOSE call to the correct device
 26213                                  ; Outputs:
 26214                                  ;	None
 26215                                  ; ALL preserved
 26216                                  ;----------------------------------------------------------------------------
 26217                                  
 26218                                  DEV_CLOSE_SFT:
 26219 00004514 06                      	push	es ; * (MSDOS 6.21)
 26220 00004515 E84EBF                  	call	save_world
 26221                                  	;mov	al,0Eh	
 26222 00004518 B00E                    	MOV	AL,DEVCLS
 26223                                  
 26224                                  	; Main entry for device open and close. AL contains the function 
 26225                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 26226                                  	; open/close to block devices. This allows networks to function but 
 26227                                  	; does NOT hang up with bogus change-line code.
 26228                                  
 26229                                  	;entry	DO_OPCLS
 26230                                  DO_OPCLS:
 26231                                  	; Is the SFT for the net? If so, no action necessary.
 26232                                  
 26233                                  	; MSDOS 6.0
 26234                                  	;test	word [es:di+5],8000h
 26235                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 26236 0000451A 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 26237 0000451F 7567                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 26238 00004521 30E4                    	XOR	AH,AH			; Unit
 26239                                  	;test	byte [es:di+5],80h
 26240 00004523 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26241                                  	;les	di,[es:di+7]
 26242 00004528 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 26243 0000452C 7513                    	JNZ	short GOT_DEV_ADDR
 26244                                  
 26245                                  	; We are about to call device open/close on a block driver. If no 
 26246                                  	; sharing then just short circuit to done.
 26247                                  	
 26248                                  	; MSDOS 6.0
 26249                                  					; SS override
 26250 0000452E 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 26251 00004534 7652                    	JBE	short OPCLS_DONE	;AN010; yes
 26252                                  
 26253                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26254                                  	;mov	ah,[es:di+1]
 26255 00004536 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 26256 0000453A 268A0D                  	mov	cl,[es:di]
 26257                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 26258                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 26259                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 26260 0000453D 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 26261                                  GOT_DEV_ADDR:				; ES:DI -> device
 26262                                  	;test	word [es:di+4],800h
 26263                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 26264 00004541 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 26265 00004546 7440                    	JZ	short OPCLS_DONE	; Device can't
 26266 00004548 06                      	PUSH	ES
 26267 00004549 1F                      	POP	DS
 26268 0000454A 89FE                    	MOV	SI,DI			; DS:SI -> device
 26269                                  
 26270                                  OPCLS_RETRY:
 26271                                  	;Context ES
 26272 0000454C 16                      	push	ss
 26273 0000454D 07                      	pop	es
 26274                                  					; DEVCALL is in DOSDATA
 26275 0000454E BF[5A03]                	MOV	DI,DEVCALL
 26276                                  
 26277 00004551 89FB                    	MOV	BX,DI
 26278 00004553 50                      	PUSH	AX
 26279                                  	;mov	al,13
 26280 00004554 B00D                    	MOV	AL,DOPCLHL
 26281 00004556 AA                      	STOSB				; Length
 26282 00004557 58                      	POP	AX
 26283 00004558 86E0                    	XCHG	AH,AL
 26284 0000455A AA                      	STOSB				; Unit
 26285 0000455B 86E0                    	XCHG	AH,AL
 26286 0000455D AA                      	STOSB				; Command
 26287 0000455E 26C7050000              	MOV	WORD [ES:DI],0		; Status
 26288 00004563 50                      	PUSH	AX			; Save Unit,Command
 26289                                  	;invoke	DEVIOCALL2
 26290 00004564 E82900                  	call	DEVIOCALL2
 26291                                  
 26292                                  	;mov	di,[es:bx+3]
 26293 00004567 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 26294                                  	;test	di,8000h
 26295                                  	;jz	short OPCLS_DONEP	
 26296 0000456B 21FF                    	and	di,di
 26297 0000456D 7918                    	jns	short OPCLS_DONEP	; No error
 26298                                  	; 21/11/2022
 26299                                  	;test	word [si+4],8000h
 26300                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 26301                                  	;test	word [si+5],80h
 26302 0000456F F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 26303 00004573 7404                    	JZ	short BLKDEV
 26304 00004575 B486                    	MOV	AH,86H			; Read error in data, Char dev
 26305 00004577 EB04                    	JMP	SHORT HRDERR
 26306                                  BLKDEV:
 26307 00004579 88C8                    	MOV	AL,CL			; Drive # in AL
 26308 0000457B B406                    	MOV	AH,6			; Read error in data, Blk dev
 26309                                  HRDERR:
 26310                                  	;invoke	CHARHARD
 26311 0000457D E8830C                  	call	CHARHARD
 26312 00004580 3C01                    	cmp	al,1
 26313 00004582 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 26314                                  					;  Note that FAIL is essentually IGNORED
 26315 00004584 58                      	POP	AX			; Get back Unit, Command
 26316 00004585 EBC5                    	JMP	short OPCLS_RETRY
 26317                                  OPCLS_DONEP:
 26318 00004587 58                      	POP	AX			; Clean stack
 26319                                  OPCLS_DONE:
 26320 00004588 E8C4BE                  	call	restore_world
 26321 0000458B 07                      	pop	es ; * (MSDOS 6.21)
 26322 0000458C C3                      	retn
 26323                                  
 26324                                  ; 30/04/2019 - Retro DOS v4.0
 26325                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 26326                                  
 26327                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26328                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 26329                                  
 26330                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 26331                                  ;----------------------------------------------------------------------------
 26332                                  ;**	DevIoCall  - Call Device
 26333                                  ;
 26334                                  ;	ENTRY	DS:SI Points to device SFT
 26335                                  ;		ES:BX Points to request data
 26336                                  ;	EXIT	DS:SI -> Device driver
 26337                                  ;	USES	DS:SI,AX
 26338                                  ;----------------------------------------------------------------------------
 26339                                  ;**	DevIoCall2 - Call Device
 26340                                  ;
 26341                                  ;	ENTRY	DS:SI Points to DPB
 26342                                  ;		ES:BX Points to request data
 26343                                  ;	EXIT	DS:SI -> Device driver
 26344                                  ;	USES	DS:SI,AX
 26345                                  ;----------------------------------------------------------------------------
 26346                                  
 26347                                  DEVIOCALL:
 26348                                  					; SS override for CALLSSEC, 
 26349                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 26350 0000458D C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 26351                                  
 26352                                  	;entry	DEVIOCALL2
 26353                                  DEVIOCALL2:
 26354                                  	;EnterCrit critDevice
 26355 00004590 E89ACD                  	call	ECritDevice
 26356                                  
 26357                                  	; MSDOS 6.0
 26358                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 26359                                  	;test	byte [si+5],80h
 26360 00004593 F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 26361 00004597 7548                    	jnz	short chardev2		;AN000; >32mb no
 26362                                  
 26363                                  	; 16/12/2022
 26364                                  	; 22/11/2022
 26365 00004599 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 26366 0000459D 3C04                    	cmp	al,DEVRD	; 4
 26367 0000459F 7408                    	je	short chkext	
 26368 000045A1 3C08                    	cmp	al,DEVWRT	; 8
 26369 000045A3 7404                    	je	short chkext
 26370 000045A5 3C09                    	cmp	al,DEVWRTV	; 9
 26371 000045A7 7538                    	jne	short chardev2
 26372                                  
 26373                                  	; 16/12/2022
 26374                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26375                                  	;;cmp	byte [es:bx+2],4
 26376                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 26377                                  	;JZ	short chkext		;AN000; >32mb   yes
 26378                                  	;;cmp	byte [es:bx+2],8
 26379                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 26380                                  	;JZ	short chkext		;AN000; >32mb   yes
 26381                                  	;;cmp	byte [es:bx+2],9
 26382                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 26383                                  	;				;AN000; >32mb write/verify ?
 26384                                  	;JNZ	short chardev2		;AN000; >32mb no
 26385                                  chkext:
 26386 000045A9 E8A700                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 26387 000045AC 7255                    	JC	short dev_exit		;AN000;LB. done
 26388                                  
 26389                                  	;test	byte [si+4],2
 26390 000045AE F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 26391 000045B2 741D                    	JZ	short chksector		;AN000;>32mb   no
 26392 000045B4 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 26393 000045B8 36A1[6E03]              	MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 26394 000045BC 36C706[6E03]FFFF        	MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 26395 000045C3 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 26396 000045C7 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 26397 000045CB 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 26398 000045CF EB10                    	JMP	short chardev2		;AN000; >32mb
 26399                                  chksector:				;AN000; >32mb
 26400 000045D1 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 26401 000045D7 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 26402                                  	;mov	word [es:bx+3],8107h
 26403 000045D9 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 26404                                  					;AN000; >32mb
 26405 000045DF EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 26406                                  
 26407                                  chardev2:				;AN000;
 26408                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 26409                                  	; preserved
 26410                                  
 26411                                  	;mov	ax,[si+6]
 26412 000045E1 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 26413 000045E4 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26414 000045E8 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 26415 000045ED 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26416                                  
 26417                                  	;mov	ax,[si+8]
 26418 000045F2 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 26419 000045F5 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26420 000045F9 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26421                                  
 26422                                  	; MSDOS 6.0
 26423 000045FE E84801                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 26424 00004601 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 26425                                  
 26426                                  dev_exit:
 26427                                  	;LeaveCrit critDevice
 26428                                  	;call	LCritDevice
 26429                                  	;retn
 26430                                  	; 18/12/2022
 26431 00004603 E942CD                  	jmp	LCritDevice
 26432                                  
 26433                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 26434                                  ; 22/11/2022
 26435                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 26436                                  
 26437                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 26438                                  ;---------------------------------------------------------------------------
 26439                                  ;
 26440                                  ; Procedure Name : SETREAD, SETWRITE
 26441                                  ;
 26442                                  ; Inputs:
 26443                                  ;	DS:BX = Transfer Address
 26444                                  ;	CX = Record Count
 26445                                  ;	DX = Starting Record
 26446                                  ;	AH = Media Byte
 26447                                  ;	AL = Unit Code
 26448                                  ; Function:
 26449                                  ;	Set up the device call header at DEVCALL
 26450                                  ; Output:
 26451                                  ;	ES:BX Points to DEVCALL
 26452                                  ; No other registers effected
 26453                                  ;
 26454                                  ;---------------------------------------------------------------------------
 26455                                  
 26456                                  SETREAD_XJ:
 26457                                  	;;;
 26458                                  	; 07/02/2024 - Retro DOS v4.1
 26459 00004606 89FB                    	mov	bx,di
 26460 00004608 EB07                    	jmp	short SETREAD_X
 26461                                  	;;;
 26462                                  
 26463                                  SETREAD_XT:
 26464                                  	;;;
 26465                                  	; 07/02/2024 - Retro DOS v4.1
 26466 0000460A BB[B603]                	mov	bx,TIMEBUF
 26467 0000460D 53                      	push	bx
 26468                                  SETREAD_XTC:
 26469 0000460E B90600                  	mov	cx,6
 26470                                  	;;;
 26471                                  SETREAD_X:
 26472                                  	;;;
 26473                                  	; 06/02/2024 - Retro DOS v4.1
 26474 00004611 31C0                    	xor	ax,ax
 26475                                  	;mov	dx,ax ; 0
 26476 00004613 99                      	cwd
 26477                                  	;;;
 26478                                  
 26479                                  ; ------------------------------------
 26480                                  
 26481                                  SETREAD:
 26482 00004614 57                      	PUSH	DI
 26483 00004615 51                      	PUSH	CX
 26484 00004616 50                      	PUSH	AX
 26485 00004617 B104                    	MOV	CL,DEVRD ; mov cl,4
 26486                                  SETCALLHEAD:
 26487 00004619 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 26488 0000461B 16                      	PUSH	SS
 26489 0000461C 07                      	POP	ES
 26490                                  					; DEVCALL is in DOSDATA
 26491 0000461D BF[5A03]                	MOV	DI,DEVCALL
 26492                                  
 26493 00004620 AA                      	STOSB				; length
 26494 00004621 58                      	POP	AX			; 
 26495 00004622 AA                      	STOSB				; Unit
 26496 00004623 50                      	PUSH	AX
 26497 00004624 88C8                    	MOV	AL,CL
 26498 00004626 AA                      	STOSB				; Command code
 26499 00004627 31C0                    	XOR	AX,AX
 26500 00004629 AB                      	STOSW				; Status
 26501 0000462A 83C708                  	ADD	DI,8			; Skip link fields
 26502 0000462D 58                      	POP	AX
 26503 0000462E 86E0                    	XCHG	AH,AL
 26504 00004630 AA                      	STOSB				; Media byte
 26505 00004631 86C4                    	XCHG	AL,AH
 26506 00004633 50                      	PUSH	AX
 26507 00004634 89D8                    	MOV	AX,BX
 26508 00004636 AB                      	STOSW
 26509                                  
 26510 00004637 8CD8                    	MOV	AX,DS
 26511 00004639 AB                      	STOSW				; Transfer addr
 26512                                  
 26513 0000463A 59                      	POP	CX			; Real AX
 26514 0000463B 58                      	POP	AX			; Real CX
 26515 0000463C AB                      	STOSW				; Count
 26516                                  
 26517 0000463D 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 26518 0000463E AB                      	STOSW				; Start
 26519 0000463F 91                      	XCHG	AX,CX
 26520 00004640 87D1                    	XCHG	DX,CX
 26521 00004642 5F                      	POP	DI
 26522                                  					; DEVCALL is in DOSDATA
 26523 00004643 BB[5A03]                	MOV	BX,DEVCALL
 26524 00004646 C3                      	retn
 26525                                  
 26526                                  	;entry	SETWRITE
 26527                                  SETWRITE:
 26528                                  
 26529                                  ; Inputs:
 26530                                  ;	DS:BX = Transfer Address
 26531                                  ;	CX = Record Count
 26532                                  ;	DX = Starting Record
 26533                                  ;	AH = Media Byte
 26534                                  ;	AL = Unit Code
 26535                                  ; Function:
 26536                                  ;	Set up the device call header at DEVCALL
 26537                                  ; Output:
 26538                                  ;	ES:BX Points to DEVCALL
 26539                                  ; No other registers effected
 26540                                  
 26541 00004647 57                      	PUSH	DI
 26542 00004648 51                      	PUSH	CX
 26543 00004649 50                      	PUSH	AX
 26544 0000464A B108                    	MOV	CL,DEVWRT ; mov cl,8
 26545 0000464C 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 26546 00004651 EBC6                    	JMP	SHORT SETCALLHEAD
 26547                                  
 26548                                  ; 30/04/2019 - Retro DOS v4.0
 26549                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 26550                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26551                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 26552                                  
 26553                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 26554                                  ;---------------------------------------------------------------------------
 26555                                  ;
 26556                                  ; Procedure Name : RW_SC
 26557                                  ;
 26558                                  ; Inputs:
 26559                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 26560                                  ;	 [SC_STATUS]= SC validity status
 26561                                  ;	 [SEQ_SECTOR]= last sector read
 26562                                  ; Function:
 26563                                  ;	Read from or write through secondary cache
 26564                                  ; Output:
 26565                                  ;	ES:BX Points to DEVCALL
 26566                                  ;	carry clear, I/O is not done
 26567                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 26568                                  ;	carry set, I/O is done
 26569                                  ;
 26570                                  ;----------------------------------------------------------------------------
 26571                                  
 26572                                  RW_SC:
 26573                                  	; SS override for all variables used.
 26574                                  	
 26575 00004653 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 26576 00004659 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 26577 0000465B 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 26578 00004661 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 26579 00004663 51                      	PUSH	CX			    ;AN000;LB.
 26580 00004664 52                      	PUSH	DX			    ;AN000;LB. yes
 26581 00004665 1E                      	PUSH	DS			    ;AN000;LB. save registers
 26582 00004666 56                      	PUSH	SI			    ;AN000;LB.
 26583 00004667 06                      	PUSH	ES			    ;AN000;LB.
 26584 00004668 57                      	PUSH	DI			    ;AN000;LB.
 26585                                  
 26586 00004669 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 26587 0000466E 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 26588 00004674 7408                    	JZ	short doread		    ;AN000;LB. yes
 26589 00004676 E8BE00                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 26590 00004679 E98B00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 26591                                  scexit4:				    ;AN000;
 26592 0000467C F8                      	CLC				    ;AN000;LB. I/O not done yet
 26593 0000467D C3                      	retn				    ;AN000;LB.
 26594                                  doread: 				    ;AN000;
 26595 0000467E E82001                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 26596 00004681 720A                    	JC	short readSC		    ;AN000;LB.
 26597 00004683 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 26598 0000468A F9                      	STC				    ;AN000;LB. set carry
 26599 0000468B EB68                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 26600                                  readSC: 				    ;AN000;
 26601 0000468D 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 26602 00004691 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 26603 00004696 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 26604 0000469B 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 26605                                  	; 24/09/2023
 26606                                  	;CMP	AX,0			    ;AN000;LB. greater than 64K
 26607 000046A0 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 26608                                  chklow: 						
 26609 000046A2 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 26610 000046A5 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 26611 000046A7 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 26612 000046AE 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 26613 000046B2 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 26614                                  readsr:
 26615 000046B6 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 26616 000046BA 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 26617 000046BE 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 26618 000046C2 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 26619                                  
 26620 000046C6 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 26621 000046CA 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 26622 000046CE 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26623 000046D2 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 26624 000046D6 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 26625 000046DC 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 26626 000046E0 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 26627 000046E4 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 26628 000046E8 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 26629 000046EC 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 26630 000046F0 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 26631                                  saveseq2:				    ;AN000;
 26632 000046F4 F8                      	CLC				    ;AN000;LB. clear carry
 26633                                  saveseq:				    ;AN000;	
 26634 000046F5 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 26635 000046F9 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 26636 000046FD 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 26637 00004701 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 26638 00004705 EB01                    	JMP	short scexit 		    ;AN000;LB.	
 26639                                  scexit2:				    ;AN000;LB.
 26640 00004707 F8                      	CLC				    ;AN000;LB.	clear carry
 26641                                  scexit: 				    ;AN000;		
 26642 00004708 5F                      	POP	DI			    ;AN000;LB.
 26643 00004709 07                      	POP	ES			    ;AN000;LB. restore registers
 26644 0000470A 5E                      	POP	SI			    ;AN000;LB.
 26645 0000470B 1F                      	POP	DS			    ;AN000;LB.
 26646 0000470C 5A                      	POP	DX			    ;AN000;LB.
 26647 0000470D 59                      	POP	CX			    ;AN000;LB.
 26648 0000470E C3                      	retn				    ;AN000;LB.
 26649                                  
 26650                                  ;Break	<IN_SC -- check if in secondary cache>
 26651                                  ;--------------------------------------------------------------------------
 26652                                  ;
 26653                                  ; Procedure Name : IN_SC
 26654                                  ;
 26655                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26656                                  ;	   [CURSC_DRIVE]= current SC drive
 26657                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26658                                  ;	   [SC_CACHE_COUNT]= SC count
 26659                                  ;	   [HIGH_SECTOR]:DX= sector number
 26660                                  ; Function:
 26661                                  ;	Check if the sector is in secondary cache
 26662                                  ; Output:
 26663                                  ;	carry clear, in SC
 26664                                  ;	   CX= the index in the secondary cache
 26665                                  ;	carry set, not in SC
 26666                                  ;
 26667                                  ;---------------------------------------------------------------------------
 26668                                  
 26669                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26670                                  IN_SC:
 26671                                  	; SS override for all variables used
 26672 0000470F 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 26673 00004713 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 26674 00004718 751B                    	JNZ	short outrange2		    ;AN000;;LB. no
 26675 0000471A 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 26676 0000471E 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 26677 00004720 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 26678 00004725 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 26679                                  	; 24/09/2023
 26680                                  	;CMP	AX,0			    ;AN000;;LB. greater than 64K
 26681 0000472A 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 26682 0000472C 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 26683 00004731 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 26684 00004733 F8                      	CLC				    ;AN000;;LB. clear carry
 26685                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 26686                                  	; 16/12/2022
 26687 00004734 C3                      	retn	; 30/04/2019
 26688                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26689                                  	;jmp	short inexit
 26690                                  
 26691                                  outrange2:				    ;AN000;;LB. set carry
 26692 00004735 F9                      	STC				    ;AN000;;LB.
 26693                                  inexit: 				    ;AN000;;LB.
 26694 00004736 C3                      	retn				    ;AN000;;LB.
 26695                                  
 26696                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 26697                                  ;---------------------------------------------------------------------------
 26698                                  ;
 26699                                  ; Procedure Name : Invalidate_Sc
 26700                                  ;
 26701                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26702                                  ;	   [CURSC_DRIVE]= current SC drive
 26703                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26704                                  ;	   [SC_CACHE_COUNT]= SC count
 26705                                  ;	   [SC_STATUS]= SC status word
 26706                                  ;	   [HIGH_SECTOR]:DX= sector number
 26707                                  ;
 26708                                  ; Function:
 26709                                  ;	invalidate secondary cache if in there
 26710                                  ; Output:
 26711                                  ;	[SC_STATUS] is updated
 26712                                  ;---------------------------------------------------------------------------
 26713                                  
 26714                                  INVALIDATE_SC:
 26715                                  	; SS override for all variables used
 26716                                  
 26717 00004737 E8D5FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 26718 0000473A 720C                    	JC	short outrange		    ;AN000;;LB. no
 26719 0000473C B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 26720 0000473F D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 26721 00004741 F7D0                    	NOT	AX			    ;AN000;;LB.
 26722 00004743 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 26723                                  outrange:				    ;AN000;;LB.
 26724 00004748 C3                      	retn				    ;AN000;;LB.
 26725                                  
 26726                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 26727                                  ; 22/11/2022
 26728                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 26729                                  
 26730                                  ;Break	<VIRREAD- virtually read data into buffer>
 26731                                  ;--------------------------------------------------------------------------
 26732                                  ;
 26733                                  ; Procedure Name : SC_FLAG
 26734                                  ;
 26735                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 26736                                  ;		     1, continuous sectors were read into SC
 26737                                  ; Function:
 26738                                  ;	   Move data from SC to buffer
 26739                                  ; Output:
 26740                                  ;	 carry clear, data is moved to buffer
 26741                                  ;	 carry set, bad sector or exceeds maximum sector
 26742                                  ;	   SC_FLAG =0
 26743                                  ;	   CALLSCNT=1
 26744                                  ;	   SC_STATUS= -1 if succeeded
 26745                                  ;     
 26746                                  ;		       0 if failed
 26747                                  ;--------------------------------------------------------------------------
 26748                                  
 26749                                  VIRREAD:
 26750                                  	; SS override for all variables used
 26751                                  
 26752 00004749 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 26753 0000474F 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 26754 00004751 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 26755 00004755 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 26756 00004759 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 26757 0000475D 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 26758 00004761 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 26759 00004767 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 26760                                  
 26761                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 26762 0000476E 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 26763 00004774 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 26764 00004776 1E                      	PUSH	DS			    ;AN000;;LB.
 26765 00004777 56                      	PUSH	SI			    ;AN000;;LB.
 26766 00004778 06                      	PUSH	ES			    ;AN000;;LB.
 26767 00004779 57                      	PUSH	DI			    ;AN000;;LB.
 26768 0000477A 52                      	PUSH	DX			    ;AN000;;LB.
 26769 0000477B 51                      	PUSH	CX			    ;AN000;;LB.
 26770 0000477C 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 26771 0000477E E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buf
 26772 00004781 59                      	POP	CX
 26773 00004782 5A                      	POP	DX			    ;AN000;;LB.
 26774 00004783 5F                      	POP	DI			    ;AN000;;LB.
 26775 00004784 07                      	POP	ES			    ;AN000;;LB.
 26776 00004785 5E                      	POP	SI			    ;AN000;;LB.
 26777 00004786 1F                      	POP	DS			    ;AN000;;LB.
 26778 00004787 EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 26779                                  scerror:				    ;AN000;
 26780 00004789 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 26781 00004790 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 26782 00004797 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 26783 0000479D F9                      	STC				    ;AN000;;LB. carry set
 26784 0000479E C3                      	retn				    ;AN000;;LB.
 26785                                  sc2end: 				    ;AN000;
 26786 0000479F F8                      	CLC				    ;AN000;;LB. carry clear
 26787 000047A0 C3                      	retn				    ;AN000;;LB.
 26788                                  
 26789                                  ; 30/04/2019 - Retro  DOS v4.0
 26790                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 26791                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26792                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 26793                                  
 26794                                  ;Break	<SC2BUF- move data from SC to buffer>
 26795                                  ;----------------------------------------------------------------------------
 26796                                  ;
 26797                                  ; Procedure Name : SC2BUF
 26798                                  ;
 26799                                  ; Inputs:  [SC_STATUS] = SC validity status
 26800                                  ;	   [SC_SECTOR_SIZE] = request sector size
 26801                                  ;	   [SC_CACHE_PTR] = pointer to SC
 26802                                  ; Function:
 26803                                  ;	   Move data from SC to buffer
 26804                                  ; Output:
 26805                                  ;	   carry clear, in SC  and data is moved
 26806                                  ;	   carry set, not in SC and data is not moved
 26807                                  ;---------------------------------------------------------------------------
 26808                                  
 26809                                  SC2BUF:
 26810                                  	; SS override for all variables used
 26811 000047A1 E86BFF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 26812                                  	;JC	short noSC		    ;AN000;LB. no
 26813                                  	; 24/09/2023
 26814 000047A4 723D                    	jc	short sexit
 26815 000047A6 B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 26816 000047A9 D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 26817 000047AB 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 26818 000047B0 7430                    	JZ	short noSC		    ;AN000;LB. invalid
 26819                                  ;entry SC2BUF2
 26820                                  SC2BUF2:				    ;AN000;
 26821                                  	;MOV	AX,CX			    ;AN000;LB. times index with
 26822                                  	;MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 26823                                  	; 24/09/2023
 26824 000047B2 36A1[AD0D]              	mov	ax,[ss:SC_SECTOR_SIZE]
 26825 000047B6 91                      	xchg	ax,cx ; cx = [ss:SC_SECTOR_SIZE]
 26826 000047B7 F7E1                    	mul	cx
 26827 000047B9 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 26828 000047BE 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26829 000047C3 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 26830 000047C5 89C6                    	MOV	SI,AX			    ;AN000;LB.
 26831 000047C7 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 26832 000047CC 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 26833                                  	; 24/09/2023
 26834                                  	;MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 26835 000047D1 D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 26836                                  ;entry MOVWORDS
 26837                                  MOVWORDS:				    ;AN000;
 26838 000047D3 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 26839 000047D9 7403                    	JZ	short nodd		    ;AN000;LB. no
 26840 000047DB D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 26841 000047DD 66                      	DB	66H			    ;AN000;LB. use double word move
 26842                                  nodd:
 26843 000047DE F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 26844 000047E0 F8                      	CLC				    ;AN000;LB. clear carry
 26845 000047E1 C3                      	retn				    ;AN000;LB. exit
 26846                                  noSC:					    ;AN000;
 26847 000047E2 F9                      	STC				    ;AN000;LB. set carry
 26848                                  sexit:					    ;AN000;
 26849 000047E3 C3                      	retn				    ;AN000;LB.
 26850                                  
 26851                                  ;============================================================================
 26852                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 26853                                  ;============================================================================
 26854                                  ; 29/07/2018 - Retro DOS v3.0
 26855                                  ; 19/05/2019 - Retro DOS v4.0
 26856                                  
 26857                                  ;	TITLE	MKNODE - Node maker
 26858                                  ;	NAME	MKNODE
 26859                                  
 26860                                  ;**	MKNODE.ASM
 26861                                  ;----------------------------------------------------------------------------
 26862                                  ;	Low level routines for making a new local file system node
 26863                                  ;	and filling in an SFT from a directory entry
 26864                                  ;
 26865                                  ;	BUILDDIR
 26866                                  ;	SETDOTENT
 26867                                  ;	MakeNode
 26868                                  ;	NEWENTRY
 26869                                  ;	FREEENT
 26870                                  ;	NEWDIR
 26871                                  ;	DOOPEN
 26872                                  ;	RENAME_MAKE
 26873                                  ;	CHECK_VIRT_OPEN
 26874                                  ;
 26875                                  ;	Revision history:
 26876                                  ;
 26877                                  ;	 AN000	version 4.0  Jan. 1988
 26878                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 26879                                  
 26880                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 26881                                  ;----------------------------------------------------------------------------
 26882                                  ;
 26883                                  ; Procedure Name : BUILDDIR,NEWDIR
 26884                                  ;
 26885                                  ; Inputs:
 26886                                  ;       ES:BP Points to DPB
 26887                                  ;       [THISSFT] Set if using NEWDIR entry point
 26888                                  ;               (used by ALLOCATE)
 26889                                  ;       [LASTENT] current last valid entry number in directory if no free
 26890                                  ;               entries
 26891                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26892                                  ; Function:
 26893                                  ;       Grow directory if no free entries and not root
 26894                                  ; Outputs:
 26895                                  ;       CARRY SET IF FAILURE
 26896                                  ;       ELSE
 26897                                  ;          AX entry number of new entry
 26898                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 26899                                  ;               AX = first entry of new dir
 26900                                  ;       GETENT should be called to set [LASTENT]
 26901                                  ;
 26902                                  ;----------------------------------------------------------------------------
 26903                                  
 26904                                  ; 19/05/2019 - Retro DOS v4.0
 26905                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 26906                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26907                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 26908                                  
 26909                                  BUILDDIR:
 26910                                  	; 29/07/2018 - Retro DOS v3.0
 26911                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 26912                                  
 26913 000047E4 A1[D805]                        MOV     AX,[ENTFREE]
 26914 000047E7 83F8FF                          CMP     AX,-1 ; 0FFFFh
 26915                                  	;JZ	short CHECK_IF_ROOT
 26916                                          ;CLC
 26917                                          ;retn
 26918                                  	; 24/09/2023
 26919 000047EA 7507                    	jne	short builddir_cmc_retn  ; cf=1 (will be 0)
 26920                                  
 26921                                  CHECK_IF_ROOT:
 26922 000047EC 833E[C205]00                    CMP     word [DIRSTART],0
 26923 000047F1 7502                            JNZ	short NEWDIR
 26924                                          ;STC
 26925                                  	; 24/09/2023
 26926                                  	; [DIRSTART]=0, cf=0, zf=1 (cf will be 1 after cmc instruction)
 26927                                  builddir_cmc_retn:
 26928                                  	; 24/09/2023
 26929 000047F3 F5                      	cmc	; cf=1 <-> cf=0
 26930                                  builddir_retn:
 26931 000047F4 C3                              retn				; Can't grow root
 26932                                  
 26933                                  	;entry   NEWDIR
 26934                                  NEWDIR: 
 26935 000047F5 8B1E[C205]              	MOV     BX,[DIRSTART]
 26936 000047F9 09DB                            OR      BX,BX
 26937 000047FB 7405                            JZ	short NULLDIR
 26938 000047FD E82B06                  	call	GETEOF
 26939 00004800 72F2                            jc	short builddir_retn	; Screw up
 26940                                  NULLDIR:
 26941 00004802 B90100                          MOV     CX,1
 26942 00004805 E83C05                  	call	ALLOCATE
 26943 00004808 72EA                            jc	short  builddir_retn
 26944 0000480A 8B16[C205]                      MOV     DX,[DIRSTART]
 26945 0000480E 09D2                            OR      DX,DX
 26946 00004810 750D                            JNZ	short ADDINGDIR
 26947 00004812 E8CCF5                  	call	SETDIRSRCH
 26948 00004815 72DD                            jc	short  builddir_retn
 26949 00004817 C706[4803]FFFF                  MOV     word [LASTENT],-1
 26950 0000481D EB29                            JMP     SHORT GOTDIRREC
 26951                                  ADDINGDIR:
 26952 0000481F 53                              PUSH    BX
 26953 00004820 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 26954 00004824 E8300C                          call	IsEOF
 26955 00004827 5B                              POP     BX
 26956 00004828 7217                            JB	short NOTFIRSTGROW
 26957                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26958 0000482A 891E[BC05]                      MOV     [CLUSNUM],BX
 26959                                  	; 24/09/2023
 26960                                  	;PUSH	CX ; (not necessary)
 26961 0000482E 50                      	PUSH	AX
 26962 0000482F 55                      	PUSH	BP
 26963 00004830 B401                            MOV     AH,1			; CLUSNUM update
 26964                                  	; 15/12/2022
 26965 00004832 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 26966                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26967                                  	;;mov	dl,[es:bp+0]
 26968                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 26969 00004836 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 26970 0000483A 89DD                            MOV     BP,BX 			; CLUSNUM
 26971 0000483C E846DE                  	call	FastOpen_Update
 26972 0000483F 5D                              POP     BP
 26973 00004840 58                              POP     AX
 26974                                  	; 24/09/2023
 26975                                          ;POP	CX
 26976                                  
 26977                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26978                                  NOTFIRSTGROW:
 26979 00004841 89DA                            MOV     DX,BX
 26980 00004843 30DB                            XOR     BL,BL
 26981 00004845 E8CF04                  	call	FIGREC
 26982                                  GOTDIRREC:
 26983                                  	;mov	cl,[es:bp+4]
 26984 00004848 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 26985 0000484C FEC1                            INC     CL
 26986 0000484E 30ED                            XOR     CH,CH
 26987                                  ZERODIR:
 26988 00004850 51                              PUSH    CX
 26989                                  	; 22/09/2023
 26990                                  	;;mov	byte [ALLOWED],18h
 26991                                          ;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 26992 00004851 B0FF                            MOV     AL,0FFH
 26993                                          ;call	GETBUFFR
 26994 00004853 E82510                          call	GETBUFFRD ; *
 26995 00004856 7302                    	JNC	short GET_SSIZE
 26996 00004858 59                              POP     CX
 26997 00004859 C3                              retn
 26998                                  
 26999                                  GET_SSIZE:
 27000                                  	;mov	cx,[es:bp+2]
 27001 0000485A 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 27002 0000485E 06                              PUSH    ES
 27003 0000485F C43E[E205]                      LES     DI,[CURBUF]
 27004                                  	;or	byte [es:di+5],4
 27005 00004863 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 27006 00004868 57                              PUSH    DI
 27007                                  	;;add	di,16	; MSDOS 3.3
 27008                                  	;add	di,20	; MSDOS 6.0	
 27009 00004869 83C714                          ADD     DI,BUFINSIZ
 27010 0000486C 31C0                            XOR     AX,AX
 27011 0000486E D1E9                            SHR     CX,1
 27012 00004870 F3AB                            REP     STOSW
 27013 00004872 7301                            JNC	short EVENZ
 27014 00004874 AA                              STOSB
 27015                                  EVENZ:
 27016 00004875 5F                              POP     DI
 27017                                  
 27018                                  	; MSDOS 6.0
 27019 00004876 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 27020                                  					;LB. if already dirty		  ;AN000;
 27021 0000487B 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 27022 0000487D E80212                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 27023                                          
 27024                                  	;or	byte [es:di+5],40h
 27025 00004880 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 27026                                  yesdirty7:
 27027 00004885 07                              POP	ES
 27028 00004886 59                              POP	CX
 27029                                  
 27030                                  	; 19/05/2019 - Retro DOS v4.0
 27031                                  
 27032                                  	; MSDOS 3.3
 27033                                  	;INC	DX
 27034                                  
 27035                                  	; MSDOS 6.0
 27036                                  	; 24/09/2023
 27037                                  	;add	dx,1
 27038                                  	;;adc	word [HIGH_SECTOR],0
 27039                                  	;; 24/09/2023
 27040                                  	;; ax=0
 27041                                  	;adc	[HIGH_SECTOR],ax ; 0
 27042                                  	; 24/09/2023
 27043 00004887 42                      	inc	dx
 27044 00004888 7504                    	jnz	short loop_zerodir
 27045 0000488A FF06[0706]              	inc	word [HIGH_SECTOR]
 27046                                  loop_zerodir:
 27047 0000488E E2C0                            LOOP    ZERODIR
 27048                                  
 27049 00004890 A1[4803]                        MOV     AX,[LASTENT]
 27050 00004893 40                              INC     AX
 27051                                  	; 24/09/2023
 27052                                  	; cf=0
 27053                                  	;CLC
 27054 00004894 C3                              retn
 27055                                  
 27056                                  ;--------------------------------------------------------------------------
 27057                                  ;
 27058                                  ; Procedure Name : SETDOTENT
 27059                                  ;
 27060                                  ; set up a . or .. directory entry for a directory.
 27061                                  ;
 27062                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 27063                                  ;               AX contains ". " or ".."
 27064                                  ;               DX contains first cluster of entry
 27065                                  ;
 27066                                  ;----------------------------------------------------------------------------
 27067                                  
 27068                                  SETDOTENT:
 27069                                  ;	Fill in name field
 27070 00004895 AB                              STOSW
 27071 00004896 B90400                          MOV     CX,4
 27072 00004899 B82020                          MOV     AX,"  " ; 2020h
 27073 0000489C F3AB                            REP     STOSW
 27074 0000489E AA                              STOSB
 27075                                  
 27076                                  ;	Set up attribute
 27077                                  	;mov	al, 10h
 27078 0000489F B010                            MOV     AL,attr_directory
 27079 000048A1 AA                              STOSB
 27080                                  
 27081                                  ;	Initialize time and date of creation
 27082 000048A2 83C70A                          ADD     DI,10
 27083 000048A5 8B36[9E05]                      MOV     SI,[THISSFT]
 27084                                  	;mov	ax,[si+0Dh]
 27085 000048A9 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 27086 000048AC AB                              STOSW
 27087                                  	;mov	ax,[si+0Fh]
 27088 000048AD 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 27089 000048B0 AB                      	STOSW
 27090                                  
 27091                                  ;	Set up first cluster field
 27092 000048B1 89D0                            MOV     AX,DX
 27093 000048B3 AB                              STOSW
 27094                                  
 27095                                  ;	0 file size
 27096 000048B4 31C0                            XOR     AX,AX
 27097 000048B6 AB                              STOSW
 27098 000048B7 AB                              STOSW
 27099 000048B8 C3                              retn
 27100                                  
 27101                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 27102                                  ;---------------------------------------------------------------------------
 27103                                  ;
 27104                                  ; Procedure Name : MakeNode
 27105                                  ;
 27106                                  ; Inputs:
 27107                                  ;       AL - attribute to create
 27108                                  ;       AH = 0 if it is ok to truncate a file already by this name
 27109                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 27110                                  ;               (AH ignored on dirs and devices)
 27111                                  ;
 27112                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 27113                                  ;               a name already existant is ALWAYS an error in these cases.
 27114                                  ;
 27115                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 27116                                  ;               terminated)
 27117                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 27118                                  ;               ( = -1 if current dir not involved, else
 27119                                  ;                Points to first char after last "/" of current dir part)
 27120                                  ;       [THISCDS] Points to CDS being used
 27121                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 27122                                  ; Function:
 27123                                  ;       Make a new node
 27124                                  ; Outputs:
 27125                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 27126                                  ;       CARRY SET IF ERROR
 27127                                  ;          AX = 1 A node by this name exists and is a directory
 27128                                  ;          AX = 2 A new node could not be created
 27129                                  ;          AX = 3 A node by this name exists and is a disk file
 27130                                  ;               (AH was NZ on input)
 27131                                  ;          AX = 4 Bad Path
 27132                                  ;               SI return from GetPath maintained
 27133                                  ;          AX = 5 Attribute mismatch
 27134                                  ;          AX = 6 Sharing Violation
 27135                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 27136                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 27137                                  ;       ELSE
 27138                                  ;          AX = 0 Disk Node
 27139                                  ;          AX = 3 Device Node (error in some cases)
 27140                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 27141                                  ;               containing new node.
 27142                                  ;          [CURBUF+2]:BX Points to entry
 27143                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 27144                                  ;          [THISSFT] is filled in
 27145                                  ;               sf_mode = unchanged.
 27146                                  ;          Attribute byte in entry is input AL
 27147                                  ; DS preserved, others destroyed
 27148                                  ;
 27149                                  ;-------------------------------------------------------------------------
 27150                                  
 27151                                  ; 19/05/2019 - Retro DOS v4.0
 27152                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 27153                                  
 27154                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27155                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 27156                                  
 27157                                  MakeNode:
 27158                                  	;mov	word [CREATING],0E5FFh
 27159 000048B9 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 27160 000048BF 50                              PUSH    AX              ; Save AH value
 27161 000048C0 C606[4C03]00            	MOV	byte [NoSetDir],0
 27162 000048C5 A2[6D05]                	MOV	[SATTRIB],AL
 27163 000048C8 E879F5                  	call	GetPathNoSet
 27164 000048CB 88CA                            MOV     DL,CL           ; Save CL info
 27165 000048CD 89C1                            MOV     CX,AX           ; Device ID to CH
 27166 000048CF 58                              POP     AX              ; Get back AH
 27167 000048D0 732E                            JNC	short make_exists ; File existed
 27168 000048D2 7505                            JNZ	short make_err_4 ; Path bad
 27169 000048D4 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 27170 000048D7 7406                            JZ	short make_type	; Name simply not found, and no metas
 27171                                  make_err_4:
 27172 000048D9 B004                            MOV     AL,4            ; case 1 bad path
 27173                                  make_err_ret:
 27174 000048DB 30E4                            XOR     AH,AH
 27175 000048DD F9                              STC
 27176                                  ;make_retn:	; 22/11/2022
 27177 000048DE C3                              retn
 27178                                  
 27179                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 27180                                  RENAME_MAKE:
 27181                                  make_type:
 27182                                  ;Extended Open hooks
 27183                                  	; MSDOS 6.0
 27184                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 27185 000048DF F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 27186 000048E4 7411                    	JZ	short make_type2	;FT. no				;AN000;
 27187 000048E6 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 27188                                  					;FT. set for extended open ;AN000;
 27189                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 27190 000048EB F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 27191 000048F0 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 27192 000048F2 F9                      	STC				;FT. set carry			;AN000;
 27193 000048F3 B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 27194                                  	; 22/11/2022
 27195                                  make_retn:
 27196                                  	;return
 27197 000048F6 C3                      	retn				;FT.				;AN000;
 27198                                  
 27199                                  ;	Extended Open hooks
 27200                                  
 27201                                  make_type2:
 27202 000048F7 C43E[9E05]                      LES     DI,[THISSFT]
 27203 000048FB 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 27204 000048FD F9                              STC                     ; Not found
 27205 000048FE EB5A                            JMP     short make_new
 27206                                  
 27207                                  ; The node exists. It may be either a device, directory or file:
 27208                                  ;   Zero set => directory
 27209                                  ;   High bit of CH on => device
 27210                                  ;   else => file
 27211                                  
 27212                                  make_exists:
 27213 00004900 7448                            JZ	short make_exists_dir
 27214 00004902 B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 27215                                  	;test	byte [ATTRIB],18h
 27216 00004904 F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 27217 00004909 753B                            JNZ	short make_err_ret_5
 27218                                  				; Cannot already exist as Disk or Device Node
 27219                                                                  ;       if making DIR or Volume ID
 27220 0000490B 08ED                            OR      CH,CH
 27221 0000490D 781A                            JS	short make_share ; No further checks on attributes if device
 27222 0000490F 08E4                            OR      AH,AH
 27223 00004911 75C8                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 27224 00004913 51                              PUSH    CX              ; Save device ID
 27225 00004914 8E06[E405]                      MOV     ES,[CURBUF+2]
 27226                                  	;mov	ch,[es:bx+0Bh]
 27227 00004918 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 27228                                  	;test	ch,1
 27229 0000491C F6C501                  	test	CH,attr_read_only
 27230 0000491F 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 27231 00004921 E8C2F7                  	call	MatchAttributes
 27232 00004924 59                              POP     CX              ; Devid back in CH
 27233 00004925 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 27234 00004927 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 27235                                  make_share:
 27236 00004929 30E4                            XOR     AH,AH
 27237 0000492B 50                              PUSH    AX              ; Save Disk or Device node
 27238 0000492C 51                              PUSH    CX              ; Save Device ID
 27239 0000492D 88EC                            MOV     AH,CH           ; Device ID to AH
 27240 0000492F E84501                          CALL    DOOPEN          ; Fill in SFT for share check
 27241 00004932 C43E[9E05]                      LES     DI,[THISSFT]
 27242 00004936 56                      	push	si
 27243 00004937 53                      	push	bx		; Save CURBUF pointers
 27244 00004938 E86A29                  	call	ShareEnter
 27245 0000493B 735A                            jnc	short MakeEndShare
 27246                                  
 27247                                  ; User failed request.
 27248 0000493D 5B                      	pop	bx
 27249 0000493E 5E                      	pop	si
 27250 0000493F 59                      	pop	cx
 27251 00004940 58                      	pop	ax
 27252                                  
 27253                                  Make_Share_ret:
 27254 00004941 B006                            MOV     AL,6
 27255 00004943 EB96                            JMP	short make_err_ret
 27256                                  
 27257                                  make_err_ret_5P:
 27258 00004945 59                              POP     CX              ; Get back device ID
 27259                                  make_err_ret_5:
 27260 00004946 B005                            MOV     AL,5            ; Attribute mismatch
 27261                                          ; 22/11/2022
 27262 00004948 EB91                    	JMP     short make_err_ret
 27263                                  
 27264                                  make_exists_dir:
 27265 0000494A B001                            MOV     AL,1            ; exists as directory, always an error
 27266                                  	; 22/11/2022
 27267 0000494C EB8D                    	JMP     short make_err_ret
 27268                                  
 27269                                  make_save:
 27270 0000494E 50                              PUSH    AX              ; Save whether Disk or File
 27271 0000494F 89C8                            MOV     AX,CX           ; Device ID to AH
 27272 00004951 E87400                          CALL    NEWENTRY
 27273 00004954 58                              POP     AX              ; 0 if Disk, 3 if File
 27274 00004955 739F                            jnc	short make_retn
 27275 00004957 B002                            MOV     AL,2            ; create failed case 2
 27276                                  make_save_retn:
 27277 00004959 C3                              retn
 27278                                  
 27279                                  make_new:
 27280 0000495A E8F1FF                          call    make_save
 27281 0000495D 72FA                            jc	short make_save_retn	; case 2 fail
 27282                                  	;test	byte [ATTRIB],10h
 27283 0000495F F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 27284 00004964 75F3                            jnz	short make_save_retn	; Don't "open" directories,
 27285                                  					; so don't tell the sharer about them
 27286 00004966 50                      	push	ax
 27287 00004967 53                      	push	bx
 27288 00004968 56                      	push	si		
 27289 00004969 E83929                          call	ShareEnter
 27290 0000496C 5E                      	pop	si
 27291 0000496D 5B                      	pop	bx
 27292 0000496E 58                      	pop	ax
 27293 0000496F 73E8                    	jnc	short make_save_retn
 27294                                  
 27295                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 27296                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 27297                                  ; possible: delete the newly created directory entry and return share_error.
 27298                                  
 27299 00004971 50                              PUSH    AX
 27300 00004972 C43E[E205]                      LES     DI,[CURBUF]
 27301                                  	;mov	byte [es:bx],0E5h
 27302 00004976 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 27303                                  	
 27304                                  	; MSDOS 6.0
 27305                                  	;test	byte [es:di+5],40h
 27306 0000497A 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 27307                                  					;LB. if already dirty		  ;AN000;
 27308 0000497F 7508                            JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 27309                                  	; 22/11/2022
 27310 00004981 E8FE10                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27311                                  	;or	byte [es:di+5],40h
 27312 00004984 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 27313                                  yesdirty8:
 27314 00004989 C42E[8A05]                      LES     BP,[THISDPB]
 27315                                  	; 15/12/2022
 27316 0000498D 268A4600                        mov	al,[ES:BP]
 27317                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27318                                  	;;mov	al,[es:bp+0]
 27319                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 27320 00004991 E8E90F                          call	FLUSHBUF		; write out buffer.
 27321 00004994 58                              POP     AX
 27322 00004995 EBAA                            jmp	short Make_Share_ret
 27323                                  
 27324                                  ; We have found an existing file. We have also entered it into the share set.
 27325                                  ; At this point we need to call newentry to correctly address the problem of
 27326                                  ; getting rid of old data (create an existing file) or creating a new
 27327                                  ; directory entry (create a new file). Unfortunately, this operation may
 27328                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 27329                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 27330                                  ; the share set now, do the operation and then reassert the share access.
 27331                                  ;
 27332                                  ; We are allowed to do this! There is no window! After all, we are in
 27333                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 27334                                  
 27335                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27336                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 27337                                  
 27338                                  MakeEndShare:
 27339 00004997 C43E[9E05]                      LES     DI,[THISSFT]		; grab SFT
 27340 0000499B 31C0                            XOR     AX,AX
 27341 0000499D E858C9                  	call	ECritSFT
 27342 000049A0 268705                  	xchg	AX,[ES:DI]
 27343                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 27344 000049A3 50                      	push	ax
 27345 000049A4 57                      	push	di
 27346 000049A5 06                      	push	es
 27347 000049A6 9C                              PUSHF
 27348 000049A7 E8F628                          call	ShareEnd                ; remove sharing
 27349 000049AA 9D                              POPF
 27350 000049AB 07                      	pop	es
 27351 000049AC 5F                      	pop	di
 27352 000049AD 268F05                          pop	word [ES:DI]	
 27353                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 27354 000049B0 E860C9                  	call	LCritSFT
 27355                                  	; 22/11/2022
 27356                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 27357 000049B3 5B                      	pop	bx
 27358 000049B4 5E                      	pop	si
 27359 000049B5 59                      	pop	cx
 27360 000049B6 58                      	pop	ax
 27361 000049B7 E894FF                          CALL    make_save
 27362                                  
 27363                                  ; If the user failed, we do not reenter into the sharing set.
 27364                                  
 27365 000049BA 729D                            jc	short make_save_retn	; bye if error
 27366 000049BC 50                      	push	ax
 27367 000049BD 53                      	push	bx
 27368 000049BE 56                      	push	si
 27369 000049BF 9C                              PUSHF
 27370 000049C0 E8E228                          call	ShareEnter
 27371 000049C3 9D                              POPF
 27372 000049C4 5E                      	pop	si
 27373 000049C5 5B                      	pop	bx
 27374 000049C6 58                      	pop	ax
 27375                                  
 27376                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 27377                                  
 27378                                  makeendshare_retn:
 27379 000049C7 C3                              retn
 27380                                  
 27381                                  ;---------------------------------------------------------------------------
 27382                                  ;
 27383                                  ; Procedure Name : NEWENTRY
 27384                                  ;
 27385                                  ; Inputs:
 27386                                  ;       [THISSFT] set
 27387                                  ;       [THISDPB] set
 27388                                  ;       [LASTENT] current last valid entry number in directory if no free
 27389                                  ;               entries
 27390                                  ;       [VOLID] set if a volume ID was found during search
 27391                                  ;	Attrib Contains attributes for new file
 27392                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 27393                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 27394                                  ;               NC means file existed (device)
 27395                                  ;               C  means file did not exist
 27396                                  ;       AH = Device ID byte
 27397                                  ;       If FILE
 27398                                  ;           [CURBUF+2]:BX points to start of directory entry
 27399                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 27400                                  ;       If device
 27401                                  ;           DS:BX points to start of "fake" directory entry
 27402                                  ;           DS:SI points to dir_first of "fake" directory entry
 27403                                  ;               (has DWORD pointer to device header)
 27404                                  ; Function:
 27405                                  ;       Make a new directory entry
 27406                                  ;       If an old one existed it is truncated first
 27407                                  ; Outputs:
 27408                                  ;       Carry set if error
 27409                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 27410                                  ;               vol ID, user FAILed to I 24
 27411                                  ;       else
 27412                                  ;               outputs of DOOPEN
 27413                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 27414                                  ;
 27415                                  ;----------------------------------------------------------------------------
 27416                                  
 27417                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27418                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 27419                                  
 27420                                  NEWENTRY:
 27421 000049C8 C42E[8A05]              	LES     BP,[THISDPB]
 27422 000049CC 7315                            JNC	short EXISTENT	
 27423 000049CE 803E[4A03]00                    CMP     byte [FAILERR],0
 27424                                  	;STC
 27425                                          ;jnz	short makeendshare_retn	; User FAILed, node might exist
 27426                                          ; 24/09/2023
 27427 000049D3 750C                    	jnz	short ERRRET3
 27428 000049D5 E80CFE                  	CALL    BUILDDIR        ; Try to build dir
 27429 000049D8 72ED                            jc	short makeendshare_retn	; Failed
 27430 000049DA E8D5F3                          call	GETENT          ; Point at that free entry
 27431 000049DD 72E8                            jc	short makeendshare_retn	; Failed
 27432 000049DF EB0E                            JMP     SHORT FREESPOT
 27433                                  
 27434                                  ERRRET3:
 27435 000049E1 F9                              STC
 27436                                  newentry_retn:
 27437 000049E2 C3                              retn
 27438                                  
 27439                                  EXISTENT:
 27440 000049E3 08E4                            OR      AH,AH           ; Check if file is I/O device
 27441 000049E5 7903                            JNS	short NOT_DEV1
 27442 000049E7 E98D00                          JMP     DOOPEN          ; If so, proceed with open
 27443                                  
 27444                                  NOT_DEV1:
 27445 000049EA E82901                          call	FREEENT		; Free cluster chain
 27446 000049ED 72F3                            jc	short newentry_retn ; Failed
 27447                                  FREESPOT:
 27448                                  	;test	byte [ATTRIB],8
 27449 000049EF F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 27450 000049F4 7407                            JZ	short NOTVOLID
 27451 000049F6 803E[7B05]00                    CMP     BYTE [VOLID],0
 27452 000049FB 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 27453                                  NOTVOLID:
 27454 000049FD 8E06[E405]                      MOV     ES,[CURBUF+2]
 27455 00004A01 89DF                            MOV     DI,BX
 27456                                  
 27457 00004A03 BE[4B05]                        MOV     SI,NAME1
 27458                                  
 27459 00004A06 B90500                          MOV     CX,5
 27460 00004A09 F3A5                            REP     MOVSW
 27461 00004A0B A4                              MOVSB                   ; Move name into dir entry
 27462 00004A0C A0[6B05]                	MOV	AL,[ATTRIB]
 27463 00004A0F AA                      	STOSB                   ; Attributes
 27464                                  
 27465                                  ;; File Tagging for Create DOS 4.00
 27466 00004A10 B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 27467                                  ;; File Tagging for Create DOS 4.00
 27468                                  
 27469 00004A12 31C0                            XOR     AX,AX
 27470 00004A14 F3AB                            REP     STOSW           ; Zero pad
 27471 00004A16 E8D2C0                          call	DATE16
 27472 00004A19 92                              XCHG    AX,DX
 27473 00004A1A AB                              STOSW                   ; dir_time
 27474 00004A1B 92                              XCHG    AX,DX
 27475 00004A1C AB                              STOSW                   ; dir_date
 27476 00004A1D 31C0                            XOR     AX,AX
 27477 00004A1F 57                              PUSH    DI              ; Correct SI input value
 27478                                  				; 	(recomputed for new buffer)
 27479 00004A20 AB                              STOSW                   ; Zero dir_first and size
 27480 00004A21 AB                              STOSW
 27481 00004A22 AB                              STOSW
 27482                                  updnxt:
 27483 00004A23 8B36[E205]              	MOV	SI,[CURBUF]
 27484                                  
 27485                                  	; 19/05/2019 - Retro DOS v4.0
 27486                                  
 27487                                  	; MSDOS 6.0
 27488 00004A27 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27489                                  				;LB. if already dirty		  ;AN000;
 27490 00004A2C 7508                            JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 27491 00004A2E E85110                          call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 27492                                          
 27493                                  	;or	byte [es:si+5],40h
 27494 00004A31 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27495                                  yesdirty9:
 27496 00004A36 C42E[8A05]                      LES     BP,[THISDPB]
 27497                                  	; 15/12/2022
 27498 00004A3A 268A4600                	MOV	AL,[ES:BP]
 27499                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27500                                  	;;mov	al,[es:bp+0]
 27501                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 27502 00004A3E 50                              PUSH    AX
 27503 00004A3F 53                              PUSH    BX
 27504                                  
 27505                                  ; If we have a file, we need to increment the open ref. count so that
 27506                                  ; we have some protection against invalid media changes if an Int 24
 27507                                  ; error occurs.
 27508                                  ; Do nothing for a device.
 27509                                  
 27510 00004A40 06                      	push	es
 27511 00004A41 57                      	push	di
 27512 00004A42 C43E[9E05]                      LES     DI,[THISSFT]
 27513                                  	;test	word [es:di+5],80h
 27514                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 27515 00004A46 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 27516 00004A4B 751A                            jnz	short GotADevice
 27517 00004A4D 1E                      	push	ds
 27518 00004A4E 53                      	push	bx
 27519 00004A4F C51E[8A05]                      LDS     BX,[THISDPB]
 27520                                  	;mov	[es:di+7],bx
 27521 00004A53 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 27522 00004A57 8CDB                            MOV     BX,DS
 27523                                  	;mov	[es:di+9],bx
 27524 00004A59 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 27525 00004A5D 5B                      	pop	bx
 27526 00004A5E 1F                      	pop	ds ; need to use DS for segment later on
 27527 00004A5F E8AAFA                  	call	DEV_OPEN_SFT    ; increment ref. count
 27528 00004A62 C606[A20A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 27529                                  GotADevice:
 27530 00004A67 5F                      	pop	di
 27531 00004A68 07                      	pop	es
 27532                                  
 27533 00004A69 E8110F                          call	FLUSHBUF
 27534 00004A6C E8EF00                          Call    CHECK_VIRT_OPEN ; decrement ref. count            ;AN000;
 27535 00004A6F 5B                              POP     BX
 27536 00004A70 58                              POP     AX
 27537 00004A71 5E                              POP     SI              ; Get SI input back
 27538 00004A72 88C4                            MOV     AH,AL           ; Get I/O driver number back
 27539 00004A74 7301                    	jnc	short DOOPEN    ; Failed
 27540 00004A76 C3                      	retn
 27541                                  	
 27542                                  ;NOTE FALL THROUGH
 27543                                  
 27544                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 27545                                  
 27546                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27547                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 27548                                  
 27549                                  ; DOOPEN
 27550                                  ;----------------------------------------------------------------------------
 27551                                  ;
 27552                                  ; Inputs:
 27553                                  ;       [THISDPB] points to DPB if file
 27554                                  ;       [THISSFT] points to SFT being used
 27555                                  ;       AH = Device ID byte
 27556                                  ;       If FILE
 27557                                  ;           [CURBUF+2]:BX points to start of directory entry
 27558                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 27559                                  ;       If device
 27560                                  ;           DS:BX points to start of "fake" directory entry
 27561                                  ;           DS:SI points to dir_first of "fake" directory entry
 27562                                  ;               (has DWORD pointer to device header)
 27563                                  ; Function:
 27564                                  ;       Fill in SFT from dir entry
 27565                                  ; Outputs:
 27566                                  ;       CARRY CLEAR
 27567                                  ;       sf_ref_count and sf_mode fields not altered
 27568                                  ;       sf_flags high byte = 0
 27569                                  ;       sf_flags low byte = AH except
 27570                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 27571                                  ;       sf_attr sf_date sf_time sf_name set from entry
 27572                                  ;       sf_position = 0
 27573                                  ;       If device
 27574                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 27575                                  ;           sf_size = 0
 27576                                  ;       If file
 27577                                  ;           sf_firclus sf_size set from entry
 27578                                  ;           sf_devptr = [THISDPB]
 27579                                  ;           sf_cluspos = 0
 27580                                  ;           sf_lstclus = sf_firclus
 27581                                  ;           sf_dirsec sf_dirpos set
 27582                                  ; DS,SI,BX preserved, others destroyed
 27583                                  ;
 27584                                  ;----------------------------------------------------------------------------
 27585                                  
 27586                                  	;entry	DOOPEN
 27587                                  DOOPEN:
 27588                                  ;	Generate and store attribute
 27589                                  
 27590 00004A77 88E6                            MOV     DH,AH           ; AH to different place
 27591 00004A79 C43E[9E05]                      LES     DI,[THISSFT]
 27592                                  	;add	di,4
 27593 00004A7D 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 27594                                  	; 24/09/2023
 27595 00004A80 31C0                    	xor	ax,ax
 27596                                  	;XOR	AL,AL		; Assume it's a device, devices have an
 27597                                  				;   attribute of 0 (for R/O testing etc).
 27598 00004A82 08F6                            OR      DH,DH           ; See if our assumption good.
 27599 00004A84 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 27600 00004A86 8E1E[E405]                      MOV     DS,[CURBUF+2]
 27601                                  	;mov	al,[BX+0Bh]
 27602 00004A8A 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 27603                                  				; If file, get attrib from dir entry
 27604                                  DEV_SFT1:
 27605 00004A8D AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 27606                                  
 27607                                  ;	Generate and store flags word
 27608                                  
 27609                                  	; 24/09/2023
 27610                                  	;XOR	AX,AX
 27611                                          ; ah=0
 27612 00004A8E 88F0                    	MOV     AL,DH
 27613                                  	;or	al,40h
 27614 00004A90 0C40                            OR      AL,devid_file_clean
 27615 00004A92 AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 27616                                  
 27617                                  ;	Generate and store device pointer
 27618                                  
 27619 00004A93 1E                              PUSH    DS
 27620                                  	;lds	ax,[bx+1Ah]
 27621 00004A94 C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 27622 00004A97 08F6                            OR      DH,DH
 27623 00004A99 7805                            JS	short DEV_SFT2
 27624                                  
 27625                                  ;hkn; SS override
 27626 00004A9B 36C506[8A05]                    LDS     AX,[SS:THISDPB]	; Was file
 27627                                  DEV_SFT2:
 27628 00004AA0 AB                              STOSW 			; store offset
 27629 00004AA1 8CD8                            MOV     AX,DS
 27630 00004AA3 1F                              POP     DS
 27631 00004AA4 AB                      	STOSW			; store segment
 27632                                  				; ES:DI -> sf_firclus
 27633                                  
 27634                                  ;	Generate pointer to, generate and store first cluster 
 27635                                  ;	(irrelevant for devices)
 27636                                  
 27637 00004AA5 56                              PUSH    SI              ; Save pointer to dir_first
 27638 00004AA6 A5                              MOVSW                   ; dir_first -> sf_firclus
 27639                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 27640                                  
 27641                                  ;	Copy time/date of last modification
 27642                                  
 27643                                  	;sub	si,6
 27644 00004AA7 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 27645                                  				; DS:SI->dir_time
 27646 00004AAA A5                              MOVSW                   ; dir_time -> sf_time
 27647                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 27648 00004AAB A5                              MOVSW                   ; dir_date -> sf_date
 27649                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 27650                                  
 27651                                  ;	Generate and store file size (0 for devices)
 27652                                  
 27653 00004AAC AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 27654 00004AAD AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 27655 00004AAE 89C1                            MOV     CX,AX           ; dir_size_l in CX
 27656 00004AB0 AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 27657 00004AB1 08F6                            OR      DH,DH
 27658 00004AB3 7904                            JNS	short FILE_SFT1
 27659 00004AB5 31C0                            XOR     AX,AX
 27660 00004AB7 89C1                            MOV     CX,AX           ; Devices are open ended
 27661                                  FILE_SFT1:
 27662 00004AB9 91                              XCHG    AX,CX
 27663 00004ABA AB                              STOSW                   ; Low word of sf_size
 27664 00004ABB 91                              XCHG    AX,CX
 27665 00004ABC AB                              STOSW                   ; High word of sf_size
 27666                                                                  ; ES:DI -> sf_position
 27667                                  ; Initialize position to 0
 27668                                  
 27669 00004ABD 31C0                            XOR     AX,AX
 27670 00004ABF AB                              STOSW
 27671 00004AC0 AB                              STOSW                   ; sf_position
 27672                                                                  ; ES:DI -> sf_cluspos
 27673                                  
 27674                                  ; Generate cluster optimizations for files
 27675                                  
 27676 00004AC1 08F6                            OR      DH,DH
 27677 00004AC3 7843                            JS	short DEV_SFT3
 27678 00004AC5 AB                              STOSW                   ; sf_cluspos ; 19h
 27679                                  	;mov	ax,[bx+1Ah]
 27680 00004AC6 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 27681                                  	; 19/05/2019
 27682                                  	; MSDOS 3.3
 27683                                  	;STOSW 			; sf_lstclus ; 1Bh
 27684                                  	; MSDOS 6.0
 27685 00004AC9 57                              PUSH	DI              ;AN004; save dirsec offset
 27686                                  	;sub	di,1Bh
 27687 00004ACA 83EF1B                          SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 27688                                  	;mov	[es:di+35h],ax
 27689 00004ACD 26894535                        MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 27690 00004AD1 5F                              POP	DI              ;AN004; restore dirsec offset
 27691                                  
 27692                                  ; DOS 3.3  FastOpen  6/13/86
 27693                                  
 27694 00004AD2 1E                      	PUSH	DS
 27695                                  
 27696                                  ;hkn; SS is DOSDATA
 27697 00004AD3 16                      	push	ss
 27698 00004AD4 1F                      	pop	ds
 27699                                  	;test	byte [FastOpenFlg],4
 27700 00004AD5 F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 27701 00004ADA 7411                    	JZ	short Not_FastOpen
 27702                                  
 27703                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 27704 00004ADC BE[3B0D]                        MOV     SI,FastOpen_Ext_Info
 27705                                  
 27706                                  	;mov	ax,[si+1]
 27707 00004ADF 8B4401                          MOV     AX,[SI+FEI.dirsec]
 27708 00004AE2 AB                              STOSW                   ; sf_dirsec
 27709                                  	; MSDOS 6.0
 27710                                  	;mov	ax,[si+3]
 27711 00004AE3 8B4403                          MOV	AX,[SI+FEI.dirsec+2]
 27712                                  				;;; changed for >32mb
 27713 00004AE6 AB                              STOSW                   ; sf_dirsec
 27714                                  	; 19/08//2018
 27715 00004AE7 8A04                    	mov	al,[SI]
 27716                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 27717 00004AE9 AA                              STOSB                   ; sf_dirpos
 27718 00004AEA 1F                              POP	DS
 27719                                          ;JMP	short Next_Name
 27720                                  	; 24/09/2023
 27721 00004AEB EB1E                    	jmp	short FILE_SFT2  ; cf=0 (after 'test' instruction)
 27722                                  
 27723                                  ; DOS 3.3  FastOpen  6/13/86
 27724                                  
 27725                                  Not_FastOpen:
 27726                                          ;POP     DS		; normal path
 27727                                  
 27728                                  ;hkn; SS override
 27729                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 27730                                  	; 16/12/2022
 27731                                  	; 28/07/2019
 27732 00004AED 8B36[E205]              	mov	si,[CURBUF]
 27733 00004AF1 1F                      	pop	ds
 27734                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27735                                  	;pop	ds
 27736                                  	;mov	si,[ss:CURBUF]
 27737                                  	
 27738                                  	;mov	ax,[si+6]
 27739 00004AF2 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 27740 00004AF5 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 27741                                  	; 19/05/2019        
 27742                                  	; MSDOS 6.0
 27743                                  	;mov	ax,[si+8]
 27744 00004AF6 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 27745 00004AF9 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 27746                                          
 27747 00004AFA 89D8                    	MOV     AX,BX
 27748                                  	;;add	si,16	; MSDOS 3.3	
 27749                                  	;add	si,20	; MSDOS 6.0
 27750 00004AFC 83C614                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 27751 00004AFF 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 27752                                          ;mov	cl,32
 27753 00004B01 B120                    	MOV     CL,dir_entry.size
 27754 00004B03 F6F1                            DIV     CL
 27755 00004B05 AA                              STOSB                   ; sf_dirpos
 27756                                  Next_Name:
 27757 00004B06 EB03                            JMP     SHORT FILE_SFT2
 27758                                  
 27759                                  	; 24/09/2023
 27760                                  	; cf=0 (after 'or' instruction)
 27761                                  DEV_SFT3:
 27762                                  	;add	di,7
 27763 00004B08 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 27764                                  FILE_SFT2:
 27765                                  
 27766                                  ; Copy in the object's name
 27767                                  
 27768 00004B0B 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 27769 00004B0D B90B00                          MOV     CX,11
 27770 00004B10 F3A4                            REP     MOVSB           ; sf_name
 27771 00004B12 5E                              POP     SI              ; recover DS:SI -> dir_first
 27772                                  
 27773                                  ;hkn; SS is DOSDATA
 27774 00004B13 16                              push	ss
 27775 00004B14 1F                      	pop	ds
 27776                                  	; 24/09/2023
 27777                                  	; cf=0
 27778                                          ;CLC
 27779 00004B15 C3                              retn
 27780                                  
 27781                                  ;---------------------------------------------------------------------------
 27782                                  ;
 27783                                  ; Procedure Name : FREEENT
 27784                                  ;
 27785                                  ; Inputs:
 27786                                  ;       ES:BP -> DPB
 27787                                  ;       [CURBUF] Set
 27788                                  ;       [CURBUF+2]:BX points to directory entry
 27789                                  ;       [CURBUF+2]:SI points to above dir_first
 27790                                  ; Function:
 27791                                  ;       Free the cluster chain for the entry if present
 27792                                  ; Outputs:
 27793                                  ;       Carry set if error (currently user FAILed to I 24)
 27794                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 27795                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 27796                                  ;---------------------------------------------------------------------------
 27797                                  
 27798                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27799                                  FREEENT:
 27800 00004B16 1E                              PUSH    DS
 27801 00004B17 C53E[E205]                      LDS     DI,[CURBUF]
 27802 00004B1B 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 27803                                  	; 19/05/2019 - Retro DOS v4.0
 27804                                  	; MSDOS 6.0
 27805 00004B1D 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 27806                                  ;hkn; SS override
 27807 00004B20 368916[0706]                    MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 27808 00004B25 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 27809 00004B28 1F                              POP     DS
 27810 00004B29 83F902                  	CMP	CX,2
 27811 00004B2C 722E                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 27812                                  	;cmp	cx,[es:bp+0Dh]
 27813 00004B2E 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 27814 00004B32 7728                            JA	short RET1	; Treat like zero length file (firclus mucked)
 27815 00004B34 29FB                            SUB     BX,DI
 27816 00004B36 53                              PUSH    BX              ; Save offset
 27817 00004B37 FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27818 00004B3B 52                              PUSH    DX              ; Save sector number
 27819 00004B3C 89CB                            MOV     BX,CX
 27820 00004B3E E8AF02                          call	RELEASE         ; Free any data allocated
 27821 00004B41 5A                              POP     DX
 27822 00004B42 8F06[0706]                      POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27823 00004B46 7302                            JNC	short GET_BUF_BACK
 27824 00004B48 5B                              POP     BX
 27825                                  freeent_retn:
 27826 00004B49 C3                              retn			; Screw up
 27827                                  
 27828                                  GET_BUF_BACK:
 27829                                  	; 22/09/2023
 27830                                  	;;mov	byte [ALLOWED],18h
 27831                                          ;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 27832                                          ;XOR	AL,AL ; *
 27833                                  	;call	GETBUFFR        ; Get sector back
 27834 00004B4A E82C0D                  	call	GETBUFFER ; * ; pre read  
 27835                                  
 27836 00004B4D 5B                              POP     BX              ; Get offset back
 27837 00004B4E 72F9                            jc	short freeent_retn
 27838 00004B50 E8C3EA                  	call	SET_BUF_AS_DIR
 27839 00004B53 031E[E205]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 27840 00004B57 89DE                            MOV     SI,BX
 27841                                  	;add	si,1Ah
 27842 00004B59 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 27843                                  RET1:
 27844 00004B5C F8                              CLC
 27845 00004B5D C3                              retn
 27846                                  
 27847                                  ;---------------------------------------------------------------------------
 27848                                  ;
 27849                                  ; Procedure Name : CHECK_VIRT_OPEN
 27850                                  ;
 27851                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 27852                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 27853                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 27854                                  ; flag [VIRTUAL_OPEN].
 27855                                  ; No registers affected (including flags).
 27856                                  ; On input, [THISSFT] points to current SFT.
 27857                                  ;
 27858                                  ;---------------------------------------------------------------------------
 27859                                  
 27860                                  CHECK_VIRT_OPEN:
 27861 00004B5E 50                      	PUSH    AX
 27862 00004B5F 9F                              lahf                    ; preserve flags
 27863 00004B60 803E[A20A]00                    CMP     byte [VIRTUAL_OPEN],0
 27864 00004B65 7410                            JZ	short ALL_CLOSED
 27865 00004B67 C606[A20A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 27866 00004B6C 06                      	push	es
 27867 00004B6D 57                      	push	di
 27868 00004B6E C43E[9E05]                      LES     DI,[THISSFT]
 27869 00004B72 E89FF9                          call	DEV_CLOSE_SFT
 27870 00004B75 5F                      	pop	di
 27871 00004B76 07                      	pop	es
 27872                                  
 27873                                  ALL_CLOSED:
 27874 00004B77 9E                              sahf                    ; restore flags
 27875 00004B78 58                              POP     AX
 27876 00004B79 C3                              retn
 27877                                  
 27878                                  ;============================================================================
 27879                                  ; ROM.ASM, MSDOS 6.0, 1991
 27880                                  ;============================================================================
 27881                                  ; 29/07/2018 - Retro DOS v3.0
 27882                                  ; 20/05/2019 - Retro DOS v4.0
 27883                                  
 27884                                  ;	TITLE	ROM - Miscellaneous routines
 27885                                  ;	NAME	ROM
 27886                                  
 27887                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 27888                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 27889                                  ;
 27890                                  ;	SKPCLP
 27891                                  ;	FNDCLUS
 27892                                  ;	BUFSEC
 27893                                  ;	BUFRD
 27894                                  ;	BUFWRT
 27895                                  ;	NEXTSEC
 27896                                  ;	OPTIMIZE
 27897                                  ;	FIGREC
 27898                                  ;	ALLOCATE
 27899                                  ;	RESTFATBYT
 27900                                  ;	RELEASE
 27901                                  ;	RELBLKS
 27902                                  ;	GETEOF
 27903                                  ;
 27904                                  ;	Modification history:
 27905                                  ;
 27906                                  ;		Created: ARR 30 March 1983
 27907                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 27908                                  
 27909                                  ;Break   <FNDCLUS -- Skip over allocation units>
 27910                                  ;--------------------------------------------------------------------------
 27911                                  ;
 27912                                  ; Procedure Name : FNDCLUS
 27913                                  ;
 27914                                  ; Inputs:
 27915                                  ;       CX = No. of clusters to skip
 27916                                  ;       ES:BP = Base of drive parameters
 27917                                  ;       [THISSFT] point to SFT
 27918                                  ; Outputs:
 27919                                  ;       BX = Last cluster skipped to
 27920                                  ;       CX = No. of clusters remaining (0 unless EOF)
 27921                                  ;       DX = Position of last cluster
 27922                                  ;       Carry set if error (currently user FAILed to I 24)
 27923                                  ; DI destroyed. No other registers affected.
 27924                                  ;--------------------------------------------------------------------------
 27925                                  
 27926                                  	; 10/02/2024 - Retro DOS v4.1
 27927                                  FNDCLUS_X:
 27928 00004B7A 8B0E[BC05]              	mov	cx,[CLUSNUM]
 27929                                  
 27930                                  ; 20/05/2019 - Retro DOS v4.0
 27931                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 27932                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27933                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 27934                                  
 27935                                  FNDCLUS:
 27936 00004B7E 06                      	PUSH	ES
 27937 00004B7F C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 27938                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 27939                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 27940 00004B83 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 27941                                  	;mov	dx,[es:di+19h]
 27942 00004B87 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 27943 00004B8B 09DB                    	OR	BX,BX
 27944 00004B8D 7424                    	JZ	short NOCLUS
 27945                                  
 27946 00004B8F 29D1                            SUB     CX,DX
 27947 00004B91 7308                            JNB	short FINDIT
 27948                                  
 27949 00004B93 01D1                            ADD     CX,DX
 27950 00004B95 31D2                            XOR     DX,DX
 27951                                  	;mov	bx,[es:di+0Bh]
 27952 00004B97 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 27953                                  FINDIT:
 27954 00004B9B 07                              POP	ES
 27955 00004B9C E313                    	JCXZ	RET9
 27956                                  
 27957                                  	;entry	SKPCLP
 27958                                  SKPCLP:
 27959 00004B9E E8CD08                  	call	UNPACK
 27960 00004BA1 7214                            jc	short fndclus_retn	; retc
 27961                                  
 27962                                  	; 09/09/2018
 27963                                  
 27964                                  	; MSDOS 3.3
 27965                                  	;push	bx
 27966                                  	;mov	bx,di
 27967                                  	;call	IsEOF
 27968                                  	;pop	bx	
 27969                                  	;jae	short RET9
 27970                                  
 27971                                  	; 20/05/2019 - Retro DOS v4.0
 27972                                  
 27973                                  	; MSDOS 6.0
 27974 00004BA3 87DF                    	xchg	bx,di
 27975 00004BA5 E8AF08                  	call	IsEOF
 27976 00004BA8 87DF                    	xchg	bx,di
 27977 00004BAA 7305                    	jae	short RET9
 27978                                  
 27979 00004BAC 87DF                            XCHG    BX,DI
 27980 00004BAE 42                              INC     DX
 27981                                  
 27982 00004BAF E2ED                    	LOOP	SKPCLP			; RMFS
 27983                                  RET9:	
 27984 00004BB1 F8                      	CLC
 27985 00004BB2 C3                              retn
 27986                                  NOCLUS:
 27987 00004BB3 07                              POP	ES
 27988 00004BB4 41                              INC	CX
 27989 00004BB5 4A                              DEC	DX
 27990 00004BB6 F8                              CLC
 27991                                  
 27992                                  fndclus_retn:
 27993 00004BB7 C3                              retn
 27994                                  
 27995                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 27996                                  ;--------------------------------------------------------------------------
 27997                                  ;
 27998                                  ; Procedure Name : BUFSEC
 27999                                  ;
 28000                                  ; Inputs:
 28001                                  ;       AH = priority of buffer
 28002                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 28003                                  ;       ES:BP = Base of drive parameters
 28004                                  ;       [CLUSNUM] = Physical cluster number
 28005                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 28006                                  ;       [BYTCNT1] = Size of transfer
 28007                                  ; Function:
 28008                                  ;       Insure specified sector is in buffer, flushing buffer before
 28009                                  ;       read if necessary.
 28010                                  ; Outputs:
 28011                                  ;       ES:DI = Pointer to buffer
 28012                                  ;       SI = Pointer to transfer address
 28013                                  ;       CX = Number of bytes
 28014                                  ;       [NEXTADD] updated
 28015                                  ;       [TRANS] set to indicate a transfer will occur
 28016                                  ;       Carry set if error (user FAILed to I 24)
 28017                                  ;--------------------------------------------------------------------------
 28018                                  
 28019                                  BUFSEC:
 28020 00004BB8 8B16[BC05]                      MOV     DX,[CLUSNUM]
 28021 00004BBC 8A1E[7305]                      MOV     BL,[SECCLUSPOS]
 28022                                  	;mov	byte [ALLOWED],38h
 28023 00004BC0 C606[4B03]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 28024 00004BC5 E84F01                          CALL    FIGREC
 28025 00004BC8 E8B50C                  	call	GETBUFFR
 28026 00004BCB 72EA                            jc	short fndclus_retn
 28027                                  
 28028 00004BCD C606[7405]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 28029 00004BD2 8B36[B805]                      MOV     SI,[NEXTADD]
 28030 00004BD6 89F7                            MOV     DI,SI
 28031 00004BD8 8B0E[D205]                      MOV     CX,[BYTCNT1]
 28032 00004BDC 01CF                            ADD     DI,CX
 28033 00004BDE 893E[B805]                      MOV     [NEXTADD],DI
 28034 00004BE2 C43E[E205]                      LES     DI,[CURBUF]
 28035                                  	;or	byte [es:di+5],8
 28036 00004BE6 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 28037                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 28038                                  	;lea	di,[di+20] ; MSDOS 6.0
 28039 00004BEB 8D7D14                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 28040 00004BEE 033E[CC05]                      ADD     DI,[BYTSECPOS]
 28041 00004BF2 F8                              CLC
 28042 00004BF3 C3                              retn
 28043                                  
 28044                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 28045                                  
 28046                                  ;---------------------------------------------------------------------------
 28047                                  ;
 28048                                  ; Procedure Name : BUFRD
 28049                                  ;
 28050                                  ; Do a partial sector read via one of the system buffers
 28051                                  ; ES:BP Points to DPB
 28052                                  ; Carry set if error (currently user FAILed to I 24)
 28053                                  ;
 28054                                  ; DS - set to DOSDATA
 28055                                  ;
 28056                                  ;----------------------------------------------------------------------------
 28057                                  
 28058                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28059                                  	; 20/05/2019 - Retro DOS v4.0
 28060                                  BUFRD:
 28061 00004BF4 06                              PUSH	ES
 28062 00004BF5 31C0                            xor	ax, ax			; pre-read sector
 28063 00004BF7 E8BEFF                          CALL    BUFSEC
 28064 00004BFA 7303                            JNC	short BUF_OK
 28065                                  
 28066                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 28067 00004BFC 07                              POP	ES
 28068 00004BFD EB2B                            JMP     SHORT RBUFPLACED
 28069                                  
 28070                                  BUF_OK:
 28071 00004BFF 8CC3                            MOV     BX,ES
 28072 00004C01 8E06[2E03]                      MOV     ES,[DMAADD+2]
 28073 00004C05 8EDB                            MOV     DS,BX
 28074 00004C07 87FE                    	XCHG    DI,SI
 28075 00004C09 D1E9                            SHR     CX,1
 28076                                  ;M039
 28077                                  	; MSDOS 3.3
 28078                                  	;JNC	short EVENRD
 28079                                  	;MOVSB
 28080                                  ;EVENRD:
 28081                                  	;REP     MOVSW
 28082                                  
 28083                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 28084                                  ;       DS:SI-> Source within Buffer.
 28085                                  ;       ES:DI-> Destination within Transfer memory block.
 28086                                  
 28087                                  	; MSDOS 6.0
 28088 00004C0B F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 28089                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 28090                                  	;rep	movsb                   ;Copy last byte.
 28091                                  	; 16/12/2022
 28092 00004C0D 7301                    	jnc	short EVENRD ; **** 20/05/2019
 28093 00004C0F A4                      	movsb ; ****
 28094                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28095                                  	;adc	cx,0
 28096                                  	;rep	movsb
 28097                                  ;M039
 28098                                  EVENRD: ; ****
 28099 00004C10 07                              POP	ES
 28100                                  ;hkn; SS override
 28101 00004C11 36C53E[E205]                    LDS     DI,[SS:CURBUF]
 28102                                  	;;lea	bx,[di+16]
 28103                                  	;lea	bx,[di+20] ; MSDOS 6.0
 28104 00004C16 8D5D14                  	LEA     BX,[DI+BUFINSIZ]
 28105 00004C19 29DE                            SUB     SI,BX                   ; Position in buffer
 28106 00004C1B E8020C                          call	PLACEBUF
 28107                                  	;cmp	si,[es:bp+2]
 28108 00004C1E 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 28109 00004C22 7205                            JB	short RBUFPLACEDC	; No, leave buf where it is
 28110                                  ;M039
 28111                                  	; MSDOS 3.3
 28112                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 28113                                                                          ;  even though it is MRU.
 28114                                          ; MSDOS 6.0
 28115 00004C24 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 28116                                  ;M039					; chucking even though it is MRU.
 28117                                  
 28118                                  RBUFPLACEDC:
 28119 00004C29 F8                              CLC
 28120                                  RBUFPLACED:
 28121 00004C2A 16                      	push	ss
 28122 00004C2B 1F                      	pop	ds
 28123 00004C2C C3                              retn
 28124                                  
 28125                                  ;----------------------------------------------------------------------------
 28126                                  ;
 28127                                  ; Procedure : BUFWRT
 28128                                  ;
 28129                                  ; Do a partial sector write via one of the system buffers
 28130                                  ; ES:BP Points to DPB
 28131                                  ; Carry set if error (currently user FAILed to I 24)
 28132                                  ;
 28133                                  ; DS - set to DOSDATA
 28134                                  ;
 28135                                  ;----------------------------------------------------------------------------
 28136                                  
 28137                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28138                                  	; 20/05/2019 - Retro DOS v4.0
 28139                                  BUFWRT:
 28140                                          ;MOV     AX,[SECPOS]
 28141                                          ; MSDOS 6.0
 28142                                  	;ADD	AX,1            	; Set for next sector
 28143                                          ;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 28144                                          ;ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 28145                                          ; 24/09/2023
 28146 00004C2D FF06[C405]              	inc	word [SECPOS]
 28147 00004C31 7504                    	jnz	short bufw_secpos
 28148 00004C33 FF06[C605]              	inc	word [SECPOS+2]
 28149                                  bufw_secpos:
 28150 00004C37 A1[C605]                	MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 28151 00004C3A 3B06[CA05]                      CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 28152 00004C3E B001                            MOV	AL,1			;F.C. >32mb	;AN000;
 28153 00004C40 770F                            JA	short NOREAD		;F.C. >32mb	;AN000;
 28154 00004C42 720B                            JB	short _doread		;F.C. >32mb	;AN000;
 28155 00004C44 A1[C405]                        MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 28156                                  
 28157                                  	; MSDOS 3.3
 28158                                  	;INC	AX
 28159                                  	;MOV	[SECPOS],AX ; 09/09/2018
 28160                                  
 28161                                  	; 20/05/2019
 28162                                  	; MSDOS 3.3 & MSDOS 6.0
 28163 00004C47 3B06[C805]                      CMP     AX,[VALSEC]		; Has sector been written before?
 28164 00004C4B B001                            MOV     AL,1
 28165 00004C4D 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 28166                                  _doread:
 28167 00004C4F 30C0                            XOR     AL,AL
 28168                                  NOREAD:
 28169 00004C51 06                              PUSH	ES
 28170 00004C52 E863FF                          CALL    BUFSEC
 28171 00004C55 72A5                    	JC	short BUF_IO_FAIL
 28172 00004C57 8E1E[2E03]                      MOV     DS,[DMAADD+2]
 28173 00004C5B D1E9                            SHR     CX,1
 28174                                  ;M039
 28175                                  	; MSDOS 3.3
 28176                                  	;JNC	short EVENWRT ; 09/09/2018
 28177                                  	;MOVSB
 28178                                  ;EVENWRT:
 28179                                  	;REP	MOVSW
 28180                                  
 28181                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 28182                                  ;       DS:SI-> Source within Transfer memory block.
 28183                                  ;       ES:DI-> Destination within Buffer.
 28184                                  
 28185                                  	; MSDOS 6.0
 28186 00004C5D F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 28187                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 28188                                  	;rep	movsb                   ;Copy last byte.
 28189                                  	; 16/12/2022
 28190 00004C5F 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 28191 00004C61 A4                      	movsb ; ****
 28192                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28193                                  	;adc	cx,0
 28194                                  	;rep	movsb
 28195                                  ;M039
 28196                                  EVENWRT: ; ****
 28197 00004C62 07                              POP	ES
 28198                                  
 28199                                  ;hkn; SS override
 28200 00004C63 36C51E[E205]                    LDS     BX,[SS:CURBUF]
 28201                                  
 28202                                  	; MSDOS 6.0
 28203 00004C68 F6470540                        TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28204                                  					;LB. if already dirty		  ;AN000;
 28205 00004C6C 7507                            JNZ	short yesdirty10	;LB.  don't increment dirty count ;AN000;
 28206 00004C6E E8110E                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 28207                                  	
 28208                                  	;or	byte [bx+5],40h
 28209 00004C71 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28210                                  yesdirty10:
 28211                                  	;;lea	si,[bx+16]
 28212                                  	;lea	si,[bx+20] ; MSDOS 6.0
 28213 00004C75 8D7714                          LEA     SI,[BX+BUFINSIZ]
 28214 00004C78 29F7                            SUB     DI,SI                   ; Position in buffer
 28215                                  ;M039
 28216                                  	; MSDOS 3.3
 28217                                  	;MOV	SI,DI
 28218                                  	;MOV	DI,BX
 28219                                  	;call	PLACEBUF
 28220                                  	;;cmp	si,[es:bp+2]
 28221                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28222                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 28223                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 28224                                                                          ;  even though it is MRU.
 28225                                  	; 10/02/2024
 28226 00004C7A 16                      	push	ss
 28227 00004C7B 1F                      	pop	ds
 28228                                  
 28229                                  	; MSDOS 6.0
 28230                                  	;cmp	di,[es:bp+2]
 28231 00004C7C 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28232 00004C80 7204                            JB	short WBUFPLACED	; No, leave buf where it is
 28233                                  
 28234                                  	; 10/02/2024
 28235                                          ;MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 28236                                  					; chucking even though it is MRU.
 28237 00004C82 891E[6D00]              	mov	[BufferQueue],bx
 28238                                  ;M039
 28239                                  
 28240                                  WBUFPLACED:
 28241 00004C86 F8                              CLC
 28242                                  	; 10/02/2024
 28243                                  	;push	ss
 28244                                  	;pop	ds
 28245 00004C87 C3                              retn
 28246                                  
 28247                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 28248                                  ;---------------------------------------------------------------------------
 28249                                  ;
 28250                                  ; Procedure Name : NEXTSEC
 28251                                  ;
 28252                                  ; Compute the next sector to read or write
 28253                                  ; ES:BP Points to DPB
 28254                                  ;
 28255                                  ;---------------------------------------------------------------------------
 28256                                  
 28257                                  NEXTSEC:
 28258 00004C88 F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 28259 00004C8D 7426                            JZ	short CLRET
 28260                                  
 28261 00004C8F A0[7305]                        MOV     AL,[SECCLUSPOS]
 28262 00004C92 FEC0                            INC     AL
 28263                                  	;cmp	al,[es:bp+4]
 28264 00004C94 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 28265 00004C98 7618                            JBE	short SAVPOS
 28266                                  
 28267 00004C9A 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 28268 00004C9E E8B607                          call	IsEOF
 28269 00004CA1 7314                            JAE	short NONEXT
 28270                                  
 28271 00004CA3 E8C807                          call	UNPACK
 28272 00004CA6 720F                            JC	short NONEXT
 28273                                  clusgot:
 28274 00004CA8 893E[BC05]                      MOV     [CLUSNUM],DI
 28275 00004CAC FF06[BA05]                      INC     word [LASTPOS]
 28276 00004CB0 B000                            MOV     AL,0
 28277                                  SAVPOS:
 28278 00004CB2 A2[7305]                        MOV     [SECCLUSPOS],AL
 28279                                  CLRET:
 28280 00004CB5 F8                              CLC
 28281 00004CB6 C3                              retn
 28282                                  NONEXT:
 28283 00004CB7 F9                              STC
 28284 00004CB8 C3                              retn
 28285                                  
 28286                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 28287                                  ;----------------------------------------------------------------------------
 28288                                  ;
 28289                                  ; Procedure Name : OPTIMIZE
 28290                                  ;
 28291                                  ; Inputs:
 28292                                  ;       BX = Physical cluster
 28293                                  ;       CX = No. of records
 28294                                  ;       DL = sector within cluster
 28295                                  ;       ES:BP = Base of drive parameters
 28296                                  ;       [NEXTADD] = transfer address
 28297                                  ; Outputs:
 28298                                  ;       AX = No. of records remaining
 28299                                  ;       BX = Transfer address
 28300                                  ;       CX = No. or records to be transferred
 28301                                  ;       DX = Physical sector address            (LOW)
 28302                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 28303                                  ;       DI = Next cluster
 28304                                  ;       [CLUSNUM] = Last cluster accessed
 28305                                  ;       [NEXTADD] updated
 28306                                  ;       Carry set if error (currently user FAILed to I 24)
 28307                                  ; ES:BP unchanged. Note that segment of transfer not set.
 28308                                  ;
 28309                                  ;---------------------------------------------------------------------------
 28310                                  
 28311                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28312                                  OPTIMIZE:
 28313 00004CB9 52                      	PUSH    DX
 28314 00004CBA 53                              PUSH    BX
 28315                                  	;mov	al,[es:bp+4]
 28316 00004CBB 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 28317 00004CBF FEC0                            INC     AL              ; Number of sectors per cluster
 28318 00004CC1 88C4                            MOV     AH,AL
 28319 00004CC3 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 28320 00004CC5 89CA                            MOV     DX,CX
 28321                                  	;MOV	CX,0
 28322                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28323                                  	; 16/12/2022
 28324 00004CC7 31C9                    	xor	cx,cx	; sub cx,cx
 28325                                  OPTCLUS:
 28326                                  ; AL has number of sectors available in current cluster
 28327                                  ; AH has number of sectors available in next cluster
 28328                                  ; BX has current physical cluster
 28329                                  ; CX has number of sequential sectors found so far
 28330                                  ; DX has number of sectors left to transfer
 28331                                  ; ES:BP Points to DPB
 28332                                  ; ES:SI has FAT pointer
 28333                                  
 28334                                  do_norm3:
 28335 00004CC9 E8A207                          call	UNPACK
 28336 00004CCC 7236                            JC	short OP_ERR
 28337                                  clusgot2:
 28338 00004CCE 00C1                    	ADD	CL,AL
 28339 00004CD0 80D500                          ADC     CH,0
 28340 00004CD3 39D1                            CMP     CX,DX
 28341 00004CD5 7332                            JAE	short BLKDON
 28342 00004CD7 88E0                            MOV     AL,AH
 28343 00004CD9 43                              INC     BX
 28344 00004CDA 39DF                            CMP     DI,BX
 28345 00004CDC 74EB                            JZ	short OPTCLUS
 28346 00004CDE 4B                              DEC     BX
 28347                                  FINCLUS:
 28348 00004CDF 891E[BC05]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 28349 00004CE3 29CA                            SUB     DX,CX           ; Number of sectors still needed
 28350 00004CE5 52                              PUSH    DX
 28351 00004CE6 89C8                            MOV     AX,CX
 28352                                  	;mul	word[ES:BP+2]
 28353 00004CE8 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 28354                                  				; Number of sectors times sector size
 28355 00004CEC 8B36[B805]                      MOV     SI,[NEXTADD]
 28356 00004CF0 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 28357 00004CF2 A3[B805]                        MOV     [NEXTADD],AX
 28358 00004CF5 58                              POP     AX              ; Number of sectors still needed
 28359 00004CF6 5A                              POP     DX              ; Starting cluster
 28360 00004CF7 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 28361 00004CF9 011E[BA05]                      ADD     [LASTPOS],BX
 28362 00004CFD 5B                              POP     BX              ; BL = sector position within cluster
 28363 00004CFE E81600                  	call	FIGREC
 28364 00004D01 89F3                            MOV     BX,SI
 28365                                  	; 24/09/2023
 28366                                  	; cf=0 (at the return of FIGREC)
 28367                                  	;CLC
 28368 00004D03 C3                              retn
 28369                                  OP_ERR:
 28370 00004D04 83C404                          ADD     SP,4
 28371 00004D07 F9                      	STC
 28372 00004D08 C3                              retn
 28373                                  BLKDON:
 28374 00004D09 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 28375 00004D0B 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 28376 00004D0D FECC                            DEC     AH              ; Adjust to mean position within cluster
 28377 00004D0F 8826[7305]                      MOV     [SECCLUSPOS],AH
 28378 00004D13 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 28379 00004D15 EBC8                            JMP     SHORT FINCLUS
 28380                                  
 28381                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 28382                                  ;---------------------------------------------------------------------------
 28383                                  ;
 28384                                  ; Procedure Name : FIGREC
 28385                                  ;
 28386                                  ; Inputs:
 28387                                  ;       DX = Physical cluster number
 28388                                  ;       BL = Sector position within cluster
 28389                                  ;       ES:BP = Base of drive parameters
 28390                                  ; Outputs:
 28391                                  ;       DX = physical sector number           (LOW)
 28392                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 28393                                  ; No other registers affected.
 28394                                  ;
 28395                                  ;---------------------------------------------------------------------------
 28396                                  
 28397                                  	; 10/06/2019
 28398                                  	; 20/05/2019 - Retro DOS v4.0
 28399                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 28400                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28401                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)	
 28402                                  FIGREC:
 28403 00004D17 51                              PUSH    CX
 28404                                  	;mov	cl,[es:bp+5]
 28405 00004D18 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 28406 00004D1C 4A                              DEC     DX
 28407 00004D1D 4A                              DEC     DX
 28408                                  
 28409                                  	; MSDOS 3.3
 28410                                  	;SHL	DX,CL
 28411                                  
 28412                                  ;hkn; SS override HIGH_SECTOR
 28413                                  	; MSDOS 6.0
 28414 00004D1E 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 28415                                  	; 24/09/2023
 28416 00004D25 30ED                    	xor	ch,ch				;F.C. >32mb
 28417 00004D27 08C9                    	OR	CL,CL				;F.C. >32mb
 28418 00004D29 740C                    	JZ	short noshift			;F.C. >32mb
 28419 00004D2B 30ED                    	XOR	CH,CH				;F.C. >32mb
 28420                                  rotleft:					;F.C. >32mb
 28421 00004D2D F8                      	CLC					;F.C. >32mb
 28422 00004D2E D1D2                    	RCL	DX,1				;F.C. >32mb
 28423                                  	; 10/06/2019
 28424 00004D30 36D116[0706]            	RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 28425 00004D35 E2F6                    	LOOP	rotleft				;F.C. >32mb
 28426                                  noshift:
 28427                                  	; MSDOS 3.3 & MSDOS 6.0
 28428 00004D37 08DA                            OR      DL,BL
 28429                                  	;add	dx,[es:bp+0Bh]
 28430 00004D39 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 28431                                  	; MSDOS 6.0
 28432                                  	; 10/06/2019
 28433                                  	;ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 28434                                  	; 24/09/2023
 28435                                  	; cx=0
 28436 00004D3D 36110E[0706]            	ADC	word [ss:HIGH_SECTOR],cx ; 0
 28437                                  
 28438                                  	; MSDOS 3.3 & MSDOS 6.0
 28439 00004D42 59                      	POP     CX
 28440                                  figrec_retn:
 28441 00004D43 C3                              retn
 28442                                  
 28443                                  ; 20/05/2019 - Retro DOS v4.0
 28444                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 28445                                  
 28446                                  ; 30/07/2018 - Retro DOS v3.0
 28447                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 28448                                  
 28449                                  ;Break   <ALLOCATE -- Assign disk space>
 28450                                  ;---------------------------------------------------------------------------
 28451                                  ;
 28452                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 28453                                  ;
 28454                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 28455                                  ;   FAT-chained onto the end of the existing file.
 28456                                  ;
 28457                                  ;   The DPB contains the cluster # of the last free cluster allocated
 28458                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 28459                                  ;   numbered clusters, looking for the necessary free blocks.
 28460                                  ;
 28461                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 28462                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 28463                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 28464                                  ;
 28465                                  ;       If we get to the end of the disk without satisfaction:
 28466                                  ;
 28467                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 28468                                  ;               return (insufficient_disk_space)
 28469                                  ;           ELSE
 28470                                  ;               dpb_next_free = 2; start scan over from the beginning.
 28471                                  ;
 28472                                  ;   Note that there is no multitasking interlock. There is no race when
 28473                                  ;   examining the entrys in an in-core FAT block since there will be no
 28474                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 28475                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 28476                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 28477                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 28478                                  ;   satisfied. We can't allow another activation to think this cluster is
 28479                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 28480                                  ;   allocated.
 28481                                  ;
 28482                                  ;   Note that when we run out of space this algorithem will scan from
 28483                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 28484                                  ;   redundantly scanning the later part of the disk. This only happens when
 28485                                  ;   we run out of space, so sue me.
 28486                                  ;
 28487                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28488                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28489                                  ;                                                                          ;
 28490                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 28491                                  ;   explanation:
 28492                                  ;
 28493                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 28494                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 28495                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 28496                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 28497                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 28498                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 28499                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 28500                                  ;   the
 28501                                  ;           LOOP   findfre         ; alloc more if needed
 28502                                  ;   instruction when the first cluster is allocated to the nul file. The
 28503                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 28504                                  ;
 28505                                  ;   This method is obviously useless (because it is non-reentrant) for
 28506                                  ;   multitasking, and will have to be changed. Storing the required value on
 28507                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 28508                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 28509                                  ;   problems with INT 24 well.
 28510                                  ;
 28511                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28512                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28513                                  ;                                                                          ;
 28514                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 28515                                  ;               CX = No. of clusters to allocate
 28516                                  ;               ES:BP = Base of drive parameters
 28517                                  ;               [THISSFT] = Points to SFT
 28518                                  ;
 28519                                  ;       EXIT    'C' set if insufficient space
 28520                                  ;                 [FAILERR] can be tested to see the reason for failure
 28521                                  ;                 CX = max. no. of clusters that could be added to file
 28522                                  ;               'C' clear if space allocated
 28523                                  ;                 BX = First cluster allocated
 28524                                  ;                 FAT is fully updated
 28525                                  ;                 sf_FIRCLUS field of SFT set if file was null
 28526                                  ;
 28527                                  ;       USES    ALL but SI, BP
 28528                                  
 28529                                  ;callmagic  proc near
 28530                                  ;       push    ds                             ;push segment of routine 
 28531                                  ;       push    Offset MagicPatch              ;push offset for routine
 28532                                  ;       retf                                   ;simulate jmp far
 28533                                  ;                                              ;far return address is on
 28534                                  ;                                              ;stack, so far return from
 28535                                  ;                                              ;call will return this routine
 28536                                  ;callmagic  endp
 28537                                  
 28538                                  ALLOCATE:
 28539                                  	; 10/09/2018
 28540                                  ;BEGIN MAGICDRV MODIFICATIONS
 28541                                  ;
 28542                                  ;7/5/92 scottq
 28543                                  ;
 28544                                  ;This is the disk compression patch location which allows
 28545                                  ;the disk compression software to fail allocations if the
 28546                                  ;FAT would allows allocation, but the free space for compressed
 28547                                  ;data would not.
 28548                                  ;        
 28549                                  ;;;	call    far ptr MAGICPATCH
 28550                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 28551                                  ;;; but we do know the segment and offset of the routine
 28552                                  ;;; so simulate a far call to dosdata:magicpatch
 28553                                  ;;; note dosassume above, so DS -> dosdata
 28554                                  
 28555                                  	; MSDOS 6.0
 28556                                          ;clc				;clear carry so we fall through
 28557                                  	;				;if no patch is present
 28558                                  	;push	cs			;push segment for far return
 28559                                          ;call	callmagic		;this is a near call
 28560                                          ;jnc	short Regular_Allocate_Path
 28561                                  	;jmp	Disk_Full_Return
 28562                                  
 28563                                  ;Regular_Allocate_Path:
 28564                                  	; 20/05/2019 - Retro DOS v4.0
 28565                                  ;END MAGICDRV MODIFICATIONS
 28566                                  
 28567                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28568                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 28569                                  
 28570 00004D44 53                              PUSH    BX                      ; save (bx)
 28571 00004D45 31DB                            XOR     BX,BX
 28572 00004D47 E82407                  	call	UNPACK
 28573 00004D4A 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 28574 00004D4E 5B                              POP     BX
 28575 00004D4F 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 28576                                  
 28577 00004D51 51                              PUSH    CX
 28578 00004D52 53                              PUSH    BX
 28579                                  
 28580 00004D53 89DA                            MOV     DX,BX
 28581                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 28582                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 28583 00004D55 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 28584 00004D59 83FB02                          cmp     bx,2
 28585 00004D5C 7709                            ja	short FINDFRE
 28586                                  
 28587                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 28588                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 28589                                  
 28590                                  ads1:
 28591                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 28592                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 28593 00004D5E 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 28594 00004D64 BB0100                          mov     bx,1                    ; Counter next instruction so first
 28595                                                                          ;       cluster examined is 2
 28596                                  
 28597                                  ;   Scanning both forwards and backwards for a free cluster
 28598                                  ;
 28599                                  ;       (BX) = forwards scan pointer
 28600                                  ;       (CX) = clusters remaining to be allocated
 28601                                  ;       (DX) = current last cluster in file
 28602                                  ;       (TOS) = last cluster of file
 28603                                  
 28604                                  FINDFRE:
 28605 00004D67 43                              INC     BX
 28606                                  	;cmp	bx,[es:bp+0Dh]
 28607 00004D68 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 28608 00004D6C 7757                    	ja	short ads7	; at end of disk
 28609 00004D6E E8FD06                          call	UNPACK          ; check out this cluster
 28610 00004D71 722F                            jc	short ads4	; FAT error             [INTERR?]
 28611 00004D73 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 28612                                  
 28613                                  ;   Have found a free cluster. Chain it to the file
 28614                                  ;
 28615                                  ;       (BX) = found free cluster #
 28616                                  ;       (DX) = current last cluster in file
 28617                                  
 28618                                  	;;mov	[es:bp+1Ch],bx
 28619                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 28620 00004D75 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 28621 00004D79 92                              xchg    ax,dx           ; save (dx) in ax
 28622 00004D7A BA0100                          mov     dx,1            ; mark this free guy as "1"
 28623 00004D7D E84207                  	call	PACK            ; set special "temporary" mark
 28624 00004D80 7220                            jc	short ads4	; FAT error             [INTERR?]
 28625                                  	;;cmp	word [es:bp+1Eh],-1
 28626                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28627 00004D82 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28628 00004D87 7404                            JZ	short NO_ALLOC	; No
 28629                                  	;;dec	word [es:bp+1Eh]
 28630                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 28631 00004D89 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 28632                                  NO_ALLOC:
 28633 00004D8D 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 28634 00004D8E 87DA                            XCHG    BX,DX
 28635 00004D90 89D0                            MOV     AX,DX
 28636 00004D92 E82D07                  	call	PACK            ; link free cluster onto file
 28637                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 28638                                                                  ;    cluster 0 with FIRCLUS value.
 28639 00004D95 720B                            jc	short ads4	; FAT error [INTERR?]
 28640 00004D97 93                              xchg    BX,AX           ; (BX) = last one we looked at
 28641 00004D98 89DA                            mov     dx,bx           ; (dx) = current end of file
 28642 00004D9A E2CB                            LOOP    FINDFRE         ; alloc more if needed
 28643                                  
 28644                                  ;   We've successfully extended the file. Clean up and exit
 28645                                  ;
 28646                                  ;       (BX) = last cluster in file
 28647                                  
 28648 00004D9C BAFFFF                          MOV     DX,0FFFFH
 28649 00004D9F E82007                  	call	PACK            ; mark last cluster EOF
 28650                                  
 28651                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 28652                                  ;   2 whole bytes. Hope its worth it...
 28653                                  ;
 28654                                  ;       'C' set if error
 28655                                  ;       calling (BX) and (CX) pushed on stack
 28656                                  
 28657                                  ads4:   
 28658 00004DA2 5B                      	POP     BX
 28659 00004DA3 59                              POP     CX              ; Don't need this stuff since we're successful
 28660 00004DA4 729D                            jc	short figrec_retn
 28661 00004DA6 E8C506                          call	UNPACK          ; Get first cluster allocated for return
 28662                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 28663 00004DA9 7298                            jc	short figrec_retn
 28664 00004DAB E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 28665 00004DAE 7293                            jc	short figrec_retn
 28666 00004DB0 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 28667 00004DB2 09FF                            OR      DI,DI           ; clear 'C'
 28668 00004DB4 758D                    	jnz	short figrec_retn ; we were extending an existing file
 28669                                  
 28670                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 28671                                  ;   info
 28672                                  dofastk:
 28673                                  	; 20/05/2019
 28674                                  	; MSDOS 6.0
 28675                                  	;push	dx ; * MSDOS 6.0
 28676                                  	;;mov	dl,[es:bp+0]
 28677                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 28678                                  	;mov	dl,[es:bp]
 28679                                  
 28680                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28681                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 28682                                  	
 28683                                  	; 16/12/2022
 28684                                  	;push	dx ; *
 28685                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 28686                                  	; 15/12/2022
 28687                                  	;mov	dl,[es:bp]
 28688                                  	
 28689                                  	; MSDOS 3.3 & MSDOS 6.0
 28690 00004DB6 06                      	PUSH	ES
 28691 00004DB7 C43E[9E05]              	LES     DI,[THISSFT]
 28692                                  	;mov	[es:di+0Bh],bx
 28693 00004DBB 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 28694                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 28695                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 28696 00004DBF 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 28697 00004DC3 07                      	POP	ES
 28698                                  	;retn
 28699                                  
 28700                                  	;pop	dx ; * MSDOS 6.0
 28701                                  
 28702                                  	; 16/12/2022
 28703                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28704                                  	;pop	dx ; *
 28705                                  
 28706 00004DC4 C3                      	retn	
 28707                                  
 28708                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 28709                                  ;   of the disk...
 28710                                  
 28711                                  ads7:   
 28712 00004DC5 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 28713 00004DCA 7592                    	jnz	short ads1	; start scan from front of disk
 28714                                  
 28715                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 28716                                  ;   the space back to the free list and tell the caller how much he could have
 28717                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 28718                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 28719                                  ;
 28720                                  ;       (CX) = clusters remaining to be allocated
 28721                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 28722                                  ;       (TOS+1) = # of clusters wanted to allocate
 28723                                  
 28724 00004DCC 5B                              POP     BX              ; (BX) = last cluster of file
 28725 00004DCD BAFFFF                          MOV     DX,0FFFFH
 28726 00004DD0 E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 28727 00004DD3 58                              POP     AX              ; No. of clusters requested
 28728                                                                  ; Don't "retc". We are setting Carry anyway,
 28729                                                                  ;   Alloc failed, so proceed with return CX
 28730                                                                  ;   setup.
 28731 00004DD4 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 28732 00004DD6 E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 28733                                                                  ;   Alloc failed.
 28734                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 28735                                          ; MSDOS 6.0
 28736 00004DD9 C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 28737 00004DDE F9                              STC
 28738 00004DDF C3                              retn
 28739                                  
 28740                                  ;-----------------------------------------------------------------------
 28741                                  ;
 28742                                  ; Procedure Name : RESTFATBYT
 28743                                  ;
 28744                                  ; SEE ALLOCATE CAVEAT
 28745                                  ;       Carry set if error (currently user FAILed to I 24)
 28746                                  ;-----------------------------------------------------------------------
 28747                                  
 28748                                  RESTFATBYT:
 28749 00004DE0 53                              PUSH    BX
 28750 00004DE1 52                              PUSH    DX
 28751 00004DE2 57                              PUSH    DI
 28752 00004DE3 31DB                            XOR     BX,BX
 28753 00004DE5 8B16[9605]                      MOV     DX,[FATBYT]
 28754 00004DE9 E8D606                  	call	PACK
 28755 00004DEC 5F                              POP     DI
 28756 00004DED 5A                              POP     DX
 28757 00004DEE 5B                              POP     BX
 28758                                  ; 16/12/2022
 28759                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28760                                  ;RELEASE_flush:
 28761 00004DEF C3                      	retn
 28762                                  
 28763                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 28764                                  ;---------------------------------------------------------------------------
 28765                                  ;
 28766                                  ; Procedure Name : RELEASE
 28767                                  ;
 28768                                  ; Inputs:
 28769                                  ;       BX = Cluster in file
 28770                                  ;       ES:BP = Base of drive parameters
 28771                                  ; Function:
 28772                                  ;       Frees cluster chain starting with [BX]
 28773                                  ;       Carry set if error (currently user FAILed to I 24)
 28774                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 28775                                  ;
 28776                                  ;-----------------------------------------------------------------------------
 28777                                  
 28778                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28779                                  	; 20/05/2019 - Retro DOS v4.0
 28780                                  RELEASE:
 28781 00004DF0 31D2                            XOR     DX,DX
 28782                                  
 28783                                  	;entry	RELBLKS
 28784                                  RELBLKS:
 28785                                  
 28786                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 28787                                  ;   and free the rest in the chain.
 28788                                  
 28789 00004DF2 E87906                  	call	UNPACK
 28790 00004DF5 7224                    	jc	short RELEASE_flush
 28791 00004DF7 7422                    	jz	short RELEASE_flush
 28792 00004DF9 89F8                            MOV     AX,DI
 28793 00004DFB 52                              PUSH    DX
 28794 00004DFC E8C306                  	call	PACK
 28795 00004DFF 5A                              POP     DX
 28796 00004E00 7219                    	jc	short RELEASE_flush
 28797 00004E02 09D2                            OR      DX,DX
 28798 00004E04 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 28799                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 28800                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28801 00004E06 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28802 00004E0B 7404                            JZ	short NO_DEALLOC	; No
 28803 00004E0D 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 28804                                  NO_DEALLOC:
 28805 00004E11 89C3                            MOV     BX,AX
 28806 00004E13 48                              dec     ax              ; check for "1"
 28807 00004E14 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 28808 00004E16 E83E06                  	call	IsEOF
 28809 00004E19 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 28810                                  
 28811                                  	; 16/12/2022
 28812                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28813                                  ;%if 0
 28814                                  RELEASE_flush:
 28815                                  	; MSDOS 6.0
 28816 00004E1B 268A4600                	mov	al,[es:bp]
 28817                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 28818 00004E1F 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 28819 00004E20 51                      	push	cx		;  them to be preserved.
 28820 00004E21 06                      	push	es
 28821 00004E22 55                      	push	bp
 28822 00004E23 E8570B                  	call	FLUSHBUF	; commit buffers for this drive
 28823 00004E26 5D                      	pop	bp
 28824 00004E27 07                      	pop	es
 28825 00004E28 59                      	pop	cx
 28826 00004E29 5E                      	pop	si
 28827                                  ;%endif
 28828                                  RET12:
 28829 00004E2A C3                      	retn
 28830                                  
 28831                                  ;Break	<GETEOF -- Find the end of a file>
 28832                                  ;------------------------------------------------------------------------
 28833                                  ;
 28834                                  ; Procedure Name : GETEOF
 28835                                  ;
 28836                                  ; Inputs:
 28837                                  ;       ES:BP Points to DPB
 28838                                  ;       BX = Cluster in a file
 28839                                  ;       DS = CS
 28840                                  ; Outputs:
 28841                                  ;       BX = Last cluster in the file
 28842                                  ;       Carry set if error (currently user FAILed to I 24)
 28843                                  ; DI destroyed. No other registers affected.
 28844                                  ;
 28845                                  ;--------------------------------------------------------------------------
 28846                                  
 28847                                  GETEOF:
 28848 00004E2B E84006                  	call	UNPACK
 28849 00004E2E 72FA                            jc	short RET12
 28850 00004E30 53                              PUSH    BX
 28851 00004E31 89FB                            MOV     BX,DI
 28852 00004E33 E82106                  	call	IsEOF
 28853 00004E36 5B                              POP     BX
 28854 00004E37 73F1                            JAE     short RET12
 28855 00004E39 89FB                            MOV     BX,DI
 28856 00004E3B EBEE                            JMP     short GETEOF
 28857                                  
 28858                                  ;============================================================================
 28859                                  ; FCB.ASM, MSDOS 6.0, 1991
 28860                                  ;============================================================================
 28861                                  ; 30/07/2018 - Retro DOS v3.0
 28862                                  ; 20/05/2019 - Retro DOS v4.0
 28863                                  
 28864                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 28865                                  ;	NAME	FCB
 28866                                  
 28867                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 28868                                  ;		  filename characters
 28869                                  ;
 28870                                  ;	MakeFcb
 28871                                  ;	NameTrans
 28872                                  ;	PATHCHRCMP
 28873                                  ;	GetLet
 28874                                  ;	UCase
 28875                                  ;	GetLet3
 28876                                  ;	GetCharType
 28877                                  ;	TESTKANJ
 28878                                  ;	NORMSCAN
 28879                                  ;	DELIM
 28880                                  ;
 28881                                  ;	Revision history:
 28882                                  ;
 28883                                  ;		A000  version 4.00  Jan. 1988
 28884                                  ;	
 28885                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 28886                                  
 28887                                  TableLook	EQU	-1
 28888                                  
 28889                                  SCANSEPARATOR	EQU	1
 28890                                  DRVBIT		EQU	2
 28891                                  NAMBIT		EQU	4
 28892                                  EXTBIT		EQU	8
 28893                                  
 28894                                  ;----------------------------------------------------------------------------
 28895                                  ;
 28896                                  ; Procedure : MakeFcb
 28897                                  ;
 28898                                  ;----------------------------------------------------------------------------
 28899                                  
 28900                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28901                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 28902                                  MAKEFCB:
 28903                                  ;hkn; SS override
 28904 00004E3D 36C606[4E03]00          	MOV	BYTE [SS:SpaceFlag],0
 28905 00004E43 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 28906                                  	;test	al,2
 28907 00004E45 A802                    	test	AL,DRVBIT	; Use current drive field if default?
 28908 00004E47 7504                    	JNZ	short DEFDRV
 28909 00004E49 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 28910                                  DEFDRV:
 28911 00004E4D 47                      	INC	DI
 28912 00004E4E B90800                  	MOV	CX,8
 28913                                  	;test	al,4
 28914 00004E51 A804                    	test	AL,NAMBIT	; Use current name fields as default?
 28915 00004E53 93                      	XCHG	AX,BX		; Save bits in BX
 28916 00004E54 B020                    	MOV	AL," "
 28917 00004E56 7404                    	JZ	short FILLB	; If not, go fill with blanks
 28918 00004E58 01CF                    	ADD	DI,CX
 28919 00004E5A 31C9                    	XOR	CX,CX		; Don't fill any
 28920                                  FILLB:
 28921 00004E5C F3AA                    	REP	STOSB
 28922 00004E5E B103                    	MOV	CL,3
 28923 00004E60 F6C308                  	test	BL,EXTBIT	; Use current extension as default
 28924 00004E63 7404                    	JZ	short FILLB2
 28925 00004E65 01CF                    	ADD	DI,CX
 28926 00004E67 31C9                    	XOR	CX,CX
 28927                                  FILLB2:
 28928 00004E69 F3AA                    	REP	STOSB
 28929 00004E6B 91                      	XCHG	AX,CX		; Put zero in AX
 28930 00004E6C AB                      	STOSW
 28931 00004E6D AB                      	STOSW			; Initialize two words after to zero
 28932 00004E6E 83EF10                  	SUB	DI,16		; Point back at start
 28933                                  	;test	bl,1
 28934 00004E71 F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 28935 00004E74 7409                    	JZ	short SKPSPC
 28936 00004E76 E88800                  	CALL	SCANB		; Peel off blanks and tabs
 28937 00004E79 E82201                  	CALL	DELIM		; Is it a one-time-only delimiter?
 28938 00004E7C 7504                    	JNZ	short NOSCAN
 28939 00004E7E 46                      	INC	SI		; Skip over the delimiter
 28940                                  SKPSPC:
 28941 00004E7F E87F00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 28942                                  NOSCAN:
 28943 00004E82 E8F000                  	CALL	GETLET
 28944 00004E85 761E                    	JBE	short NODRV	; Quit if termination character
 28945 00004E87 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 28946 00004E8A 7519                    	JNZ	short NODRV
 28947 00004E8C 46                      	INC	SI		; Skip over colon
 28948 00004E8D 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 28949 00004E8F 760F                    	JBE	short BADDRV	; Drive letter out of range
 28950                                  
 28951 00004E91 50                      	PUSH	AX
 28952 00004E92 E8161B                  	call	GetVisDrv
 28953 00004E95 58                      	POP	AX
 28954 00004E96 730A                    	JNC	short HAVDRV
 28955                                  
 28956                                  	; 20/05/2019 - Retro DOS v4.0
 28957                                  	; MSDOS 6.0
 28958                                  ;hkn; SS override
 28959 00004E98 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 28960                                  					; if not FAT drive ;AN000;
 28961 00004E9E 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 28962                                  BADDRV:
 28963 00004EA0 B2FF                    	MOV	DL,-1
 28964                                  HAVDRV:
 28965 00004EA2 AA                      	STOSB			; Put drive specifier in first byte
 28966 00004EA3 46                      	INC	SI
 28967 00004EA4 4F                      	DEC	DI		; Counteract next two instructions
 28968                                  NODRV:
 28969 00004EA5 4E                      	DEC	SI		; Back up
 28970 00004EA6 47                      	INC	DI		; Skip drive byte
 28971                                  
 28972                                  	;entry	NORMSCAN
 28973                                  NORMSCAN:
 28974 00004EA7 B90800                  	MOV	CX,8
 28975 00004EAA E82200                  	CALL	GETWORD 	; Get 8-letter file name
 28976 00004EAD 803C2E                  	CMP	BYTE [SI],"."
 28977 00004EB0 7510                    	JNZ	short NODOT
 28978 00004EB2 46                      	INC	SI		; Skip over dot if present
 28979                                  
 28980                                  	; 24/09/2023
 28981                                  	;mov	cx,3
 28982 00004EB3 B103                    	mov	cl,3	; ch=0
 28983                                  
 28984                                  	; MSDOS 6.0
 28985                                  ;hkn; SS override
 28986                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 28987                                  	; 10/06/2019
 28988 00004EB5 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 28989 00004EBB 7402                    	JZ	short VOLOK				;AN000;
 28990 00004EBD A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 28991                                  	; 24/09/2023
 28992                                  	;MOV	CX,2					;AN000;
 28993 00004EBE 49                      	dec	cx  ; cx=2
 28994                                  	;JMP	SHORT contvol				;AN000;
 28995                                  VOLOK:
 28996                                  	;MOV	CX,3		; Get 3-letter extension
 28997                                  contvol:
 28998 00004EBF E81300                  	CALL	MUSTGETWORD
 28999                                  NODOT:
 29000 00004EC2 88D0                    	MOV	AL,DL
 29001                                  
 29002                                  	; MSDOS 6.0
 29003                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 29004                                  	; 18/12/2022
 29005 00004EC4 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 29006                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 29007                                  
 29008 00004ECA C3                      	retn
 29009                                  
 29010                                  NONAM:
 29011 00004ECB 01CF                    	ADD	DI,CX
 29012 00004ECD 4E                      	DEC	SI
 29013 00004ECE C3                      	retn
 29014                                  
 29015                                  GETWORD:
 29016 00004ECF E8A300                  	CALL	GETLET		
 29017 00004ED2 76F7                    	JBE	short NONAM	; Exit if invalid character
 29018 00004ED4 4E                      	DEC	SI
 29019                                  
 29020                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 29021                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 29022                                  
 29023                                  MUSTGETWORD:
 29024 00004ED5 E89D00                  	CALL	GETLET
 29025                                  
 29026                                  ;	If spaceFlag is set then we allow spaces in a pathname
 29027                                  
 29028                                  ;IF NOT TABLELOOK
 29029                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 29030                                  ;ENDIF
 29031 00004ED8 750C                    	JNZ	short MustCheckCX
 29032                                  
 29033                                  ;hkn; SS override
 29034 00004EDA 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 29035 00004EE0 7419                    	JZ	short FILLNAM
 29036 00004EE2 3C20                    	CMP	AL," "
 29037 00004EE4 7515                    	JNZ	short FILLNAM
 29038                                  
 29039                                  MustCheckCX:
 29040 00004EE6 E3ED                    	JCXZ	MUSTGETWORD
 29041 00004EE8 49                      	DEC	CX
 29042 00004EE9 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 29043 00004EEB 7504                    	JNZ	short NOSTAR
 29044 00004EED B03F                    	MOV	AL,"?"
 29045 00004EEF F3AA                    	REP	STOSB
 29046                                  NOSTAR:
 29047 00004EF1 AA                      	STOSB
 29048 00004EF2 3C3F                    	CMP	AL,"?"
 29049 00004EF4 75DF                    	JNZ	short MUSTGETWORD
 29050 00004EF6 80CA01                  	OR	DL,1		; Flag ambiguous file name
 29051 00004EF9 EBDA                    	JMP	short MUSTGETWORD
 29052                                  FILLNAM:
 29053 00004EFB B020                    	MOV	AL," "
 29054 00004EFD F3AA                    	REP	STOSB
 29055 00004EFF 4E                      	DEC	SI
 29056 00004F00 C3                      	retn
 29057                                  
 29058                                  SCANB:
 29059 00004F01 AC                      	LODSB
 29060 00004F02 E8A100                  	CALL	SPCHK
 29061 00004F05 74FA                    	JZ	short SCANB
 29062 00004F07 4E                      	DEC	SI
 29063                                  scanb_retn:
 29064 00004F08 C3                      	retn
 29065                                  
 29066                                  ;----------------------------------------------------------------------------
 29067                                  ;
 29068                                  ; Procedure Name : NameTrans
 29069                                  ;
 29070                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 29071                                  ; allow spaces in pathnames
 29072                                  ;
 29073                                  ;   Inputs:	DS:SI points to start of path element
 29074                                  ;   Outputs:	Name1 has unpacked name, uppercased
 29075                                  ;		ES = DOSGroup
 29076                                  ;		DS:SI advanced after name
 29077                                  ;   Registers modified: DI,AX,DX,CX
 29078                                  ;
 29079                                  ;----------------------------------------------------------------------------
 29080                                  
 29081                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29082                                  	; 20/05/2019 - Retro DOS v4.0
 29083                                  NameTrans:
 29084                                  ;hkn; SS override
 29085 00004F09 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 29086 00004F0F 16                      	push	ss
 29087 00004F10 07                      	pop	es
 29088                                  
 29089                                  ;hkn; NAME1 is in DOSDATA
 29090 00004F11 BF[4B05]                	MOV	DI,NAME1
 29091 00004F14 57                      	PUSH	DI
 29092 00004F15 B82020                  	MOV	AX,'  '
 29093 00004F18 B90500                  	MOV	CX,5
 29094 00004F1B AA                      	STOSB
 29095 00004F1C F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 29096 00004F1E 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 29097 00004F20 88C2                    	MOV	DL,AL
 29098 00004F22 AA                      	STOSB
 29099 00004F23 5F                      	POP	DI
 29100                                  
 29101 00004F24 E880FF                  	CALL	NORMSCAN
 29102                                  
 29103                                  ;hkn; SS override for NAME1
 29104 00004F27 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 29105 00004F2D 75D9                    	jnz	short scanb_retn
 29106 00004F2F 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 29107 00004F35 C3                      	retn
 29108                                  
 29109                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 29110                                  ;============================================================================
 29111                                  
 29112                                  ; 20/05/2019 - Retro DOS v4.0
 29113                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29114                                  
 29115                                  ;If TableLook
 29116                                  
 29117                                  ;hkn; Table	SEGMENT
 29118                                  ;	PUBLIC	CharType
 29119                                  ;----------------------------------------------------------------------------
 29120                                  
 29121                                  ; Character type table for file name scanning
 29122                                  ; Table provides a mapping of characters to validity bits.
 29123                                  ; Four bits are provided for each character. Values 7Dh and above
 29124                                  ; have all bits set, so that part of the table is chopped off, and
 29125                                  ; the translation routine is responsible for screening these values.
 29126                                  ; The bit values are defined in DOSSYM.INC
 29127                                  
 29128                                  ;	      ; ^A and NUL
 29129                                  ;CharType:
 29130                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29131                                  ;	      ; ^C and ^B
 29132                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29133                                  ;	      ; ^E and ^D
 29134                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29135                                  ;	      ; ^G and ^F
 29136                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29137                                  ;	      ; TAB and BS
 29138                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29139                                  ;	      ; ^K and ^J
 29140                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29141                                  ;	      ; ^M and ^L
 29142                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29143                                  ;	      ; ^O and ^N
 29144                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29145                                  ;	      ; ^Q and ^P
 29146                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29147                                  ;	      ; ^S and ^R
 29148                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29149                                  ;	      ; ^U and ^T
 29150                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29151                                  ;	      ; ^W and ^V
 29152                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29153                                  ;	      ; ^Y and ^X
 29154                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29155                                  ;	      ; ESC and ^Z
 29156                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29157                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29159                                  ;	      ; ^_ and ^^
 29160                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29161                                  ;	      ; ! and SPACE
 29162                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 29163                                  ;	      ; # and "
 29164                                  ;	 db   LOW (NOT FFCB+FCHK)
 29165                                  ;	      ; $ - )
 29166                                  ;	 db   3 dup (0FFh)
 29167                                  ;	      ; + and *
 29168                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 29169                                  ;	      ; - and '
 29170                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 29171                                  ;	      ; / and .
 29172                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 29173                                  ;	      ; 0 - 9
 29174                                  ;	 db   5 dup (0FFh)
 29175                                  ;	      ; ; and :
 29176                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29177                                  ;	      ; = and <
 29178                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29179                                  ;	      ; ? and >
 29180                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29181                                  ;	      ; A - Z
 29182                                  ;	 db   13 dup (0FFh)
 29183                                  ;	      ; \ and [
 29184                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 29185                                  ;	      ; ^ and ]
 29186                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29187                                  ;	      ; _ - {
 29188                                  ;	 db   15 dup (0FFh)
 29189                                  ;	      ; } and |
 29190                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29191                                  
 29192                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 29193                                  ;					; character in the table
 29194                                  
 29195                                  ;FCHK	equ 1		; normal name char, no chks needed
 29196                                  ;FDELIM	equ 2		; is a delimiter
 29197                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 29198                                  ;FFCB	equ 8		; is valid in an FCB
 29199                                  
 29200                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29201                                  ;----------------------------------------------------------------------------
 29202                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 29203                                  
 29204                                  CharType: ; 63 bytes
 29205 00004F36 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 29206 00004F3E 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 29207 00004F46 F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 29208 00004F4E FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 29209 00004F56 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 29210 00004F5E FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 29211 00004F66 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 29212 00004F6E FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 29213                                  
 29214                                  CharType_last equ ($ - CharType) * 2
 29215                                  
 29216                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 29217                                  ;----------------------------------------------------------------------------
 29218                                  ;CharType:
 29219                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29220                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29221                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29222                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29223                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 29224                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 29225                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29226                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 29227                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29228                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29229                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29230                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 29231                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29232                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29233                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29234                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 29235                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29236                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29237                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29238                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29239                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29240                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29241                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29242                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29243                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29244                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29245                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29246                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29247                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29248                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29249                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29250                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29251                                  
 29252                                  ;hkn; Table	ENDS
 29253                                  
 29254                                  ;ENDIF
 29255                                  
 29256                                  ; 20/05/2019 - Retro DOS v4.0
 29257                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 29258                                  
 29259                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29260                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 29261                                  
 29262                                  ;----------------------------------------------------------------------------
 29263                                  ;
 29264                                  ; Procedure Names : GetLet, UCase, GetLet3
 29265                                  ;
 29266                                  ; These routines take a character, convert it to upper case, and check
 29267                                  ; for delimiters.  Three different entry points:
 29268                                  ;	GetLet -  DS:[SI] = character to convert
 29269                                  ;	UCase  -  AL = character to convert
 29270                                  ;	GetLet3 - AL = character
 29271                                  ;		  [BX] = translation table to use
 29272                                  ;
 29273                                  ;	Exit (in all cases) : AL = upper case character
 29274                                  ;			      CY set if char is control char other than TAB
 29275                                  ;			      ZF set if char is a delimiter
 29276                                  ;	Uses : AX, flags
 29277                                  ;
 29278                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 29279                                  ; inline version.  Return with carry set is only possible in the inline
 29280                                  ; version. The table lookup version is the one in use.
 29281                                  ;
 29282                                  ;----------------------------------------------------------------------------
 29283                                  
 29284                                  ; This entry point has character at [SI]
 29285                                  
 29286                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 29287                                  GETLET:	
 29288 00004F75 AC                      	LODSB
 29289                                  
 29290                                  ; This entry point has character in AL
 29291                                  
 29292                                  	;entry	UCase
 29293                                  UCase:	
 29294                                  	; 09/08/2018
 29295                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 29296                                  _UCase:
 29297 00004F76 53                      	PUSH	BX
 29298 00004F77 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 29299                                  
 29300                                  ; Convert the character in AL to upper case
 29301                                  
 29302                                  gl_0:
 29303 00004F7A 3C61                    	CMP	AL,"a"
 29304 00004F7C 7214                    	JB	short gl_2	; Already upper case, go check type
 29305 00004F7E 3C7A                    	CMP	AL,"z"
 29306 00004F80 7702                    	JA	short gl_1
 29307 00004F82 2C20                    	SUB	AL,20H		; Convert to upper case
 29308                                  
 29309                                  ; Map European character to upper case
 29310                                  
 29311                                  gl_1:
 29312 00004F84 3C80                    	CMP	AL,80H
 29313 00004F86 720A                    	JB	short gl_2	; Not EuroChar, go check type
 29314 00004F88 2C80                    	SUB	AL,80H		; translate to upper case with this index
 29315                                  
 29316                                  	; M048 - Start 
 29317                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 29318                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 29319                                  	; preserve it.
 29320                                  
 29321                                  	; 09/08/2018 - Retro DOS v3.0
 29322                                  	; MSDOS 3.3
 29323                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 29324                                  	;CS	XLAT
 29325                                  
 29326                                  	; 20/05/2019 - Retro DOS v4.0
 29327                                  
 29328                                  	; MSDOS 6.0
 29329 00004F8A 1E                      	push	ds
 29330                                  	;getdseg <ds>
 29331 00004F8B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29332 00004F90 D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 29333 00004F91 1F                      	pop	ds
 29334                                  
 29335                                  	; M048 - End
 29336                                  
 29337                                  ; Now check the type
 29338                                  
 29339                                  ;If TableLook
 29340                                  gl_2:
 29341                                  	; 20/05/2019 - Retro DOS v4.0
 29342 00004F92 50                      	PUSH	AX
 29343                                  
 29344                                  	; MSDOS 3.3
 29345                                  	;mov	bx,CharType
 29346                                  	;; 09/08/2018
 29347                                  	;;xlat	byte [cs:bx]
 29348                                  	;cs	xlat	
 29349                                  	
 29350                                  	; MSDOS 6.0
 29351 00004F93 E81800                  	CALL	GetCharType	; returns type flags in AL
 29352                                  	
 29353                                  	;test	al,1	
 29354 00004F96 A801                    	TEST	AL,FCHK 	; test for normal character
 29355 00004F98 58                      	POP	AX
 29356 00004F99 5B                      	POP	BX
 29357 00004F9A C3                      	RETN
 29358                                  
 29359                                  ; This entry has character in AL and lookup table in BX
 29360                                  
 29361                                  	; MSDOS 6.0
 29362                                  ;	;entry GetLet3
 29363                                  GETLET3: ; 10/08/2018
 29364 00004F9B 53                      	PUSH	BX
 29365 00004F9C EBDC                    	JMP	short gl_0
 29366                                  ;ELSE
 29367                                  ;
 29368                                  ;gl_2:
 29369                                  ;	POP	BX
 29370                                  ;	CMP	AL,"."
 29371                                  ;	retz
 29372                                  ;	CMP	AL,'"'
 29373                                  ;	retz
 29374                                  ;	CALL	PATHCHRCMP
 29375                                  ;	retz
 29376                                  ;	CMP	AL,"["
 29377                                  ;	retz
 29378                                  ;	CMP	AL,"]"
 29379                                  ;	retz
 29380                                  ;ENDIF
 29381                                  
 29382                                  ;---------------------------------------------------------------------
 29383                                  ;
 29384                                  ; DELIM - check if character is a delimiter
 29385                                  ;	Entry : AX = character to check
 29386                                  ;	Exit  : ZF set if character is not a delimiter
 29387                                  ;	Uses  : Flags
 29388                                  ;
 29389                                  ;--------------------------------------------------------------------
 29390                                  
 29391                                  	;entry	DELIM
 29392                                  DELIM:
 29393                                  ;IF TableLook
 29394                                  	; 20/05/2019 - Retro DOS v4.0
 29395 00004F9E 50                      	PUSH	AX
 29396                                  
 29397                                  	; MSDOS 3.3
 29398                                  	;push	bx
 29399                                  	;mov	bx,CharType
 29400                                  	;;09/08/2018
 29401                                  	;;xlat	byte [cs:bx]
 29402                                  	;cs	xlat
 29403                                  	;pop	bx
 29404                                  
 29405                                  	; MSDOS 6.0
 29406 00004F9F E80C00                  	CALL	GetCharType
 29407                                  	
 29408                                  	;test	al,2
 29409 00004FA2 A802                    	TEST	AL,FDELIM
 29410 00004FA4 58                      	POP	AX
 29411 00004FA5 C3                      	RETN
 29412                                  ;ELSE
 29413                                  ;	CMP	AL,":"
 29414                                  ;	retz
 29415                                  ;
 29416                                  ;	CMP	AL,"<"
 29417                                  ;	retz
 29418                                  ;	CMP	AL,"|"
 29419                                  ;	retz
 29420                                  ;	CMP	AL,">"
 29421                                  ;	retz
 29422                                  ;
 29423                                  ;	CMP	AL,"+"
 29424                                  ;	retz
 29425                                  ;	CMP	AL,"="
 29426                                  ;	retz
 29427                                  ;	CMP	AL,";"
 29428                                  ;	retz
 29429                                  ;	CMP	AL,","
 29430                                  ;	retz
 29431                                  ;ENDIF
 29432                                  
 29433                                  ;-------------------------------------------------------------------------
 29434                                  ;
 29435                                  ;  SPCHK - checks to see if a character is a space or equivalent
 29436                                  ;	Entry : AL = character to check
 29437                                  ;	Exit  : ZF set if character is a space
 29438                                  ;	Uses  : flags
 29439                                  ;
 29440                                  ;-------------------------------------------------------------------------
 29441                                  
 29442                                  	;entry SPCHK
 29443                                  SPCHK:
 29444                                  ;IF TableLook
 29445                                  	; 20/05/2019 - Retro DOS v4.0
 29446 00004FA6 50                      	PUSH	AX
 29447                                  
 29448                                  	; MSDOS 3.3
 29449                                  	;push	bx
 29450                                  	;mov	bx,CharType
 29451                                  	;; 09/08/2018
 29452                                  	;;xlat	byte [cs:bx]
 29453                                  	;cs	xlat
 29454                                  	;pop	bx
 29455                                  
 29456                                  	; MSDOS 6.0
 29457 00004FA7 E80400                  	CALL	GetCharType
 29458                                  	
 29459                                  	;test	al,4
 29460 00004FAA A804                    	TEST	AL,FSPCHK
 29461 00004FAC 58                      	POP	AX
 29462 00004FAD C3                      	RETN
 29463                                  ;ELSE
 29464                                  ;	CMP	AL,9		; Filter out tabs too
 29465                                  ;	retz
 29466                                  ;; WARNING! " " MUST be the last compare
 29467                                  ;	CMP	AL," "
 29468                                  ;	return
 29469                                  ;ENDIF
 29470                                  
 29471                                  ;-------------------------------------------------------------------------
 29472                                  ;
 29473                                  ;  GetCharType - return flag bits indicating character type
 29474                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 29475                                  ;	defined above at label CharType.
 29476                                  ;
 29477                                  ;	Entry : AL = character to return type flags for
 29478                                  ;	Exit  : AL = type flags
 29479                                  ;	Uses  : AL, flags
 29480                                  ;
 29481                                  ;-------------------------------------------------------------------------
 29482                                  
 29483                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29484                                  
 29485                                  	; 20/05/2019 - Retro DOS v4.0
 29486                                  	; MSDOS 6.0
 29487                                  GetCharType:
 29488                                  	;cmp	al,7Eh
 29489 00004FAE 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 29490 00004FB0 7316                    	jae	short gct_90		; return standard value
 29491                                  
 29492 00004FB2 53                      	push	bx
 29493 00004FB3 BB[364F]                	mov	bx,CharType		; load lookup table
 29494 00004FB6 D0E8                    	shr	al,1			; adjust for half-byte table entry size
 29495                                  	;xlat	cs:[bx] 		; get flags
 29496 00004FB8 2ED7                    	cs	xlat	
 29497 00004FBA 5B                      	pop	bx
 29498                                  
 29499                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 29500                                  ; we have to shift the flags down to the low nibble
 29501                                  
 29502 00004FBB 7308                    	jnc	short gct_80		; carry clear, no shift needed
 29503                                  
 29504 00004FBD D0E8                    	shr	al,1			; we want high nibble, shift it down
 29505 00004FBF D0E8                    	shr	al,1
 29506 00004FC1 D0E8                    	shr	al,1
 29507 00004FC3 D0E8                    	shr	al,1
 29508                                  gct_80:
 29509 00004FC5 240F                    	and	al,0Fh			; clear the unused nibble
 29510 00004FC7 C3                      	retn
 29511                                  gct_90:
 29512 00004FC8 B00F                    	mov	al,0Fh			; set all flags
 29513 00004FCA C3                      	retn
 29514                                  
 29515                                  ;----------------------------------------------------------------------------
 29516                                  ;
 29517                                  ; Procedure : PATHCHRCMP
 29518                                  ;
 29519                                  ;----------------------------------------------------------------------------
 29520                                  
 29521                                  PATHCHRCMP:
 29522 00004FCB 3C2F                    	CMP	AL,'/'
 29523 00004FCD 7606                    	JBE	short PathRet
 29524 00004FCF 3C5C                    	CMP	AL,'\'
 29525 00004FD1 C3                      	retn
 29526                                  GotFor:
 29527 00004FD2 B05C                    	MOV	AL,'\'
 29528 00004FD4 C3                      	retn
 29529                                  PathRet:
 29530 00004FD5 74FB                    	JZ	short GotFor
 29531 00004FD7 C3                      	retn
 29532                                  
 29533                                  ;============================================================================
 29534                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 29535                                  ;============================================================================
 29536                                  ; 30/07/2018 - Retro DOS v3.0
 29537                                  ; 29/04/2019 - Retro DOS v4.0
 29538                                  
 29539                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 29540                                  
 29541                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 29542                                  
 29543                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 29544                                  ;	NAME	IBMCTRLC
 29545                                  
 29546                                  ;**	Low level routines for detecting special characters on CON input,
 29547                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 29548                                  ;	process termination code, and the INT 0 divide overflow handler.
 29549                                  ;
 29550                                  ;	FATAL
 29551                                  ;	FATAL1
 29552                                  ;	reset_environment
 29553                                  ;	DSKSTATCHK
 29554                                  ;	SPOOLINT
 29555                                  ;	STATCHK
 29556                                  ;	CNTCHAND
 29557                                  ;	DIVOV
 29558                                  ;	CHARHARD
 29559                                  ;	HardErr
 29560                                  ;
 29561                                  ;	Revision history:
 29562                                  ;
 29563                                  ;	    AN000	version 4.0   Jan 1988
 29564                                  ;	    A002	PTM    -- dir >lpt3 hangs
 29565                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 29566                                  ;
 29567                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 29568                                  ;	      flags register. In order to return to user normally DOS used to
 29569                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 29570                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 29571                                  ;
 29572                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 29573                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 29574                                  ;	      charhard.
 29575                                  
 29576                                  ; 29/04/2019 - Retro DOS v4.0
 29577                                  	; MSDOS 6.0
 29578                                  ;		public	LowInt23Addr		
 29579                                  LowInt23Addr: ;	LABEL	DWORD
 29580 00004FD8 [CD10]0000              	DW	LowInt23, 0
 29581                                  
 29582                                  ;		public	LowInt24Addr
 29583                                  LowInt24Addr: ;	LABEL	DWORD
 29584 00004FDC [E110]0000              	DW	LowInt24, 0
 29585                                  
 29586                                  ;		public	LowInt28Addr
 29587                                  LowInt28Addr: ;	LABEL	DWORD
 29588 00004FE0 [F510]0000              	DW	LowInt28, 0
 29589                                  
 29590                                  ;Break	<Checks for ^C in CON I/O>
 29591                                  
 29592                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29593                                  ; 05/05/2019 - Retro DOS v4.0
 29594                                  
 29595                                  ;---------------------------------------------------------------------------
 29596                                  ;
 29597                                  ; Procedure Name : DSKSTATCHK
 29598                                  ;
 29599                                  ; Check for ^C if only one level in
 29600                                  ;
 29601                                  ;---------------------------------------------------------------------------
 29602                                  
 29603                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 29604                                  
 29605                                  DSKSTATCHK:        
 29606                                  	;CMP	BYTE [INDOS],1
 29607 00004FE4 36803E[2103]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 29608                                  	;retnz			; Do NOTHING
 29609                                  	; 16/12/2022
 29610 00004FEA 7534                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 29611                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29612                                  	;jz	short _RET37 ; dskstatchk1
 29613                                  	;retn
 29614                                  ;_RET37:
 29615                                  ;dskstatchk1:
 29616 00004FEC 51                      	PUSH    CX
 29617 00004FED 06                              PUSH    ES
 29618 00004FEE 53                              PUSH    BX
 29619 00004FEF 1E                              PUSH    DS
 29620 00004FF0 56                              PUSH    SI
 29621                                          
 29622                                  	;PUSH	CS
 29623                                          ;POP	ES
 29624                                          ;PUSH	CS
 29625                                          ;POP	DS
 29626                                  
 29627 00004FF1 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 29628 00004FF3 8EC3                    	MOV	ES,BX		; for deviocall2
 29629 00004FF5 8EDB                    	MOV	DS,BX
 29630                                  
 29631                                  	; 16/12/2022
 29632                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29633                                  
 29634                                  	; 05/05/2019
 29635                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 29636                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 29637                                  	;mov	word [ss:DSKSTST],0
 29638                                  
 29639                                  	; 16/12/2022
 29640                                  	; 25/06/2019
 29641 00004FF7 C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 29642 00004FFC C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 29643 00005001 C706[9503]0000          	mov	word [DSKSTST],0
 29644                                  
 29645 00005007 BB[9203]                        MOV     BX,DSKSTCALL
 29646                                  
 29647                                  	;LDS	SI,[ss:BCON]
 29648                                          ; 25/062019
 29649 0000500A C536[3200]              	lds	si,[BCON]
 29650                                  
 29651                                  ; 16/12/2022
 29652                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29653                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 29654                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 29655                                  ;	mov	word [ss:DSKSTST],0
 29656                                  ;	mov	bx,DSKSTCALL
 29657                                  ;	lds	si,[ss:BCON]
 29658                                  
 29659 0000500E E87FF5                  	CALL	DEVIOCALL2
 29660                                   	; 15/03/2018
 29661                                  	;;test	word [ss:DSKSTST],200h
 29662                                          ;TEST	WORD [SS:DSKSTST],STBUI
 29663                                  	; 05/05/2019
 29664 00005011 36F606[9603]02          	test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 29665 00005017 7408                    	jz	short _GotCh		; No characters available
 29666                                  
 29667 00005019 30C0                            XOR     AL,AL                   ; Set zero
 29668                                  RET36:
 29669 0000501B 5E                              POP     SI
 29670 0000501C 1F                              POP     DS
 29671 0000501D 5B                              POP     BX
 29672 0000501E 07                              POP     ES
 29673 0000501F 59                              POP     CX
 29674                                  	; 16/12/2022
 29675                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29676                                  _RET37:
 29677 00005020 C3                              RETN
 29678                                  
 29679                                  _GotCh:
 29680 00005021 36A0[9F03]                      MOV     AL,[SS:DSKCHRET]	; SS override
 29681                                  
 29682 00005025 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 29683 00005027 75F2                            JNZ     SHORT RET36
 29684 00005029 36C606[9403]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 29685 0000502F 36C606[9203]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 29686 00005035 36880E[9F03]                    MOV     [SS:DSKCHRET],CL
 29687                                  	; 09/09/2018
 29688 0000503A 36C706[9503]0000        	MOV	word [SS:DSKSTST],0
 29689 00005041 36C706[A403]0100        	MOV	word [SS:DSKSTCNT],1
 29690 00005048 E845F5                  	CALL	DEVIOCALL2              ; Eat the ^C
 29691 0000504B 5E                              POP     SI
 29692 0000504C 1F                              POP     DS
 29693 0000504D 5B                              POP     BX                      ; Clean stack
 29694 0000504E 07                              POP     ES
 29695 0000504F 59                              POP     CX
 29696 00005050 E9CF00                          JMP	CNTCHAND ; 10/08/2018
 29697                                  
 29698                                  	; 05/05/2019
 29699                                  NOSTOP:
 29700                                  	; MSDOS 6.0
 29701 00005053 3C10                    	CMP	AL,"P"-"@"
 29702 00005055 7509                    	JNZ	short check_next
 29703                                  				    	; SS override
 29704 00005057 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 29705 0000505D 7405                    	JZ	short INCHKJ		; no
 29706                                  check_end:	; 24/09/2023
 29707 0000505F C3                      	retn
 29708                                  check_next:
 29709                                  	;IF	NOT TOGLPRN
 29710                                  	;CMP	AL,"N"-"@"
 29711                                  	;JZ	short INCHKJ
 29712                                  	;ENDIF
 29713                                  
 29714 00005060 3C03                    	CMP	AL,"C"-"@"
 29715                                  	; 24/09/2023
 29716                                  	;JZ	short INCHKJ
 29717                                  ;check_end:
 29718                                  	;retn
 29719 00005062 75FB                    	jnz	short check_end
 29720                                  
 29721                                  	; 24/09/2023
 29722                                  	; 08/09/2018
 29723                                  INCHKJ:	; 10/08/2018
 29724 00005064 E9A500                  	jmp	INCHK
 29725                                  
 29726                                  	; MSDOS 3.3
 29727                                          ;CMP     AL,"P"-"@"  ; cmp al,16
 29728                                          ;JZ	short INCHKJ
 29729                                  
 29730                                  	; 15/04/2018
 29731                                          ;;IF	NOT TOGLPRN
 29732                                          ;CMP	AL,"N"-"@"
 29733                                          ;JZ	SHORT INCHKJ
 29734                                          ;;ENDIF
 29735                                  	
 29736                                  	;CMP     AL,"C"-"@"  ; cmp al,3
 29737                                          ;JZ	short INCHKJ
 29738                                  	;RETN
 29739                                  
 29740                                  ;	; 08/09/2018
 29741                                  ;INCHKJ:; 10/08/2018
 29742                                  ;	JMP	INCHK
 29743                                  
 29744                                  ;----------------------------------------------------------------------------
 29745                                  ;
 29746                                  ; Procedure Name : SpoolInt
 29747                                  ;
 29748                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 29749                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 29750                                  ; the middle of an INT 24.
 29751                                  ;
 29752                                  ;----------------------------------------------------------------------------
 29753                                  
 29754                                  SPOOLINT:
 29755 00005067 9C                              PUSHF
 29756                                  	; 15/03/2018
 29757 00005068 36803E[5803]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 29758 0000506E 7423                            JZ      SHORT POPFRET
 29759 00005070 36803E[2003]00                  CMP     BYTE [SS:ERRORMODE],0
 29760 00005076 751B                            JNZ     SHORT POPFRET		;No spool ints in error mode
 29761                                  
 29762                                  	; 30/07/2018
 29763                                  
 29764                                  	; Note that we are going to allow an external program to issue system 
 29765                                  	; calls at this time. We MUST preserve IdleInt across this.
 29766                                  
 29767 00005078 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 29768                                  
 29769                                  	; 05/05/2019 - Retro DOS v4.0
 29770                                   
 29771                                  	; MSDOS 6.0
 29772 0000507D 36803E[F711]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 29773 00005083 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 29774 00005085 CD28                    	INT	int_spooler  ; int 28h 	; N: Execute user int 28 handler
 29775 00005087 EB05                    	jmp	short spool_ret_addr
 29776                                  
 29777                                  do_low_int28:
 29778                                  	;call	far [ss:LowInt28Addr]
 29779 00005089 2EFF1E[E04F]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 29780                                  
 29781                                  spool_ret_addr:
 29782                                  	;INT	int_spooler		; INT 28h
 29783                                  
 29784 0000508E 368F06[5803]            	POP	WORD [SS:IDLEINT]
 29785                                  POPFRET:
 29786 00005093 9D                              POPF
 29787                                  _RET18:  
 29788 00005094 C3                      	RETN
 29789                                  
 29790                                  ; 05/05/2019 - Retro DOS v4.0
 29791                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 29792                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29793                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 29794                                  
 29795                                  ;----------------------------------------------------------------------------
 29796                                  ;
 29797                                  ; Procedure Name : STATCHK
 29798                                  ;
 29799                                  ;----------------------------------------------------------------------------
 29800                                  
 29801                                  STATCHK:
 29802 00005095 E84CFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 29803                                                                          ; input redirection
 29804 00005098 53                              PUSH    BX
 29805 00005099 31DB                            XOR     BX,BX
 29806 0000509B E8F9E4                          CALL	GET_IO_SFT
 29807 0000509E 5B                              POP     BX
 29808 0000509F 72F3                            JC      SHORT _RET18
 29809                                  
 29810 000050A1 B401                            MOV     AH,1
 29811 000050A3 E815F3                          CALL	IOFUNC
 29812 000050A6 74BF                            JZ      SHORT SPOOLINT
 29813 000050A8 3C13                            CMP     AL,'S'-'@'
 29814 000050AA 75A7                            JNZ     SHORT NOSTOP
 29815                                  
 29816                                  	; 05/05/2019
 29817                                  	; MSDOS 6.0			; SS override
 29818 000050AC 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 29819 000050B2 75AB                    	JNZ	short check_end		; AN000; yes
 29820                                  
 29821 000050B4 30E4                            XOR     AH,AH
 29822 000050B6 E802F3                          CALL	IOFUNC                  ; Eat Cntrl-S
 29823 000050B9 EB4A                            JMP     SHORT PAUSOSTRT
 29824                                  PRINTOFF:
 29825                                  PRINTON:
 29826 000050BB 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 29827                                  
 29828                                  	; 30/07/2018 - Retro DOS v3.0
 29829 000050C0 53                      	PUSH	BX
 29830 000050C1 BB0400                  	MOV	BX,4
 29831 000050C4 E8D0E4                  	call	GET_IO_SFT
 29832 000050C7 5B                      	POP	BX
 29833 000050C8 72CA                    	jc	short _RET18
 29834 000050CA 06                      	PUSH	ES
 29835 000050CB 57                      	PUSH	DI
 29836 000050CC 1E                      	PUSH	DS
 29837 000050CD 07                      	POP	ES
 29838 000050CE 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 29839                                  	;test	word [es:di+5],800h
 29840                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 29841                                  	; 05/05/2019
 29842 000050D0 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 29843 000050D5 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 29844                                  
 29845                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 29846                                  					; See if allowed
 29847 000050D7 50                      	push	ax
 29848 000050D8 B82611                  	mov	ax,1126h
 29849 000050DB CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29850                                  			; Return: CF set on error, AX = error code
 29851                                  			; STACK unchanged
 29852 000050DD 58                      	pop	ax
 29853                                  
 29854 000050DE 730F                    	JNC	short NORM_PR 		; Echo is OK
 29855                                  
 29856                                  					; SS override
 29857 000050E0 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 29858                                  
 29859                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 29860                                  
 29861 000050E6 50                      	push    ax
 29862 000050E7 B82411                  	mov     ax,1124h
 29863 000050EA CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29864                                  			; ES:DI -> SFT, SS = DOS CS
 29865 000050EC 58                      	pop     ax
 29866                                  
 29867 000050ED EB10                    	JMP	SHORT RETP6
 29868                                  NORM_PR:
 29869 000050EF 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 29870 000050F5 7505                    	JNZ	short PRNOPN
 29871 000050F7 E81AF4                  	call	DEV_CLOSE_SFT
 29872 000050FA EB03                    	JMP	SHORT RETP6
 29873                                  PRNOPN:
 29874 000050FC E80DF4                  	call	DEV_OPEN_SFT
 29875                                  RETP6:
 29876 000050FF 5F                      	POP	DI
 29877 00005100 07                      	POP	ES
 29878                                  STATCHK_RETN:
 29879 00005101 C3                              RETN
 29880                                  PAUSOLP:
 29881 00005102 E862FF                          CALL    SPOOLINT
 29882                                  PAUSOSTRT:
 29883 00005105 B401                            MOV     AH,1
 29884 00005107 E8B1F2                          CALL	IOFUNC
 29885 0000510A 74F6                            JZ      SHORT PAUSOLP
 29886                                  INCHK:
 29887 0000510C 53                              PUSH    BX
 29888 0000510D 31DB                            XOR     BX,BX
 29889 0000510F E885E4                          CALL	GET_IO_SFT
 29890 00005112 5B                              POP     BX
 29891 00005113 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 29892 00005115 30E4                            XOR     AH,AH
 29893 00005117 E8A1F2                          CALL	IOFUNC
 29894                                  	; 30/07/2018
 29895                                  	; MSDOS 3.3
 29896                                          ;CMP	AL,'P'-'@' ;cmp al,16
 29897                                          ;JNZ	SHORT NOPRINT
 29898                                  
 29899                                  	;cmp	byte [SS:SCAN_FLAG],0
 29900                                  	;JZ	SHORT PRINTON	
 29901                                  	;mov	byte [ss:SCAN_FLAG],0
 29902                                  
 29903                                  	; 05/05/2019
 29904                                  	; MSDOS 6.0
 29905 0000511A 3C10                    	CMP	AL,"P"-"@"
 29906                                  	;;;;  7/14/86	ALT_Q key fix
 29907 0000511C 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 29908                                  ;NOPRINT:	
 29909                                  	;IF	NOT TOGLPRN
 29910                                  	;CMP	AL,"N"-"@"
 29911                                  	;JZ	short PRINTOFF
 29912                                  	;ENDIF
 29913 0000511E 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 29914                                  	;retnz
 29915 00005120 75DF                    	jnz	short STATCHK_RETN
 29916                                  
 29917                                  	; !! NOTE: FALL THROUGH !!
 29918                                  
 29919                                  ;---------------------------------------------------------------------------
 29920                                  ;
 29921                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 29922                                  ;
 29923                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 29924                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 29925                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 29926                                  ; processing to continue; 2) the original interrupt return address to the code
 29927                                  ; that performed the function call in the first place. If the user CTRL-C
 29928                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 29929                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 29930                                  ; is simulated.
 29931                                  ;
 29932                                  ;---------------------------------------------------------------------------
 29933                                  
 29934                                  CNTCHAND:
 29935                                  	; MSDOS 6.0			; SS override
 29936                                  					; AN002; from RAWOUT
 29937                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 29938                                  	;JNZ	short around_deadlock 	; AN002;
 29939                                  
 29940                                  	; 05/05/2019 - Retro DOS v4.0
 29941                                  	; (MSDOS 6.21 MSDOS.SYS DOSCODE:91C4h, 29/12/2022)
 29942 00005122 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 29943 00005128 7508                    	JNZ	short around_deadlock 	; AN002;
 29944                                  
 29945 0000512A B003                            MOV     AL,3			; Display "^C"
 29946 0000512C E8AEC5                          CALL	BUFOUT
 29947 0000512F E84CC4                          CALL	CRLF
 29948                                  around_deadlock:
 29949 00005132 16                              PUSH    SS
 29950 00005133 1F                              POP     DS
 29951 00005134 803E[5703]00                    CMP     BYTE [CONSWAP],0
 29952 00005139 7403                            JZ      SHORT NOSWAP
 29953 0000513B E8ECE0                          CALL	SWAPBACK
 29954                                  NOSWAP:
 29955 0000513E FA                      	CLI				; Prepare to play with stack
 29956 0000513F 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 29957 00005143 8B26[8405]              	MOV	SP,[USER_SP]
 29958 00005147 E805B3                          CALL	restore_world       ; User registers now restored
 29959                                  
 29960                                  	; 30/07/2018 - Retro DOS v3.0 
 29961                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 29962                                          ; 14/03/2018 - Retro DOS v2.0
 29963                                  	;MOV	BYTE [CS:INDOS],0	
 29964                                          ;MOV	BYTE [CS:ERRORMODE],0
 29965                                          ;MOV	[CS:ConC_Spsave],SP
 29966                                  	;clc	;30/07/2018
 29967                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 29968                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 29969                                  			; Return: return via RETF 2 with CF set
 29970                                  			; DOS will abort program with errorlevel 0
 29971                                  			; else
 29972                                  			; interrupted DOS call continues
 29973                                  
 29974                                  	; 05/05/2019 - Retro DOS v4.0
 29975                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 29976                                  
 29977                                  	; CS was used to address these variables. We have to use DOSDATA
 29978                                  	
 29979 0000514A 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 29980                                  			; (pop es, after 'call restore_world')	
 29981 0000514B 1E                      	push	ds
 29982                                  	;getdseg <ds>			; ds -> dosdata
 29983 0000514C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29984 00005151 C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 29985 00005156 C606[2003]00            	mov	byte [ERRORMODE],0
 29986 0000515B 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 29987                                  	; User SP has changed because of push. Adjust for it
 29988 0000515F 8306[3203]02            	add	word [ConC_Spsave],2
 29989                                  
 29990 00005164 803E[F711]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 29991 00005169 1F                       	pop	ds	; restore ds
 29992 0000516A 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 29993 0000516C F8                      	CLC				
 29994 0000516D CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 29995 0000516F EB06                    	jmp	short ctrlc_ret_addr
 29996                                  
 29997                                  	; 05/05/2019
 29998                                  do_low_int23:
 29999 00005171 F8                      	clc
 30000 00005172 2EFF1E[D84F]            	call	far [cs:LowInt23Addr]	
 30001                                  
 30002                                  	; 30/07/2018 
 30003                                  
 30004                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 30005                                  
 30006                                  ; The user has returned to us. The circumstances we allow are:
 30007                                  ;
 30008                                  ;   IRET	We retry the operation by redispatching the system call
 30009                                  ;   CLC/RETF	POP the stack and retry
 30010                                  ;   ... 	Exit the current process with ^C exit
 30011                                  ;
 30012                                  ; User's may RETURN to us and leave interrupts on. 
 30013                                  ; Turn 'em off just to be sure
 30014                                  
 30015                                  ctrlc_ret_addr: ; 05/05/2019
 30016                                  
 30017 00005177 FA                      	CLI
 30018                                  
 30019                                  	; MSDOS 3.3 
 30020                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 30021                                  	;PUSHF				; and the flags (maybe new call)
 30022                                  	;POP	AX
 30023                                  
 30024                                  	; 05/05/2019
 30025                                  	; MSDOS 6.0
 30026                                  
 30027                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 30028                                  
 30029 00005178 50                      	push	ax
 30030 00005179 8CD8                    	mov	ax,ds
 30031                                  	;getdseg <ds>			; ds -> dosdata
 30032 0000517B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30033 00005180 A3[0A0D]                	mov	[TEMPSEG],ax
 30034 00005183 58                      	pop	ax
 30035 00005184 A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 30036 00005187 9C                      	pushf				; and the flags (maybe new call)
 30037 00005188 58                      	pop	ax
 30038                                  
 30039                                  ; See if the input stack is identical to the output stack
 30040                                  
 30041                                  	; MSDOS 3.3
 30042                                  	;CMP	SP,[CS:ConC_Spsave]
 30043                                  	;JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 30044                                  
 30045                                  	; MSDOS 6.0
 30046 00005189 3B26[3203]              	CMP	SP,[ConC_Spsave]
 30047 0000518D 750A                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 30048                                  
 30049                                  ; Repeat the operation by redispatching the system call.
 30050                                  
 30051                                  ctrlc_repeat:
 30052                                  	; MSDOS 3.3
 30053                                  	;MOV	AX,[CS:USER_IN_AX]
 30054                                  	; 05/05/2019
 30055                                  	; MSDOS 6.0
 30056 0000518F A1[3A03]                	mov	ax,[USER_IN_AX]
 30057 00005192 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 30058                                  	; MSDOS 3.3 & MSDOS 6.0 
 30059                                  	;transfer COMMAND
 30060                                  COMMANDJ:
 30061 00005196 E96EB1                  	JMP	COMMAND
 30062                                  
 30063                                  ; The current SP is NOT the same as the input SP. Presume that he 
 30064                                  ; RETF'd leaving some flags on the stack and examine the input
 30065                                  
 30066                                  ctrlc_try_new:
 30067 00005199 83C402                  	ADD	SP,2			; pop those flags
 30068                                  	;;test	ax,1
 30069                                  	;TEST	AX,f_Carry		; did he return with carry?
 30070 0000519C A801                    	test	al,f_Carry ; test al,1
 30071 0000519E 74EF                    	JZ	short ctrlc_repeat	; no carry set, just retry
 30072                                  
 30073                                  	; MSDOS 6.0
 30074 000051A0 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 30075                                  
 30076                                  	; Well...  time to abort the user.  
 30077                                  	; Signal a ^C exit and use the EXIT system call..
 30078                                  
 30079                                  ctrlc_abort:
 30080                                  	; MSDOS 3.3
 30081                                          ;;MOV	AX,(EXIT SHL 8) + 0
 30082                                          ;MOV	AX, (EXIT*256) + 0  ; 4C00h
 30083                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 30084                                          ;transfer COMMAND	    ; give up by faking $EXIT
 30085                                  	;;JMP	SHORT COMMANDJ
 30086                                  	;JMP	COMMAND
 30087                                  
 30088                                  	; 05/05/2019 - Retro DOS v4.0
 30089                                  	; MSDOS 6.0
 30090 000051A4 B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 30091 000051A7 1E                      	push	ds
 30092                                  	;getdseg <ds>			; ds -> dosdata
 30093 000051A8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 30094 000051AD C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 30095 000051B2 1F                      	pop	ds
 30096                                  	;transfer COMMAND		; give up by faking $EXIT
 30097 000051B3 EBE1                    	JMP	SHORT COMMANDJ
 30098                                  	;JMP	COMMAND
 30099                                  
 30100                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 30101                                  ;----------------------------------------------------------------------------
 30102                                  ;
 30103                                  ; Procedure Name : DIVOV
 30104                                  ;
 30105                                  ; Default handler for division overflow trap
 30106                                  ;
 30107                                  ;----------------------------------------------------------------------------
 30108                                  
 30109                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30110                                  DIVOV: 
 30111                                  	; 05/05/2019 - Retro DOS v4.0
 30112                                  	; 30/07/2018
 30113                                  	; 07/07/2018 - Retro DOS v3.0
 30114 000051B5 BE[A209]                	mov	si,DIVMES
 30115 000051B8 2E8B1E[B509]            	mov	bx,[cs:DivMesLen]
 30116                                  	;mov	ax,cs
 30117                                  	;mov	ss,ax
 30118                                  	; 05/05/2019
 30119                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 30120 000051BD 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 30121 000051C2 BC[A007]                	mov     sp,AUXSTACK
 30122                                  	;call	RealDivOv ; MSDOS 3.3
 30123 000051C5 E80200                  	call	_OUTMES ; MSDOS 6.0
 30124 000051C8 EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 30125                                  
 30126                                  ; 30/07/2018
 30127                                  
 30128                                  ; MSDOS 6.0
 30129                                  ;---------------------------------------------------------------------------
 30130                                  ;
 30131                                  ; Procedure Name : OutMes
 30132                                  ;
 30133                                  ;
 30134                                  ; OutMes: perform message output
 30135                                  ; Inputs:   SS:SI points to message
 30136                                  ;	    BX has message length
 30137                                  ; Outputs:  message to BCON
 30138                                  ;
 30139                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30140                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30141                                  ;NB. This procedure is called only from DIVOV. -SR
 30142                                  ;
 30143                                  ;---------------------------------------------------------------------------
 30144                                  
 30145                                  ;MSDOS 3.3
 30146                                  ;---------------------------------------------------------------------------
 30147                                  ; RealDivOv: perform actual divide overflow stuff.
 30148                                  ; Inputs:   none
 30149                                  ; Outputs:  message to BCON
 30150                                  ;---------------------------------------------------------------------------
 30151                                  
 30152                                  	; 05/05/2019 - Retro DOS v4.0
 30153                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 30154                                  
 30155                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30156                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 30157                                  
 30158                                  ;---------------------------------------------------------------------------
 30159                                  ;
 30160                                  ; Procedure Name : OutMes
 30161                                  ;
 30162                                  ; OutMes: perform message output
 30163                                  ; Inputs:   SS:SI points to message
 30164                                  ;	    BX has message length
 30165                                  ; Outputs:  message to BCON
 30166                                  ;
 30167                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30168                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30169                                  ;NB. This procedure is called only from DIVOV. -SR
 30170                                  ;
 30171                                  ;---------------------------------------------------------------------------
 30172                                  
 30173                                  	; 30/07/2018
 30174                                  	; MSDOS 6.0
 30175                                  _OUTMES:
 30176                                  	; MSDOS 3.3
 30177                                  ;RealDivOv:
 30178                                  	; 07/07/2018 - Retro DOS v3.0
 30179                                          ;Context ES
 30180 000051CA 16                      	push	ss ; 05/05/2019
 30181                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 30182 000051CB 07                      	POP	ES
 30183                                          ;Context DS
 30184 000051CC 16                      	push	ss ; 05/05/2019	
 30185                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 30186 000051CD 1F                      	POP	DS
 30187 000051CE C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 30188 000051D3 C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 30189 000051D8 C706[9503]0000                  MOV     WORD [DSKSTST],0
 30190                                  	; BX = [DivMesLen] = 19
 30191 000051DE 891E[A403]                      MOV     [DSKSTCNT],BX
 30192 000051E2 BB[9203]                        MOV     BX,DSKSTCALL
 30193 000051E5 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 30194                                  	; 08/09/2018
 30195                                  	;mov	[DEVIOBUF_PTR],si
 30196                                  	; MSDOS 6.0
 30197                                  					; CS is used for string, fill in 
 30198                                  					; segment address 
 30199 000051E9 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 30200                                  
 30201 000051ED C536[3200]                      LDS     SI,[BCON]
 30202 000051F1 E89CF3                          CALL	DEVIOCALL2
 30203                                  
 30204                                  	;; 14/03/2018
 30205                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 30206                                  	;; 08/09/2018
 30207                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 30208                                          ;MOV	WORD [CS:DSKSTCNT],1
 30209                                          
 30210                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30211                                  
 30212                                  	; ES still points to DOSDATA. ES is
 30213                                  					; not destroyed by deviocall2. So use
 30214                                  					; ES override.
 30215                                  
 30216 000051F4 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 30217 000051FB 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 30218                                  
 30219 00005202 C3                      	RETN
 30220                                  
 30221                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 30222                                  ;---------------------------------------------------------------------------
 30223                                  ;
 30224                                  ; Procedure Name : CHARHARD
 30225                                  ;
 30226                                  ;
 30227                                  ; Character device error handler
 30228                                  ; Same function as HARDERR
 30229                                  ;
 30230                                  ;---------------------------------------------------------------------------
 30231                                  
 30232                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30233                                  CHARHARD:
 30234                                  	; 05/05/2019 - Retro DOS v4.0
 30235                                  	; 30/07/2018
 30236                                  	; 08/07/2018 - Retro DOS v3.0
 30237                                  
 30238                                  	; MSDOS 6.0
 30239                                  		   			; M024 - start
 30240 00005203 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 30241                                  	;jne	short @f		; Y: allow fail
 30242 00005209 750B                    	jne	short chard1
 30243                                  
 30244 0000520B 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 30245                                  
 30246 0000520E 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 30247 00005214 7503                    	jnz	short ctrlp		; Y: 
 30248                                  ;@@:
 30249                                  chard1:					; M024 - end
 30250                                  	; MSDOS 6.0 & MSDOS 3.3
 30251                                  
 30252                                  ; Character device error handler
 30253                                  ; Same function as HARDERR
 30254                                  
 30255                                  	;or	ah,38h
 30256 00005216 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 30257                                  ctrlp:			; SS override for Allowed and EXITHOLD
 30258 00005219 368826[4B03]            	mov	[SS:ALLOWED],ah
 30259                                  
 30260                                  	; 15/03/2018
 30261 0000521E 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 30262 00005223 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 30263 00005228 56                              PUSH    SI
 30264                                  	;and	di,0FFh
 30265 00005229 81E7FF00                        AND     DI,STECODE
 30266 0000522D 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 30267 0000522F E86400                          CALL    FATALC
 30268 00005232 5E                              POP     SI
 30269                                  	;return
 30270 00005233 C3                              RETN
 30271                                  
 30272                                  ;---------------------------------------------------------------------------
 30273                                  ;
 30274                                  ; Procedure Name : HardErr
 30275                                  ;
 30276                                  ; Hard disk error handler. Entry conditions:
 30277                                  ;	DS:BX = Original disk transfer address
 30278                                  ;	DX = Original logical sector number
 30279                                  ;	CX = Number of sectors to go (first one gave the error)
 30280                                  ;	AX = Hardware error code
 30281                                  ;	DI = Original sector transfer count	
 30282                                  ;	ES:BP = Base of drive parameters
 30283                                  ;	[READOP] = 0 for read, 1 for write
 30284                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 30285                                  ; Output:
 30286                                  ;	[FAILERR] will be set if user responded FAIL
 30287                                  ;
 30288                                  ;--------------------------------------------------------------------------
 30289                                  
 30290                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30291                                  HARDERR:
 30292                                  	; 05/05/2019 - Retro DOS v4.0
 30293                                  	; 30/07/2018
 30294                                  	; 08/07/2018 - Retro DOS v3.0
 30295 00005234 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 30296                                          ;and	di,0FFh
 30297 00005235 81E7FF00                	AND     DI,STECODE              ; And off status bits
 30298                                          ;CMP	DI,WRECODE		; Write Protect Error?
 30299                                  	;cmp	di,0
 30300 00005239 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 30301 0000523C 750A                            JNZ     short NOSETWRPERR
 30302 0000523E 50                              PUSH    AX
 30303                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30304                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30305                                          ;;MOV	AL,[ES:BP+0]
 30306                                  	; 15/12/2022
 30307 0000523F 268A4600                	mov	al,[ES:BP]
 30308                                          	; 15/03/2018
 30309 00005243 36A2[2203]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 30310 00005247 58                              POP     AX
 30311                                  NOSETWRPERR:
 30312 00005248 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 30313 0000524A 01C2                            ADD     DX,AX                   ; First sector number to retry
 30314 0000524C 52                              PUSH    DX
 30315                                  	; 08/07/2018
 30316                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 30317 0000524D 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 30318 00005251 5A                              POP     DX
 30319 00005252 01C3                            ADD     BX,AX                   ; First address for retry
 30320 00005254 30E4                            XOR     AH,AH                   ; Flag disk section in error
 30321                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 30322 00005256 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 30323 0000525A 721A                            JB      SHORT ERRINT
 30324 0000525C FEC4                            INC     AH                      ; Flag for FAT
 30325                                          ;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 30326                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019 	
 30327 0000525E 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 30328 00005262 7308                    	JAE	short TESTDIR 		; No
 30329                                  		 ; Err in FAT must force recomp of freespace
 30330                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 30331                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 30332 00005264 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 30333 0000526A EB0A                    	JMP	SHORT ERRINT
 30334                                  TESTDIR:
 30335 0000526C FEC4                            INC     AH
 30336                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 30337 0000526E 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 30338 00005272 7202                            JB      SHORT ERRINT
 30339 00005274 FEC4                            INC     AH                      ; Must be in data area
 30340                                  ERRINT:
 30341 00005276 D0E4                            SHL     AH,1                    ; Make room for read/write bit
 30342 00005278 360A26[7505]                    OR      AH,[SS:READOP] ; 15/03/2018
 30343                                  
 30344                                  	; 15/08/2018
 30345                                  					; SS override for allowed and EXITHOLD
 30346 0000527D 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 30347                                  
 30348                                          ;entry   FATAL
 30349                                  FATAL:
 30350                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30351                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30352                                          ;;MOV	AL,[ES:BP+0]		; Get drive number
 30353                                  	; 15/12/2022
 30354 00005282 268A4600                	MOV	AL,[ES:BP]        
 30355                                  
 30356                                  	;entry   FATAL1
 30357                                  FATAL1:  
 30358                                  	; 15/03/2018      
 30359 00005286 368C06[8205]            	MOV     [SS:EXITHOLD+2],ES
 30360 0000528B 36892E[8005]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 30361                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 30362                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 30363 00005290 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 30364 00005294 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 30365                                  
 30366                                  	; DI has the INT-24-style extended error. We now map the error code 
 30367                                  	; for this into the normalized get extended error set by using the 
 30368                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 30369                                  	; the device returned codes and leave all others beyond the look up 
 30370                                  	; table alone.
 30371                                  
 30372                                  	; 08/07/2018 - Retro DOS v3.0
 30373                                  FATALC:
 30374 00005296 E89701                  	call	SET_I24_EXTENDED_ERROR
 30375                                  	;cmp	di,0Ch
 30376 00005299 83FF0C                  	CMP	DI,error_I24_gen_failure
 30377 0000529C 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 30378 0000529E BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 30379                                  					;  Only come via GetExtendedError
 30380                                  ;** ----------------------------------------------------------------
 30381                                  ;
 30382                                  ; Entry point used by REDIRector on Network I 24 errors.
 30383                                  ;
 30384                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 30385                                  ;
 30386                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 30387                                  ;     EXITHOLD set for restore of ES:BP.
 30388                                  ; ------------------------------------------------------------------
 30389                                  	;entry	NET_I24_ENTRY
 30390                                  NET_I24_ENTRY:
 30391                                  GOT_RIGHT_CODE:
 30392 000052A1 36803E[2003]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 30393 000052A7 7404                            JZ	SHORT NoSetFail
 30394 000052A9 B003                    	MOV	AL,3
 30395 000052AB EB6C                    	JMP	short FailRet
 30396                                  NoSetFail:
 30397 000052AD 368926[8805]                    MOV     [SS:CONTSTK],SP		; SS override
 30398 000052B2 16                              PUSH	SS
 30399 000052B3 07                              POP	ES
 30400                                      
 30401                                  	; Wango!!! We may need to free some user state info... In 
 30402                                  	; particular, we may have locked down a JFN for a user and he may 
 30403                                  	; NEVER return to us. Thus,we need to free it here and then 
 30404                                  	; reallocate it when we come back.
 30405                                  
 30406 000052B4 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 30407 000052BA 740C                    	JZ	short _NoFree
 30408 000052BC 1E                      	push	ds
 30409 000052BD 56                      	push	si
 30410 000052BE 36C536[AE05]            	LDS	SI,[SS:PJFN]
 30411 000052C3 C604FF                  	MOV	BYTE [SI],0FFH
 30412 000052C6 5E                      	pop	si
 30413 000052C7 1F                      	pop	ds
 30414                                  
 30415                                  _NoFree:
 30416 000052C8 FA                      	CLI
 30417                                  					; Prepare to play with stack
 30418 000052C9 36FE06[2003]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 30419 000052CE 36FE0E[2103]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 30420                                  
 30421                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30422                                  
 30423                                  	;; Extended Open hooks
 30424                                  					; AN000;IFS.I24 error disabled
 30425                                  	;test	byte [ss:EXTOPEN_ON],2
 30426 000052D3 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 30427 000052D9 7404                    	JZ	short i24yes		; AN000;IFS.no
 30428                                  faili24:				; AN000;
 30429 000052DB B003                    	MOV	AL,3			; AN000;IFS.fake fail
 30430 000052DD EB29                    	JMP	short passi24 		; AN000;IFS.exit
 30431                                  i24yes: 				; AN000;
 30432                                  	;; Extended Open hooks
 30433                                  
 30434 000052DF 368E16[8605]                    MOV     SS,[SS:USER_SS]
 30435 000052E4 268B26[8405]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 30436                                  
 30437                                  	;;int	24h	
 30438                                          ;IN	int_fatal_abort		; Fatal error interrupt vector,
 30439                                  					; must preserve ES
 30440                                  	; 05/05/2019
 30441 000052E9 26803E[F711]00          	cmp	byte [es:DosHasHMA], 0	; Q: is dos running in HMA (M021)
 30442 000052EF 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 30443 000052F1 CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 30444                                  					; must preserve ES
 30445 000052F3 EB05                    	jmp	short criterr_ret_addr
 30446                                  
 30447                                  do_low_int24:
 30448                                  	; 05/05/2019
 30449                                  	; MSDOS 6.0
 30450 000052F5 2EFF1E[DC4F]            	call    far [cs:LowInt24Addr]
 30451                                  criterr_ret_addr:
 30452 000052FA 268926[8405]                    MOV     [ES:USER_SP],SP         ; restore our stack
 30453 000052FF 268C16[8605]                    MOV     [ES:USER_SS],SS
 30454 00005304 8CC5                            MOV     BP,ES
 30455 00005306 8ED5                            MOV     SS,BP
 30456                                  passi24:
 30457 00005308 368B26[8805]                    MOV     SP,[SS:CONTSTK]
 30458 0000530D 36FE06[2103]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 30459 00005312 36C606[2003]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 30460 00005318 FB                              STI
 30461                                  FailRet:
 30462 00005319 36C42E[8005]                    LES     BP,[SS:EXITHOLD]
 30463                                  	
 30464                                  	; 08/07/2018
 30465                                  
 30466                                  	; Triage the user's reply.
 30467                                  
 30468 0000531E 3C01                    	CMP	AL,1
 30469 00005320 723D                    	JB	short CheckIgnore	; 0 => ignore
 30470 00005322 7445                    	JZ	short CheckRetry	; 1 => retry
 30471 00005324 3C03                    	CMP	AL,3			; 3 => fail
 30472 00005326 754B                    	JNZ	short DoAbort 		; 2, invalid => abort
 30473                                  
 30474                                  	; The reply was fail. See if we are allowed to fail.
 30475                                  
 30476                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 30477                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 30478                                  	;test	byte [ss:ALLOWED],8
 30479 00005328 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 30480 0000532E 7443                    	jz	short DoAbort	; No, do abort
 30481                                  DoFail:
 30482 00005330 B003                    	MOV	AL,3		; just in case...
 30483                                  				; AN000;EO. I24 error disabled
 30484                                  	; 05/05/2019
 30485                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 30486 00005332 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 30487 00005338 7505                    	jnz	short CleanUp 		; AN000;EO. no
 30488                                  	
 30489 0000533A 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 30490                                  CleanUp:
 30491 0000533F 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 30492 00005345 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 30493                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30494                                  	;jnz	short CleanUp2
 30495                                  	;retn
 30496                                  	; 17/12/2022
 30497 0000534B 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 30498                                  CleanUp2:
 30499 0000534D 1E                      	push	ds
 30500 0000534E 56                      	push	si
 30501 0000534F 50                      	push	ax
 30502 00005350 36A1[AA05]              	MOV	AX,[ss:SFN]
 30503 00005354 36C536[AE05]            	LDS	SI,[ss:PJFN]
 30504 00005359 8804                    	MOV	[SI],AL
 30505 0000535B 58                      	pop	ax
 30506 0000535C 5E                      	pop	si
 30507 0000535D 1F                      	pop	ds
 30508                                  Cleanup_retn:
 30509 0000535E C3                      	retn
 30510                                  
 30511                                  	; The reply was IGNORE. See if we are allowed to ignore.
 30512                                  
 30513                                  CheckIgnore:
 30514                                  	;test	byte [ss:ALLOWED],20h
 30515 0000535F 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 30516 00005365 74C9                    	jz	short DoFail			 ; No, do fail
 30517 00005367 EBD6                    	jmp	short CleanUp
 30518                                  
 30519                                  	; The reply was RETRY. See if we are allowed to retry.
 30520                                  
 30521                                  CheckRetry:
 30522                                  	;test	byte [ss:ALLOWED],10h
 30523 00005369 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 30524 0000536F 74BF                    	jz	short DoFail			; No, do fail
 30525 00005371 EBCC                    	JMP	short CleanUp
 30526                                  
 30527                                  	; The reply was ABORT.
 30528                                  DoAbort:
 30529 00005373 16                      	push	ss
 30530 00005374 1F                      	pop	ds
 30531                                  
 30532 00005375 803E[5703]00            	CMP	byte [CONSWAP],0
 30533 0000537A 7403                    	JZ	short NOSWAP2
 30534 0000537C E8ABDE                  	call	SWAPBACK
 30535                                  NOSWAP2:
 30536                                  	; See if we are to truly abort. If we are in the process of aborting, 
 30537                                  	; turn this abort into a fail.
 30538                                  
 30539                                  	;test	[fAborting],0FFh
 30540                                  	;jnz	short DoFail
 30541                                  
 30542 0000537F 803E[5903]00            	cmp	byte [fAborting],0
 30543 00005384 75AA                    	JNZ	short DoFail
 30544                                  
 30545                                  	; Set return code
 30546                                  
 30547 00005386 C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 30548 0000538B 30C0                    	XOR	AL,AL
 30549                                  
 30550                                  	; we are truly aborting the process. Go restore information from 
 30551                                  	; the PDB as necessary.
 30552                                  
 30553 0000538D E9850D                  	jmp	exit_inner
 30554                                  
 30555                                  ;** --------------------------------------------------------------------------
 30556                                  ;
 30557                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 30558                                  ; different, then an old-style return is performed. If they are the same,
 30559                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 30560                                  ; the source of the terminate addresses.
 30561                                  ;
 30562                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 30563                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 30564                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 30565                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 30566                                  ; flag that will indicate that if any abort code is seen, we just continue the
 30567                                  ; operation. In essence, we dis-allow the abort response.
 30568                                  ;
 30569                                  ; output:   none.
 30570                                  ; ----------------------------------------------------------------------------
 30571                                  
 30572                                  	;entry	reset_environment
 30573                                  	
 30574                                  reset_environment:
 30575                                  	; 30/07/2018 - Retro DOS v3.0
 30576                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 30577                                  
 30578                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 30579                                  
 30580 00005390 1E                      	PUSH	DS			; save PDB of process
 30581                                  
 30582                                  	; There are no critical sections in force. Although we may enter 
 30583                                  	; here with critical sections locked down, they are no longer 
 30584                                  	; relevant. We may safely free all allocated resources.
 30585                                  
 30586 00005391 B482                    	MOV	AH,82h
 30587                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 30588                                  	;int	2Ah 	
 30589 00005393 CD2A                    	INT	int_IBM
 30590                                  
 30591                                  					; SS override
 30592 00005395 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 30593                                  
 30594                                  					; DOS 4.00 doesn't need it
 30595                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 30596                                  					; Allow REDIR to clear some stuff
 30597                                  					; On process exit.
 30598 0000539B B82211                  	mov     ax, 1122h
 30599 0000539E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 30600                                  			; SS = DOS CS
 30601                                  	;mov	al,22h	
 30602 000053A0 B022                    	MOV	AL,int_terminate
 30603 000053A2 E8DABA                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 30604                                  
 30605 000053A5 59                      	POP	CX			; get ThisPDB
 30606 000053A6 06                      	push	es
 30607 000053A7 53                      	push	bx			; save return address
 30608                                  
 30609 000053A8 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 30610 000053AD 8EDB                    	MOV	DS,BX
 30611 000053AF A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 30612                                  
 30613                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 30614                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 30615                                  	; is not Exit_keep_process
 30616                                  	
 30617 000053B2 39D8                    	CMP	AX,BX
 30618 000053B4 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 30619 000053B6 39CB                    	CMP	BX,CX
 30620 000053B8 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 30621 000053BA 50                      	PUSH	AX			; save parent
 30622                                  
 30623                                  					; SS override
 30624                                  	;cmp	byte [SS:EXIT_TYPE],3
 30625 000053BB 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 30626 000053C1 7406                    	JZ	short reset_to_parent 	; keeping this process
 30627                                  
 30628                                  	; We are truly removing a process. Free all allocation blocks 
 30629                                  	; belonging to this PDB
 30630                                  
 30631                                  	;invoke	arena_free_process
 30632 000053C3 E8870D                  	call	arena_free_process
 30633                                  
 30634                                  	; Kill off remainder of this process. Close file handles and signal 
 30635                                  	; to relevant network folks that this process is dead. Remember that 
 30636                                  	; CurrentPDB is STILL the current process!
 30637                                  
 30638                                  	;invoke	DOS_ABORT
 30639 000053C6 E87BDA                  	call	DOS_ABORT
 30640                                  
 30641                                  reset_to_parent:
 30642                                  					; SS override
 30643 000053C9 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 30644                                  
 30645                                  reset_return:				; come here for normal return
 30646                                  	;Context DS			; DS is used to refer to DOSDATA  
 30647 000053CE 16                      	push	ss
 30648 000053CF 1F                      	pop	ds	
 30649                                  
 30650 000053D0 B0FF                    	MOV	AL,-1
 30651                                  
 30652                                  	; make sure that everything is clean In this case ignore any errors, 
 30653                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 30654                                  
 30655                                  	;EnterCrit critDisk
 30656 000053D2 E823BF                  	call	ECritDisk
 30657                                  	;invoke	FLUSHBUF
 30658 000053D5 E8A505                  	call	FLUSHBUF
 30659                                  	;LeaveCrit critDisk
 30660 000053D8 E838BF                  	call	LCritDisk
 30661                                  
 30662                                  	; Decrement open ref. count if we had done a virtual open earlier.
 30663                                  
 30664 000053DB E880F7                  	call	CHECK_VIRT_OPEN
 30665 000053DE FA                      	CLI
 30666 000053DF C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 30667 000053E4 C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 30668 000053E9 C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 30669 000053EE 8F06[8005]              	POP	WORD [EXITHOLD]
 30670 000053F2 8F06[8205]              	POP	WORD [EXITHOLD+2]
 30671                                  
 30672                                  	; Snake into multitasking... Get stack from CurrentPDB person
 30673                                  
 30674 000053F6 8E1E[3003]              	MOV	DS,[CurrentPDB]
 30675 000053FA 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 30676 000053FE 8B262E00                	MOV	SP,[PDB.USER_STACK]
 30677                                  
 30678 00005402 E84AB0                  	call	restore_world
 30679                                  
 30680                                  	; 05/05/2019
 30681 00005405 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 30682                                  
 30683                                  	; MSDOS 6.0
 30684 00005406 50                      	push	ax			; set up ds, but save ds in TEMPSEG 
 30685 00005407 8CD8                    	mov	ax,ds			; and not on stack.
 30686                                  	;getdseg <ds>			; ds -> dosdata
 30687 00005409 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 30688 0000540E A3[0A0D]                	mov	[TEMPSEG],ax
 30689 00005411 58                      	pop	ax
 30690                                  					; set up ds to DOSDATA
 30691                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 30692 00005412 A3[8405]                	mov	[USER_SP],ax
 30693                                  
 30694 00005415 58                      	POP	AX			; suck off CS:IP of interrupt...
 30695 00005416 58                      	POP	AX
 30696 00005417 58                      	POP	AX
 30697                                  
 30698                                  ; M011 : BEGIN
 30699                                  
 30700                                  	; MSDOS 3.3
 30701                                  ;	MOV	AX,0F202h	; STI
 30702                                  
 30703                                  	; MSDOS 6.0
 30704 00005418 9F                      	LAHF
 30705 00005419 86E0                    	XCHG	AH,AL
 30706 0000541B 2402                    	AND	AL,2
 30707 0000541D B4F2                    	MOV	AH,0F2h
 30708                                  
 30709                                  ; M011 : END
 30710                                  
 30711                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30712 0000541F 50                      	PUSH	AX
 30713                                   
 30714                                  	;PUSH	word [CS:EXITHOLD+2]
 30715                                  	;PUSH	word [CS:EXITHOLD]
 30716                                  	
 30717                                  	; MSDOS 6.0
 30718 00005420 FF36[8205]              	PUSH	word [EXITHOLD+2]
 30719 00005424 FF36[8005]              	PUSH	word [EXITHOLD]
 30720                                  
 30721                                  	;MOV	AX,[CS:USER_SP]
 30722                                  
 30723                                  	; MSDOS 6.0
 30724 00005428 A1[8405]                	MOV	AX,[USER_SP]
 30725 0000542B 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 30726                                  
 30727 0000542F CF                      	IRET			; Long return back to user terminate address
 30728                                  
 30729                                  ;---------------------------------------------------------------------------
 30730                                  ;
 30731                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 30732                                  ;
 30733                                  ; This routine handles extended error codes.
 30734                                  ; Input : DI = error code from device
 30735                                  ; Output: All EXTERR fields are set
 30736                                  ;
 30737                                  ;--------------------------------------------------------------------------
 30738                                  
 30739                                  SET_I24_EXTENDED_ERROR:
 30740 00005430 50                      	PUSH	AX
 30741                                  					; ErrMap24End is in DOSDATA
 30742 00005431 B8[BB0E]                	MOV	AX,ErrMap24End
 30743 00005434 2D[AB0E]                	SUB	AX,ErrMap24
 30744                                  					; Change to dosdata to access 
 30745                                  					; ErrMap24 and EXTERR -SR
 30746                                  	; 05/05/2019 - Retro DOS v4.0
 30747                                  	
 30748                                  	; MSDOS 6.0
 30749 00005437 1E                      	push	ds
 30750                                  	;getdseg <ds>			; ds ->dosdata
 30751 00005438 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30752                                  
 30753                                  	; AX is the index of the first unavailable error. Do not translate 
 30754                                  	; if greater or equal to AX.
 30755                                  
 30756 0000543D 39C7                    	CMP	DI,AX
 30757 0000543F 89F8                    	MOV	AX,DI
 30758 00005441 7306                    	JAE	short NoTrans
 30759                                  
 30760                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 30761 00005443 8A85[AB0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 30762 00005447 30E4                    	XOR	AH,AH
 30763                                  NoTrans:
 30764                                  	;MOV	[CS:EXTERR],AX
 30765 00005449 A3[2403]                	mov	[EXTERR],AX
 30766 0000544C 1F                      	pop	ds
 30767                                  	;assume	ds:nothing
 30768 0000544D 58                      	POP	AX
 30769                                  
 30770                                  	; Now Extended error is set correctly. Translate it to get correct 
 30771                                  	; error locus class and recommended action.
 30772                                  
 30773 0000544E 56                      	PUSH	SI
 30774                                  					; ERR_TABLE_24 is in DOSCODE 
 30775 0000544F BE[5B0E]                	MOV	SI,ERR_TABLE_24
 30776 00005452 E829B2                  	call	CAL_LK			; Set other extended error fields
 30777 00005455 5E                      	POP	SI
 30778 00005456 C3                      	retn
 30779                                  
 30780                                  ;============================================================================
 30781                                  ; FAT.ASM, MSDOS 6.0, 1991
 30782                                  ;============================================================================
 30783                                  ; 30/07/2018 - Retro DOS v3.0
 30784                                  ; 20/05/2019 - Retro DOS v4.0
 30785                                  
 30786                                  ;	TITLE	FAT - FAT maintenance routines
 30787                                  ;	NAME	FAT
 30788                                  
 30789                                  ;**	FAT.ASM
 30790                                  ;----------------------------------------------------------------------------
 30791                                  ;	Low level local device routines for performing disk change sequence,
 30792                                  ;	setting cluster validity, and manipulating the FAT
 30793                                  ;
 30794                                  ;	IsEof
 30795                                  ;	UNPACK
 30796                                  ;	PACK
 30797                                  ;	MAPCLUSTER
 30798                                  ;	FATREAD_SFT
 30799                                  ;	FATREAD_CDS
 30800                                  ;	FAT_operation
 30801                                  ;
 30802                                  ;	Revision history:
 30803                                  ;
 30804                                  ;	  AN000  version Jan. 1988
 30805                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 30806                                  ;
 30807                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 30808                                  ;	       from CL0FATENTRY rather than disk.
 30809                                  
 30810                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 30811                                  
 30812                                  ;Break <IsEOF - check the quantity in BX for EOF>
 30813                                  ;----------------------------------------------------------------------------
 30814                                  ;
 30815                                  ; Procedure Name : IsEOF
 30816                                  ;
 30817                                  ; IsEOF - check the fat value in BX for eof.
 30818                                  ;
 30819                                  ;   Inputs:	ES:BP point to DPB
 30820                                  ;		BX has fat value
 30821                                  ;   Outputs:	JAE eof
 30822                                  ;   Registers modified: none
 30823                                  ;
 30824                                  ;---------------------------------------------------------------------------
 30825                                  
 30826                                  IsEOF:
 30827                                  	;cmp	word [es:bp+0Dh],0FF6h
 30828 00005457 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 30829 0000545D 730B                    	JAE	short EOF16			; yes, check for eof there
 30830                                  
 30831                                  ;J.K. 8/27/86
 30832                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 30833                                  ;of any media that has "F0"(Other) as a MediaByte.
 30834                                  ;Hopely, this does not create any side effect for those who may use any value
 30835                                  ;other than "FF8-FFF" as an EOF for their own file.
 30836                                  
 30837 0000545F 81FBF00F                	cmp	bx,0FF0h
 30838 00005463 7404                    	je	short IsEOF_other
 30839                                  
 30840 00005465 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 30841                                  IsEOF_other:
 30842 00005469 C3                      	retn
 30843                                  EOF16:
 30844 0000546A 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 30845 0000546D C3                      	retn
 30846                                  
 30847                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 30848                                  
 30849                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 30850                                  ;---------------------------------------------------------------------------
 30851                                  ;
 30852                                  ; Procedur Name : UNPACK
 30853                                  ;
 30854                                  ; Inputs:
 30855                                  ;	BX = Cluster number (may be full 16-bit quantity)
 30856                                  ;	ES:BP = Base of drive parameters
 30857                                  ; Outputs:
 30858                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 30859                                  ;	Zero set means DI=0 (free cluster)
 30860                                  ;	Carry set means error (currently user FAILed to I 24)
 30861                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 30862                                  ;
 30863                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 30864                                  ;
 30865                                  ;----------------------------------------------------------------------------
 30866                                  	
 30867                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30868                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 30869                                  
 30870                                  	; 20/05/2019 - Retro DOS v4.0
 30871                                  UNPACK:
 30872                                  	; MSDOS 6.0			; M014 - Start
 30873 0000546E 09DB                    	or	bx, bx			; Q: are we unpacking cluster 0
 30874 00005470 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 30875 00005472 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 30876 00005476 09FF                    	or	di,di 			; return z if di=0
 30877 00005478 C3                      	retn				; done
 30878                                  up_cont:				; M014 - End
 30879                                  	; MSDOS 3.3 & MSDOS 6.0
 30880                                  	;cmp	bx,[es:bp+0Dh]
 30881 00005479 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 30882 0000547D 7726                    	JA	short HURTFAT
 30883 0000547F E8D600                  	CALL	MAPCLUSTER
 30884 00005482 721E                    	jc	short _DoContext
 30885 00005484 8B3D                    	MOV	DI,[DI]
 30886 00005486 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 30887 00005488 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 30888 0000548C 81FEF60F                	CMP	SI,4096-10
 30889 00005490 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 30890 00005492 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 30891 00005494 EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 30892                                  High12:
 30893 00005496 D1EF                    	SHR	DI,1
 30894 00005498 D1EF                    	SHR	DI,1
 30895 0000549A D1EF                    	SHR	DI,1
 30896 0000549C D1EF                    	SHR	DI,1
 30897                                  Unpack12:
 30898 0000549E 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 30899                                  _DoContext:
 30900 000054A2 16                      	PUSH	SS
 30901 000054A3 1F                      	POP	DS
 30902 000054A4 C3                      	retn
 30903                                  HURTFAT:
 30904                                  	;;mov	word [es:bp+1Eh],0FFFFh
 30905                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30906 000054A5 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 30907 000054AB 50                      	PUSH	AX
 30908 000054AC B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 30909                                  
 30910                                  ;hkn; SS override
 30911 000054AE 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 30912                                  ;
 30913                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 30914                                  ;
 30915 000054B4 BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 30916 000054B7 E8C8FD                  	call	FATAL
 30917 000054BA 3C03                    	CMP	AL,3
 30918 000054BC F8                      	CLC
 30919 000054BD 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 30920 000054BF F9                      	STC				; User said FAIL
 30921                                  OKU_RET:
 30922 000054C0 58                      	POP	AX
 30923                                  hurtfat_retn:
 30924 000054C1 C3                      	retn
 30925                                  
 30926                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 30927                                  
 30928                                  ;Break	<PACK -- PACK FAT ENTRIES>
 30929                                  ;----------------------------------------------------------------------------
 30930                                  ;
 30931                                  ; Procedure Name : PACK
 30932                                  ;
 30933                                  ; Inputs:
 30934                                  ;	BX = Cluster number
 30935                                  ;	DX = Data
 30936                                  ;	ES:BP = Pointer to drive DPB
 30937                                  ; Outputs:
 30938                                  ;	The data is stored in the FAT at the given cluster.
 30939                                  ;	SI,DX,DI all destroyed
 30940                                  ;	Carry set means error (currently user FAILed to I 24)
 30941                                  ;	No other registers affected
 30942                                  ;
 30943                                  ; NOTE: if BX = 0 then data in DX is stored in CL0FATENTRY.
 30944                                  ;
 30945                                  ;---------------------------------------------------------------------------
 30946                                  
 30947                                  	; 02/01/2024
 30948                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30949                                  	; 20/05/2019 - Retro DOS v4.0
 30950                                  PACK:
 30951                                  	; MSDOS 6.0			; M014 - start
 30952 000054C2 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 30953 000054C4 7505                    	jnz	short p_cont		; N: proceed with normal pack
 30954 000054C6 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 30955 000054CA C3                      	retn				; done
 30956                                  p_cont:					; M014 - end
 30957                                  	; MSDOS 3.3 & MSDOS 6.0
 30958 000054CB E88A00                  	CALL	MAPCLUSTER
 30959 000054CE 72D2                    	JC	short _DoContext
 30960 000054D0 8B35                    	MOV	SI,[DI]
 30961 000054D2 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 30962 000054D4 51                      	PUSH	CX			; move data to upper 12 bits
 30963 000054D5 B104                    	MOV	CL,4
 30964 000054D7 D3E2                    	SHL	DX,CL
 30965 000054D9 59                      	POP	CX
 30966 000054DA 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 30967 000054DD EB14                    	JMP	SHORT PACKIN
 30968                                  ALIGNED:
 30969                                  	;cmp	word [es:bp+0Dh],0FF6h
 30970 000054DF 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 30971 000054E5 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 30972 000054E7 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 30973 000054EB 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 30974 000054EF EB02                    	JMP	SHORT PACKIN		; MZ go store
 30975                                  Pack16:
 30976 000054F1 31F6                    	XOR	SI,SI			; MZ no original data
 30977                                  PACKIN:
 30978 000054F3 09D6                    	OR	SI,DX
 30979 000054F5 8935                    	MOV	[DI],SI
 30980                                  
 30981                                  ;hkn; SS override
 30982 000054F7 36C536[E205]            	LDS	SI,[SS:CURBUF]
 30983                                  	; MSDOS 6.0
 30984 000054FC F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30985                                  					;LB. if already dirty		  ;AN000;
 30986 00005500 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 30987                                  	; 10/06/2019
 30988 00005502 E87D05                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 30989                                  	
 30990                                  	;or	byte [si+5],40h
 30991 00005505 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30992                                  yesdirty11:				;LB.				;AN000;
 30993                                  ;hkn; SS override
 30994 00005509 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 30995                                  ;hkn; SS is DOSDATA
 30996 0000550F 16                      	push	ss
 30997 00005510 1F                      	pop	ds
 30998 00005511 74AE                    	jz	short hurtfat_retn	; Carry clear
 30999 00005513 50                      	PUSH	AX
 31000 00005514 53                      	PUSH	BX
 31001 00005515 51                      	PUSH	CX
 31002 00005516 A1[8E05]                	MOV	AX,[CLUSSAVE]
 31003 00005519 8E1E[E405]              	MOV	DS,[CURBUF+2]
 31004                                  	;;add	si,16 ; MSDOS 3.3
 31005                                  	;add	si,20 ; MSDOS 6.0
 31006 0000551D 83C614                  	ADD	SI,BUFINSIZ
 31007 00005520 8824                    	MOV	[SI],AH
 31008                                  ;hkn; SS is DOSDATA
 31009                                  	;Context DS
 31010 00005522 16                      	push	ss
 31011 00005523 1F                      	pop	ds
 31012                                  	
 31013 00005524 50                      	PUSH	AX
 31014                                  	
 31015                                  	; MSDOS 6.0
 31016 00005525 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 31017 00005529 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 31018                                  
 31019                                  	; MSDOS 3.3 & MSDOS 6.0
 31020 0000552D 8B16[9005]              	MOV	DX,[CLUSSEC]
 31021                                  
 31022                                  	;MOV	SI,1	  ; *
 31023                                  	;XOR	AL,AL     ; *
 31024                                  	;call	GETBUFFRB ; *
 31025                                  	; 22/09/2023
 31026 00005531 E83E03                  	call	GETBUFFRA ; *
 31027                                  
 31028 00005534 58                      	POP	AX
 31029 00005535 721B                    	JC	short POPP_RET
 31030 00005537 C53E[E205]              	LDS	DI,[CURBUF]
 31031                                  	
 31032                                  	; MSDOS 6.0
 31033 0000553B F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 31034                                  					;LB. if already dirty		  ;AN000;
 31035 0000553F 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 31036 00005541 E83E05                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 31037                                  	
 31038                                  	;or	byte [di+5],40h
 31039 00005544 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 31040                                  yesdirty12:
 31041                                  	;;add	di,16
 31042                                  	;add	di,20 ; MSDOS 6.0
 31043                                  	; 02/01/2024
 31044                                  	;ADD	DI,BUFINSIZ
 31045                                  	;DEC	DI
 31046 00005548 83C713                  	add	di,BUFINSIZ-1 ; 19
 31047                                  
 31048                                  	;add	di,[es:bp+2]
 31049 0000554B 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 31050 0000554F 8805                    	MOV	[DI],AL
 31051 00005551 F8                      	CLC
 31052                                  POPP_RET:
 31053 00005552 16                      	PUSH	SS
 31054 00005553 1F                      	POP	DS
 31055 00005554 59                      	POP	CX
 31056 00005555 5B                      	POP	BX
 31057 00005556 58                      	POP	AX
 31058 00005557 C3                      	retn
 31059                                  
 31060                                  ; 31/07/2018 - Retro DOS v3.0
 31061                                  
 31062                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 31063                                  ;---------------------------------------------------------------------------
 31064                                  ;
 31065                                  ; Procedure Name : MAPCLUSTER
 31066                                  ;
 31067                                  ; Inputs:
 31068                                  ;	ES:BP Points to DPB
 31069                                  ;	BX Is cluster number
 31070                                  ; Function:
 31071                                  ;	Get a pointer to the cluster
 31072                                  ; Outputs:
 31073                                  ;	DS:DI Points to contents of FAT for given cluster
 31074                                  ;	DS:SI Points to start of buffer
 31075                                  ;	Zero Not set if cluster data is in high 12 bits of word
 31076                                  ;	Zero set if cluster data is in low 12 or 16 bits
 31077                                  ;	Carry set if failed.
 31078                                  ; SI is destroyed.
 31079                                  ;
 31080                                  ;---------------------------------------------------------------------------
 31081                                  
 31082                                  	; 20/05/2019 - Retro DOS v4.0
 31083                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 31084                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31085                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 31086                                  
 31087                                  MAPCLUSTER:
 31088                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 31089 00005558 C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 31090                                  	;SAVE	<AX,BX,CX,DX>
 31091 0000555D 50                      	push	ax
 31092 0000555E 53                      	push	bx
 31093 0000555F 51                      	push	cx
 31094 00005560 52                      	push	dx
 31095 00005561 89D8                    	MOV	AX,BX			; AX = BX
 31096 00005563 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 31097 00005569 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 31098 0000556B D1E8                    	SHR	AX,1			; AX = BX/2
 31099                                  Map16:	
 31100                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 31101 0000556D 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 31102                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31103 0000556F 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 31104 00005571 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 31105 00005573 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 31106                                  
 31107                                  ;IF FastDiv
 31108                                  ;
 31109                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 31110                                  ; case and apply a really fast algorithm to get the desired results
 31111                                  ;
 31112                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 31113                                  ; Fast method takes 39+20*4=119
 31114                                  ;
 31115                                  ; This saves a bunch.
 31116                                  
 31117 00005577 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 31118 0000557B 7510                    	jne	short _DoDiv		; 4  for no jump
 31119 0000557D 89C2                    	MOV	DX,AX			; 2  get set for remainder
 31120 0000557F 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 31121 00005583 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 31122                                  	; MDOS 3.3
 31123                                  	;shr	al,1	
 31124                                  	; MDOS 6.0
 31125 00005585 D1EF                    	shr	di,1			; 2
 31126 00005587 D0D8                    	rcr	al,1			; 2
 31127                                  	; MDOS 3.3 (& MSDOS 6.0)
 31128 00005589 30E4                    	xor	ah,ah			; 3
 31129 0000558B EB04                    	jmp	short DivDone		; 16
 31130                                  _DoDiv:
 31131                                  ;ENDIF
 31132                                  	; MSDOS 3.3
 31133                                  	;xor	dx,dx
 31134                                  	; MSDOS 6.0
 31135 0000558D 89FA                    	mov	dx,di			; 2
 31136                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31137 0000558F F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 31138                                  ;IF FastDiv
 31139                                  DivDone:
 31140                                  ;ENDIF
 31141                                  	;add	ax,[es:bp+6]
 31142 00005591 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 31143 00005595 49                      	DEC	CX			; CX is sector size - 1
 31144                                  	;SAVE	<AX,DX,CX>
 31145 00005596 50                      	push	ax
 31146 00005597 52                      	push	dx
 31147 00005598 51                      	push	cx
 31148 00005599 89C2                    	MOV	DX,AX
 31149                                  
 31150                                  	; MSDOS 6.0
 31151                                  	; 22/09/2023
 31152                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb  low sector #
 31153                                  	;
 31154                                  	; MDOS 3.3 (& MSDOS 6.0)
 31155                                  	;XOR	AL,AL	   ; *
 31156                                  	;MOV	SI,1	   ; *
 31157                                  	;;invoke GETBUFFRB ; *
 31158                                  	;call	GETBUFFRB  ; *
 31159                                  	; 22/09/2023
 31160 0000559B E8CE02                  	call	GETBUFFRC  ; *!
 31161                                  
 31162                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 31163 0000559E 59                      	pop	cx
 31164 0000559F 58                      	pop	ax
 31165 000055A0 5A                      	pop	dx
 31166 000055A1 724C                    	JC	short MAP_POP
 31167                                  
 31168 000055A3 C536[E205]              	LDS	SI,[CURBUF]
 31169                                  	;;lea	di,[si+16]
 31170                                  	;lea	di,[si+20] ; MSDOS 6.0
 31171 000055A7 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31172 000055AA 01C7                    	ADD	DI,AX
 31173 000055AC 39C8                    	CMP	AX,CX
 31174 000055AE 752C                    	JNZ	short MAPRET
 31175 000055B0 8A05                    	MOV	AL,[DI]
 31176                                  	;Context DS		 	;hkn; SS is DOSDATA
 31177 000055B2 16                      	push	ss
 31178 000055B3 1F                      	pop	ds	
 31179 000055B4 FE06[7805]              	INC	BYTE [CLUSSPLIT]
 31180 000055B8 A2[8E05]                	MOV	[CLUSSAVE],AL
 31181 000055BB 8916[9005]              	MOV	[CLUSSEC],DX
 31182                                  	; MSDOS 6.0
 31183 000055BF C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb	;AN000;
 31184 000055C5 42                      	INC	DX
 31185                                  
 31186                                  	; 22/09/2023
 31187                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb FAT sector <32mb ;AN000;
 31188                                  	;
 31189                                  	; MDOS 3.3 (& MSDOS 6.0)
 31190                                  	;XOR	AL,AL	   ; *
 31191                                  	;MOV	SI,1	   ; *
 31192                                  	;;invoke GETBUFFRB ; *
 31193                                  	;call	GETBUFFRB  ; *
 31194                                  	; 22/09/2023
 31195 000055C6 E8A302                  	call	GETBUFFRC  ; *!
 31196 000055C9 7224                    	JC	short MAP_POP
 31197                                  
 31198 000055CB C536[E205]              	LDS	SI,[CURBUF]
 31199 000055CF 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31200 000055D2 8A05                    	MOV	AL,[DI]
 31201                                  	;Context DS			;hkn; SS is DOSDATA
 31202 000055D4 16                      	push	ss
 31203 000055D5 1F                      	pop	ds
 31204 000055D6 A2[8F05]                	MOV	[CLUSSAVE+1],AL
 31205                                  
 31206                                  ;hkn; CLUSSAVE is in DOSDATA
 31207 000055D9 BF[8E05]                	MOV	DI,CLUSSAVE
 31208                                  MAPRET:
 31209                                  	;RESTORE <DX,CX,BX>
 31210 000055DC 5A                      	pop	dx
 31211 000055DD 59                      	pop	cx
 31212 000055DE 5B                      	pop	bx
 31213 000055DF 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 31214 000055E1 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 31215 000055E7 7302                    	JAE	short MapSet		; MZ no, set flags
 31216 000055E9 89D8                    	MOV	AX,BX
 31217                                  MapSet:
 31218 000055EB A801                    	TEST	AL,1			; set zero flag if not on boundary
 31219                                  	;RESTORE <AX>
 31220 000055ED 58                      	pop	ax
 31221 000055EE C3                      	retn
 31222                                  
 31223                                  MAP_POP:
 31224                                  	;RESTORE <DX,CX,BX,AX>
 31225 000055EF 5A                      	pop	dx
 31226 000055F0 59                      	pop	cx
 31227 000055F1 5B                      	pop	bx
 31228 000055F2 58                      	pop	ax
 31229                                  fatread_sft_retn: ; 17/12/2022
 31230 000055F3 C3                      	retn
 31231                                  
 31232                                  ; 20/05/2019 - Retro DOS v4.0
 31233                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 31234                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31235                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 31236                                  
 31237                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 31238                                  ;----------------------------------------------------------------------------
 31239                                  ;
 31240                                  ; Procedure Name : FATREAD_SFT
 31241                                  ;
 31242                                  ; Inputs:
 31243                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 31244                                  ;		giving a NET SFT will produce system crashing results).
 31245                                  ;	DS DOSDATA
 31246                                  ; Function:
 31247                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 31248                                  ;	if disk changed.
 31249                                  ;	In other respects, same as FATREAD_CDS.
 31250                                  ;	(note ES:DI destroyed!)
 31251                                  ; Outputs:
 31252                                  ;	Carry set if error (currently user FAILed to I 24)
 31253                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 31254                                  ;	as far as invalidating curdir_ID is concerned.
 31255                                  ;	Since getting a true disk changed on this call is a screw up
 31256                                  ;	anyway, that's the way it goes.
 31257                                  ;
 31258                                  ;---------------------------------------------------------------------------
 31259                                  
 31260                                  FATREAD_SFT:
 31261 000055F4 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 31262                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31263                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31264                                  	; 15/12/2022
 31265 000055F8 268A4600                	mov	AL,[ES:BP]
 31266 000055FC A2[7605]                	MOV	[THISDRV],AL
 31267 000055FF E830B0                  	call	GOTDPB			;Set THISDPB
 31268                                  	;CALL	FAT_GOT_DPB
 31269                                  	; 17/12/2022
 31270 00005602 EB78                    	jmp	FAT_GOT_DPB
 31271                                  ;fatread_sft_retn:
 31272                                  	;retn
 31273                                  
 31274                                  ;----------------------------------------------------------------------------
 31275                                  ;
 31276                                  ; Procedure Name : FATREAD_CDS
 31277                                  ;
 31278                                  ; Inputs:
 31279                                  ;	DS:DOSDATA
 31280                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 31281                                  ;		giving a NET or NUL CDS will produce system crashing results).
 31282                                  ; Function:
 31283                                  ;	If disk may have been changed, media is determined and buffers are
 31284                                  ;	flagged invalid. If not, no action is taken.
 31285                                  ; Outputs:
 31286                                  ;	ES:BP = Drive parameter block
 31287                                  ;	THISDPB = ES:BP
 31288                                  ;	THISDRV set
 31289                                  ;	Carry set if error (currently user FAILed to I 24)
 31290                                  ; DS preserved , all other registers destroyed
 31291                                  ;
 31292                                  ;---------------------------------------------------------------------------
 31293                                  
 31294                                  	; 20/05/2019 - Retro DOS v4.0
 31295                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 31296                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31297                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 31298                                  
 31299                                  FATREAD_CDS:
 31300 00005604 06                      	PUSH	ES
 31301 00005605 57                      	PUSH	DI
 31302                                  	;les	bp,[es:di+45h]
 31303 00005606 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 31304                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31305                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31306                                  	; 15/12/2022
 31307 0000560A 268A4600                	mov	AL,[ES:BP]
 31308 0000560E A2[7605]                	MOV	[THISDRV],AL
 31309 00005611 E81EB0                  	call	GOTDPB			;Set THISDPB
 31310 00005614 E86500                  	CALL	FAT_GOT_DPB
 31311 00005617 5F                      	POP	DI			;Get back CDS pointer
 31312 00005618 07                      	POP	ES
 31313 00005619 72D8                    	jc	short fatread_sft_retn
 31314 0000561B 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 31315                                  
 31316                                  ;	Media changed. We now need to find all CDS structures which use this
 31317                                  ;	DPB and invalidate their ID pointers.
 31318                                  
 31319                                  MED_CHANGE:
 31320 0000561D 31C0                    	XOR	AX,AX
 31321 0000561F 48                      	DEC	AX			; AX = -1
 31322 00005620 1E                      	PUSH	DS
 31323 00005621 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 31324 00005625 30ED                    	XOR	CH,CH			; CX is number of structures
 31325                                  	;lds	si,[es:di+45h]
 31326 00005627 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 31327                                  
 31328                                  ;hkn; SS override
 31329                                  
 31330                                  ;	Find all CDSs with this DevPtr
 31331                                  ;
 31332                                  ;	(ax) = -1
 31333                                  ;	(ds:si) = DevPtr
 31334                                  
 31335 0000562B 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 31336                                  frcd20: 
 31337                                  	;;test	word [es:di+43h],8000h
 31338                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 31339 00005630 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 31340 00005635 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 31341                                  
 31342                                  	; MSDOS 3.3
 31343                                  	;push	es
 31344                                  	;push	di
 31345                                  	;les	di,[es:di+45h]
 31346                                  	;;les	di,[ES:DI+curdir.devptr]
 31347                                  	;call	POINTCOMP
 31348                                  	;pop	di
 31349                                  	;pop	es
 31350                                  	;jnz	short frcd25
 31351                                  
 31352                                  	; MSDOS 6.0
 31353 00005637 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 31354 0000563B 7512                    	jne	short frcd25		; no match
 31355 0000563D 8CDB                    	mov	bx,ds
 31356 0000563F 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 31357 00005643 750A                    	jne	short frcd25		; CDS not for this drive
 31358                                  
 31359                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31360                                  	;test	[es:di+49h],ax
 31361 00005645 26854549                	test	[ES:DI+curdir.ID],AX
 31362 00005649 7404                    	JZ	short frcd25		; If root (0), leave root
 31363                                  	;mov	[es:di+49h],ax
 31364 0000564B 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 31365                                  frcd25:	
 31366                                  	;;add	di,81  ; MSDOS 3.3
 31367                                  	;add	di,88  ; MSDOS 6.0	 
 31368 0000564F 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 31369 00005652 E2DC                    	LOOP	frcd20
 31370 00005654 1F                      	POP	DS
 31371                                  NO_CHANGE:
 31372 00005655 C42E[8A05]              	LES	BP,[THISDPB]
 31373 00005659 F8                      	CLC
 31374 0000565A C3                      	retn
 31375                                  
 31376                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 31377                                  ;----------------------------------------------------------------------------
 31378                                  ;
 31379                                  ; Procedure Name : FAT_operation
 31380                                  ;
 31381                                  ;----------------------------------------------------------------------------
 31382                                  
 31383                                  	; 03/01/2024
 31384                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31385                                  
 31386                                  FAT_operation:
 31387                                  	; 31/07/2018 - Retro DOS v3.0
 31388                                  FATERR:
 31389                                  	;mov	word [es:bp+1Eh],-1
 31390                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 31391 0000565B 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 31392                                  					; Err in FAT must force recomp of freespace
 31393                                  	;and	di,0FFh
 31394 00005661 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 31395                                  	;mov	byte [ALLOWED],18h
 31396 00005665 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31397                                  	;mov	ah,1Ah
 31398 0000566A B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 31399 0000566C A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 31400 0000566F E814FC                  	call	FATAL1
 31401 00005672 C42E[8A05]              	LES	BP,[THISDPB]
 31402 00005676 3C03                    	CMP	AL,3
 31403 00005678 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 31404 0000567A F9                      	STC				; User said FAIL
 31405 0000567B C3                      	retn
 31406                                  
 31407                                  FAT_GOT_DPB:
 31408                                  	;Context DS			;hkn; SS is DOSDATA
 31409 0000567C 16                      	push	ss			
 31410 0000567D 1F                      	pop	ds
 31411                                  	;mov	al,0Fh
 31412 0000567E B00F                    	MOV	AL,DMEDHL
 31413                                  	;mov	ah,[es:bp+1]
 31414 00005680 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 31415 00005684 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 31416 00005687 C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 31417 0000568C C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31418                                  	;;mov	al,[es:bp+16h]
 31419                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 31420 00005692 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31421 00005696 A2[6703]                	MOV	[CALLMED],AL
 31422 00005699 06                      	PUSH	ES
 31423 0000569A 1E                      	PUSH	DS
 31424                                  
 31425                                  ;hkn; DEVCALL is in DOSDATA
 31426 0000569B BB[5A03]                	MOV	BX,DEVCALL
 31427                                  	;;lds	si,[es:bp+12h]
 31428                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 31429 0000569E 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 31430 000056A2 07                      	POP	ES			; ES:BX Points to call header
 31431 000056A3 E8EAEE                  	call	DEVIOCALL2
 31432                                  	;Context DS		 	;hkn; SS is DOSDATA
 31433 000056A6 16                      	push	ss
 31434 000056A7 1F                      	pop	ds
 31435 000056A8 07                      	POP	ES			; Restore ES:BP
 31436 000056A9 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31437                                  	;test	di,8000h
 31438                                  	;jnz	short FATERR
 31439 000056AD 09FF                    	or	di,di
 31440 000056AF 78AA                    	js	short FATERR		; have error
 31441 000056B1 30E4                    	XOR	AH,AH
 31442                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 31443                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 31444 000056B3 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 31445 000056B7 A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 31446                                  ; See if we had changed volume id by creating one on the diskette
 31447 000056BA 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 31448 000056BE 7508                    	jnz	short CHECK_BYT
 31449 000056C0 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 31450 000056C5 E9A500                  	jmp	GOGETBPB		; Need to get device driver to read in
 31451                                  					; new volume label.
 31452                                  CHECK_BYT:
 31453 000056C8 0A26[6803]              	OR	AH,[CALLRBYT]
 31454                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31455                                  	;JMP	short NEWDSK
 31456                                  	; 17/12/2022
 31457 000056CC 7863                    	js	short NEWDSK
 31458                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31459                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31460                                  	;JMP	short NEWDSK
 31461                                  
 31462                                  CHECK_ZR:
 31463 000056CE 743B                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 31464                                  	; 24/09/2023
 31465                                  	; cf=0 (after 'or' instruction)
 31466                                  	;CLC
 31467 000056D0 C3                      	retn				; If Media not changed (NZ)
 31468                                  
 31469                                  DISK_CHNG_ERR:
 31470 000056D1 06                      	PUSH	ES
 31471 000056D2 55                      	PUSH	BP
 31472                                  	;;les	bp,[es:bp+12h]
 31473                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 31474 000056D3 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 31475                                  	;;test	word [es:bp+4],800h
 31476                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 31477 000056D7 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 31478 000056DC 5D                      	POP	BP
 31479 000056DD 07                      	POP	ES
 31480 000056DE 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 31481 000056E0 1E                      	PUSH	DS			; Save buffer pointer for ignore
 31482 000056E1 57                      	PUSH	DI
 31483 000056E2 16                      	push	ss			;hkn; SS is DOSDATA
 31484 000056E3 1F                      	pop	ds
 31485                                  	;mov	byte [ALLOWED],18h
 31486 000056E4 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31487 000056E9 06                      	PUSH	ES
 31488 000056EA C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 31489 000056EE 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 31490 000056F2 07                      	POP	ES
 31491 000056F3 893E[2803]              	MOV	[EXTERRPT],DI
 31492                                  	;mov	ax,0Fh
 31493 000056F7 B80F00                  	MOV	AX,error_I24_wrong_disk
 31494 000056FA C606[7505]01            	MOV	byte [READOP],1		; Write
 31495                                  	;invoke	HARDERR
 31496 000056FF E832FB                  	call	HARDERR
 31497 00005702 5F                      	POP	DI			; Get back buffer for ignore
 31498 00005703 1F                      	POP	DS
 31499 00005704 3C03                    	CMP	AL,3
 31500                                  FAIL_OPJ2:
 31501 00005706 741C                    	JZ	short FAIL_OP
 31502 00005708 E971FF                  	JMP	FAT_GOT_DPB		; Retry
 31503                                  
 31504                                  CHKBUFFDIRT:
 31505                                  	; 20/05/2019 - Retro DOS v4.0
 31506                                  
 31507                                  	; MSDOS 3.3
 31508                                  	;lds	di,[BUFFHEAD]
 31509                                  
 31510                                  	; MSDOS 6.0
 31511 0000570B 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 31512 00005711 741E                    	je	short NEWDSK			; no, skip the check
 31513 00005713 E8F100                  	call	GETCURHEAD			; get pointer to first buffer
 31514                                  nbuffer:
 31515                                  	;cmp	al,[di+4]
 31516 00005716 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 31517 00005719 750D                    	jne	short lfnxt			; no, go for next buffer
 31518                                  	;test   byte [di+5],40h
 31519 0000571B F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 31520 0000571F 7407                    	jz	short lfnxt			; no, go for next buffer
 31521                                  	;Context DS
 31522 00005721 16                      	push	ss
 31523 00005722 1F                      	pop	ds
 31524                                  	; 24/09/2023
 31525                                  	; cf=0 (after 'test' instruction)
 31526                                  	;clc
 31527 00005723 C3                      	retn
 31528                                  
 31529                                  FAIL_OP:					; This label & code is here
 31530                                  	;Context DS				;  for reachability
 31531 00005724 16                      	push	ss
 31532 00005725 1F                      	pop	ds
 31533 00005726 F9                      	STC
 31534 00005727 C3                      	retn
 31535                                  
 31536                                  lfnxt:
 31537                                  	; 15/08/2018 - Retro DOS v3.0
 31538                                  	; MSDOS 3.3
 31539                                  	;lds	di,[di]
 31540                                  
 31541                                  	; 20/05/2019 - Retro DOS v4.0
 31542 00005728 8B3D                    	mov	di,[di]
 31543                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 31544                                  	
 31545                                  	; MSDOS 3.3
 31546                                  	;cmp	di,-1
 31547                                  	;jne	short nbuffer
 31548                                  	
 31549                                  	; MSDOS 6.0
 31550 0000572A 36393E[BB0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 31551 0000572F 75E5                    	jne	short nbuffer			; no, check this guy also
 31552                                  
 31553                                  ; If no dirty buffers, assume Media changed
 31554                                  NEWDSK:
 31555                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 31556                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 31557 00005731 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 31558                                  						;  recompute
 31559                                  	; MSDOS 3.3
 31560                                  	;call	SETVISIT
 31561                                  	; MSDOS 6.0
 31562 00005737 E8CD00                  	call	 GETCURHEAD
 31563                                  nxbuffer:
 31564                                  	; MSDOS 3.3
 31565                                  	;or 	byte [di+5],20h
 31566                                  	; MSDOS 3.3 & MSDOS 6.0
 31567                                  	;cmp	[di+4],al
 31568 0000573A 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 31569 0000573D 7510                    	jne	short lfnxt2
 31570                                  	;test	byte [di+5],40h
 31571 0000573F F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31572 00005743 758C                    	jnz	short DISK_CHNG_ERR
 31573                                  	;mov	word [di+4],20FFh
 31574 00005745 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 31575 0000574A E8CC00                  	call	SCANPLACE
 31576                                  	; MSDOS 6.0
 31577 0000574D EB02                    	jmp	short skpbuff
 31578                                  lfnxt2:
 31579 0000574F 8B3D                    	mov	di,[di]
 31580                                  	;mov	di,[di+BUFFINFO.buf_next]
 31581                                  skpbuff:
 31582                                  	; MSDOS 6.0
 31583 00005751 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 31584 00005756 75E2                    	jne	short nxbuffer
 31585                                  
 31586 00005758 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 31587 0000575E 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 31588 00005760 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 31589 00005765 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 31590 00005767 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 31591                                  ;lfnxt2:
 31592                                  	; MSDOS 3.3
 31593                                  	;call	SKIPVISIT
 31594                                  	;jnz	short nxbuffer
 31595                                  GOGETBPB:
 31596                                  	; MSDOS 3.3 & MSDOS 6.0
 31597                                  	;;lds	di,[es:bp+12h]
 31598                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 31599 0000576D 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 31600                                  	; 20/05/2019
 31601                                  	;test	word [di+4],2000h
 31602                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 31603 00005771 F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 31604 00005775 7510                    	JNZ	short GETFREEBUF
 31605                                  	;context DS	    		;hkn; SS is DOSDATA
 31606 00005777 16                      	push	ss
 31607 00005778 1F                      	pop	ds
 31608 00005779 BB0200                  	MOV	BX,2
 31609 0000577C E8EFFC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 31610                                  FAIL_OPJ:
 31611 0000577F 72A3                    	JC	short FAIL_OP
 31612 00005781 C53E[E205]              	LDS	DI,[CURBUF]
 31613 00005785 EB13                    	JMP	SHORT GOTGETBUF
 31614                                  
 31615                                  GETFREEBUF:
 31616 00005787 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 31617 00005788 55                      	PUSH	BP
 31618                                  	; MSDOS 3.3
 31619                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 31620                                  	; MSDOS 6.0
 31621 00005789 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 31622                                  ;hkn; SS override
 31623 0000578B 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 31624 00005790 E87400                  	call	GETCURHEAD		;LB.			  ;AN000;
 31625                                  	; MSDOS 3.3 & MSDOS 6.0
 31626 00005793 E84F02                  	call	BUFWRITE
 31627 00005796 5D                      	POP	BP
 31628 00005797 07                      	POP	ES
 31629                                  	;JC	short FAIL_OPJ
 31630 00005798 728A                    	jc	short FAIL_OP
 31631                                  GOTGETBUF:
 31632                                  	;;add	di,16
 31633                                  	;add	di,20 ; MSDOS 6.0
 31634 0000579A 83C714                  	ADD	DI,BUFINSIZ
 31635                                  
 31636                                  ;hkn; SS override
 31637 0000579D 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 31638                                  	;Context DS			;hkn; SS is DOSDATA
 31639 000057A2 16                      	push	ss
 31640 000057A3 1F                      	pop	ds
 31641 000057A4 893E[6803]              	MOV	[CALLXAD],DI
 31642                                  	;mov	al,16h
 31643 000057A8 B016                    	MOV	AL,DBPBHL
 31644                                  	;mov	ah,[es:bp+1]
 31645 000057AA 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 31646 000057AE A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 31647 000057B1 C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 31648 000057B6 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31649                                  	;;mov	al,[es:bp+16h]
 31650                                  	;mov	al,[es:bp+17h]
 31651 000057BC 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31652 000057C0 A2[6703]                	MOV	[CALLMED],AL
 31653 000057C3 06                      	PUSH	ES ; **
 31654 000057C4 1E                      	PUSH	DS ; *
 31655                                  	;;
 31656                                  ; 03/01/2023
 31657                                  %if 0
 31658                                  	;;push	word [es:bp+14h]
 31659                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 31660                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 31661                                  	;;push	word [es:bp+12h]
 31662                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 31663                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 31664                                  
 31665                                  ;hkn; DEVCALL is in DOSDATA
 31666                                  	MOV	BX,DEVCALL
 31667                                  	POP	SI
 31668                                  	POP	DS			; DS:SI Points to device header
 31669                                  %endif
 31670                                  	; 03/01/2024
 31671 000057C5 BB[5A03]                	mov	bx,DEVCALL
 31672                                  	;lds	si,[es:bp+13h]
 31673 000057C8 26C57613                	lds	si,[es:bp+DPB.DRIVER_ADDR]
 31674                                  					; DS:SI Points to device header
 31675                                  	;;
 31676 000057CC 07                      	POP	ES ; *			; ES:BX Points to call header
 31677                                  	;invoke	DEVIOCALL2
 31678 000057CD E8C0ED                  	call	DEVIOCALL2
 31679 000057D0 07                      	POP	ES ; **			; Restore ES:BP
 31680                                  	;Context DS
 31681 000057D1 16                      	push	ss		 	;hkn; SS is DOSDATA
 31682 000057D2 1F                      	pop	ds
 31683 000057D3 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31684                                  	; MSDOS 3.3
 31685                                  	;test	di,8000h
 31686                                  	;jnz	short FATERRJ
 31687                                  	; MSDOS 6.0
 31688 000057D7 09FF                    	or	di,di
 31689 000057D9 7829                    	js	short FATERRJ 		; have error
 31690                                  	;;mov	al,[es:bp+16h]
 31691                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 31692 000057DB 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31693 000057DF C536[6C03]              	LDS	SI,[CALLBPB]
 31694                                  	;;mov	word [es:bp+1Ch],0
 31695                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 31696 000057E3 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 31697                                  	;invoke	$SETDPB
 31698 000057E9 E8CFB7                  	call	_$SETDPB
 31699                                  
 31700                                  ;hkn; SS override
 31701 000057EC 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 31702                                  	;mov	al,[es:bp+8]
 31703 000057F1 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 31704                                  
 31705                                  	; MSDOS 3.3
 31706                                  	;;mov	ah,[es:bp+0Fh]
 31707                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31708                                  	;;mov	[DI-8],ax
 31709                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 31710                                  
 31711                                  	; MSDOS 6.0
 31712                                  	;mov	[di-0Ah],al
 31713 000057F5 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 31714                                  						;>32mb		  ;AN000;
 31715                                  	;mov	ax,[es:bp+0Fh]
 31716 000057F8 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 31717                                  	;mov	[di-9h],ax			  ;AC000;
 31718 000057FC 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 31719                                  					;>32mb Correct buffer info ;AC000;
 31720                                  	;Context DS			;hkn; SS is DOSDATA
 31721 000057FF 16                      	push	ss
 31722 00005800 1F                      	pop	ds
 31723 00005801 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 31724 00005803 C3                      	retn
 31725                                  
 31726                                  FATERRJ: 
 31727 00005804 E954FE                  	JMP	FATERR
 31728                                  
 31729                                  ;============================================================================
 31730                                  ; STDBUF.ASM
 31731                                  ;============================================================================
 31732                                  ; Retro DOS v2.0 - 12/03/2018
 31733                                  
 31734                                  ;
 31735                                  ; Standard buffer management for MSDOS
 31736                                  ;
 31737                                  
 31738                                  ;.xlist
 31739                                  ;.xcref
 31740                                  ;INCLUDE STDSW.ASM
 31741                                  ;.cref
 31742                                  ;.list
 31743                                  
 31744                                  ;TITLE	STDBUF - MSDOS buffer management
 31745                                  ;NAME	STDBUF
 31746                                  
 31747                                  ;INCLUDE BUF.ASM
 31748                                  
 31749                                  ;============================================================================
 31750                                  ; BUF.ASM
 31751                                  ;============================================================================
 31752                                  ; 31/07/2018 - Retro DOS v3.0
 31753                                  ; Retro DOS v2.0 - 12/03/2018
 31754                                  ;
 31755                                  ; buffer management for MSDOS
 31756                                  ;
 31757                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 31758                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 31759                                  ;
 31760                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 31761                                  ;
 31762                                  ;SETVISIT:
 31763                                  ;	; 31/07/2018 - Retro DOS v3.0
 31764                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 31765                                  ;; Inputs:
 31766                                  ;;      None
 31767                                  ;; Function:
 31768                                  ;;      Set up a scan of I/O buffers
 31769                                  ;; Outputs:
 31770                                  ;;      All visit flags = 0
 31771                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 31772                                  ;;                    may cause a scan to stop in the middle leaving some
 31773                                  ;;                    visit flags set, and some not set.
 31774                                  ;;      DS:DI Points to [BUFFHEAD]
 31775                                  ;; No other registers altered
 31776                                  ;
 31777                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 31778                                  ;	PUSH    AX
 31779                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 31780                                  ;	;mov	al,0DFh
 31781                                  ;	mov	al,~buf_visit
 31782                                  ;SETLOOP:
 31783                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 31784                                  ;	;and	[DI+5],al
 31785                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 31786                                  ;       LDS     DI,[DI]
 31787                                  ;       CMP     DI,-1
 31788                                  ;       JNZ     SHORT SETLOOP
 31789                                  ;       POP     AX ; 09/09/2018
 31790                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 31791                                  ;SVISIT_RETN:
 31792                                  ;       RETN
 31793                                  ;
 31794                                  ;SKIPVISIT:
 31795                                  ;	; 31/07/2018 - Retro DOS v3.0
 31796                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 31797                                  ;
 31798                                  ;; Inputs:
 31799                                  ;;      DS:DI Points to a buffer
 31800                                  ;; Function:
 31801                                  ;;      Skip visited buffers
 31802                                  ;; Outputs:
 31803                                  ;;      DS:DI Points to next unvisited buffer
 31804                                  ;;      Zero is set if skip to LAST buffer
 31805                                  ;; No other registers altered
 31806                                  ;
 31807                                  ;       CMP     DI,-1
 31808                                  ;       ;retz
 31809                                  ;       JZ	SHORT SVISIT_RETN
 31810                                  ;
 31811                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 31812                                  ;       ;;;retnz
 31813                                  ;       ;;JNZ	SHORT SVISIT_RETN
 31814                                  ;
 31815                                  ;	;test	byte [di+5],20h
 31816                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 31817                                  ;	JNZ	short SKIPLOOP
 31818                                  ;	
 31819                                  ;	push	ax
 31820                                  ;	or	al,1
 31821                                  ;	pop	ax
 31822                                  ;	retn	
 31823                                  ;
 31824                                  ;SKIPLOOP:
 31825                                  ;	LDS     DI,[DI]
 31826                                  ;       JMP     SHORT SKIPVISIT
 31827                                  
 31828                                  ;============================================================================
 31829                                  ; BUF.ASM, MSDOS 6.0, 1991
 31830                                  ;============================================================================
 31831                                  ; 31/07/2018 - Retro DOS v3.0
 31832                                  ; 04/05/2019 - Retro DOS v4.0
 31833                                  
 31834                                  ;	TITLE	BUF - MSDOS buffer management
 31835                                  ;	NAME	BUF
 31836                                  
 31837                                  ;**	BUF.ASM - Low level routines for buffer cache management
 31838                                  ;
 31839                                  ;	GETCURHEAD
 31840                                  ;	ScanPlace
 31841                                  ;	PLACEBUF
 31842                                  ;	PLACEHEAD
 31843                                  ;	PointComp
 31844                                  ;	GETBUFFR
 31845                                  ;	GETBUFFRB
 31846                                  ;	FlushBuf
 31847                                  ;	BufWrite
 31848                                  ;	SET_RQ_SC_PARMS
 31849                                  ;
 31850                                  ;	Revision history:
 31851                                  ;
 31852                                  ;		AN000  version 4.00  Jan. 1988
 31853                                  ;		A004   PTM 3765 -- Disk reset failed
 31854                                  ;		M039 DB 10/17/90 - Disk write optimization
 31855                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 31856                                  
 31857                                  ;Break	<GETCURHEAD -- Get current buffer header>
 31858                                  ;----------------------------------------------------------------------------
 31859                                  ; Procedure Name : GetCurHead
 31860                                  ; Inputs:
 31861                                  ;	 No Inputs
 31862                                  ; Function:
 31863                                  ;	Returns the pointer to the first buffer in Queue
 31864                                  ;	and updates FIRST_BUFF_ADDR
 31865                                  ;       and invalidates LASTBUFFER (recency pointer)
 31866                                  ; Outputs:
 31867                                  ;	DS:DI = pointer to the first buffer in Queue
 31868                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 31869                                  ;       LASTBUFFER = -1
 31870                                  ; No other registers altered
 31871                                  ;----------------------------------------------------------------------------
 31872                                  
 31873                                  ; 04/05/2019 - Retro DOS v4.0
 31874                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 31875                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31876                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 31877                                  
 31878                                  GETCURHEAD:
 31879 00005807 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 31880 0000580C 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 31881 00005813 36893E[BB0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 31882 00005818 C3                      	retn
 31883                                  
 31884                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 31885                                  ;----------------------------------------------------------------------------
 31886                                  ; Procedure Name : ScanPlace
 31887                                  ; Inputs:
 31888                                  ;	Same as PLACEBUF
 31889                                  ; Function:
 31890                                  ;	Save scan location and call PLACEBUF
 31891                                  ; Outputs:
 31892                                  ;	DS:DI Points to saved scan location
 31893                                  ; All registers, except DS:DI, preserved.
 31894                                  ;----------------------------------------------------------------------------
 31895                                  ;M039: Rewritten to preserve registers.
 31896                                  
 31897                                  ;SCANPLACE:
 31898                                  ;	; 31/07/2018 - Retro DOS v3.0
 31899                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31900                                  ;	push	es
 31901                                  ;	les	si,[di]
 31902                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 31903                                  ;	call	PLACEBUF
 31904                                  ;	push	es
 31905                                  ;	pop	ds
 31906                                  ;	mov	di,si
 31907                                  ;	pop	es
 31908                                  ;scanplace_retn:
 31909                                  ;	retn	
 31910                                  	
 31911                                  	; MSDOS 6.0
 31912                                  SCANPLACE:
 31913 00005819 FF35                    	push	word [di]
 31914                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 31915 0000581B E80200                  	call	PLACEBUF
 31916 0000581E 5F                      	pop	di
 31917 0000581F C3                      	retn
 31918                                  
 31919                                  ;----------------------------------------------------------------------------
 31920                                  ; Procedure Name : PlaceBuf
 31921                                  ; Input:
 31922                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 31923                                  ; Function:
 31924                                  ;	Remove buffer from queue and re-insert it in proper place.
 31925                                  ; NO registers altered
 31926                                  ;----------------------------------------------------------------------------
 31927                                  
 31928                                  ;procedure PLACEBUF,NEAR
 31929                                  
 31930                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31931                                  	; 20/05/2019 - Retro DOS v4.0
 31932                                  PLACEBUF:
 31933                                  	; 31/07/2018 - Retro DOS v3.0
 31934                                  
 31935                                  	; MSDOS 6.0
 31936 00005820 50                      	push	AX			;Save only regs we modify	;AN000;
 31937 00005821 53                      	push	BX							;AN000;
 31938                                  	; 23/09/2023
 31939                                  	;push	SI							;AN000;
 31940                                  	
 31941 00005822 8B05                    	mov	ax,[di]
 31942                                  	;mov	ax,[di+BUFFINFO.buf_next]
 31943 00005824 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 31944                                  	
 31945 00005829 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 31946 0000582B 7422                    	je	short nret			;Yes, special case	;AN000;
 31947 0000582D 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 31948 0000582F 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 31949 00005831 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 31950 00005835 EB18                    	jmp	short nret 			;Continue with repositioning;AN000;
 31951                                  not_first:
 31952                                  	; 23/09/2023
 31953 00005837 56                      	push	si
 31954                                  	;mov	si,[di+2]
 31955 00005838 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 31956 0000583B 8904                    	mov	[si],ax
 31957                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 31958 0000583D 96                      	xchg	si,ax
 31959                                  	;mov	[si+2],ax
 31960 0000583E 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 31961                                  	
 31962 00005841 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 31963 00005844 893C                    	mov	[si],di
 31964                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 31965 00005846 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 31966 00005849 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 31967 0000584C 891D                    	mov	[di],bx
 31968                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 31969                                  	; 23/09/2023
 31970 0000584E 5E                      	pop	si
 31971                                  nret:	
 31972                                  	; 23/09/2023							;AN000;
 31973                                  	;pop	SI							;AN000;
 31974 0000584F 5B                      	pop	BX							;AN000;
 31975 00005850 58                      	pop	AX							;AN000;
 31976                                  									;AN000;
 31977                                  	;cmp	byte [di+4],0FFh
 31978 00005851 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 31979 00005855 7505                            jne	short pbx			; M039: -no, jump.
 31980 00005857 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 31981                                  pbx:	
 31982 0000585C C3                      	retn								;AN000;
 31983                                  
 31984                                  	; 31/07/2018 - Retro DOS v3.0
 31985                                  
 31986                                  	; MSDOS 3.3
 31987                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31988                                  
 31989                                  ;PLACEBUF:
 31990                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31991                                  ;	
 31992                                  ;       CALL	save_world
 31993                                  ;       LES     CX,[DI]
 31994                                  ;       CMP     CX,-1           	; Buf is LAST?
 31995                                  ;       JZ      SHORT NRET		; Buffer already last
 31996                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 31997                                  ;       PUSH    DS
 31998                                  ;       POP     ES              	; Buf is ES:DI
 31999                                  ;	; 15/03/2018
 32000                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 32001                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 32002                                  ;       JNZ     SHORT BUFLOOP
 32003                                  ;       MOV     [SS:BUFFHEAD],CX
 32004                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 32005                                  ;       JMP     SHORT LOOKEND
 32006                                  ;BUFLOOP:
 32007                                  ;	; 31/07/2018
 32008                                  ;	mov	ax,ds
 32009                                  ;	mov	bx,si
 32010                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 32011                                  ;       LDS     SI,[SI]
 32012                                  ;       CALL    POINTCOMP
 32013                                  ;       jnz	short BUFLOOP
 32014                                  ;	;
 32015                                  ;	mov	ds,ax
 32016                                  ;	mov	si,bx
 32017                                  ;	mov	[SI],cx
 32018                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 32019                                  ;	mov	[SI+2],bp
 32020                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 32021                                  ;LOOKEND:
 32022                                  ;	mov	ax,ds
 32023                                  ;	mov	bx,si
 32024                                  ;       LDS     SI,[SI]
 32025                                  ;       CMP     SI,-1
 32026                                  ;       jnz     short LOOKEND
 32027                                  ;GOTHEEND:
 32028                                  ;       mov	ds,ax
 32029                                  ;	mov	[BX],di
 32030                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 32031                                  ;       MOV     WORD [ES:DI],-1
 32032                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 32033                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 32034                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 32035                                  ;NRET:
 32036                                  ;       CALL	restore_world
 32037                                  ;	
 32038                                  ;	;cmp	byte [di+4],-1
 32039                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 32040                                  ;	jnz     short scanplace_retn
 32041                                  ;	call    PLACEHEAD
 32042                                  ;	retn
 32043                                  
 32044                                  ;EndProc PLACEBUF
 32045                                  
 32046                                  ;M039 - Removed PLACEHEAD.
 32047                                  ;----------------------------------------------------------------------------
 32048                                  ; places buffer at head
 32049                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 32050                                  ;	ONE IN THE LIST!!!!!!!
 32051                                  ; BUGBUG ---- this routine can be removed because it has only
 32052                                  ; BUGBUG ---- one instruction. This routine is called from
 32053                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 32054                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 32055                                  ; BUGBUG ---- But kept as it is for modularity
 32056                                  ;----------------------------------------------------------------------------
 32057                                  ;procedure   PLACEHEAD,NEAR
 32058                                  ;	mov	word ptr [BufferQueue], di
 32059                                  ;	ret
 32060                                  ;EndProc PLACEHEAD
 32061                                  ;M039
 32062                                  
 32063                                  ;----------------------------------------------------------------------------
 32064                                  ; Procedure Name : PLACEHEAD
 32065                                  ;
 32066                                  ; SAME AS PLACEBUF except places buffer at head
 32067                                  ;----------------------------------------------------------------------------
 32068                                  
 32069                                  	; MSDOS 3.3 (Retro DOS v3.0)
 32070                                  	; 05/09/2018
 32071                                  	; MSDOS 2.11 (Retro DOS v2.0)
 32072                                  ;PLACEHEAD:
 32073                                  ;	; 31/07/2018 - Retro DOS v3.0
 32074                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 32075                                  ;
 32076                                  ;       CALL	save_world
 32077                                  ;       PUSH	DS
 32078                                  ;       POP	ES
 32079                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 32080                                  ;       LDS     SI,[SS:BUFFHEAD]
 32081                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 32082                                  ;	CALL    POINTCOMP
 32083                                  ;       JZ      SHORT GOTHEEND2
 32084                                  ;	MOV	[ES:DI],SI
 32085                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 32086                                  ;       MOV	[ES:DI+2],DS
 32087                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 32088                                  ;       MOV	[SS:BUFFHEAD],DI
 32089                                  ;       MOV	[SS:BUFFHEAD+2],ES
 32090                                  ;LOOKEND2:
 32091                                  ;       mov	ax,ds
 32092                                  ;	mov	bx,si
 32093                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 32094                                  ;       LDS     SI,[SI]
 32095                                  ;       CALL    POINTCOMP
 32096                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 32097                                  ;       mov	ds,ax
 32098                                  ;	mov	word [bx],-1
 32099                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 32100                                  ;	mov	word [bx+2],-1
 32101                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 32102                                  ;GOTHEEND2:
 32103                                  ;      	call	restore_world
 32104                                  ;placehead_retn:
 32105                                  ;	retn
 32106                                  
 32107                                  ; 20/05/2019 - Retro DOS v4.0
 32108                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 32109                                  
 32110                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 32111                                  ;----------------------------------------------------------------------------
 32112                                  ;
 32113                                  ; Procedure Name : PointComp
 32114                                  ; Inputs:
 32115                                  ;         DS:SI & ES:DI
 32116                                  ; Function:
 32117                                  ;          Checks for ((SI==DI) && (ES==DS))
 32118                                  ;	   Assumes that pointers are normalized for the
 32119                                  ;	   same segment
 32120                                  ;
 32121                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 32122                                  ; DO NOT USE FOR < or >
 32123                                  ; No Registers altered
 32124                                  ;
 32125                                  ;----------------------------------------------------------------------------
 32126                                  
 32127                                  POINTCOMP:
 32128                                  	; 31/07/2018 - Retro DOS v3.0
 32129                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 32130 0000585D 39FE                    	CMP	SI,DI
 32131 0000585F 750A                    	jnz	short _ret_label	; return if nz
 32132                                  	;jnz	short placehead_retn 
 32133 00005861 51                      	PUSH	CX
 32134 00005862 52                      	PUSH	DX
 32135 00005863 8CD9                    	MOV	CX,DS
 32136 00005865 8CC2                    	MOV	DX,ES
 32137 00005867 39D1                    	CMP	CX,DX
 32138 00005869 5A                      	POP	DX
 32139 0000586A 59                      	POP	CX
 32140                                  _ret_label:
 32141 0000586B C3                      	retn
 32142                                  
 32143                                  ; 01/08/2018 - Retro DOS v3.0
 32144                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 32145                                  
 32146                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 32147                                  
 32148                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 32149                                  ;----------------------------------------------------------------------------
 32150                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 32151                                  ;	It gets the specified local sector into one of the I/O buffers
 32152                                  ;	and shuffles the queue
 32153                                  ; 
 32154                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32155                                  ;		       ELSE no pre-read
 32156                                  ;		(DX) = Desired physical sector number	      (LOW)
 32157                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32158                                  ;		(ES:BP) = Pointer to drive parameters
 32159                                  ;		ALLOWED set in case of INT 24
 32160                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32161                                  ;		'C' clear if OK
 32162                                  ;		CURBUF Points to the Buffer for the sector
 32163                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32164                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32165                                  ;----------------------------------------------------------------------------
 32166                                  
 32167                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 32168                                  ;----------------------------------------------------------------------------
 32169                                  ;	GetBuffrb reads a sector from the FAT file system's FAT table.
 32170                                  ;	It gets the specified sector into one of the I/O buffers
 32171                                  ;	and shuffles the queue. We need a special entry point so that
 32172                                  ;	we can read the alternate FAT sector if the first read fails, also
 32173                                  ;	so we can mark the buffer as a FAT sector.
 32174                                  ; 
 32175                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32176                                  ;		       ELSE no pre-read
 32177                                  ;		(DX) = Desired physical sector number	     (LOW)
 32178                                  ;		(SI) != 0
 32179                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32180                                  ;		(ES:BP) = Pointer to drive parameters
 32181                                  ;		ALLOWED set in case of INT 24
 32182                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32183                                  ;		'C' clear if OK
 32184                                  ;		CUR ddBUF Points to the Buffer for the sector
 32185                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32186                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32187                                  ;----------------------------------------------------------------------------
 32188                                  
 32189                                  	; 22/09/2023 - RetroDOS v4.1 MSDOS.SYS (optimization)
 32190                                  GETBUFFRC:
 32191 0000586C C706[0706]0000          	mov	word [HIGH_SECTOR],0
 32192                                  GETBUFFRA:
 32193 00005872 30C0                    	xor	al,al
 32194 00005874 BE0100                  	mov	si,1
 32195 00005877 EB09                    	jmp	short GETBUFFRB
 32196                                  
 32197                                  	; 22/09/2023
 32198                                  GETBUFFER:
 32199 00005879 30C0                    	xor	al,al
 32200                                  GETBUFFRD:
 32201                                  	;mov	byte [ALLOWED],18h
 32202 0000587B C606[4B03]18            	mov	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 32203                                  
 32204                                  	; 20/05/2019 - Retro DOS v4.0
 32205                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 32206                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32207                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 32208                                  GETBUFFR:
 32209 00005880 31F6                    	XOR	SI,SI
 32210                                  
 32211                                  ;	This entry point is called for FAT buffering with SI != 0
 32212                                  
 32213                                  GETBUFFRB:
 32214 00005882 A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 32215                                  	; 15/12/2022
 32216 00005885 268A4600                	mov	al,[ES:BP]
 32217                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32218                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 32219 00005889 C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 32220                                  	; MSDOS 6.0
 32221                                  ;hkn; SS override
 32222 0000588D 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb	;AN000;
 32223                                  
 32224                                  ;	See if this is the buffer that was most recently returned.
 32225                                  ;	A big performance win if it is.
 32226                                  
 32227 00005892 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 32228 00005895 7412                    	je	short getb5			; No
 32229                                  	;cmp	dx,[di+6]
 32230 00005897 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32231 0000589A 750D                    	JNZ	short getb5			; Wrong sector
 32232                                  	
 32233                                  	; MSDOS 6.0
 32234                                  	;cmp	cx,[di+8]
 32235 0000589C 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb	;AN000;
 32236 0000589F 7508                    	JNZ	short getb5			; F.C. >32mb	;AN000;
 32237                                  	
 32238                                  	;cmp	al,[di+4]
 32239 000058A1 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32240                                  	;JZ	getb35				; Just asked for same buffer
 32241 000058A4 7503                    	jnz	short getb5
 32242                                  	;jmp	getb35
 32243                                  	; 17/12/2022
 32244                                  	; 28/07/2019
 32245 000058A6 E9C700                  	jmp	getb35x
 32246                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32247                                  	;jmp	getb35
 32248                                  
 32249                                  ;	It's not the buffer most recently returned. See if it's in the
 32250                                  ;	cache.
 32251                                  ;
 32252                                  ;	(cx:dx) = sector #
 32253                                  ;	(al) = drive #
 32254                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32255                                  ;	??? list may be incomplete ???
 32256                                  
 32257                                  getb5:	
 32258                                  	; MSDOS 3.3
 32259                                  	;lds	di,[SS:BUFFHEAD]
 32260                                  	; MSDOS 6.0
 32261 000058A9 E85BFF                  	CALL	GETCURHEAD			; get Q Head
 32262                                  getb10:	
 32263                                  	;cmp	dx,[di+6]
 32264 000058AC 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32265 000058AF 750D                    	jne	short getb12			; wrong sector lo
 32266                                  	
 32267                                  	; MSDOS 6.0
 32268                                  	;cmp	cx,[di+8]
 32269 000058B1 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 32270 000058B4 7508                    	jne	short getb12			; wrong sector hi
 32271                                  	
 32272                                  	;cmp	al,[di+4]
 32273 000058B6 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32274                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 32275 000058B9 7503                    	jne	short getb12
 32276 000058BB E98C00                  	jmp	getb25
 32277                                  getb12:	
 32278                                  	; MSDOS 3.3
 32279                                  	;;mov	di,[DI]
 32280                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 32281                                  	;
 32282                                  	; 15/08/2018
 32283                                  	;lds	di,[di]
 32284                                  
 32285                                  	;cmp	di,-1 ; 0FFFFh
 32286                                  	;jne	short getb10
 32287                                  	;lds	di,[SS:BUFFHEAD]
 32288                                  
 32289                                  	; MSDOS 6.0
 32290 000058BE 8B3D                    	mov	di,[di]
 32291                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 32292 000058C0 363B3E[BB0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 32293 000058C5 75E5                    	jne	short getb10			; no, continue looking
 32294                                  
 32295                                  ;	The requested sector is not available in the buffers. DS:DI now points
 32296                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 32297                                  ;	new sector into it.
 32298                                  ;
 32299                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 32300                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 32301                                  ;	him, we should take LRU. And the above lookup shouldn't be
 32302                                  ;	down a chain, but should be hashed.
 32303                                  ;
 32304                                  ;	(DS:DI) = first buffer in the queue
 32305                                  ;	(CX:DX) = sector # we want
 32306                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32307                                  
 32308                                  	; MSDOS 3.3 & MSDOS 6.0
 32309                                  ;hkn; SS override
 32310 000058C7 51                      	PUSH	CX  ; MSDOS 6.0
 32311 000058C8 56                      	push	si
 32312 000058C9 52                      	push	dx
 32313 000058CA 55                      	push	bp
 32314 000058CB 06                      	push	es
 32315 000058CC E81601                  	CALL	BUFWRITE			; Write out the dirty buffer
 32316 000058CF 07                      	pop	es
 32317 000058D0 5D                      	pop	bp
 32318 000058D1 5A                      	pop	dx
 32319 000058D2 5E                      	pop	si
 32320 000058D3 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 32321                                  	;jc	short getbx			; if got hard error
 32322 000058D8 7303                    	jnc	short getb13
 32323 000058DA E99D00                  	jmp	getbx
 32324                                  
 32325                                  getb13:
 32326                                  	; MSDOS 6.0
 32327 000058DD E88F01                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 32328                                  
 32329                                  ;	We're ready to read in the buffer, if need be. If the caller
 32330                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 32331                                  
 32332 000058E0 30E4                    	XOR	AH,AH				; initial flags
 32333                                  ;hkn; SS override
 32334                                  	;test	byte [ss:PREREAD],0FFh
 32335                                  	;jnz	short getb20
 32336 000058E2 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 32337 000058E7 7549                    	JNZ	short getb20			; no, we're done
 32338                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 32339                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32340 000058E9 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 32341                                  	;MOV	CX,1
 32342                                  	; 22/09/2023
 32343 000058EC 29C9                    	sub	cx,cx ; 0
 32344 000058EE 56                      	push	si
 32345 000058EF 57                      	push	di
 32346 000058F0 52                      	push	dx
 32347                                  	; MSDOS 6.0
 32348 000058F1 06                      	push	es ; ***
 32349                                  
 32350                                  ; Note: As far as I can tell, all disk reads into buffers go through
 32351                                  ;	this point. -mrw 10/88
 32352                                  	
 32353                                  	;cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 32354                                  	; 22/09/2023
 32355 000058F2 36380E[7900]            	cmp	[ss:BuffInHMA],cl ; 0
 32356 000058F7 7407                    	jz	short getb14
 32357 000058F9 1E                      	push	ds ; **
 32358 000058FA 53                      	push	bx ; *
 32359 000058FB 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 32360                                  getb14:
 32361                                  ;M039: Eliminated redundant HMA code.
 32362                                  
 32363                                  	; 22/09/2023
 32364 00005900 41                      	inc	cx ; cx = 1
 32365                                  
 32366                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32367 00005901 09F6                    	OR	SI,SI			; FAT sector ?
 32368 00005903 7407                    	JZ	short getb15		
 32369                                  
 32370 00005905 E81BDD                  	call	FATSECRD
 32371                                  	;mov	ah,2
 32372 00005908 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 32373                                  
 32374 0000590A EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 32375                                  
 32376                                  getb15:
 32377 0000590C E840DD                  	call	DREAD			; Buffer is marked free if read barfs
 32378 0000590F B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 32379                                  getb17:
 32380                                  	; 17/12/2022	
 32381                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32382                                  ;%if 0
 32383                                  	; MSDOS 6.0							  ;I001
 32384 00005911 9C                      	pushf								  ;I001
 32385 00005912 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 32386 00005918 7411                    	jz	short not_in_hma	; no				  ;I001
 32387                                  	;mov	cx,[es:bp+2]
 32388 0000591A 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 32389 0000591E D1E9                    	shr	cx,1							  ;I001
 32390 00005920 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 32391 00005921 89DE                    	mov	si,bx							  ;I001
 32392 00005923 5F                      	pop	di ; *							  ;I001
 32393 00005924 07                      	pop	es ; **							  ;I001
 32394 00005925 FC                      	cld								  ;I001
 32395 00005926 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 32396 00005927 F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 32397 00005929 06                      	push	es							  ;I001
 32398 0000592A 1F                      	pop	ds							  ;I001
 32399                                  ;%endif
 32400                                  
 32401                                  ; 17/12/2022
 32402                                  %if 0
 32403                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32404                                  	; MSDOS 5.0
 32405                                  	pushf
 32406                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 32407                                  	jz	short not_in_hma	; no
 32408                                  	popf
 32409                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 32410                                  	shr	cx,1
 32411                                  	mov	si,bx
 32412                                  	pop	di ; *
 32413                                  	pop	es ; **
 32414                                  	cld
 32415                                  	rep	movsw
 32416                                  	push	es
 32417                                  	pop	ds
 32418                                  	jmp	short getb19 ; 27/11/2022
 32419                                  %endif
 32420                                  
 32421                                  not_in_hma:								  ;I001
 32422 0000592B 9D                      	popf							 	  ;I001
 32423                                  getb19:
 32424 0000592C 07                      	pop	es ; ***
 32425 0000592D 5A                      	pop	dx
 32426 0000592E 5F                      	pop	di
 32427 0000592F 5E                      	pop	si
 32428 00005930 7248                    	JC	short getbx
 32429                                  
 32430                                  ;	The buffer has the data setup in it (if we were to read)
 32431                                  ;	Setup the various buffer fields
 32432                                  ;
 32433                                  ;	(ds:di) = buffer address
 32434                                  ;	(es:bp) = DPB address
 32435                                  ;	(HIGH_SECTOR:DX) = sector #
 32436                                  ;	(ah) = BUF_FLAGS value
 32437                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 32438                                  
 32439                                  ;hkn; SS override
 32440                                  getb20:	; MSDOS 6.0
 32441 00005932 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 32442                                  	;mov	[di+8],cx
 32443 00005937 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 32444                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 32445                                   	;mov	[di+6],dx
 32446 0000593A 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 32447                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 32448                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 32449 0000593D 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 32450                                  	;;mov	[di+0Ch],es
 32451                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 32452 00005940 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 32453                                  	; 15/12/2022
 32454 00005943 268A4600                	mov	al,[es:bp]
 32455                                  	;mov	al,[es:bp+0]
 32456                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 32457                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 32458                                  	;mov	[di+4],ax
 32459 00005947 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 32460                                  getb25:	
 32461                                  	; MSDOS 3.3
 32462                                  	;mov     ax,1
 32463                                  
 32464                                  	; MSDOS 6.0
 32465                                  	;mov	byte [di+0Ah],1
 32466 0000594A C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 32467 0000594E 31C0                    	XOR	AX,AX
 32468                                  
 32469                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32470 00005950 09F6                    	OR	SI,SI				; FAT sector ?
 32471 00005952 740B                    	JZ	short getb30
 32472                                  
 32473                                  	;mov	al,[es:bp+8]
 32474 00005954 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 32475                                  	
 32476                                  	; MSDOS 6.0
 32477 00005958 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 32478                                  	;mov	ax,[es:bp+0Fh]
 32479 0000595B 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 32480                                  						;  sectors
 32481                                  	; MSDOS 3.3
 32482                                  	;;mov	ah,[es:bp+0Fh]
 32483                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 32484                                  
 32485                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 32486                                  ;		is set
 32487                                  
 32488                                  getb30:	
 32489                                  	; MSDOS 6.0
 32490                                  	;mov	[di+0Bh],ax
 32491 0000595F 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 32492                                  
 32493                                  	; MSDOS 3.3
 32494                                  	;;mov	[di+8],ax ; 15/08/2018	
 32495                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 32496                                  
 32497 00005962 E8BBFE                  	CALL	PLACEBUF
 32498                                  
 32499                                  ;hkn; SS override for next 4
 32500                                  getb35: 
 32501                                  	; 17/12/2022
 32502                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32503                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 32504                                  	;MOV	[SS:CURBUF+2],DS
 32505                                  	;MOV	[SS:LastBuffer+2],DS
 32506                                  	;MOV	[SS:CURBUF],DI
 32507                                  	;MOV	[SS:LastBuffer],DI
 32508                                  	;CLC
 32509                                  
 32510                                  	; 17/12/2022
 32511                                  	; 07/12/2022
 32512                                  	; Retro DOS v4.0
 32513 00005965 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 32514 0000596A 36893E[1E00]            	mov	[ss:LastBuffer],di
 32515 0000596F F8                      	clc
 32516                                  getb35x: ; 28/07/2019
 32517 00005970 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 32518 00005975 36893E[E205]            	MOV	[ss:CURBUF],di
 32519                                  
 32520                                  ;	Return with 'C' set appropriately
 32521                                  ;	(dx) = caller's original value
 32522                                  
 32523                                  getbx:	
 32524 0000597A 16                      	push	ss
 32525 0000597B 1F                      	pop	ds
 32526                                  	;retn
 32527                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32528                                  getbuffrb_retn:
 32529                                  ;flushbuf_retn:	; 17/12/2022
 32530 0000597C C3                      	retn
 32531                                  
 32532                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 32533                                  ;----------------------------------------------------------------------------
 32534                                  ; Input:
 32535                                  ;	DS = DOSGROUP
 32536                                  ;	AL = Physical unit number local buffers only
 32537                                  ;	   = -1 for all units and all remote buffers
 32538                                  ; Function:
 32539                                  ;	Write out all dirty buffers for unit, and flag them as clean
 32540                                  ;	Carry set if error (user FAILed to I 24)
 32541                                  ;	    Flush operation completed.
 32542                                  ; DS Preserved, all others destroyed (ES too)
 32543                                  ;----------------------------------------------------------------------------
 32544                                  
 32545                                  	; 20/05/2019 - Retro DOS v4.0
 32546                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 32547                                  
 32548                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32549                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 32550                                  FLUSHBUF:
 32551                                  	; MSDOS 3.3
 32552                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 32553                                  	;lds	di,[BUFFHEAD]
 32554                                  
 32555                                  	; MSDOS 6.0
 32556 0000597D E887FE                  	call	GETCURHEAD
 32557                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32558 00005980 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32559 00005986 7508                    	jnz	short scan_buf_queue
 32560 00005988 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 32561 0000598E 7423                    	je	short end_scan
 32562                                  	
 32563                                  scan_buf_queue:
 32564 00005990 E82900                  	call	CHECKFLUSH
 32565                                  	;push	ax  ; MSDOS 3.3
 32566                                  	; MSDOS 6.0
 32567                                  	;mov	ah,[di+4]
 32568 00005993 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 32569 00005996 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 32570 0000599B 7408                    	je	short free_the_buf
 32571                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32572 0000599D 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32573 000059A3 7405                    	jz	short dont_free_the_buf
 32574                                  	; MSDOS 3.3
 32575                                  	;;mov	al,[di+4]
 32576                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 32577                                  	;cmp	[SS:WPERR],al					;hkn;
 32578                                  	; 15/08/2018
 32579                                  	;jne	short dont_free_the_buf	
 32580                                  free_the_buf:
 32581                                  	; MSDOS 6.0 (& MSDOS 3.3)
 32582 000059A5 C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 32583                                  dont_free_the_buf:
 32584                                  	;pop	ax  ; MSDOS 3.3 	   	
 32585                                  
 32586                                  	; MSDOS 3.3
 32587                                  	;mov	di,[DI]
 32588                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 32589                                  	;
 32590                                  	; 15/08/2018
 32591                                  	;lds	di,[di]
 32592                                  	;
 32593                                  	;cmp	di,-1 ; 0FFFFh
 32594                                  	;jnz	short scan_buf_queue 
 32595                                  	
 32596                                  	; MSDOS 6.0
 32597 000059AA 8B3D                    	mov	di,[di]
 32598                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 32599 000059AC 363B3E[BB0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 32600 000059B1 75DD                    	jne	short scan_buf_queue
 32601                                  
 32602                                  end_scan:
 32603 000059B3 16                      	push	ss
 32604 000059B4 1F                      	pop	ds
 32605                                  	; 01/08/2018 - Retro DOS v3.0
 32606                                  	;cmp	byte [FAILERR],0
 32607                                  	;jne	short bad_flush
 32608                                  	;retn
 32609                                  ;bad_flush:
 32610                                  	;stc
 32611                                  	;retn
 32612                                  
 32613                                  	; 17/12/2022
 32614                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32615                                  	; 01/08/2018 - Retro DOS v3.0
 32616 000059B5 803E[4A03]01            	cmp	byte [FAILERR],1
 32617 000059BA F5                      	cmc
 32618                                  flushbuf_retn:
 32619 000059BB C3                      	retn
 32620                                  	
 32621                                  	; 17/12/2022
 32622                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32623                                  	;cmp	byte [FAILERR],0
 32624                                  	;jne	short bad_flush
 32625                                  	;retn
 32626                                  ;bad_flush:
 32627                                  	;stc
 32628                                  	;retn
 32629                                  
 32630                                  ;----------------------------------------------------------------------------
 32631                                  ;
 32632                                  ; Procedure Name : CHECKFLUSH
 32633                                  ;
 32634                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 32635                                  ;	   DS:DI - pointer to buffer
 32636                                  ;
 32637                                  ; Function : Write out a buffer if it is dirty
 32638                                  ;
 32639                                  ; Carry set if problem (currently user FAILed to I 24)
 32640                                  ;
 32641                                  ;----------------------------------------------------------------------------
 32642                                  
 32643                                  CHECKFLUSH:
 32644                                  	; MSDOS 6.0
 32645 000059BC B4FF                    	mov	ah,-1 ; 01/08/2018 Retro DOS v3.0
 32646                                  	;cmp	[di+4],ah
 32647 000059BE 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 32648 000059C1 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 32649 000059C3 38C4                    	CMP	AH,AL			; 
 32650 000059C5 7406                    	JZ	short DOBUFFER		; do this buffer
 32651                                  	;cmp	al,[di+4]
 32652 000059C7 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32653 000059CA F8                      	CLC
 32654 000059CB 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 32655                                  DOBUFFER:
 32656                                  	;test	byte [di+5],40h
 32657 000059CD F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 32658 000059D1 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 32659 000059D3 50                      	PUSH	AX
 32660                                  	;push	word [di+4]
 32661 000059D4 FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 32662 000059D7 E80B00                  	CALL	BUFWRITE
 32663 000059DA 58                      	POP	AX
 32664 000059DB 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 32665                                  	;and	ah,0BFh
 32666 000059DD 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 32667                                  	;mov	[di+4],ax
 32668 000059E0 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 32669                                  LEAVE_BUF:
 32670 000059E3 58                      	POP	AX			; Search info
 32671                                  checkflush_retn:
 32672 000059E4 C3                      	retn
 32673                                  
 32674                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 32675                                  ;----------------------------------------------------------------------------
 32676                                  ;
 32677                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 32678                                  ;
 32679                                  ;	ENTRY	DS:DI Points to the buffer
 32680                                  ;
 32681                                  ;	EXIT	Buffer marked free
 32682                                  ;		Carry set if error (currently user FAILed to I 24)
 32683                                  ;
 32684                                  ;	USES	All buf DS:DI
 32685                                  ;		HIGH_SECTOR
 32686                                  ;----------------------------------------------------------------------------
 32687                                  
 32688                                  	; 20/05/2019 - Retro DOS v4.0
 32689                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 32690                                  
 32691                                  
 32692                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32693                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 32694                                  
 32695                                  BUFWRITE:
 32696                                  	; 10/09/2018
 32697                                  	; 01/08/2018 - Retro DOS v3.0
 32698                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 32699 000059E5 B8FF00                  	MOV	AX,00FFH
 32700                                  	;xchg	ax,[di+4]
 32701 000059E8 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 32702 000059EB 3CFF                    	CMP	AL,0FFH
 32703 000059ED 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 32704                                  	;test	ah,40h
 32705 000059EF F6C440                  	test	AH,buf_dirty
 32706 000059F2 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 32707                                  	; MSDOS 6.0
 32708 000059F4 E89100                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 32709                                  
 32710                                  ;hkn; SS override
 32711 000059F7 363A06[2203]            	CMP	AL,[SS:WPERR]
 32712 000059FC 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 32713                                  
 32714                                  ;hkn; SS override
 32715                                  	; MSDOS 6.0
 32716 000059FE 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 32717                                  	
 32718                                  	;;les	bp,[di+10] ; MSDOS 3.3
 32719                                  	;les	bp,[di+13] ; MSDOS 6.0
 32720 00005A02 C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 32721                                  	;;lea	bx,[di+16]
 32722                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32723 00005A05 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 32724                                  	;mov	dx,[di+6]
 32725 00005A08 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 32726                                  	
 32727                                  	; MSDOS 6.0
 32728                                  	;mov	cx,[di+8]
 32729 00005A0B 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 32730                                  
 32731                                  ;hkn; SS override
 32732 00005A0E 36890E[0706]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 32733 00005A13 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 32734                                  	; MSDOS 3.3
 32735                                  	;; mov	cx,[DI+8]
 32736                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 32737                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 32738 00005A16 30ED                    	XOR	CH,CH
 32739                                  	;;mov	ah,ch ; MSDOS 3.3
 32740                                  
 32741                                  ;hkn; SS override for ALLOWED
 32742                                  	;mov	byte [SS:ALLOWED],18h
 32743 00005A18 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 32744                                  	;test	byte [di+5],8
 32745                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 32746                                  	;test	ah,8
 32747 00005A1E F6C408                  	test	AH,buf_isDATA
 32748 00005A21 7406                    	JZ	short NO_IGNORE
 32749                                  	;or	byte [SS:ALLOWED],20h
 32750 00005A23 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 32751                                  NO_IGNORE:
 32752                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 32753                                  	; MSDOS 6.0
 32754                                  	;mov	ax,[di+11]
 32755 00005A29 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 32756                                  
 32757 00005A2C 57                      	PUSH	DI		; Save buffer pointer
 32758 00005A2D 31FF                    	XOR	DI,DI		; Indicate failure
 32759                                  
 32760 00005A2F 1E                      	push	ds ; *
 32761 00005A30 53                      	push	bx ; **
 32762                                  WRTAGAIN:
 32763 00005A31 57                      	push	di ; ***
 32764 00005A32 51                      	push	cx ; ****
 32765 00005A33 50                      	push	ax ; *****
 32766                                  	;MOV	CX,1
 32767                                  	; 17/12/2022
 32768                                  	; ch = 0
 32769 00005A34 B101                    	mov	cl,1 ; 24/07/2019
 32770                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32771                                  	;mov	cx,1
 32772 00005A36 53                      	push	bx ; ******
 32773 00005A37 52                      	push	dx ; *******
 32774 00005A38 1E                      	push	ds ; ********
 32775                                  
 32776                                  ; Note: As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 32777                                  
 32778                                  	; MSDOS 6.0
 32779                                  	;cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 32780                                  	; 22/09/2023
 32781 00005A39 36382E[7900]            	cmp	[ss:BuffInHMA],ch ; 0
 32782 00005A3E 7418                    	jz	short NBUFFINHMA
 32783 00005A40 51                      	push	cx
 32784 00005A41 06                      	push	es
 32785 00005A42 89DE                    	mov	si,bx
 32786 00005A44 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 32787 00005A48 D1E9                    	shr	cx,1
 32788 00005A4A 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 32789 00005A4F 89FB                    	mov	bx,di
 32790 00005A51 FC                      	cld
 32791 00005A52 F3A5                    	rep	movsw
 32792 00005A54 06                      	push	es
 32793 00005A55 1F                      	pop	ds
 32794 00005A56 07                      	pop	es
 32795 00005A57 59                      	pop	cx
 32796                                  NBUFFINHMA:
 32797 00005A58 E854DC                  	call	DWRITE		; Write out the dirty buffer
 32798 00005A5B 1F                      	pop	ds ; ********
 32799 00005A5C 5A                      	pop	dx ; *******
 32800 00005A5D 5B                      	pop	bx ; ******
 32801 00005A5E 58                      	pop	ax ; *****
 32802 00005A5F 59                      	pop	cx ; ****
 32803 00005A60 5F                      	pop	di ; ***
 32804 00005A61 7201                    	JC	short NOSET
 32805 00005A63 47                      	INC	DI		; If at least ONE write succeedes, the operation
 32806                                  NOSET:				;	succeedes.
 32807 00005A64 01C2                    	ADD	DX,AX
 32808 00005A66 E2C9                    	LOOP	WRTAGAIN
 32809 00005A68 5B                      	pop	bx ; **
 32810 00005A69 1F                      	pop	ds ; *
 32811                                  	;OR	DI,DI		; Clears carry
 32812                                  	;JNZ	short BWROK	; At least one write worked
 32813                                  	;STC			; DI never got INCed, all writes failed.
 32814                                  	; 22/09/2023
 32815 00005A6A 83FF01                  	cmp	di,1
 32816                                  BWROK:	
 32817 00005A6D 5F                      	POP	DI
 32818 00005A6E C3                      	retn
 32819                                  
 32820                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 32821                                  ;----------------------------------------------------------------------------
 32822                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 32823                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 32824                                  ;	SC_DRIVE even if SC is disabled to save the testing
 32825                                  ;	code and time
 32826                                  ;
 32827                                  ;	ENTRY	ES:BP = drive parameter block
 32828                                  ;
 32829                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 32830                                  ;		[SC_DRIVE]= drive #
 32831                                  ;
 32832                                  ;	USES	Flags
 32833                                  ;----------------------------------------------------------------------------
 32834                                  
 32835                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32836                                  ; 04/05/2019 - Retro DOS v4.0
 32837                                  
 32838                                  SET_RQ_SC_PARMS:
 32839                                  ;hkn; SS override for all variables used in this procedure.
 32840 00005A6F 50                      	push	ax
 32841                                  	;mov	ax,[es:bp+2]
 32842 00005A70 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 32843 00005A74 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 32844                                  	;;mov	al,[es:bp+0]
 32845                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32846                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 32847                                  	; 15/12/2022
 32848 00005A78 268A4600                	mov	al,[ES:BP]
 32849 00005A7C 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 32850 00005A80 58                      	pop	ax
 32851                                  srspx:	
 32852 00005A81 C3                      	retn					;LB. return
 32853                                  
 32854                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 32855                                  ;----------------------------------------------------------------------------
 32856                                  ; Input:
 32857                                  ;	none
 32858                                  ; Function:
 32859                                  ;	increment dirty buffers count
 32860                                  ; Output:
 32861                                  ;	dirty buffers count is incremented
 32862                                  ;
 32863                                  ; All registers preserved
 32864                                  ;----------------------------------------------------------------------------
 32865                                  
 32866                                  INC_DIRTY_COUNT:
 32867                                  ;; BUGBUG  ---- remove this routine
 32868                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 32869 00005A82 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 32870 00005A87 C3                      	retn
 32871                                  
 32872                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 32873                                  ;----------------------------------------------------------------------------
 32874                                  ; Input:
 32875                                  ;	none
 32876                                  ; Function:
 32877                                  ;	decrement dirty buffers count
 32878                                  ; Output:
 32879                                  ;	dirty buffers count is decremented
 32880                                  ;
 32881                                  ; All registers preserved
 32882                                  ;----------------------------------------------------------------------------
 32883                                  
 32884                                  DEC_DIRTY_COUNT:
 32885 00005A88 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 32886 00005A8E 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 32887 00005A90 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 32888                                  					; error condition to underflow here? ;hkn;
 32889                                  ddcx:	
 32890 00005A95 C3                      	retn
 32891                                  
 32892                                  ;============================================================================
 32893                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 32894                                  ;============================================================================
 32895                                  ; 02/08/2018 - Retro DOS v3.0
 32896                                  ; 29/04/2019 - Retro DOS v4.0
 32897                                  
 32898                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 32899                                  
 32900                                  ; Pseudo EXEC system call for DOS
 32901                                  
 32902                                  ;	TITLE	MSPROC - process maintenance
 32903                                  ;	NAME	MSPROC
 32904                                  
 32905                                  ; =========================================================================
 32906                                  ;**	Process related system calls and low level routines for DOS 2.X.
 32907                                  ;	I/O specs are defined in DISPATCH.
 32908                                  ;
 32909                                  ;	$WAIT
 32910                                  ;	$EXEC
 32911                                  ;	$Keep_process
 32912                                  ;	Stay_resident
 32913                                  ;	$EXIT
 32914                                  ;	$ABORT
 32915                                  ;	abort_inner
 32916                                  ;
 32917                                  ;	Modification history:
 32918                                  ;
 32919                                  ;		Created: ARR 30 March 1983
 32920                                  ;		AN000	version 4.0 jan. 1988
 32921                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 32922                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 32923                                  ;
 32924                                  ;		M000	added support for loading programs into UMBs 7/9/90
 32925                                  ;
 32926                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 32927                                  ;		       dossym.inc. 7/30/90
 32928                                  ;		M005 - Support for EXE programs with out STACK segment and 
 32929                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 32930                                  ;		       stack is provided at the end of the program. Note that
 32931                                  ;		       only SP is changed.
 32932                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 32933                                  ;
 32934                                  ;		M028 - 4b04 implementation
 32935                                  ;
 32936                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 32937                                  ;			in memory block >= 64K, sp = 0. If memory block
 32938                                  ;			obtained is <64K, point sp at the end of the memory
 32939                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 32940                                  ;			added for a stack segment which may be needed if it
 32941                                  ;			is loaded in low memory situations.
 32942                                  ;
 32943                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 32944                                  ;
 32945                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 32946                                  ;			a bad environment if it reached 32767 bytes. Changed
 32947                                  ;			to allow 32768 bytes of environment.
 32948                                  ;
 32949                                  ;		M047 - Release the allocated UMB when we failed to load a 
 32950                                  ;		       COM file high. Also ensure that if the biggest block
 32951                                  ;		       into which we load the com file is less than 64K then
 32952                                  ;		       we provide atleast 256 bytes of stack to the user.
 32953                                  ;
 32954                                  ;		M050 - Made Lie table search CASE insensitive
 32955                                  ;
 32956                                  ;		M060 - Removed special version table from the kernal and
 32957                                  ;                      put it in a device drive which puts the address
 32958                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 32959                                  ;		       as a DWORD.
 32960                                  ;
 32961                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 32962                                  ;		       entry do not try to load low if there is no space in
 32963                                  ;		       UMBs.
 32964                                  ;
 32965                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 32966                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 32967                                  ;		       change return address to LeaveDos if AL=5.
 32968                                  ;
 32969                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 32970                                  ;                      controls building a version of MSDOS.SYS that only
 32971                                  ;                      runs programs from a fixed list (defined in the
 32972                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 32973                                  ;                      for details.  This feature is used to build a
 32974                                  ;                      "special" version of DOS that can be handed out to
 32975                                  ;                      OEM/ISV customers as part of a "service" disk.
 32976                                  ;
 32977                                  ; =========================================================================
 32978                                  
 32979                                  ;SAVEXIT  EQU  10
 32980                                  
 32981                                  ;BREAK	<$WAIT - return previous process error code>
 32982                                  ; =========================================================================
 32983                                  ;	$WAIT - Return previous process error code.
 32984                                  ;
 32985                                  ;	Assembler usage:
 32986                                  ;
 32987                                  ;	    MOV     AH, WaitProcess
 32988                                  ;	    INT     int_command
 32989                                  ;
 32990                                  ;	ENTRY	none
 32991                                  ;	EXIT	(ax) = exit code
 32992                                  ;	USES	all
 32993                                  ; =========================================================================
 32994                                  
 32995                                  	; 20/05/2019 - Retro DOS v4.0
 32996                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 32997                                  
 32998                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32999                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 33000                                  _$WAIT:
 33001                                  	; 02/08/2018 - Retro DOS v3.0
 33002                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 33003                                  
 33004 00005A96 31C0                    	xor	AX,AX
 33005 00005A98 368706[3403]            	xchg	AX,[ss:exit_code]
 33006 00005A9D E99BAB                  	jmp	SYS_RET_OK
 33007                                  
 33008                                  ; =========================================================================
 33009                                  ;BREAK <$exec - load/go a program>
 33010                                  ;	EXEC.ASM - EXEC System Call
 33011                                  ;
 33012                                  ;
 33013                                  ; Assembler usage:
 33014                                  ;	    lds     DX, Name
 33015                                  ;	    les     BX, Blk
 33016                                  ;	    mov     AH, Exec
 33017                                  ;	    mov     AL, FUNC
 33018                                  ;	    int     INT_COMMAND
 33019                                  ;
 33020                                  ;	AL  Function
 33021                                  ;	--  --------
 33022                                  ;	 0  Load and execute the program.
 33023                                  ;	 1  Load, create the program header but do not
 33024                                  ;	    begin execution.
 33025                                  ;	 3  Load overlay. No header created.
 33026                                  ;
 33027                                  ;	    AL = 0 -> load/execute program
 33028                                  ;
 33029                                  ;	    +---------------------------+
 33030                                  ;	    | WORD segment address of	|
 33031                                  ;	    | environment.		|
 33032                                  ;	    +---------------------------+
 33033                                  ;	    | DWORD pointer to ASCIZ	|
 33034                                  ;	    | command line at 80h	|
 33035                                  ;	    +---------------------------+
 33036                                  ;	    | DWORD pointer to default	|
 33037                                  ;	    | FCB to be passed at 5Ch	|
 33038                                  ;	    +---------------------------+
 33039                                  ;	    | DWORD pointer to default	|
 33040                                  ;	    | FCB to be passed at 6Ch	|
 33041                                  ;	    +---------------------------+
 33042                                  ;
 33043                                  ;	    AL = 1 -> load program
 33044                                  ;
 33045                                  ;	    +---------------------------+
 33046                                  ;	    | WORD segment address of	|
 33047                                  ;	    | environment.		|
 33048                                  ;	    +---------------------------+
 33049                                  ;	    | DWORD pointer to ASCIZ	|
 33050                                  ;	    | command line at 80h	|
 33051                                  ;	    +---------------------------+
 33052                                  ;	    | DWORD pointer to default	|
 33053                                  ;	    | FCB to be passed at 5Ch	|
 33054                                  ;	    +---------------------------+
 33055                                  ;	    | DWORD pointer to default	|
 33056                                  ;	    | FCB to be passed at 6Ch	|
 33057                                  ;	    +---------------------------+
 33058                                  ;	    | DWORD returned value of	|
 33059                                  ;	    | CS:IP			|
 33060                                  ;	    +---------------------------+
 33061                                  ;	    | DWORD returned value of	|
 33062                                  ;	    | SS:IP			|
 33063                                  ;	    +---------------------------+
 33064                                  ;
 33065                                  ;	    AL = 3 -> load overlay
 33066                                  ;
 33067                                  ;	    +---------------------------+
 33068                                  ;	    | WORD segment address where|
 33069                                  ;	    | file will be loaded.	|
 33070                                  ;	    +---------------------------+
 33071                                  ;	    | WORD relocation factor to |
 33072                                  ;	    | be applied to the image.	|
 33073                                  ;	    +---------------------------+
 33074                                  ;
 33075                                  ; Returns:
 33076                                  ;	    AX = error_invalid_function
 33077                                  ;	       = error_bad_format
 33078                                  ;	       = error_bad_environment
 33079                                  ;	       = error_not_enough_memory
 33080                                  ;	       = error_file_not_found
 33081                                  ; =========================================================================
 33082                                  ;
 33083                                  ;   Revision history:
 33084                                  ;
 33085                                  ;	 A000	version 4.00  Jan. 1988
 33086                                  ;
 33087                                  ; =========================================================================
 33088                                  
 33089                                  Exec_Internal_Buffer		EQU	OPENBUF
 33090                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 33091                                  
 33092                                  ; =========================================================================
 33093                                  
 33094                                  ;IF1		; warning message on buffers
 33095                                  ;%out	Please make sure that the following are contiguous and of the
 33096                                  ;%out	following sizes:
 33097                                  ;%out
 33098                                  ;%out	OpenBuf     128
 33099                                  ;%out	RenBuf	    128
 33100                                  ;%out	SearchBuf    53
 33101                                  ;%out	DummyCDS    curdirLen
 33102                                  ;ENDIF
 33103                                  
 33104                                  ; =========================================================================
 33105                                  
 33106                                  ; =========================================================================
 33107                                  ;
 33108                                  ; =========================================================================
 33109                                  
 33110                                  	; 20/05/2019 - Retro DOS v4.0
 33111                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 33112                                  
 33113                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33114                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 33115                                  	
 33116                                  _$EXEC:
 33117                                  	; 02/08/2018 - Retro DOS v3.0
 33118                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 33119                                  
 33120                                  EXEC001S:
 33121                                  	;LocalVar    Exec_Blk		,DWORD
 33122                                  	;LocalVar    Exec_Func		,BYTE
 33123                                  	;LocalVar    Exec_Load_High	,BYTE
 33124                                  	;LocalVar    Exec_FH		,WORD
 33125                                  	;LocalVar    Exec_Rel_Fac	,WORD
 33126                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 33127                                  	;LocalVar    Exec_Environ	,WORD
 33128                                  	;LocalVar    Exec_Size		,WORD
 33129                                  	;LocalVar    Exec_Load_Block	,WORD
 33130                                  	;LocalVar    Exec_DMA		,WORD
 33131                                  	;LocalVar    ExecNameLen 	,WORD
 33132                                  	;LocalVar    ExecName		,DWORD
 33133                                  	;
 33134                                  	;LocalVar    Exec_DMA_Save	,WORD
 33135                                  	;LocalVar    Exec_NoStack	,BYTE
 33136                                  
 33137                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33138                                  	;%define	Exec_Blk	dword [bp-4]
 33139                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 33140                                  	%define		Exec_BlkL	word [bp-4]	
 33141                                  	%define		Exec_BlkH	word [bp-2]
 33142                                  	%define		Exec_Func	byte [bp-5]
 33143                                  	%define		Exec_Load_High	byte [bp-6]
 33144                                  	%define		Exec_FH		word [bp-8]
 33145                                  	%define		Exec_Rel_Fac	word [bp-10]
 33146                                  	%define		Exec_Res_Len_Para word [bp-12]
 33147                                  	%define		Exec_Environ	word [bp-14]
 33148                                  	%define		Exec_Size	word [bp-16]
 33149                                  	%define		Exec_Load_Block	word [bp-18]
 33150                                  	%define		Exec_DMA	word [bp-20]
 33151                                  	%define		ExecNameLen	word [bp-22]
 33152                                  	;%define	ExecName	dword [bp-26]
 33153                                  	%define		ExecName	[bp-26] ; 09/08/2018
 33154                                  	%define		ExecNameL	word [bp-26]	
 33155                                  	%define		ExecNameH	word [bp-24]
 33156                                  	; MSDOS 6.0
 33157                                  	%define		Exec_DMA_Save	word [bp-28]
 33158                                  	%define		Exec_NoStack	byte [bp-29]
 33159                                  	
 33160                                  	; ==================================================================
 33161                                  	; validate function
 33162                                  	; ==================================================================
 33163                                  		      	
 33164                                  	; M068 - Start
 33165                                  	;
 33166                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 33167                                  	; possibility that the count may not be decremented all the way to
 33168                                  	; 0. A typical case is if the program for which we intended to keep 
 33169                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 33170                                  	; calls), exits pre-maturely due to error conditions.
 33171                                  
 33172                                  	; MSDOS 6.0
 33173 00005AA0 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 33174                                  
 33175                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 33176                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 33177                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 33178                                  
 33179 00005AA6 3C05                    	cmp	al,5			; Q: is this ExecReady call
 33180                                  	;jne	short @f
 33181 00005AA8 7505                    	jne	short Exec_@f		; N: continue
 33182                                  					; Y: change ret addr. to LeaveDos.
 33183 00005AAA 59                      	pop	cx			; Note CX is not input to ExecReady
 33184 00005AAB B9[0804]                	mov	cx,LeaveDOS
 33185 00005AAE 51                      	push	cx
 33186                                  ;@@:
 33187                                  Exec_@f:
 33188                                  	; M068 - End
 33189                                  	
 33190                                  	;Enter
 33191                                  
 33192 00005AAF 55                      	push	bp
 33193 00005AB0 89E5                    	mov	bp,sp
 33194                                  	;;sub	sp,26	; MSDOS 3.3
 33195                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 33196                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 33197                                  	; 17/12/2022
 33198                                  	; 20/05/2019
 33199 00005AB2 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 33200                                  
 33201                                  	; MSDOS 6.0
 33202 00005AB5 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 33203                                  					; M030
 33204 00005AB7 7614                    	jna	short Exec_Check_2
 33205                                  
 33206                                  	; MSDOS 3.3
 33207                                  	;cmp	AL,3
 33208                                  	;jna	short Exec_Check_2
 33209                                  
 33210                                  Exec_Bad_Fun:
 33211 00005AB9 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 33212                                  					; Extended Error Locus	;smr;SS Override
 33213                                  	;mov	al,1
 33214 00005ABF B001                    	mov	al,error_invalid_function
 33215                                  
 33216                                  Exec_Ret_Err:
 33217                                  	;Leave
 33218 00005AC1 89EC                    	mov	sp,bp
 33219 00005AC3 5D                      	pop	bp
 33220                                  	;transfer SYS_RET_ERR
 33221 00005AC4 E97DAB                  	jmp	SYS_RET_ERR
 33222                                  
 33223                                  	; MSDOS 6.0
 33224                                  ExecReadyJ:
 33225 00005AC7 E8FD17                  	call	ExecReady		; M028
 33226 00005ACA E90504                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 33227                                  
 33228                                  Exec_Check_2:
 33229 00005ACD 3C02                    	cmp	AL,2			
 33230 00005ACF 74E8                    	je	short Exec_Bad_Fun
 33231                                  
 33232                                  	; MSDOS 6.0
 33233 00005AD1 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 33234 00005AD3 74E4                    	je	short Exec_Bad_Fun
 33235                                  	
 33236 00005AD5 3C05                    	cmp	al,5			; M028 ; M030
 33237 00005AD7 74EE                    	je	short ExecReadyJ	; M028
 33238                                  
 33239                                  	;mov	[bp-4],bx
 33240 00005AD9 895EFC                  	mov	Exec_BlkL,BX		; stash args
 33241                                  	;mov	[bp-2],es
 33242 00005ADC 8C46FE                  	mov	Exec_BlkH,ES
 33243                                  	;mov	[bp-5],al
 33244 00005ADF 8846FB                  	mov	Exec_Func,AL
 33245                                  	;mov	byte [bp-6],0
 33246 00005AE2 C646FA00                	mov	Exec_Load_High,0
 33247                                  
 33248                                  	;mov	[bp-26],dx
 33249 00005AE6 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 33250                                  	;mov	[bp-24],ds
 33251 00005AE9 8C5EE8                  	mov	ExecNameH,DS
 33252 00005AEC 89D6                    	mov	SI,DX			; move pointer to convenient place
 33253                                  	;invoke	DStrLen
 33254 00005AEE E8F3B6                  	call	DStrLen
 33255                                  	;mov	[bp-22],cx
 33256 00005AF1 894EEA                  	mov	ExecNameLen,CX		; save length
 33257                                  
 33258                                  	; MSDOS 6.0
 33259 00005AF4 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 33260 00005AF8 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 33261                                  
 33262 00005AFC 30C0                    	xor	AL,AL			; open for reading
 33263 00005AFE 55                      	push	BP
 33264                                  
 33265                                  	; MSDOS 6.0
 33266                                  	;or	byte [ss:DOS_FLAG],1
 33267 00005AFF 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 33268                                  					; the redir that this open call is
 33269                                  					; due to an exec.
 33270                                  
 33271                                  	;invoke	$OPEN			; is the file there?
 33272 00005B05 E80513                  	call	_$OPEN
 33273                                  
 33274                                  	; MSDOS 6.0
 33275 00005B08 9C                      	pushf
 33276                                  	; 02/06/2019
 33277                                  	;and	byte [ss:DOS_FLAG],0FEh
 33278 00005B09 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 33279 00005B0F 9D                      	popf
 33280                                  
 33281 00005B10 5D                      	pop	BP
 33282                                  
 33283                                  	; MSDOS 3.3 & MSDOS 6.0
 33284 00005B11 72AE                    	jc	short Exec_Ret_Err
 33285                                  
 33286                                  	;mov	[bp-8],ax
 33287 00005B13 8946F8                  	mov	Exec_FH,AX
 33288 00005B16 89C3                    	mov	BX,AX
 33289 00005B18 30C0                    	xor	AL,AL
 33290                                  	;invoke	$Ioctl
 33291 00005B1A E806C7                  	call	_$IOCTL
 33292 00005B1D 7207                    	jc	short Exec_BombJ
 33293                                  
 33294                                  	;test	dl,80h
 33295 00005B1F F6C280                  	test	DL,devid_ISDEV
 33296 00005B22 740A                    	jz	short Exec_Check_Environ
 33297                                  
 33298                                  	;mov	al,2
 33299 00005B24 B002                    	mov	AL,error_file_not_found
 33300                                  Exec_BombJ:
 33301 00005B26 E9CA00                  	jmp	Exec_Bomb
 33302                                  
 33303                                  BadEnv:
 33304                                  	;mov	al,0Ah
 33305 00005B29 B00A                    	mov	AL,error_bad_environment
 33306 00005B2B E9C500                  	jmp	Exec_Bomb
 33307                                  
 33308                                  Exec_Check_Environ:
 33309                                  	;mov	word [bp-18],0
 33310 00005B2E C746EE0000              	mov	Exec_Load_Block,0
 33311                                  	;mov	word [bp-14],0
 33312 00005B33 C746F20000              	mov	Exec_Environ,0
 33313                                  					; overlays... no environment
 33314                                  	;test	byte [bp-5],2
 33315 00005B38 F646FB02                	test	Exec_Func,exec_func_overlay
 33316 00005B3C 7552                    	jnz	short Exec_Read_Header
 33317                                  
 33318                                  	;lds	si,[bp-4]
 33319 00005B3E C576FC                  	lds	SI,Exec_Blk		; get block
 33320 00005B41 8B04                    	mov	ax,[SI]
 33321                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 33322 00005B43 09C0                    	or	AX,AX
 33323 00005B45 750C                    	jnz	short Exec_Scan_Env
 33324                                  
 33325 00005B47 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 33326                                  	;mov	ax,[44]
 33327 00005B4C A12C00                  	mov	AX,[PDB.ENVIRON]
 33328                                  
 33329                                  ; MSDOS 6.0
 33330                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 33331                                  ;
 33332                                  ; Exec_environ is being correctly initialized after the environment has been
 33333                                  ; allocated and copied form the parent's env. It must not be initialized here.
 33334                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 33335                                  ; parent's environment.
 33336                                  ;	mov	Exec_Environ,AX
 33337                                  ;
 33338                                  ;----------------------------------------------------------------------------
 33339                                  
 33340                                  	;mov	[bp-14],ax
 33341                                  	;mov	Exec_Environ,ax
 33342                                  
 33343 00005B4F 09C0                    	or	AX,AX
 33344 00005B51 743D                    	jz	short Exec_Read_Header
 33345                                  
 33346                                  Exec_Scan_Env:
 33347 00005B53 8EC0                    	mov	ES,AX
 33348 00005B55 31FF                    	xor	DI,DI
 33349                                  	;mov	cx,7FFFh ; MSDOS 3.3
 33350 00005B57 B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 33351 00005B5A 30C0                    	xor	AL,AL
 33352                                  
 33353                                  Exec_Get_Environ_Len:
 33354 00005B5C F2AE                    	repnz	scasb			; find that nul byte
 33355 00005B5E 75C9                    	jnz	short BadEnv
 33356                                  
 33357 00005B60 49                      	dec	CX			; Dec CX for the next nul byte test
 33358 00005B61 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 33359                                  
 33360 00005B63 AE                      	scasb				; is there another nul byte?
 33361 00005B64 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 33362                                  
 33363 00005B66 57                      	push	DI
 33364                                  	;lea	bx,[DI+11h]
 33365 00005B67 8D5D11                  	lea	BX,[DI+0Fh+2]
 33366                                  	;add	bx,[bp-22]
 33367 00005B6A 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 33368                                  					; remember argv[0] length
 33369                                  					; round up and remember argc
 33370 00005B6D B104                    	mov	CL,4
 33371 00005B6F D3EB                    	shr	BX,CL			; number of paragraphs needed
 33372 00005B71 06                      	push	ES
 33373                                  	;invoke	$Alloc			; can we get the space?
 33374 00005B72 E84406                  	call	_$ALLOC
 33375 00005B75 1F                      	pop	DS
 33376 00005B76 59                      	pop	CX
 33377                                  
 33378                                  	;jnc	short Exec_Save_Environ
 33379                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 33380                                  	; 17/12/2022
 33381 00005B77 7274                    	jc	short Exec_No_Mem ; 02/06/2019
 33382                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33383                                  	;jnc	short Exec_Save_Environ
 33384                                  	;jmp	SHORT Exec_No_Mem
 33385                                  
 33386                                  Exec_Save_Environ:
 33387 00005B79 8EC0                    	mov	ES,AX
 33388                                  	;mov	[bp-14],ax
 33389 00005B7B 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 33390 00005B7E 31F6                    	xor	SI,SI
 33391 00005B80 89F7                    	mov	DI,SI
 33392 00005B82 F3A4                    	rep	movsb			; copy the environment
 33393 00005B84 B80100                  	mov	AX,1
 33394 00005B87 AB                      	stosw
 33395                                  	;lds	si,[bp-26]
 33396 00005B88 C576E6                  	lds	SI,ExecName
 33397                                  	;mov	cx,[bp-22]
 33398 00005B8B 8B4EEA                  	mov	CX,ExecNameLen
 33399 00005B8E F3A4                    	rep	movsb
 33400                                  
 33401                                  Exec_Read_Header:
 33402                                  	; We read in the program header into the above data area and
 33403                                  	; determine where in this memory the image will be located.
 33404                                  
 33405                                  	;Context DS
 33406 00005B90 16                      	push	ss
 33407 00005B91 1F                      	pop	ds
 33408                                  	;mov	cx,26
 33409 00005B92 B91A00                  	mov	CX,exec_header_len	; header size
 33410 00005B95 BA[C80F]                	mov	DX,exec_signature
 33411 00005B98 06                      	push	ES
 33412 00005B99 1E                      	push	DS
 33413 00005B9A E88304                  	call	ExecRead
 33414 00005B9D 1F                      	pop	DS
 33415 00005B9E 07                      	pop	ES
 33416 00005B9F 7250                    	jc	short Exec_Bad_File
 33417                                  
 33418 00005BA1 09C0                    	or	AX,AX
 33419 00005BA3 744C                    	jz	short Exec_Bad_File
 33420                                  	;cmp	ax,26
 33421 00005BA5 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 33422 00005BA8 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 33423                                  
 33424 00005BAA F706[D40F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 33425 00005BB0 7504                    	jnz	short Exec_Check_Sig
 33426                                  
 33427                                  	;mov	byte [bp-6],0FFh
 33428 00005BB2 C646FAFF                	mov	Exec_Load_High,-1
 33429                                  
 33430                                  Exec_Check_Sig:
 33431 00005BB6 A1[C80F]                	mov	AX,[exec_signature]	; rms;NSS
 33432                                  	;cmp	ax,5A4Dh ; 'MZ'
 33433 00005BB9 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 33434 00005BBC 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33435                                  
 33436                                  	;cmp	ax,4D5Ah ; 'ZM'
 33437 00005BBE 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 33438 00005BC1 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33439                                  
 33440                                  Exec_Com_Filej:
 33441 00005BC3 E9E901                  	jmp	Exec_Com_File
 33442                                  
 33443                                  	; We have the program header... determine memory requirements
 33444                                  
 33445                                  Exec_Save_Start:
 33446 00005BC6 A1[CC0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 33447 00005BC9 B105                    	mov	CL,5			; convert to paragraphs
 33448 00005BCB D3E0                    	shl	AX,CL
 33449 00005BCD 2B06[D00F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 33450                                  	;mov	[bp-12],ax
 33451 00005BD1 8946F4                  	mov	Exec_Res_Len_Para,AX
 33452                                  
 33453                                  		; Do we need to allocate memory?
 33454                                  		; Yes if function is not load-overlay
 33455                                  
 33456                                  	;test	byte [bp-5],2
 33457 00005BD4 F646FB02                	test	Exec_Func,exec_func_overlay
 33458 00005BD8 7445                    	jz	short Exec_Allocate	; allocation of space
 33459                                  
 33460                                  		; get load address from block
 33461                                  
 33462                                  	;les	di,[bp-4]
 33463 00005BDA C47EFC                  	les	DI,Exec_Blk
 33464 00005BDD 268B05                  	mov	ax,[es:di]
 33465                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 33466                                  	;mov	[bp-20],ax
 33467 00005BE0 8946EC                  	mov	Exec_DMA,AX
 33468                                  
 33469                                  	; 17/12/2022
 33470                                  	;;mov	ax,[es:di+2]
 33471                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 33472                                  	;;mov	[bp-10],ax
 33473                                  	;mov	Exec_Rel_Fac,AX
 33474                                  
 33475                                  	; 17/12/2022
 33476                                  	; 30/11/2022 (!most proper code!)
 33477                                  	;mov	dx,[es:di+2]
 33478 00005BE3 268B5502                	mov	dx,[ES:DI+EXEC3.reloc_fac]
 33479                                  	;mov	[bp-10],dx
 33480 00005BE7 8956F6                  	mov	Exec_Rel_Fac,dx
 33481                                  	; ax = Exec_DMA
 33482 00005BEA E9DE00                  	jmp	Exec_Find_Res
 33483                                  
 33484                                  ; 17/12/2022
 33485                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33486                                  ; 27/09/2023
 33487                                  %if 0
 33488                                  	; 02/06/2019 - Retro DOS v4.0
 33489                                  	;mov	ax,[bp-20]  ; *+*
 33490                                  	mov	AX,Exec_DMA ; *+*
 33491                                  	; 10/08/2018
 33492                                  	jmp	Exec_Find_Res		; M000
 33493                                  %endif
 33494                                  
 33495                                  Exec_No_Mem:
 33496                                  	;mov	al,8
 33497 00005BED B008                    	mov	AL,error_not_enough_memory
 33498 00005BEF EB02                    	jmp	short Exec_Bomb
 33499                                  
 33500                                  Exec_Bad_File:
 33501                                  	;mov	al,0Bh
 33502 00005BF1 B00B                    	mov	AL,error_bad_format
 33503                                  
 33504                                  Exec_Bomb:
 33505                                  	;mov	bx,[bp-8]
 33506 00005BF3 8B5EF8                  	mov	BX,Exec_FH
 33507 00005BF6 E84004                  	call	Exec_Dealloc
 33508                                  	;LeaveCrit CritMem
 33509 00005BF9 E817B7                  	call	LCritMEM
 33510                                  	;save	<AX,BP>
 33511 00005BFC 50                      	push	ax
 33512 00005BFD 55                      	push	bp
 33513                                  	;invoke	$CLOSE
 33514 00005BFE E83D0A                  	call	_$CLOSE
 33515                                  	;restore <BP,AX>
 33516 00005C01 5D                      	pop	bp
 33517 00005C02 58                      	pop	ax
 33518 00005C03 E9BBFE                  	jmp	Exec_Ret_Err
 33519                                  
 33520                                  Exec_Chk_Mem: 
 33521                                  	
 33522                                  	; 24/09/2023
 33523                                  	; ds = DOSDATA
 33524                                  ; 17/12/2022
 33525                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33526                                  ;%if 0
 33527                                  	; MSDOS 6.0    			; M063 - Start
 33528                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33529                                  	; 10/06/2019
 33530 00005C06 A0[0203]                	mov	al,[AllocMethod]
 33531                                  	;mov	bl,[ss:ALLOCMSAVE]
 33532 00005C09 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 33533                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 33534 00005C0D 881E[0203]              	mov	[AllocMethod],bl
 33535                                  	
 33536 00005C11 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33537 00005C14 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33538                                  	;				; N: continue
 33539                                  	;
 33540 00005C16 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33541 00005C18 74D3                    	jz	short Exec_No_Mem	; N: no memory 
 33542                                  	; 02/06/2019
 33543                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33544 00005C1A A1[8A00]                	mov	ax,[SAVE_AX]
 33545                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 33546                                  					; M063 - End
 33547 00005C1D EB2B                    	jmp	short Exec_Norm_Alloc1
 33548                                  ;%endif
 33549                                  
 33550                                  ; 17/12/2022
 33551                                  %if 0
 33552                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33553                                  	; MSDOS 6.0    			; M063 - Start
 33554                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33555                                  	mov	bl,[ss:ALLOCMSAVE]
 33556                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33557                                  
 33558                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33559                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33560                                  	;				; N: continue
 33561                                  	;
 33562                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33563                                  	jz	short Exec_No_Mem	; N: no memory 
 33564                                  
 33565                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33566                                  	jmp	short Exec_Norm_Alloc	;    Try again
 33567                                  					; M063 - End
 33568                                  %endif
 33569                                  
 33570                                  Exec_Allocate:
 33571                                  	; 09/09/2018
 33572                                  
 33573                                  	; M005 - START
 33574                                  	; If there is no STACK segment for this exe file and if this
 33575                                  	; not an overlay and the resident size is less than 64K - 
 33576                                  	; 256 bytes we shall add 256 bytes to the programs 
 33577                                  	; resident memory requirement and set Exec_SP to this value.
 33578                                  	
 33579                                  	; 17/12/2022
 33580 00005C1F 29DB                    	sub	bx,bx ; 0	
 33581                                  
 33582                                  	; MSDOS 6.0
 33583                                  	;;mov	byte [bp-29],0
 33584                                  	;mov	Exec_NoStack,0
 33585                                  	; 17/12/2022
 33586 00005C21 885EE3                  	mov	Exec_NoStack,bl ; 0
 33587 00005C24 391E[D60F]              	cmp	[exec_SS],bx ; 0
 33588                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 33589 00005C28 7511                    	jne	short ea1		; Y: continue normal processing
 33590 00005C2A 391E[D80F]              	cmp	[exec_SP],bx ; 0
 33591                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 33592 00005C2E 750B                    	jne	short ea1		; Y: continue normal processing
 33593                                  
 33594                                  	;inc	byte [bp-29]
 33595 00005C30 FE46E3                  	inc	Exec_NoStack
 33596 00005C33 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 33597 00005C36 7303                    	jae	short ea1		; Y: don't set Exec_SP
 33598                                  
 33599 00005C38 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 33600                                  ea1:
 33601                                  	; M005 - END
 33602                                  
 33603                                  	; MSDOS 6.0			; M000 - start
 33604                                  	; 20/05/2019
 33605                                  	; (ds = ss = DOSDATA)
 33606 00005C3B F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 33607                                  					; Q: is the alloc strat high_first
 33608 00005C40 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 33609                                  					; Y: set high_only bit
 33610 00005C42 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 33611                                  					; M000 - end
 33612                                  Exec_Norm_Alloc:
 33613 00005C47 A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd  
 33614                                  Exec_Norm_Alloc1:	; 02/06/2019
 33615                                  					; M000: attempt at allocating memory
 33616                                  	; MSDOS 3.3
 33617                                  	;push	ax			; M000
 33618                                  
 33619 00005C4A BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 33620 00005C4D 1E                      	push	DS
 33621                                  	;invoke	$Alloc			; should have carry set and BX has max
 33622 00005C4E E86805                  	call	_$ALLOC
 33623 00005C51 1F                      	pop	DS
 33624                                  
 33625                                  	; MSDOS 6.0
 33626 00005C52 A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 33627                                  	; MSDOS 3.3
 33628                                  	;pop	ax			; M000
 33629                                  
 33630 00005C55 83C010                  	add	AX,10h			; room for header
 33631 00005C58 83FB11                  	cmp	BX,11h			; enough room for a header
 33632                                  	; MSDOS 6.0
 33633 00005C5B 72A9                    	jb	short Exec_Chk_Mem	; M000
 33634                                  	; MSDOS 3.3	
 33635                                  	;jb	short Exec_No_Mem
 33636                                  
 33637 00005C5D 39D8                    	cmp	AX,BX			; is there enough for bare image?
 33638                                  	; MSDOS 6.0
 33639 00005C5F 77A5                    	ja	short Exec_Chk_Mem	; M000
 33640                                  	; MSDOS 3.3
 33641                                  	;ja	short Exec_No_Mem
 33642                                  
 33643                                  	;test	byte [bp-6],0FFh
 33644 00005C61 F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 33645 00005C65 7518                    	jnz	short Exec_BX_Max	; use max
 33646                                  
 33647                                  	; 09/09/2018
 33648                                  
 33649 00005C67 0306[D20F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 33650                                  	; MSDOS 6.0
 33651 00005C6B 7299                    	jc	short Exec_Chk_Mem		; M000
 33652                                  	; MSDOS 3.3
 33653                                  	;jc	short Exec_No_Mem
 33654                                  
 33655 00005C6D 39D8                    	cmp	AX,BX			; enough space?
 33656                                  	; MSDOS 6.0
 33657 00005C6F 7795                    	ja	short Exec_Chk_Mem	; M000: nope...	
 33658                                  	; MSDOS 3.3
 33659                                  	;ja	short Exec_No_Mem
 33660                                  
 33661 00005C71 2B06[D20F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 33662 00005C75 0306[D40F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 33663 00005C79 7204                    	jc	short Exec_BX_Max
 33664                                  
 33665 00005C7B 39D8                    	cmp	AX,BX
 33666 00005C7D 7602                    	jbe	short Exec_Got_Block
 33667                                  
 33668                                  Exec_BX_Max:
 33669 00005C7F 89D8                    	mov	AX,BX
 33670                                  
 33671                                  Exec_Got_Block:
 33672                                  	; 03/08/2018 - Retro DOS v3.0
 33673                                  
 33674 00005C81 1E                      	push	DS
 33675 00005C82 89C3                    	mov	BX,AX
 33676                                  	;mov	[bp-16],bx
 33677 00005C84 895EF0                  	mov	Exec_Size,BX
 33678                                  	;invoke	$Alloc			; get the space
 33679 00005C87 E82F05                  	call	_$ALLOC
 33680 00005C8A 1F                      	pop	DS
 33681                                  	; MSDOS 6.0
 33682                                  	;jc	short Exec_Chk_Mem	; M000
 33683                                  	; MSDOS 3.3
 33684                                  	;;jc	short Exec_No_Mem
 33685                                  	; 20/05/2019
 33686 00005C8B 7303                    	jnc	short ea0
 33687 00005C8D E976FF                  	jmp	Exec_Chk_Mem
 33688                                  ea0:
 33689                                  	; MSDOS 6.0
 33690 00005C90 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 33691 00005C94 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 33692                                  
 33693                                  ;M029; Begin changes
 33694                                  ; This code does special handling for programs with no stack segment. If so,
 33695                                  ;check if the current block is larger than 64K. If so, we do not modify
 33696                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 33697                                  ;case Exec_SS is not changed.
 33698                                  
 33699                                  	; MSDOS 6.0
 33700                                  	;cmp	byte [bp-29],0
 33701 00005C98 807EE300                	cmp	Exec_NoStack,0
 33702                                  	;je	@f
 33703 00005C9C 7412                    	je	short ea2
 33704                                  
 33705 00005C9E 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 33706                                  	;jae	@f			; Y: Exec_SP = 0
 33707 00005CA2 730C                    	jae	short ea2
 33708                                  
 33709                                  ;Make Exec_SP point at the top of the memory block
 33710                                  
 33711 00005CA4 B104                    	mov	cl,4
 33712 00005CA6 D3E3                    	shl	bx,cl			; get byte offset
 33713 00005CA8 81EB0001                	sub	bx,100h			; take care of PSP
 33714 00005CAC 891E[D80F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 33715                                  ea2:
 33716                                  ;@@:
 33717                                  ;M029; end changes
 33718                                  
 33719                                  	;mov	[bp-18],ax
 33720 00005CB0 8946EE                  	mov	Exec_Load_Block,AX
 33721 00005CB3 83C010                  	add	AX,10h
 33722                                  	;test	byte [bp-6],0FFh
 33723 00005CB6 F646FAFF                	test	Exec_Load_High,-1
 33724 00005CBA 7409                    	jz	short Exec_Use_AX	; use ax for load info
 33725                                  
 33726                                  	;add	ax,[bp-16]
 33727 00005CBC 0346F0                  	add	AX,Exec_Size		; go to end
 33728                                  	;sub	ax,[bp-12]
 33729 00005CBF 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 33730 00005CC2 83E810                  	sub	AX,10h			; drop off pdb
 33731                                  
 33732                                  Exec_Use_AX:
 33733                                  	;mov	[bp-10],ax
 33734 00005CC5 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 33735                                  	;mov	[bp-20],ax
 33736 00005CC8 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 33737                                  
 33738                                  	; Determine the location in the file of the beginning of
 33739                                  	; the resident
 33740                                  
 33741                                  ; 17/12/2022
 33742                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33743                                  ;%if 0
 33744                                  
 33745                                  Exec_Find_Res:
 33746                                  	; MSDOS 6.0
 33747                                  	;;mov	dx,[bp-20]
 33748                                  	;mov	DX,Exec_DMA ; *+*
 33749                                  	;;mov	[bp-28],dx
 33750                                  	;mov	Exec_DMA_Save,DX
 33751                                  
 33752                                  	; 17/12/2022
 33753                                  	; AX = Exec_DMA
 33754                                  
 33755                                  	; 02/06/2019 - Retro DOS v4.0
 33756                                  	;mov	[bp-28],ax ; *+*
 33757 00005CCB 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 33758                                  
 33759                                  ;%endif
 33760                                  
 33761                                  ; 17/12/2022
 33762                                  %if 0
 33763                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33764                                  Exec_Find_Res:
 33765                                  	;mov	dx,[bp-20]
 33766                                  	mov	DX,Exec_DMA ; *+*
 33767                                  	;mov	[bp-28],dx
 33768                                  	mov	Exec_DMA_Save,DX
 33769                                  %endif
 33770                                  
 33771                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33772 00005CCE 8B16[D00F]              	mov	DX,[exec_par_dir]
 33773 00005CD2 52                      	push	DX
 33774 00005CD3 B104                    	mov	CL,4
 33775 00005CD5 D3E2                    	shl	DX,CL			; low word of location
 33776 00005CD7 58                      	pop	AX
 33777 00005CD8 B10C                    	mov	CL,12
 33778 00005CDA D3E8                    	shr	AX,CL			; high word of location
 33779 00005CDC 89C1                    	mov	CX,AX			; CX <- high
 33780                                  
 33781                                  		; Read in the resident image (first, seek to it)
 33782                                  	;mov	bx,[bp-8]
 33783 00005CDE 8B5EF8                  	mov	BX,Exec_FH
 33784 00005CE1 1E                      	push	DS
 33785 00005CE2 30C0                    	xor	AL,AL
 33786                                  	;invoke	$Lseek			; Seek to resident
 33787 00005CE4 E8D30A                  	call	_$LSEEK
 33788 00005CE7 1F                      	pop	DS
 33789 00005CE8 7303                    	jnc	short Exec_Big_Read
 33790                                  
 33791 00005CEA E906FF                  	jmp	Exec_Bomb
 33792                                  
 33793                                  Exec_Big_Read:				; Read resident into memory
 33794                                  	;mov	bx,[bp-12]
 33795 00005CED 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 33796 00005CF0 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 33797 00005CF4 7203                    	jb	short Exec_Read_OK
 33798                                  
 33799 00005CF6 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 33800                                  
 33801                                  Exec_Read_OK:
 33802                                  	;sub	[bp-12],bx
 33803 00005CF9 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 33804 00005CFC 53                      	push	BX
 33805 00005CFD B104                    	mov	CL,4
 33806 00005CFF D3E3                    	shl	BX,CL			; Get count in bytes from paras
 33807 00005D01 89D9                    	mov	CX,BX			; Count in correct register
 33808 00005D03 1E                      	push	DS
 33809                                  	;mov	ds,[bp-20]
 33810 00005D04 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 33811                                  
 33812 00005D07 31D2                    	xor	DX,DX
 33813 00005D09 51                      	push	CX			; Save our count
 33814 00005D0A E81303                  	call	ExecRead
 33815 00005D0D 59                      	pop	CX			; Get old count to verify
 33816 00005D0E 1F                      	pop	DS
 33817 00005D0F 7248                    	jc	short Exec_Bad_FileJ
 33818                                  
 33819 00005D11 39C1                    	cmp	CX,AX			; Did we read enough?
 33820 00005D13 5B                      	pop	BX			; Get paragraph count back
 33821 00005D14 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 33822                                  
 33823                                  	; The read did not match the request. If we are off by 512
 33824                                  	; bytes or more then the header lied and we have an error.
 33825                                  
 33826 00005D16 29C1                    	sub	CX,AX
 33827 00005D18 81F90002                	cmp	CX,512
 33828 00005D1C 733B                    	jae	short Exec_Bad_FileJ
 33829                                  
 33830                                  	; We've read in CX bytes... bump DTA location
 33831                                  
 33832                                  ExecCheckEnd:
 33833                                  	;add	[bp-20],bx
 33834 00005D1E 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 33835                                  	;test	word [bp-12],0FFFFh
 33836 00005D21 F746F4FFFF              	test	Exec_Res_Len_Para,-1
 33837 00005D26 75C5                    	jnz	short Exec_Big_Read
 33838                                  
 33839                                  	; The image has now been read in. We must perform relocation
 33840                                  	; to the current location.
 33841                                  
 33842                                  exec_do_reloc:
 33843                                  	;mov	cx,[bp-10]
 33844 00005D28 8B4EF6                  	mov	CX,Exec_Rel_Fac
 33845 00005D2B A1[D60F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 33846 00005D2E 01C8                    	add	AX,CX			; and relocate him
 33847 00005D30 A3[C20F]                	mov	[exec_init_SS],AX 	; rms;NSS
 33848                                  
 33849 00005D33 A1[D80F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 33850 00005D36 A3[C00F]                	mov	[exec_init_SP],AX 	; rms;NSS
 33851                                  
 33852 00005D39 C406[DC0F]              	les	AX,[exec_IP]		; rms;NSS
 33853 00005D3D A3[C40F]                	mov	[exec_init_IP],AX 	; rms;NSS
 33854 00005D40 8CC0                    	mov	AX,ES			; rms;NSS
 33855 00005D42 01C8                    	add	AX,CX			; relocated...
 33856 00005D44 A3[C60F]                	mov	[exec_init_CS],AX 	; rms;NSS
 33857                                  
 33858 00005D47 31C9                    	xor	CX,CX
 33859 00005D49 8B16[E00F]              	mov	DX,[exec_rle_table]	; rms;NSS
 33860                                  	;mov	bx,[bp-8]
 33861 00005D4D 8B5EF8                  	mov	BX,Exec_FH
 33862 00005D50 1E                      	push	DS
 33863 00005D51 31C0                    	xor	AX,AX
 33864                                  	;invoke	$Lseek
 33865 00005D53 E8640A                  	call	_$LSEEK
 33866 00005D56 1F                      	pop	DS
 33867 00005D57 7303                    	jnc	short exec_get_entries
 33868                                  
 33869                                  Exec_Bad_FileJ:
 33870 00005D59 E995FE                  	jmp	Exec_Bad_File
 33871                                  
 33872                                  exec_get_entries:
 33873 00005D5C 8B16[CE0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 33874                                  
 33875                                  exec_read_reloc:
 33876 00005D60 52                      	push	DX
 33877                                  	;mov	dx,OPENBUF
 33878 00005D61 BA[BE03]                	mov	DX,Exec_Internal_Buffer
 33879                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 33880                                  	;mov	cx,396 ; MSDOS 6.0
 33881 00005D64 B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 33882 00005D67 1E                      	push	DS
 33883 00005D68 E8B502                  	call	ExecRead
 33884 00005D6B 07                      	pop	ES
 33885 00005D6C 5A                      	pop	DX
 33886 00005D6D 72EA                    	jc	short Exec_Bad_FileJ
 33887                                  
 33888                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 33889                                  	;mov	cx,99 ;  MSDOS 6.0
 33890 00005D6F B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 33891                                  					; Pointer to byte location in header
 33892                                  	;mov	di,OPENBUF
 33893 00005D72 BF[BE03]                	mov	DI,Exec_Internal_Buffer
 33894                                  	;mov	si,[bp-10]
 33895 00005D75 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 33896                                  
 33897                                  exec_reloc_one:
 33898 00005D78 09D2                    	or	DX,DX			; Any more entries?
 33899 00005D7A 7416                    	jz	short Exec_Set_PDBJ
 33900                                  
 33901                                  exec_get_addr:
 33902 00005D7C 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 33903 00005D7F 8CD8                    	mov	AX,DS			; Relocate address of item
 33904                                  
 33905                                  	; MSDOS 6.0
 33906                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 33907                                  	;add	ax,[bp-28]
 33908 00005D81 0346E4                  	add	AX,Exec_DMA_Save
 33909                                  
 33910 00005D84 8ED8                    	mov	DS,AX
 33911 00005D86 0137                    	add	[BX],SI
 33912 00005D88 83C704                  	add	DI,4
 33913 00005D8B 4A                      	dec	DX
 33914 00005D8C E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 33915                                  
 33916                                  	; We've exhausted a single buffer's worth. Read in the next
 33917                                  	; piece of the relocation table.
 33918                                  
 33919 00005D8E 06                      	push	ES
 33920 00005D8F 1F                      	pop	DS
 33921 00005D90 EBCE                    	jmp	short exec_read_reloc
 33922                                  
 33923                                  Exec_Set_PDBJ:
 33924                                  	; MSDOS 6.0
 33925                                  	
 33926                                  	; We now determine if this is a buggy exe packed file and if 
 33927                                  	; so we patch in the right code. Note that fixexepatch will
 33928                                  	; point to a ret if dos loads low. The load segment as 
 33929                                  	; determined above will be in exec_dma_save
 33930                                  	
 33931 00005D92 06                      	push	es
 33932 00005D93 50                      	push	ax			; M030
 33933 00005D94 51                      	push	cx			; M030
 33934                                  	;mov	es,[bp-28]
 33935 00005D95 8E46E4                  	mov	es,Exec_DMA_Save
 33936 00005D98 36A1[C60F]              	mov	ax,[ss:exec_init_CS]	; M030
 33937 00005D9C 368B0E[C40F]            	mov	cx,[ss:exec_init_IP]	; M030
 33938 00005DA1 36FF16[F811]            	call	word [ss:FixExePatch]
 33939                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33940                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 33941                                  	;call	word [ss:Rational386PatchPtr]
 33942 00005DA6 59                      	pop	cx			; M030
 33943 00005DA7 58                      	pop	ax			; M030
 33944 00005DA8 07                      	pop	es
 33945                                  
 33946 00005DA9 E9DE00                  	jmp	Exec_Set_PDB
 33947                                  
 33948                                  Exec_No_Memj:
 33949 00005DAC E93EFE                  	jmp	Exec_No_Mem
 33950                                  
 33951                                  	; we have a .COM file. First, determine if we are merely
 33952                                  	; loading an overlay.
 33953                                  
 33954                                  Exec_Com_File:
 33955                                  	;test	byte [bp-5],2
 33956 00005DAF F646FB02                	test	Exec_Func,exec_func_overlay
 33957 00005DB3 742D                    	jz	short Exec_Alloc_Com_File
 33958                                  	;lds	si,[bp-4]
 33959 00005DB5 C576FC                  	lds	SI,Exec_Blk		; get arg block
 33960 00005DB8 AD                      	lodsw				; get load address
 33961                                  	;mov	[bp-20],ax
 33962 00005DB9 8946EC                  	mov	Exec_DMA,AX
 33963 00005DBC B8FFFF                  	mov	AX,0FFFFh
 33964 00005DBF EB63                    	jmp	short Exec_Read_Block	; read it all!
 33965                                  
 33966                                  Exec_Chk_Com_Mem:			
 33967                                  	; MSDOS 6.0	     		; M063 - Start
 33968 00005DC1 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33969 00005DC5 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 33970 00005DCA 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33971 00005DCF F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33972 00005DD2 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 33973                                  					; N: continue
 33974                                  	
 33975 00005DD4 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33976 00005DD6 74D4                    	jz	short Exec_No_Memj	; N: no memory 
 33977                                  	
 33978                                  	;mov	ax,[bp-18]
 33979 00005DD8 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 33980 00005DDB 31DB                    	xor	bx,bx			; M047: bx => free arena
 33981 00005DDD E87502                  	call	ChangeOwner		; M047: free this block
 33982                                  	
 33983 00005DE0 EB0E                    	jmp	short Exec_Norm_Com_Alloc
 33984                                  					; M063 - End
 33985                                  	
 33986                                  	; We must allocate the max possible size block (ick!)
 33987                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 33988                                  	; size of block.
 33989                                  
 33990                                  Exec_Alloc_Com_File:
 33991                                  	; MSDOS 6.0			; M000 -start
 33992 00005DE2 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 33993                                  					; Q: is the alloc strat high_first
 33994 00005DE8 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 33995                                  					; Y: set high_only bit
 33996 00005DEA 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 33997                                  					; M000 - end
 33998                                  Exec_Norm_Com_Alloc:			; M000
 33999                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34000 00005DF0 BBFFFF                  	mov	BX,0FFFFh
 34001                                  	;invoke	$Alloc			; largest piece available as error
 34002 00005DF3 E8C303                  	call	_$ALLOC
 34003 00005DF6 09DB                    	or	BX,BX
 34004                                  	; MSDOS 6.0
 34005 00005DF8 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 34006                                  	; MSDOS 3.3
 34007                                  	;jz	short Exec_No_Memj
 34008                                  
 34009                                  	;mov	[bp-16],bx
 34010 00005DFA 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 34011 00005DFD 53                      	push	BX
 34012                                  	;invoke	$ALLOC			; largest piece available
 34013 00005DFE E8B803                  	call	_$ALLOC
 34014 00005E01 5B                      	pop	BX			; get size of block...
 34015                                  	;mov	[bp-18],ax
 34016 00005E02 8946EE                  	mov	Exec_Load_Block,AX
 34017                                  
 34018 00005E05 83C010                  	add	AX,10h			; increment for header
 34019                                  	;mov	[bp-20],ax
 34020 00005E08 8946EC                  	mov	Exec_DMA,AX
 34021                                  
 34022 00005E0B 31C0                    	xor	AX,AX			; presume 64K read...
 34023 00005E0D 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 34024 00005E11 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 34025                                  
 34026 00005E13 89D8                    	mov	AX,BX			; convert size to bytes
 34027 00005E15 B104                    	mov	CL,4
 34028 00005E17 D3E0                    	shl	AX,CL
 34029                                  	; 17/12/2022
 34030                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34031                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 34032                                  	; MSDOS 5.0
 34033                                  	;cmp	AX,100h   
 34034                                  	; 02/06/2019 - Retro DOS v4.0
 34035                                  	; MSDOS 6.0
 34036                                          ; 17/12/2022
 34037 00005E19 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 34038 00005E1C 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 34039                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 34040                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 34041                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 34042                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 34043                                  
 34044                                  					; M047: size of the block is < 64K
 34045 00005E1E 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 34046                                  
 34047                                  Exec_Read_Com:
 34048                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34049 00005E21 2D0001                  	sub	AX,100h 		; remember size of psp
 34050                                  Exec_Read_Block:
 34051 00005E24 50                      	push	AX			; save number to read
 34052                                  	;mov	bx,[bp-8]
 34053 00005E25 8B5EF8                  	mov	BX,Exec_FH		; of com file
 34054 00005E28 31C9                    	xor	CX,CX			; but seek to 0:0
 34055 00005E2A 89CA                    	mov	DX,CX
 34056 00005E2C 31C0                    	xor	AX,AX			; seek relative to beginning
 34057                                  	;invoke	$Lseek			; back to beginning of file
 34058 00005E2E E88909                  	call	_$LSEEK
 34059 00005E31 59                      	pop	CX			; number to read
 34060                                  	;mov	ds,[bp-20]
 34061 00005E32 8E5EEC                  	mov	DS,Exec_DMA
 34062 00005E35 31D2                    	xor	DX,DX
 34063 00005E37 51                      	push	CX
 34064 00005E38 E8E501                  	call	ExecRead
 34065 00005E3B 5E                      	pop	SI			; get number of bytes to read
 34066 00005E3C 7303                    	jnc	short OkRead
 34067 00005E3E E9B0FD                  	jmp	Exec_Bad_File
 34068                                  
 34069                                  	; 10/09/2018
 34070                                  OkRead:
 34071 00005E41 39F0                    	cmp	AX,SI			; did we read them all?
 34072                                  	; MSDOS 6.0
 34073                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 34074                                  	; MSDOS 3.3
 34075                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 34076 00005E43 7503                    	jne	short OkRead2
 34077 00005E45 E979FF                  	jmp	Exec_Chk_Com_Mem
 34078                                  OkRead2:
 34079                                  	; MSDOS 6.0
 34080 00005E48 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 34081 00005E4D 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 34082                                  
 34083                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34084                                  	;test	byte [bp-5],2
 34085 00005E52 F646FB02                	test	Exec_Func,exec_func_overlay
 34086 00005E56 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 34087                                  
 34088                                  	;mov	ax,[bp-20]
 34089 00005E58 8B46EC                  	mov	AX,Exec_DMA
 34090 00005E5B 83E810                  	sub	AX,10h
 34091 00005E5E 36A3[C60F]              	mov	[SS:exec_init_CS],AX
 34092 00005E62 36C706[C40F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 34093                                  
 34094                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 34095                                  	; of 0 on stack.
 34096                                  
 34097 00005E69 81C6FE00                	add	SI,0FEh 		; make room for stack
 34098                                  
 34099                                  	; MSDOS 6.0
 34100 00005E6D 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 34101 00005E70 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 34102 00005E72 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 34103                                  
 34104                                  Exec_St_Ok:
 34105                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34106 00005E76 368936[C00F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 34107 00005E7B 36A3[C20F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 34108 00005E7F 8ED8                    	mov	DS,AX
 34109 00005E81 C7040000                	mov	WORD [SI],0		; 0 for return
 34110                                  
 34111                                  	; MSDOS 6.0
 34112                                  
 34113                                  	; M068
 34114                                  	;
 34115                                  	; We now determine if this is a Copy Protected App. If so the 
 34116                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 34117                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 34118                                  
 34119 00005E85 36FF16[6100]            	call	word [ss:ChkCopyProt]	
 34120                                  
 34121                                  Exec_Set_PDB:
 34122                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34123                                  	;mov	bx,[bp-8]
 34124 00005E8A 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 34125 00005E8D E8A901                  	call	Exec_Dealloc
 34126 00005E90 55                      	push	BP
 34127                                  	;invoke	$Close			; release the jfn
 34128 00005E91 E8AA07                  	call	_$CLOSE
 34129 00005E94 5D                      	pop	BP
 34130 00005E95 E89301                  	call	Exec_Alloc
 34131                                  	;test	byte [bp-5],2
 34132 00005E98 F646FB02                	test	Exec_Func,exec_func_overlay
 34133 00005E9C 743A                    	jz	short Exec_Build_Header
 34134                                  
 34135                                  	; MSDOS 6.0
 34136 00005E9E E8C201                  	call	Scan_Execname
 34137 00005EA1 E8D601                  	call	Scan_Special_Entries
 34138                                  ;SR;
 34139                                  ;The current lie strategy uses the PSP to store the lie version. However,
 34140                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 34141                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 34142                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 34143                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 34144                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 34145                                  ;issues the version check, it gets the lie version until the next overlay
 34146                                  ;call is issued.
 34147                                  
 34148 00005EA4 36803E[3F10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 34149 00005EAA 7426                    	je	short norm_ovl		;yes, no special handling
 34150 00005EAC 56                      	push	si
 34151 00005EAD 06                      	push	es
 34152 00005EAE 36C436[4010]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 34153                                  	 
 34154                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s) 
 34155 00005EB3 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 34156 00005EB7 7411                    	je	short sysinit_done	;no, Sysinit is finished
 34157                                  	
 34158 00005EB9 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 34159 00005EBE 36FF36[BD0E]            	push	word [ss:SPECIAL_VERSION]
 34160 00005EC3 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 34161                                  		;;; PDB.VERSION
 34162 00005EC8 EB06                    	jmp	short setver_done
 34163                                  sysinit_done:
 34164 00005ECA 36C606[3F10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 34165                                  setver_done:
 34166 00005ED0 07                      	pop	es
 34167 00005ED1 5E                      	pop	si
 34168                                  norm_ovl:
 34169                                  	;leave
 34170 00005ED2 89EC                    	mov	sp,bp		
 34171 00005ED4 5D                      	pop	bp
 34172                                  
 34173                                  	;transfer SYS_RET_OK		; overlay load -> done
 34174 00005ED5 E963A7                  	jmp	SYS_RET_OK
 34175                                  
 34176                                  Exec_Build_Header:
 34177                                  	;mov	dx,[bp-18]
 34178 00005ED8 8B56EE                  	mov	DX,Exec_Load_Block
 34179                                  					; assign the space to the process
 34180                                  	;mov	si,1
 34181 00005EDB BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 34182                                  	;mov	ax,[bp-14]
 34183 00005EDE 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 34184 00005EE1 09C0                    	or	AX,AX
 34185 00005EE3 7405                    	jz	short No_Owner		; no environment
 34186                                  
 34187 00005EE5 48                      	dec	AX			; point to header
 34188 00005EE6 8ED8                    	mov	DS,AX
 34189 00005EE8 8914                    	mov	[SI],DX 		; assign ownership
 34190                                  No_Owner:
 34191                                  	;mov	ax,[bp-18]
 34192                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 34193                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34194                                  	; 17/12/2022
 34195 00005EEA 89D0                    	mov	ax,dx ; 06/06/2019
 34196                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 34197                                  	
 34198 00005EEC 48                      	dec	AX
 34199 00005EED 8ED8                    	mov	DS,AX			; point to header
 34200 00005EEF 8914                    	mov	[SI],DX 		; assign ownership
 34201                                  
 34202                                  	; MSDOS 6.0
 34203 00005EF1 1E                      	push	DS			;AN000;MS. make ES=DS
 34204 00005EF2 07                      	pop	ES			;AN000;MS.
 34205                                  	;mov	di,8
 34206 00005EF3 BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 34207 00005EF6 E86A01                  	call	Scan_Execname		;AN007;MS. parse execname
 34208                                  					;	   ds:si->name, cx=name length
 34209 00005EF9 51                      	push	CX			;AN007;;MS. save for fake version
 34210 00005EFA 56                      	push	SI			;AN007;;MS. save for fake version
 34211                                  
 34212                                  MoveName:				;AN000;
 34213 00005EFB AC                      	lodsb				;AN000;;MS. get char
 34214 00005EFC 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 34215 00005EFE 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 34216                                  					;AN000;
 34217 00005F00 AA                      	stosb				;AN000;;MS. move char
 34218                                  					; MSKK bug fix - limit length copied
 34219 00005F01 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 34220 00005F04 7302                    	jae	short Mem_Done		; jump if so
 34221                                  	;
 34222 00005F06 E2F3                    	loop	MoveName		;AN000;;MS. continue
 34223                                  Mem_Done:				;AN000;
 34224 00005F08 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 34225                                  	;cmp	di,16
 34226 00005F0A 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 34227 00005F0D 7301                    	jae	short Fill8		;AN000;MS.
 34228                                  	
 34229 00005F0F AA                      	stosb				;AN000;MS.
 34230                                  	
 34231                                  Fill8:					;AN000;
 34232 00005F10 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 34233 00005F11 59                      	pop	CX			;AN007;MS.
 34234                                  	
 34235 00005F12 E86501                  	call	Scan_Special_Entries	;AN007;MS.
 34236                                  
 34237                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34238 00005F15 52                      	push	DX
 34239                                  	;mov	si,[bp-16]
 34240 00005F16 8B76F0                  	mov	SI,Exec_Size
 34241 00005F19 01D6                    	add	SI,DX
 34242                                  	;Invoke	$Dup_PDB		; ES is now PDB
 34243 00005F1B E864B1                  	call	_$DUP_PDB
 34244 00005F1E 5A                      	pop	DX
 34245                                  
 34246                                  	;push	word [bp-14]
 34247 00005F1F FF76F2                  	push	Exec_Environ
 34248                                  	;pop	WORD [ES:2Ch]
 34249 00005F22 268F062C00              	pop	word [ES:PDB.ENVIRON]
 34250                                  
 34251                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 34252                                  					; version number in PSP
 34253 00005F27 36FF36[BD0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 34254 00005F2C 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 34255                                  		; PDB.VERSION
 34256                                  
 34257                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 34258                                  	;lds	si,[bp-4]
 34259 00005F31 C576FC                  	lds	SI,Exec_Blk		; get the block
 34260 00005F34 1E                      	push	DS			; save its location
 34261 00005F35 56                      	push	SI
 34262                                  	;lds	si,[si+6]
 34263 00005F36 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 34264                                  
 34265                                  	; DS points to user space 5C FCB
 34266                                  
 34267 00005F39 B90C00                  	mov	CX,12			; copy drive, name and ext
 34268 00005F3C 51                      	push	CX
 34269 00005F3D BF5C00                  	mov	DI,5Ch
 34270 00005F40 8A1C                    	mov	BL,[SI]
 34271 00005F42 F3A4                    	rep	movsb
 34272                                  
 34273                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 34274                                  
 34275 00005F44 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 34276 00005F46 AB                      	stosw
 34277 00005F47 AB                      	stosw
 34278                                  
 34279                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 34280                                  
 34281 00005F48 59                      	pop	CX
 34282 00005F49 5E                      	pop	SI			; get block
 34283 00005F4A 1F                      	pop	DS
 34284 00005F4B 1E                      	push	DS			; save (again)
 34285 00005F4C 56                      	push	SI
 34286                                  	;lds	si,[si+0Ah]
 34287 00005F4D C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 34288                                  
 34289                                  	; DS points to user space 6C FCB
 34290                                  
 34291 00005F50 8A3C                    	mov	BH,[SI] 		; do same as above
 34292 00005F52 F3A4                    	rep	movsb
 34293 00005F54 AB                      	stosw
 34294 00005F55 AB                      	stosw
 34295 00005F56 5E                      	pop	SI			; get block (last time)
 34296 00005F57 1F                      	pop	DS
 34297                                  	;ld	si,[si+2]
 34298 00005F58 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 34299                                  
 34300                                  	; DS points to user space 80 command line
 34301                                  
 34302 00005F5B 80C980                  	or	CL,80h
 34303 00005F5E 89CF                    	mov	DI,CX
 34304 00005F60 F3A4                    	rep	movsb			; Wham!
 34305                                  
 34306                                  	; Process BX into default AX (validity of drive specs on args).
 34307                                  	; We no longer care about DS:SI.
 34308                                  
 34309 00005F62 FEC9                    	dec	CL			; get 0FFh in CL
 34310 00005F64 88F8                    	mov	AL,BH
 34311 00005F66 30FF                    	xor	BH,BH
 34312                                  	;invoke	GetVisDrv
 34313 00005F68 E8400A                  	call	GetVisDrv
 34314 00005F6B 7302                    	jnc	short Exec_BL
 34315                                  
 34316 00005F6D 88CF                    	mov	BH,CL
 34317                                  
 34318                                  Exec_BL:
 34319 00005F6F 88D8                    	mov	AL,BL
 34320 00005F71 30DB                    	xor	BL,BL
 34321                                  	;invoke	GetVisDrv
 34322 00005F73 E8350A                  	call	GetVisDrv
 34323 00005F76 7302                    	jnc	short Exec_Set_Return
 34324                                  
 34325 00005F78 88CB                    	mov	BL,CL
 34326                                  
 34327                                  Exec_Set_Return:
 34328                                  	;invoke	Get_User_Stack			; get his return address
 34329 00005F7A E808A5                  	call	Get_User_Stack
 34330                                  
 34331                                  	;push	word [si+14h]
 34332 00005F7D FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34333                                  	;push	word [si+12h]
 34334 00005F80 FF7412                  	push	word [SI+user_env.user_IP]
 34335                                  	;push	word [si+14h]
 34336 00005F83 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34337                                  	;push	word [si+12h]
 34338 00005F86 FF7412                  	push	word [SI+user_env.user_IP]
 34339                                  	;pop	word [ES:0Ah]
 34340 00005F89 268F060A00              	pop	WORD [ES:PDB.EXIT]
 34341                                  	;pop	word [ES:0Ch]
 34342 00005F8E 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 34343                                  
 34344 00005F93 31C0                    	xor	AX,AX
 34345 00005F95 8ED8                    	mov	DS,AX
 34346                                  					; save them where we can get them
 34347                                  					; later when the child exits.
 34348                                  	;pop	word [88h]
 34349 00005F97 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 34350                                  	;pop	word [90h]
 34351 00005F9B 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 34352                                  
 34353 00005F9F 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 34354 00005FA6 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 34355 00005FAB 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 34356                                  
 34357                                  	;test	byte [bp-5],1
 34358 00005FB0 F646FB01                	test	Exec_Func,exec_func_no_execute
 34359 00005FB4 7427                    	jz	short exec_go
 34360                                  
 34361 00005FB6 36C536[C00F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 34362                                  	;les	di,[bp-4]
 34363 00005FBB C47EFC                  	les	DI,Exec_Blk		; and block for return
 34364                                  	;mov	[es:di+10h],ds
 34365 00005FBE 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 34366                                  
 34367 00005FC2 4E                      	dec	SI			; 'push' default AX
 34368 00005FC3 4E                      	dec	SI
 34369 00005FC4 891C                    	mov	[SI],BX 		; save default AX reg
 34370                                  	;mov	[es:di+0Eh], si
 34371 00005FC6 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 34372                                  
 34373 00005FCA 36C506[C40F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 34374                                  	;mov	[es:di+14h],ds
 34375 00005FCF 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 34376                                  	;mov	[es:di+12h],ax
 34377 00005FD3 26894512                	mov	[ES:DI+EXEC1.IP],AX
 34378                                  	
 34379                                  	;leave
 34380 00005FD7 89EC                    	mov	sp,bp
 34381 00005FD9 5D                      	pop	bp	
 34382                                  
 34383                                  	;transfer SYS_RET_OK
 34384 00005FDA E95EA6                  	jmp	SYS_RET_OK
 34385                                  
 34386                                  exec_go:
 34387 00005FDD 36C536[C40F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 34388 00005FE2 36C43E[C00F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 34389 00005FE7 8CC0                    	mov	AX,ES
 34390                                  
 34391                                  	; MSDOS 6.0
 34392 00005FE9 36803E[F711]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 34393 00005FEF 741A                    	je	short Xfer_To_User	; N: transfer control to user
 34394                                  
 34395 00005FF1 1E                      	push	ds			; Y: control must go to low mem stub
 34396                                  		
 34397 00005FF2 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 34398                                  					;    control to user 
 34399 00005FF7 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 34400                                  					; M004: Set bit to signal int 21
 34401                                  					; ah = 25 & ah= 49. See dossym.inc 
 34402                                  					; under TAG M003 & M009 for 
 34403                                  					; explanation
 34404 00005FFC 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 34405                                  					; M068: going to be turned OFF.
 34406                                  	
 34407 00006000 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 34408 00006002 1F                      	pop	ds
 34409                                  	
 34410 00006003 50                      	push	ax			; ret far into the low mem stub
 34411 00006004 B8[FB10]                	mov	ax,disa20_xfer
 34412 00006007 50                      	push	ax
 34413 00006008 8CC0                    	mov	AX,ES			; restore ax
 34414 0000600A CB                      	retf
 34415                                  
 34416                                  Xfer_To_User:
 34417                                  	; DS:SI points to entry point
 34418                                  	; AX:DI points to initial stack
 34419                                  	; DX has PDB pointer
 34420                                  	; BX has initial AX value
 34421                                  
 34422 0000600B FA                      	cli
 34423                                  	; 15/08/2018
 34424 0000600C 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 34425                                  
 34426 00006012 8ED0                    	mov	SS,AX			; set up user's stack
 34427 00006014 89FC                    	mov	SP,DI			; and SP
 34428 00006016 FB                      	sti
 34429                                  
 34430 00006017 1E                      	push	DS			; fake long call to entry
 34431 00006018 56                      	push	SI
 34432 00006019 8EC2                    	mov	ES,DX			; set up proper seg registers
 34433 0000601B 8EDA                    	mov	DS,DX
 34434 0000601D 89D8                    	mov	AX,BX			; set up proper AX
 34435                                  
 34436 0000601F CB                      	retf
 34437                                  
 34438                                  ; 04/08/2018 - Retro DOS v3.0
 34439                                  
 34440                                  ;----------------------------------------------------------------------------
 34441                                  ;
 34442                                  ;----------------------------------------------------------------------------
 34443                                  
 34444                                  ExecRead:
 34445 00006020 E81600                  	CALL	Exec_Dealloc
 34446                                  	;mov	bx,[bp-8]
 34447 00006023 8B5EF8                  	MOV	bx,Exec_FH
 34448                                  
 34449 00006026 55                      	PUSH	BP
 34450 00006027 E82507                  	call	_$READ
 34451 0000602A 5D                      	POP	BP
 34452                                  
 34453                                  	;CALL	Exec_Alloc
 34454                                  	;retn
 34455                                  	; 18/12/2022
 34456                                  	;jmp	short Exec_Alloc
 34457                                  
 34458                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 34459                                  
 34460                                  ;----------------------------------------------------------------------------
 34461                                  ;
 34462                                  ;----------------------------------------------------------------------------
 34463                                  
 34464                                  Exec_Alloc:
 34465 0000602B 53                      	push	BX
 34466                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34467                                  	; 20/05/2019 - Retro DOS v4.0
 34468                                  	; MSDOS 6.0
 34469 0000602C 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 34470 00006031 E81000                  	call	ChangeOwners
 34471 00006034 E8DCB2                  	call	LCritMEM
 34472 00006037 5B                      	pop	BX
 34473 00006038 C3                      	retn
 34474                                  
 34475                                  ;----------------------------------------------------------------------------
 34476                                  ;
 34477                                  ;----------------------------------------------------------------------------
 34478                                  
 34479                                  Exec_Dealloc:
 34480 00006039 53                      	push	BX
 34481                                  	;mov	bx,0
 34482 0000603A 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 34483 0000603C E8B9B2                  	call	ECritMEM
 34484 0000603F E80200                  	call	ChangeOwners
 34485 00006042 5B                      	pop	BX
 34486 00006043 C3                      	retn
 34487                                  
 34488                                  ; 18/12/2022
 34489                                  %if 0
 34490                                  ;----------------------------------------------------------------------------
 34491                                  ;
 34492                                  ;----------------------------------------------------------------------------
 34493                                  
 34494                                  Exec_Alloc:
 34495                                  	push	BX
 34496                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34497                                  	; 20/05/2019 - Retro DOS v4.0
 34498                                  	; MSDOS 6.0
 34499                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 34500                                  	call	ChangeOwners
 34501                                  	call	LCritMEM
 34502                                  	pop	BX
 34503                                  	retn
 34504                                  
 34505                                  %endif
 34506                                  
 34507                                  ;----------------------------------------------------------------------------
 34508                                  ;
 34509                                  ;----------------------------------------------------------------------------
 34510                                  
 34511                                  ChangeOwners:
 34512 00006044 9C                      	pushf
 34513 00006045 50                      	push	AX
 34514                                  	;mov	ax,[bp-14]
 34515 00006046 8B46F2                  	mov	AX,Exec_Environ
 34516 00006049 E80900                  	call	ChangeOwner
 34517                                  	;mov	ax,[bp-18]
 34518 0000604C 8B46EE                  	mov	AX,Exec_Load_Block
 34519 0000604F E80300                  	call	ChangeOwner
 34520 00006052 58                      	pop	AX
 34521 00006053 9D                      	popf
 34522                                  chgown_retn:
 34523 00006054 C3                      	retn
 34524                                  
 34525                                  ;----------------------------------------------------------------------------
 34526                                  ;
 34527                                  ;----------------------------------------------------------------------------
 34528                                  
 34529                                  ChangeOwner:
 34530 00006055 09C0                    	or	AX,AX			; is area allocated?
 34531 00006057 74FB                    	jz	short chgown_retn	; no, do nothing
 34532 00006059 48                      	dec	AX
 34533 0000605A 1E                      	push	DS
 34534 0000605B 8ED8                    	mov	DS,AX
 34535 0000605D 891E0100                	mov	[ARENA.OWNER],BX
 34536 00006061 1F                      	pop	DS
 34537 00006062 C3                      	retn
 34538                                  
 34539                                  ;----------------------------------------------------------------------------
 34540                                  ;
 34541                                  ;----------------------------------------------------------------------------
 34542                                  
 34543                                  ; 20/05/2019 - Retro DOS v4.0
 34544                                  
 34545                                  	; MSDOS 6.0
 34546                                  Scan_Execname:
 34547 00006063 C576E6                  	lds	SI,ExecName		; DS:SI points to name
 34548                                  Scan_Execname1:				; M028
 34549                                  Save_Begin:				;
 34550 00006066 89F1                    	mov	CX,SI			; CX= starting addr
 34551                                  Scan0:					;
 34552 00006068 AC                      	lodsb				; get char
 34553                                  
 34554 00006069 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 34555 0000606B 74F9                    	jz	short Save_Begin	; yes, save si
 34556 0000606D 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 34557 0000606F 74F5                    	jz	short Save_Begin	; yes, save si
 34558 00006071 3C00                    	cmp	AL,0			; is end of name
 34559 00006073 75F3                    	jnz	short Scan0		; no, continue scanning
 34560 00006075 29CE                    	sub	SI,CX			; get name's length
 34561 00006077 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 34562                                  
 34563 00006079 C3                      	retn
 34564                                  
 34565                                  ;----------------------------------------------------------------------------
 34566                                  ;
 34567                                  ;----------------------------------------------------------------------------
 34568                                  
 34569                                  ; 20/05/2019 - Retro DOS v4.0
 34570                                  
 34571                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34572                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 34573                                  
 34574                                  	; MSDOS 6.0
 34575                                  
 34576                                  Scan_Special_Entries:
 34577                                  
 34578 0000607A 49                      	dec	CX			; cx= name length
 34579                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 34580                                  					;reset to current version
 34581                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 34582                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 34583                                  	;mov	word [ss:SPECIAL_VERSION],5
 34584                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 34585                                  
 34586                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 34587 0000607B 36C706[BD0E]0500        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 34588                                  				; 0005h for Retro DOS v4.1 (MSDOS 5.0)
 34589                                  				; 24/09/2023
 34590                                  				; 1606h for Retro DOS v4.2 (MSDOS 6.22)
 34591                                  ;***	call	Reset_Version
 34592                                  
 34593                                  ;M060	push	SS
 34594                                  ;M060	pop	ES
 34595                                  
 34596 00006082 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 34597 00006087 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 34598 00006089 09F8                    	or	AX,DI			;M060; be sure the table exists
 34599 0000608B 7427                    	jz	short End_List		;M060; If ZR then no table
 34600                                  
 34601                                  GetEntries:
 34602 0000608D 268A05                  	mov	AL,[ES:DI]		; end of list
 34603 00006090 08C0                    	or	AL,AL
 34604 00006092 7420                    	jz	short End_List		; yes
 34605                                  
 34606 00006094 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 34607 00006099 38C8                    	cmp	AL,CL			; same length ?
 34608 0000609B 751B                    	jnz	short SkipOne 		; no
 34609                                  
 34610 0000609D 47                      	inc	DI			; es:di -> special name
 34611 0000609E 51                      	push	CX			; save length and name addr
 34612 0000609F 56                      	push	SI
 34613                                  
 34614                                  ; M050 - BEGIN
 34615                                  
 34616 000060A0 50                      	push	ax			; save len
 34617                                  sse_next_char:
 34618 000060A1 AC                      	lodsb
 34619 000060A2 E8D1EE                  	call	UCase
 34620 000060A5 AE                      	scasb
 34621 000060A6 750D                    	jne	short Not_Matched
 34622 000060A8 E2F7                    	loop	sse_next_char
 34623                                  	
 34624                                  ;	repz	cmpsb			; same name ?
 34625                                  ;	jnz	short Not_Matched	; no
 34626                                  
 34627 000060AA 58                      	pop	ax			; take len off the stack
 34628                                  
 34629                                  ; M050 - END
 34630                                  
 34631 000060AB 268B05                  	mov	AX,[ES:DI]		; get special version
 34632 000060AE 36A3[BD0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 34633                                  
 34634                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 34635                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 34636                                  
 34637 000060B2 5E                      	pop	SI
 34638 000060B3 59                      	pop	CX
 34639                                  	; 18/12/2022
 34640                                  	;jmp	SHORT End_List
 34641                                  
 34642                                  	; 18/12/2022
 34643                                  End_List:
 34644 000060B4 C3                      	retn
 34645                                  
 34646                                  Not_Matched:
 34647 000060B5 58                      	pop	ax			; get len from stack ; M050
 34648 000060B6 5E                      	pop	SI			; restore si,cx
 34649 000060B7 59                      	pop	CX
 34650                                  
 34651                                  SkipOne:
 34652 000060B8 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 34653 000060BD 30E4                    	xor	AH,AH			; position to next entry
 34654 000060BF 01C7                    	add	DI,AX
 34655                                  
 34656 000060C1 83C703                  	add	DI,3			; DI -> next entry length
 34657                                  ;***	add	DI,4			; DI -> next entry length
 34658                                  
 34659 000060C4 EBC7                    	jmp	short GetEntries
 34660                                  
 34661                                  	; 18/12/2022
 34662                                  ;End_List:
 34663                                  	;retn
 34664                                  
 34665                                  ; 04/08/2018 - Retro DOS v3.0
 34666                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 34667                                  
 34668                                  ;----------------------------------------------------------------------------
 34669                                  ;SUBTTL Terminate and stay resident handler
 34670                                  ;
 34671                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 34672                                  ;	    truncate the current block.
 34673                                  ;
 34674                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 34675                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 34676                                  ;	    and restoring the vectors.
 34677                                  ;
 34678                                  ;----------------------------------------------------------------------------
 34679                                  
 34680                                  	; 20/05/2019 - Retro DOS v4.0
 34681                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 34682                                  
 34683                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34684                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 34685                                  
 34686                                  _$KEEP_PROCESS:
 34687 000060C6 50                      	push	AX			; keep exit code around
 34688                                  	;mov	byte [SS:EXIT_TYPE],3
 34689 000060C7 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 34690 000060CD 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 34691 000060D2 83FA06                  	cmp	DX,6h			; keep enough space around for system
 34692 000060D5 7303                    	jae	short Keep_Shrink	; info
 34693                                  
 34694 000060D7 BA0600                  	mov	DX,6h
 34695                                  
 34696                                  Keep_Shrink:
 34697 000060DA 89D3                    	mov	BX,DX
 34698 000060DC 53                      	push	BX
 34699 000060DD 06                      	push	ES
 34700 000060DE E82E02                  	call	_$SETBLOCK		; ignore return codes.
 34701 000060E1 1F                      	pop	DS
 34702 000060E2 5B                      	pop	BX
 34703 000060E3 7207                    	jc	short Keep_Done		; failed on modification
 34704                                  
 34705 000060E5 8CD8                    	mov	AX,DS
 34706 000060E7 01D8                    	add	AX,BX
 34707                                  	;mov	[2],ax
 34708 000060E9 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 34709                                  
 34710                                  Keep_Done:
 34711 000060EC 58                      	pop	AX
 34712 000060ED EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 34713                                  
 34714                                  ;----------------------------------------------------------------------------
 34715                                  ;
 34716                                  ;----------------------------------------------------------------------------
 34717                                  
 34718                                  STAY_RESIDENT:
 34719                                  	;mov	ax,3100h
 34720 000060EF B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 34721 000060F2 83C20F                  	add	DX,15
 34722 000060F5 D1DA                    	rcr	DX,1
 34723 000060F7 B103                    	mov	CL,3
 34724 000060F9 D3EA                    	shr	DX,CL
 34725                                  
 34726 000060FB E909A2                  	jmp	COMMAND
 34727                                  
 34728                                  ;----------------------------------------------------------------------------
 34729                                  ;SUBTTL $EXIT - return to parent process
 34730                                  ;   Assembler usage:
 34731                                  ;	    MOV     AL, code
 34732                                  ;	    MOV     AH, Exit
 34733                                  ;	    INT     int_command
 34734                                  ;   Error return:
 34735                                  ;	    None.
 34736                                  ;
 34737                                  ;----------------------------------------------------------------------------
 34738                                  
 34739                                  	; 20/05/2019 - Retro DOS v4.0
 34740                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 34741                                  
 34742                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34743                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 34744                                  _$EXIT:
 34745                                  	; 04/08/2018 - Retro DOS v3.0
 34746                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 34747 000060FE 30E4                    	xor	AH,AH
 34748 00006100 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 34749 00006105 08E4                    	or	AH,AH
 34750                                  	;mov	BYTE [SS:EXIT_TYPE],0
 34751 00006107 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 34752 0000610D 7406                    	jz	short exit_inner
 34753                                  	;mov	BYTE [SS:EXIT_TYPE],1
 34754 0000610F 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 34755                                  
 34756                                  	;entry	Exit_inner
 34757                                  exit_inner:
 34758 00006115 E86DA3                  	call	Get_User_Stack		;PBUGBUG
 34759                                  
 34760 00006118 36FF36[3003]            	push	word [ss:CurrentPDB]
 34761                                  	;pop	word [si+14h]
 34762 0000611D 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 34763 00006120 EB08                    	jmp	short abort_inner
 34764                                  
 34765                                  ;BREAK <$ABORT -- Terminate a process>
 34766                                  ;----------------------------------------------------------------------------
 34767                                  ; Inputs:
 34768                                  ;	user_CS:00 must point to valid program header block
 34769                                  ; Function:
 34770                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 34771                                  ;	to the terminate address
 34772                                  ; Returns:
 34773                                  ;	TO THE TERMINATE ADDRESS
 34774                                  ;----------------------------------------------------------------------------
 34775                                  
 34776                                  _$ABORT:
 34777 00006122 30C0                    	xor	AL,AL
 34778                                  	;mov	byte [SS:EXIT_TYPE],0
 34779                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 34780 00006124 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 34781                                  
 34782                                  	; abort_inner must have AL set as the exit code! The exit type
 34783                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 34784                                  	; to be correct as the one that is terminating.
 34785                                  
 34786                                  abort_inner:
 34787 0000612A 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 34788 0000612F 36A3[3403]              	mov	[SS:exit_code],AX
 34789 00006133 E84FA3                  	call	Get_User_Stack
 34790                                  
 34791                                  	;mov	ds,[si+14h]
 34792 00006136 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 34793 00006139 31C0                    	xor	AX,AX
 34794 0000613B 8EC0                    	mov	ES,AX
 34795                                  	;mov	si,10
 34796 0000613D BE0A00                  	mov	SI,SAVEXIT
 34797                                  	;mov	di,88h
 34798 00006140 BF8800                  	mov	DI,addr_int_terminate
 34799 00006143 A5                      	movsw
 34800 00006144 A5                      	movsw
 34801 00006145 A5                      	movsw
 34802 00006146 A5                      	movsw
 34803 00006147 A5                      	movsw
 34804 00006148 A5                      	movsw
 34805 00006149 E944F2                  	jmp	reset_environment
 34806                                  
 34807                                  ;----------------------------------------------------------------------------
 34808                                  ;
 34809                                  ; fixexepatch will point to this is DOS loads low. 
 34810                                  ;
 34811                                  ;----------------------------------------------------------------------------
 34812                                  ; MSDOS 6.0
 34813                                  
 34814                                  ; 29/04/2019 - Retro DOS v4.0
 34815                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 34816                                  
 34817                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34818                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 34819                                  
 34820                                  RetExePatch: ; proc near
 34821                                  	
 34822 0000614C C3                      	retn
 34823                                  
 34824                                  ;============================================================================
 34825                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 34826                                  ;============================================================================
 34827                                  ; 04/08/2018 - Retro DOS v3.0
 34828                                  ; 14/05/2019 - Retro DOS v4.0
 34829                                  
 34830                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 34831                                  
 34832                                  ;**
 34833                                  ;	Microsoft Confidential
 34834                                  ;	Copyright (C) Microsoft Corporation 1991
 34835                                  ;	All Rights Reserved.
 34836                                  ;
 34837                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 34838                                  ;	I/O specs are defined in DISPATCH.
 34839                                  ;
 34840                                  ;	$ALLOC
 34841                                  ;	$SETBLOCK
 34842                                  ;	$DEALLOC
 34843                                  ;	$AllocOper
 34844                                  ;	arena_free_process
 34845                                  ;	arena_next
 34846                                  ;	check_signature
 34847                                  ;	Coalesce
 34848                                  ;
 34849                                  ;	Modification history:
 34850                                  ;
 34851                                  ;	    Created: ARR 30 March 1983
 34852                                  ;
 34853                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 34854                                  ;		      M003 - added support for link/unlink UMBs from
 34855                                  ;			     DOS arena chain. 7/18/90
 34856                                  ;		      M009 - Added error returns invalid function and 
 34857                                  ;			     arena trashed in set link state call.
 34858                                  ;		      M010 - Release UMB arenas allocated to current PDB
 34859                                  ;			     if UMB_HEAD is initialized.
 34860                                  ;
 34861                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 34862                                  ;			     support. Please see under M009 in 
 34863                                  ;			     ..\inc\dossym.inc. 8/31/90.
 34864                                  ;
 34865                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 34866                                  ;			     sure that umb_head arena is valid and also make
 34867                                  ;			     sure that the previous arena is pointing to 
 34868                                  ;			     umb_head.
 34869                                  ;
 34870                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 34871                                  ;			     set allloc strategy.
 34872                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 34873                                  ;			     bx in AllocSetStrat.
 34874                                  ;
 34875                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 34876                                  ;			     a bit to indicate to dos dispatcher to turn
 34877                                  ;			     a20 off before iret. See M016.
 34878                                  ;
 34879                                  
 34880                                  ;	BREAK	<memory allocation utility routines>
 34881                                  
 34882                                  
 34883                                  ; 15/04/2018 - Retro DOS v2.0
 34884                                  ;----------------------------------------------------------------------------
 34885                                  ; xenix memory calls for MSDOS
 34886                                  ;
 34887                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 34888                                  ; arena_owner_system are all equal to zero and are contained in DI.
 34889                                  ;
 34890                                  ;INCLUDE DOSSEG.ASM
 34891                                  
 34892                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 34893                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 34894                                  
 34895                                  ;.xlist
 34896                                  ;.xcref
 34897                                  ;INCLUDE DOSSYM.ASM
 34898                                  ;INCLUDE DEVSYM.ASM
 34899                                  ;.cref
 34900                                  ;.list
 34901                                  
 34902                                  ;TITLE ALLOC.ASM - memory arena manager
 34903                                  ;NAME Alloc
 34904                                  
 34905                                  ;SUBTTL memory allocation utility routines
 34906                                  ;PAGE
 34907                                  ;
 34908                                  ; arena data
 34909                                  ;
 34910                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 34911                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 34912                                  ;       i_need  FirstArena,WORD         ; first free block found
 34913                                  ;       i_need  BestArena,WORD          ; best free block found
 34914                                  ;       i_need  LastArena,WORD          ; last free block found
 34915                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 34916                                  
 34917                                  ;**	Arena_Free_Process
 34918                                  ;----------------------------------------------------------------------------
 34919                                  ;	Free all arena blocks allocated to a prOcess
 34920                                  ;
 34921                                  ;	ENTRY	(bx) = PID of process
 34922                                  ;	EXIT	none
 34923                                  ;	USES	????? BUGBUG
 34924                                  ;----------------------------------------------------------------------------
 34925                                  
 34926                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34927                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 34928                                  
 34929                                  arena_free_process:
 34930                                  	; 14/05/2019 - Retro DOS v4.0
 34931                                  	; 04/08/2018 - Retro DOS v3.0
 34932 0000614D 36A1[2400]                      MOV	AX,[SS:arena_head]
 34933                                  arena_free_process_start:
 34934 00006151 BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 34935                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 34936 00006154 E83000                          CALL	check_signature         ; ES <- AX, check for valid block
 34937                                  
 34938                                  arena_free_process_loop:
 34939                                          ;retc
 34940 00006157 723D                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 34941 00006159 06                      	PUSH    ES
 34942 0000615A 1F                              POP     DS
 34943                                  	;cmp	[1],bx 
 34944 0000615B 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 34945 0000615F 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 34946                                  	;mov	[1],di
 34947 00006161 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 34948                                  
 34949                                  arena_free_next:
 34950                                  	;cmp	byte [di],5Ah ;'Z'
 34951 00006165 803D5A                          CMP     BYTE [DI],arena_signature_end
 34952                                                                          ; end of road, Jack?
 34953                                          ;retz				; never come back no more
 34954                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 34955                                  	; 14/05/2019
 34956                                  	; MSDOS 6.0
 34957 00006168 7405                    	jz	short arena_chk_umbs
 34958                                          
 34959 0000616A E81300                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 34960 0000616D EBE8                            JMP     SHORT arena_free_process_loop
 34961                                  
 34962                                  	; MSDOS 6.0
 34963                                  arena_chk_umbs:				; M010 - Start
 34964                                  	; 20/05/2019
 34965 0000616F 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 34966 00006173 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 34967 00006176 741E                    	je	short ret_label		; N: we're done
 34968                                  	
 34969 00006178 8CDF                    	mov	di,ds			; di = last arena
 34970 0000617A 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 34971 0000617C 7318                    	jae	short ret_label		; Y: we've scanned umbs also. done.
 34972 0000617E EBD1                    	jmp	short arena_free_process_start
 34973                                  					; M010 - End
 34974                                  ;AFP_RETN:
 34975                                  ;	RETN
 34976                                  
 34977                                  ;	BREAK	<Arena Helper Routines>
 34978                                  
 34979                                  ;**	Arena_Next - Find Next item in Arena
 34980                                  ;----------------------------------------------------------------------------
 34981                                  ;	ENTRY	DS - pointer to block head
 34982                                  ;		(di) = 0
 34983                                  ;	EXIT	AX,ES - pointers to next head
 34984                                  ;		'C' set iff arena damaged
 34985                                  ;----------------------------------------------------------------------------
 34986                                  
 34987                                  arena_next:
 34988 00006180 8CD8                            MOV     AX,DS                   ; AX <- current block
 34989 00006182 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 34990 00006186 40                              INC     AX                      ; remember that header!
 34991                                  
 34992                                  ;       fall into check_signature and return
 34993                                  ;
 34994                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 34995                                  ;       RETN
 34996                                  
 34997                                  ;**	Check_Signature - Check Memory Block Signature
 34998                                  ;----------------------------------------------------------------------------
 34999                                  ;	ENTRY	(AX) = address of block header
 35000                                  ;		(di) = 0
 35001                                  ;	EXIT	 ES = AX
 35002                                  ;		'C' clear if signature good
 35003                                  ;		'C' set if signature bad
 35004                                  ;	USES	ES, Flags
 35005                                  ;----------------------------------------------------------------------------
 35006                                  
 35007                                  check_signature:        
 35008                                  
 35009 00006187 8EC0                    	MOV     ES,AX                   ; ES <- AX
 35010                                  	;cmp	byte [es:di],4Dh ; 'M'
 35011 00006189 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 35012                                                                          ; IF next signature = not_end THEN
 35013 0000618D 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 35014                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 35015 0000618F 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 35016                                                                          ; IF next signature = end then
 35017 00006193 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 35018 00006195 F9                              STC                             ; set error
 35019                                  ret_label: ; MSDOS 6.0
 35020                                  AFP_RETN:
 35021                                   	; Retro DOS v2.0 - 05/03/2018
 35022                                  check_signature_ok:
 35023                                  COALESCE_RETN:
 35024 00006196 C3                      	RETN
 35025                                  
 35026                                  ;**	Coalesce - Combine free blocks ahead with current block
 35027                                  ;----------------------------------------------------------------------------
 35028                                  ;	Coalesce adds the block following the argument to the argument block,
 35029                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 35030                                  ;	some callers (such as $setblock) use it to join a free block to it's
 35031                                  ;	preceeding allocated block.
 35032                                  ;
 35033                                  ;	ENTRY	(ds) = pointer to the head of a free block
 35034                                  ;		(di) = 0
 35035                                  ;	EXIT	'C' clear if OK
 35036                                  ;		  (ds) unchanged, this block updated
 35037                                  ;		  (ax) = address of next block, IFF not at end
 35038                                  ;		'C' set if arena trashed
 35039                                  ;	USES	(cx)
 35040                                  ;----------------------------------------------------------------------------
 35041                                          
 35042                                  Coalesce:
 35043                                  	;cmp	byte [di],5Ah ; 'Z'
 35044 00006197 803D5A                  	CMP     BYTE [DI],arena_signature_end
 35045                                                                          ; IF current signature = END THEN
 35046                                          ;retz				;   GOTO ok
 35047 0000619A 74FA                            jz	short COALESCE_RETN
 35048 0000619C E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 35049                                          ;retc				; IF no error THEN GOTO check
 35050 0000619F 72F5                    	jc	short COALESCE_RETN
 35051                                  
 35052                                  coalesce_check:
 35053                                  	;cmp	[es:1],di
 35054 000061A1 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 35055                                          ;retnz				; IF next block isnt free THEN return
 35056 000061A6 75EE                            JNZ	SHORT COALESCE_RETN
 35057                                  	;mov	cx,[ES:3]
 35058 000061A8 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 35059 000061AD 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 35060                                          ;ADD	[3],CX
 35061 000061AE 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 35062 000061B2 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 35063 000061B5 880D                            MOV     [DI],CL
 35064 000061B7 EBDE                            JMP     SHORT Coalesce		; try again
 35065                                  
 35066                                  ; 04/08/2018 - Retro DOS v3.0
 35067                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 35068                                  
 35069                                  ;	BREAK  <$Alloc - allocate space in memory>
 35070                                  
 35071                                  ; MSDOS 6.0
 35072                                  ;----------------------------------------------------------------------------
 35073                                  ;**	$Alloc - Allocate Memory Space
 35074                                  ;
 35075                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 35076                                  ;	Alloc returns a pointer to a free block of memory that
 35077                                  ;	has the requested size in paragraphs.
 35078                                  ;
 35079                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 35080                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 35081                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 35082                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 35083                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 35084                                  ;
 35085                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 35086                                  ;	starts from arena_head.
 35087                                  ;
 35088                                  ;	Assembler usage:
 35089                                  ;           MOV     BX,size
 35090                                  ;           MOV     AH,Alloc
 35091                                  ;           INT     21h
 35092                                  ;
 35093                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 35094                                  ;	so that we start searching the arena at it's first non-trivial free
 35095                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 35096                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 35097                                  ;	doesn't have too many memory objects in it beyond the first free one.
 35098                                  ;	verify that this is true; if so, this can stay as is
 35099                                  ;
 35100                                  ;	ENTRY	(bx) = requested size, in bytes
 35101                                  ;		(DS) = (ES) = DOSGROUP
 35102                                  ;	EXIT	'C' clear if memory allocated
 35103                                  ;		  (ax:0) = address of requested memory
 35104                                  ;		'C' set if request failed
 35105                                  ;		  (AX) = error_not_enough_memory
 35106                                  ;		    (bx) = max size we could have allocated
 35107                                  ;		  (ax) = error_arena_trashed
 35108                                  ;	USES	All
 35109                                  ;----------------------------------------------------------------------------
 35110                                  
 35111                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35112                                  ;----------------------------------------------------------------------------
 35113                                  ;SUBTTL $Alloc - allocate space in memory
 35114                                  ;
 35115                                  ;   Assembler usage:
 35116                                  ;           MOV     BX,size
 35117                                  ;           MOV     AH,Alloc
 35118                                  ;           INT     21h
 35119                                  ;         AX:0 is pointer to allocated memory
 35120                                  ;         BX is max size if not enough memory
 35121                                  ;
 35122                                  ;   Description:
 35123                                  ;           Alloc returns  a  pointer  to  a  free  block of
 35124                                  ;       memory that has the requested  size  in  paragraphs.
 35125                                  ;
 35126                                  ;   Error return:
 35127                                  ;           AX = error_not_enough_memory
 35128                                  ;              = error_arena_trashed
 35129                                  ;----------------------------------------------------------------------------
 35130                                  
 35131                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 35132                                  
 35133                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35134                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 35135                                  
 35136                                  _$ALLOC:
 35137                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 35138                                  	; 14/05/2019 - Retro DOS v4.0
 35139                                  	; 04/08/2018 - Retro DOS v3.0
 35140                                  	;EnterCrit critMem
 35141 000061B9 E83CB1                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35142                                  
 35143                                  ; 17/12/2022
 35144                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35145                                  ;%if 0
 35146                                  	; 14/05/2019
 35147 000061BC 16                      	push	ss
 35148 000061BD 1F                      	pop	ds
 35149                                  
 35150                                  	; MSDOS 6.0
 35151                                  	;mov	ax,[ss:arena_head]
 35152                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35153                                  
 35154 000061BE A1[2400]                	mov	ax,[arena_head]
 35155 000061C1 A3[8E00]                	mov	[START_ARENA],ax			
 35156                                  	
 35157                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35158 000061C4 F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 35159                                  					; Q: should we start scanning from 
 35160                                  					;    UMB's
 35161 000061C9 740D                    	jz	short norm_alloc	; N: scan from arena_head
 35162                                  		
 35163                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35164                                  	;cmp	word [UMB_HEAD],-1
 35165                                  	;je	short norm_alloc	; N: scan from arena_head
 35166                                  
 35167                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35168 000061CB F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 35169 000061D0 7406                    	jz	short norm_alloc	; N: scan from arena_head
 35170                                  	
 35171                                  	;mov	ax,[ss:UMB_HEAD]
 35172                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35173 000061D2 A1[8C00]                	mov	ax,[UMB_HEAD]
 35174 000061D5 A3[8E00]                	mov	[START_ARENA],ax
 35175                                  					; M000 - end
 35176                                  norm_alloc:
 35177 000061D8 31C0                            XOR     AX,AX
 35178 000061DA 89C7                            MOV     DI,AX
 35179                                  	; 15/03/2018
 35180                                          ;MOV	[SS:FirstArena],AX	; init the options
 35181                                          ;MOV	[SS:BestArena],AX
 35182                                          ;MOV	[SS:LastArena],AX
 35183                                  	; 14/05/2019
 35184 000061DC A3[4003]                	MOV	[FirstArena],AX		; init the options
 35185 000061DF A3[4203]                        MOV	[BestArena],AX
 35186 000061E2 A3[4403]                        MOV	[LastArena],AX
 35187 000061E5 50                              PUSH    AX                      ; alloc_max <- 0
 35188                                  	; 04/08/2018
 35189                                  start_scan:
 35190                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35191                                  	;MOV	AX,[arena_head]
 35192                                  
 35193                                  	; 14/05/2019	
 35194                                  	; MSDOS 6.0
 35195                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35196 000061E6 A1[8E00]                	mov	ax,[START_ARENA]
 35197                                  
 35198                                  	; 27/09/2023 (BugFix) (*) 
 35199                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 35200                                  start_scan_x:
 35201                                  
 35202 000061E9 E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 35203 000061EC 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 35204                                  
 35205                                  ;%endif
 35206                                  
 35207                                  ; 17/12/2022
 35208                                  %if 0
 35209                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35210                                  
 35211                                  	; MSDOS 6.0
 35212                                  	mov	ax,[ss:arena_head]
 35213                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35214                                  
 35215                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35216                                  					; Q: should we start scanning from 
 35217                                  					;    UMB's
 35218                                  	jz	short norm_alloc	; N: scan from arena_head
 35219                                  		
 35220                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35221                                  	;je	short norm_alloc	; N: scan from arena_head
 35222                                  
 35223                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35224                                  	jz	short norm_alloc	; N: scan from arena_head
 35225                                  	
 35226                                  	mov	ax,[ss:UMB_HEAD]
 35227                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35228                                  					; M000 - end
 35229                                  norm_alloc:
 35230                                          XOR     AX,AX
 35231                                          MOV     DI,AX
 35232                                  	; 15/03/2018
 35233                                  	MOV	[SS:FirstArena],AX	; init the options
 35234                                  	MOV	[SS:BestArena],AX
 35235                                  	MOV	[SS:LastArena],AX
 35236                                          PUSH    AX                      ; alloc_max <- 0
 35237                                  	; 04/08/2018
 35238                                  start_scan:
 35239                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35240                                  	; 14/05/2019	
 35241                                  	; MSDOS 6.0
 35242                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35243                                  	CALL    check_signature         ; ES <- AX, carry set if error
 35244                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 35245                                  %endif
 35246                                  
 35247                                  alloc_scan:
 35248 000061EE 06                              PUSH    ES
 35249 000061EF 1F                              POP     DS                      ; DS <- ES
 35250 000061F0 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 35251 000061F4 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 35252                                  
 35253                                  alloc_next:
 35254                                  	; MSDOS 6.0			; M000 - start 
 35255 000061F6 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35256 000061FC 741C                    	jz	short norm_strat	; N: see if we reached last arena
 35257                                  	
 35258 000061FE 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 35259                                  					; Q: is alloc strategy high_first
 35260 00006204 7414                    	jz	short norm_strat	; N: see if we reached last arena
 35261 00006206 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 35262 0000620A 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 35263                                  					;    arena_head
 35264 0000620F 7509                    	jne	short norm_strat	; N: see if we reached last arena
 35265 00006211 8CD8                    	mov	ax,ds			; ax = current block
 35266 00006213 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 35267 00006218 EB03                    	jmp	short alloc_chk_end
 35268                                  
 35269                                  norm_strat:
 35270                                  	;cmp	byte [di],5Ah ; 'Z'
 35271 0000621A 803D5A                          CMP     BYTE [DI],arena_signature_end
 35272                                                                          ; IF current block is last THEN
 35273                                  alloc_chk_end:
 35274 0000621D 740E                            JZ      SHORT alloc_end		;   GOTO end
 35275 0000621F E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 35276 00006222 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 35277                                  
 35278                                  alloc_err:
 35279 00006224 58                              POP     AX
 35280                                  
 35281                                  alloc_trashed:
 35282                                  	;LeaveCrit critMem
 35283 00006225 E8EBB0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0	
 35284                                          ;error	error_arena_trashed
 35285                                  	;mov	al,7
 35286 00006228 B007                    	MOV	AL,error_arena_trashed
 35287                                  alloc_errj:
 35288 0000622A E917A4                  	JMP	SYS_RET_ERR
 35289                                  
 35290                                  alloc_end:
 35291                                  	; 18/05/2019
 35292 0000622D 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 35293 00006233 7403                    	jz	short alloc_chk 
 35294 00006235 E98400                  	jmp	alloc_do_split
 35295                                  
 35296                                  alloc_chk:
 35297                                  	; MSDOS 6.0
 35298 00006238 36A1[2400]              	mov	ax,[ss:arena_head]
 35299 0000623C 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 35300 00006241 740E                    	je	short alloc_fail	; Y: not enough memory
 35301                                  					; N:
 35302                                  					; Q: is the alloc strat HIGH_ONLY
 35303 00006243 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 35304 00006249 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 35305                                  	
 35306 0000624B 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 35307                                  	; 27/09/2023 (*)
 35308 0000624F EB98                    	jmp	short start_scan_x ; (*) ; (BugFix)
 35309                                  	;jmp	short start_scan
 35310                                  					; M000 - end
 35311                                  
 35312                                  alloc_fail:
 35313                                          ;invoke Get_User_Stack
 35314 00006251 E831A2                          CALL	Get_User_Stack
 35315 00006254 5B                      	POP     BX
 35316                                          ;MOV	[SI].user_BX,BX
 35317                                  	;MOV	[SI+2],BX
 35318 00006255 895C02                  	mov	[SI+user_env.user_BX],bx
 35319                                  	;LeaveCrit critMem
 35320 00006258 E8B8B0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35321                                  	;error	error_not_enough_memory
 35322                                  	;mov	al,8
 35323 0000625B B008                    	MOV	AL,error_not_enough_memory
 35324                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35325 0000625D EBCB                    	jmp	short alloc_errj
 35326                                  	;JMP	SYS_RET_ERR
 35327                                  
 35328                                  alloc_free:
 35329 0000625F E835FF                          CALL    Coalesce		; add following free block to current
 35330 00006262 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 35331 00006264 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35332 00006268 5A                              POP     DX                      ; check for max found size
 35333 00006269 39D1                            CMP     CX,DX
 35334 0000626B 7602                            JNA     SHORT alloc_test
 35335 0000626D 89CA                            MOV     DX,CX
 35336                                  
 35337                                  alloc_test:
 35338 0000626F 52                              PUSH    DX
 35339 00006270 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 35340 00006272 7782                    	JA      SHORT alloc_next	;   GOTO next
 35341                                  
 35342                                  	; 15/03/2018
 35343 00006274 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 35344 0000627A 7505                    	JNZ	SHORT alloc_best
 35345 0000627C 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found	
 35346                                  alloc_best:
 35347 00006281 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 35348 00006287 740E                            JZ      SHORT alloc_make_best	; initial best
 35349 00006289 06                              PUSH	ES
 35350 0000628A 368E06[4203]                    MOV     ES,[SS:BestArena]
 35351 0000628F 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 35352 00006294 07                              POP	ES
 35353 00006295 7605                            JBE     SHORT alloc_last
 35354                                  alloc_make_best:
 35355 00006297 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 35356                                  alloc_last:
 35357 0000629C 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 35358 000062A1 E952FF                          JMP     alloc_next
 35359                                  ;
 35360                                  ; split the block high
 35361                                  ;
 35362                                  alloc_do_split_high:
 35363 000062A4 368E1E[4403]                    MOV     DS,[SS:LastArena]
 35364 000062A9 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35365 000062AD 29D9                            SUB     CX,BX
 35366 000062AF 8CDA                            MOV     DX,DS
 35367 000062B1 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 35368 000062B3 01CA                            ADD     DX,CX                   ; point to next block
 35369 000062B5 8EC2                            MOV     ES,DX                   ; no decrement!
 35370 000062B7 49                              DEC     CX
 35371 000062B8 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 35372 000062BA EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 35373                                  ;
 35374                                  ; we have scanned memory and have found all appropriate blocks
 35375                                  ; check for the type of allocation desired; first and best are identical
 35376                                  ; last must be split high
 35377                                  ;
 35378                                  alloc_do_split:
 35379                                  
 35380                                  ; 17/12/2022
 35381                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35382                                  ;%if 0
 35383                                  	; 14/05/2019
 35384                                  	; MSDOS 6.0			; M000 - start
 35385                                  	;xor	cx,cx
 35386 000062BC 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 35387                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35388 000062C1 80E13F                  	and	cl,3Fh
 35389                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35390 000062C4 80F901                  	cmp	cl,BEST_FIT
 35391 000062C7 77DB                    	ja	short alloc_do_split_high
 35392                                  ;%endif
 35393                                  
 35394                                  	; 17/12/2022
 35395                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35396                                  	; MSDOS 6.0 & MSDOS 5.0
 35397                                  	;xor	cx,cx
 35398                                  	;mov	cl,[ss:AllocMethod]
 35399                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35400                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35401                                  	;ja	short alloc_do_split_high
 35402                                  
 35403                                  	; 15/03/2018
 35404                                          ;;CMP	BYTE [SS:AllocMethod], 1
 35405                                  	; 04/08/2018
 35406                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 35407                                          ;JA	SHORT alloc_do_split_high
 35408                                          
 35409 000062C9 368E1E[4003]            	MOV     DS,[SS:FirstArena]        
 35410 000062CE 7205                    	JB      SHORT alloc_get_size
 35411 000062D0 368E1E[4203]            	MOV     DS,[SS:BestArena]
 35412                                  
 35413                                  alloc_get_size:
 35414 000062D5 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35415 000062D9 29D9                            SUB     CX,BX                   ; get room left over
 35416 000062DB 8CD8                            MOV     AX,DS
 35417 000062DD 89C2                            MOV     DX,AX                   ; save for owner setting
 35418 000062DF 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 35419 000062E1 01D8                            ADD     AX,BX
 35420 000062E3 40                              INC     AX                      ; remember the header
 35421 000062E4 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 35422 000062E6 49                              DEC     CX                      ; CX <- size of split block
 35423                                  alloc_set_sizes:
 35424 000062E7 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 35425 000062EB 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 35426                                  	;mov	bl,4Dh ; 'M'
 35427 000062F0 B34D                            MOV     BL,arena_signature_normal
 35428 000062F2 861D                            XCHG    BL,[DI]			; current signature <- 4D
 35429 000062F4 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 35430 000062F7 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35431                                  
 35432                                  alloc_set_owner:
 35433 000062FC 8EDA                            MOV     DS,DX
 35434 000062FE 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 35435 00006302 A30100                          MOV     [ARENA.OWNER],AX
 35436 00006305 8CD8                            MOV     AX,DS
 35437 00006307 40                              INC     AX
 35438 00006308 5B                              POP     BX
 35439                                  	;LeaveCrit critMem
 35440 00006309 E807B0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35441                                  	
 35442                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35443                                  alloc_ok:
 35444                                          ;transfer SYS_RET_OK
 35445 0000630C E92CA3                  	JMP	SYS_RET_OK
 35446                                  
 35447                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 35448                                  
 35449                                  ; MSDOS 6.0
 35450                                  ;----------------------------------------------------------------------------
 35451                                  ;**	$SETBLOCK - Change size of an Allocated Block
 35452                                  ;
 35453                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 35454                                  ;	any following free space onto this block; then we try to trim the
 35455                                  ;	block down to the size requested.
 35456                                  ;
 35457                                  ;	Note that if the guy wants to grow the block but that growth fails,
 35458                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 35459                                  ;	Thus the maximum-size-possible value that we return has already
 35460                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 35461                                  ;
 35462                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 35463                                  ;		finish it's work. For this reason we build the allocsf
 35464                                  ;		structure on the frame, to make us compatible with $ALLOCs
 35465                                  ;		code.
 35466                                  ;
 35467                                  ;	ENTRY	(es) = segment of old block
 35468                                  ;		(bx) = newsize
 35469                                  ;		(ah) = SETBLOCK
 35470                                  ;
 35471                                  ;	EXIT	'C' clear if OK
 35472                                  ;		'C' set if error
 35473                                  ;		  (ax) = error_invalid_block
 35474                                  ;		       = error_arena_trashed
 35475                                  ;		       = error_not_enough_memory
 35476                                  ;		       = error_invalid_function
 35477                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 35478                                  ;	USES	???? BUGBUG
 35479                                  ;----------------------------------------------------------------------------
 35480                                  
 35481                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35482                                  ;----------------------------------------------------------------------------
 35483                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 35484                                  ;
 35485                                  ;   Assembler usage:
 35486                                  ;           MOV     ES,block
 35487                                  ;           MOV     BX,newsize
 35488                                  ;           MOV     AH,setblock
 35489                                  ;           INT     21h
 35490                                  ;         if setblock fails for growing, BX will have the maximum
 35491                                  ;         size possible
 35492                                  ;   Error return:
 35493                                  ;           AX = error_invalid_block
 35494                                  ;              = error_arena_trashed
 35495                                  ;              = error_not_enough_memory
 35496                                  ;              = error_invalid_function
 35497                                  ;----------------------------------------------------------------------------
 35498                                  
 35499                                  _$SETBLOCK:        
 35500                                  	; 04/08/2018 - Retro DOS v3.0
 35501                                  	;EnterCrit   critMem
 35502 0000630F E8E6AF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35503                                  
 35504 00006312 BF0000                  	MOV     DI,ARENA.SIGNATURE
 35505 00006315 8CC0                            MOV     AX,ES
 35506 00006317 48                              DEC     AX
 35507 00006318 E86CFE                          CALL    check_signature
 35508 0000631B 7303                            JNC     SHORT setblock_grab
 35509                                  
 35510                                  setblock_bad:
 35511 0000631D E905FF                          JMP     alloc_trashed
 35512                                  
 35513                                  setblock_grab:
 35514 00006320 8ED8                            MOV     DS,AX
 35515 00006322 E872FE                          CALL    Coalesce
 35516 00006325 72F6                            JC      SHORT setblock_bad
 35517 00006327 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35518 0000632B 51                              PUSH    CX
 35519 0000632C 39CB                            CMP     BX,CX
 35520 0000632E 76A5                            JBE     SHORT alloc_get_size
 35521 00006330 E91EFF                          JMP     alloc_fail
 35522                                  
 35523                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 35524                                  
 35525                                  ; MSDOS 6.0
 35526                                  ;----------------------------------------------------------------------------
 35527                                  ;**	$DEALLOC - Free Heap Memory
 35528                                  ;
 35529                                  ;	ENTRY	(es) = address of item
 35530                                  ;
 35531                                  ;	EXIT	'C' clear of OK
 35532                                  ;		'C' set if error
 35533                                  ;		  (AX) = error_invalid_block
 35534                                  ;	USES	???? BUGBUG
 35535                                  
 35536                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35537                                  ;----------------------------------------------------------------------------
 35538                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 35539                                  ;
 35540                                  ;   Assembler usage:
 35541                                  ;           MOV     ES,block
 35542                                  ;           MOV     AH,dealloc
 35543                                  ;           INT     21h
 35544                                  ;
 35545                                  ;   Error return:
 35546                                  ;           AX = error_invalid_block
 35547                                  ;              = error_arena_trashed
 35548                                  ;---------------------------------------------------------------------------- 
 35549                                  
 35550                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35551                                  _$DEALLOC:
 35552                                  	; 14/05/2019 - Retro DOS v4.0    
 35553                                  	; 04/08/2018 - Retro DOS v3.0
 35554                                  	;EnterCrit   critMem
 35555 00006333 E8C2AF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35556                                  
 35557                                  	; MSDOS 6.0			; M016, M068 - Start
 35558 00006336 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 35559                                  					; Q: was the previous call an int 21
 35560                                  					;    exec call
 35561 0000633C 740D                    	jz	short deallocate	; N: continue
 35562 0000633E 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 35563 00006344 7505                    	jne	short deallocate	; N: continue
 35564                                  	;mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 35565                                  	; 25/09/2023
 35566 00006346 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
 35567                                  deallocate:				; M016, M068 - End
 35568 0000634B BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 35569 0000634E 8CC0                            MOV     AX,ES
 35570 00006350 48                              DEC     AX
 35571 00006351 E833FE                          CALL    check_signature
 35572 00006354 720A                            JC      SHORT dealloc_err
 35573 00006356 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35574                                  	;LeaveCrit critMem
 35575 0000635B E8B5AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35576                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35577                                          ;transfer SYS_RET_OK
 35578                                  dealloc_ok:
 35579 0000635E EBAC                    	jmp	short alloc_ok
 35580                                  	;JMP	SYS_RET_OK
 35581                                  
 35582                                  dealloc_err:
 35583                                  	;LeaveCrit critMem
 35584 00006360 E8B0AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35585                                          ;error	error_invalid_block
 35586                                  	;mov	al,9
 35587 00006363 B009                    	MOV	AL,error_invalid_block
 35588                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35589                                  dealloc_errj:
 35590                                  AllocOperErrj:	; 17/12/2022
 35591 00006365 E9DCA2                  	JMP	SYS_RET_ERR
 35592                                  
 35593                                  ;	BREAK $AllocOper - get/set allocation mechanism
 35594                                  
 35595                                  ; MSDOS 6.0
 35596                                  ;----------------------------------------------------------------------------
 35597                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 35598                                  ;
 35599                                  ;	Assembler usage:
 35600                                  ;           MOV     AH,AllocOper
 35601                                  ;           MOV     BX,method
 35602                                  ;           MOV     AL,func
 35603                                  ;           INT     21h
 35604                                  ;
 35605                                  ;	ENTRY	
 35606                                  ;		(al) = 0
 35607                                  ;		  Get allocation Strategy in (ax)
 35608                                  ;
 35609                                  ;		(al) = 1, (bx) = method = zw0000xy
 35610                                  ;		  Set allocation strategy.
 35611                                  ;		   w  = 1  => HIGH_ONLY
 35612                                  ;		   z  = 1  => HIGH_FIRST
 35613                                  ;		   xy = 00 => FIRST_FIT
 35614                                  ;		      = 01 => BEST_FIT
 35615                                  ;		      = 10 => LAST_FIT
 35616                                  ;
 35617                                  ;		(al) = 2
 35618                                  ;		  Get UMB link state in (al)
 35619                                  ;
 35620                                  ;		(al) = 3
 35621                                  ;		  Set UMB link state
 35622                                  ;		   (bx) = 0 => Unlink UMBs
 35623                                  ;		   (bx) = 1 => Link UMBs
 35624                                  ;
 35625                                  ;
 35626                                  ;	EXIT	'C' clear if OK
 35627                                  ;
 35628                                  ;		 if (al) = 0
 35629                                  ;		  (ax) = existing method
 35630                                  ;		 if (al) = 1
 35631                                  ;		  Sets allocation strategy
 35632                                  ;		 if (al) = 2
 35633                                  ;		  (al) = 0 => UMBs not linked
 35634                                  ;		  (al) = 1 => UMBs linked in
 35635                                  ;		 if (al) = 3
 35636                                  ;		  Links/Unlinks the UMBs into DOS chain
 35637                                  ;
 35638                                  ;		'C' set if error
 35639                                  ;		  AX = error_invalid_function
 35640                                  ;
 35641                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 35642                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 35643                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 35644                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 35645                                  ;		    arena' if an arena sig is damaged.
 35646                                  ;----------------------------------------------------------------------------
 35647                                  
 35648                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35649                                  ;----------------------------------------------------------------------------
 35650                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 35651                                  ;
 35652                                  ;   Assembler usage:
 35653                                  ;           MOV     AH,AllocOper
 35654                                  ;           MOV     BX,method
 35655                                  ;           MOV     AL,func
 35656                                  ;           INT     21h
 35657                                  ;
 35658                                  ;   Error return:
 35659                                  ;           AX = error_invalid_function
 35660                                  ;----------------------------------------------------------------------------
 35661                                  
 35662                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35663                                  _$ALLOCOPER:
 35664                                  	; 14/05/2019 - Retro DOS v4.0
 35665                                  	; MSDOS 6.0
 35666 00006368 08C0                    	or	al,al ; 0
 35667 0000636A 741E                    	jz	short AllocGetStrat
 35668                                  	; 17/12/2022
 35669                                  	;cmp	al,1
 35670                                  	;jz	short AllocSetStrat
 35671                                  
 35672                                  	; 01/12/2022
 35673                                  	;cmp	al, 2
 35674                                  	;jb	short AllocSetStrat
 35675                                  	;ja	short AllocSetLink
 35676                                  	;;jmp	short AllocGetLink
 35677                                  ;AllocGetLink:
 35678                                  	; MSDOS 6.0
 35679                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 35680                                  	;and 	al,LINKSTATE		
 35681                                  	;;transfer SYS_RET_OK
 35682                                  	;jmp	SYS_RET_OK
 35683                                  
 35684 0000636C 3C02                    	cmp	al,2
 35685                                  	; 17/12/2022
 35686 0000636E 7223                    	jb	short AllocSetStrat ; al = 1
 35687 00006370 7432                    	je	short AllocGetLink
 35688                                  
 35689                                  	;cmp	al,2
 35690                                  	;jz	short AllocGetLink
 35691 00006372 3C03                    	cmp	al,3
 35692 00006374 7436                    	jz	short AllocSetLink
 35693                                  
 35694                                  	; 15/04/2018
 35695                                  	;CMP	AL,1
 35696                                          ;JB	SHORT AllocOperGet
 35697                                          ;JZ	SHORT AllocOperSet
 35698                                  
 35699                                  AllocOperError:
 35700                                  	; 04/08/2018 - Retro DOS v3.0
 35701                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 35702                                  	;mov	byte [ss:EXTERR_LOCUS],5
 35703 00006376 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35704                                  	;error	error_invalid_function
 35705                                  	;mov	al,1
 35706 0000637C B001                    	MOV	AL,error_invalid_function
 35707                                  	; 17/12/2022
 35708                                  ;AllocOperErrj:
 35709                                  	;JMP	SYS_RET_ERR
 35710                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35711                                  	;jmp	short dealloc_errj
 35712                                  	; 17/12/2022
 35713 0000637E EBE5                    	jmp	short AllocOperErrj
 35714                                  
 35715                                  AllocArenaError:
 35716                                  	; MSDOS 6.0
 35717 00006380 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35718                                  					; M009: Extended Error Locus
 35719                                  	;error	error_arena_trashed	; M009:
 35720                                  	;mov	al,7
 35721 00006386 B007                    	MOV	AL,error_arena_trashed
 35722                                  	;JMP	SYS_RET_ERR
 35723 00006388 EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 35724                                  
 35725                                  AllocGetStrat: 
 35726                                  	; MSDOS 6.0
 35727                                  AllocOperGet:
 35728 0000638A 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 35729 0000638E 30E4                            XOR     AH,AH
 35730                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35731                                  	;transfer SYS_RET_OK
 35732                                  AllocOperOk:
 35733                                  	; 17/12/2022
 35734                                  	;jmp	short dealloc_ok
 35735 00006390 E9A8A2                  	JMP	SYS_RET_OK
 35736                                  
 35737                                  AllocSetStrat: 
 35738                                  	; 14/05/2019
 35739                                  	; MSDOS 6.0
 35740 00006393 53                      	push	bx			; M000 - start
 35741                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35742                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 35743                                  	; 17/12/2022
 35744 00006394 80E33F                  	and	bl,3Fh
 35745 00006397 83FB02                  	cmp	bx,2			; BX must be 0-2
 35746                                  	;cmp	bl,2
 35747 0000639A 5B                      	pop	bx			; M000 - end
 35748 0000639B 77D9                    	ja	short AllocOperError
 35749                                  
 35750                                  AllocOperSet:
 35751 0000639D 36881E[0203]                    MOV     [SS:AllocMethod],BL
 35752                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35753                                  	;transfer SYS_RET_OK
 35754                                  AllocOperOkj:
 35755 000063A2 EBEC                    	jmp	short AllocOperOk
 35756                                  	;JMP	SYS_RET_OK
 35757                                  
 35758                                  AllocGetLink:
 35759                                  	; MSDOS 6.0
 35760 000063A4 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 35761                                  	;and	al,1
 35762 000063A8 2401                    	and 	al,LINKSTATE		
 35763                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35764                                  	;transfer SYS_RET_OK
 35765                                  AllocOperOkj2:
 35766                                  	; 17/12/2022
 35767 000063AA EBE4                    	jmp	short AllocOperOk
 35768                                  	;jmp	short AllocOperOkj
 35769                                  	;;JMP	SYS_RET_OK
 35770                                  
 35771                                  AllocSetLink:
 35772                                  	; MSDOS 6.0			; M009 - start
 35773 000063AC 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 35774 000063B1 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 35775 000063B4 74C0                    	je	short AllocOperError	; N: error
 35776                                  					; Y: continue
 35777                                  					; M009 - end
 35778 000063B6 83FB01                  	cmp	bx,1			
 35779 000063B9 7204                    	jb	short UnlinkUmbs
 35780 000063BB 741C                    	jz	short LinkUmbs
 35781                                  	
 35782 000063BD EBB7                    	jmp	short AllocOperError
 35783                                  	
 35784                                  UnlinkUmbs:
 35785                                  	;test	byte [ss:UMBFLAG],1
 35786 000063BF 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 35787 000063C5 7410                    	jz	short unlinked		; Y: return 
 35788                                  	
 35789 000063C7 E82900                  	call	GetLastArena		; get arena before umb_head in DS
 35790 000063CA 72B4                    	jc	short AllocArenaError	; M009: arena trashed
 35791                                  	
 35792                                  					; make it last
 35793 000063CC C60600005A              	mov	byte [0],arena_signature_end
 35794                                  	
 35795                                  	;and	byte [ss:UMBFLAG],0FEh
 35796 000063D1 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 35797                                  	
 35798                                  unlinked:
 35799                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35800                                  	;transfer SYS_RET_OK
 35801                                  	; 17/12/2022
 35802 000063D7 EBB7                    	jmp	short AllocOperOk
 35803                                  	;jmp	short AllocOperOkj2
 35804                                  	;;JMP	SYS_RET_OK
 35805                                  
 35806                                  LinkUmbs:
 35807 000063D9 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 35808 000063DF 7510                    	jnz	short linked		; Y: return
 35809                                  	
 35810 000063E1 E80F00                  	call	GetLastArena		; get arena before umb_head
 35811 000063E4 729A                    	jc	short AllocArenaError	; M009: arena trashed
 35812                                  	
 35813                                  					; make it normal. M061: ds points to
 35814                                  					; arena before umb_head
 35815 000063E6 C60600004D              	mov	byte [0],arena_signature_normal
 35816                                  	
 35817 000063EB 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 35818                                  linked:
 35819                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35820                                  	;transfer SYS_RET_OK
 35821                                  	; 17/12/2022
 35822 000063F1 EB9D                    	jmp	short AllocOperOk
 35823                                  	;jmp	short unlinked
 35824                                  	;;JMP	SYS_RET_OK
 35825                                  
 35826                                  ; MSDOS 6.0
 35827                                  ;--------------------------------------------------------------------------
 35828                                  ; Procedure Name : GetLastArena		-  M003
 35829                                  ;
 35830                                  ; Inputs	 : cx = umb_head
 35831                                  ;
 35832                                  ;
 35833                                  ; Outputs	 : If UMBs are linked
 35834                                  ;			ES = umb_head
 35835                                  ;			DS = arena before umb_head
 35836                                  ;		   else
 35837                                  ;			DS = last arena
 35838                                  ;			ES = next arena. will be umb_head if NC.
 35839                                  ;
 35840                                  ;		   CY if error
 35841                                  ;
 35842                                  ; Uses		 : DS, ES, DI, BX
 35843                                  ;--------------------------------------------------------------------------
 35844                                  
 35845                                  ; 14/05/2019 - Retro DOS v4.0
 35846                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 35847                                  
 35848                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35849                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 35850                                  	
 35851                                  GetLastArena:
 35852 000063F3 50                      	push	ax			; save ax
 35853                                  
 35854 000063F4 36A1[2400]              	mov	ax,[ss:arena_head]
 35855 000063F8 8EC0                    	mov	es,ax			; es = arena_head
 35856 000063FA 31FF                    	xor	di,di
 35857                                  
 35858 000063FC 26803D5A                	cmp     byte [es:di],arena_signature_end
 35859                                  					; Q: is this the last arena
 35860 00006400 7419                    	je	short GLA_done		; Y: return last arena in ES		
 35861                                  					
 35862                                  GLA_next:
 35863 00006402 8ED8                    	mov	ds,ax
 35864 00006404 E879FD                  	call	arena_next		; ax, es -> next arena
 35865                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35866                                  	;jc	short GLA_err
 35867                                  	; 17/12/2022
 35868 00006407 7228                    	jc	short GLA_err2
 35869                                  
 35870 00006409 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 35871 0000640F 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is 
 35872                                  					;    umb_head
 35873                                  					; N: terminating condition is 05Ah
 35874                                  
 35875 00006411 26803D5A                	cmp     byte [es:di],arena_signature_end
 35876                                  					; Q: is this the last arena
 35877 00006415 EB02                    	jmp	short GLA_@f
 35878                                  GLA_chkumb:
 35879 00006417 39C8                    	cmp	ax,cx			; Q: is this umb_head
 35880                                  GLA_@f:
 35881 00006419 75E7                    	jne	short GLA_next		; N: get next arena
 35882                                  
 35883                                  GLA_done:
 35884                                  					; M061 - Start
 35885 0000641B 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 35886 00006421 750B                    	jnz	short GLA_ret		; Y: we're done
 35887                                  					; N: let us confirm that the next 
 35888                                  					;    arena is umb_head
 35889 00006423 8ED8                    	mov	ds,ax
 35890 00006425 E858FD                  	call	arena_next		; ax, es -> next arena
 35891                                  	;jc	short GLA_err
 35892 00006428 7207                    	jc	short GLA_err2
 35893 0000642A 39C8                    	cmp	ax,cx			; Q: is this umb_head
 35894 0000642C 7502                    	jne	short GLA_err		; N: error
 35895                                  					; M061 - End
 35896                                  GLA_ret:
 35897                                  	; 17/12/2022				
 35898                                  	;clc
 35899                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35900                                  	;clc
 35901 0000642E 58                      	pop	ax			; M061
 35902 0000642F C3                      	retn				; M061
 35903                                  
 35904                                  GLA_err:
 35905 00006430 F9                      	stc				; M061
 35906                                  GLA_err2:
 35907 00006431 58                      	pop	ax
 35908 00006432 C3                      	retn
 35909                                  
 35910                                  ;============================================================================
 35911                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 35912                                  ;============================================================================
 35913                                  ; 04/08/2018 - Retro DOS v3.0
 35914                                  
 35915                                  ;	TITLE SRVCALL - Server DOS call
 35916                                  ;	NAME  SRVCALL
 35917                                  
 35918                                  ;**	SRVCALL.ASM - Server DOS call functions
 35919                                  ;
 35920                                  ;
 35921                                  ;	$ServerCall
 35922                                  ;
 35923                                  ;	Modification history:
 35924                                  ;
 35925                                  ;	    Created: ARR 08 August 1983
 35926                                  
 35927                                  ;AsmVars <Installed>
 35928                                  
 35929                                  ;include dpl.asm
 35930                                  
 35931                                  ;Installed = TRUE
 35932                                  
 35933                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 35934                                  ; ---------------------------------------------------------------------------
 35935                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35936                                  
 35937                                  ;BREAK <ServerCall -- Server DOS call>
 35938                                  
 35939                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 35940                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 35941                                  
 35942                                  ;hkn; TABLE	SEGMENT
 35943                                  ;Public SRVC001S,SRVC001E
 35944                                  ;SRVC001S label byte
 35945                                  
 35946                                  SRVC001S:
 35947                                  
 35948 00006433 [3764]                  SERVERTAB:	dw	SERVER_DISP
 35949 00006435 [8964]                  SERVERLEAVE:	dw	SERVERRETURN
 35950 00006437 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 35951 00006438 [F164]                  		dw	SRV_CALL	; 0
 35952 0000643A [8A64]                  		dw	COMMIT_ALL	; 1
 35953 0000643C [C064]                  		dw	CLOSE_NAME	; 2
 35954 0000643E [CB64]                  		dw	CLOSE_UID	; 3
 35955 00006440 [D264]                  		dw	CLOSE_UID_PID	; 4
 35956 00006442 [D964]                  		dw	GET_LIST	; 5
 35957 00006444 [3265]                  		dw	GET_DOS_DATA	; 6
 35958 00006446 [5665]                  		dw	SPOOL_OPER	; 7
 35959 00006448 [5665]                  		dw	SPOOL_OPER	; 8
 35960 0000644A [5665]                  		dw	SPOOL_OPER	; 9
 35961 0000644C [6265]                  		dw	_$SetExtendedError  ; 10
 35962                                  
 35963                                  SERVER_DISP_END:  ;  LABEL BYTE
 35964                                  
 35965                                  ;SRVC001E label byte
 35966                                  
 35967                                  SRVC001E:
 35968                                  
 35969                                  ;hkn; TABLE	ENDS
 35970                                  
 35971                                  ;----------------------------------------------------------------------------
 35972                                  ;
 35973                                  ; Procedure Name : $ServerCall
 35974                                  ;
 35975                                  ; Inputs:
 35976                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 35977                                  ; Function:
 35978                                  ;	AL=0	Server DOS call
 35979                                  ;	AL=1	Commit All files
 35980                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 35981                                  ;	AL=3	Close all files for DPL_UID
 35982                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 35983                                  ;	AL=5	Get open file list entry
 35984                                  ;		    IN: BX File Index
 35985                                  ;			CX User Index
 35986                                  ;		    OUT:ES:DI -> Name
 35987                                  ;			BX = UID
 35988                                  ;		    CX = # locked blocks held by this UID
 35989                                  ;	AL=6	Get DOS data area
 35990                                  ;		    OUT: DS:SI -> Start
 35991                                  ;			CX size in bytes of swap if indos
 35992                                  ;			DX size in bytes of swap always
 35993                                  ;	AL=7	Get truncate flag
 35994                                  ;	AL=8	Set truncate flag
 35995                                  ;	AL=9	Close all spool files
 35996                                  ;	AL=10	SetExtendedError
 35997                                  ;
 35998                                  ;----------------------------------------------------------------------------
 35999                                  
 36000                                  _$ServerCall:
 36001                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36002                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 36003                                  	; 10/06/2019
 36004                                  	; 29/04/2019 - Retro DOS v4.0
 36005                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 36006                                  
 36007                                  	; 05/08/2018 - Retro DOS v3.0
 36008                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 36009 0000644E 3C07                    	CMP	AL,7
 36010 00006450 7204                    	JB	short SET_STUFF
 36011 00006452 3C09                    	CMP	AL,9
 36012 00006454 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 36013                                  SET_STUFF:
 36014 00006456 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 36015                                  	;mov	bx,[si+12h]
 36016 00006458 8B5C12                  	MOV	BX,[SI+DPL.UID]
 36017                                  
 36018                                  	; MSDOS 6.0
 36019                                  ;SR;
 36020                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 36021                                  ; of USER_ID
 36022                                  
 36023 0000645B 36F606[3010]01          	test	byte [SS:IsWin386],1
 36024 00006461 7505                    	jnz	short skip_win386
 36025                                  
 36026                                  ;hkn; SS override for user_id and proc_id
 36027                                  	; 15/08/2018
 36028 00006463 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 36029                                  
 36030                                  skip_win386:
 36031 00006468 8B5C14                  	MOV	BX,[SI+DPL.PID]
 36032 0000646B 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 36033                                  NO_SET_ID:
 36034                                  	; 10/06/2019 - Retro DOS v4.0
 36035 00006470 2EFF36[3564]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 36036 00006475 2EFF36[3364]            	PUSH	word [cS:SERVERTAB]	; push table address
 36037 0000647A 50                      	PUSH	AX
 36038 0000647B E88DAD                  	call	TableDispatch
 36039                                  
 36040                                  ;hkn; SS override
 36041                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 36042 0000647E 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36043                                  	;error	error_invalid_function
 36044                                  	;mov	al,1
 36045 00006484 B001                    	MOV	AL,error_invalid_function
 36046                                  servercall_error:
 36047 00006486 E9BBA1                  	JMP	SYS_RET_ERR
 36048                                  
 36049                                  SERVERRETURN:
 36050 00006489 C3                      	retn
 36051                                  
 36052                                  ; Commit - iterate through the open file list and make sure that the
 36053                                  ; directory entries are correctly updated.
 36054                                  
 36055                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36056                                  COMMIT_ALL:
 36057 0000648A 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 36058 0000648C 16                      	push	ss
 36059 0000648D 1F                      	pop	ds
 36060 0000648E E867AE                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 36061                                  CommitLoop:
 36062 00006491 53                      	push	bx
 36063 00006492 E82401                  	call	SFFromSFN
 36064 00006495 7222                    	JC	short CommitDone
 36065 00006497 26833D00                	cmp	word [es:di],0
 36066                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 36067                                  					; if (ThisSFT->refcount != 0)
 36068 0000649B 7418                    	JZ	short CommitNext
 36069                                  	;cmp	word [es:di],0FFFFh ; -1
 36070 0000649D 26833DFF                	cmp	word [ES:DI],sf_busy
 36071                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 36072                                  					; BUSY SFTs have god knows what
 36073 000064A1 7412                    	JZ	short CommitNext	;   in them.
 36074                                  	; 17/12/2022
 36075 000064A3 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 36076                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 36077 000064A8 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 36078                                  					;	doesn't deadlock
 36079 000064AA 893E[9E05]              	MOV	[THISSFT],DI
 36080 000064AE 8C06[A005]              	MOV	[THISSFT+2],ES
 36081 000064B2 E83DCB                  	call	DOS_COMMIT		;	DOSCommit ();
 36082                                  CommitNext:
 36083 000064B5 5B                      	pop	bx
 36084 000064B6 43                      	INC	BX
 36085 000064B7 EBD8                    	JMP	short CommitLoop
 36086                                  CommitDone:
 36087 000064B9 E857AE                  	call	LCritSFT
 36088 000064BC 5B                      	pop	bx
 36089                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36090                                  Commit_Ok:
 36091 000064BD E97BA1                  	jmp	SYS_RET_OK
 36092                                  	
 36093                                  
 36094                                  CLOSE_NAME:
 36095                                  
 36096                                  ;if installed
 36097                                  
 36098                                  ;hkn; SS override
 36099                                  	;call	far [ss:MFTcloN]
 36100 000064C0 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 36101                                  ;else
 36102                                  ;	Call	MFTcloN
 36103                                  ;endif
 36104                                  
 36105                                  CheckReturns:
 36106 000064C5 7202                    	JC	short func_err
 36107                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36108                                  	;transfer SYS_RET_OK
 36109                                  Commit_Okj:
 36110 000064C7 EBF4                    	jmp	short Commit_Ok
 36111                                  	;jmp	SYS_RET_OK
 36112                                  
 36113                                  func_err:
 36114                                  	;transfer SYS_RET_ERR
 36115                                  	;jmp	SYS_RET_ERR
 36116 000064C9 EBBB                    	jmp	short servercall_error
 36117                                  
 36118                                  CLOSE_UID:
 36119                                  
 36120                                  ;if installed
 36121                                  ;hkn; SS override
 36122                                  	;call	far [ss:MFTclU]
 36123 000064CB 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 36124                                  ;else
 36125                                  ;	Call	MFTclU
 36126                                  ;endif
 36127 000064D0 EBF3                    	JMP	short CheckReturns
 36128                                  
 36129                                  CLOSE_UID_PID:
 36130                                  
 36131                                  ;if installed
 36132                                  ;hkn; SS override
 36133                                  	;call	far [ss:MFTCloseP]
 36134 000064D2 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 36135                                  ;else
 36136                                  ;	Call	MFTCloseP
 36137                                  ;endif
 36138 000064D7 EBEC                    	JMP	short CheckReturns
 36139                                  
 36140                                  GET_LIST:
 36141                                  
 36142                                  ;if installed
 36143                                  ;hkn; SS override
 36144                                  	;call	far [ss:MFT_get]
 36145 000064D9 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 36146                                  ;else
 36147                                  ;	Call	MFT_get
 36148                                  ;endif
 36149 000064DE 72E9                    	JC	short func_err
 36150 000064E0 E8A29F                  	call	Get_User_Stack
 36151                                  	;mov	[si+2],bx
 36152 000064E3 895C02                  	MOV	[SI+user_env.user_BX],BX
 36153                                  	;mov	[si+10],di
 36154 000064E6 897C0A                  	MOV	[SI+user_env.user_DI],DI
 36155                                  	;mov	[si+16],es
 36156 000064E9 8C4410                  	MOV	[SI+user_env.user_ES],ES
 36157                                  SetCXOK:
 36158                                  	;mov	[si+4],cx
 36159 000064EC 894C04                  	MOV	[SI+user_env.user_CX],CX
 36160                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36161                                  	;transfer SYS_RET_OK
 36162                                  Commit_Okj2:
 36163                                  	; 17/12/2022
 36164 000064EF EBCC                    	jmp	short Commit_Ok
 36165                                  	;jmp	short Commit_Okj
 36166                                  	;;jmp	SYS_RET_OK
 36167                                  
 36168                                  SRV_CALL:
 36169 000064F1 58                      	POP	AX			; get rid of call to $srvcall
 36170 000064F2 1E                      	push	ds
 36171 000064F3 56                      	push	si
 36172 000064F4 E88E9F                  	call	Get_User_Stack
 36173 000064F7 5F                      	pop	di
 36174 000064F8 07                      	pop	es
 36175                                  
 36176                                  ; DS:SI point to stack
 36177                                  ; ES:DI point to DPL
 36178                                  
 36179 000064F9 E8EEAC                  	call	XCHGP
 36180                                  
 36181                                  ; DS:SI point to DPL
 36182                                  ; ES:DI point to stack
 36183                                  ;
 36184                                  ; We now copy the registers from DPL to save stack
 36185                                  
 36186 000064FC 56                      	push	si
 36187 000064FD B90600                  	MOV	CX,6
 36188 00006500 F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 36189 00006502 47                      	INC	DI
 36190 00006503 47                      	INC	DI			; Skip user_BP
 36191 00006504 A5                      	MOVSW				; DS
 36192 00006505 A5                      	MOVSW				; ES
 36193 00006506 5E                      	pop	si			; DS:SI -> DPL
 36194 00006507 8B04                    	mov	ax,[SI]
 36195                                  	;MOV	AX,[SI+DPL.AX]
 36196                                  	;mov	bx,[si+2]
 36197 00006509 8B5C02                  	MOV	BX,[SI+DPL.BX]
 36198                                  	;mov	cx,[si+4]
 36199 0000650C 8B4C04                  	MOV	CX,[SI+DPL.CX]
 36200                                  	;mov	dx,[si+6]
 36201 0000650F 8B5406                  	MOV	DX,[SI+DPL.DX]
 36202                                  	;mov	di,[si+10]
 36203 00006512 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 36204                                  	;mov	es,[si+14]
 36205 00006515 8E440E                  	MOV	ES,[SI+DPL.ES]
 36206                                  	;push	word [si+8]
 36207 00006518 FF7408                  	PUSH	word [SI+DPL.SI]
 36208                                  	;mov	ds,[si+12]
 36209 0000651B 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 36210 0000651E 5E                      	POP	SI
 36211                                  
 36212                                  ;hkn; SS override for next 3
 36213 0000651F 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 36214 00006524 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 36215 00006529 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 36216 0000652F E9559E                  	jmp	REDISP
 36217                                  
 36218                                  GET_DOS_DATA:
 36219 00006532 16                      	push	ss
 36220 00006533 07                      	pop	es
 36221 00006534 BF[2003]                	MOV     DI,SWAP_START
 36222 00006537 B9[AC0A]                	MOV     CX,SWAP_END
 36223 0000653A BA[3A03]                	MOV     DX,SWAP_ALWAYS
 36224 0000653D 29F9                    	SUB     CX,DI
 36225 0000653F 29FA                    	SUB     DX,DI
 36226 00006541 D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 36227 00006543 83D100                  	ADC     CX,0                    ; div by 2 + round up
 36228 00006546 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 36229 00006548 E83A9F                  	call	Get_User_Stack
 36230                                  	;mov	[si+14],es
 36231 0000654B 8C440E                  	MOV     [SI+user_env.user_DS],ES
 36232                                  	;mov	[si+8],di
 36233 0000654E 897C08                  	MOV     [SI+user_env.user_SI],DI
 36234                                  	;mov	[si+6],dx
 36235 00006551 895406                  	MOV     [SI+user_env.user_DX],DX
 36236 00006554 EB96                    	JMP	short SetCXOK
 36237                                  
 36238                                  SPOOL_OPER:
 36239                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 36240                                  
 36241 00006556 50                      	push    ax
 36242 00006557 B82511                  	mov     ax,1125h
 36243 0000655A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 36244                                  			; STACK: WORD subfunction
 36245                                  			; Return: CF set on error, AX = error code
 36246                                  			; STACK unchanged
 36247 0000655C 5B                      	pop	bx
 36248                                  	; 17/12/2022
 36249                                  	;JC	short func_err2
 36250 0000655D 7390                    	jnc	short Commit_Okj2
 36251                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36252                                  	;;jmp	SYS_RET_OK
 36253                                  	;jmp	short Commit_Okj2
 36254                                  	
 36255                                  func_err2:
 36256 0000655F E9E2A0                  	jmp	SYS_RET_ERR
 36257                                  
 36258                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 36259                                  ;--------------------------------------------------------------------------
 36260                                  ;
 36261                                  ; Procedure Name : $SetExtendedError
 36262                                  ;
 36263                                  ; $SetExtendedError takes extended error information and loads it up for the
 36264                                  ; next extended error call. This is used by interrupt-level proccessors to
 36265                                  ; mask their actions.
 36266                                  ;
 36267                                  ;   Inputs: DS:SI points to DPL which contains all registers
 36268                                  ;   Outputs: none
 36269                                  ;
 36270                                  ;---------------------------------------------------------------------------
 36271                                  
 36272                                  _$SetExtendedError:
 36273                                  
 36274                                  ;hkn; SS override for all variables used
 36275                                  
 36276 00006562 8B04                    	mov	ax,[si]
 36277                                  	;MOV	AX,[SI+DPL.AX]
 36278 00006564 36A3[2403]              	MOV	[SS:EXTERR],AX
 36279                                  	;mov	ax,[si+10]
 36280 00006568 8B440A                  	MOV	AX,[SI+DPL.DI]
 36281 0000656B 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 36282                                  	;mov	ax,[si+14]
 36283 0000656F 8B440E                  	MOV	AX,[SI+DPL.ES]
 36284 00006572 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 36285                                  	;mov	ax,[si+2]
 36286 00006576 8B4402                  	MOV	AX,[SI+DPL.BX]
 36287 00006579 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 36288                                  	;mov	ax,[si+4]
 36289 0000657D 8B4404                  	MOV	AX,[SI+DPL.CX]
 36290 00006580 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 36291 00006585 C3                      	retn
 36292                                  
 36293                                  ;============================================================================
 36294                                  ; UTIL.ASM, MSDOS 6.0, 1991
 36295                                  ;============================================================================
 36296                                  ; 05/08/2018 - Retro DOS v3.0
 36297                                  ; 05/05/2019 - Retro DOS v4.0
 36298                                  
 36299                                  ;**	Handle related utilities for MSDOS 2.X.
 36300                                  ;----------------------------------------------------------------------------
 36301                                  ;	pJFNFromHandle	written
 36302                                  ;	SFFromHandle	written
 36303                                  ;	SFFromSFN	written
 36304                                  ;	JFNFree 	written
 36305                                  ;	SFNFree 	written
 36306                                  ;
 36307                                  ;	Modification history:
 36308                                  ;
 36309                                  ;	    Created: MZ 1 April 1983
 36310                                  ;----------------------------------------------------------------------------
 36311                                  
 36312                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 36313                                  
 36314                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 36315                                  ;----------------------------------------------------------------------------
 36316                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 36317                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 36318                                  ;
 36319                                  ;	NOTE:
 36320                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36321                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 36322                                  ;
 36323                                  ;	ENTRY	(bx) = handle
 36324                                  ;	EXIT	'C' clear if ok
 36325                                  ;		  (es:di) = address of JFN value
 36326                                  ;		'C' set if error
 36327                                  ;		  (ax) = error code
 36328                                  ;	USES	AX, DI, ES, Flags
 36329                                  ;----------------------------------------------------------------------------
 36330                                  
 36331                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36332                                  
 36333                                  pJFNFromHandle:
 36334                                  	; 05/05/2019 - Retro DOS v4.0
 36335                                  	;getdseg <es>			; es -> dosdata
 36336 00006586 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36337                                  	
 36338                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 36339 0000658B 268E06[3003]            	mov	es,[es:CurrentPDB]
 36340                                  
 36341                                  	;cmp	bx,[ES:32h]
 36342 00006590 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 36343 00006595 7204                    	JB	short pjfn10		; no, get offset
 36344                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 36345                                  	;mov	al,6
 36346 00006597 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 36347                                  ReturnCarry:
 36348 00006599 F9                      	STC                             ; signal error
 36349 0000659A C3                      	retn				; go back
 36350                                  pjfn10: 
 36351                                  	;les	di,[es:34h]
 36352 0000659B 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 36353 000065A0 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 36354                                  	;clc
 36355                                  pJFNFromHandle_error:
 36356 000065A2 C3                      	retn
 36357                                  
 36358                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 36359                                  ;----------------------------------------------------------------------------
 36360                                  ;
 36361                                  ; Procedure Name : SFFromHandle
 36362                                  ;
 36363                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 36364                                  ;
 36365                                  ;   Input:      BX has handle
 36366                                  ;   Output:     Carry Set
 36367                                  ;                   AX has error code
 36368                                  ;               Carry Reset
 36369                                  ;                   ES:DI has pointer to SF entry
 36370                                  ;   Registers modified: If error, AX,ES, else ES:DI
 36371                                  ; NOTE:
 36372                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36373                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36374                                  ;
 36375                                  ;----------------------------------------------------------------------------
 36376                                  
 36377                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36378                                  
 36379                                  SFFromHandle:
 36380 000065A3 E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 36381                                  	;retc				; return if error
 36382 000065A6 72FA                    	jc	short pJFNFromHandle_error
 36383 000065A8 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 36384                                  	;JNZ	short GetSF		; nope, suck out SF
 36385                                  	;;mov	al,6
 36386                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36387                                  	;jmp	short ReturnCarry	; signal it
 36388                                  	; 17/12/2022
 36389                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36390 000065AC 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 36391                                  	;JNZ	short GetSF		; nope, suck out SF
 36392                                  	;;mov	al,6
 36393                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36394                                  	;jmp	short ReturnCarry	; signal it
 36395                                  GetSF:
 36396 000065AE 53                      	push	bx			; save handle
 36397 000065AF 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 36398 000065B2 30FF                    	XOR     BH,BH                   ; ignore upper half
 36399 000065B4 E80200                  	CALL    SFFromSFN               ; get real sf spot
 36400 000065B7 5B                      	pop	bx			; restore
 36401 000065B8 C3                      	retn                        	; say goodbye
 36402                                  
 36403                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 36404                                  
 36405                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 36406                                  ;----------------------------------------------------------------------------
 36407                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 36408                                  ;	is more than just a simple index instruction because the SF table
 36409                                  ;	can be made up of multiple pieces chained together. We follow the
 36410                                  ;	chain to the right piece and then do the index operation.
 36411                                  ;
 36412                                  ;   NOTE:
 36413                                  ;	This routine is called from SFFromHandle which is called
 36414                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36415                                  ;
 36416                                  ;	ENTRY	BX has SF index
 36417                                  ;	EXIT	'C' clear if OK
 36418                                  ;		  ES:DI points to SF entry
 36419                                  ;		'C' set if index too large
 36420                                  ;	USES	BX, DI, ES
 36421                                  ;----------------------------------------------------------------------------
 36422                                  
 36423                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36424                                  
 36425                                  SFFromSFN:
 36426                                  	; 05/05/2019 - Retro DOS v4.0
 36427                                  	;getdseg <es>			; es -> dosdata
 36428 000065B9 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36429                                  
 36430                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 36431 000065BE 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 36432                                  sfsfn5:	
 36433                                  	;cmp	bx,[es:di+4]
 36434 000065C3 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 36435 000065C7 720E                    	JB	short sfsfn7		; yes, go grab it
 36436                                  	;sub	bx,[es:di+4]
 36437 000065C9 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 36438 000065CD 26C43D                  	les	di,[es:di] ; 14/08/2018
 36439                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 36440 000065D0 83FFFF                  	CMP     DI,-1                   ; end of tables?
 36441 000065D3 75EE                    	JNZ	short sfsfn5		; no, try again
 36442 000065D5 F9                      	STC
 36443 000065D6 C3                      	retn				; return with error, not found
 36444                                  sfsfn7:
 36445 000065D7 50                      	push	ax
 36446                                  	;mov	ax,53 ; MSDOS 3.3
 36447                                  	;mov	ax,59 ; MSDOS 6.0
 36448                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 36449                                  	
 36450                                  	; 17/12/2022
 36451 000065D8 B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 36452                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36453                                  	;mov	ax,SF_ENTRY.size ; 59
 36454                                  	
 36455 000065DA F6E3                    	MUL	BL			; (ax) = offset into this SF block
 36456 000065DC 01C7                    	ADD	DI,AX			; add base of SF block
 36457 000065DE 58                      	pop	ax
 36458                                  	;add	di,6
 36459 000065DF 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 36460 000065E2 C3                      	retn				; return with 'C' clear
 36461                                  
 36462                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 36463                                  
 36464                                  ;**	JFNFree - Find a Free JFN Slot
 36465                                  ;----------------------------------------------------------------------------
 36466                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 36467                                  ;
 36468                                  ;	ENTRY	(ss) = DOSDATA
 36469                                  ;	EXIT	'C' clear if OK
 36470                                  ;		  (bx) = new handle
 36471                                  ;		  (es:di) = pointer to JFN slot
 36472                                  ;		'C' set if error
 36473                                  ;		  (al) = error code
 36474                                  ;	USES	bx, di, es, flags
 36475                                  ;----------------------------------------------------------------------------
 36476                                  
 36477                                  JFNFree:
 36478 000065E3 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 36479                                  jfnf1:	
 36480 000065E5 E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 36481 000065E8 7209                    	JC	short jfnf5		; no more handles
 36482 000065EA 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 36483 000065EE 7405                    	je	short jfnfx		; yes, carry is clear
 36484 000065F0 43                      	INC     BX                      ; no, next handle
 36485 000065F1 EBF2                    	JMP	short jfnf1		; and try again
 36486                                  
 36487                                  	; Error. 'C' set
 36488                                  jfnf5:	
 36489                                  	;mov	al,4
 36490 000065F3 B004                    	MOV	AL,error_too_many_open_files
 36491                                  jfnfx:	
 36492 000065F5 C3                      	retn				; bye
 36493                                  
 36494                                  ;	BREAK <SFNFree - Allocate a free SFN>
 36495                                  
 36496                                  ;**	SFNFree - Allocate a Free SFN/SFT
 36497                                  ;----------------------------------------------------------------------------
 36498                                  ;	SFNFree scans through the sf table looking for a free entry
 36499                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 36500                                  ;
 36501                                  ;	The problem is that we want to mark the SFT busy so that other threads
 36502                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 36503                                  ;	we can't just mark it busy because we may get blown out of our open
 36504                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 36505                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 36506                                  ;	an SFT with this value we look to see if it belongs to this user
 36507                                  ;	and process.  If it does belong to us then it must be an orphan
 36508                                  ;	and we reclaim it.
 36509                                  ;
 36510                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 36511                                  ;		over and over, but we could at least set a high water mark...
 36512                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 36513                                  ;		even though this is not a frequently called routine - jgl
 36514                                  ;
 36515                                  ;	ENTRY	(ss) = DOSDATA
 36516                                  ;	EXIT	'C' clear if no error
 36517                                  ;		  (bx) = SFN
 36518                                  ;		  (es:di) = pointer to SFT
 36519                                  ;		  es:[di].SFT_REF_COUNT = -1
 36520                                  ;		'C' set if error
 36521                                  ;		  (al) = error code
 36522                                  ;	USES	bx, di, es, Flags
 36523                                  ;----------------------------------------------------------------------------
 36524                                  
 36525                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36526                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 36527                                  
 36528                                  SFNFree:
 36529                                  	; 12/08/2018
 36530                                  	; 05/08/2018 - Retro DOS v3.0
 36531                                  	;
 36532                                  	; MSDOS 6.0
 36533 000065F6 50                      	push	ax
 36534 000065F7 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 36535                                  sfnf5:	
 36536 000065F9 53                      	push	bx
 36537 000065FA E8BCFF                  	call	SFFromSFN		; get the potential handle
 36538 000065FD 5B                      	pop	bx
 36539 000065FE 723A                    	jc	short sfnf95		; no more free SFNs
 36540 00006600 26833D00                	cmp	word [ES:DI],0
 36541                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 36542 00006604 741D                    	je	short sfnf20			; yep, got one
 36543                                  	
 36544                                  	;cmp	word [es:di],0FFFFh ; -1
 36545 00006606 26833DFF                	cmp	word [ES:DI],sf_busy
 36546                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36547 0000660A 7403                    	je	short sfnf10		; special busy mark
 36548                                  sfnf7:	
 36549 0000660C 43                      	inc	bx			; try the next one
 36550 0000660D EBEA                    	jmp	short sfnf5
 36551                                  
 36552                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 36553                                  ;	it was abandoned during a earlier call and we can use it.
 36554                                  ;
 36555                                  ;	(bx)	= SFN
 36556                                  ;	(es:di) = pointer to SFT
 36557                                  ;	(TOS)	= caller's (ax)
 36558                                  
 36559                                  sfnf10:	
 36560 0000660F 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36561                                  	;cmp	[es:di+2Fh],ax
 36562 00006613 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 36563 00006617 75F3                    	jnz	short sfnf7		; not ours
 36564 00006619 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36565                                  	;cmp	[es:di+31h],ax
 36566 0000661D 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 36567 00006621 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 36568                                  
 36569                                  ;	We have an SFT to allocate
 36570                                  ;
 36571                                  ;	(bx)	= SFN
 36572                                  ;	(es:di) = pointer to SFT
 36573                                  ;	(TOS)	= caller's (ax)
 36574                                  
 36575                                  sfnf20:
 36576                                  	; cf = 0 ;; Retro DOS v3.0
 36577                                  
 36578                                  	;mov	word [es:di],0FFFFh
 36579 00006623 26C705FFFF              	mov	word [ES:DI],sf_busy
 36580                                  					; make sure that this is allocated
 36581                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36582                                  
 36583 00006628 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36584                                  	;mov	[es:di+2Fh],ax
 36585 0000662C 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 36586 00006630 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36587                                  	;mov	[es:di+31h],ax
 36588 00006634 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 36589                                  sfnf21: ;; Retro DOS v3.0
 36590                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36591                                  	;pop	ax
 36592                                  	;;clc
 36593                                  	;retn				; return with no error
 36594                                  	; 17/12/2022
 36595 00006638 58                      	pop	ax
 36596                                  	;clc
 36597 00006639 C3                      	retn
 36598                                  
 36599                                  ;**	Error - no more free SFNs
 36600                                  ;
 36601                                  ;	'C' set
 36602                                  ;	(TOS) = saved ax
 36603                                  
 36604                                  sfnf95: 
 36605 0000663A 58                      	pop	ax
 36606                                  	;mov	al,4
 36607 0000663B B004                    	mov	al,error_too_many_open_files
 36608 0000663D C3                      	retn				; return with 'C' and error
 36609                                  
 36610                                  ;============================================================================
 36611                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 36612                                  ;============================================================================
 36613                                  ; 13/07/2018 - Retro DOS v3.0
 36614                                  ; 20/05/2019 - Retro DOS v4.0
 36615                                  
 36616                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 36617                                  
 36618                                  ;	BREAK <$Close - return a handle to the system>
 36619                                  ;----------------------------------------------------------------------------
 36620                                  ;
 36621                                  ;**	$Close - Close a file Handle
 36622                                  ;
 36623                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 36624                                  ;		path
 36625                                  ;
 36626                                  ;	Assembler usage:
 36627                                  ;	    MOV     BX, handle
 36628                                  ;	    MOV     AH, Close
 36629                                  ;	    INT     int_command
 36630                                  ;
 36631                                  ;	ENTRY	(bx) = handle
 36632                                  ;	EXIT	<normal INT21 return convention>
 36633                                  ;	USES	all
 36634                                  ;
 36635                                  ;----------------------------------------------------------------------------
 36636                                  
 36637                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36638                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 36639                                  
 36640                                  _$CLOSE:
 36641                                  ;	Grab the SFT pointer from the JFN.
 36642                                  
 36643 0000663E E85A02                  	call	CheckOwner		; get system file entry
 36644 00006641 722B                    	jc	short CloseError	; error return
 36645 00006643 16                      	push	ss
 36646 00006644 1F                      	pop	ds			; For DOS_CLOSE
 36647 00006645 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 36648 00006649 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 36649                                  
 36650                                  ; DS:SI point to JFN table entry.
 36651                                  ; ES:DI point to SFT
 36652                                  ;
 36653                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 36654                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 36655                                  ; If the file was not a net FCB, we free the JFN too.
 36656                                  
 36657                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 36658 0000664D 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 36659 00006651 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 36660                                  	;mov	al,[ES:DI+2]
 36661 00006653 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 36662                                  	;and	al,0F0h
 36663 00006657 24F0                    	AND	AL,SHARING_MASK
 36664                                  	;cmp	al,70h
 36665 00006659 3C70                    	CMP	AL,SHARING_NET_FCB
 36666 0000665B 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 36667                                  
 36668                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 36669                                  ; -1.
 36670                                  
 36671                                  FreeJFN:
 36672 0000665D E826FF                  	call	pJFNFromHandle		;   d = pJFN (handle);
 36673 00006660 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 36674                                  PostFree:
 36675                                  
 36676                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 36677                                  
 36678 00006664 E849C8                  	call	DOS_CLOSE
 36679                                  
 36680                                  ; DOS_Close may return an error. If we see such an error, we report it but
 36681                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 36682                                  
 36683 00006667 7205                    	JC	short CloseError
 36684                                  	;mov	ah,3Eh
 36685 00006669 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 36686                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36687                                  CloseOk:
 36688 0000666B E9CD9F                  	jmp	SYS_RET_OK
 36689                                  CloseError:
 36690 0000666E E9D39F                  	jmp	SYS_RET_ERR
 36691                                  
 36692                                  ;	BREAK <$Commit - commit the file>
 36693                                  ;----------------------------------------------------------------------------
 36694                                  ;
 36695                                  ;**	$Commit - Commit a File
 36696                                  ;
 36697                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 36698                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 36699                                  ;	the directory entry, etc., so this commit is pretty useless. check
 36700                                  ;	and fix this!! jgl
 36701                                  ;
 36702                                  ;	Assembler usage:
 36703                                  ;	    MOV     BX, handle
 36704                                  ;	    MOV     AH, Commit
 36705                                  ;	    INT     int_command
 36706                                  ;
 36707                                  ;	ENTRY	(bx) = handle
 36708                                  ;	EXIT	none
 36709                                  ;	USES	all
 36710                                  ;;----------------------------------------------------------------------------
 36711                                  
 36712                                  _$COMMIT:
 36713                                  ;	Grab the SFT pointer from the JFN.
 36714                                  
 36715 00006671 E82702                  	call	CheckOwner		; get system file entry
 36716 00006674 7213                    	JC	short CommitError	; error return
 36717 00006676 16                      	push	ss
 36718 00006677 1F                      	pop	ds			; For DOS_COMMIT
 36719 00006678 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 36720 0000667C 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 36721                                  
 36722                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 36723                                  ;
 36724                                  ;	ES:DI point to SFT
 36725                                  
 36726 00006680 E86FC9                  	call	DOS_COMMIT
 36727 00006683 7204                    	JC	short CommitError
 36728                                  	; 07/12/2022
 36729                                  	;jc	short CloseError
 36730                                  	;mov	ah,68h
 36731 00006685 B468                    	MOV	AH,COMMIT
 36732                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36733                                  	;jmp	SYS_RET_OK
 36734                                  CommitOk:
 36735 00006687 EBE2                    	jmp	short CloseOk	
 36736                                  
 36737                                  CommitError:
 36738                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36739                                  	;jmp	SYS_RET_ERR
 36740 00006689 EBE3                    	jmp	short CloseError
 36741                                  
 36742                                  ;	BREAK <$ExtHandle - extend handle count>
 36743                                  
 36744                                  ;**	$ExtHandle - Extend Handle Count
 36745                                  ;----------------------------------------------------------------------------
 36746                                  ;	Assembler usage:
 36747                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 36748                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 36749                                  ;	    INT     int_command 		 busy )
 36750                                  ;
 36751                                  ;	ENTRY	(bx) = new number of handles
 36752                                  ;	EXIT	'C' clear if OK
 36753                                  ;		'C' set iff err
 36754                                  ;		  (ax) = error code
 36755                                  ;			 AX = error_not_enough_memory
 36756                                  ;			      error_too_many_open_files
 36757                                  ;	USES	all
 36758                                  ;----------------------------------------------------------------------------
 36759                                  
 36760                                  _$ExtHandle:
 36761 0000668B 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 36762                                  	;cmp	bx,20
 36763 0000668D 83FB14                  	CMP	BX,FILPERPROC
 36764 00006690 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 36765 00006692 BB1400                  	MOV	BX,FILPERPROC
 36766                                  exth2:	
 36767 00006695 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 36768                                  	;mov	cx,[ES:32h]
 36769 0000669A 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 36770 0000669F 39CB                    	CMP	BX,CX			; the requested == current
 36771 000066A1 7455                    	JE	short ok_done 		; yes and exit
 36772 000066A3 7722                    	JA	short larger		; go allocate new table
 36773                                  
 36774                                  ;	We're going to shrink the # of handles available
 36775                                  
 36776 000066A5 BD0100                  	MOV	BP,1			; shrink
 36777                                  	;mov	ds,[ES:36h]
 36778 000066A8 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 36779 000066AD 89DE                    	MOV	SI,BX			;
 36780 000066AF 29D9                    	SUB	CX,BX			; get difference
 36781                                  
 36782                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 36783                                  chck_handles:
 36784 000066B1 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 36785 000066B4 753D                    	JNZ	short too_many_files	; status
 36786 000066B6 46                      	INC	SI
 36787 000066B7 E2F8                    	LOOP	chck_handles
 36788 000066B9 83FB14                  	CMP	BX,FILPERPROC		; = 20
 36789 000066BC 7709                    	JA	short larger		; no
 36790                                  
 36791 000066BE BD0200                  	MOV	BP,2			; psp
 36792                                  	;mov	di,24
 36793 000066C1 BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 36794 000066C4 53                      	PUSH	BX
 36795 000066C5 EB1D                    	JMP	short movhandl
 36796                                  
 36797                                  larger:
 36798 000066C7 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 36799 000066CA 747F                    	JZ	short invalid_func	; 10/08/2018
 36800 000066CC F8                      	CLC
 36801 000066CD 53                      	PUSH	BX			; save requested number
 36802 000066CE 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 36803 000066D1 B104                    	MOV	CL,4
 36804                                  	;ror	bx,cl			; MSDOS 3.3
 36805 000066D3 D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 36806 000066D5 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 36807                                  
 36808 000066D9 55                      	PUSH	BP
 36809 000066DA E8DCFA                  	call	_$ALLOC			; allocate memory
 36810 000066DD 5D                      	POP	BP
 36811 000066DE 7266                    	JC	short no_memory		; not enough meory
 36812                                  
 36813 000066E0 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 36814 000066E2 31FF                    	XOR	DI,DI
 36815                                  movhandl:
 36816 000066E4 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 36817                                  
 36818 000066E9 F7C50300                	test	BP,3			; enlarge ?
 36819 000066ED 740C                    	JZ	short enlarge 		; yes
 36820 000066EF 59                      	POP	CX			; cx = the amount you shrink
 36821 000066F0 51                      	PUSH	CX
 36822 000066F1 EB0C                    	JMP	short copy_hand
 36823                                  
 36824                                  ;	Done.  'C' clear
 36825                                  
 36826                                  ; 17/12/2022
 36827                                  ;ok_done:
 36828                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36829                                  ;	;jmp	short CommitOk
 36830                                  ;	; 17/12/2022
 36831                                  ;	jmp	SYS_RET_OK
 36832                                  
 36833                                  too_many_files:
 36834                                  	;mov	al,4
 36835 000066F3 B004                    	MOV	AL,error_too_many_open_files
 36836                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36837                                  	;jmp	SYS_RET_ERR
 36838                                  CommitErrorj:
 36839                                  	;jmp	short CommitError
 36840                                  	; 17/12/2022
 36841 000066F5 E94C9F                  	jmp	SYS_RET_ERR
 36842                                  
 36843                                  ; 17/12/2022 
 36844                                  ok_done:
 36845                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36846                                  	;jmp	short CommitOk
 36847                                  	; 17/12/2022
 36848 000066F8 E9409F                  	jmp	SYS_RET_OK
 36849                                  
 36850                                  enlarge:
 36851                                  	;mov	cx,[32h]
 36852 000066FB 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 36853                                  copy_hand:
 36854 000066FF 89CA                    	MOV	DX,CX
 36855                                  	;lds	si,[34h]
 36856 00006701 C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 36857 00006705 F3A4                    	REP	MOVSB			; copy infomation to new table
 36858 00006707 59                      	POP	CX			; get new number of handles
 36859 00006708 51                      	PUSH	CX			; save it again
 36860 00006709 29D1                    	SUB	CX,DX			; get the difference
 36861 0000670B B0FF                    	MOV	AL,-1			; set availability to handles
 36862 0000670D F3AA                    	REP	STOSB
 36863 0000670F 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 36864                                  	;cmp	word [34h],0
 36865 00006714 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 36866 00006719 750D                    	JNZ	short update_info	; yes, go update PDB entries
 36867 0000671B 55                      	PUSH	BP
 36868 0000671C 1E                      	PUSH	DS			; save old table segment
 36869 0000671D 06                      	PUSH	ES			; save new table segment
 36870 0000671E 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 36871 00006722 E80EFC                  	call	_$DEALLOC		; deallocate old table meomory
 36872 00006725 07                      	POP	ES			; restore new table segment
 36873 00006726 1F                      	POP	DS			; restore old table segment
 36874 00006727 5D                      	POP	BP
 36875                                  
 36876                                  update_info:
 36877 00006728 F7C50200                	test	BP,2			; psp?
 36878 0000672C 7408                    	JZ	short non_psp 		; no
 36879                                  	;mov	word [34h],18h ; 24
 36880 0000672E C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 36881 00006734 EB06                    	JMP	short final
 36882                                  non_psp:
 36883                                  	;mov	word [34h],0
 36884 00006736 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 36885                                  final:
 36886                                  	;mov	[36h],es	
 36887 0000673C 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 36888                                  	;pop	word [32h]
 36889 00006740 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 36890                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36891                                  	;jmp	SYS_RET_OK
 36892                                  ok_done_j:
 36893 00006744 EBB2                    	jmp	short ok_done
 36894                                  
 36895                                  no_memory:
 36896 00006746 5B                      	POP	BX			; clean stack
 36897                                  	;mov	al,8
 36898 00006747 B008                    	MOV	AL,error_not_enough_memory
 36899                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36900                                  	;jmp	SYS_RET_ERR
 36901                                  CommitErrorj2:
 36902 00006749 EBAA                    	jmp	short CommitErrorj
 36903                                  
 36904                                  invalid_func:
 36905                                  	;mov	al,1
 36906 0000674B B001                    	MOV	AL,error_invalid_function
 36907                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36908                                  	;jmp	SYS_RET_ERR
 36909                                  CommitErrorj3:
 36910                                  	;jmp	short CommitErrorj2
 36911                                  	; 17/12/2022
 36912 0000674D EBA6                    	jmp	short CommitErrorj
 36913                                  
 36914                                  ; 20/05/2019 - Retro DOS v4.0
 36915                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 36916                                  
 36917                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36918                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 36919                                  
 36920                                  ;	BREAK <$READ - Read from a file handle>
 36921                                  ;----------------------------------------------------------------------------
 36922                                  ;
 36923                                  ;**	$Read - Read from a File Handle
 36924                                  ;
 36925                                  ;   Assembler usage:
 36926                                  ;
 36927                                  ;	LDS	DX, buf
 36928                                  ;	MOV	CX, count
 36929                                  ;	MOV	BX, handle
 36930                                  ;	MOV	AH, Read
 36931                                  ;	INT	int_command
 36932                                  ;	  AX has number of bytes read
 36933                                  ;
 36934                                  ;	ENTRY	(bx) = file handle
 36935                                  ;		(cx) = byte count
 36936                                  ;		(ds:dx) = buffer address
 36937                                  ;	EXIT	Through system call return so that to user:
 36938                                  ;		  'C' clear if OK
 36939                                  ;		    (ax) = bytes read
 36940                                  ;		  'C' set if error
 36941                                  ;		    (ax) = error code
 36942                                  ;
 36943                                  ;----------------------------------------------------------------------------
 36944                                  
 36945                                  _$READ:
 36946 0000674F BE[4432]                	MOV	SI,DOS_READ
 36947                                  ReadDo:
 36948 00006752 E831FE                  	call	pJFNFromHandle
 36949 00006755 7208                    	JC	short ReadError
 36950                                  
 36951 00006757 268A05                  	MOV	AL,[ES:DI]
 36952 0000675A E83E01                  	call	CheckOwner		; get the handle
 36953 0000675D 7303                    	JNC	short ReadSetup		; no errors do the operation
 36954                                  
 36955                                  ;	Have an error. 'C' set
 36956                                  
 36957                                  ReadError:
 36958                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36959                                  	;;jmp	SYS_RET_ERR		; go to error traps
 36960                                  	;jmp	short CommitErrorj3
 36961                                  	; 17/12/2022
 36962 0000675F E9E29E                  	jmp	SYS_RET_ERR
 36963                                  
 36964                                  ReadSetup:
 36965 00006762 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 36966 00006767 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 36967                                  	; 20/05/2019 - Retro DOS v4.0
 36968                                  	; MSDOS 6.0 
 36969                                  ;; Extended Open
 36970                                  	;test	byte [es:di+3],20h
 36971 0000676C 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 36972                                  						 ;AN000;;EO. need i24
 36973 00006771 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 36974 00006773 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 36975                                  					;AN000;;EO. set it off;smr;SS Override
 36976                                  needi24:				;AN000;
 36977                                  ;; Extended Open
 36978 00006779 36FF36[2C03]            	push	word [SS:DMAADD]
 36979 0000677E 36FF36[2E03]            	push	word [SS:DMAADD+2]	;smr;SS Override
 36980                                  
 36981                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36982                                  
 36983                                  	; 26/07/2019
 36984                                  
 36985                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36986                                  	;
 36987                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 36988                                  	; there is not another caller; it is better to put the code in this proc
 36989                                   	; here instead of calling it as a subroutine; but I have modified code
 36990                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 36991                                  
 36992                                  	; MSDOS 6.0
 36993 00006783 E81300                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 36994                                  	
 36995                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36996                                  	; MSDOS 3.3
 36997                                  	;MOV	BX,DX			; copy offset
 36998                                  	;push	cx			; don't stomp on count
 36999                                  	;MOV	CL,4			; bits to shift bytes->para
 37000                                  	;SHR	BX,CL			; get number of paragraphs
 37001                                  	;pop	cx			; get count back
 37002                                  	;MOV	AX,DS			; get original segment
 37003                                  	;ADD	AX,BX			; get new segment
 37004                                  	;MOV	DS,AX			; in seg register
 37005                                  	;AND	DX,0Fh			; normalize offset
 37006                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37007                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37008                                  						;smr;SS Override
 37009                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 37010                                  	
 37011 00006786 16                      	push	ss			; go for DOS addressability
 37012 00006787 1F                      	pop	ds
 37013                                  
 37014 00006788 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 37015                                  
 37016 0000678A 8F06[2E03]              	pop	word [DMAADD+2]
 37017 0000678E 8F06[2C03]              	pop	word [DMAADD]
 37018                                  	;JNC	short READ_OK		;AN002;
 37019                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 37020                                  	; 17/12/2022
 37021 00006792 72CB                    	jc	short ReadError
 37022                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37023                                  	;jnc	short READ_OK		;AN002;
 37024                                  	;jmp	short ReadError
 37025                                  
 37026                                  READ_OK:
 37027 00006794 89C8                    	MOV	AX,CX			; get correct return in correct reg
 37028                                  Read_Okj:
 37029                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37030                                  	;;jmp	SYS_RET_OK		; successful return
 37031                                  	;jmp	short ok_done_j
 37032                                  	; 17/12/2022
 37033 00006796 E9A29E                  	jmp	SYS_RET_OK
 37034                                  
 37035                                  ; 13/07/2018 - Retro DOS v3.0
 37036                                  
 37037                                  ;----------------------------------------------------------------------------
 37038                                  
 37039                                  ;   Input: DS:DX points to user's buffer addr
 37040                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 37041                                  ;   Output: [DMAADD] set
 37042                                  
 37043                                  ; 20/05/2019 - Retro DOS v4.0
 37044                                  ; 26/07/2019
 37045                                  ;	; MSDOS 6.0
 37046                                  ;Align_Buffer:
 37047                                  ;	MOV	BX,DX			; copy offset
 37048                                  ;	push	cx			; don't stomp on count
 37049                                  ;	MOV	CL,4			; bits to shift bytes->para
 37050                                  ;	SHR	BX,CL			; get number of paragraphs
 37051                                  ;	pop	cx			; get count back
 37052                                  ;	MOV	AX,DS			; get original segment
 37053                                  ;	ADD	AX,BX			; get new segment
 37054                                  ;	MOV	DS,AX			; in seg register
 37055                                  ;	AND	DX,0Fh			; normalize offset
 37056                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37057                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37058                                  ;						;smr;SS Override
 37059                                  ;	retn
 37060                                  
 37061                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37062                                  Align_Buffer:
 37063 00006799 89D3                    	MOV	BX,DX			; copy offset
 37064 0000679B 51                      	push	cx			; don't stomp on count
 37065 0000679C B104                    	MOV	CL,4			; bits to shift bytes->para
 37066 0000679E D3EB                    	SHR	BX,CL			; get number of paragraphs
 37067 000067A0 59                      	pop	cx			; get count back
 37068 000067A1 8CD8                    	MOV	AX,DS			; get original segment
 37069 000067A3 01D8                    	ADD	AX,BX			; get new segment
 37070 000067A5 8ED8                    	MOV	DS,AX			; in seg register
 37071 000067A7 83E20F                  	AND	DX,0Fh			; normalize offset
 37072 000067AA 368916[2C03]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37073 000067AF 368C1E[2E03]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37074                                  						;smr;SS Override
 37075 000067B4 C3                      	retn
 37076                                  
 37077                                  ; 20/05/2019 - Retro DOS v4.0
 37078                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 37079                                  
 37080                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37081                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 37082                                  
 37083                                  ;BREAK <$WRITE - write to a file handle>
 37084                                  ;----------------------------------------------------------------------------
 37085                                  ;
 37086                                  ;   Assembler usage:
 37087                                  ;	    LDS     DX, buf
 37088                                  ;	    MOV     CX, count
 37089                                  ;	    MOV     BX, handle
 37090                                  ;	    MOV     AH, Write
 37091                                  ;	    INT     int_command
 37092                                  ;	  AX has number of bytes written
 37093                                  ;   Errors:
 37094                                  ;	    AX = write_invalid_handle
 37095                                  ;	       = write_access_denied
 37096                                  ;
 37097                                  ;   Returns in register AX
 37098                                  ;
 37099                                  ;----------------------------------------------------------------------------
 37100                                  
 37101                                  _$WRITE:
 37102 000067B5 BE[4534]                	MOV	SI,DOS_WRITE
 37103 000067B8 EB98                    	JMP	short ReadDo
 37104                                  
 37105                                  ;BREAK <$LSEEK - move r/w pointer>
 37106                                  ;----------------------------------------------------------------------------
 37107                                  ;
 37108                                  ;   Assembler usage:
 37109                                  ;	    MOV     DX, offsetlow
 37110                                  ;	    MOV     CX, offsethigh
 37111                                  ;	    MOV     BX, handle
 37112                                  ;	    MOV     AL, method
 37113                                  ;	    MOV     AH, LSeek
 37114                                  ;	    INT     int_command
 37115                                  ;	  DX:AX has the new location of the pointer
 37116                                  ;   Error returns:
 37117                                  ;	    AX = error_invalid_handle
 37118                                  ;	       = error_invalid_function
 37119                                  ;   Returns in registers DX:AX
 37120                                  ;
 37121                                  ;----------------------------------------------------------------------------
 37122                                  
 37123                                  ; 21/05/2019 - Retro DOS v4.0
 37124                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 37125                                  
 37126                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37127                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 37128                                  
 37129                                  _$LSEEK:
 37130 000067BA E8DE00                  	call	CheckOwner		; get system file entry
 37131                                  
 37132                                  	; 17/12/2022
 37133                                  ;LSeekError:
 37134                                  	;JNC	short CHKOWN_OK		;AN002;
 37135                                  	;JMP	short ReadError		;AN002; error return
 37136                                  	; 17/12/2022
 37137                                  	; 02/06/2019
 37138 000067BD 72A0                    	jc	short ReadError
 37139                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37140                                  	;JNC	short CHKOWN_OK		;AN002;
 37141                                  	;JMP	short ReadError		;AN002; error return
 37142                                  
 37143                                  CHKOWN_OK:
 37144                                  					;AN002;
 37145 000067BF 3C02                    	CMP	AL,2			; is the seek value correct?
 37146 000067C1 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 37147                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 37148 000067C3 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37149                                  					;smr;SS Override
 37150                                  	;mov	al,1
 37151 000067C9 B001                    	mov	al,error_invalid_function ; invalid method
 37152                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37153                                  LSeekError2:
 37154 000067CB EB92                    	jmp	short ReadError
 37155                                  
 37156                                  LSeekDisp:
 37157 000067CD 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 37158 000067CF 720A                    	JB	short LSeekStore	; just store CX:DX
 37159 000067D1 771B                    	JA	short LSeekEOF		; seek from end of file
 37160                                  	;add	dx,[es:di+21]
 37161 000067D3 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 37162                                  	;adc	cx,[es:di+23]
 37163 000067D7 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 37164                                  LSeekStore:
 37165 000067DB 89C8                    	MOV	AX,CX			; AX:DX
 37166 000067DD 92                      	XCHG	AX,DX			; DX:AX is the correct value
 37167                                  LSeekSetpos:
 37168                                  	;mov	[es:di+21],ax
 37169 000067DE 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 37170                                  	;mov	[es:di+23],dx
 37171 000067E2 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 37172 000067E6 E89C9C                  	call	Get_User_Stack
 37173                                  	;mov	[si+6],dx
 37174 000067E9 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 37175                                  	;jmp	SYS_RET_OK		; successful return
 37176                                  	; 25/06/2019
 37177                                  	;jmp	SYS_RET_OK_clc
 37178                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37179                                  	;jmp	SYS_RET_OK_clc
 37180                                  LSeekOk:
 37181 000067EC EBA8                    	jmp     short Read_Okj
 37182                                  
 37183                                  LSeekEOF:
 37184                                  	;;test	word [es:di+5],8000h
 37185                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 37186                                  	; 21/05/2019 - Retro DOS v4.0
 37187 000067EE 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 37188 000067F3 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 37189                                  LOCAL_LSeek:
 37190                                  	;add	dx,[es:di+17]
 37191 000067F5 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 37192                                  	;adc	cx,[es:di+19]
 37193 000067F9 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 37194 000067FD EBDC                    	JMP	short LSeekStore	; go and set the position
 37195                                  
 37196                                  Check_LSeek_Mode:
 37197                                  	;;test	word [es:di+2],8000h
 37198                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 37199                                  	; 21/05/2019
 37200 000067FF 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 37201 00006804 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 37202                                  	;mov	ax,[es:di+2]
 37203 00006806 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 37204                                  	;and	ax, 0F0h
 37205 0000680A 25F000                  	AND	AX,SHARING_MASK
 37206                                  	;cmp	ax,40h
 37207 0000680D 83F840                  	CMP	AX,SHARING_DENY_NONE
 37208 00006810 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 37209                                  	;cmp	ax,30h
 37210 00006812 83F830                  	CMP	AX,SHARING_DENY_READ
 37211 00006815 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 37212                                  NET_LSEEK:
 37213                                  ;	JMP	short LOCAL_LSeek
 37214                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 37215                                  	;CallInstall Net_Lseek,MultNET,33
 37216                                  	;JNC	short LSeekSetPos
 37217                                  
 37218 00006817 B82111                  	mov     ax,1121h
 37219 0000681A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 37220                                  			; CX:DX = offset (in bytes) from end
 37221                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 37222                                  			; SS = DOS CS
 37223                                  			; Return: CF set on error
 37224                                  			; CF clear if successful, DX:AX = new file position
 37225 0000681C 73C0                    	jnb     short LSeekSetpos
 37226                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37227                                  	;jmp	SYS_RET_ERR
 37228                                  ;LSeekError3:
 37229                                  	; 17/12/2022
 37230                                  LSeekError:
 37231                                  	;jmp	short LSeekError2
 37232                                  DupErr:	; 17/12/2022
 37233 0000681E E9239E                  	jmp	SYS_RET_ERR
 37234                                  
 37235                                  ;BREAK <FileTimes - modify write times on a handle>
 37236                                  ;----------------------------------------------------------------------------
 37237                                  ;
 37238                                  ;   Assembler usage:
 37239                                  ;	    MOV AH, FileTimes (57H)
 37240                                  ;	    MOV AL, func
 37241                                  ;	    MOV BX, handle
 37242                                  ;	; if AL = 1 then then next two are mandatory
 37243                                  ;	    MOV CX, time
 37244                                  ;	    MOV DX, date
 37245                                  ;	    INT 21h
 37246                                  ;	; if AL = 0 then CX/DX has the last write time/date
 37247                                  ;	; for the handle.
 37248                                  ;
 37249                                  ;	AL=02		 get extended attributes
 37250                                  ;	   BX=handle
 37251                                  ;	   CX=size of buffer (0, return max size )
 37252                                  ;	   DS:SI query list (si=-1, selects all EA)
 37253                                  ;	   ES:DI buffer to hold EA list
 37254                                  ;
 37255                                  ;	AL=03		 get EA name list
 37256                                  ;	   BX=handle
 37257                                  ;	   CX=size of buffer (0, return max size )
 37258                                  ;	   ES:DI buffer to hold name list
 37259                                  ;
 37260                                  ;	AL=04		 set extended attributes
 37261                                  ;	   BX=handle
 37262                                  ;	   ES:DI buffer of EA list
 37263                                  ;
 37264                                  ;
 37265                                  ;   Error returns:
 37266                                  ;	    AX = error_invalid_function
 37267                                  ;	       = error_invalid_handle
 37268                                  ;
 37269                                  ;----------------------------------------------------------------------------
 37270                                  
 37271                                  ; 21/05/2019 - Retro DOS v4.0
 37272                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 37273                                  
 37274                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37275                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 37276                                  
 37277                                  _$FILE_TIMES:
 37278                                  	; 13/07/2018 - Retro DOS v3.0
 37279                                  
 37280                                  	; MSDOS 3.3
 37281                                  	;cmp	al,2			; correct subfunction ?
 37282                                  	;jb	short ft1
 37283                                  
 37284                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 37285                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37286                                  						;SS Overr
 37287                                  	;;mov	al,1
 37288                                  	;mov	al,error_invalid_function ; give bad return
 37289                                  	;jmp	SYS_RET_ERR
 37290                                  
 37291                                  	; MSDOS 6.0
 37292 00006821 3C02                    	cmp	al,2			; correct subfunction ?
 37293 00006823 7340                    	jae	short inval_func
 37294                                  ;ft1:
 37295 00006825 E87300                  	call	CheckOwner		; get sft
 37296                                  	; 17/12/2022
 37297 00006828 72F4                    	jc	short LSeekError	; bad handle
 37298                                  
 37299 0000682A 08C0                    	or	al,al			; get time/date ?
 37300 0000682C 7515                    	jnz	short ft_set_time
 37301                                  
 37302                                  ;------ here we get the time & date from the sft for the user
 37303                                  
 37304 0000682E FA                      	cli				; is this cli/sti reqd ? BUGBUG
 37305                                  	;mov	cx,[es:di+13]
 37306 0000682F 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 37307                                  	;mov	dx,[es:di+15]
 37308 00006833 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 37309 00006837 FB                      	sti
 37310 00006838 E84A9C                  	call	Get_User_Stack
 37311                                  	;mov	[si+4],cx
 37312 0000683B 894C04                  	mov	[si+user_env.user_CX],cx
 37313                                  	;mov	[si+6],dx
 37314 0000683E 895406                  	mov	[si+user_env.user_DX],dx
 37315 00006841 EB1F                    	jmp	short ok_ret
 37316                                  
 37317                                  ;------ here we set the time in sft
 37318                                  
 37319                                  ft_set_time:
 37320 00006843 E8B2AA                  	call    ECritSFT
 37321                                  	;mov	[es:di+13],cx
 37322 00006846 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 37323                                  	;mov	[es:di+15],dx
 37324 0000684A 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 37325                                  
 37326 0000684E 31C0                    	xor	ax, ax
 37327 00006850 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 37328                                  
 37329                                  ;------ set the flags in SFT entry
 37330                                  	;and	word [es:di+5],0FFBFh
 37331                                  	; 18/12/2022
 37332                                  	;and	byte [es:di+5],0BFh
 37333 00006855 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 37334                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 37335                                  							; mark file as dirty
 37336                                  	;or	word [es:di+5],4000h
 37337                                  	; 17/12/2022
 37338                                  	;or	byte [es:di+6],40h
 37339 0000685A 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 37340                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 37341                                  							; ask close not to
 37342                                  							;   bother about date
 37343                                  							;   and time
 37344 0000685F E8B1AA                  	call	LCritSFT
 37345                                  ok_ret:
 37346                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37347                                  	; 17/12/2022
 37348 00006862 E9D69D                  	jmp	SYS_RET_OK
 37349                                  	;jmp	short LSeekOk
 37350                                  
 37351                                  inval_func:
 37352                                  	;mov	byte [ss:EXTERR_LOCUS],1
 37353 00006865 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37354                                  						;SS Overr
 37355                                  	;mov	al,1
 37356 0000686B B001                    	mov	al,error_invalid_function ; give bad return
 37357                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37358                                  ft_error:
 37359                                  	;;jmp	SYS_RET_ERR
 37360                                  	;jmp	short LSeekError3
 37361                                  	; 17/12/2022
 37362 0000686D EBAF                    	jmp	short LSeekError
 37363                                  
 37364                                  ; 21/05/2019 - Retro DOS v4.0
 37365                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 37366                                  
 37367                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37368                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 37369                                  
 37370                                  ;BREAK <$DUP - duplicate a jfn>
 37371                                  ;----------------------------------------------------------------------------
 37372                                  ;
 37373                                  ;   Assembler usage:
 37374                                  ;	    MOV     BX, fh
 37375                                  ;	    MOV     AH, Dup
 37376                                  ;	    INT     int_command
 37377                                  ;	  AX has the returned handle
 37378                                  ;   Errors:
 37379                                  ;	    AX = dup_invalid_handle
 37380                                  ;	       = dup_too_many_open_files
 37381                                  ;
 37382                                  ;----------------------------------------------------------------------------
 37383                                  
 37384                                  _$DUP:
 37385 0000686F 89D8                    	MOV	AX,BX			; save away old handle in AX
 37386 00006871 E86FFD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 37387                                  DupErrorCheck:
 37388 00006874 72A8                    	JC	short DupErr		; nope, bye
 37389 00006876 06                      	push	es
 37390 00006877 57                      	push	di			; save away SFT
 37391 00006878 5E                      	pop	si			; into convenient place DS:SI
 37392 00006879 1F                      	pop	ds
 37393 0000687A 93                      	XCHG	AX,BX			; get back old handle
 37394 0000687B E81D00                  	call	CheckOwner		; get sft in ES:DI
 37395 0000687E 729E                    	JC	short DupErr		; errors go home
 37396 00006880 E845C1                  	call	DOS_Dup_Direct
 37397 00006883 E800FD                  	call	pJFNFromHandle		; get pointer
 37398 00006886 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 37399 00006889 881C                    	MOV	[SI],BL			; stuff in new SFT
 37400                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37401                                  	;jmp	SYS_RET_OK		; and go home
 37402 0000688B EBD5                    	jmp	short ok_ret
 37403                                  
 37404                                  	; 17/12/2022
 37405                                  ;DupErr:
 37406                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37407                                  	;;jmp	SYS_RET_ERR
 37408                                  	;jmp	short ft_error
 37409                                  
 37410                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 37411                                  ;----------------------------------------------------------------------------
 37412                                  ;
 37413                                  ;   Assembler usage:
 37414                                  ;	    MOV     BX, fh
 37415                                  ;	    MOV     CX, newfh
 37416                                  ;	    MOV     AH, Dup2
 37417                                  ;	    INT     int_command
 37418                                  ;   Error returns:
 37419                                  ;	    AX = error_invalid_handle
 37420                                  ;
 37421                                  ;----------------------------------------------------------------------------
 37422                                  
 37423                                  _$DUP2:
 37424 0000688D 53                      	push	bx
 37425 0000688E 51                      	push	cx			; save source
 37426 0000688F 89CB                    	MOV	BX,CX			; get one to close
 37427 00006891 E8AAFD                  	call	_$CLOSE			; close destination handle
 37428 00006894 5B                      	pop	bx
 37429 00006895 58                      	pop	ax			; old in AX, new in BX
 37430 00006896 E8EDFC                  	call	pJFNFromHandle		; get pointer
 37431 00006899 EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 37432                                  
 37433                                  ;Break	<CheckOwner - verify ownership of handles from server>
 37434                                  ;----------------------------------------------------------------------------
 37435                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 37436                                  ;   process without the process knowing it (delete/rename of open files, for
 37437                                  ;   example), it is possible for the redirector to issue a call to a handle
 37438                                  ;   that it soes not rightfully own. We check here to make sure that the
 37439                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 37440                                  ;   SFFromHandle to really make sure that the SFT is good.
 37441                                  ;
 37442                                  ;	ENTRY	BX has the handle
 37443                                  ;		User_ID is the current user
 37444                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 37445                                  ;		Carry Set => AX has error code
 37446                                  ;	USES	none
 37447                                  ;----------------------------------------------------------------------------
 37448                                  
 37449                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37450                                  	; 21/05/2019 - Retro DOS v4.0
 37451                                  CheckOwner:
 37452                                  	; 13/07/2018 - Retro DOS v3.0
 37453                                  
 37454 0000689B E805FD                  	call	SFFromHandle
 37455 0000689E 721B                    	jc	short co_ret_label	; retc
 37456                                  
 37457 000068A0 50                      	push	ax
 37458                                  
 37459                                  	; MSDOS 6.0
 37460                                  
 37461                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 37462                                  ;SR; are shared across multiple VMs in win386.
 37463                                  
 37464 000068A1 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 37465 000068A7 7404                    	jz	short no_win386		;win386 is not present
 37466 000068A9 31C0                    	xor	ax,ax			;set the zero flag
 37467 000068AB EB08                    	jmp	short _skip_win386	
 37468                                  
 37469                                  no_win386:
 37470 000068AD 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 37471                                  	;cmp	ax,[es:di+47]
 37472 000068B1 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 37473                                  
 37474                                  _skip_win386:
 37475 000068B5 58                      	pop	ax
 37476                                  	
 37477                                  	; 17/12/2022
 37478 000068B6 7403                    	jz	short co_ret_label
 37479                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37480                                  	;jnz	short CheckOwner_err
 37481                                  	;retn
 37482                                  	
 37483                                  CheckOwner_err:
 37484                                  	;mov	al,6
 37485 000068B8 B006                    	mov	al,error_invalid_handle
 37486 000068BA F9                      	stc
 37487                                  
 37488                                  co_ret_label:
 37489 000068BB C3                      	retn
 37490                                  
 37491                                  ;============================================================================
 37492                                  ; MACRO.ASM, MSDOS 6.0, 1991
 37493                                  ;============================================================================
 37494                                  ; Retro	DOS v3.0 - 11/07/2018
 37495                                  ; 21/05/2019 - Retro DOS v4.0
 37496                                  
 37497                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 37498                                  ;	NAME	MACRO
 37499                                  
 37500                                  ;	Microsoft Confidential
 37501                                  ;	Copyright (C) Microsoft Corporation 1991
 37502                                  ;	All Rights Reserved.
 37503                                  
 37504                                  ;**	MACRO.ASM
 37505                                  ;
 37506                                  ;	$AssignOper
 37507                                  ;	FIND_DPB
 37508                                  ;	InitCDS
 37509                                  ;	$UserOper
 37510                                  ;	GetVisDrv
 37511                                  ;	GetThisDrv
 37512                                  ;	GetCDSFromDrv
 37513                                  ;
 37514                                  ;   Revision history:
 37515                                  ;
 37516                                  ;	Created: MZ 4 April 1983
 37517                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 37518                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 37519                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 37520                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 37521                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 37522                                  ;				    aliasing.
 37523                                  ;
 37524                                  ;   MSDOS performs several types of name translation. First, we maintain for
 37525                                  ;   each valid drive letter the text of the current directory on that drive.
 37526                                  ;   For invalid drive letters, there is no current directory so we pretend to
 37527                                  ;   be at the root. A current directory is either the raw local directory
 37528                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 37529                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 37530                                  ;
 37531                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 37532                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 37533                                  ;   this and all * are expanded into ?'s.
 37534                                  ;
 37535                                  ;   The second part of name translation involves subtree aliasing. A list of
 37536                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 37537                                  ;   the previous 'canonicalization' are then examined to see if any of the
 37538                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 37539                                  ;   replaced with the other subtree in the pair.
 37540                                  ;
 37541                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 37542                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 37543                                  ;   The output of the previous translation is examined to see if any of the
 37544                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 37545                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 37546                                  ;   'mount' one device under another.
 37547                                  ;
 37548                                  ;   The final form of name translation involves the mapping of a user's
 37549                                  ;   logical drive number into the internal physical drive. This is
 37550                                  ;   accomplished by converting the drive number into letter:CON, performing
 37551                                  ;   the above translation and then converting the character back into a drive
 37552                                  ;   number.
 37553                                  ;
 37554                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 37555                                  ;   take a path and form the real text of the pathname with all . and ..
 37556                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 37557                                  ;   TransPath.
 37558                                  ;
 37559                                  ;	A000	version 4.00  Jan. 1988
 37560                                  
 37561                                  ;Installed = TRUE
 37562                                  
 37563                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 37564                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 37565                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 37566                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 37567                                  ;					; current drive)
 37568                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 37569                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 37570                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 37571                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 37572                                  ;	I_need	MYNAME,16		; machine name
 37573                                  ;	I_need	MYNUM,WORD		; machine number
 37574                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 37575                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 37576                                  ;	I_need	DrvErr,BYTE		; drive error
 37577                                  
 37578                                  ;BREAK <$AssignOper -- Set up a Macro>
 37579                                  ;----------------------------------------------------------------------------
 37580                                  ; Inputs:
 37581                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 37582                                  ;	AL = 01 set assign mode 		    (SetMode)
 37583                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 37584                                  ;	AL = 03 Define Macro (attch start)
 37585                                  ;	    BL = Macro type
 37586                                  ;	       = 0 alias
 37587                                  ;	       = 1 file/device
 37588                                  ;	       = 2 drive
 37589                                  ;	       = 3 Char device -> network
 37590                                  ;	       = 4 File device -> network
 37591                                  ;	    DS:SI -> ASCIZ source name
 37592                                  ;	    ES:DI -> ASCIZ destination name
 37593                                  ;	AL = 04 Cancel Macro
 37594                                  ;	    DS:SI -> ASCIZ source name
 37595                                  ;	AL = 05 Modified get attach list entry
 37596                                  ;	AL = 06 Get ifsfunc item
 37597                                  ;	AL = 07 set in_use of a drive's CDS
 37598                                  ;	     DL = drive number, 0=default  0=A,,
 37599                                  ;	AL = 08 reset in_use of a drive's CDS
 37600                                  ;	     DL = drive number, 0=A, 1=B,,,
 37601                                  ; Function:
 37602                                  ;	Do macro stuff
 37603                                  ; Returns:
 37604                                  ;	Std Xenix style error return
 37605                                  ;----------------------------------------------------------------------------
 37606                                  
 37607                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37608                                  	; 21/05/2019 - Retro DOS v4.0
 37609                                  _$AssignOper:
 37610                                  	; MSDOS 6.0
 37611 000068BC 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 37612 000068BE 7525                    	JNZ	short chk08		      ; no			;AN000;
 37613                                  srinuse:								;AN000;
 37614 000068C0 50                      	PUSH	AX			      ; save al 		;AN000;
 37615 000068C1 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 37616 000068C3 E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 37617 000068C6 58                      	POP	AX			      ; 			;AN000;
 37618 000068C7 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 37619                                  	;cmp	word [si+45h],0
 37620 000068C9 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 37621 000068CD 7410                    	JZ	short baddrv		      ;     no			;AN000;
 37622 000068CF 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 37623 000068D1 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 37624                                  	;or	word [si+43h],4000h
 37625                                  	; 17/12/2022
 37626                                  	;or	byte [si+44h],40h
 37627 000068D3 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37628                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 37629 000068D7 EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 37630                                  resetdrv:
 37631                                  	;and	word [si+43h],0BFFFh									;AN000;
 37632                                  	; 18/12/2022
 37633 000068D9 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 37634                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 37635 000068DD EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 37636                                  
 37637                                  	; 17/12/2022
 37638                                  baddrv: 								;AN000;
 37639 000068DF B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 37640                                  
 37641                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37642                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 37643                                  	; 17/12/2022
 37644                                  	; 21/05/2019
 37645                                  ASS_ERR:
 37646 000068E2 E95F9D                  	jmp	SYS_RET_ERR
 37647                                  
 37648                                  chk08:									;AN000;
 37649 000068E5 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 37650 000068E7 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 37651                                  
 37652                                    ;IF	NOT INSTALLED
 37653                                  	;transfer NET_ASSOPER
 37654                                    ;ELSE
 37655                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37656 000068E9 50                      	PUSH	AX
 37657                                  	;mov	ax,111Eh
 37658                                  	;MOV	AX,(MultNET SHL 8) OR 30
 37659 000068EA B81E11                  	mov	ax,(MultNET*256)+30
 37660 000068ED CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 37661                                  			; SS = DOS CS
 37662                                  			; STACK: WORD function to execute
 37663                                  			; Return: CF set on error, AX = error code
 37664                                  			; STACK unchanged
 37665 000068EF 5B                      	POP	BX			; Don't zap error code in AX
 37666 000068F0 72F0                    	JC	short ASS_ERR
 37667                                  okdone:
 37668 000068F2 E9469D                  	jmp	SYS_RET_OK
 37669                                  
 37670                                  	; 17/12/2022
 37671                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37672                                  ;ASS_ERR:
 37673                                  	;jmp	SYS_RET_ERR
 37674                                  
 37675                                    ;ENDIF
 37676                                  
 37677                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 37678                                  ;----------------------------------------------------------------------------
 37679                                  ;**	FIND_DPB - Find a DPB from a Drive #
 37680                                  ;
 37681                                  ;	ENTRY	AL has drive number A = 0
 37682                                  ;	EXIT	'C' set
 37683                                  ;		    No DPB for this drive number
 37684                                  ;		'C' clear
 37685                                  ;		    DS:SI points to DPB for drive
 37686                                  ;	USES	SI, DS, Flags
 37687                                  ;----------------------------------------------------------------------------
 37688                                  
 37689                                  	; 21/05/2019 - Retro DOS v4.0
 37690                                  FIND_DPB:
 37691 000068F5 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 37692                                  fdpb5:	
 37693 000068FA 83FEFF                  	CMP	SI,-1
 37694 000068FD 7409                    	JZ	short fdpb10
 37695 000068FF 3A04                    	cmp	al,[si]
 37696                                  	;CMP	AL,[SI+DPB.DRIVE]
 37697 00006901 7406                    	jz	short ret_label15	; Carry clear (retz)
 37698                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 37699                                  	;lds	si,[si+19h] ; MSDOS 6.0
 37700 00006903 C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 37701 00006906 EBF2                    	JMP	short fdpb5
 37702                                  fdpb10:	
 37703 00006908 F9                      	STC
 37704                                  ret_label15:
 37705 00006909 C3                      	retn
 37706                                  
 37707                                  ;	Break <InitCDS - set up an empty CDS>
 37708                                  ;----------------------------------------------------------------------------
 37709                                  ;**	InitCDS - Setup an Empty CDS
 37710                                  ;
 37711                                  ;	ENTRY	ThisCDS points to CDS
 37712                                  ;		AL has uppercase drive letter
 37713                                  ;	EXIT	ThisCDS is now empty
 37714                                  ;		(ES:DI) = CDS
 37715                                  ;		'C' set if no DPB associated with drive
 37716                                  ;	USES	AH,ES,DI, Flags
 37717                                  ;----------------------------------------------------------------------------
 37718                                  
 37719                                  ; 21/05/2019 - Retro DOS v4.0
 37720                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 37721                                  
 37722                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37723                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 37724                                  
 37725                                  InitCDS:
 37726                                  	; 19/08/2018
 37727                                  	; 05/08/2018 - Retro DOS v3.0
 37728                                  	; MSDOS 6.0
 37729 0000690A 50                      	push	ax			; save (AL) for caller
 37730 0000690B 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 37731                                  	;mov	word [es:di+67],0
 37732 00006910 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 37733 00006916 2C40                    	SUB	AL,"A"-1                ; A = 1
 37734 00006918 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 37735 0000691D 7236                    	JC	short icdsx		; Drive does not map a physical drive
 37736 0000691F 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 37737 00006920 50                      	PUSH	AX			; save drive number for later
 37738 00006921 0441                    	add	al,"A"
 37739 00006923 B43A                    	MOV	AH,':'
 37740 00006925 268905                  	mov	[ES:DI],ax
 37741                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 37742                                  	;mov	ax,"\"
 37743                                  	;mov	[es:di+2],ax
 37744                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 37745 00006928 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 37746                                  	;or	word [es:di+67],4000h
 37747                                  	;or	byte [es:di+68],40h
 37748 0000692E 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 37749 00006933 29C0                    	sub	ax,ax
 37750                                  	;MOV	[es:di+73],ax ; 0
 37751 00006935 26894549                	MOV	[ES:DI+curdir.ID],ax
 37752                                  	;mov	[es:di+75],ax ; 0
 37753 00006939 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 37754 0000693D B002                    	mov	al,2
 37755                                  	;mov	[es:di+79],aX ; 2
 37756 0000693F 2689454F                	MOV	[ES:DI+curdir.end],ax
 37757 00006943 58                      	POP	AX			; (al) = drive number
 37758 00006944 1E                      	push	ds
 37759 00006945 56                      	push	si
 37760 00006946 E8ACFF                  	call	FIND_DPB
 37761 00006949 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 37762                                  	;mov	[es:di+69],si
 37763 0000694B 26897545                	MOV	[ES:DI+curdir.devptr],SI
 37764                                  	;mov	[es:di+71],ds
 37765 0000694F 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 37766                                  icds5:	
 37767 00006953 5E                      	pop	si
 37768 00006954 1F                      	pop	ds
 37769                                  icdsx:	
 37770 00006955 58                      	pop	ax
 37771                                  RET45:
 37772 00006956 C3                      	retn
 37773                                  
 37774                                  ;Break <$UserOper - get/set current user ID (for net)>
 37775                                  ;----------------------------------------------------------------------------
 37776                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 37777                                  ;	maintain this string and do no verifications.
 37778                                  ;
 37779                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 37780                                  ;				      4-printer-set-flags,5-printer-get-flags)
 37781                                  ;		DS:DX is user string pointer (calls 1,2)
 37782                                  ;		ES:DI is user buffer (call 3)
 37783                                  ;		BX is assign index (calls 2,3,4,5)
 37784                                  ;		CX is user number (call 1)
 37785                                  ;		DX is flag word (call 4)
 37786                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 37787                                  ;			and user CX is set to the user number
 37788                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 37789                                  ;		If AL = 5 then DX is flag word
 37790                                  ;----------------------------------------------------------------------------
 37791                                  
 37792                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37793                                  	; 21/05/2019 - Retro DOS v4.0
 37794                                  _$UserOper:
 37795                                  	; 05/08/2018 - Retro DOS v3.0
 37796                                  	; MSDOS 6.0 (& MSDOS 3.3)
 37797 00006957 50                      	PUSH	AX
 37798 00006958 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 37799 0000695A 58                      	POP	AX
 37800 0000695B 7211                    	JB	short UserGet 		; return to user the string
 37801 0000695D 742E                    	JZ	short UserSet 		; set the current user
 37802 0000695F 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 37803 00006961 763D                    	JBE	short UserPrint		; yep
 37804                                  	;mov	byte [ss:EXTERR_LOCUS],1
 37805 00006963 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 37806                                  					; Extended Error Locus
 37807                                  	;error	error_invalid_function	; not 0,1,2,3
 37808                                  	;mov	al,1
 37809 00006969 B001                    	MOV	AL,error_invalid_function
 37810                                  useroper_error:
 37811                                  	; 17/12/2022
 37812                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37813 0000696B E9D69C                  	JMP	SYS_RET_ERR
 37814                                  	;jmp	short ASS_ERR
 37815                                  
 37816                                  UserGet:
 37817                                  ; Transfer MYNAME to DS:DX
 37818                                  ; Set Return CX to MYNUM
 37819 0000696E 1E                      	PUSH	DS			; switch registers
 37820 0000696F 07                      	POP	ES
 37821 00006970 89D7                    	MOV	DI,DX			; destination
 37822 00006972 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 37823 00006977 E80B9B                  	call	Get_User_Stack
 37824                                  	;mov	[si+4],cx
 37825 0000697A 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 37826 0000697D 16                      	push	ss			; point to DOSDATA
 37827 0000697E 1F                      	pop	ds
 37828 0000697F BE[0503]                	MOV	SI,MYNAME		; point source to user string
 37829                                  UserMove:
 37830 00006982 B90F00                  	MOV	CX,15
 37831 00006985 F3A4                    	REP	MOVSB			; blam.
 37832 00006987 31C0                    	XOR	AX,AX			; 16th byte is 0
 37833 00006989 AA                      	STOSB
 37834                                  UserBye:
 37835 0000698A E9AE9C                  	jmp	SYS_RET_OK		; no errors here
 37836                                  
 37837                                  UserSet:
 37838                                  ; Transfer DS:DX to MYNAME
 37839                                  ; CX to MYNUM
 37840 0000698D 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 37841 00006992 89D6                    	MOV	SI,DX			; user space has source
 37842 00006994 16                      	push	ss
 37843 00006995 07                      	pop	es
 37844 00006996 BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 37845 00006999 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 37846 0000699E EBE2                    	JMP	short UserMove
 37847                                  
 37848                                  UserPrint:
 37849                                  
 37850                                    ;IF NOT Installed
 37851                                    ;	transfer PRINTER_GETSET_STRING
 37852                                    ;ELSE
 37853 000069A0 50                      	PUSH	AX
 37854                                  	;mov	ax,111Fh
 37855                                  	;MOV	AX,(MultNET SHL 8) OR 31
 37856 000069A1 B81F11                  	mov	ax,(MultNET<<8)|31
 37857 000069A4 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 37858                                  			; STACK: WORD function
 37859                                  			; Return: CF set on error, AX = error code
 37860                                  			; STACK unchanged
 37861 000069A6 5A                      	POP	DX			; Clean stack
 37862                                  	;JNC	short OKPA
 37863 000069A7 73E1                    	jnc	short UserBye ; 21/05/2019
 37864                                  	; 17/12/2022
 37865 000069A9 EBC0                    	jmp	short useroper_error
 37866                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37867                                  	;jnb     short OKPA
 37868                                  	;jmp     short useroper_error
 37869                                  
 37870                                  	; 17/12/2022
 37871                                  ;OKPA:
 37872                                  ;	jmp	short UserBye
 37873                                  
 37874                                    ;ENDIF
 37875                                  
 37876                                  
 37877                                  ;Break	<GetVisDrv - return visible drive>
 37878                                  ;----------------------------------------------------------------------------
 37879                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 37880                                  ;
 37881                                  ;   Inputs:	AL has drive identifier (0=default)
 37882                                  ;   Outputs:	Carry Set - invalid drive/macro
 37883                                  ;		Carry Clear - AL has physical drive (0=A)
 37884                                  ;		    ThisCDS points to CDS
 37885                                  ;   Registers modified: AL
 37886                                  ;----------------------------------------------------------------------------
 37887                                  
 37888                                  	; 21/05/2019 - Retro DOS v4.0
 37889                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 37890                                  
 37891                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37892                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 37893                                  GetVisDrv:
 37894                                  	; 05/08/2018 - Retro DOS v3.0
 37895                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 37896 000069AB E81900                  	CALL	GETTHISDRV		; get inuse drive
 37897 000069AE 72A6                    	jc	short RET45
 37898 000069B0 1E                      	push	ds
 37899 000069B1 56                      	push	si
 37900 000069B2 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 37901                                  	;test	word [si+67],2000h
 37902                                  	; 17/12/2022
 37903                                  	;test	byte [si+68],20h
 37904 000069B7 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 37905                                  	;TEST	word [SI+curdir.flags],curdir_splice
 37906 000069BB 5E                      	pop	si
 37907 000069BC 1F                      	pop	ds
 37908 000069BD 7497                    	jz	short RET45		; if not spliced, return OK
 37909                                  	; MSDOS 6.0
 37910                                  	;mov	byte [ss:DrvErr],0Fh
 37911 000069BF 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 37912 000069C5 F9                      	STC				; signal error
 37913 000069C6 C3                      	retn
 37914                                  
 37915                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 37916                                  ;----------------------------------------------------------------------------
 37917                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 37918                                  ;	macro pointer
 37919                                  ;
 37920                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 37921                                  ;   Outputs:
 37922                                  ;		Carry Set - invalid drive/macro
 37923                                  ;		Carry Clear - AL has physical drive (0=A)
 37924                                  ;		   ThisCDS points to macro
 37925                                  ;   Registers modified: AL
 37926                                  ;----------------------------------------------------------------------------
 37927                                  
 37928                                  	; 21/05/2019 - Retro DOS v4.0
 37929                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 37930                                  
 37931                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37932                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 37933                                  GETTHISDRV:
 37934                                  	; 05/08/2018
 37935                                  	; 12/07/2018 - Retro DOS v3.0
 37936                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 37937                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37938 000069C7 08C0                    	OR	AL,AL			; are we using default drive?
 37939 000069C9 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 37940 000069CB 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 37941                                  	;INC	ax			; Counteract next instruction
 37942                                  	; 04/09/2018
 37943                                  	;inc	al
 37944                                  	; 07/12/2022
 37945 000069CF 40                      	inc	ax
 37946                                  GTD10:	
 37947                                  	;DEC	AX
 37948                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37949 000069D0 48                      	dec	ax			; 0 = A
 37950                                  	;dec	al
 37951 000069D1 1E                      	PUSH	DS			; save world
 37952 000069D2 56                      	PUSH	SI
 37953                                  	;mov	byte [ss:EXTERR_LOCUS],2
 37954 000069D3 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 37955 000069D9 36F606[7205]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 37956 000069DF 7420                    	JZ	SHORT GTD20		; Logical
 37957 000069E1 50                      	PUSH	AX
 37958 000069E2 06                      	PUSH	ES
 37959 000069E3 57                      	PUSH	DI
 37960 000069E4 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 37961                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 37962 000069EB 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 37963 000069F0 0441                    	ADD	AL,'A'
 37964 000069F2 E815FF                  	CALL	InitCDS			; InitCDS(c);
 37965                                  	;test	word [es:di+67],4000h
 37966                                  	; 17/12/2022
 37967                                  	;test	byte [es:di+68],40h
 37968 000069F5 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 37969                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 37970 000069FA 5F                      	POP	DI
 37971 000069FB 07                      	POP	ES
 37972 000069FC 58                      	POP	AX
 37973 000069FD 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 37974 000069FF EB18                    	JMP	SHORT GTDX		; carry clear
 37975                                  GTD20:
 37976 00006A01 E81800                  	CALL	GetCDSFromDrv
 37977 00006A04 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 37978                                  	;test	word [si+43h],4000h
 37979                                  	; 17/12/2022
 37980                                  	;test	byte [si+44h],40h
 37981 00006A06 F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37982                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 37983 00006A0A 750D                    	JNZ	SHORT GTDX		; carry clear
 37984                                  GTD30:	
 37985                                  	; 21/05/2019
 37986                                  	; MSDOS 6.0
 37987 00006A0C B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 37988 00006A0E 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 37989                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 37990 00006A12 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 37991 00006A18 F9                      	STC
 37992                                  GTDX:	
 37993 00006A19 5E                      	POP	SI			; restore world
 37994 00006A1A 1F                      	POP	DS
 37995 00006A1B C3                      	RETN
 37996                                   
 37997                                  
 37998                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 37999                                  ;----------------------------------------------------------------------------
 38000                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 38001                                  ;	pointer, returning an error if the drive number is greater than the
 38002                                  ;	number of CDS's
 38003                                  ;
 38004                                  ;   Inputs:	AL is physical unit # A=0...
 38005                                  ;   Outputs:	Carry Set if Bad Drive
 38006                                  ;		Carry Clear
 38007                                  ;		    DS:SI -> CDS
 38008                                  ;		    [THISCDS] = DS:SI
 38009                                  ;   Registers modified: DS,SI
 38010                                  ;----------------------------------------------------------------------------
 38011                                  
 38012                                  	; 21/05/2019 - Retro DOS v4.0
 38013                                  GetCDSFromDrv:
 38014 00006A1C 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 38015                                  	;JB	SHORT GetCDS	; cf=1	; yes, go get the macro
 38016                                  	;STC				; signal error
 38017                                  	;RETN				; bye
 38018                                  	; 23/09/2023
 38019 00006A21 F5                      	cmc	; cf=1 <-> cf=0
 38020 00006A22 7217                    	jc	short GetCDS_retn
 38021                                  GetCDS:
 38022                                  	; 23/09/2023
 38023                                  	;PUSH	BX
 38024 00006A24 50                      	PUSH	AX
 38025 00006A25 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 38026                                  	;mov	bl,81 ; MSDOS 3.3
 38027                                  	;mov	bl,88 ; MSDOS 6.0 
 38028                                  	; 23/09/2023
 38029                                  	;MOV	BL,curdir.size		; size in convenient spot
 38030                                  	;MUL	BL			; get net offset
 38031 00006A2A B458                    	mov	ah,curdir.size
 38032 00006A2C F6E4                    	mul	ah
 38033 00006A2E 01C6                    	ADD	SI,AX ; *		; convert to true pointer
 38034 00006A30 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 38035 00006A35 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 38036 00006A3A 58                      	POP	AX
 38037                                  	; 23/09/2023
 38038                                  	;POP	BX
 38039                                  	; (cf must be 0 here) ; *
 38040                                  	;CLC				; no error
 38041                                  GetCDS_retn:
 38042 00006A3B C3                      	RETN				; bye!
 38043                                  
 38044                                  ;============================================================================
 38045                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 38046                                  ;============================================================================
 38047                                  ; Retro	DOS v3.0 - 12/07/2018
 38048                                  ; 22/05/2019 - Retro DOS v4.0
 38049                                  
 38050                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 38051                                  ;----------------------------------------------------------------------------
 38052                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 38053                                  ;       gritty substitution.
 38054                                  ;
 38055                                  ;   Inputs:     DS:DX - pointer to FCB
 38056                                  ;               ES:DI - point to destination
 38057                                  ;   Outputs:    Carry Set - invalid path in final map
 38058                                  ;               Carry Clear - FCB has been mapped into ES:DI
 38059                                  ;                   Sattrib is set from possibly extended FCB
 38060                                  ;                   ExtFCB set if extended FCB found
 38061                                  ;   Registers modified: most
 38062                                  ;----------------------------------------------------------------------------
 38063                                  
 38064                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38065                                  TransFCB:
 38066                                  	; 22/05/2019 - Retro DOS v4.0
 38067                                  	; 12/07/2018 - Retro DOS v3.0
 38068                                  	;LocalVar FCBTmp,16
 38069                                  	;ENTER
 38070 00006A3C 55                      	push	bp
 38071 00006A3D 89E5                    	mov	bp,sp
 38072                                  	;sub	sp,15	; MSDOS 3.3
 38073 00006A3F 83EC10                  	sub	sp,16	; MSDOS 6.0
 38074 00006A42 16                      	push	ss
 38075 00006A43 07                      	pop	es
 38076 00006A44 06                      	push	es
 38077 00006A45 57                      	push	di
 38078                                  	;lea	di,[bp-15] ; MSDOS 3.3
 38079                                  	;LEA	DI,FCBTmp 
 38080 00006A46 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 38081 00006A49 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 38082 00006A4F 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 38083 00006A55 E8E4B1                  	call	GetExtended             ; get FCB, extended or not
 38084                                  	; 06/12/2022
 38085 00006A58 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 38086 00006A5A 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 38087 00006A5D 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 38088 00006A61 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 38089                                  GetDrive:
 38090 00006A67 AC                      	lodsb				; get drive byte
 38091 00006A68 E85CFF                  	call	GETTHISDRV
 38092 00006A6B 722A                    	jc	short BadPack
 38093 00006A6D E87303                  	call	TextFromDrive           ; convert 0-based drive to text
 38094                                  
 38095                                  ; Scan the source to see if there are any illegal chars
 38096                                  
 38097                                  	;mov	bx,CharType		; load lookup table
 38098 00006A70 B90B00                  	mov	cx,11
 38099 00006A73 56                      	push	si			; back over name, ext
 38100                                  FCBScan:
 38101 00006A74 AC                      	lodsb				; get a byte
 38102                                  	
 38103                                  	; 09/08/2018
 38104                                  	;;xlat	byte [es:bx]
 38105                                  	;es	xlat
 38106                                  
 38107                                  	; 22/05/2019 - Retro DOS v4.0	
 38108 00006A75 E836E5                  	call	GetCharType		; get flags
 38109                                  
 38110                                  	;test	al,8	
 38111 00006A78 A808                    	test	al,FFCB
 38112 00006A7A 741B                    	jz	short BadPack
 38113                                  NextCh: 
 38114 00006A7C E2F6                    	loop	FCBScan
 38115 00006A7E 5E                      	pop	si
 38116 00006A7F 89FB                    	mov	bx,di
 38117 00006A81 E8F4B5                  	call	PackName                ; crunch the path
 38118 00006A84 5F                      	pop	di			; get original destination
 38119 00006A85 07                      	pop	es
 38120 00006A86 16                      	push	ss			; get DS addressability
 38121 00006A87 1F                      	pop	ds
 38122                                  	;lea	si,[bp-15] ; MSDOS 3.3
 38123                                  	;LEA	SI,FCBTmp		; point at new pathname
 38124 00006A88 8D76F0                  	lea	si,[bp-16]
 38125 00006A8B 803F00                  	cmp	byte [bx],0
 38126 00006A8E 7407                    	jz	short BadPack
 38127 00006A90 55                      	push	bp
 38128 00006A91 E80E00                  	call	TransPathSet            ; convert the path
 38129 00006A94 5D                      	pop	bp
 38130 00006A95 7303                    	jnc	short FCBRet		; bye with transPath error code
 38131                                  BadPack:
 38132 00006A97 F9                      	STC
 38133                                  	;mov	al,3
 38134 00006A98 B003                    	MOV     AL,error_path_not_found
 38135                                  FCBRet: 
 38136                                  	;LEAVE
 38137 00006A9A 89EC                    	mov	sp,bp
 38138 00006A9C 5D                      	pop	bp
 38139                                  TransPath_retn:
 38140 00006A9D C3                      	retn
 38141                                  
 38142                                  ; 12/07/2018 - Retro DOS v3.0
 38143                                  
 38144                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 38145                                  ;----------------------------------------------------------------------------
 38146                                  ;
 38147                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 38148                                  ;       substitution, insertion of current directory and fixing . and ..
 38149                                  ;       entries. Perform splicing. Allow input string to match splice
 38150                                  ;       exactly.
 38151                                  ;
 38152                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 38153                                  ;       matches splice.
 38154                                  ;
 38155                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 38156                                  ;
 38157                                  ;   The following anomalous behaviour is required:
 38158                                  ;
 38159                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 38160                                  ;       Paths on devices are ignored. (truncate to 0-length)
 38161                                  ;       Raw net I/O sets ThisCDS => NULL.
 38162                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 38163                                  ;
 38164                                  ;   Other behaviour:
 38165                                  ;
 38166                                  ;       ThisCDS set up.
 38167                                  ;       FatRead done on local CDS.
 38168                                  ;       ValidateCDS done on local CDS.
 38169                                  ;
 38170                                  ;   Brief flowchart:
 38171                                  ;
 38172                                  ;       if fSharing then
 38173                                  ;           set up DummyCDS (ThisCDS)
 38174                                  ;           canonicalize (sets cMeta)
 38175                                  ;           splice
 38176                                  ;           fatRead
 38177                                  ;           return
 38178                                  ;       if \\ or d:\\ lead then
 38179                                  ;           set up null CDS (ThisCDS)
 38180                                  ;           canonicalize (sets cMeta)
 38181                                  ;           return
 38182                                  ;       if device then
 38183                                  ;           set up dummyCDS (ThisCDS)
 38184                                  ;           canonicalize (sets cMeta)
 38185                                  ;           return
 38186                                  ;       if file then
 38187                                  ;           getCDS (sets (ThisCDS) from name)
 38188                                  ;           validateCDS (may reset current dir)
 38189                                  ;           Copy current dir
 38190                                  ;           canonicalize (set cMeta)
 38191                                  ;           splice
 38192                                  ;           generate correct CDS (ThisCDS)
 38193                                  ;           if local then
 38194                                  ;               fatread
 38195                                  ;           return
 38196                                  ;
 38197                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38198                                  ;               DI - point to buffer in DOSDATA
 38199                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38200                                  ;                   syntax, etc. or user FAILed to I 24.
 38201                                  ;               WFP_Start - points to beginning of buffer
 38202                                  ;               Curr_Dir_End - points to end of current dir in path
 38203                                  ;               DS - DOSDATA
 38204                                  ;   Registers modified: most
 38205                                  ;
 38206                                  ;----------------------------------------------------------------------------
 38207                                  
 38208                                  ; 22/05/2019
 38209                                  ; 13/05/2019 - Retro DOS v4.0
 38210                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 38211                                  
 38212                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38213                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 38214                                  
 38215                                  TransPath:
 38216 00006A9E 30C0                    	XOR     AL,AL
 38217 00006AA0 EB02                    	JMP     SHORT SetSplice
 38218                                  TransPathSet:
 38219 00006AA2 B0FF                    	MOV     AL,-1
 38220                                  SetSplice:
 38221 00006AA4 36A2[4C03]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 38222 00006AA8 B0FF                    	MOV     AL,-1
 38223                                  TransPathNoSet:
 38224 00006AAA 36A2[7105]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 38225 00006AAE 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 38226 00006AB4 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 38227 00006AB9 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 38228 00006AC0 16                      	push	ss
 38229 00006AC1 07                      	pop	es
 38230                                  	;lea	bp,[di+134]
 38231 00006AC2 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 38232                                  ;
 38233                                  ; if this is through the server dos call, fsharing is set. We set up a
 38234                                  ; dummy cds and let the operation go.
 38235                                  ;
 38236 00006AC6 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 38237 00006ACC 7435                    	JZ	short CheckUNC		; skip to UNC check
 38238                                  ;
 38239                                  ; ES:DI point to buffer
 38240                                  ;
 38241 00006ACE E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 38242 00006AD1 E8F3FE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 38243 00006AD4 722A                    	jc	short NoPath
 38244 00006AD6 E80A03                  	CALL	TextFromDrive		; drop in new
 38245 00006AD9 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 38246 00006ADC E83401                  	CALL	Canonicalize            ; copy and canonicalize
 38247 00006ADF 72BC                    	jc	short TransPath_retn	; errors
 38248                                  ;
 38249                                  ; Perform splices for net guys.
 38250                                  ;
 38251 00006AE1 16                      	push	ss
 38252 00006AE2 1F                      	pop	ds
 38253 00006AE3 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 38254 00006AE7 F606[7105]FF            	TEST	byte [FSPLICE],-1
 38255 00006AEC 7403                    	JZ	short NoServerSplice
 38256 00006AEE E83102                  	CALL    Splice
 38257                                  NoServerSplice:
 38258 00006AF1 16                      	push	ss
 38259 00006AF2 1F                      	pop	ds                      ; for FATREAD
 38260 00006AF3 C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 38261 00006AF7 E8FEA7                  	call	ECritDisk
 38262 00006AFA E807EB                  	call	FATREAD_CDS
 38263 00006AFD E813A8                  	call	LCritDisk
 38264                                  NoPath:
 38265                                  	;mov	al,3
 38266 00006B00 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38267 00006B02 C3                      	retn				; any errors are in Carry flag
 38268                                  
 38269                                  ; Let the network decide if the name is for a spooled device. It will map
 38270                                  ; the name if so.
 38271                                  
 38272                                  CheckUNC:
 38273 00006B03 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 38274                                  	;CallInstall NetSpoolCheck,MultNET,35
 38275 00006B0A B82311                  	mov	ax,1123h
 38276 00006B0D CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 38277                                  			; DS:SI -> ASCIZ filename to canonicalize
 38278                                  			; ES:DI -> 128-byte buffer for qualified name
 38279                                  			; Return: CF set if not resolved
 38280 00006B0F 7329                    	JNC	short UNCDone
 38281                                  
 38282                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 38283                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 38284                                  ; input, then the name has been changed to the remote spooler by the above net
 38285                                  ; call. Also, there may be a drive in front of the \\.
 38286                                  
 38287                                  NO_CHECK:
 38288 00006B11 E8B902                  	CALL    DriveFromText		; eat drive letter
 38289 00006B14 50                      	PUSH    AX                      ; save it
 38290 00006B15 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 38291 00006B17 E8B1E4                  	call    PATHCHRCMP              ; convert to normal form
 38292 00006B1A 86E0                    	XCHG    AH,AL                   ; swap for second byte
 38293 00006B1C E8ACE4                  	call    PATHCHRCMP              ; convert to normal form
 38294 00006B1F 751F                    	JNZ	short CheckDevice	; not a path char
 38295 00006B21 38C4                    	CMP     AH,AL                   ; are they same?
 38296 00006B23 751B                    	JNZ	short CheckDevice	; nope
 38297                                  
 38298                                  ; We have a UNC request. We must copy the string up to the beginning of the
 38299                                  ; local machine root path
 38300                                  
 38301 00006B25 58                      	POP     AX
 38302 00006B26 A5                      	MOVSW                           ; get the lead \\.
 38303                                  UNCCpy:
 38304 00006B27 AC                      	LODSB                           ; get a byte
 38305 00006B28 E84BE4                   	call	UCase                   ;AN000;; convert the char
 38306 00006B2B 08C0                    	OR      AL,AL
 38307 00006B2D 740E                    	JZ	short UNCTerm		; end of string. All done.
 38308 00006B2F E899E4                  	call    PATHCHRCMP              ; is it a path char?
 38309 00006B32 89FB                    	MOV     BX,DI                   ; backup position
 38310 00006B34 AA                      	STOSB
 38311 00006B35 75F0                    	JNZ	short UNCCpy		; no, go copy
 38312 00006B37 E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 38313                                  UNCDone:
 38314 00006B3A 16                      	push	ss
 38315 00006B3B 1F                      	pop	ds
 38316 00006B3C C3                       	retn				; return error code
 38317                                  UNCTerm:
 38318 00006B3D AA                      	STOSB                           ;AN000;
 38319 00006B3E EBFA                    	JMP	short UNCDone		;AN000;
 38320                                  
 38321                                  CheckDevice:
 38322                                  
 38323                                  ; Check DS:SI for device. First eat any path stuff
 38324                                  
 38325 00006B40 58                      	POP     AX                      ; retrieve drive info
 38326 00006B41 803C00                  	CMP     BYTE [SI],0		; check for null file
 38327 00006B44 7504                    	JNZ	short CheckPath
 38328                                  	;mov	al,2 
 38329 00006B46 B002                    	MOV     AL,error_file_not_found ; bad file error
 38330 00006B48 F9                      	STC                             ; signal error on null input
 38331 00006B49 C3                      	RETN				; bye!
 38332                                  CheckPath:
 38333 00006B4A 50                      	push	ax
 38334 00006B4B 55                      	push	bp			; save drive number
 38335                                  
 38336                                  
 38337                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38338                                  %if 0
 38339                                  	; MSDOS 6.0
 38340                                  ;;;BUGBUG BUG 10-26-1992 scottq
 38341                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 38342                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 38343                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 38344                                  ;;;end up having a 5D in the opcode's displacement field. The
 38345                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 38346                                  ;;;
 38347                                  ;;;What we do here is do a call to a function that is less than 5Dh
 38348                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 38349                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 38350                                  ;;;
 38351                                  ;;;More info:
 38352                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 38353                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 38354                                  ;;;
 38355                                  	call	no5Dshere
 38356                                  start5Dhack:
 38357                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice         
 38358                                  backfrom5Dhack:
 38359                                  
 38360                                  %endif
 38361                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38362                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 38363 00006B4C E8EDD6                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 38364                                  
 38365 00006B4F 5D                      	pop	bp
 38366 00006B50 58                      	pop	ax			; get drive letter back
 38367 00006B51 731C                    	JNC	short DoFile		; yes we have a file.
 38368                                  
 38369                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 38370                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 38371                                  ; call.
 38372                                  
 38373 00006B53 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 38374 00006B59 E86BFE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 38375 00006B5C 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 38376                                  
 38377                                  ; Now that we have noted that we have a device, we put it into a form that
 38378                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 38379                                  ; string. We relax this to state that if the d:\ is present then the path
 38380                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 38381                                  ; a device.
 38382                                  
 38383 00006B62 E87E02                  	CALL    TextFromDrive
 38384 00006B65 B02F                    	MOV     AL,'/'                  ; path sep.
 38385 00006B67 AA                      	STOSB
 38386 00006B68 E853A6                  	call	StrCpy			; move remainder of string
 38387                                  
 38388 00006B6B F8                      	CLC                             ; everything OK.
 38389 00006B6C 16                      	push	ss
 38390 00006B6D 1F                      	pop	ds                      ; remainder of OK stuff
 38391                                  DoFile_retn:
 38392 00006B6E C3                      	retn
 38393                                  
 38394                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38395                                  %if 0
 38396                                  
 38397                                  no5Dshere:
 38398                                  	; 10/08/2018
 38399                                  	jmp	CheckThisDevice		; snoop for device
 38400                                  %endif
 38401                                  
 38402                                  ;.erre (no5Dshere - start5Dhack - 5D)
 38403                                  
 38404                                  ; We have a file. Get the raw CDS.
 38405                                  
 38406                                  DoFile:
 38407                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38408                                  
 38409 00006B6F E839FE                  	call	GetVisDrv               ; get proper CDS
 38410                                  	;mov	al,3 
 38411 00006B72 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 38412 00006B74 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 38413                                  
 38414                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 38415                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 38416                                  ; Use the one that we are going to use (ES:DI).
 38417                                  
 38418                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 38419 00006B76 1E                      	push	ds
 38420 00006B77 56                      	push	si
 38421 00006B78 06                      	push	es
 38422 00006B79 57                      	push	di
 38423 00006B7A E803D6                  	call	ValidateCDS             ; poke CDS and make everything OK
 38424                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 38425 00006B7D 5F                      	pop	di
 38426 00006B7E 07                      	pop	es
 38427 00006B7F 5E                      	pop	si
 38428 00006B80 1F                      	pop	ds
 38429                                  	;mov	al,3
 38430 00006B81 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38431                                  	;retc				; someone failed an operation
 38432 00006B83 72E9                    	jc	short DoFile_retn
 38433                                  
 38434                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 38435                                  ; current directory. Copy it in.
 38436                                  
 38437 00006B85 1E                      	push	ds
 38438 00006B86 56                      	push	si
 38439 00006B87 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 38440 00006B8C 89FB                    	MOV     BX,DI                   ; point to destination
 38441                                  	;add	bx,[si+79] ; MSDOS 6.0
 38442 00006B8E 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 38443                                  	;lea	bp,[di+134]
 38444 00006B91 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 38445                                  					;AN000;
 38446 00006B95 E835A6                  	call	FStrCpy                 ; copy string. ES:DI point to end
 38447 00006B98 4F                      	DEC     DI                      ; point to NUL byte
 38448                                  
 38449                                  ; Make sure that there is a path char at end.
 38450                                  
 38451 00006B99 B05C                    	MOV     AL,'\'
 38452 00006B9B 263845FF                	CMP     [ES:DI-1],AL
 38453 00006B9F 7401                    	JZ	short GetOrig
 38454 00006BA1 AA                      	STOSB
 38455                                  
 38456                                  ; Now get original string.
 38457                                  
 38458                                  GetOrig:
 38459 00006BA2 4F                      	DEC     DI                      ; point to path char
 38460 00006BA3 5E                      	pop	si
 38461 00006BA4 1F                      	pop	ds
 38462                                  
 38463                                  ; BX points to the end of the root part of the CDS (at where a path char
 38464                                  ; should be). Now, we decide whether we use this root or extend it with the
 38465                                  ; current directory. See if the input string begins with a leading 
 38467 00006BA5 E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 38468 00006BA8 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 38469 00006BAA 08C0                    	OR      AL,AL                   ; end of string?
 38470 00006BAC 7410                    	JZ	short DoCanon		; yes, skip.
 38471                                  ;
 38472                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 38473                                  ; to this root. Make sure that there is a path char there and advance the
 38474                                  ; source string over all leading \'s.
 38475                                  ;
 38476 00006BAE 89DF                    	MOV     DI,BX                   ; back up to root point.
 38477                                  SkipPath:
 38478 00006BB0 AC                      	LODSB
 38479 00006BB1 E817E4                  	call    PATHCHRCMP
 38480 00006BB4 74FA                    	JZ	short SkipPath
 38481 00006BB6 4E                      	DEC     SI
 38482 00006BB7 08C0                    	OR      AL,AL
 38483 00006BB9 7403                    	JZ	short DoCanon
 38484                                  
 38485                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 38486                                  ; for yucks.
 38487                                  
 38488                                  PathAssure:
 38489 00006BBB B05C                    	MOV     AL,'\'	; 5Ch
 38490 00006BBD AA                      	STOSB
 38491                                  
 38492                                  ; ES:DI point to the correct spot for canonicalization to begin.
 38493                                  ; BP is the max extent to advance DI
 38494                                  ; BX is the backup limit for ..
 38495                                  
 38496                                  DoCanon:
 38497 00006BBE E85200                  	CALL    Canonicalize            ; wham.
 38498                                  	;retc				; badly formatted path.
 38499 00006BC1 72AB                    	jc	short DoFile_retn
 38500                                  
 38501                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 38502                                  ; to wfp_start and do string substitution. BP is still the max position in
 38503                                  ; buffer.
 38504                                  
 38505 00006BC3 16                      	push	ss
 38506 00006BC4 1F                      	pop	ds
 38507 00006BC5 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 38508 00006BC9 C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 38509 00006BCD E81B02                  	CALL    PathPref                ; is there a prefix?
 38510 00006BD0 7514                    	JNZ	short DoSplice		; no, do splice
 38511                                  
 38512                                  ; We have a match. Check to see if we ended in a path char.
 38513                                  
 38514 00006BD2 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 38515 00006BD5 E8F3E3                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 38516 00006BD8 740C                    	JZ	short DoSplice		; yes, no current dir here.
 38517                                  Pathline:                               ; 2/13/KK
 38518 00006BDA 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 38519 00006BDE 7406                    	JZ	short DoSplice
 38520 00006BE0 47                      	INC     DI                      ; point to after current path char
 38521 00006BE1 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 38522                                  
 38523                                  ; Splice the result.
 38524                                  
 38525                                  DoSplice:
 38526 00006BE6 16                      	push	ss
 38527 00006BE7 1F                      	pop	ds			; back to DOSDATA
 38528 00006BE8 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 38529 00006BEC 31C9                    	XOR     CX,CX
 38530 00006BEE F606[7105]FF            	TEST	byte [FSPLICE],-1
 38531 00006BF3 7403                    	JZ	short SkipSplice
 38532 00006BF5 E82A01                  	CALL    Splice                  ; replaces in place.
 38533                                  SkipSplice:
 38534                                  
 38535                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 38536                                  ; device.
 38537                                  
 38538 00006BF8 16                      	push	ss
 38539 00006BF9 1F                      	pop	ds
 38540 00006BFA C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 38541                                  	;test	word [es:di+67],8000h
 38542                                  	; 17/12/2022
 38543                                  	;test	byte [es:di+68],80h
 38544 00006BFE 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 38545                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 38546 00006C03 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 38547 00006C05 E30B                    	JCXZ    Done
 38548 00006C07 E8EEA6                  	call	ECritDisk
 38549 00006C0A E8F7E9                  	call	FATREAD_CDS
 38550 00006C0D E803A7                  	call	LCritDisk
 38551                                  	;mov	al, 3
 38552 00006C10 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38553                                  Done:   
 38554 00006C12 C3                      	retn                         ; any errors in carry flag.
 38555                                  
 38556                                  ; 13/07/2018
 38557                                  
 38558                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 38559                                  ;----------------------------------------------------------------------------
 38560                                  ;   Canonicalize - copy path removing . and .. entries.
 38561                                  ;
 38562                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38563                                  ;               ES:DI - point to buffer
 38564                                  ;               BX - backup limit (offset from ES) points to slash
 38565                                  ;               BP - end of buffer
 38566                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38567                                  ;                   syntax, etc.
 38568                                  ;               Carry Clear -
 38569                                  ;                   DS:DI - advanced to end of string
 38570                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 38571                                  ;   Registers modified: AX CX DX (in addition to those above)
 38572                                  ;----------------------------------------------------------------------------
 38573                                  
 38574                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38575                                  
 38576                                  Canonicalize:
 38577                                  
 38578                                  ; We copy all leading path separators.
 38579                                  
 38580 00006C13 AC                      	LODSB                           ;   while (PathChr (*s))
 38581 00006C14 E8B4E3                  	call    PATHCHRCMP
 38582 00006C17 7507                    	JNZ	short CanonDec
 38583 00006C19 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 38584 00006C1B 7319                    	JAE	short CanonBad		;           goto error;
 38585 00006C1D AA                      	STOSB
 38586 00006C1E EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 38587                                  CanonDec:
 38588 00006C20 4E                      	DEC     SI
 38589                                  
 38590                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 38591                                  ; component (no leading path separators) and ES:DI being the destination
 38592                                  ; buffer.
 38593                                  
 38594                                  CanonLoop:
 38595                                  
 38596                                  ; If we are at the end of the source string, then we need to check to see that
 38597                                  ; a potential drive specifier is correctly terminated with a path sep char.
 38598                                  ; Otherwise, do nothing
 38599                                  
 38600 00006C21 31C0                    	XOR     AX,AX
 38601 00006C23 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 38602 00006C25 751A                    	JNZ	short DoComponent
 38603 00006C27 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 38604 00006C2C 7505                    	JNZ	short DoTerminate
 38605 00006C2E B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 38606 00006C30 AA                      	STOSB
 38607 00006C31 88E0                    	MOV     AL,AH
 38608                                  DoTerminate:
 38609 00006C33 AA                      	STOSB                           ;           *d++ = 0;
 38610 00006C34 F8                      	CLC                             ;           return (0);
 38611 00006C35 C3                      	retn
 38612                                  
 38613                                  CanonBad:
 38614 00006C36 E8CB01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 38615                                  	;mov	al,3
 38616 00006C39 B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 38617 00006C3B 7402                    	JZ	short PathEnc		; path character encountered in string
 38618                                  	;mov	al,2
 38619 00006C3D B002                    	MOV     AL,error_file_not_found ; Set bad file error
 38620                                  PathEnc:
 38621 00006C3F F9                      	STC
 38622                                  CanonBad_retn:
 38623 00006C40 C3                      	retn
 38624                                  
 38625                                  ; We have a textual component that we must copy. We uppercase it and truncate
 38626                                  ; it to 8.3
 38627                                  
 38628                                  DoComponent:                            ;           }
 38629 00006C41 E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 38630 00006C44 72FA                    	jc	short CanonBad_retn	;           return (-1);
 38631                                  
 38632                                  ; We special case the . and .. cases.  These will be backed up.
 38633                                  
 38634                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 38635 00006C46 26833D2E                	CMP	WORD [ES:DI],002Eh
 38636 00006C4A 7408                    	JZ	short Skip1
 38637                                  	;CMP	WORD PTR ES:[DI],'..'
 38638 00006C4C 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 38639 00006C51 750A                    	JNZ	short CanonNormal
 38640 00006C53 4F                      	DEC     DI                      ;           d--;
 38641                                  Skip1:  
 38642 00006C54 E82A00                  	CALL    SkipBack                ;           SkipBack ();
 38643                                  	;mov	al,3
 38644 00006C57 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38645 00006C59 72E5                    	jc	short CanonBad_retn
 38646 00006C5B EB02                    	JMP     short CanonPath         ;           }
 38647                                  
 38648                                  ; We have a normal path. Advance destination pointer over it.
 38649                                  
 38650                                  CanonNormal:                            ;       else
 38651 00006C5D 01CF                    	ADD     DI,CX                   ;           d += ct;
 38652                                  
 38653                                  ; We have successfully copied a component. We are now pointing at a path
 38654                                  ; sep char or are pointing at a nul or are pointing at something else.
 38655                                  ; If we point at something else, then we have an error.
 38656                                  
 38657                                  CanonPath:
 38658 00006C5F E81600                  	CALL    PathSep
 38659 00006C62 75D2                    	JNZ	short CanonBad		; something else...
 38660                                  
 38661                                  ; Copy the first path char we see.
 38662                                  
 38663 00006C64 AC                      	LODSB                           ; get the char
 38664 00006C65 E863E3                  	call    PATHCHRCMP              ; is it path char?
 38665 00006C68 75B6                    	JNZ	short CanonDec		; no, go test for nul
 38666 00006C6A 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 38667 00006C6C 73C8                    	JAE	short CanonBad		; yep, error.
 38668 00006C6E AA                      	STOSB                           ; copy the one byte
 38669                                  
 38670                                  ; Skip all remaining path chars
 38671                                  
 38672                                  CanonPathLoop:
 38673 00006C6F AC                      	LODSB                           ; get next byte
 38674 00006C70 E858E3                  	call    PATHCHRCMP              ; path char again?
 38675 00006C73 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 38676 00006C75 4E                      	DEC     SI                      ; back up
 38677 00006C76 EBA9                    	JMP	short  CanonLoop	; go copy component
 38678                                  
 38679                                  ;BREAK <PathSep - determine if char is a path separator>
 38680                                  ;----------------------------------------------------------------------------
 38681                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 38682                                  ;   Inputs:     DS:SI - point to a char
 38683                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 38684                                  ;               Zero set if AL is / \ or NUL
 38685                                  ;               Zero reset otherwise
 38686                                  ;   Registers modified: AL
 38687                                  ;----------------------------------------------------------------------------
 38688                                  
 38689                                  PathSep:
 38690 00006C78 8A04                    	MOV     AL,[SI]                 ; get the character
 38691                                  PathSepGotCh:				; already have character
 38692 00006C7A 08C0                    	OR      AL,AL                   ; test for zero
 38693 00006C7C 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 38694                                  	;call	PATHCHRCMP              ; check for path character
 38695                                  	;retn				; and return HIS determination
 38696                                  	; 18/12/2022
 38697 00006C7E E94AE3                  	jmp	PATHCHRCMP
 38698                                  
 38699                                  
 38700                                  ;BREAK <SkipBack - move backwards to a path separator>
 38701                                  ;----------------------------------------------------------------------------
 38702                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 38704                                  ;               BX has current directory back up limit (point to a / \)
 38705                                  ;   Outputs:    ES:DI backed up to point to a path char
 38706                                  ;               AL has char from output ES:DI (path sep if carry clear)
 38707                                  ;               Carry set if illegal backup
 38708                                  ;               Carry Clear if ok
 38709                                  ;   Registers modified: DI,AL
 38710                                  ;----------------------------------------------------------------------------
 38711                                  
 38712                                  SkipBack:
 38713 00006C81 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 38714 00006C83 720B                    	JB	short SkipBad		;       if (d < dlim)
 38715 00006C85 4F                      	DEC     DI                      ;           goto err;
 38716 00006C86 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 38717 00006C89 E83FE3                  	call    PATHCHRCMP              ;           break;
 38718 00006C8C 75F3                    	JNZ	short SkipBack		;       }
 38719 00006C8E F8                      	CLC                             ;   return (0);
 38720 00006C8F C3                      	retn				;
 38721                                  SkipBad:                                ;err:
 38722                                  	;mov	al,3
 38723 00006C90 B003                    	MOV     AL,error_path_not_found ; bad path error
 38724 00006C92 F9                      	STC                             ;   return (-1);
 38725 00006C93 C3                      	retn				;
 38726                                  
 38727                                  ;Break <CopyComponent - copy out a file path component>
 38728                                  ;----------------------------------------------------------------------------
 38729                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 38730                                  ;
 38731                                  ;   Inputs:     DS:SI - source path
 38732                                  ;               ES:DI - destination
 38733                                  ;               ES:BP - end of buffer
 38734                                  ;   Outputs:    Carry Set - too long
 38735                                  ;               Carry Clear - DS:SI moved past component
 38736                                  ;                   CX has length of destination
 38737                                  ;   Registers modified: AX,CX,DX
 38738                                  ;----------------------------------------------------------------------------
 38739                                  
 38740                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38741                                  
 38742                                  CopyComponent:
 38743                                  
 38744                                  %define CopyBP	 [BP]		; word
 38745                                  %define CopyD	 [BP+2]		; dword
 38746                                  %define CopyDoff [BP+2]		; word
 38747                                  %define CopyS	 [BP+6]		; dword
 38748                                  %define CopySoff [BP+6]		; word
 38749                                  %define CopyTemp [BP+10]	; byte
 38750                                  
 38751 00006C94 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 38752 00006C97 1E                      	push	ds
 38753 00006C98 56                      	push	si
 38754 00006C99 06                      	push	es
 38755 00006C9A 57                      	push	di
 38756 00006C9B 55                      	push	bp
 38757 00006C9C 89E5                    	MOV     BP,SP
 38758 00006C9E B42E                    	MOV     AH,'.'
 38759 00006CA0 AC                      	LODSB
 38760 00006CA1 AA                      	STOSB
 38761 00006CA2 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 38762 00006CA4 7518                    	JNZ	short NormalComp
 38763 00006CA6 E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 38764 00006CA9 740B                    	JZ	short NulTerm
 38765                                  TryTwoDot:
 38766 00006CAB AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 38767 00006CAC AA                      	STOSB
 38768 00006CAD 38E0                    	CMP     AL,AH
 38769 00006CAF 7557                    	JNZ	short CopyBad
 38770 00006CB1 E8C4FF                  	CALL    PathSep
 38771 00006CB4 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 38772                                  NulTerm:                                ;               return -1;
 38773 00006CB6 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 38774 00006CB8 AA                      	STOSB
 38775 00006CB9 897606                  	MOV     CopySoff,SI
 38776 00006CBC EB47                    	JMP     SHORT _GoodRet		;       }
 38777                                  NormalComp:                             ;   else {
 38778 00006CBE 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 38779 00006CC1 E845E2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 38780 00006CC4 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 38781 00006CC7 743F                    	JZ	short CopyBad		;           return (-1);
 38782 00006CC9 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 38783 00006CCF 7510                    	JNZ	short DoPack
 38784 00006CD1 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 38785 00006CD4 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 38786 00006CD9 7F2D                    	JG	short CopyBad		;               return (-1);
 38787 00006CDB 7504                    	JNZ	short DoPack		;           else
 38788 00006CDD 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 38789 00006CDF 742F                    	JZ	short CopyBadPath	;               return (-1);
 38790                                  DoPack:                                 ;           }
 38791 00006CE1 897606                  	MOV     CopySoff,SI ; [bp+6]
 38792 00006CE4 16                      	push	ss
 38793 00006CE5 1F                      	pop	ds
 38794 00006CE6 BE[4B05]                	MOV     SI,NAME1
 38795 00006CE9 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 38796 00006CEC 57                      	push	di
 38797 00006CED E888B3                  	call	PackName                ;       PackName (Name1, temp);
 38798 00006CF0 5F                      	pop	di
 38799 00006CF1 E8E2A4                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 38800 00006CF4 49                      	DEC     CX
 38801 00006CF5 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 38802                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38803                                  	;cmp	cx,[bp+0]
 38804                                  	; 15/12/2022
 38805                                  	;cmp	cx,[bp]
 38806 00006CF8 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 38807 00006CFB 730B                    	JAE	short CopyBad		;           return (-1);
 38808 00006CFD 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 38809 00006CFF C47E02                  	LES     DI,CopyD    ; [bp+2]	
 38810 00006D02 E8C8A4                  	call	FStrCpy
 38811                                  _GoodRet:				;       }
 38812 00006D05 F8                      	CLC
 38813 00006D06 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 38814                                  CopyBad:
 38815 00006D08 F9                      	STC
 38816 00006D09 E8F800                  	CALL    ScanPathChar            ; check for path chars in rest of string
 38817                                  	;mov	al,2
 38818 00006D0C B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 38819 00006D0E 7503                    	JNZ	short CopyEnd
 38820                                  CopyBadPath:
 38821 00006D10 F9                      	STC
 38822                                  	;mov	al,3
 38823 00006D11 B003                    	MOV     AL,error_path_not_found ; Set bad path error
 38824                                  CopyEnd:
 38825 00006D13 5D                      	pop	bp
 38826 00006D14 5F                      	pop	di
 38827 00006D15 07                      	pop	es
 38828 00006D16 5E                      	pop	si
 38829 00006D17 1F                      	pop	ds
 38830 00006D18 9F                      	LAHF
 38831 00006D19 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 38832 00006D1C E8B7A4                  	call	StrLen
 38833 00006D1F 49                      	DEC     CX
 38834 00006D20 9E                      	SAHF
 38835 00006D21 C3                      	retn
 38836                                  
 38837                                  ; 14/05/2019 - Retro DOS v4.0
 38838                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 38839                                  
 38840                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38841                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 38842                                  
 38843                                  ;Break <Splice - pseudo mount by string substitution>
 38844                                  ;----------------------------------------------------------------------------
 38845                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 38846                                  ;       ThisCDS to point to physical drive CDS.
 38847                                  ;   Inputs:     DS:SI point to string
 38848                                  ;               NoSetDir = TRUE => exact matches with splice fail
 38849                                  ;   Outputs:    DS:SI points to thisCDS
 38850                                  ;               ES:DI points to DPB
 38851                                  ;               String at DS:SI may be reduced in length by removing prefix
 38852                                  ;               and substituting drive letter.
 38853                                  ;               CX = 0 If no splice done
 38854                                  ;               CX <> 0 otherwise
 38855                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 38856                                  ;                   left alone
 38857                                  ;               ThisDPB points to proper DPB
 38858                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 38859                                  ;----------------------------------------------------------------------------
 38860                                  
 38861                                  Splice:
 38862 00006D22 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 38863 00006D28 7469                    	JZ	short AllDone
 38864 00006D2A 36FF36[A205]            	push	word [SS:THISCDS]
 38865 00006D2F 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 38866 00006D34 1E                      	push	ds
 38867 00006D35 56                      	push	si
 38868 00006D36 5F                      	pop	di
 38869 00006D37 07                      	pop	es
 38870 00006D38 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 38871                                  SpliceScan:
 38872 00006D3A E8DFFC                  	call	GetCDSFromDrv
 38873 00006D3D 724A                    	JC	short SpliceDone
 38874 00006D3F FEC0                    	INC     AL
 38875                                  	; 17/12/2022
 38876                                  	;test	byte [si+68],20h
 38877 00006D41 F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 38878                                  	;;test	word [si+67],2000h
 38879                                  	;TEST	word [SI+curdir.flags],curdir_splice
 38880 00006D45 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 38881 00006D47 57                      	push	di
 38882 00006D48 E8A000                  	CALL    PathPref                ;           if (!PathPref (s, d))
 38883 00006D4B 7403                    	JZ	short SpliceFound	;
 38884                                  SpliceSkip:
 38885 00006D4D 5F                      	pop	di
 38886 00006D4E EBEA                    	JMP	short SpliceScan	;               continue;
 38887                                  SpliceFound:
 38888 00006D50 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 38889 00006D54 7508                    	JNZ	short SpliceDo
 38890 00006D56 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 38891 00006D5C 75EF                    	JNZ	short SpliceSkip
 38892                                  SpliceDo:
 38893 00006D5E 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 38894 00006D60 06                      	push	es
 38895 00006D61 1F                      	pop	ds
 38896 00006D62 5F                      	pop	di
 38897 00006D63 E87F00                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 38898 00006D66 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 38899 00006D6A 09C0                    	OR      AX,AX
 38900 00006D6C 7808                    	JS	short NoPoke
 38901 00006D6E 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 38902 00006D70 29F0                    	SUB     AX,SI
 38903 00006D72 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 38904                                  NoPoke:
 38905 00006D76 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 38906 00006D79 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 38907 00006D7B B05C                    	MOV     AL,"\"
 38908 00006D7D AA                      	STOSB
 38909                                  SpliceCopy:                             ;               strcpy (src, p);
 38910 00006D7E E84CA4                  	call	FStrCpy
 38911 00006D81 83C404                  	ADD     SP,4                    ; throw away saved stuff
 38912 00006D84 80C901                  	OR      CL,1                    ; signal splice done.
 38913 00006D87 EB0C                    	JMP     SHORT DoSet             ;               return;
 38914                                  SpliceDone:                             ;               }
 38915 00006D89 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 38916 00006D8E 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 38917                                  AllDone:
 38918 00006D93 31C9                    	XOR     CX,CX
 38919                                  DoSet:
 38920 00006D95 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 38921                                  	;les	di,[si+69]
 38922 00006D9A C47C45                  	LES     DI,[SI+curdir.devptr]	
 38923 00006D9D 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 38924 00006DA2 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 38925                                  Splice_retn:
 38926 00006DA7 C3                      	retn
 38927                                  
 38928                                  ; 15/05/2019 - Retro DOS v4.0
 38929                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 38930                                  
 38931                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38932                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 38933                                  
 38934                                  ;Break <$NameTrans - partially process a name>
 38935                                  ;----------------------------------------------------------------------------
 38936                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 38937                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 38938                                  ;   to Transpath playing games with devices, we need to insure that the output
 38939                                  ;   has drive letter and : in it.
 38940                                  ;
 38941                                  ;   Inputs:     DS:SI - source string for translation
 38942                                  ;               ES:DI - pointer to buffer
 38943                                  ;   Outputs:
 38944                                  ;       Carry Clear
 38945                                  ;               Buffer at ES:DI is filled in with data
 38946                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 38947                                  ;       Carry Set
 38948                                  ;               AX = error_path_not_found
 38949                                  ;   Registers modified: all
 38950                                  ;----------------------------------------------------------------------------
 38951                                  
 38952                                  _$NameTrans:
 38953 00006DA8 1E                      	push	ds
 38954 00006DA9 56                      	push	si
 38955 00006DAA 06                      	push	es
 38956 00006DAB 57                      	push	di
 38957 00006DAC 51                      	push	cx ; MSDOS 6.0
 38958                                  	
 38959                                  	; MSDOS 6.0	
 38960                                  ; M027 - Start
 38961                                  ;
 38962                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 38963                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 38964                                  ; device if the old call set the volume attribute bit. Note that devname in
 38965                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 38966                                  ; and restore CX.
 38967                                  
 38968                                  	;mov	ch,16h
 38969 00006DAD B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 38970 00006DAF E8B902                  	call	SetAttrib
 38971                                  
 38972                                  ; M027 - End
 38973                                  
 38974                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38975 00006DB2 BF[BE03]                	MOV     DI,OPENBUF
 38976 00006DB5 E8E6FC                  	CALL    TransPath               ; to translation (everything)
 38977 00006DB8 59                      	pop	cx ; MSDOS 6.0
 38978 00006DB9 5F                      	pop     di
 38979 00006DBA 07                      	pop	es
 38980 00006DBB 5E                      	pop     si
 38981 00006DBC 1F                      	pop     ds
 38982 00006DBD 7303                    	JNC	short TransOK
 38983 00006DBF E98298                  	jmp	SYS_RET_ERR
 38984                                  TransOK:
 38985 00006DC2 BE[BE03]                	MOV     SI,OPENBUF
 38986 00006DC5 16                      	push	ss
 38987 00006DC6 1F                      	pop	ds
 38988                                  ;GotText:
 38989 00006DC7 E803A4                  	call	FStrCpy
 38990 00006DCA E96E98                  	jmp	SYS_RET_OK
 38991                                  
 38992                                  ;Break   <DriveFromText - return drive number from a text string>
 38993                                  ;----------------------------------------------------------------------------
 38994                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 38995                                  ;   pointer.
 38996                                  ;
 38997                                  ;   Inputs:     DS:SI point to a text string
 38998                                  ;   Outputs:    AL has drive number
 38999                                  ;               DS:SI advanced
 39000                                  ;   Registers modified: AX,SI.
 39001                                  ;----------------------------------------------------------------------------
 39002                                  
 39003                                  DriveFromText:
 39004 00006DCD 30C0                    	XOR     AL,AL                   ;       drive = 0;
 39005                                  	;CMP	BYTE [SI],0		;       if (*s &&
 39006                                  	; 23/09/2023
 39007 00006DCF 3804                    	cmp	[si],al ; 0
 39008 00006DD1 74D4                    	jz	short Splice_retn
 39009 00006DD3 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 39010 00006DD7 75CE                    	jnz	short Splice_retn
 39011 00006DD9 AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 39012 00006DDA 0C20                    	OR      AL,20h
 39013                                  	;sub	al,60h
 39014 00006DDC 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 39015 00006DDE 75C7                    	jnz	short Splice_retn
 39016 00006DE0 B0FF                    	MOV	AL,-1                   ; nuke AL...
 39017                                  	; 23/09/2023
 39018                                  	;dec	al ; -1
 39019 00006DE2 C3                      	retn				;           }
 39020                                  
 39021                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 39022                                  ;----------------------------------------------------------------------------
 39023                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 39024                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 39025                                  ;
 39026                                  ;   Inputs:     AL has 0-based drive number
 39027                                  ;   Outputs:    ES:DI advanced
 39028                                  ;   Registers modified: AX
 39029                                  ;----------------------------------------------------------------------------
 39030                                  
 39031                                  TextFromDrive:
 39032 00006DE3 FEC0                    	INC     AL
 39033                                  TextFromDrive1:
 39034                                  	;add	al,40h
 39035 00006DE5 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 39036 00006DE7 B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 39037 00006DE9 AB                      	STOSW
 39038                                  PathPref_retn:
 39039 00006DEA C3                      	retn
 39040                                  
 39041                                  ;Break   <PathPref - see if one path is a prefix of another>
 39042                                  ;----------------------------------------------------------------------------
 39043                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 39044                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 39045                                  ;   prefix: A:\ and A:\FOO
 39046                                  ;
 39047                                  ;   Inputs:     DS:SI potential prefix
 39048                                  ;               ES:DI string
 39049                                  ;   Outputs:    Zero set => prefix found
 39050                                  ;                   DI/SI advanced past matching part
 39051                                  ;               Zero reset => no prefix, DS/SI garbage
 39052                                  ;   Registers modified: CX
 39053                                  ;----------------------------------------------------------------------------
 39054                                  
 39055                                  PathPref:
 39056 00006DEB E8F6A3                  	call	DStrLen                 ; get length
 39057 00006DEE 49                      	DEC     CX                      ; do not include nul byte
 39058 00006DEF F3A6                    	REPZ    CMPSB                   ; compare
 39059 00006DF1 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 39060 00006DF3 50                      	push	ax			; save char register
 39061 00006DF4 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 39062 00006DF7 E8D1E1                  	call    PATHCHRCMP              ; is it a path char (Root!)
 39063 00006DFA 7406                    	JZ	short Prefix		; yes, match root (I hope)
 39064                                  NotSep:                                 ; 2/13/KK
 39065 00006DFC 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 39066 00006DFF E878FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 39067                                  Prefix:
 39068 00006E02 58                      	pop	ax			; get back original
 39069 00006E03 C3                      	retn
 39070                                  
 39071                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 39072                                  ;----------------------------------------------------------------------------
 39073                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 39074                                  ;     a path separator.
 39075                                  ;
 39076                                  ;     Input:    DS:SI target string (null terminated)
 39077                                  ;     Output:   Zero set => path separator encountered in string
 39078                                  ;               Zero clear => null encountered
 39079                                  ;     Registers modified: SI
 39080                                  ;----------------------------------------------------------------------------
 39081                                  
 39082                                  ScanPathChar:
 39083 00006E04 AC                      	LODSB                           ; fetch a character
 39084 00006E05 E872FE                  	call    PathSepGotCh
 39085 00006E08 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 39086                                  	;call	PATHCHRCMP              ; path separator?
 39087                                  	;retn
 39088                                  	; 18/12/2022
 39089 00006E0A E9BEE1                  	jmp	PATHCHRCMP
 39090                                  
 39091                                  ;============================================================================
 39092                                  ; FILE.ASM, MSDOS 6.0, 1991
 39093                                  ;============================================================================
 39094                                  ; 14/07/2018 - Retro DOS v3.0
 39095                                  
 39096                                  ; 13/05/2019 - Retro DOS v4.0
 39097                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 39098                                  
 39099                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39100                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 39101                                  
 39102                                  ; MSDOS 2.11
 39103                                  ;BREAK <$Open - open a file handle>
 39104                                  ;----------------------------------------------------------------------------
 39105                                  ;   Assembler usage:
 39106                                  ;           LDS     DX, Name
 39107                                  ;           MOV     AH, Open
 39108                                  ;           MOV     AL, access
 39109                                  ;           INT     int_command
 39110                                  ;
 39111                                  ;       ACCESS          Function
 39112                                  ;       ------          --------
 39113                                  ;       open_for_read   file is opened for reading
 39114                                  ;       open_for_write  file is opened for writing
 39115                                  ;       open_for_both   file is opened for both reading and writing.
 39116                                  ;
 39117                                  ;   Error returns:
 39118                                  ;           AX = error_invalid_access
 39119                                  ;              = error_file_not_found
 39120                                  ;              = error_access_denied
 39121                                  ;              = error_too_many_open_files
 39122                                  ;----------------------------------------------------------------------------
 39123                                  
 39124                                  ; MSDOS 6.0
 39125                                  ;	BREAK <$Open - open a file from a path string>
 39126                                  ;----------------------------------------------------------------------------
 39127                                  ;
 39128                                  ;**	$OPen - Open a File
 39129                                  ;
 39130                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 39131                                  ;	file and and returns a handle
 39132                                  ;
 39133                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 39134                                  ;		(AL) = open mode
 39135                                  ;	EXIT	'C' clear if OK
 39136                                  ;		  (ax) = file handle
 39137                                  ;		'C' set if error
 39138                                  ;		  (ax) = error code
 39139                                  ;	USES	all
 39140                                  ;
 39141                                  ;----------------------------------------------------------------------------
 39142                                  
 39143                                  ; 13/05/2019 - Retro DOS v4.0
 39144                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39145                                  
 39146                                  _$OPEN:       
 39147 00006E0D 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 39148                                  _$Open2:
 39149                                  	;mov	ch,16h
 39150 00006E0F B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 39151 00006E11 E85702                  	call	SetAttrib
 39152 00006E14 B9[FA2A]                	mov	cx,DOS_OPEN
 39153                                  
 39154                                  	;xor	ah,ah  ; MSDOS 3.3
 39155                                  
 39156 00006E17 50                      	push	ax
 39157                                  
 39158                                  ;*	General file open/create code. The $CREATE call and the various
 39159                                  ;	$OPEN calls all come here.
 39160                                  ;
 39161                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 39162                                  ;	path names, etc., and then dispatch to our individual handlers.
 39163                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 39164                                  ;
 39165                                  ;	(TOS) = create mode
 39166                                  ;	(CX) = address of routine to call to do actual function
 39167                                  ;	(DS:DX) = ASCIZ name
 39168                                  ;	SAttrib = Attribute mask
 39169                                  
 39170                                  ;	Get a free SFT and mark it "being allocated"
 39171                                  
 39172                                  AccessFile:
 39173 00006E18 E8DDA4                  	call	ECritSFT
 39174 00006E1B E8D8F7                  	call	SFNFree			; get a free sfn
 39175 00006E1E E8F2A4                  	call	LCritSFT
 39176 00006E21 7214                    	jc	short OpenFailJ		; oops, no free sft's
 39177 00006E23 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 39178 00006E28 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 39179 00006E2D 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 39180                                  
 39181                                  ;	Find a free area in the user's JFN table.
 39182                                  
 39183 00006E32 E8AEF7                  	call	JFNFree			; get a free jfn
 39184 00006E35 7303                    	jnc	short SaveJFN
 39185                                  OpenFailJ:
 39186 00006E37 E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 39187                                  
 39188                                  SaveJFN:
 39189 00006E3A 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 39190 00006E3F 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 39191 00006E44 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 39192                                  
 39193                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 39194                                  ;	reusing the same JFN.
 39195                                  
 39196 00006E49 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 39197 00006E4E 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 39198 00006E51 89D6                    	MOV	SI,DX			; get name in appropriate place
 39199 00006E53 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39200 00006E56 51                      	push	cx			; save routine to call
 39201 00006E57 E844FC                  	call	TransPath		; convert the path
 39202 00006E5A 5B                      	pop	bx			; (bx) = routine to call
 39203                                  
 39204 00006E5B 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 39205 00006E60 720A                    	JC	short OpenCleanJ	; no error, go and open file
 39206 00006E62 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 39207 00006E68 7404                    	JZ	short SetSearch
 39208                                  	;mov	al,2
 39209 00006E6A B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 39210                                  OpenCleanJ:
 39211 00006E6C EB50                    	JMP	short OpenClean
 39212                                  
 39213                                  SetSearch:
 39214 00006E6E 58                      	pop	ax			; Mode (Open), Attributes (Create)
 39215                                  
 39216                                  ;	We need to get the new inheritance bits.
 39217                                  
 39218 00006E6F 31C9                    	xor	cx,cx
 39219                                  	; MSDOS 6.0
 39220                                  	;mov	[si+2],cx ; 0
 39221 00006E71 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 39222                                  	;mov    [si+51],cx ; 0
 39223 00006E74 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 39224                                  	;
 39225 00006E77 81FB[FA2A]              	CMP	BX,DOS_OPEN
 39226 00006E7B 7509                    	JNZ	short _DoOper
 39227                                  	;test   al,80h
 39228 00006E7D A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 39229 00006E7F 7405                    	JZ	short _DoOper ; 10/08/2018
 39230 00006E81 247F                    	AND	AL,7Fh			; mask off inherit bit
 39231                                  	;mov	cx,1000h
 39232 00006E83 B90010                  	MOV	CX,sf_no_inherit
 39233                                  _DoOper:
 39234                                  	;; MSDOS 3.3
 39235                                  	;;mov	word [si+2], 0
 39236                                  	;;mov	word [si+33h], 0
 39237                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 39238                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 39239                                  
 39240                                  	; MSDOS 6.0
 39241                                  ;**	Check if this is an extended open. If so you must set the
 39242                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 39243                                  ;	Set_EXT_mode in creat.asm
 39244                                  
 39245                                  	; MSDOS 6.0
 39246                                  	;SAVE	<di, es>                ;M022 conditional removed here
 39247 00006E86 57                      	push	di
 39248 00006E87 06                      	push	es
 39249 00006E88 1E                      	push	ds
 39250 00006E89 07                      	pop	es
 39251 00006E8A 56                      	push	si
 39252 00006E8B 5F                      	pop	di			; (es:di) = SFT address
 39253 00006E8C E857BC                  	call	Set_EXT_mode
 39254                                  	;RESTORE <es, di>
 39255 00006E8F 07                      	pop	es
 39256 00006E90 5F                      	pop	di
 39257                                  
 39258                                  	;Context DS
 39259 00006E91 16                      	push	ss
 39260 00006E92 1F                      	pop	ds	
 39261                                  
 39262 00006E93 51                      	push	cx
 39263 00006E94 FFD3                    	CALL	BX			; blam!
 39264 00006E96 59                      	pop	cx
 39265 00006E97 C536[9E05]              	LDS	SI,[THISSFT]
 39266 00006E9B 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 39267                                  	;jc	short OpenE ; MSDOS 3.3
 39268                                  
 39269                                  ;	The SFT was successfully opened. Remove busy mark.
 39270                                  
 39271                                  OpenOK:
 39272                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 39273 00006E9D C7040100                	mov	word [SI],1
 39274                                  	;or	[SI+5],cx
 39275 00006EA1 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 39276                                  
 39277                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 39278                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 39279                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 39280                                  ;
 39281                                  ; Since this is only relevant on sharer systems, we stick this code into the
 39282                                  ; sharer.
 39283                                  
 39284 00006EA4 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 39285 00006EA8 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 39286                                  
 39287 00006EAD 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 39288                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39289                                  OpenOkj:
 39290 00006EB4 E98497                  	jmp	SYS_RET_OK		; bye with no errors
 39291                                  
 39292                                  	; MSDOS 6.0
 39293                                  ;Extended Open hooks check
 39294                                  OpenE2:					;AN000;;EO.
 39295 00006EB7 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 39296 00006EBA 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 39297 00006EBC EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 39298                                  
 39299                                  ;	Extended Open hooks check
 39300                                  ;
 39301                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 39302                                  
 39303                                  OpenClean:
 39304 00006EBE 5B                      	pop	bx			; clean off stack
 39305                                  OpenE:
 39306                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 39307 00006EBF C7040000                	mov	word [SI],0
 39308 00006EC3 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 39309 00006EC8 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 39310 00006ECB EB02                    	JMP	SHORT OpenCritLeave
 39311                                  
 39312                                  OpenFail:
 39313 00006ECD FB                      	STI
 39314 00006ECE 59                      	pop	cx			; Clean stack
 39315                                  OpenCritLeave:
 39316 00006ECF 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 39317                                  
 39318                                  	; MSDOS 6.0
 39319                                  ; File Tagging DOS 4.00
 39320 00006ED6 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 39321                                  					;AN000;;FT. code page mismatch
 39322 00006EDC 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 39323 00006EDE E96B97                  	jmp	From_GetSet		;AN000;;FT. yes
 39324                                  NORERR: 				;AN000;
 39325                                  ; File Tagging DOS 4.00
 39326                                  
 39327 00006EE1 E96097                  	jmp	SYS_RET_ERR		; no free, return error
 39328                                  
 39329                                  ; MSDOS 2.11
 39330                                  ;BREAK <$CREAT - creat a new file and open him for input>
 39331                                  ;----------------------------------------------------------------------------
 39332                                  ;   Assembler usage:
 39333                                  ;           LDS     DX, name
 39334                                  ;           MOV     AH, Creat
 39335                                  ;           MOV     CX, access
 39336                                  ;           INT     21h
 39337                                  ;       ; AX now has the handle
 39338                                  ;
 39339                                  ;   Error returns:
 39340                                  ;           AX = error_access_denied
 39341                                  ;              = error_path_not_found
 39342                                  ;              = error_too_many_open_files
 39343                                  ;----------------------------------------------------------------------------
 39344                                  
 39345                                  ; MSDOS 6.0
 39346                                  ;	BREAK <$Creat - create a brand-new file>
 39347                                  ;----------------------------------------------------------------------------
 39348                                  ;
 39349                                  ;**	$Creat - Create a File
 39350                                  ;
 39351                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 39352                                  ;	initial attributes contained in CX
 39353                                  ;
 39354                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 39355                                  ;		(CX) = initial attributes
 39356                                  ;	EXIT	'C' set if error
 39357                                  ;		  (ax) = error code
 39358                                  ;		'C' clear if OK
 39359                                  ;		  (ax) = file handle
 39360                                  ;	USES	all
 39361                                  ;
 39362                                  ;----------------------------------------------------------------------------
 39363                                  
 39364                                  _$CREAT:
 39365 00006EE4 51                      	push	cx			; Save attributes on stack
 39366 00006EE5 B9[D429]                	mov	CX,DOS_CREATE		; routine to call
 39367                                  AccessSet:
 39368                                  	;mov	byte [ss:SATTRIB],6
 39369 00006EE8 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 39370                                  	; 10/08/2018
 39371 00006EEE E927FF                  	JMP	AccessFile		; use good ol' open
 39372                                  
 39373                                  ; MSDOS 6.0 (MSDOS 3.3)
 39374                                  ;	BREAK <$CHMOD - change file attributes>
 39375                                  ;----------------------------------------------------------------------------
 39376                                  ;
 39377                                  ;**	$CHMOD - Change File Attributes
 39378                                  ;
 39379                                  ;   Assembler usage:
 39380                                  ;	    LDS     DX, name
 39381                                  ;	    MOV     CX, attributes
 39382                                  ;	    MOV     AL,func (0=get, 1=set)
 39383                                  ;	    INT     21h
 39384                                  ;   Error returns:
 39385                                  ;	    AX = error_path_not_found
 39386                                  ;	    AX = error_access_denied
 39387                                  ;
 39388                                  ;----------------------------------------------------------------------------
 39389                                  
 39390                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39391                                  _$CHMOD:
 39392                                  	; 05/08/2018 - Retro DOS v3.0
 39393                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 39394 00006EF1 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39395 00006EF4 50                      	push	ax
 39396 00006EF5 51                      	push	cx			; save function and attributes
 39397 00006EF6 89D6                    	MOV	SI,DX			; get things in appropriate places
 39398 00006EF8 E8A7FB                  	call	TransPathSet		; get correct path
 39399 00006EFB 59                      	pop	cx
 39400 00006EFC 58                      	pop	ax			; and get function and attrs back
 39401 00006EFD 7257                    	JC	short ChModErr		; errors get mapped to path not found
 39402 00006EFF 16                      	push	ss			; set up for later possible calls
 39403 00006F00 1F                      	pop	ds
 39404 00006F01 803E[7A05]FF            	CMP	byte [CMETA],-1
 39405 00006F06 754E                    	JNZ	short ChModErr
 39406                                  	;mov	byte [SATTRIB],16h
 39407 00006F08 C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 39408 00006F0D 2C01                    	SUB	AL,1			; fast way to discriminate
 39409 00006F0F 720B                    	JB	short ChModGet		; 0 -> go get value
 39410 00006F11 7417                    	JZ	short ChModSet		; 1 -> go set value
 39411                                  	;mov	byte [EXTERR_LOCUS],1
 39412 00006F13 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 39413                                  	;mov	al,1
 39414 00006F18 B001                    	mov	al,error_invalid_function ; bad value
 39415                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39416                                  chmod_errj:	
 39417                                  	;;jmp	SYS_RET_ERR
 39418                                  	;jmp	short ChModE	
 39419 00006F1A EBC5                    	jmp	short NORERR	; 06/12/2022
 39420                                  ChModGet:
 39421 00006F1C E8A0B9                  	call	GET_FILE_INFO		; suck out the ol' info
 39422 00006F1F 7237                    	JC	short ChModE		; error codes are already set for ret
 39423 00006F21 E86195                  	call	Get_User_Stack		; point to user saved vaiables
 39424                                  	;mov	[SI+4],ax
 39425 00006F24 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 39426                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 39427                                  OpenOkj2:
 39428                                  	; 17/12/2022
 39429                                  	;;jmp	SYS_RET_OK		; say sayonara
 39430                                  	;jmp	short OpenOkj
 39431                                  	; 25/06/2019
 39432 00006F27 E91497                  	jmp	SYS_RET_OK_clc
 39433                                  
 39434                                  ChModSet:
 39435 00006F2A 89C8                    	MOV	AX,CX			; get attrs in position
 39436 00006F2C E8EEB9                  	call	SET_FILE_ATTRIBUTE	; go set
 39437 00006F2F 7227                    	JC	short ChModE		; errors are set
 39438                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 39439                                  	;jmp	SYS_RET_OK
 39440                                  OpenOkj3:
 39441                                  	;jmp	short OpenOkj2
 39442                                  	; 17/12/2022
 39443 00006F31 E90797                  	jmp	SYS_RET_OK
 39444                                  
 39445                                  ; 17/12/2022
 39446                                  %if 0
 39447                                  ChModErr:
 39448                                  NotFound:	; 17/12/2022
 39449                                  	;mov	al,3
 39450                                  	mov	al,error_path_not_found
 39451                                  ChModE:
 39452                                  UnlinkE:	; 17/12/2022
 39453                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39454                                  	;;jmp	SYS_RET_ERR
 39455                                  	;jmp	short chmod_errj
 39456                                  	; 17/12/2022
 39457                                  	jmp	short NORERR
 39458                                  %endif
 39459                                  
 39460                                  ; 22/05/2019 - Retro DOS v4.0
 39461                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 39462                                  
 39463                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39464                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 39465                                  
 39466                                  ;	BREAK <$UNLINK - delete a file entry>
 39467                                  ;----------------------------------------------------------------------------
 39468                                  ;
 39469                                  ;**	$UNLINK - Delete a File
 39470                                  ;
 39471                                  ;
 39472                                  ;	Assembler usage:
 39473                                  ;	    LDS     DX, name
 39474                                  ;	    IF VIA SERVER DOS CALL
 39475                                  ;	     MOV     CX,SEARCH_ATTRIB
 39476                                  ;	    MOV     AH, Unlink
 39477                                  ;	    INT     21h
 39478                                  ;
 39479                                  ;	ENTRY	(ds:dx) = path name
 39480                                  ;		(cx) = search_attribute, if via server_dos
 39481                                  ;	EXIT	'C' clear if no error
 39482                                  ;		'C' set if error
 39483                                  ;		  (ax) = error code
 39484                                  ;			= error_file_not_found
 39485                                  ;			= error_access_denied
 39486                                  ;
 39487                                  ;----------------------------------------------------------------------------
 39488                                  
 39489                                  _$UNLINK:
 39490 00006F34 51                      	push	cx			; Save possible CX input parm
 39491 00006F35 89D6                    	MOV	SI,DX			; Point at input string
 39492 00006F37 BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 39493 00006F3A E865FB                  	call	TransPathSet		; go get normalized path
 39494 00006F3D 59                      	pop	cx
 39495 00006F3E 7216                    	JC	short ChModErr		; badly formed path
 39496 00006F40 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 39497 00006F46 750E                    	JNZ	short NotFound
 39498 00006F48 16                      	push	ss
 39499 00006F49 1F                      	pop	ds
 39500                                  	;mov	ch,6
 39501 00006F4A B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 39502 00006F4C E81C01                  	call	SetAttrib
 39503 00006F4F E86FB5                  	call	DOS_DELETE		; remove that file
 39504                                  	;JC	short UnlinkE 		; error is there
 39505                                  	; 17/12/2022
 39506 00006F52 728D                    	jc	short NORERR
 39507                                  
 39508                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39509                                  UnlinkOk:
 39510                                  	;jmp	SYS_RET_OK		; okey doksy
 39511 00006F54 EBDB                    	jmp	short OpenOkj3
 39512                                  
 39513                                  	; 17/12/2022
 39514                                  ChModErr:	; 17/12/2022
 39515                                  NotFound:
 39516                                  	;mov	al,3
 39517 00006F56 B003                    	MOV	AL,error_path_not_found
 39518                                  ChModE:		; 17/12/2022
 39519                                  UnlinkE:
 39520                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39521                                  	;;jmp	SYS_RET_ERR		; bye
 39522                                  	;jmp	short ChModE
 39523                                  	; 17/12/2022
 39524 00006F58 EB87                    	jmp	short NORERR
 39525                                  
 39526                                  ;BREAK <$RENAME - move directory entries around>
 39527                                  ;----------------------------------------------------------------------------
 39528                                  ;
 39529                                  ;   Assembler usage:
 39530                                  ;	    LDS     DX, source
 39531                                  ;	    LES     DI, dest
 39532                                  ;	    IF VIA SERVER DOS CALL
 39533                                  ;	      MOV   CX,SEARCH_ATTRIB
 39534                                  ;	    MOV     AH, Rename
 39535                                  ;	    INT     21h
 39536                                  ;
 39537                                  ;   Error returns:
 39538                                  ;	    AX = error_file_not_found
 39539                                  ;	       = error_not_same_device
 39540                                  ;	       = error_access_denied
 39541                                  ;
 39542                                  ;----------------------------------------------------------------------------
 39543                                  
 39544                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39545                                  _$RENAME:
 39546                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39547 00006F5A 51                      	push	cx
 39548 00006F5B 1E                      	push	ds
 39549 00006F5C 52                      	push	dx			; save source and possible CX arg
 39550 00006F5D 06                      	PUSH	ES
 39551 00006F5E 1F                      	POP	DS			; move dest to source
 39552 00006F5F 89FE                    	MOV	SI,DI			; save for offsets
 39553 00006F61 BF[3E04]                	MOV	DI,RENBUF
 39554 00006F64 E83BFB                  	call	TransPathSet		; munge the paths
 39555 00006F67 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 39556 00006F6C 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 39557 00006F71 5E                      	pop	si
 39558 00006F72 1F                      	pop	ds
 39559 00006F73 59                      	pop	cx			; get back source and possible CX arg
 39560                                  epjc2:	
 39561 00006F74 72E0                    	JC	short ChModErr		; get old error
 39562 00006F76 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 39563 00006F7C 75D8                    	JNZ	short NotFound
 39564 00006F7E 51                      	push	cx			; Save possible CX arg
 39565 00006F7F BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39566 00006F82 E81DFB                  	call	TransPathSet		; wham
 39567 00006F85 59                      	pop	cx
 39568 00006F86 72EC                    	JC	short epjc2
 39569 00006F88 16                      	push	ss
 39570 00006F89 1F                      	pop	ds
 39571 00006F8A 803E[7A05]FF            	CMP	byte [CMETA],-1
 39572 00006F8F 72C5                    	JB	short NotFound
 39573                                  
 39574                                  	; MSDOS 6.0
 39575 00006F91 FF36[A205]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 39576 00006F95 FF36[A405]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 39577 00006F99 BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 39578 00006F9C 16                      	PUSH	SS			   ;AN000;;MS.
 39579 00006F9D 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 39580 00006F9E 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 39581                                  rnloop: 				   ;AN000;
 39582 00006FA0 E879FA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 39583 00006FA3 7210                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 39584 00006FA5 E8F4A1                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 39585 00006FA8 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 39586 00006FAA FEC0                    	INC	AL			   ;AN000;;MS.	next
 39587 00006FAC EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 39588                                  rnerr:					   ;AN000;
 39589 00006FAE 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 39590                                  	;error	error_current_directory    ;AN000;;MS.
 39591 00006FB1 B010                    	mov	al,error_current_directory 
 39592                                  	;jmp	SYS_RET_ERR
 39593                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39594 00006FB3 EBA3                    	jmp	short UnlinkE
 39595                                  dorn:					   ;AN000;
 39596 00006FB5 368F06[A405]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 39597 00006FBA 368F06[A205]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 39598                                  
 39599 00006FBF 16                      	push	ss
 39600 00006FC0 1F                      	pop	ds
 39601                                  
 39602                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39603                                  	;mov	ch,16h
 39604 00006FC1 B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 39605                                  					; rename appropriate files
 39606 00006FC3 E8A500                  	call	SetAttrib
 39607 00006FC6 E8CCB6                  	call	DOS_RENAME		; do the deed
 39608 00006FC9 728D                    	JC	short UnlinkE 		; errors
 39609                                  
 39610                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39611                                  	;jmp	SYS_RET_OK
 39612 00006FCB EB87                    	jmp	short UnlinkOk
 39613                                  
 39614                                  
 39615                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39616                                  
 39617                                  ; 14/07/2018 - Retro DOS v3.0
 39618                                  ; MSDOS 3.3 (& MSDOS 6.0)
 39619                                  
 39620                                  ;Break <$CreateNewFile - Create a new directory entry>
 39621                                  ;----------------------------------------------------------------------------
 39622                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 39623                                  ;	was no previous directory entry, and fail if a directory entry with
 39624                                  ;	the same name existed previously.
 39625                                  ;
 39626                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 39627                                  ;		CX contains default file attributes
 39628                                  ;   Outputs:	Carry Clear:
 39629                                  ;		    AX has file handle opened for read/write
 39630                                  ;		Carry Set:
 39631                                  ;		    AX has error code
 39632                                  ;   Registers modified: All
 39633                                  ;----------------------------------------------------------------------------
 39634                                  
 39635                                  _$CreateNewFile:
 39636 00006FCD 51                      	push	cx			; Save attributes on stack
 39637 00006FCE B9[9D2A]                	MOV	CX,DOS_Create_New	; routine to call
 39638 00006FD1 E914FF                  	JMP	AccessSet		; use good ol' open
 39639                                  
 39640                                  ;**	BinToAscii - convert a number to a string.
 39641                                  ;----------------------------------------------------------------------------
 39642                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 39643                                  ;	This routine is used to generate temp file names so we don't spend
 39644                                  ;	the time and code needed for a true hex number, we just use
 39645                                  ;	A thorugh O.
 39646                                  ;
 39647                                  ;	ENTRY	(ax) = value
 39648                                  ;		(es:di) = destination
 39649                                  ;	EXIT	(es:di) updated by 4
 39650                                  ;	USES	cx, di, flags
 39651                                  ;----------------------------------------------------------------------------
 39652                                  
 39653                                  ; MSDOS 3.3
 39654                                  ;BinToAscii:
 39655                                  ;	mov     cx,4
 39656                                  ;bta5:
 39657                                  ;	push    cx
 39658                                  ;	mov     cl,4
 39659                                  ;	rol     ax,cl
 39660                                  ;	push    ax
 39661                                  ;	and     al,0Fh
 39662                                  ;	add     al,'0'
 39663                                  ;	cmp     al,'9'
 39664                                  ;	jbe     short bta6
 39665                                  ;	add     al,7
 39666                                  ;bta6: 
 39667                                  ;	stosb
 39668                                  ;	pop     ax
 39669                                  ;	pop     cx
 39670                                  ;	loop    bta5
 39671                                  ;	retn
 39672                                  
 39673                                  ; MSDOS 6.0
 39674                                  BinToAscii:
 39675 00006FD4 B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 39676                                  bta5:	
 39677 00006FD7 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 39678 00006FD9 50                      	push	ax			; preserve remainder of digits
 39679 00006FDA 240F                    	AND	AL,0Fh			; grab low nibble
 39680 00006FDC 0441                    	ADD	AL,'A'			; turn into ascii
 39681 00006FDE AA                      	STOSB				; drop in the character
 39682 00006FDF 58                      	pop	ax			; (ax) = shifted number
 39683 00006FE0 FECD                    	dec	ch
 39684 00006FE2 75F3                    	jnz	short bta5		; process 4 digits
 39685 00006FE4 C3                      	retn
 39686                                  
 39687                                  ;Break	<$CreateTempFile - create a unique name>
 39688                                  ;----------------------------------------------------------------------------
 39689                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 39690                                  ;	Method used is to get the current time, convert to a name and attempt
 39691                                  ;	a create new. Repeat until create new succeeds.
 39692                                  ;
 39693                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 39694                                  ;		CX  contains default attributes
 39695                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 39696                                  ;		AX has handle
 39697                                  ;   Registers modified: all
 39698                                  ;----------------------------------------------------------------------------
 39699                                  
 39700                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39701                                  
 39702                                  _$CreateTempFile:
 39703                                  	;Enter
 39704 00006FE5 55                      	push	bp
 39705 00006FE6 89E5                    	mov	bp,sp
 39706                                  
 39707                                  	;LocalVar  EndPtr,DWORD
 39708                                  	;LocalVar  FilPtr,DWORD
 39709                                  	;LocalVar  Attr,WORD
 39710                                  
 39711 00006FE8 83EC0A                  	sub	sp,10
 39712                                  
 39713                                  	;test	cx,0FFD8h
 39714 00006FEB F7C1D8FF                	test	CX,~attr_changeable
 39715 00006FEF 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 39716                                  
 39717                                  ; We need this "hook" here to detect these cases (like user sets one both of
 39718                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 39719                                  ; below. The code loops on error_access_denied, but if one of the non
 39720                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 39721                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 39722                                  ; need to detect these cases before getting to the loop.
 39723                                  
 39724                                  	;mov	ax, 5
 39725 00006FF1 B80500                  	MOV	AX,error_access_denied
 39726 00006FF4 EB69                    	JMP	SHORT SETTMPERR
 39727                                  
 39728                                  OKatts:
 39729                                  	;MOV	attr,CX 		; save attribute
 39730 00006FF6 894EF6                  	mov     [bp-10],cx
 39731                                  	;MOV	FilPtrL,DX		; pointer to file
 39732 00006FF9 8956F8                  	mov	[bp-8],dx
 39733                                  	;MOV	FilPtrH,DS
 39734 00006FFC 8C5EFA                  	mov	[bp-6],ds
 39735                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 39736 00006FFF 8C5EFE                  	mov	[bp-2],ds
 39737 00007002 1E                      	PUSH	DS
 39738 00007003 07                      	POP	ES			; destination for nul search
 39739 00007004 89D7                    	MOV	DI,DX
 39740 00007006 89F9                    	MOV	CX,DI
 39741 00007008 F7D9                    	NEG	CX			; number of bytes remaining in segment
 39742                                  	; MSDOS 6.0
 39743 0000700A 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 39744 0000700C 7501                    	JNZ	short okok		;AN000;MS. no
 39745                                  	;MOV	CX,-1			;AN000;MS.
 39746                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39747                                  	; 17/12/2022
 39748 0000700E 49                      	dec	cx  ; mov cx,-1
 39749                                  	;mov	cx,-1 ; 0FFFh
 39750                                  okok:					;AN000;
 39751 0000700F 31C0                    	XOR	AX,AX			;AN000;
 39752 00007011 F2AE                    	REPNZ	SCASB			;AN000;
 39753                                  					;AN000;
 39754 00007013 4F                      	DEC	DI			; point back to the null
 39755 00007014 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 39756 00007018 E8B0DF                  	call	PATHCHRCMP		; Is it a path separator?
 39757 0000701B 7403                    	JZ	short SETENDPTR		; Yes
 39758                                  STOREPTH:
 39759 0000701D B05C                    	MOV	AL,'\'
 39760 0000701F AA                      	STOSB				; Add a path separator (and INC DI)
 39761                                  SETENDPTR:
 39762                                  	;MOV	EndPtrL,DI		; pointer to the tail
 39763 00007020 8856FC                  	mov	[bp-4],dl
 39764                                  CreateLoop:
 39765 00007023 16                      	push	ss			; let ReadTime see variables
 39766 00007024 1F                      	pop	ds
 39767 00007025 55                      	push	bp
 39768 00007026 E8EC9A                  	call	READTIME		; go get time
 39769 00007029 5D                      	pop	bp
 39770                                  ;
 39771                                  ; Time is in CX:DX. Go drop it into the string.
 39772                                  ;
 39773                                  	;les	di,EndPtr		; point to the string
 39774 0000702A C47EFC                  	les	di,[BP-4]
 39775 0000702D 89C8                    	mov	ax,cx
 39776 0000702F E8A2FF                  	call	BinToAscii		; store upper word
 39777 00007032 89D0                    	mov	ax,dx
 39778 00007034 E89DFF                  	call	BinToAscii		; store lower word
 39779 00007037 30C0                    	xor	al,al
 39780 00007039 AA                      	STOSB				; nul terminate
 39781                                  	;LDS	DX,FilPtr		; get name
 39782 0000703A C556F8                  	lds	dx,[bp-8]
 39783                                  	;MOV	CX,Attr 		; get attr
 39784 0000703D 8B4EF6                  	mov	cx,[bp-10]
 39785 00007040 55                      	push	bp
 39786 00007041 E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 39787 00007044 5D                      	pop	bp
 39788 00007045 7319                    	JNC	short CreateDone	; failed, go try again
 39789                                  
 39790                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 39791                                  ; error and figure out what to do.
 39792                                  
 39793                                  	;; MSDOS 3.3			; M049 - start
 39794                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 39795                                  ;;	cmp	al,error_file_exists
 39796                                  ;;	jz	short CreateLoop	; file existed => try with new name
 39797                                  ;;	cmp	al,error_access_denied
 39798                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 39799                                  
 39800                                  	; MSDOS 6.0
 39801                                  	;cmp	al,50h
 39802 00007047 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 39803 00007049 74D8                    	JZ	short CreateLoop	; Y: try again
 39804                                  	;cmp	al,5
 39805 0000704B 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 39806 0000704D 7510                    	JNZ	short SETTMPERR		; N: Error out
 39807                                  					; Y: Check to see if we got this due
 39808                                  					;    to the network drive. Note that
 39809                                  					;    the redir will set the exterr
 39810                                  					;    to error_cannot_make if this is 
 39811                                  					;    so. 
 39812 0000704F 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 39813                                  					; See if it's REALLY an att mismatch
 39814 00007055 7408                    	je	short SETTMPERR		; no, network error, stop
 39815                                  ;M070
 39816                                  ; If the user failed on an I24, we do not want to try again
 39817                                  ;
 39818 00007057 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 39819                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 39820                                  
 39821                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 39822                                  	; 17/12/2022
 39823 0000705D 75C4                    	jne	short CreateLoop ; 10/06/2019 
 39824                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39825                                  	;jz	short SETTMPERR
 39826                                  	;jmp	short CreateLoop
 39827                                  
 39828                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 39829                                  					; M049 - end
 39830                                  SETTMPERR:
 39831 0000705F F9                      	STC
 39832                                  CreateDone:
 39833                                  	;Leave
 39834 00007060 89EC                    	mov	sp,bp
 39835 00007062 5D                      	pop	bp
 39836 00007063 7203                    	JC	short CreateFail
 39837 00007065 E9D395                  	jmp	SYS_RET_OK		; success!
 39838                                  CreateFail:
 39839 00007068 E9D995                  	jmp	SYS_RET_ERR
 39840                                  
 39841                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 39842                                  ;   (CH) or to the value in CL if the current system call is through
 39843                                  ;   serverdoscall.
 39844                                  ;
 39845                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 39846                                  ;		fSharing == TRUE => set sattrib to CL
 39847                                  ;   Outputs:	none
 39848                                  ;   Registers changed:	CX
 39849                                  
 39850                                  SetAttrib:
 39851 0000706B 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 39852 00007071 7502                    	jnz	short Set
 39853 00007073 88E9                    	mov	cl,ch
 39854                                  Set:
 39855 00007075 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 39856 0000707A C3                      	retn
 39857                                  
 39858                                  ; 14/07/2018 - Retro DOS v3.0
 39859                                  ; MSDOS 6.0
 39860                                  
 39861                                  ; 29/04/2019 - Retro DOS v4.0
 39862                                  
 39863                                  ;Break	<Extended_Open- Extended open the file>
 39864                                  ;----------------------------------------------------------------------------
 39865                                  ; Input: AL= 0 reserved  AH=6CH
 39866                                  ;	 BX= mode
 39867                                  ;	 CL= create attribute  CH=search attribute (from server)
 39868                                  ;	 DX= flag
 39869                                  ;	 DS:SI = file name
 39870                                  ;	 ES:DI = parm list
 39871                                  ;			   DD  SET EA list (-1) null
 39872                                  ;			   DW  n  parameters
 39873                                  ;			   DB  type (TTTTTTLL)
 39874                                  ;			   DW  IOMODE
 39875                                  ; Function: Extended Open
 39876                                  ; Output: carry clear
 39877                                  ;		     AX= handle
 39878                                  ;		     CX=1 file opened
 39879                                  ;			2 file created/opened
 39880                                  ;			3 file replaced/opened
 39881                                  ;	  carry set: AX has error code
 39882                                  ;----------------------------------------------------------------------------
 39883                                  
 39884                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39885                                  _$Extended_Open:			  ;AN000;
 39886                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 39887 0000707B 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 39888 00007080 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 39889                                  	; 17/12/2022
 39890 00007087 F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 39891                                  	;;test	dx,0FE00h
 39892                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0  ?
 39893 0000708A 7545                    	JNZ	short ext_inval2	  ;AN000;EO. no
 39894 0000708C 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 39895 0000708E 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 39896 00007091 743E                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 39897                                  	;and	dl,0Fh
 39898 00007093 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 39899 00007096 80FA02                  	CMP	DL,2			  ;AN000;EO, > 02
 39900 00007099 7736                    	JA	short ext_inval2	  ;AN000;EO. yes ,error
 39901                                  	;and	ah,0F0h
 39902 0000709B 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 39903 0000709E 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 39904 000070A1 772E                    	JA	short ext_inval2	  ;AN000;EO. yes error
 39905                                  
 39906 000070A3 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 39907 000070A8 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 39908 000070AD 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 39909 000070B2 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 39910 000070B7 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 39911 000070BC 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 39912 000070C1 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 39913 000070C6 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 39914 000070CB 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 39915 000070CD 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 39916 000070CF EB0A                    	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 39917                                  ext_inval2:				  ;AN000;;EO.
 39918                                  	;mov	al,1
 39919 000070D1 B001                    	mov	al,error_invalid_function ;AN000;EO.. invalid function
 39920                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39921                                  eo_err:
 39922                                  	;jmp	SYS_RET_ERR
 39923 000070D3 EB93                    	jmp	short CreateFail
 39924                                  
 39925                                  ext_inval_parm:				  ;AN000;EO..
 39926 000070D5 59                      	POP	CX			  ;AN000;EO..  pop up satck
 39927 000070D6 5E                      	POP	SI			  ;AN000;EO..
 39928                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 39929                                  	;mov	al,13
 39930 000070D7 B00D                    	mov	al,error_invalid_data
 39931                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39932                                  	;;jmp	SYS_RET_ERR
 39933                                  	;jmp	short eo_err
 39934                                  	; 17/12/2022
 39935 000070D9 EB8D                    	jmp	short CreateFail
 39936                                  
 39937                                  	; 17/12/2022	
 39938                                  ;error_return:				  ;AN000;EO.
 39939                                  ;	retn				  ;AN000;EO.. return with error
 39940                                  
 39941                                  goopen2:				  ;AN000;
 39942                                  	; 17/12/2022
 39943                                  	;test	bh,20h				 
 39944 000070DB F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 39945                                  	;;test	bx,2000h
 39946                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 39947 000070DE 7406                    	JZ	short goopen		  ;AN000;EO.. no
 39948                                  	;or	byte [SS:EXTOPEN_ON],2
 39949 000070E0 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 39950                                  goopen:					  ;AN000;
 39951                                  	;or	byte [SS:EXTOPEN_ON],1 
 39952 000070E6 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 39953                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 39954                                  	; 18/12/2022
 39955 000070EC 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 39956                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 39957 000070F2 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 39958 000070F8 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 39959 000070FA E8D0FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 39960 000070FD 723F                    	JC	short error_return	  ;AN000;;EO. error
 39961                                  
 39962 000070FF 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 39963 00007105 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 39964                                  	;mov	word [SS:EXTOPEN_FLAG],2
 39965 00007107 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. creted/opened;smr;SS Override
 39966 0000710E EB7F                    	JMP	setXAttr		  ;AN000;;EO. set XAs
 39967                                  
 39968                                  	; 17/12/2022
 39969                                  ;ok_return2:
 39970                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 39971                                  
 39972                                  chknext:
 39973                                  	; 17/12/2022
 39974 00007110 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 39975                                  	;;test	word [SS:EXTOPEN_FLAG],1
 39976                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 39977 00007116 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 39978 00007118 E8C9FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 39979 0000711B 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 39980 0000711D 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 39981 00007123 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 39982 00007125 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. prsume create/open;smr;SS Override
 39983 0000712C 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 39984 00007132 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 39985 00007134 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 39986 0000713B EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 39987                                  error_return2:
 39988 0000713D F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 39989                                  error_return:	 ;17/12/2022
 39990 0000713E C3                      	retn				  ;AN000;;EO. return with error
 39991                                  
 39992                                  	; 17/12/2022
 39993                                  ok_return:
 39994                                  ok_return2:
 39995 0000713F E9F994                  	jmp	SYS_RET_OK
 39996                                  
 39997                                  exist_open:				  ;AN000;
 39998 00007142 36F606[7205]FF          	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 39999 00007148 7402                    	jz	short noserver		  ;AN000;;EO. no
 40000 0000714A 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 40001                                  noserver:
 40002 0000714C E8C0FC                  	call	_$Open2			  ;AN000;;EO. do open
 40003 0000714F 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 40004 00007151 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 40005 00007157 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 40006                                  local_extopen:
 40007                                  	;cmp	ax,2
 40008 00007159 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 40009 0000715C 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 40010                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 40011                                  	; 17/12/2022
 40012 0000715E 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 40013                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 40014                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 40015                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 40016                                  	; 17/12/2022
 40017 00007164 745D                    	jz	short extexit ; 10/06/2019
 40018                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40019                                  	;jnz	short do_creat
 40020                                  	;jmp	short extexit
 40021                                  do_creat:
 40022 00007166 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 40023 0000716B 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 40024 00007170 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 40025 00007172 E86FFD                  	call	_$CREAT			  ;AN000;;EO. do create
 40026 00007175 724C                    	JC	short extexit 		  ;AN000;;EO. error
 40027                                  	;mov	word [SS:EXTOPEN_FLAG],2
 40028 00007177 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 40029                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 40030 0000717E EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 40031                                  
 40032                                  ext_ok:
 40033 00007180 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 40034 00007186 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 40035                                  	;mov	word [SS:EXTOPEN_FLAG],1
 40036 00007188 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 40037                                  setXAttr:
 40038                                  	; 29/04/2019
 40039 0000718F 50                      	push	ax
 40040 00007190 E8F292                  	call	Get_User_Stack		  ;AN000;;EO.
 40041 00007193 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 40042                                  	;mov	[si+4],ax
 40043 00007197 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 40044 0000719A 58                      	pop	ax			  ;AN000;;EO.
 40045 0000719B 8904                    	mov	[si],ax
 40046                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 40047                                  	; 17/12/2022
 40048 0000719D EBA0                    	jmp	short ok_return
 40049                                  ;ok_return:				  ;AN000;
 40050                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 40051                                  
 40052                                  extexit2:				  ;AN000; ERROR RECOVERY
 40053 0000719F 5B                      	POP	BX			  ;AN000;EO. close the handle
 40054 000071A0 50                      	PUSH	AX			  ;AN000;EO. save error code from set XA
 40055                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 40056 000071A1 36833E[F405]02          	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 40057                                  					  ;AN000;EO. from create;smr;SS Override
 40058 000071A7 750C                    	JNZ	short justopen		  ;AN000;EO.
 40059 000071A9 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 40060 000071AE C514                    	LDS	DX,[SI]			  ;AN000;EO.
 40061 000071B0 E881FD                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 40062 000071B3 EB03                    	JMP	SHORT reserror		  ;AN000;EO.
 40063                                  
 40064                                  justopen:				  ;AN000;
 40065 000071B5 E886F4                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 40066                                  reserror:				  ;AN000;
 40067 000071B8 58                      	POP	AX			  ;AN000;EO. restore error code from set XA
 40068 000071B9 EB08                    	JMP	SHORT extexit		  ;AN000;EO.
 40069                                  
 40070                                  ext_file_unfound:			  ;AN000;
 40071                                  	;mov	ax,2
 40072 000071BB B80200                  	MOV	AX,error_file_not_found   ;AN000;EO.
 40073 000071BE EB03                    	JMP	SHORT extexit		  ;AN000;EO.
 40074                                  ext_inval:				  ;AN000;
 40075                                  	;mov	ax,1
 40076 000071C0 B80100                  	MOV	AX,error_invalid_function ;AN000;EO.
 40077                                  lockoperr:	; 17/12/2022
 40078                                  extexit:
 40079 000071C3 E97E94                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 40080                                  
 40081                                  ;============================================================================
 40082                                  ; LOCK.ASM, MSDOS 6.0, 1991
 40083                                  ;============================================================================
 40084                                  ; 14/07/2018 - Retro DOS v3.0
 40085                                  ; 22/05/2019 - Retro DOS v4.0
 40086                                  
 40087                                  ;BREAK <$LockOper - Lock Calls>
 40088                                  ;----------------------------------------------------------------------------
 40089                                  ;
 40090                                  ;   Assembler usage:
 40091                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 40092                                  ;	    MOV     CX, OffsetHigh
 40093                                  ;	    MOV     DX, OffsetLow
 40094                                  ;	    MOV     SI, LengthHigh
 40095                                  ;	    MOV     DI, LengthLow
 40096                                  ;	    MOV     AH, LockOper
 40097                                  ;	    MOV     AL, Request
 40098                                  ;	    INT     21h
 40099                                  ;
 40100                                  ;   Error returns:
 40101                                  ;	    AX = error_invalid_handle
 40102                                  ;	       = error_invalid_function
 40103                                  ;	       = error_lock_violation
 40104                                  ;
 40105                                  ;   Assembler usage:
 40106                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 40107                                  ;
 40108                                  ;				    0? lock all
 40109                                  ;				    8? lock write
 40110                                  ;				    ?2 lock multiple
 40111                                  ;				    ?3 unlock multiple
 40112                                  ;				    ?4 lock/read
 40113                                  ;				    ?5 write/unlock
 40114                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 40115                                  ;	    MOV     BX, Handle
 40116                                  ;	    MOV     CX, count or size
 40117                                  ;	    LDS     DX, buffer
 40118                                  ;	    INT     21h
 40119                                  ;
 40120                                  ;   Error returns:
 40121                                  ;	    AX = error_invalid_handle
 40122                                  ;	       = error_invalid_function
 40123                                  ;	       = error_lock_violation
 40124                                  ;
 40125                                  ;----------------------------------------------------------------------------
 40126                                  
 40127                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40128                                  _$LockOper:
 40129 000071C6 3C01                    	CMP	AL,1
 40130 000071C8 770B                    	JA	short lock_bad_func
 40131                                  
 40132 000071CA 57                      	PUSH	DI			       ; Save LengthLow
 40133 000071CB E8D5F3                  	call	SFFromHandle		       ; ES:DI -> SFT
 40134 000071CE 731D                    	JNC	short lock_do 		       ; have valid handle
 40135 000071D0 5F                      	POP	DI			       ; Clean stack
 40136                                  	;mov	al,6
 40137 000071D1 B006                    	mov	al,error_invalid_handle
 40138                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40139                                  ;lockoperr:
 40140                                  	;jmp	SYS_RET_ERR
 40141                                  	; 17/12/2022
 40142 000071D3 EBEE                    	jmp	short lockoperr ; jmp SYS_RET_ERR
 40143                                  
 40144                                  lock_bad_func:
 40145                                  	;mov	byte [ss:EXTERR_LOCUS],1
 40146 000071D5 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 40147                                  	;mov	al,1
 40148 000071DB B001                    	mov	al,error_invalid_function
 40149                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40150                                  lockoperrj:
 40151                                  	;jmp	SYS_RET_ERR
 40152 000071DD EBE4                    	jmp	short lockoperr
 40153                                  
 40154                                  	; 22/05/2019 - Retro DOS v4.0
 40155                                  
 40156                                  	; MSDOS 6.0 
 40157                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 40158                                  ; Dead code deleted, MD, 23 Mar 90
 40159                                  
 40160                                  ;lock_do:
 40161                                  ;	; MSDOS 3.3
 40162                                  ;	or	al,al
 40163                                  ;	pop	ax
 40164                                  ;	jz	short DOS_Lock
 40165                                  ;DOS_Unlock:
 40166                                  ;	;test	word [es:di+5],8000h
 40167                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40168                                  ;	JZ	short LOCAL_UNLOCK
 40169                                  ;	push    ax
 40170                                  ;	mov     ax,110Bh
 40171                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40172                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40173                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 40174                                  ;			; SFT DPB field -> DPB of drive containing file
 40175                                  ;			; Return: CF set error
 40176                                  ;	pop     bx
 40177                                  ;	jmp     short ValChk
 40178                                  ;
 40179                                  ;LOCAL_UNLOCK:
 40180                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40181                                  ;ValChk:
 40182                                  ;	JNC	short Lock_OK
 40183                                  ;lockerror:
 40184                                  ;	jmp	SYS_RET_ERR
 40185                                  ;Lock_OK:
 40186                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40187                                  ;	jmp	SYS_RET_OK
 40188                                  ;DOS_Lock:
 40189                                  ;	;test	word [es:di+5],8000h
 40190                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40191                                  ;	JZ	short LOCAL_LOCK
 40192                                  ;	;CallInstall NET_XLock,MultNET,10
 40193                                  ;	mov     ax, 110Ah
 40194                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40195                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40196                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 40197                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40198                                  ;			; Return: CF set error
 40199                                  ;	JMP	short ValChk
 40200                                  ;
 40201                                  ;LOCAL_LOCK:
 40202                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40203                                  ;	JMP	short ValChk
 40204                                  
 40205                                  ; 17/12/2022
 40206                                  LOCAL_UNLOCK:
 40207                                  	; MSDOS 3.3
 40208                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40209                                  	; MSDOS 6.0
 40210 000071DF FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40211                                  ValChk:
 40212 000071E3 7302                    	JNC	short Lock_OK
 40213                                  lockerror:
 40214                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40215                                  	;;jmp	SYS_RET_ERR
 40216                                  	;jmp	short lockoperrj
 40217                                  	; 17/12/2022
 40218 000071E5 EBDC                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 40219                                  Lock_OK:
 40220                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40221                                  	; 10/06/2019
 40222 000071E7 A1[0C06]                	mov	ax,[TEMP_VAR]
 40223 000071EA E94E94                  	jmp	SYS_RET_OK
 40224                                  
 40225                                  	; 22/05/2019
 40226                                  lock_do:
 40227                                  	; MSDOS 6.0
 40228 000071ED 89C3                    	MOV	BX,AX				; save AX
 40229 000071EF BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 40230                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40231                                  	;;mov	[bp+0],dx
 40232                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 40233                                  	; 15/12/2022
 40234 000071F2 895600                  	mov	[bp],dx
 40235                                  	;mov	[bp+2],cx
 40236 000071F5 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 40237 000071F8 59                      	POP	CX				; get low length
 40238                                  	;mov	[bp+4],cx
 40239 000071F9 894E04                  	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 40240                                  	;mov	[bp+6],si
 40241 000071FC 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 40242 000071FF B90100                  	MOV	CX,1				; one range
 40243                                  
 40244                                  ;	PUSH	CS				;
 40245                                  ;	POP	DS				; DS:DX points to
 40246                                  
 40247 00007202 16                      	push	ss
 40248 00007203 1F                      	pop	ds
 40249                                  
 40250 00007204 89EA                    	MOV	DX,BP				; Lock_Buffer
 40251                                  	;test	al,1
 40252 00007206 A801                    	TEST	AL,UNLOCK_ALL			; function 1
 40253                                  	;JNZ	short DOS_Unlock		; yes
 40254                                  	;JMP	short DOS_Lock			; function 0
 40255                                  	; 17/12/2022
 40256                                  	; 10/06/2019
 40257 00007208 740E                    	jz	short DOS_Lock
 40258                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40259                                  	;JNZ	short DOS_Unlock
 40260                                  	;JMP	short DOS_Lock
 40261                                  
 40262                                  DOS_Unlock:
 40263                                  	;;test	word [es:di+5],8000h
 40264                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40265 0000720A 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40266 0000720F 74CE                    	JZ	short LOCAL_UNLOCK
 40267                                  
 40268                                  lock_unlock: ; 22/05/2019
 40269                                  	
 40270                                  	;CallInstall Net_Xlock,MultNET,10
 40271                                  	
 40272                                  	; MSDOS 3.3
 40273                                  	;mov     ax,110Bh
 40274                                  	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40275                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40276                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 40277                                  			; SFT DPB field -> DPB of drive containing file
 40278                                  			; Return: CF set error
 40279                                  	; MSDOS 6.0
 40280 00007211 B80A11                  	mov     ax,110Ah
 40281 00007214 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40282                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40283                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40284                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40285                                  			; Return: CF set error
 40286                                  
 40287 00007216 EBCB                    	JMP	SHORT ValChk
 40288                                  
 40289                                  ; 17/12/2022
 40290                                  %if 0
 40291                                  LOCAL_UNLOCK:
 40292                                  	; MSDOS 3.3
 40293                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40294                                  	; MSDOS 6.0
 40295                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40296                                  ValChk:
 40297                                  	JNC	short Lock_OK
 40298                                  lockerror:
 40299                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40300                                  	;jmp	SYS_RET_ERR
 40301                                  	jmp	short lockoperrj
 40302                                  Lock_OK:
 40303                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40304                                  	; 10/06/2019
 40305                                  	mov	ax,[TEMP_VAR]
 40306                                  	jmp	SYS_RET_OK
 40307                                  %endif
 40308                                  
 40309                                  DOS_Lock:
 40310                                  	;;test	word [es:di+5],8000h
 40311                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40312 00007218 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40313 0000721D 7407                    	JZ	short LOCAL_LOCK
 40314                                  
 40315                                  	;CallInstall NET_XLock,MultNET,10
 40316                                  
 40317 0000721F B80A11                  	mov     ax,110Ah
 40318 00007222 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40319                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40320                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40321                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40322                                  			; Return: CF set error
 40323                                  
 40324 00007224 EBBD                    	JMP	short ValChk
 40325                                  
 40326                                  LOCAL_LOCK:
 40327                                  	; MSDOS 3.3
 40328                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40329                                  	; MSDOS 6.0
 40330 00007226 FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40331                                  
 40332 0000722A EBB7                    	JMP	short ValChk
 40333                                  
 40334                                  ; 14/07/2018 - Retro DOS v3.0
 40335                                  ; LOCK_CHECK
 40336                                  ;MSDOS 6.0 (& MSDOS 3.3)
 40337                                  
 40338                                  ;----------------------------------------------------------------------------
 40339                                  ; Inputs:
 40340                                  ;	Outputs of SETUP
 40341                                  ;	[USER_ID] Set
 40342                                  ;	[PROC_ID] Set
 40343                                  ; Function:
 40344                                  ;	Check for lock violations on local I/O
 40345                                  ;	Retries are attempted with sleeps in between
 40346                                  ; Outputs:
 40347                                  ;    Carry clear
 40348                                  ;	Operation is OK
 40349                                  ;    Carry set
 40350                                  ;	A lock violation detected
 40351                                  ; Outputs of SETUP preserved
 40352                                  ;----------------------------------------------------------------------------
 40353                                  
 40354                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40355                                  	; 22/05/2019 - Retro DOS v4.0
 40356                                  LOCK_CHECK:
 40357 0000722C 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 40358                                  LockRetry:
 40359 00007230 53                      	push	bx		; save regs
 40360 00007231 50                      	push	ax ; MSDOS 6.0
 40361                                  
 40362                                  	;MSDOS 3.3
 40363                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 40364                                  	;MSDOS 6.0
 40365 00007232 FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 40366                                  
 40367 00007236 58                      	pop	ax ; MSDOS 6.0
 40368 00007237 5B                      	pop	bx		; restrore regs
 40369 00007238 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 40370                                  LockN:
 40371 0000723A E8B49F                  	call	Idle		; wait a while
 40372 0000723D 4B                      	DEC	BX		; remember a retry
 40373 0000723E 75F0                    	JNZ	short LockRetry	; more retries left...
 40374 00007240 F9                      	STC
 40375                                  lc_ret_label:
 40376 00007241 C3                      	retn
 40377                                  
 40378                                  ; 14/07/2018 - Retro DOS v3.0
 40379                                  ; LOCK_VIOLATION
 40380                                  ;MSDOS 6.0 (& MSDOS 3.3)
 40381                                  
 40382                                  ;----------------------------------------------------------------------------
 40383                                  ; Inputs:
 40384                                  ;	[THISDPB] set
 40385                                  ;	[READOP] indicates whether error on read or write
 40386                                  ; Function:
 40387                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 40388                                  ; Outputs:
 40389                                  ;	Carry set if user says FAIL, causes error_lock_violation
 40390                                  ;	Carry clear if user wants a retry
 40391                                  ;
 40392                                  ; DS, ES, DI, CX preserved, others destroyed
 40393                                  ;----------------------------------------------------------------------------
 40394                                  
 40395                                  LOCK_VIOLATION:
 40396 00007242 1E                      	PUSH	DS
 40397 00007243 06                      	PUSH	ES
 40398 00007244 57                      	PUSH	DI
 40399 00007245 51                      	PUSH	CX
 40400                                  	;mov	ax,21h
 40401 00007246 B82100                  	MOV	AX,error_lock_violation
 40402                                  	;mov	byte [ALLOWED],18h
 40403 00007249 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 40404 0000724E C42E[8A05]              	LES	BP,[THISDPB]
 40405 00007252 BF0100                  	MOV	DI,1		; Fake some registers
 40406 00007255 89F9                    	MOV	CX,DI
 40407                                  	;mov	dx,[es:bp+11]
 40408 00007257 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 40409 0000725B E8D6DF                  	call	HARDERR
 40410 0000725E 59                      	POP	CX
 40411 0000725F 5F                      	POP	DI
 40412 00007260 07                      	POP	ES
 40413 00007261 1F                      	POP	DS
 40414 00007262 3C01                    	CMP	AL,1
 40415 00007264 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 40416 00007266 F9                      	STC
 40417 00007267 C3                      	retn
 40418                                  
 40419                                  ; 14/07/2018 - Retro DOS v3.0
 40420                                  
 40421                                  ;----------------------------------------------------------------------------
 40422                                  
 40423                                  ;	do a retz to return error
 40424                                  
 40425                                  	; 22/05/2019 - Retro DOS v4.0
 40426                                  CheckShare:
 40427                                  	; MSDOS 3.3
 40428                                  	;cmp	byte [cs:fShare],0
 40429                                  	;retn
 40430                                  
 40431                                  	; MSDOS 6.0
 40432 00007268 1E                      	push	ds			;smr;
 40433                                  	;getdseg <ds>			; ds -> dosdata
 40434 00007269 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 40435 0000726E 803E[0303]00            	cmp	byte [fShare],0
 40436 00007273 1F                      	pop	ds			;smr;
 40437 00007274 C3                      	retn
 40438                                  	
 40439                                  ;============================================================================
 40440                                  ; SHARE.ASM, MSDOS 6.0, 1991
 40441                                  ;============================================================================
 40442                                  ; 14/07/2018 - Retro DOS v3.0
 40443                                  ; 22/05/2019 - Retro DOS v4.0
 40444                                  
 40445                                  ; SHARE_CHECK
 40446                                  ;----------------------------------------------------------------------------
 40447                                  ; Inputs:
 40448                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 40449                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 40450                                  ;       [WFP_START] has full path of name
 40451                                  ;       [USER_ID] Set
 40452                                  ;       [PROC_ID] Set
 40453                                  ; Function:
 40454                                  ;       Check for sharing violations on local file/device access
 40455                                  ; Outputs:
 40456                                  ;    Carry clear
 40457                                  ;       Sharing approved
 40458                                  ;    Carry set
 40459                                  ;       A sharing violation detected
 40460                                  ;           AX is error code
 40461                                  ; USES    ALL but DS
 40462                                  ;----------------------------------------------------------------------------
 40463                                  
 40464                                  	; 22/05/2019 - Retro DOS v4.0
 40465                                  SHARE_CHECK:
 40466                                  	; 26/07/2019
 40467 00007275 FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 40468                                  shchk_retn:
 40469 00007279 C3                      	retn
 40470                                  
 40471                                  ; SHARE_VIOLATION
 40472                                  ;----------------------------------------------------------------------------
 40473                                  ; Inputs:
 40474                                  ;       [THISDPB] Set
 40475                                  ;       AX has error code
 40476                                  ; Function:
 40477                                  ;       Handle Sharing errors
 40478                                  ; Outputs:
 40479                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 40480                                  ;       Carry clear if user wants a retry
 40481                                  ;
 40482                                  ; DS, ES, DI preserved, others destroyed
 40483                                  ;----------------------------------------------------------------------------
 40484                                  
 40485                                  SHARE_VIOLATION:
 40486 0000727A 1E                      	PUSH    DS
 40487 0000727B 06                      	PUSH	ES
 40488 0000727C 57                      	PUSH    DI
 40489 0000727D C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 40490                                  	;mov	byte [ALLOWED],18h
 40491 00007282 C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 40492 00007287 C42E[8A05]              	LES     BP,[THISDPB]
 40493 0000728B BF0100                  	MOV     DI,1			; Fake some registers
 40494 0000728E 89F9                    	MOV     CX,DI
 40495                                  	;mov	dx,[es:bp+17]
 40496 00007290 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 40497 00007294 E89DDF                  	call	HARDERR
 40498 00007297 5F                      	POP     DI
 40499 00007298 07                      	POP	ES
 40500 00007299 1F                      	POP     DS
 40501 0000729A 3C01                    	CMP     AL,1
 40502 0000729C 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 40503 0000729E F9                      	STC
 40504 0000729F C3                      	retn
 40505                                  
 40506                                  ;----------------------------------------------------------------------------
 40507                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 40508                                  ;       NOT perform a close, it merely asserts that the sharing information
 40509                                  ;       for the SFT/UID/PID may be safely released.
 40510                                  ;
 40511                                  ;   Inputs:     ES:DI points to an SFT
 40512                                  ;   Outputs:    None
 40513                                  ;   Registers modified: all except DS,ES,DI
 40514                                  ;----------------------------------------------------------------------------
 40515                                  
 40516                                  ShareEnd:
 40517                                  	; 26/07/2019
 40518 000072A0 FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 40519 000072A4 C3                      	retn
 40520                                  
 40521                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 40522                                  ;----------------------------------------------------------------------------
 40523                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 40524                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 40525                                  ;
 40526                                  ;   Inputs:     ThisSFT points to the SFT
 40527                                  ;               WFP_Start points to the WFP
 40528                                  ;   Outputs:    Carry clear => successful entry
 40529                                  ;               Carry set => failed system call
 40530                                  ;   Registers modified: all
 40531                                  ;----------------------------------------------------------------------------
 40532                                  
 40533                                  ShareEnter:
 40534 000072A5 51                      	push	cx
 40535                                  retry:
 40536 000072A6 8B0E[1A00]              	mov     cx,[RetryCount]
 40537                                  attempt:
 40538 000072AA C43E[9E05]              	les     di,[THISSFT]		; grab sft
 40539 000072AE 31C0                    	XOR     AX,AX
 40540                                   	;mov	[es:di+51],axfff
 40541 000072B0 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 40542 000072B4 51                      	push	cx
 40543 000072B5 E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 40544 000072B8 59                      	pop	cx
 40545 000072B9 730A                    	jnc	short done		; success, let the user see this
 40546 000072BB E8339F                  	call	Idle                    ; wait a while
 40547 000072BE E2EA                    	loop    attempt                 ; go back for another attempt
 40548 000072C0 E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 40549 000072C3 73E1                    	jnc	short retry		; user said to retry, go do it
 40550                                  done:
 40551 000072C5 59                      	pop	cx
 40552 000072C6 C3                      	retn
 40553                                  
 40554                                  ;============================================================================
 40555                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 40556                                  ;============================================================================
 40557                                  ; 29/04/2019 - Retro DOS 4.0
 40558                                  
 40559                                  ;** EXEPATCH.ASM 
 40560                                  ;----------------------------------------------------------------------------
 40561                                  ;	Contains the foll:
 40562                                  ;
 40563                                  ;		- code to find and overlay buggy unpack code
 40564                                  ;		- new code to be overlayed on buggy unpack code 
 40565                                  ;		- old code sequence to identify buggy unpack code
 40566                                  ;
 40567                                  ;	Revision history:
 40568                                  ;
 40569                                  ;		Created: 5/14/90
 40570                                  ;----------------------------------------------------------------------------
 40571                                  
 40572                                  ;----------------------------------------------------------------------------
 40573                                  ;
 40574                                  ; M020 : Fix for rational bug - for details see routine header
 40575                                  ; M028 : 4b04 implementation
 40576                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 40577                                  ; M032 : set turnoff bit only if DOS in HMA.
 40578                                  ; M033 : if IP < 2 then not exepacked.
 40579                                  ; M046 : support for a 4th version of exepacked files.
 40580                                  ; M068 : support for copy protected apps.
 40581                                  ; M071 : use A20OFF_COUNT of 10.
 40582                                  ;
 40583                                  ;----------------------------------------------------------------------------
 40584                                  
 40585                                  PATCH1_COM_OFFSET	EQU	06CH
 40586                                  PATCH1_OFFSET		EQU	028H
 40587                                  PATCH1_CHKSUM		EQU	0EF4EH
 40588                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 40589                                  
 40590                                  PATCH2_COM_OFFSET	EQU	076H
 40591                                  PATCH2_OFFSET		EQU	032H
 40592                                  
 40593                                  	; The strings that start at offset 076h have two possible 
 40594                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 40595                                  
 40596                                  PATCH2_CHKSUM		EQU	78B2H
 40597                                  CHKSUM2_LEN		EQU	119H/2
 40598                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 40599                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 40600                                  
 40601                                  PATCH3_COM_OFFSET	EQU	074H
 40602                                  PATCH3_OFFSET		EQU	032H
 40603                                  PATCH3_CHKSUM		EQU	4EDEH
 40604                                  CHKSUM3_LEN		EQU	117H/2
 40605                                  
 40606                                  ;**	Data structure passed for ExecReady call
 40607                                  ;
 40608                                  ;struc ERStruc
 40609                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 40610                                  ; .ER_Flags:	resw	1
 40611                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 40612                                  ; .ER_PSP:	resw	1	; PSP of the program
 40613                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 40614                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 40615                                  ; .size:
 40616                                  ;endstruc
 40617                                  
 40618                                  ;DOSCODE SEGMENT
 40619                                  
 40620                                  	; 22/05/2019 - Retro DOS v4.0
 40621                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 40622                                  
 40623                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40624                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 40625                                  
 40626                                  ; M028 - BEGIN
 40627                                  
 40628                                  ;--------------------------------------------------------------------------
 40629                                  ;
 40630                                  ;	Procedure Name		: ExecReady
 40631                                  ;
 40632                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 40633                                  ;
 40634                                  ;--------------------------------------------------------------------------
 40635                                  
 40636                                  ExecReady:
 40637 000072C7 89D6                    	mov	si,dx			; move the pointer into a friendly one
 40638                                  	;;test	word [si+2],1
 40639                                  	; 17/12/2022
 40640 000072C9 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 40641                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 40642 000072CD 7413                    	jz	short er_setver		; only setver for .COM files
 40643                                  
 40644                                  	;mov	ax,[si+8]
 40645 000072CF 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 40646 000072D2 83C010                  	add	ax,10h
 40647 000072D5 8EC0                    	mov	es,ax
 40648                                  
 40649                                  	;mov	cx,[si+10]
 40650 000072D7 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 40651                                  	;mov	cx,[si+12]
 40652 000072DA 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 40653                                  
 40654                                  	;call	[ss:FixExePatch]
 40655 000072DD 36FF16[F811]            	call	word [ss:FixExePatch] ; 28/12/2022
 40656                                  	
 40657                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40658                                  	;call	[ss:Rational386PatchPtr]
 40659                                  
 40660                                  er_setver:
 40661                                  	;;test	word [si+2],2		; Q: is this an overlay
 40662                                  	; 17/12/2022
 40663 000072E2 F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 40664                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 40665 000072E6 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 40666                                  					; N: set up lie version first
 40667 000072E8 1E                      	push	ds
 40668 000072E9 56                      	push	si
 40669                                  	;lds	si,[si+4]
 40670 000072EA C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 40671 000072ED E876ED                  	call	Scan_Execname1
 40672 000072F0 E887ED                  	call	Scan_Special_Entries
 40673 000072F3 5E                      	pop	si
 40674 000072F4 1F                      	pop	ds
 40675                                  	;mov	es,[si+8]
 40676 000072F5 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 40677 000072F8 36A1[BD0E]              	mov	ax,[ss:SPECIAL_VERSION]
 40678 000072FC 26A34000                	mov	[es:PDB.Version],ax
 40679                                  
 40680                                  er_chkdoshi:
 40681 00007300 36803E[F711]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 40682 00007306 741F                    	je	short er_done		; M032: N: done
 40683                                  
 40684                                  					; M068 - Start
 40685                                  	;mov	ax,[si+8]
 40686 00007308 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 40687                                  
 40688                                  	;or	byte [ss:DOS_FLAG],4
 40689 0000730B 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 40690                                  					; ah = 25 & ah= 49. See dossym.inc 
 40691                                  					; under TAG M003 & M009 for 
 40692                                  					; explanation
 40693                                  	;;test	word [si+2],1
 40694                                  	; 17/12/2022
 40695 00007311 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 40696                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 40697 00007315 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 40698                                  					;    a20off_psp and ret
 40699 00007317 1E                         	push	ds
 40700 00007318 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 40701 0000731A E88E02                  	call	IsCopyProt		; check if copy protected
 40702 0000731D 1F                      	pop	ds
 40703                                  
 40704                                  er_setA20:
 40705                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 40706                                  	; is non-zero at this point it indicates that the A20 is to be 
 40707                                  	; turned off for that many int 21 calls made by the app. In 
 40708                                  	; addition the A20 has to be turned off when we exit from this 
 40709                                  	; call. Hence the inc.
 40710                                  
 40711 0000731E 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 40712 00007323 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 40713                                  					; turned OFF.
 40714                                  er_done:				; M068 - End
 40715 00007327 31C0                    	xor	ax,ax
 40716 00007329 C3                      	retn
 40717                                  
 40718                                  ; M028 - END
 40719                                  
 40720                                  
 40721                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40722                                  %if 0
 40723                                  
 40724                                  ;----------------------------------------------------------------------------
 40725                                  ;
 40726                                  ; procedure : Rational386Patch
 40727                                  ;
 40728                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 40729                                  ; 386 registers (usually just the high word of 32 bit registers) during
 40730                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 40731                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 40732                                  ;
 40733                                  ; This routine applies patches to the Rational DOS Extender to work around
 40734                                  ; most of the register trashing bugs.
 40735                                  ;
 40736                                  ; Note that there are additional register trashing bugs not fixed by these
 40737                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 40738                                  ; may be modified on interrupts.
 40739                                  ;
 40740                                  ; There are two different Rational DOS Extender patchs in this module.
 40741                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 40742                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 40743                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 40744                                  ; or not.
 40745                                  ;
 40746                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 40747                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 40748                                  ; running in the HMA.
 40749                                  ;
 40750                                  ; This patch detection and replacement is based on an example supplied by
 40751                                  ; Ben Williams at Rational.
 40752                                  ;
 40753                                  ;----------------------------------------------------------------------------
 40754                                  
 40755                                  ; 22/05/2019 - Retro DOS v4.0
 40756                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 40757                                  
 40758                                  ;----------------------------------------------------------------------------
 40759                                  ;
 40760                                  ; INPUT : ES = segment where program got loaded
 40761                                  ;
 40762                                  ;----------------------------------------------------------------------------
 40763                                  
 40764                                  rpFind1:
 40765                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 40766                                  
 40767                                  rpFind1Len equ	$ - rpFind1
 40768                                  
 40769                                  ;	cli
 40770                                  ;	in	al, 21h
 40771                                  ;	pusha
 40772                                  ;	xor	ax, ax
 40773                                  ;	out	43h, al
 40774                                  ;	mov	dx, ...
 40775                                  
 40776                                  rpFind1a:
 40777                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 40778                                  
 40779                                  rpFind1aLen equ	$ - rpFind1a
 40780                                  
 40781                                  ;	mov	al, 0Eh
 40782                                  ;	out	37h, al
 40783                                  ;	xor	ax, ax
 40784                                  ;	out	0F2h, al
 40785                                  
 40786                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40787                                  
 40788                                  rpFind2:
 40789                                  	db	0Fh, 20h, 0C0h
 40790                                  
 40791                                  rpFind2Len equ	$ - rpFind2
 40792                                  
 40793                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 40794                                  
 40795                                  rpFind3:
 40796                                  	db	0Fh, 22h, 0C0h, 0EAh
 40797                                  
 40798                                  rpFind3Len equ	$ - rpFind3
 40799                                  
 40800                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 40801                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 40802                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 40803                                  
 40804                                  ; note, there is no rpRepl1 string
 40805                                  
 40806                                  rpRepl2:
 40807                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 40808                                  
 40809                                  rpRepl2Len equ	$ - rpRepl2
 40810                                  
 40811                                  ;	push	eax
 40812                                  ;	push	cx
 40813                                  ;	mov	eax, cr0
 40814                                  
 40815                                  rpRepl3:
 40816                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 40817                                  
 40818                                  rpRepl3Len equ	$ - rpRepl3
 40819                                  
 40820                                  ;	mov	ss, bx
 40821                                  ;	pop	cx
 40822                                  ;	pop	eax
 40823                                  
 40824                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 40825                                  
 40826                                  rpFind4:
 40827                                  	db	93h, 58h, 8Bh, 0CCh
 40828                                  
 40829                                  rpFind4Len equ	$ - rpFind4
 40830                                  
 40831                                  ;	xchg	bx, ax
 40832                                  ;	pop	ax
 40833                                  ;	mov	cx, sp
 40834                                  
 40835                                  rpFind5:
 40836                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 40837                                  
 40838                                  rpFind5Len equ	$ - rpFind5
 40839                                  
 40840                                  ;	mov	ax, DE0Ch
 40841                                  ;	int	67h
 40842                                  ;	mov	sp, cx
 40843                                  ;	jmp	bx
 40844                                  
 40845                                  rpRepl4:
 40846                                  	db	93h, 58h, 8Bh, 0CCh
 40847                                  	db	02Eh, 066h, 0A3h
 40848                                  
 40849                                  rpRepl4o1Len equ $ - rpRepl4
 40850                                  
 40851                                  	db	00h, 00h
 40852                                  	db	02Eh, 066h, 89h, 36h
 40853                                  
 40854                                  rpRepl4o2Len equ $ - rpRepl4
 40855                                  
 40856                                  	db	00h, 00h
 40857                                  
 40858                                  rpRepl4Len equ	$ - rpRepl4
 40859                                  
 40860                                  ;	xchg	bx, ax
 40861                                  ;	pop	ax
 40862                                  ;	mov	cx, sp
 40863                                  ;	mov	dword ptr cs:[xxxx], eax
 40864                                  ;	mov	dword ptr cs:[xxxx], esi
 40865                                  
 40866                                  rpRepl5:
 40867                                  	db	8Bh, 0E1h
 40868                                  	db	2Eh, 66h, 0A1h
 40869                                  
 40870                                  rpRepl5o1Len equ $ - rpRepl5
 40871                                  
 40872                                  	db	00h, 00h
 40873                                  	db	2Eh, 66h, 8Bh, 36h
 40874                                  
 40875                                  rpRepl5o2Len equ $ - rpRepl5
 40876                                  
 40877                                  	db	00h, 00h
 40878                                  	db	0FFh, 0E3h
 40879                                  
 40880                                  rpRepl5Len equ	$ - rpRepl5
 40881                                  
 40882                                  ;	mov	sp, cx
 40883                                  ;	mov	eax, dword ptr cs:[xxxx]
 40884                                  ;	mov	esi, dword ptr cs:[xxxx]
 40885                                  ;	jmp	bx
 40886                                  
 40887                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 40888                                  
 40889                                  rpFind6:
 40890                                  	db	0FAh, 52h, 51h
 40891                                  
 40892                                  rpFind6Len equ	$ - rpFind6
 40893                                  
 40894                                  ;	cli
 40895                                  ;	push	dx
 40896                                  ;	push	cx
 40897                                  
 40898                                  rpFind7a:
 40899                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 40900                                  
 40901                                  rpFind7aLen equ	$ - rpFind7a
 40902                                  
 40903                                  ;	mov	ax, 0DE0Ch
 40904                                  ;	call	fword ptr es:[xxxx]
 40905                                  
 40906                                  rpFind7b:
 40907                                  	db	59h, 5Ah, 5Bh
 40908                                  
 40909                                  rpFind7bLen equ	$ - rpFind7b
 40910                                  
 40911                                  ;	pop	cx
 40912                                  ;	pop	dx
 40913                                  ;	pop	bx
 40914                                  
 40915                                  rpRepl6 :
 40916                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 40917                                  
 40918                                  rpRepl6Len equ	$ - rpRepl6
 40919                                  
 40920                                  ;	cli
 40921                                  ;	push	eax
 40922                                  ;	push	ebx
 40923                                  ;	push	ecx
 40924                                  ;	push	edx
 40925                                  
 40926                                  rpRepl7:
 40927                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 40928                                  
 40929                                  rpRepl7Len equ	$ - rpRepl7
 40930                                  
 40931                                  ;	pop	edx
 40932                                  ;	pop	ecx
 40933                                  ;	pop	ebx
 40934                                  ;	pop	eax
 40935                                  ;	pop	bx
 40936                                  
 40937                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 40938                                  
 40939                                  rpFind8:
 40940                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 40941                                  
 40942                                  rpFind8Len equ	$ - rpFind8
 40943                                  
 40944                                  ;	pusha
 40945                                  ;	push	es
 40946                                  ;	push	ds
 40947                                  ;	mov	ax, dgroup	;jump back to here from replace8
 40948                                  ;	mov	ds, ax
 40949                                  
 40950                                  rpFind9 :
 40951                                  	db	1Fh, 07h, 61h
 40952                                  
 40953                                  rpFind9Len equ	$ - rpFind9
 40954                                  
 40955                                  ;	pop	ds
 40956                                  ;	pop	es
 40957                                  ;	popa
 40958                                  
 40959                                  rpRepl8:
 40960                                   	db	66h, 60h, 06h, 1Eh
 40961                                  
 40962                                  rpRepl8Len equ	$ - rpRepl8
 40963                                  
 40964                                  ;	pushad
 40965                                  ;	push	es
 40966                                  ;	push	ds
 40967                                  
 40968                                  rpRepl9:
 40969                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 40970                                  
 40971                                  rpRepl9Len equ	$ - rpRepl9
 40972                                  
 40973                                  ;	pop	ds
 40974                                  ;	pop	es
 40975                                  ;	popad
 40976                                  ;	retn			;no need to jmp back to main-line
 40977                                  
 40978                                  ;----------------------------------------------------------------------------
 40979                                  
 40980                                  struc SearchPair
 40981                                   .sp_off1: resw 1	; offset of 1st search string
 40982                                   .sp_len1: resw 1	; length of 1st search string
 40983                                   .sp_off2: resw 1	; 2nd string
 40984                                   .sp_len2: resw 1	; 2nd string
 40985                                   .sp_diff: resw 1	; max difference between offsets
 40986                                   .size:
 40987                                  endstruc
 40988                                  
 40989                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 40990                                  
 40991                                  rpBug1Strs:
 40992                                  	dw	rpFind2
 40993                                  	dw	rpFind2Len ; 3
 40994                                  	dw	rpFind3
 40995                                  	dw	rpFind3Len ; 4
 40996                                  	dw	20h
 40997                                  
 40998                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 40999                                  
 41000                                  rpBug2Strs:
 41001                                  	dw	rpFind4
 41002                                  	dw	rpFind4Len ; 4
 41003                                  	dw	rpFind5
 41004                                  	dw	rpFind5Len ; 9
 41005                                  	dw	80h
 41006                                  
 41007                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 41008                                  
 41009                                  rpBug3Strs:
 41010                                  	dw	rpFind6
 41011                                  	dw	rpFind6Len ; 3
 41012                                  	dw	rpFind7a
 41013                                  	dw	rpFind7aLen ; 7
 41014                                  	dw	80h
 41015                                  
 41016                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 41017                                  
 41018                                  rpBug4Strs:
 41019                                  	dw	rpFind8
 41020                                  	dw	4
 41021                                  	dw	rpFind9
 41022                                  	dw	rpFind9Len ; 3
 41023                                  	dw	80h
 41024                                  
 41025                                  ;----------------------------------------------------------------------------
 41026                                  
 41027                                  struc StackVars
 41028                                   .sv_wVersion:	resw 1		; Rational extender version #
 41029                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 41030                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 41031                                   .size:
 41032                                  endstruc
 41033                                  
 41034                                  ;----------------------------------------------------------------------------
 41035                                  
 41036                                  ; 22/05/2019 - Retro DOS v4.0
 41037                                  
 41038                                  Rational386Patch:
 41039                                  	; Do a few quick checks to see if this looks like a Rational
 41040                                  	; Extended application. Hopefully this will quickly weed out
 41041                                  	; most non Rational apps.
 41042                                  
 41043                                  	cmp	word [es:0],395		; version number goes here - versions
 41044                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 41045                                  
 41046                                  	cmp	word [es:0Ch],20h	; always has this value here
 41047                                  	jne	short rp3QuickOut
 41048                                  
 41049                                  	push	ax
 41050                                  
 41051                                  	mov	ax,18h 			; extender has 18h at
 41052                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 41053                                  	jne	short rp3QO_ax
 41054                                  	cmp	[es:28],ax
 41055                                  	jne	short rp3QO_ax
 41056                                  	cmp	[es:36],ax
 41057                                  	je	short rp3Maybe
 41058                                  rp3QO_ax:
 41059                                  	pop	ax
 41060                                  rp3QuickOut:
 41061                                  	retn
 41062                                  
 41063                                  ; It might be the rational extender, do more extensive checking
 41064                                  
 41065                                  rp3Maybe:
 41066                                  	cld
 41067                                  	push	bx			; note ax pushed above
 41068                                  	push	cx
 41069                                  	push	dx
 41070                                  	push	si
 41071                                  	push	di
 41072                                  	push	es
 41073                                  	push	ds			; we use all of them
 41074                                  	push	bp
 41075                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 41076                                  	mov	bp,sp
 41077                                  
 41078                                  	push	cs
 41079                                  	pop	ds
 41080                                  
 41081                                  	mov	ax,[es:0]		; save version #
 41082                                  	;mov	[bp+StackVars.sv_wVersion],ax
 41083                                  	mov	[bp],ax	
 41084                                  					; check that binary version # matches
 41085                                  	call	VerifyVersion		;   ascii string
 41086                                  	jne	short rp3Exit_j
 41087                                  
 41088                                  ; Looks like this is it, find where to put the patch code.  The
 41089                                  ; patch will be located on top of Rational code specific to 80286
 41090                                  ; processors, so these patchs MUST NOT be applied if running on
 41091                                  ; an 80286 system.
 41092                                  
 41093                                  	; Rational says the code to patch will never be beyond offset 46xxh
 41094                                  
 41095                                  	mov	cx,4500h		; force search len to 4700h (searches
 41096                                  	;mov	[bp+2],cx
 41097                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 41098                                  
 41099                                  	mov	es,[es:20h]		; es=code segment
 41100                                  
 41101                                  	mov	si,rpFind1		; string to find
 41102                                  	mov	dx,rpFind1Len ; 10	; length to match
 41103                                  	call	ScanCodeSeq		; look for code seq
 41104                                  	jz	short rpGotPatch
 41105                                  
 41106                                  ; According to Rational, some very old versions of the extender may not
 41107                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 41108                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 41109                                  
 41110                                  	mov	si,rpFind1a
 41111                                  	mov	dx,rpFind1aLen  ;8
 41112                                  	call	ScanCodeSeq
 41113                                  	jz	short rpGotPatch
 41114                                  
 41115                                  rp3Exit_j:
 41116                                  	jmp	rp3Exit
 41117                                  
 41118                                  ; Found the location to write patch code! DI = offset in code seg.
 41119                                  
 41120                                  rpGotPatch:
 41121                                  	;mov	[bp+4],di
 41122                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 41123                                  
 41124                                  ;----------------------------------------------------------------------------
 41125                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 41126                                  
 41127                                  	;cmp	word [bp+0],381
 41128                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 41129                                  	cmp	word [bp],381
 41130                                  	jae	short rpBug2			;   < 3.81
 41131                                  
 41132                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 41133                                  	call	FindBadCode
 41134                                  	jc	short rpBug2
 41135                                  
 41136                                  ; si = rpFind2 offset, di = rpFind3 offset
 41137                                  
 41138                                  	push	di
 41139                                  	mov	di,si				; rpFind2 offset
 41140                                  	mov	dx,rpFind2Len ; 3
 41141                                  
 41142                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 41143                                  	jne	short rp_no_cx
 41144                                  
 41145                                  	dec	di				;   yes, gobble up push cx too
 41146                                  	inc	dx
 41147                                  rp_no_cx:
 41148                                  	mov	si,rpRepl2			; patch out find2 sequence
 41149                                  	mov	cx,rpRepl2Len  ; 6
 41150                                  	call	GenPatch
 41151                                  
 41152                                  	pop	di				; rpFind3 offset
 41153                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 41154                                  	jne	short rp_no_cx2
 41155                                  
 41156                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 41157                                  rp_no_cx2:
 41158                                  	;mov	ax,[bp+4]
 41159                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 41160                                  	;mov	[es:di+4],ax
 41161                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 41162                                  
 41163                                  	push	di				; save find3 offset
 41164                                  	mov	si,rpRepl3			; copy repl3 to patch area
 41165                                  	mov	cx,rpRepl3Len ; 5
 41166                                  	call	CopyPatch
 41167                                  
 41168                                  	pop	bx				; find3 offset
 41169                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 41170                                  	call	GenJump 			; jmp back from patch area
 41171                                  	;mov	[bp+4],di
 41172                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 41173                                  						;   area pointer
 41174                                  
 41175                                  ;----------------------------------------------------------------------------
 41176                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 41177                                  
 41178                                  rpBug2:
 41179                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 41180                                  	call	FindBadCode
 41181                                  	jc	short rpBug3
 41182                                  
 41183                                  ; si = rpFind4 offset, di = rpFind5 offset
 41184                                  
 41185                                  	;push	word [bp+4]
 41186                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 41187                                  						;   (where repl4 goes)
 41188                                  	push	di				; save find5 offset
 41189                                  
 41190                                  	mov	di,si
 41191                                  	mov	dx,rpFind4Len ; 4
 41192                                  	mov	si,rpRepl4
 41193                                  	mov	cx,rpRepl4Len ; 15
 41194                                  	call	GenPatch			; patch out find4 code
 41195                                  
 41196                                  	pop	di				; find5 offset
 41197                                  	add	di,5				; keep 5 bytes of find5 code
 41198                                  	;mov	bx,[bp+4]
 41199                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 41200                                  	push	bx				; save repl5 location
 41201                                  	call	GenJump
 41202                                  
 41203                                  	mov	si,rpRepl5			; copy repl5 code to patch
 41204                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 41205                                  	call	CopyPatch			;   so no need to jmp back to
 41206                                  						;   main-line code
 41207                                  
 41208                                  ; patches have been made, now update the patch code to store/load dwords just
 41209                                  ; after the code in the patch area
 41210                                  
 41211                                  	pop	di				; repl5 location
 41212                                  	pop	si				; repl4 location
 41213                                  
 41214                                  	;mov	ax,[bp+4]
 41215                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 41216                                  
 41217                                  	;mov	[es:si+7],ax
 41218                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 41219                                  	;mov	[es:di+5],ax
 41220                                  	mov	[es:di+rpRepl5o1Len],ax
 41221                                  	add	ax,4
 41222                                  	;mov	[es:si+0Dh],ax
 41223                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 41224                                  	;mov	[es:di+0Bh],ax
 41225                                  	mov	[es:di+rpRepl5o2Len],ax
 41226                                  
 41227                                  	;add	word [bp+4],8
 41228                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 41229                                  						; patch area
 41230                                  
 41231                                  ;----------------------------------------------------------------------------
 41232                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 41233                                  
 41234                                  rpBug3:
 41235                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 41236                                  	call	FindBadCode
 41237                                  	jc	short rpBug4
 41238                                  
 41239                                  	;add	di,9
 41240                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 41241                                  	push	si				;   code and locate find7b
 41242                                  	mov	si,rpFind7b			;   sequence
 41243                                  	mov	dx,rpFind7bLen ; 3
 41244                                  	call	ScanCodeSeq_di
 41245                                  	pop	si
 41246                                  	jnz	short rpBug4
 41247                                  
 41248                                  	push	di				; save find7b code offset
 41249                                  
 41250                                  	mov	di,si
 41251                                  	mov	dx,rpFind6Len ; 3
 41252                                  	mov	si,rpRepl6
 41253                                  	mov	cx,rpRepl6Len ; 9
 41254                                  	call	GenPatch			; patch out find6 code
 41255                                  
 41256                                  	pop	di
 41257                                  	mov	dx,rpFind7bLen ; 3
 41258                                  	mov	si,rpRepl7
 41259                                  	mov	cx,rpRepl7Len ; 9
 41260                                  	call	GenPatch			; patch out find7b code
 41261                                  
 41262                                  ;----------------------------------------------------------------------------
 41263                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 41264                                  
 41265                                  rpBug4:
 41266                                  	;cmp	word [bp+0],360
 41267                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 41268                                  	cmp	word [bp],360
 41269                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 41270                                  
 41271                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 41272                                  	call	FindBadCode
 41273                                  	jc	short rp3Exit
 41274                                  
 41275                                  	push	di				; save find9 code offset
 41276                                  
 41277                                  	mov	di,si
 41278                                  	mov	dx,3
 41279                                  	mov	si,rpRepl8
 41280                                  	mov	cx,rpRepl8Len ; 4
 41281                                  	call	GenPatch			; patch out find8 code
 41282                                  
 41283                                  	pop	di				; find9 offset
 41284                                  	;mov	bx,[bp+4]
 41285                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 41286                                  	call	GenJump 			;   patch area
 41287                                  
 41288                                  	mov	si,rpRepl9			; copy replacement code to
 41289                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 41290                                  	call	CopyPatch			;   so no jmp back to main-line
 41291                                  
 41292                                  rp3Exit:
 41293                                  	add	sp,StackVars.size
 41294                                  	pop	bp
 41295                                  	pop	ds
 41296                                  	pop	es
 41297                                  	pop	di
 41298                                  	pop	si
 41299                                  	pop	dx
 41300                                  	pop	cx
 41301                                  	pop	bx
 41302                                  	pop	ax
 41303                                  	retn
 41304                                  
 41305                                  ;----------------------------------------------------------------------------
 41306                                  ;
 41307                                  ; FindBadCode
 41308                                  ;
 41309                                  ; Searches Rational code segment looking for a pair of find strings (all
 41310                                  ; patches have at least two find strings).
 41311                                  ;
 41312                                  ; Entry:
 41313                                  ;	ES    = code segment to search
 41314                                  ;	DS:BX = search pair structure for this search
 41315                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 41316                                  ;
 41317                                  ; Exit:
 41318                                  ;	CY flag clear if both strings found, and
 41319                                  ;	SI    = offset in ES of 1st string
 41320                                  ;	DI    = offset in ES of 2nd string
 41321                                  ;	CY set if either string not found, or strings too far apart
 41322                                  ;
 41323                                  ; Used:
 41324                                  ;	CX
 41325                                  ;
 41326                                  ;----------------------------------------------------------------------------
 41327                                  
 41328                                  ;struc SearchPair
 41329                                  ; .sp_off1: resw 1	; offset of 1st search string
 41330                                  ; .sp_len1: resw 1	; length of 1st search string
 41331                                  ; .sp_off2: resw 1	; 2nd string
 41332                                  ; .sp_len2: resw 1	; 2nd string
 41333                                  ; .sp_diff: resw 1	; max difference between offsets
 41334                                  ; .size:
 41335                                  ;endstruc
 41336                                  
 41337                                  FindBadCode:
 41338                                  	;mov	cx,[bp+2]
 41339                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 41340                                  
 41341                                  	mov	si,[bx]	; mov si,[bx+0]
 41342                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 41343                                  	
 41344                                  	;mov	dx,[bx+2]
 41345                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 41346                                  	call	ScanCodeSeq
 41347                                  	jnz	short fbc_error		; done if 1st not found
 41348                                  
 41349                                  	push	di			; save 1st string offset
 41350                                  
 41351                                  	;mov	si,[bx+4]
 41352                                  	mov	si,[bx+SearchPair.sp_off2]
 41353                                  	;mov	dx,[bx+6]
 41354                                  	mov	dx,[bx+SearchPair.sp_len2]
 41355                                  	call	ScanCodeSeq_di		; don't change flags after this!
 41356                                  
 41357                                  	pop	si			; restore 1st string offset
 41358                                  	jnz	short fbc_error
 41359                                  
 41360                                  	mov	ax,di			; sanity check that
 41361                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 41362                                  	jc	short fbc_error
 41363                                  	;cmp	ax,[bx+8]
 41364                                  	cmp	ax,[bx+SearchPair.sp_diff]
 41365                                  	ja	short fbc_error
 41366                                  
 41367                                  	clc
 41368                                  	retn
 41369                                  
 41370                                  fbc_error:
 41371                                  	stc
 41372                                  	retn
 41373                                  
 41374                                  ;----------------------------------------------------------------------------
 41375                                  ;
 41376                                  ; GenPatch
 41377                                  ;
 41378                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 41379                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 41380                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 41381                                  ; code.
 41382                                  ;
 41383                                  ; Entry:
 41384                                  ;	ES:DI = start of buggy code to be patched
 41385                                  ;	DX    = length of buggy code to be patched
 41386                                  ;	DS:SI = replacement patch code
 41387                                  ;	CX    = length of replacement patch code
 41388                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 41389                                  ;
 41390                                  ; Exit:
 41391                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 41392                                  ;
 41393                                  ; Used:
 41394                                  ;	AX, BX, SI, Flags
 41395                                  ;
 41396                                  ;----------------------------------------------------------------------------
 41397                                  
 41398                                  GenPatch:
 41399                                  	push	di			;save offset of buggy code
 41400                                  
 41401                                  	;mov	bx,[bp+4]
 41402                                  	mov	bx,[bp+StackVars.sv_pPatch]
 41403                                  					;jump from buggy code to patch area
 41404                                  	call	GenJump
 41405                                  
 41406                                  	call	CopyPatch		;copy replacement code to patch area
 41407                                  
 41408                                  	pop	bx			;offset of buggy code + buggy code
 41409                                  	add	bx,dx			;  length = return from patch offset
 41410                                  
 41411                                  	call	GenJump 		;jump from patch area back to main-
 41412                                  	;mov	[bp+4],di
 41413                                  	mov	[bp+StackVars.sv_pPatch],di
 41414                                  					;  line code, update patch pointer
 41415                                  	retn
 41416                                  
 41417                                  ;----------------------------------------------------------------------------
 41418                                  ;
 41419                                  ; CopyPatch
 41420                                  ;
 41421                                  ; Copies patch code to patch location.
 41422                                  ;
 41423                                  ; Entry:
 41424                                  ;	DS:SI = patch code to be copied
 41425                                  ;	ES    = segment of code to patch
 41426                                  ;	CX    = length of code to copy
 41427                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 41428                                  ;
 41429                                  ; Exit:
 41430                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 41431                                  ;
 41432                                  ; Used:
 41433                                  ;	SI, Flags
 41434                                  ;
 41435                                  ;----------------------------------------------------------------------------
 41436                                  
 41437                                  CopyPatch:
 41438                                  	push	cx
 41439                                  	;mov	di,[bp+4]
 41440                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 41441                                  	cld
 41442                                  	rep movsb
 41443                                  	pop	cx
 41444                                  	;mov	[bp+4],di
 41445                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 41446                                  	retn
 41447                                  
 41448                                  ;----------------------------------------------------------------------------
 41449                                  ;
 41450                                  ; GenJump
 41451                                  ;
 41452                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 41453                                  ;
 41454                                  ; Entry:
 41455                                  ;	ES:DI = from location (where to put jmp instruction)
 41456                                  ;	BX    = to location (where to jump to)
 41457                                  ;
 41458                                  ; Exit:
 41459                                  ;	DI = byte after generated jump
 41460                                  ;
 41461                                  ; Used:
 41462                                  ;	AX
 41463                                  ;
 41464                                  ;----------------------------------------------------------------------------
 41465                                  
 41466                                  GenJump:
 41467                                  	mov	al,0E9h		; jmp rel16 opcode
 41468                                  	stosb
 41469                                  
 41470                                  	mov	ax,bx		; calc offset to 'to' location
 41471                                  	sub	ax,di
 41472                                  	sub	ax,2
 41473                                  
 41474                                  	stosw			; output offset
 41475                                  
 41476                                  	retn
 41477                                  
 41478                                  ;----------------------------------------------------------------------------
 41479                                  ;
 41480                                  ; ScanCodeSeq
 41481                                  ;
 41482                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41483                                  ;
 41484                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41485                                  ;
 41486                                  ;----------------------------------------------------------------------------
 41487                                  
 41488                                  ScanCodeSeq:
 41489                                  	mov	di,200h
 41490                                  ScanCodeSeq_di:
 41491                                  	push	cx
 41492                                  	sub	cx,dx
 41493                                  	inc	cx
 41494                                  scsagain:
 41495                                  	push	si
 41496                                  	push	di
 41497                                  	push	cx
 41498                                  	mov	cx,dx
 41499                                  	rep	cmpsb
 41500                                  	pop	cx
 41501                                  	pop	di
 41502                                  	pop	si
 41503                                  	je	short scsfound
 41504                                  	inc	di
 41505                                  	loop	scsagain
 41506                                  scsfound:
 41507                                  	pop	cx
 41508                                  vvexit:		; 18/12/2022
 41509                                  	retn
 41510                                  	
 41511                                  ;----------------------------------------------------------------------------
 41512                                  ;
 41513                                  ; VerifyVersion
 41514                                  ;
 41515                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41516                                  ; from ES:2A.
 41517                                  ;
 41518                                  ;       Entry: AX = binary version number 
 41519                                  ;       Exit : Z flag set if version numbers match
 41520                                  ;
 41521                                  ;----------------------------------------------------------------------------
 41522                                  
 41523                                  VerifyVersion:
 41524                                  	mov	si,[es:2Ah]		; offset of version number
 41525                                  					;  in ascii
 41526                                  	mov	bl,10
 41527                                  	add	si,3			; point to last digit
 41528                                  
 41529                                  	call	VVDigit
 41530                                  	jne	short vvexit
 41531                                  	call	VVDigit
 41532                                  	jne	short vvexit
 41533                                  	cmp	byte [es:si],'.'
 41534                                  	jne	short vvexit
 41535                                  	dec	si
 41536                                  	;call	VVDigit
 41537                                  	; 18/12/2022
 41538                                  	;jmp	short VVDigit
 41539                                  ;vvexit:
 41540                                  	;retn
 41541                                  VVDigit:
 41542                                  	div	bl
 41543                                  	add	ah,'0'
 41544                                  	dec	si
 41545                                  	cmp	[es:si+1],ah
 41546                                  	mov	ah,0			; do not xor or sub we need Z
 41547                                  	retn
 41548                                  
 41549                                  %endif
 41550                                  
 41551                                  ;-----------------------------------------------------------------------
 41552                                  
 41553                                  ; 23/05/2019 - Retro DOS v4.0
 41554                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 41555                                  
 41556                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41557                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 41558                                  
 41559                                  exepatch_start:	 ; label byte
 41560                                  
 41561                                  	; The following is the code that'll be layed over the buggy unpack
 41562                                  	; code.
 41563                                  str1:
 41564 0000732A 06                      	db  06h	  		;push	es		 
 41565 0000732B 8CD8                    	db  8Ch,0D8h		;mov	ax,ds 
 41566                                  
 41567                                  first_stop equ	$-str1
 41568                                  			
 41569 0000732D 2BC2                    	db  2Bh, 0C2h		;sub	ax, dx			
 41570                                  
 41571                                  first:  ; label	byte
 41572                                  
 41573 0000732F 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41574 00007331 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41575 00007333 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41576 00007336 57                      	db  57h	    		;push	di
 41577 00007337 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41578 0000733A B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH 		
 41579 0000733C F3AE                    	db  0F3h,0AEh 		;repz	scasb			
 41580 0000733E 47                      	db  47h	    		;inc	di			
 41581 0000733F 8BF7                    	db  8Bh,0F7h  		;mov	si,di			
 41582 00007341 5F                      	db  5Fh	    		;pop	di
 41583 00007342 58                      	db  58h	    		;pop	ax
 41584                                  
 41585                                  second_stop equ	$-first
 41586                                  
 41587 00007343 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx			
 41588                                  
 41589                                  second: ; label	byte
 41590                                  
 41591 00007345 8EC0                    	db  8Eh,0C0h  		;mov	es,ax			
 41592                                  		    		;NextRec:				
 41593 00007347 B90402                  	db  0B9h,04h,02h	;mov	cx, 0204h
 41594                                  		    		;norm_agn:				
 41595 0000734A 8BC6                    	db  8Bh,0C6h		;mov	ax,si			
 41596 0000734C F7D0                    	db  0F7h,0D0h		;not	ax		
 41597 0000734E D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41598 00007350 7413                    	db  74h,13h		;jz	short SI_ok			
 41599 00007352 8CDA                    	db  8Ch,0DAh		;mov	dx,ds			
 41600 00007354 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 41601 00007357 2BD0                    	db  2Bh,0D0h		;sub	dx,ax			
 41602 00007359 7308                    	db  73h,08h		;jnc	short SItoDS			
 41603 0000735B F7DA                    	db  0F7h,0DAh		;neg	dx			
 41604 0000735D D3E2                    	db  0D3h,0E2h		;shl	dx,cl			
 41605 0000735F 2BF2                    	db  2Bh,0F2h		;sub	si,dx			
 41606 00007361 33D2                    	db  33h,0D2h		;xor	dx,dx			
 41607                                  				;SItoDS: 				
 41608 00007363 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41609                                  				;SI_ok:					
 41610 00007365 87F7                    	db  87h,0F7h		;xchg	si,di			
 41611 00007367 1E                      	db  1Eh			;push	ds			
 41612 00007368 06                      	db  06h			;push	es			
 41613 00007369 1F                      	db  1Fh			;pop	ds			
 41614 0000736A 07                      	db  07h			;pop	es			
 41615 0000736B FECD                    	db  0FEh,0CDh		;dec	ch			
 41616 0000736D 75DB                    	db  75h,0DBh		;jnz	short norm_agn		
 41617 0000736F AC                      	db  0ACh		;lodsb			
 41618 00007370 92                      	db  92h			;xchg	dx,ax
 41619 00007371 4E                      	db  4Eh			;dec	si
 41620 00007372 AD                      	db  0ADh		;lodsw			
 41621 00007373 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 41622 00007375 46                      	db  46h			;inc	si		
 41623 00007376 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 41624 00007378 24FE                    	db  24h,0FEh		;and	al,0FEH		
 41625 0000737A 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 41626 0000737C 7505                    	db  75h,05h		;jne	short TryEnum
 41627 0000737E AC                      	db  0ACh		;lodsb				
 41628 0000737F F3AA                    	db  0F3h,0AAh		;rep stosb			
 41629                                  
 41630                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 41631 00007381 EB06                    	db  0EBh,06h		;jmp	short TryNext
 41632                                  
 41633                                  				;TryEnum:
 41634 00007383 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 41635 00007385 756C                    	db  75h,6Ch		;jne	short CorruptExe		
 41636 00007387 F3A4                    	db  0F3h,0A4h		;rep movsb			
 41637                                  				;TryNext:
 41638                                  
 41639 00007389 92                      	db  92h			;xchg	dx,ax
 41640                                  ;	db  8Ah,0C2h		;mov	al,dl			
 41641                                  
 41642 0000738A A801                    	db  0A8h,01h		;test	al,1			
 41643 0000738C 74B9                    	db  74h,0B9h		;jz	short NextRec			
 41644 0000738E 9090                    	db  90h,90h		;nop,nop
 41645                                  	
 41646                                  last_stop equ $-second
 41647                                  size_str1 equ $-str1
 41648                                  
 41649                                  	; The following is the code that we need to look for in the exe
 41650                                  	; file.
 41651                                  
 41652                                  scan_patch1: ; label byte
 41653                                  
 41654 00007390 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41655 00007392 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41656 00007394 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 41657 00007396 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41658 00007398 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41659 0000739A BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41660 0000739D B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41661 000073A0 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41662 000073A2 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41663 000073A4 47                      	db  47h			;inc	di			
 41664 000073A5 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41665 000073A7 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41666 000073A9 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 41667 000073AB 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41668 000073AD BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41669                                  				;NextRec:
 41670 000073B0 B104                    	db  0B1h,04h		;mov	cl,4
 41671 000073B2 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41672 000073B4 F7D0                    	db  0F7h,0D0h		;not	ax		
 41673 000073B6 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41674 000073B8 7409                    	db  74h,09h		;jz	short SI_ok
 41675 000073BA 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41676 000073BC 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41677 000073BE 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41678 000073C0 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	       
 41679                                  	       			;SI_ok:
 41680 000073C3 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41681 000073C5 F7D0                    	db  0F7h,0D0h		;not	ax
 41682 000073C7 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41683 000073C9 7409                    	db  74h,09h		;jz	short DI_ok
 41684 000073CB 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41685 000073CD 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41686 000073CF 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41687 000073D1 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 41688                                  				;DI_ok:
 41689                                  
 41690                                  size_scan_patch1 equ $-scan_patch1
 41691                                  
 41692                                  scan_patch2: ; label byte
 41693                                  			
 41694 000073D4 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41695 000073D6 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41696 000073D8 48                      	db  48h			;dec	ax
 41697 000073D9 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41698 000073DB 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41699 000073DD BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41700 000073E0 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41701 000073E3 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41702 000073E5 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41703 000073E7 47                      	db  47h			;inc	di			
 41704 000073E8 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41705 000073EA 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41706 000073EC 48                      	db  48h			;dec	ax
 41707 000073ED 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41708 000073EF BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 41709                                  				;NextRec:
 41710 000073F2 B104                    	db  0B1h,04h		;mov	cl,4
 41711 000073F4 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41712 000073F6 F7D0                    	db  0F7h,0D0h		;not	ax		
 41713 000073F8 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41714 000073FA 740A                    	db  74h,0Ah		;jz	short SI_ok
 41715 000073FC 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41716 000073FE 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41717 00007400 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41718 00007402 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 41719                                  				;or	si,0FFF0H
 41720                                  				;SI_ok:
 41721 00007406 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41722 00007408 F7D0                    	db  0F7h,0D0h		;not	ax
 41723 0000740A D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41724 0000740C 740A                    	db  74h,0Ah		;jz	short DI_ok
 41725 0000740E 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41726 00007410 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41727 00007412 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41728 00007414 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 41729                                  				;or	di,0FFF0H
 41730                                  				;DI_ok:
 41731                                  
 41732                                  size_scan_patch2 equ $-scan_patch2
 41733                                  
 41734                                  scan_patch3: ; label byte
 41735                                  
 41736 00007418 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41737 0000741A 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41738 0000741C 48                      	db  48h			;dec	ax
 41739 0000741D 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41740 0000741F 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41741 00007421 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41742 00007424 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41743 00007427 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41744 00007429 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41745 0000742B 47                      	db  47h			;inc	di			
 41746 0000742C 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41747 0000742E 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41748 00007430 48                      	db  48h			;dec	ax
 41749 00007431 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41750 00007433 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 41751                                  				;NextRec:
 41752 00007436 B104                    	db  0B1h,04h		;mov	cl,4
 41753 00007438 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41754 0000743A F7D0                    	db  0F7h,0D0h		;not	ax		
 41755 0000743C D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41756 0000743E 7409                    	db  74h,09h		;jz	short SI_ok
 41757 00007440 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41758 00007442 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41759 00007444 8EDA                    	db  8Eh,0DAh		;mov	ds,dx	
 41760 00007446 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	
 41761                                  				;SI_ok:
 41762 00007449 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41763 0000744B F7D0                    	db  0F7h,0D0h		;not	ax
 41764 0000744D D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41765 0000744F 7409                    	db  74h,09h		;jz	short DI_ok
 41766 00007451 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41767 00007453 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41768 00007455 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41769 00007457 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 41770                                  				;DI_ok:
 41771                                  
 41772                                  size_scan_patch3 equ $-scan_patch3
 41773                                  
 41774                                  scan_com: ; label byte
 41775                                  
 41776 0000745A AC                      	db  0ACh		;lodsb			
 41777 0000745B 8AD0                    	db  8Ah,0D0h		;mov	dl,al		
 41778 0000745D 4E                      	db  4Eh			;dec	si
 41779 0000745E AD                      	db  0ADh		;lodsw			
 41780 0000745F 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 41781 00007461 46                      	db  46h			;inc	si		
 41782 00007462 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 41783 00007464 24FE                    	db  24h,0FEh		;and	al,0FEH		
 41784 00007466 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 41785 00007468 7506                    	db  75h,06h		;jne	short TryEnum
 41786 0000746A AC                      	db  0ACh		;lodsb				
 41787 0000746B F3AA                    	db  0F3h,0AAh		;rep stosb			
 41788 0000746D EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 41789                                  				;TryEnum:
 41790 00007470 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 41791 00007472 756B                    	db  75h,6Bh		;jne	short CorruptExe		
 41792 00007474 F3A4                    	db  0F3h,0A4h		;rep movsb			
 41793                                  				;TryNext:
 41794 00007476 8AC2                    	db  8Ah,0C2h		;mov	al,dl			
 41795 00007478 A801                    	db  0A8h,01h		;test	al,1			
 41796                                  ;	db  74h,0BAh		;jz	short NextRec			
 41797                                  
 41798                                  size_scan_com	equ	$-scan_com
 41799                                  
 41800                                  ;-----------------------------------------------------------------------
 41801                                  
 41802                                  ; 23/05/2019 - Retro DOS v4.0
 41803                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 41804                                  
 41805                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41806                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 41807                                  
 41808                                  ExePatch:
 41809                                  	; 28/12/2022 - Retro DOS v4.1
 41810                                  	;call	ExePackPatch
 41811                                  	;;call	word [ss:RationalPatchPtr]
 41812                                  	;retn
 41813                                  	; 28/12/2022
 41814                                  	;jmp	short ExePackPatch
 41815                                  
 41816                                  ;-----------------------------------------------------------------------
 41817                                  ;
 41818                                  ; Procedure Name 	: ExePackPatch
 41819                                  ;
 41820                                  ; Inputs	 	: DS 			-> DOSDATA
 41821                                  ;			  ES:0 			-> read in image
 41822                                  ;			  ax:cx = start cs:ip of program
 41823                                  ; Output		:		
 41824                                  ;
 41825                                  ;	1. If ES <= 0fffh
 41826                                  ;	   2. if exepack signature ('RB') found
 41827                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 41828                                  ;	       	 4. if rest of the code & checksum compares
 41829                                  ;	  	    5. overlay buggy code with code in 
 41830                                  ;		       doscode:str1.
 41831                                  ;		 6. endif
 41832                                  ;	      7. endif
 41833                                  ;	   8. endif
 41834                                  ;	9. endif
 41835                                  ;
 41836                                  ;
 41837                                  ; Uses			: NONE
 41838                                  ;
 41839                                  ;-----------------------------------------------------------------------
 41840                                  		
 41841                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41842                                  	; 23/05/2019 - Retro DOS v4.0	
 41843                                  ExePackPatch:
 41844 0000747A 53                      	push	bx
 41845 0000747B 8CC3                    	mov	bx,es			; bx has load segment
 41846 0000747D 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 41847 00007481 7602                    	jbe	short ep_cont		; N: 
 41848 00007483 5B                      	pop	bx			; Y: no need to patch
 41849 00007484 C3                      	retn
 41850                                  ep_cont:
 41851 00007485 1E                      	push	ds
 41852 00007486 06                      	push	es
 41853 00007487 50                      	push	ax
 41854 00007488 51                      	push	cx
 41855 00007489 56                      	push	si
 41856 0000748A 57                      	push	di
 41857                                  	
 41858                                  		; M033 - start
 41859                                  		; exepacked programs have an IP of 12h (>=2)
 41860                                  
 41861 0000748B 83E902                  	sub	cx,2			; Q: is IP >=2 
 41862 0000748E 7303                    	jnb	short epp_1		; N: exit
 41863 00007490 E9C500                  	jmp	ep_notpacked
 41864                                  					; ax:cx now points to location of
 41865                                  					; 'RB' if this is an exepacked file.
 41866                                  		; M033 - end
 41867                                  epp_1:
 41868 00007493 89CF                    	mov	di,cx
 41869 00007495 8EC0                    	mov	es,ax
 41870 00007497 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in 
 41871                                  					; unpack_offset
 41872                                  
 41873 0000749C 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 41874                                  	;ljne	ep_notpacked
 41875 000074A1 7403                    	je	short epp_2
 41876 000074A3 E9B200                  	jmp	ep_notpacked
 41877                                  epp_2:
 41878 000074A6 0E                      	push	cs
 41879 000074A7 1F                      	pop	ds			; set ds to cs
 41880                                  
 41881                                  	;add	di,6Ch
 41882 000074A8 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed 
 41883                                  					;          file where we hope to find
 41884                                  					;	   scan string. 
 41885                                  
 41886 000074AB E8B200                  	call	chk_common_str		; check for match
 41887                                  
 41888 000074AE 7524                    	jnz	short ep_chkpatch2	; Q: does the patch match
 41889                                  					; N: check at patch2_offset
 41890                                  					; Y: check for rest of patch string
 41891 000074B0 BE[9073]                	mov	si,scan_patch1
 41892                                  					; ds:si -> scan string 
 41893 000074B3 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 41894                                  
 41895                                  	;add	di,28h
 41896                                  	; 07/12/2022
 41897 000074B8 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed 
 41898                                  					;          file where we hope to find
 41899                                  					;	   scan string. 
 41900                                  	;mov	cx,68
 41901 000074BB B94400                  	mov	cx,size_scan_patch1
 41902                                  	;mov	bx,142
 41903 000074BE BB8E00                  	mov	bx,CHKSUM1_LEN
 41904                                  	;mov	ax,0EF4Eh
 41905 000074C1 B84EEF                  	mov	ax,PATCH1_CHKSUM
 41906 000074C4 E8AD00                  	call	chk_patchsum		; check if patch and chk sum compare
 41907 000074C7 7208                    	jc	short ep_done1		; Q: did we pass the test
 41908                                  					; N: exit
 41909                                  					; Y: overlay code with new 
 41910 000074C9 BE[2A73]                	mov	si,str1
 41911                                  	;mov	cx,102
 41912 000074CC B96600                  	mov	cx,size_str1
 41913                                  	
 41914 000074CF F3A4                    	rep	movsb
 41915                                  ep_done1:
 41916 000074D1 E98400                  	jmp	ep_done
 41917                                  
 41918                                  ep_chkpatch2:
 41919                                  	;mov	di,76h
 41920 000074D4 BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 41921                                  					; in another version of unpack
 41922 000074D7 E88600                  	call	chk_common_str		; check for match
 41923                                  
 41924 000074DA 7544                    	jnz	short ep_chkpatch3	; Q: does the patch match
 41925                                  					; N: check for patch3_offset
 41926                                  					; Y: check for rest of patch string
 41927                                  
 41928 000074DC BE[D473]                	mov	si,scan_patch2
 41929                                  					; ds:si -> scan string 
 41930                                  	;mov	di,32h
 41931 000074DF BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed 
 41932                                  					;          file where we hope to find
 41933                                  	;mov	cx,68			;	   scan string. 
 41934 000074E2 B94400                  	mov	cx,size_scan_patch2
 41935                                  	;mov	bx,140
 41936 000074E5 BB8C00                  	mov	bx,CHKSUM2_LEN
 41937                                  	;mov	ax,78B2h
 41938 000074E8 B8B278                  	mov	ax,PATCH2_CHKSUM
 41939 000074EB E88600                  	call	chk_patchsum		; check if patch and chk sum compare
 41940                                  
 41941                                  					; M046 - Start
 41942                                  					; Q: did we pass the test
 41943 000074EE 7311                    	jnc	short ep_patchcode2		; Y: overlay code with new 
 41944                                  					; N: try with a different chksum
 41945                                  
 41946                                  
 41947 000074F0 BE[D473]                	mov	si,scan_patch2
 41948                                  					; ds:si -> scan string 
 41949                                  	;mov	cx,68
 41950 000074F3 B94400                  	mov	cx,size_scan_patch2
 41951                                  	;mov	bx,129
 41952 000074F6 BB8100                  	mov	bx,CHKSUM2A_LEN
 41953                                  	;mov	ax,1C47h
 41954 000074F9 B8471C                  	mov	ax,PATCH2A_CHKSUM
 41955 000074FC E87500                  	call	chk_patchsum		; check if patch and chk sum compare
 41956                                  					; Q: did we pass the test
 41957 000074FF 7257                    	jc	short ep_notpacked		; N: try with a different chksum
 41958                                  					; Y: overlay code with new 
 41959                                  						
 41960                                  ep_patchcode2:			       	; M046 - End
 41961 00007501 BE[2A73]                	mov	si,str1
 41962                                  	;mov	cx,3
 41963 00007504 B90300                  	mov	cx,first_stop
 41964 00007507 F3A4                    	rep	movsb
 41965 00007509 B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 41966 0000750C AB                      	stosw
 41967 0000750D 83C602                  	add	si,2
 41968                                  	;mov	cx,20
 41969 00007510 B91400                  	mov	cx,second_stop
 41970 00007513 F3A4                    	rep	movsb
 41971 00007515 AB                      	stosw				; put in dec ax and nop
 41972 00007516 83C602                  	add	si,2
 41973                                  	;mov	cx,75
 41974 00007519 B94B00                  	mov	cx,last_stop
 41975 0000751C F3A4                    	rep	movsb
 41976 0000751E EB38                    	jmp	short ep_done
 41977                                  
 41978                                  ep_chkpatch3:
 41979                                  	;mov	di,74h
 41980 00007520 BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 41981                                  					; in another version of unpack
 41982 00007523 E83A00                  	call	chk_common_str		; check for match
 41983                                  
 41984 00007526 7530                    	jnz	short ep_notpacked	; Q: does the patch match
 41985                                  					; N: exit
 41986                                  					; Y: check for rest of patch string
 41987 00007528 BE[1874]                	mov	si,scan_patch3
 41988                                  					; ds:si -> scan string 
 41989                                  	;mov	di,32h
 41990 0000752B BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed 
 41991                                  					;          file where we hope to find
 41992                                  					;	   scan string. 
 41993                                  	;mov	cx,66
 41994 0000752E B94200                  	mov	cx,size_scan_patch3
 41995                                  	;mov	bx,139
 41996 00007531 BB8B00                  	mov	bx,CHKSUM3_LEN
 41997                                  	;mov	ax,4EDEh
 41998 00007534 B8DE4E                  	mov	ax,PATCH3_CHKSUM
 41999 00007537 E83A00                  	call	chk_patchsum		; check if patch and chk sum compare
 42000 0000753A 721C                    	jc	short ep_notpacked	; Q: did we pass the test
 42001                                  					; N: exit
 42002                                  					; Y: overlay code with new 
 42003 0000753C BE[2A73]                	mov	si,str1
 42004                                  	;mv	cx,3
 42005 0000753F B90300                  	mov	cx,first_stop
 42006 00007542 F3A4                    	rep	movsb
 42007 00007544 B048                    	mov	al,48h			; al = opcode for dec ax
 42008 00007546 AA                      	stosb
 42009 00007547 83C602                  	add	si,2
 42010                                  	;mov	cx,20
 42011 0000754A B91400                  	mov	cx,second_stop
 42012 0000754D F3A4                    	rep	movsb
 42013 0000754F AA                      	stosb				; put in dec ax
 42014 00007550 83C602                  	add	si,2
 42015                                  	;mov	cx,75
 42016 00007553 B94B00                  	mov	cx,last_stop
 42017 00007556 F3A4                    	rep	movsb
 42018                                  
 42019                                  ep_notpacked:
 42020                                  	;stc
 42021                                  ep_done:
 42022 00007558 5F                      	pop	di
 42023 00007559 5E                      	pop	si
 42024 0000755A 59                      	pop	cx
 42025 0000755B 58                      	pop	ax
 42026 0000755C 07                      	pop	es
 42027 0000755D 1F                      	pop	ds
 42028 0000755E 5B                      	pop	bx
 42029 0000755F C3                      	retn
 42030                                  
 42031                                  ;-------------------------------------------------------------------------
 42032                                  ;
 42033                                  ; 	Procedure Name	: chk_common_str
 42034                                  ;
 42035                                  ;	Input		: DS = DOSCODE
 42036                                  ;			; ES:DI points to string in packed file
 42037                                  ;
 42038                                  ;	Output		; Z if match else NZ
 42039                                  ;
 42040                                  ;-------------------------------------------------------------------------
 42041                                  
 42042                                  	; 23/05/2019 - Retro DOS v4.0
 42043                                  chk_common_str:
 42044 00007560 BE[5A74]                	mov	si,scan_com
 42045                                  					; ds:si -> scan string 
 42046                                  	;mov	cx,32
 42047 00007563 B92000                  	mov	cx,size_scan_com
 42048                                  
 42049 00007566 F3A6                    	repe	cmpsb	       
 42050                                  
 42051                                  					; M046 - start
 42052                                  	; a fourth possible version of these exepacked programs have a 
 42053                                  	; 056h instead of 06Bh. See scan_com above
 42054                                  	;
 42055                                  	; 	db  75h, 6Bh		;jne CorruptExe		
 42056                                  	;
 42057                                  	; If the mismatch at this point is due to a 56h instead of 6Bh 
 42058                                  	; we shall try to match the rest of the string
 42059                                  	;
 42060                                  
 42061 00007568 7409                    	jz	short ccs_done
 42062 0000756A 26807DFF56              	cmp	byte [es:di-1],56h
 42063 0000756F 7502                    	jnz	short ccs_done
 42064                                  
 42065 00007571 F3A6                    	repe	cmpsb	    
 42066                                  ccs_done:				; M046 - end
 42067 00007573 C3                      	retn
 42068                                  
 42069                                  ;-------------------------------------------------------------------------
 42070                                  ;
 42071                                  ;	Procedure Name	: chk_patchsum
 42072                                  ;
 42073                                  ;	Input		: DS:SI -> string we're looking for
 42074                                  ;			: ES:DI -> offset in packed file
 42075                                  ;			: CX 	= scan length
 42076                                  ;			: BX	= length of check sum
 42077                                  ;			: AX 	= value of check sum
 42078                                  ;
 42079                                  ;	Output		: if patch & check sum compare
 42080                                  ;				NC
 42081                                  ;			  else
 42082                                  ;				CY
 42083                                  ;
 42084                                  ;	Uses		: AX, BX, CX, SI
 42085                                  ;
 42086                                  ;-------------------------------------------------------------------------
 42087                                  
 42088                                  	; 23/05/2019 - Retro DOS v4.0
 42089                                  chk_patchsum:
 42090 00007574 57                      	push	di
 42091                                  
 42092 00007575 F3A6                    	repe	cmpsb			   
 42093                                  
 42094 00007577 7518                    	jnz	short cp_fail		; Q: does the patch match
 42095                                  					; N: exit
 42096                                  					; Y:	
 42097                                  
 42098                                  		; we do a check sum starting from the location of the 
 42099                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 42100                                  		; unpacking code.
 42101                                  
 42102 00007579 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 42103 0000757E 89D9                    	mov	cx,bx			; cx = length of check sum
 42104                                  
 42105 00007580 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 42106 00007582 31C0                    	xor	ax,ax
 42107                                  ep_chksum:
 42108 00007584 260305                  	add	ax,[es:di]
 42109 00007587 83C702                  	add	di,2
 42110 0000758A E2F8                    	loop	ep_chksum
 42111                                  
 42112 0000758C 5F                      	pop	di			; restore di
 42113                                  
 42114 0000758D 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 42115                                  	;jne	short cp_fail		; N: exit
 42116                                  					; Y: 
 42117                                  	; 25/09/2023
 42118                                  	;clc	
 42119                                  	;retn
 42120 0000758F 74E2                    	je	short ccs_done ; cf=0
 42121                                  	
 42122                                  cp_fail:
 42123 00007591 F9                      	stc
 42124 00007592 C3                      	retn
 42125                                  
 42126                                  ; 28/12/2022 - Retro DOS v4.1
 42127                                  %if 0
 42128                                  ;--------------------------------------------------------------------------- 
 42129                                  
 42130                                  
 42131                                  ; M020 : BEGIN
 42132                                  ;
 42133                                  ;---------------------------------------------------------------------------
 42134                                  ;
 42135                                  ; procedure : RationalPatch
 42136                                  ;
 42137                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 42138                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 42139                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 42140                                  ;
 42141                                  ; THE BUG is in the following code sequence:
 42142                                  ;
 42143                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 42144                                  ;90		even				; word align
 42145                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 42146                                  ;e8 xx xx	call	set_A20			; enable A20
 42147                                  ;
 42148                                  ; This patch routine replaces the mov & the loop with a far call into a
 42149                                  ; routine in DOS data segment which is in low memory (because A20 line
 42150                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 42151                                  ; a mov & loop.
 42152                                  ;
 42153                                  ; Identification of Buggy Rational EXE
 42154                                  ; ====================================
 42155                                  ;
 42156                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 42157                                  ;
 42158                                  ; OFFSET				Contains
 42159                                  ; ------				--------
 42160                                  ; 0000h			100 times Version number in binary
 42161                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 42162                                  ;
 42163                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 42164                                  ;
 42165                                  ; 002ah			offset where version number is stored in ASCII
 42166                                  ;				e.g. '3.48A'
 42167                                  ;
 42168                                  ; 0030h			offset of copyright string. Copyright strings either
 42169                                  ;			start with "DOS/16M Copyright...." or
 42170                                  ;			"Copyright.....". The string contains
 42171                                  ;			"Rational Systems, Inc."
 42172                                  ;
 42173                                  ; 0020h			word : Paragraph offset of the buggy code segment
 42174                                  ;				from the program image
 42175                                  ; 0016h			word : size of buggy code segment
 42176                                  ;
 42177                                  ;	Buggy code is definite to start after offset 200h in its segment
 42178                                  ;
 42179                                  ;----------------------------------------------------------------------------
 42180                                  
 42181                                  ; 23/05/2019 - Retro DOS v4.0
 42182                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 42183                                  
 42184                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42185                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 42186                                  
 42187                                  RScanPattern1:
 42188                                  	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 42189                                  
 42190                                  RLen1 equ $ - RScanPattern1
 42191                                  
 42192                                  RScanPattern2:
 42193                                  	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 42194                                  
 42195                                  RLen2 equ $ - RScanPattern2
 42196                                  
 42197                                  RScanPattern3:
 42198                                  	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 42199                                  
 42200                                  RLen3 equ $ - RScanPattern2
 42201                                  
 42202                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 42203                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 42204                                  
 42205                                  ;----------------------------------------------------------------------------
 42206                                  ;
 42207                                  ; INPUT : ES = segment where program got loaded
 42208                                  ;
 42209                                  ;----------------------------------------------------------------------------
 42210                                  
 42211                                  RationalPatch:
 42212                                  	cld
 42213                                  	push	ax
 42214                                  	push	bx
 42215                                  	push	cx
 42216                                  	push	dx
 42217                                  	push	si
 42218                                  	push	di
 42219                                  	push	es
 42220                                  	push	ds			; we use all of them
 42221                                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 42222                                  	push	cs
 42223                                  	pop	ds
 42224                                  	
 42225                                  	mov	si,RScanPattern1
 42226                                  	;mov	cx,10
 42227                                  	mov	cx,RLen1
 42228                                  	rep	cmpsb			; do we have the pattern ?
 42229                                  	jne	short rpexit
 42230                                  	mov	ax,[es:0]
 42231                                  	cmp	ax,348			; is it a buggy version ?
 42232                                  	jb	short rpexit
 42233                                  	cmp	ax,383			; is it a buggy version
 42234                                  	ja	short rpexit
 42235                                  
 42236                                  	call	VerifyVersion
 42237                                  	jne	short rpexit
 42238                                  
 42239                                  	mov	cx,[es:16h]		; Length of buggy code seg
 42240                                  	sub	cx,200h			; Length we search (we start
 42241                                  					;  at offset 200h)
 42242                                  	mov	es,[es:20h]		; es=buggy code segment
 42243                                  	mov	si,RScanPattern2
 42244                                  	;mov	dx,8	
 42245                                  	mov	dx,RLen2
 42246                                  	call	ScanCodeSeq		; look for code seq with nop
 42247                                  	jz	short rpfound
 42248                                  
 42249                                  	mov	si,RScanPattern3
 42250                                  	;mov	dx,15
 42251                                  	mov	dx,RLen3
 42252                                  	call	ScanCodeSeq		; look for code seq w/o nop
 42253                                  	jnz	short rpexit
 42254                                  
 42255                                  rpfound:
 42256                                  	
 42257                                  ;	we set up a far call into DOS data
 42258                                  ;	dx has the length of the code seq we were searching for
 42259                                  
 42260                                  	mov	al,9Ah			; far call opcode
 42261                                  	stosb
 42262                                  	mov	ax,RatBugCode
 42263                                  	stosw
 42264                                  	mov	ax,ss
 42265                                  	stosw
 42266                                  	mov	cx,dx
 42267                                  	sub	cx,6			; filler (with NOPs)
 42268                                  	mov	al,90h
 42269                                  	rep	stosb
 42270                                  rpexit:
 42271                                  	pop	ds
 42272                                  	pop	es
 42273                                  	pop	di
 42274                                  	pop	si
 42275                                  	pop	dx
 42276                                  	pop	cx
 42277                                  	pop	bx
 42278                                  	pop	ax
 42279                                  	retn
 42280                                  
 42281                                  ; M020 END
 42282                                  
 42283                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42284                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42285                                  
 42286                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 42287                                  
 42288                                  ;----------------------------------------------------------------------------
 42289                                  ;
 42290                                  ; ScanCodeSeq
 42291                                  ;
 42292                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 42293                                  ;
 42294                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 42295                                  ;
 42296                                  ;----------------------------------------------------------------------------
 42297                                  
 42298                                  ScanCodeSeq:
 42299                                  	; 17/12/2022
 42300                                  	mov	di,200h
 42301                                  ;ScanCodeSeq_di:
 42302                                  	push	cx
 42303                                  	sub	cx,dx
 42304                                  	inc	cx
 42305                                  	; 17/12/2022
 42306                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42307                                  	;mov	di,200h
 42308                                  scsagain:
 42309                                  	push	si
 42310                                  	push	di
 42311                                  	push	cx
 42312                                  	mov	cx,dx
 42313                                  	rep	cmpsb
 42314                                  	pop	cx
 42315                                  	pop	di
 42316                                  	pop	si
 42317                                  	je	short scsfound
 42318                                  	inc	di
 42319                                  	loop	scsagain
 42320                                  scsfound:
 42321                                  	pop	cx
 42322                                  vvexit:		; 18/12/2022
 42323                                  	retn
 42324                                  
 42325                                  
 42326                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42327                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42328                                  
 42329                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 42330                                  
 42331                                  ;----------------------------------------------------------------------------
 42332                                  ;
 42333                                  ; VerifyVersion
 42334                                  ;
 42335                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 42336                                  ; from ES:2A.
 42337                                  ;
 42338                                  ;       Entry: AX = binary version number 
 42339                                  ;       Exit : Z flag set if version numbers match
 42340                                  ;
 42341                                  ;----------------------------------------------------------------------------
 42342                                  
 42343                                  VerifyVersion:
 42344                                  	mov	si,[es:2Ah]		; offset of version number
 42345                                  					;  in ascii
 42346                                  	mov	bl,10
 42347                                  	add	si,3			; point to last digit
 42348                                  
 42349                                  	call	VVDigit
 42350                                  	jne	short vvexit
 42351                                  	call	VVDigit
 42352                                  	jne	short vvexit
 42353                                  	cmp	byte [es:si],'.' ; 2Eh
 42354                                  	jne	short vvexit
 42355                                  	dec	si
 42356                                  	;call	VVDigit
 42357                                  	; 18/12/2022
 42358                                  	;jmp	short VVDigit
 42359                                  ;vvexit:
 42360                                  	;retn
 42361                                  VVDigit:
 42362                                  	div	bl
 42363                                  	add	ah,'0' ; 30h
 42364                                  	dec	si
 42365                                  	cmp	[es:si+1],ah
 42366                                  	mov	ah,0			; do not xor or sub we need Z
 42367                                  	retn
 42368                                  
 42369                                  ;--------------------------------------------------------------------------- 
 42370                                  %endif	; 28/12/2022
 42371                                  
 42372                                  ;---------------------------------------------------------------------------
 42373                                  ;
 42374                                  ;	M068
 42375                                  ;
 42376                                  ; 	Procedure Name	: IsCopyProt
 42377                                  ;
 42378                                  ;	Inputs		: DS:100 -> start of com file just read in
 42379                                  ;
 42380                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 42381                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 42382                                  ;			  copy protect scheme that relies on the A20 line
 42383                                  ;			  being turned off for it's scheme to work.
 42384                                  ;
 42385                                  ;			  Note: The int 21 function dispatcher will turn 
 42386                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 42387                                  ;				and dec the A20OFF_COUNT before	iretting 
 42388                                  ;				to the user. 
 42389                                  ;
 42390                                  ;	Uses		: ES, DI, SI, CX
 42391                                  ;
 42392                                  ;---------------------------------------------------------------------------
 42393                                  
 42394                                  ; 23/05/2019 - Retro DOS v4.0
 42395                                  
 42396                                  CPStartOffset	EQU	0175h
 42397                                  CPID1Offset	EQU	011Bh
 42398                                  CPID2Offset	EQU	0173h
 42399                                  CPID3Offset	EQU	0146h
 42400                                  CPID4Offset	EQU	0124h
 42401                                  ID1		EQU	05343h
 42402                                  ID2		EQU	05044h
 42403                                  ID3		EQU	0F413h
 42404                                  ID4		EQU	08000h
 42405                                  
 42406                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 42407                                  
 42408                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42409                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 42410                                  
 42411                                  CPScanPattern:
 42412 00007593 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 42413 00007597 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 42414 0000759B C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 42415 000075A1 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 42416 000075A5 B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 42417 000075A8 BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 42418                                  
 42419                                  CPSPlen	EQU $ - CPScanPattern
 42420                                  
 42421                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 42422                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 42423                                  
 42424                                  IsCopyProt:
 42425 000075AB 813E1B014353            	cmp	word [CPID1Offset],ID1
 42426 000075B1 752D                    	jne	short CP_done
 42427                                  
 42428 000075B3 813E73014450            	cmp	word [CPID2Offset],ID2
 42429 000075B9 7525                    	jne	short CP_done
 42430                                  
 42431 000075BB 813E460113F4            	cmp	word [CPID3Offset],ID3
 42432 000075C1 751D                    	jne	short CP_done
 42433                                  
 42434 000075C3 813E24010080            	cmp	word [CPID4Offset],ID4
 42435 000075C9 7515                    	jne	short CP_done
 42436                                  
 42437 000075CB 0E                      	push	cs
 42438 000075CC 07                      	pop	es
 42439 000075CD BF[9375]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 42440                                  
 42441 000075D0 BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 42442                                  					; of pattern
 42443                                  
 42444 000075D3 B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 42445 000075D6 F3A6                    	repe	cmpsb
 42446 000075D8 7506                    	jnz	short CP_done
 42447                                  
 42448 000075DA 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 42449                                  CP_done:
 42450 000075E0 C3                      	retn
 42451                                  	
 42452                                  ;DOSCODE ENDS
 42453                                  
 42454                                  	;END
 42455                                  
 42456                                  ;----------------------------------------------------------------------------
 42457                                  
 42458                                  ;align 2 ; 05/09/2018 (Error!)
 42459                                  
 42460                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42461                                  ;align 16 ; 08/09/2018 (OK.)
 42462 000075E1 90                      align 2
 42463                                  
 42464                                  ; 06/08/2018 - Retro DOS v3.0
 42465                                  ;============================================================================
 42466                                  ; MSINIT.ASM
 42467                                  ;============================================================================
 42468                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 42469                                  ;
 42470                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 42471                                  ;
 42472                                  	; 15/07/2018 - Retro DOS v3.0
 42473                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 42474                                  
 42475                                  ; temp iret instruction
 42476                                  
 42477                                  
 42478                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42479                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 42480                                  
 42481                                  initiret: ; MSDOS 6.0
 42482                                  SYSBUF:
 42483                                  ;IRETT: ; 06/05/2019
 42484 000075E2 CF                      	iret
 42485                                  
 42486                                  ; 22/04/2019 - Retro DOS v4.0
 42487                                  
 42488                                  ; pointer to the BIOS data segment that will be available just to the
 42489                                  ; initialization code
 42490                                  
 42491 000075E3 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 42492                                  
 42493                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42494                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 42495                                  
 42496                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 42497                                  
 42498                                  ParaRound:
 42499 000075E5 83C00F                  	add	ax, 15
 42500 000075E8 D1D8                    	rcr	ax, 1
 42501 000075EA D1E8                    	shr	ax, 1
 42502 000075EC D1E8                    	shr	ax, 1
 42503 000075EE D1E8                    	shr	ax, 1
 42504 000075F0 C3                      	retn
 42505                                  
 42506                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 42507                                  
 42508                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42509                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 42510                                  	
 42511                                  	; 30/05/2019
 42512                                  	; 22/04/2019 - Retro DOS v4.0
 42513                                  	; 07/07/2018 - Retro DOS v3.0
 42514                                  	; Retro DOS v2.0 - 03/03/2018
 42515                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42516                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 42517                                  DOSINIT:
 42518                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 42519                                  	;
 42520                                  	; Far call from SYSINIT
 42521                                  	; DX = Memory size in paragraphs
 42522                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 42523                                  	;	  (Retro DOS v2.0, 16/03/2018)
 42524                                  	;
 42525                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 42526                                  	;	  (Retro DOS v4.0, 20/04/2019)
 42527                                  
 42528 000075F1 FA                              CLI
 42529 000075F2 FC                              CLD
 42530                                  
 42531                                  	; 03/11/2022
 42532                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 42533                                  	
 42534                                  	; 17/12/2022
 42535                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42536                                  	;push	dx ; =*=		; save parameters from BIOS
 42537                                  	
 42538 000075F3 56                      	push	si
 42539 000075F4 1E                      	push	ds
 42540 000075F5 57                      	push	di			;save di (ptr to BiosComBlock)
 42541                                  
 42542 000075F6 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 42543                                  
 42544                                  ; First, move the DOS data segment to its final location in low memory
 42545                                  
 42546                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 42547                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h	
 42548 000075F8 B8[727A]                	mov	ax,MEMSTRT		; get offset of end of init code
 42549                                  
 42550                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 42551                                  	;and	ax,~15	; 0FFF0h	; boundary
 42552                                  
 42553                                  	;mov	si,ax			; si = offset of DOSDATA in current 
 42554                                  					; code segment
 42555                                  
 42556                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42557 000075FB 83C00F                  	add	ax,15			; round to nearest paragraph
 42558 000075FE 83E0F0                  	and	ax,~15			; boundary
 42559                                  
 42560 00007601 89C6                    	mov	si,ax			; si = offset of DOSDATA in current 
 42561                                  					; code segment
 42562                                  	; 05/12/2022
 42563                                  	; 30/04/2019 - Retro DOS v4.0
 42564                                  	;xor	si,si
 42565                                  	
 42566 00007603 8CC8                    	mov	ax,cs
 42567 00007605 8ED8                    	mov	ds,ax			; ds = current code segment
 42568                                  					; DS:SI now points to dosdata
 42569                                  
 42570                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 42571                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 42572                                  					;  BData segment. Cannot use
 42573                                  					;  getdseg macro here!!!
 42574                                  	; 17/12/2022
 42575 00007607 8E06[E375]              	mov	es,[InitBioDataSeg]
 42576                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42577                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 42578                                  
 42579                                  	;mov	es,[es:3]
 42580 0000760B 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 42581                                  
 42582 00007610 31FF                    	xor	di,di			; ES:DI now points to RAM data
 42583                                  
 42584                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 42585                                  	;mov	cx,4976  ; 25/05/2019
 42586                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42587                                  	;mov	cx,4962
 42588                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 42589 00007612 B9AA12                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 42590 00007615 F3A4                    	rep	movsb			; move data to final location
 42591                                  	
 42592 00007617 5F                      	pop	di			; restore ptr to BiosComBlock
 42593 00007618 1F                      	pop	ds			; restore parms from BIOS
 42594 00007619 5E                      	pop	si
 42595                                  	; 17/12/2022
 42596                                  	;pop	dx ; 30/05/2019	
 42597                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42598                                  	;pop	dx ; =*=		
 42599                                  
 42600 0000761A 06                      	push	es
 42601 0000761B 1E                      	push	ds
 42602 0000761C 07                      	pop	es			; es:si -> device chain
 42603 0000761D 1F                      	pop	ds			; ds points to dosdata
 42604                                  
 42605                                  ;SR;
 42606                                  ;We get a ptr to the BIOS exchange data block. This has been setup right 
 42607                                  ;now so that the EXEC call knows when SysInit is present to do the special
 42608                                  ;lie table handling for device drivers. This can be expanded later on to
 42609                                  ;establish a communication block from the BIOS to the DOS.
 42610                                  
 42611                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 42612                                  	;mov	[1042h],bx
 42613 0000761E 893E[4010]              	mov	[BiosDataPtr],di
 42614 00007622 891E[4210]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 42615                                  
 42616 00007626 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 42617                                  
 42618                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 42619                                  
 42620 0000762B 2E8C1E[DA4F]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 42621 00007630 2E8C1E[DE4F]            	mov	[cs:LowInt24Addr+2],ds
 42622 00007635 2E8C1E[E24F]            	mov	[cs:LowInt28Addr+2],ds
 42623                                  
 42624                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 42625                                  	;mov	[584h],sp
 42626                                  	;mov	[586h],ss
 42627 0000763A 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 42628 0000763E 8926[8405]              	mov	[USER_SP],sp
 42629 00007642 8C16[8605]              	mov	[USER_SS],ss
 42630                                  
 42631 00007646 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 42632 00007648 8ED0                    	mov	ss,ax
 42633                                  
 42634                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 42635                                  	;mov	sp,offset dosdata:dskstack
 42636 0000764A BC[2009]                	mov	sp,DSKSTACK
 42637                                  
 42638                                  ;M023
 42639                                  ; Init patch ptrs to default values
 42640                                  
 42641                                  	;mov	word [1212h],RetExePatch
 42642                                  	;mov	word [1214h],RetExePatch
 42643                                  	;mov	word [61h],RetExePatch
 42644 0000764D C706[F811][4C61]        	mov	word [FixExePatch],RetExePatch	; M023
 42645                                  	; 28/12/2022 - Retro DOS v4.1
 42646                                  	;mov	word [RationalPatchPtr],RetExePatch ; M023
 42647 00007653 C706[6100][4C61]        	mov	word [ChkCopyProt],RetExePatch	; M068
 42648                                  
 42649                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42650                                  %if 0	
 42651                                  
 42652                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 42653                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 42654                                  ; running in the HMA.
 42655                                  
 42656                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 42657                                  	cmp	al,2		;   386 or later?
 42658                                  	mov	ax,Rational386Patch
 42659                                  	jae	short di_set_patch
 42660                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 42661                                  di_set_patch:
 42662                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 42663                                  
 42664                                  %endif
 42665                                  	; Set up the variable temp_dosloc to point to the dos code segment
 42666                                  
 42667 00007659 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 42668                                  
 42669                                  	; ax now holds segment of DOS code
 42670 0000765B A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 42671                                  
 42672 0000765E 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 42673 00007662 8936[4800]              	mov	word [NULDEV],si
 42674                                  ;SR;
 42675                                  ; There are some locations in the Win386 instance data structures
 42676                                  ; which need to be set up with the DOS data segment. First, initialize
 42677                                  ; the segment part of the instance table pointer in the SIS.
 42678                                  
 42679                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]	
 42680 00007666 8C1E[F20F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 42681                                  
 42682                                  ; Now initialize the segment part of the pointer to the data in each
 42683                                  ; instance table entry.
 42684                                  
 42685 0000766A 56                      	push	si		; preserve pointer to device chain
 42686                                  	; 18/12/2022
 42687                                  	; cx = 0
 42688 0000766B B107                    	mov	cl,7
 42689                                  	;mov	cx,7		; There are 7 entries in the instance table
 42690                                  				; M019
 42691                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 42692 0000766D BE[F60F]                	mov	si,Instance_Table+2 ; point si to segment field
 42693                                  Instance_init_loop:
 42694 00007670 8C1C                    	mov	[si],ds		; set offset in instance entry
 42695                                  	;add	si,6
 42696 00007672 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 42697 00007675 E2F9                    	loop	Instance_init_loop
 42698                                  
 42699                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 42700                                  
 42701                                  	; 18/12/2022
 42702 00007677 B105                    	mov	cl,5
 42703                                  	;mov	cx,5		; There are five entries in the instance table
 42704                                  
 42705                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 42706                                  	;mov	si,11EDh	; point si to segment field
 42707 00007679 BE[D311]                	mov	si,OldInstanceJunk+6
 42708                                  OldInstance_init_loop:
 42709 0000767C 8C1C                    	mov	[si],ds		; set offset in instance entry
 42710 0000767E 83C606                  	add	si,6		; move on to next entry
 42711 00007681 E2F9                    	loop	OldInstance_init_loop
 42712 00007683 5E                      	pop	si		; restore pointer to device chain
 42713                                  
 42714                                  ; End of WIN386 2.xx compatibility bullshit
 42715                                  
 42716                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42717                                  %if 0	
 42718                                     	; 30/04/2019
 42719                                  	;push	es
 42720                                  	;pop	ds
 42721                                  			; ds:si points to console device
 42722                                  
 42723                                  	; 24/04/2019 - Retro DOS v4.0
 42724                                  
 42725                                  	; 15/07/2018
 42726                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 42727                                  	; (Set INT 2Ah handler address to an 'IRET')
 42728                                  
 42729                                  	; need crit vector inited to use deviocall
 42730                                  	;push	ds			; preserve segment of device chain
 42731                                  	push	es ; 30/04/2019
 42732                                  
 42733                                  %endif
 42734                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42735 00007684 06                      	push	es
 42736                                  	; 17/12/2022
 42737                                  	;pop	ds
 42738                                  	;push	ds
 42739                                  
 42740 00007685 31C0                    	xor	ax,ax
 42741 00007687 8ED8                    	mov	ds,ax			; point DS to int vector table
 42742 00007689 B8[E275]                	mov	ax,initiret
 42743                                  	;mov	[0A8h],ax  ; [2Ah*4]
 42744 0000768C A3A800                  	mov	[addr_int_ibm],ax
 42745 0000768F 8CC8                    	mov	ax,cs
 42746                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2] 		
 42747 00007691 A3AA00                  	mov	[addr_int_ibm+2],ax
 42748 00007694 1F                      	pop	ds			; restore segment of device chain
 42749                                  
 42750 00007695 E81C02                  	call	CHARINIT  		; initialize console driver
 42751 00007698 56                      	push	si			; save pointer to header
 42752                                  
 42753 00007699 16                      	push	ss			; move pointer to dos data...
 42754 0000769A 07                      	pop	es			; ...into ES
 42755                                  
 42756                                  	;initialize sft for file 0 (CON)
 42757                                  
 42758                                          ; 07/07/2018 - Retro DOS v3.0
 42759                                  	; 24/04/2019 - Retro DOS v4.0
 42760                                  	;mov	di,SFTABL+6 
 42761 0000769B BF[D200]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 42762 0000769E B80300                          MOV     AX,3
 42763 000076A1 AB                              STOSW           	; Refcount
 42764 000076A2 FEC8                            DEC     AL
 42765 000076A4 AB                              STOSW           	; Access rd/wr, compatibility
 42766 000076A5 30C0                            XOR     AL,AL
 42767 000076A7 AA                              STOSB           	; attribute
 42768                                  	;mov	al,0C3h
 42769 000076A8 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 42770 000076AA AB                      	STOSW			; flags
 42771 000076AB 89F0                            mov	ax,si
 42772 000076AD AB                              stosw			; device pointer in devptr	
 42773 000076AE 8CD8                            mov	ax,ds
 42774 000076B0 AB                      	stosw
 42775 000076B1 31C0                    	xor	ax,ax	; 0
 42776 000076B3 AB                      	stosw			; firclus
 42777 000076B4 AB                      	stosw			; time
 42778 000076B5 AB                      	stosw			; date
 42779 000076B6 48                      	dec	ax	; -1
 42780 000076B7 AB                      	stosw			; size
 42781 000076B8 AB                      	stosw
 42782 000076B9 40                      	inc	ax	; 0
 42783 000076BA AB                      	stosw			; position
 42784 000076BB AB                      	stosw
 42785                                  	;add	di,7
 42786 000076BC 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 42787                                  				; point at name
 42788                                  	;add	si,10
 42789 000076BF 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 42790                                  				; point to name
 42791 000076C2 B90400                  	mov	cx,4
 42792 000076C5 F3A5                    	rep	movsw		; name
 42793 000076C7 B103                    	mov	cl,3
 42794 000076C9 B020                    	mov	al," "
 42795 000076CB F3AA                    	rep	stosb		; extension
 42796                                  
 42797 000076CD 5E                      	pop	si		; get back pointer to header
 42798                                  
 42799                                  				; mark device as CON I/O
 42800                                  	; 15/07/2018
 42801                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 42802 000076CE 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 42803                                  	; 12/03/2018
 42804                                  	;mov	[ss:32h],si
 42805 000076D2 368936[3200]            	MOV     [SS:BCON],SI
 42806                                  	;mov	[ss:34h],ds
 42807 000076D7 368C1E[3400]                    MOV     [SS:BCON+2],DS
 42808                                  
 42809                                  	; initialize each device until the clock device is found
 42810                                  
 42811                                  CHAR_INIT_LOOP:
 42812 000076DC C534                            LDS     SI,[SI]			; AUX device
 42813 000076DE E8D301                  	call	CHARINIT 
 42814                                         	;15/07/2018
 42815                                  	;test	byte [SI+4],8
 42816 000076E1 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 42817 000076E5 74F5                            JZ      SHORT CHAR_INIT_LOOP
 42818                                  	; 12/03/2018
 42819                                  	;mov	[ss:2Eh],si
 42820 000076E7 368936[2E00]                    MOV     [SS:BCLOCK],SI
 42821                                  	;mov	[ss:30h],ds
 42822 000076EC 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 42823                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 42824                                  
 42825                                  	;mov	bp,4970			; bp = pointer to free mem
 42826                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 42827                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 42828                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 42829 000076F1 BDAA12                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 42830                                  
 42831 000076F4 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 42832 000076F9 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 42833                                  PERDRV:
 42834                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 42835 000076FE C534                            LDS	SI,[SI]			; Next device
 42836 00007700 83FEFF                          CMP	SI,-1	; 0FFFFh
 42837 00007703 7479                    	JZ	SHORT CONTINIT
 42838                                  
 42839 00007705 E8AC01                          call	CHARINIT
 42840                                  
 42841                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 42842                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 42843                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 42844                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 42845                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 42846                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 42847                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 42848                                  
 42849                                          ; 15/07/2018
 42850                                  	;test	word [SI+4],8000h		; DEVTYP
 42851                                          ; 17/12/2022
 42852                                  	;test	byte [SI+5],80h
 42853 00007708 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 42854                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 42855 0000770C 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 42856                                  
 42857 0000770E 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 42858 00007713 30ED                    	XOR     CH,CH
 42859                                          ; 07/07/2018
 42860                                  	;MOV	[SI+10],CL		; Number of units in name field
 42861 00007715 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 42862 00007718 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 42863 0000771D 30F6                    	XOR     DH,DH
 42864 0000771F 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 42865 00007724 1E                      	PUSH    DS
 42866 00007725 56                              PUSH    SI
 42867 00007726 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 42868                                  
 42869                                  PERUNIT:
 42870 0000772B 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 42871 0000772D 43                              INC     BX
 42872 0000772E 43                              INC     BX                      ; On to next BPB
 42873                                  	; 15/12/2022
 42874                                  	; 07/07/2018
 42875                                          ;mov	[ES:BP+DPB.DRIVE],DL
 42876 0000772F 26885600                	MOV     [ES:BP],DL
 42877                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42878                                  	;;mov	[ES:BP+0],DL
 42879                                  	;mov	[ES:BP+DPB.DRIVE],DL
 42880                                  
 42881                                  	;MOV	[ES:BP+1],DH
 42882 00007733 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 42883 00007737 53                              PUSH    BX
 42884 00007738 51                              PUSH    CX
 42885 00007739 52                              PUSH    DX
 42886                                  
 42887                                          ;invoke	$SETDPB
 42888 0000773A E87E98                          CALL	_$SETDPB		; build DPB!
 42889                                  
 42890                                  	; 07/07/2018
 42891                                  	;MOV	AX,[ES:BP+2]
 42892 0000773D 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 42893                                          ; 12/03/2018
 42894 00007741 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 42895 00007746 7604                    	JBE     SHORT NOTMAX		; N:
 42896 00007748 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 42897                                  NOTMAX:					
 42898                                  	; set the next dpb field in the currently built bpb
 42899                                  	; and mark as never accessed
 42900                                          
 42901                                  	; 24/04/2019
 42902 0000774C 89E8                    	mov	ax,bp			; get pointer to DPB
 42903                                  	;add	ax,33
 42904 0000774E 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 42905                                  					; set seg & offset of next DPB
 42906                                  	;mov	[es:bp+25],ax
 42907 00007751 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 42908                                  	;mov	[es:bp+27],es
 42909 00007755 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 42910                                  					; mark as never accessed
 42911                                  	;mov	byte [es:bp+24],0FFh
 42912 00007759 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 42913                                  
 42914 0000775E 5A                      	POP     DX
 42915 0000775F 59                              POP     CX
 42916 00007760 5B                              POP     BX
 42917 00007761 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 42918 00007763 5E                              POP     SI
 42919 00007764 1F                              POP     DS
 42920                                  					; ds:si -> device header
 42921                                  					; store it in the corresponding dpb
 42922                                  	; 07/07/2018
 42923                                          ;MOV	[ES:BP+19],SI ; 24/04/2019
 42924 00007765 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 42925                                          ;MOV	[ES:BP+21],DS ; 24/04/2019
 42926 00007769 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 42927                                  
 42928 0000776D 1E                              PUSH    DS			; save pointer to device header
 42929 0000776E 56                              PUSH    SI
 42930 0000776F FEC6                            INC     DH			; inc unit #
 42931 00007771 FEC2                            INC     DL			; inc drive #
 42932 00007773 8ED8                            MOV     DS,AX			; restore segment of BPB array
 42933                                          ;add	bp,33 ; 24/04/2019
 42934 00007775 83C521                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 42935 00007778 E2B1                    	LOOP    PERUNIT			; process all units in each driver
 42936                                          
 42937 0000777A 5E                      	POP     SI			; restore pointer to device header
 42938 0000777B 1F                              POP     DS
 42939 0000777C EB80                    	JMP	PERDRV			; process all drivers in chain
 42940                                  
 42941                                  CONTINIT:
 42942                                  	; 24/04/2019
 42943                                  	;sub	bp,33			; set link in last DPB to -1
 42944 0000777E 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 42945                                  					; set last link offset & segment
 42946                                  	;mov	word [bp+25],0FFFFh
 42947 00007781 C74619FFFF              	mov	word [bp+DPB.NEXT_DPB],-1
 42948                                  	;mov	word [bp+27],0FFFFh
 42949 00007786 C7461BFFFF              	mov	word [bp+DPB.NEXT_DPB+2],-1
 42950                                  	;add	bp,33
 42951 0000778B 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 42952                                  					; the DPB chain is done.  
 42953 0000778E 16                      	push	ss
 42954 0000778F 1F                      	pop	ds
 42955                                  
 42956 00007790 89E8                    	mov	ax,bp
 42957 00007792 E850FE                  	call	ParaRound		; round up to segment
 42958                                  
 42959 00007795 8CDA                    	mov	dx,ds			; dx = dosdata segment
 42960 00007797 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 42961                                  
 42962 00007799 BB0F00                  	mov	bx,0Fh
 42963                                  	
 42964                                  	; 24/05/2019
 42965                                  	;mov	cx,[ENDMEM]
 42966                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42967                                  	; 17/12/2022
 42968                                  	;mov	cx,[ENDMEM] 
 42969                                  					; set seg inpacketto dosdata					
 42970 0000779C 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds 
 42971                                  
 42972                                  ; Patch in the segments of the interrupt vectors with current code segment.
 42973                                  ; Also patch in the segment of the pointers in the dosdata area.
 42974                                  ;
 42975                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 42976                                  ; calls were done. The procedure patch_misc_segments is called multiple
 42977                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 42978                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 42979                                  
 42980 000077A0 52                      	push	dx			; preserve first free segment
 42981                                  
 42982 000077A1 A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 42983 000077A4 8EC0                    	mov	es,ax			; es = segment of DOS
 42984 000077A6 C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 42985                                  
 42986 000077AC E8AF01                  	call	patch_vec_segments	; uses AX as doscode segment
 42987 000077AF E8E401                  	call	patch_misc_segments	; patch in segments for sharer and 
 42988                                  					; other tables with seg in ES.
 42989                                  	; 17/12/2022
 42990                                  	; cx = 0
 42991 000077B2 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 42992                                  
 42993 000077B6 5A                      	pop	dx			; restore first free segment
 42994                                  
 42995                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 42996                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 42997                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 42998                                  ; low_mem_stub by seg_reinit.
 42999                                  
 43000                                  	;xor	ax,ax ; 0
 43001                                  	;mov	ds,ax
 43002                                  	;mov	es,ax
 43003                                  	; 17/12/2022
 43004                                  	; cx = 0
 43005                                  	;xor	cx,cx ; 0
 43006 000077B7 8ED9                    	mov	ds,cx
 43007 000077B9 8EC1                    	mov	es,cx
 43008                                  
 43009                                  	; set the segment of int 24 vector that was 
 43010                                  	; left out by patch_vec_segments above.
 43011                                  
 43012                                  	; 17/12/2022
 43013                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43014                                  ;%if 0
 43015                                  	; 24/05/2019
 43016                                  	;;mov	di,90h
 43017                                  	;;mov	di,4*int_fatal_abort
 43018                                  	;mov	di,addr_int_fatal_abort
 43019 000077BB BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 43020                                  
 43021 000077BE 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 43022                                  	;mov	[di+2],ax  ; int 24h segment
 43023 000077C2 8905                    	mov	[di],ax ; 24/05/2019
 43024                                  
 43025                                  	;;mov	di,82h
 43026                                  	;mov	di,INTBASE+2
 43027                                  
 43028                                  ;%endif
 43029                                  	; 17/12/2022
 43030                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43031                                  	;;mov	di,90h
 43032                                  	;;mov	di,4*int_fatal_abort
 43033                                  	;mov	di,addr_int_fatal_abort
 43034                                  	;mov	ax,[ss:TEMP_DOSLOC]
 43035                                  	;mov	[di+2],ax  ; int 24h segment
 43036                                  	;;mov	di,82h
 43037                                  	;mov	di,INTBASE+2
 43038                                  
 43039                                  	; set default divide trap offset
 43040                                  
 43041                                  	;mov	word ptr ds:[0],offset doscode:divov
 43042 000077C4 C7060000[B551]          	mov	word [0],DIVOV	
 43043                                  
 43044                                  	; set vectors 20-28 and 2a-3f to point to iret.
 43045                                  
 43046                                  	;mov	di,80h
 43047 000077CA BF8000                  	mov	di,INTBASE
 43048                                  	;mov	ax,offset doscode:irett
 43049 000077CD B8[E102]                	mov	ax,IRETT
 43050                                  
 43051                                  	; 17/12/2022
 43052                                  	; cx = 0
 43053 000077D0 B109                    	mov	cl,9
 43054                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 43055                                  					;   sets offsets for ints 20h-28h
 43056                                  iset1:
 43057 000077D2 AB                      	stosw
 43058                                  	;add	di,2
 43059                                  	; 20/06/2023
 43060 000077D3 47                      	inc	di
 43061 000077D4 47                      	inc	di
 43062 000077D5 E2FB                    	loop	iset1
 43063                                  
 43064 000077D7 83C704                  	add	di,4			; skip vector 29h
 43065                                  
 43066                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 43067                                  ;					;   sets offsets for ints 2ah-2fh
 43068                                  ;iset2:
 43069                                  ;	stosw
 43070                                  ;	add	di,2
 43071                                  ;	loop	iset2
 43072                                  
 43073                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 43074                                  ; patch_vec_segments above. So skip it.
 43075                                  
 43076                                  ;	add	di,8			; skip vector 30h & 31h 
 43077                                  
 43078                                  	;;;
 43079                                  	; 06/05/2019 - Retro DOS v4.0
 43080                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 43081                                  	; 17/12/2022
 43082 000077DA B105                    	mov	cl,5 ; 28/06/2019
 43083                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43084                                  	;mov	cx,6
 43085                                  iset2:
 43086 000077DC AB                      	stosw
 43087                                  	;add	di,2
 43088                                  	; 20/09/2023
 43089 000077DD 47                      	inc	di
 43090 000077DE 47                      	inc	di	
 43091 000077DF E2FB                    	loop	iset2
 43092                                  
 43093                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43094                                  	; 17/12/2022
 43095 000077E1 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 43096                                  	;add	di,8
 43097                                  	;;;
 43098                                  
 43099                                  	; 17/12/2022
 43100 000077E4 B10E                    	mov	cl,14
 43101                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 43102                                  					;   sets offsets for ints 32h-3fh
 43103                                  iset3:
 43104 000077E6 AB                      	stosw
 43105                                  	;add	di,2
 43106                                  	; 20/09/2023
 43107 000077E7 47                      	inc	di
 43108 000077E8 47                      	inc	di
 43109 000077E9 E2FB                    	loop	iset3
 43110                                  
 43111                                  ;if installed
 43112                                  	; set the offset of int2f handler
 43113                                  	;mov	word [0BCh],INT2F
 43114 000077EB C706BC00[0707]          	mov	word [02Fh*4],INT2F
 43115                                  	; set segment to doscode as we have to do int 2f to check for XMS
 43116 000077F1 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 43117                                  	;mov	[0BEh],ax
 43118 000077F5 A3BE00                  	mov	[(02Fh*4)+2],ax
 43119                                  ;endif
 43120                                  	; set up entry point call at vectors 30-31h. Note the segment of the 
 43121                                  	; long jump will be patched in by seg_reinit
 43122                                  
 43123                                  	;mov	byte [C0h],0EAh
 43124 000077F8 C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 43125                                  	;mov	byte [C1h],CALL_ENTRY
 43126 000077FD C706C100[E202]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 43127                                  
 43128 00007803 C7068000[DB02]          	mov	word [addr_int_abort],QUIT	; INT 20h
 43129 00007809 C7068400[0703]          	mov	word [addr_int_command],COMMAND ; INT 21h
 43130 0000780F C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 43131 00007815 89168A00                	mov	word [addr_int_terminate+2],dx	
 43132 00007819 C7069400[3105]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 43133 0000781F C7069800[B805]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 43134 00007825 C7069C00[EF60]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 43135                                  
 43136 0000782B 16                      	push	ss
 43137 0000782C 1F                      	pop	ds
 43138                                  	
 43139                                  	; 24/05/2019
 43140                                  	;push	ss
 43141                                  	;pop	es
 43142                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43143                                  	; 17/12/2022
 43144                                  	;push	ss
 43145                                  	;pop	es
 43146                                  
 43147 0000782D 52                      	push	dx			; remember address of arena
 43148                                  
 43149 0000782E 42                      	inc	dx			; leave room for arena header
 43150                                  	;mov	[330h],dx
 43151 0000782F 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 43152                                  
 43153 00007833 31FF                    	xor	di,di			; point es:di at end of memory
 43154 00007835 8EC2                    	mov	es,dx			; ...where psp will be
 43155 00007837 31C0                    	xor	ax,ax
 43156                                  	;mov	cx,80h			; psp is 128 words
 43157                                  	; 17/12/2022
 43158 00007839 B180                    	mov	cl,128 ; 28/06/2019
 43159                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43160                                  	;mov	cx,128
 43161                                  
 43162 0000783B F3AB                    	rep	stosw			; zero out psp area
 43163 0000783D A1[4603]                        mov     ax,[ENDMEM]
 43164                                  	
 43165                                  	; 17/12/2022
 43166                                  	; cx = 0
 43167 00007840 E8C698                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 43168                                  
 43169                                  	; ds, es now point to PSP
 43170                                  
 43171 00007843 16                      	push	ss
 43172 00007844 1F                      	pop	ds
 43173                                  
 43174                                  	;mov	di,24
 43175 00007845 BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 43176 00007848 31C0                    	xor	ax,ax
 43177 0000784A AB                      	stosw
 43178 0000784B AA                      	stosb				; 0,1 and 2 are con device
 43179 0000784C B0FF                    	mov	al,0FFh
 43180                                  	;mov	cx,FILPERPROC-3 ; 17
 43181                                  	; 17/12/2022
 43182                                  	; cx = 4
 43183 0000784E B111                    	mov	cl,FILPERPROC-3 ; 17
 43184 00007850 F3AA                    	rep	stosb			; rest are unused
 43185                                  
 43186 00007852 16                      	push	ss
 43187 00007853 07                      	pop	es
 43188                                  					; must be set to print messages
 43189 00007854 8C1E[2C00]              	mov	[SFT_ADDR+2],ds     
 43190                                  
 43191                                  ; after this point the char device functions for con will work for
 43192                                  ; printing messages
 43193                                  
 43194                                  	; 24/04/2019 - Retro DOS v4.0
 43195                                  
 43196                                  ; 12/05/2019
 43197                                  ;
 43198                                  ;write_version_msg:
 43199                                  ;
 43200                                  ;	;if	(not ibm)
 43201                                  ;	;mov	si,offset doscode:header
 43202                                  ;	mov	si,HEADER
 43203                                  ;outmes:
 43204                                  ;	;lods	cs:byte ptr [si]
 43205                                  ;	cs
 43206                                  ;	lodsb
 43207                                  ;	cmp	al,"$"
 43208                                  ;	je	short outdone
 43209                                  ;	call	OUTT
 43210                                  ;	jmp	short outmes
 43211                                  ;outdone:
 43212                                  ;	push	ss			; out stomps on segments
 43213                                  ;	pop	ds
 43214                                  ;	push	ss
 43215                                  ;	pop	es
 43216                                  ;	;endif
 43217                                  
 43218                                  	; at this point es is dosdata
 43219                                  
 43220                                  	; Fill in the segment addresses of sysinitvar and country_cdpg 
 43221                                  	; in sysinittable (ms_data.asm)
 43222                                  
 43223                                  	;mov	si,0D28h
 43224 00007858 BE[280D]                	mov	si,SysInitTable
 43225                                  
 43226                                  	; 17/12/2022
 43227                                  	; ds = es = ss
 43228                                  
 43229                                  	; 17/12/2022
 43230                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43231                                  ;%if 0
 43232                                  	;;mov	[es:si+6],es
 43233                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43234                                  	;;mov	[es:si+2],es
 43235                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43236                                  	
 43237 0000785B 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 43238 0000785E 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 43239                                  
 43240                                  	; buffhead -> dosdata:hashinitvar 
 43241                                  
 43242                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43243 00007861 8C06[3A00]              	mov	[BUFFHEAD+2],es
 43244                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43245                                  	;mov	si,6Dh
 43246 00007865 BE[6D00]                	mov	si,HASHINITVAR
 43247                                  	;mov	[es:BUFFHEAD],si
 43248 00007868 8936[3800]              	mov	[BUFFHEAD],si
 43249                                  
 43250 0000786C 5A                              pop     dx                      ; restore address of arena
 43251                                  
 43252                                  	;mov	[032Ch+2],dx
 43253 0000786D 8916[2E03]                      mov     [DMAADD+2],dx
 43254                                  
 43255                                  	;mov	[es:arena_head],dx
 43256 00007871 8916[2400]              	mov	[arena_head],dx
 43257                                  
 43258                                  ;%endif
 43259                                  
 43260                                  ; 17/12/2022
 43261                                  %if 0
 43262                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43263                                  	;;;
 43264                                  	;mov	[es:si+6],es
 43265                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43266                                  	;mov	[es:si+2],es
 43267                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43268                                  
 43269                                  	; buffhead -> dosdata:hashinitvar 
 43270                                  
 43271                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43272                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43273                                  	;mov	si,6Dh
 43274                                  	mov	si,HASHINITVAR
 43275                                  	mov	[es:BUFFHEAD],si
 43276                                  
 43277                                          pop     dx                      ; restore address of arena
 43278                                  
 43279                                  	;mov	[032Ch+2],dx
 43280                                          mov     [DMAADD+2],dx
 43281                                  
 43282                                  	mov	[es:arena_head],dx
 43283                                  	;;;
 43284                                  %endif
 43285                                  
 43286 00007875 8EDA                            mov     ds,dx
 43287                                  
 43288                                  	;mov	byte [0],'Z'
 43289 00007877 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 43290                                          ;mov	word [1],0
 43291 0000787C C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 43292                                  
 43293 00007882 36A1[4603]                      mov     ax,[ss:ENDMEM]
 43294 00007886 29D0                    	sub	ax,dx
 43295 00007888 48                              dec     ax
 43296 00007889 A30300                          mov     [ARENA.SIZE],ax
 43297                                  
 43298                                  	; point to sft 0
 43299                                  
 43300                                  	;mov	di,offset dosdata:sftabl + sftable
 43301                                  	;mov	di,SFTABL+6
 43302 0000788C BF[D200]                	mov	di,SFTABL+SFT.SFTable
 43303 0000788F B80300                          mov     ax,3
 43304 00007892 AB                              stosw           		; adjust refcount
 43305                                  
 43306                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 43307                                  
 43308                                          ;mov	di,offset dosdata:sysinittable
 43309                                  	;mov	di,0D28h
 43310 00007893 BF[280D]                	mov	di,SysInitTable	
 43311                                  
 43312 00007896 42                      	inc	dx			; advance dx from arena to psp
 43313 00007897 8EDA                    	mov	ds,dx			; point ds to psp
 43314                                  
 43315                                  					; pass the address os seg_reinit 
 43316                                  					; in dx
 43317 00007899 BA[0779]                	mov	dx,seg_reinit
 43318 0000789C B9[2A73]                	mov	cx,exepatch_start
 43319 0000789F 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 43320                                  
 43321 000078A3 B8[E275]                	mov	ax,SYSBUF
 43322 000078A6 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 43323                                  	
 43324 000078A9 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 43325 000078AE 368E16[8605]                    mov     ss,[ss:USER_SS]
 43326                                  
 43327 000078B3 CB                              retf
 43328                                  
 43329                                  ;
 43330                                  ; END OF DOSINIT
 43331                                  ;
 43332                                  ;--------------------------------------------------------------------------
 43333                                  
 43334                                  CHARINIT:
 43335                                  	; 24/04/2019 - Retro DOS v4.0
 43336                                  	; 07/07/2018 - Retro DOS v3.0
 43337                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 43338 000078B4 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 43339                                  	;mov	byte [ss:035Bh],0
 43340 000078BA 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 43341                                  	;mov	byte [ss:035Ch],0
 43342 000078C0 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 43343                                  	;mov	word [ss:035BD],0
 43344 000078C6 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 43345 000078CD 06                              PUSH	ES
 43346 000078CE 53                              PUSH	BX
 43347 000078CF 50                              PUSH	AX
 43348 000078D0 BB[5A03]                        MOV	BX,DEVCALL
 43349                                          ;PUSH	CS
 43350 000078D3 16                      	PUSH	SS ; 30/04/2019
 43351 000078D4 07                              POP	ES
 43352 000078D5 E8B8CC                          CALL	DEVIOCALL2	
 43353 000078D8 58                      	POP	AX
 43354 000078D9 5B                              POP	BX
 43355 000078DA 07                              POP	ES
 43356 000078DB C3                              RETN
 43357                                  
 43358                                  ; 25/04/2019 - Retro DOS v4.0
 43359                                  
 43360                                  ;-----------------------------------------------------------------------------
 43361                                  ;
 43362                                  ;	check_XMM: routine to check presence of XMM driver
 43363                                  ;
 43364                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 43365                                  ;
 43366                                  ;	USED:	none
 43367                                  ;
 43368                                  ;-----------------------------------------------------------------------------
 43369                                  
 43370                                  check_XMM: ; proc near
 43371                                  ;
 43372                                  ; determine whether or not an XMM driver is installed
 43373                                  ;
 43374 000078DC 50                      	push	ax
 43375                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 43376 000078DD B80043                  	mov	ax,4300h
 43377 000078E0 CD2F                    	int	2Fh
 43378                                  		; - Multiplex - XMS - INSTALLATION CHECK
 43379                                  		; Return: AL = 80h XMS driver installed
 43380                                  		; AL <> 80h no driver
 43381 000078E2 3C80                    	cmp	al,80h			; Q: installed
 43382 000078E4 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 43383                                  ;
 43384                                  ; get the XMM control functions entry point, save it, we
 43385                                  ; need to call it later.
 43386                                  ;
 43387 000078E6 53                      	push	bx
 43388 000078E7 52                      	push	dx
 43389 000078E8 1E                      	push	ds
 43390 000078E9 06                      	push	es
 43391                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 43392 000078EA B81043                  	mov	ax,4310h
 43393 000078ED CD2F                    	int	2Fh
 43394                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 43395                                  		; Return: ES:BX -> driver entry point
 43396                                  
 43397 000078EF 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 43398                                  
 43399 000078F4 891E[4911]              	mov	[XMMcontrol],bx
 43400 000078F8 8C06[4B11]              	mov	[XMMcontrol+2],es
 43401                                  cXMMexit:
 43402 000078FC F8                      	clc
 43403 000078FD 07                      	pop	es
 43404 000078FE 1F                      	pop	ds
 43405 000078FF 5A                      	pop	dx
 43406 00007900 5B                      	pop	bx
 43407 00007901 58                      	pop	ax
 43408 00007902 C3                      	retn				; done
 43409                                  ;
 43410                                  ; set carry if XMM driver not present
 43411                                  ;
 43412                                  cXMM_no_driver:
 43413 00007903 F9                      	stc
 43414 00007904 58                      	pop	ax
 43415 00007905 C3                      	retn
 43416                                  
 43417                                  ;-----------------------------------------------------------------------------
 43418                                  ;
 43419                                  ; Procedure Name : seg_reinit
 43420                                  ;
 43421                                  ; Inputs	 : ES has final dos code location
 43422                                  ;		   AX = 0 / 1
 43423                                  ;
 43424                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 43425                                  ;		   if AX =0
 43426                                  ;		      if first entry
 43427                                  ;			 patch segment & offset of vectors with stub
 43428                                  ;			 and stub with segment in ES
 43429                                  ;		      else
 43430                                  ;			 patch stub with segment in ES
 43431                                  ;
 43432                                  ;		   else if AX = 1
 43433                                  ;			patch segment of vectors with segment in ES	
 43434                                  ;
 43435                                  ; NOTE		 : This routine can be called at most twice!
 43436                                  ;
 43437                                  ; Regs Mod.	 : es, ax, di, cx, bx
 43438                                  ;-----------------------------------------------------------------------------
 43439                                  
 43440 00007906 00                      num_entry: db	0		; keeps track of the # of times this routine
 43441                                  				; has been called. (0 or 1)
 43442                                  
 43443                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 43444                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 43445                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 43446                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 43447                                  
 43448                                  seg_reinit:	; proc	far
 43449 00007907 1E                      	push	ds
 43450                                  
 43451 00007908 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 43452                                  
 43453 0000790D E88600                  	call	patch_misc_segments	; patch in segments for sharer and 
 43454                                  					; other tables with seg in ES.
 43455                                  	; 17/12/2022
 43456                                  	; cx = 0
 43457 00007910 39C8                    	cmp	ax,cx ; 0
 43458                                  	;cmp	ax,0
 43459 00007912 753D                    	jne	short patch_vec_seg	; patch vectors with segment in es
 43460                                  
 43461                                  	; 17/12/2022
 43462 00007914 2E380E[0679]            	cmp	[cs:num_entry],cl ; 0
 43463                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 43464 00007919 7508                    	jne	short second_entry	; N: just patch the stub with 
 43465                                  					;    segment in ES
 43466                                  					; Y: patch the vectors with stub 
 43467 0000791B 8CD8                    	mov	ax,ds
 43468 0000791D E83E00                  	call	patch_vec_segments	; patch the segment of vectors
 43469 00007920 E8BD00                  	call	patch_offset		; patch the offsets of vectors 
 43470                                  					; with those in the stub.
 43471                                  	; 17/12/2022
 43472                                  	; cx = 0
 43473                                  second_entry:
 43474 00007923 8CC0                    	mov	ax,es			; patch the stub with segment in es
 43475                                  
 43476                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 43477                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 43478 00007925 BF[4810]                	mov	di,DOSINTTABLE
 43479                                  	; 17/12/2022
 43480                                  	; cx = 0
 43481                                  	;mov	cx,9
 43482 00007928 B109                    	mov	cl,9
 43483 0000792A 1E                      	push	ds			
 43484 0000792B 07                      	pop	es			; es:di -> DOSINTTABLE
 43485                                  
 43486                                  dosinttabloop:
 43487                                  	;add	di,2
 43488                                  	; 19/09/2023
 43489 0000792C 47                      	inc	di
 43490 0000792D 47                      	inc	di
 43491 0000792E AB                      	stosw
 43492 0000792F E2FB                    	loop	dosinttabloop	
 43493                                  
 43494                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 43495                                  ; use the HMA, so we don't want to check CS
 43496                                  
 43497                                  ;ifndef ROMDOS
 43498 00007931 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 43499 00007934 7220                    	jb	short sr_done		; N: done
 43500                                  ;endif
 43501 00007936 E8A3FF                  	call	check_XMM		; Y: set up the XMS entry point
 43502 00007939 721B                    	jc	short sr_done		; failed to set up XMS do not do
 43503                                  					; A20 toggling in the stub.
 43504                                  	; 17/12/2022
 43505                                  	; cx = 0
 43506 0000793B E81D01                  	call	patch_in_nops		; enable the stub to check A20 state
 43507                                  ; M021-
 43508                                  	;mov	byte [1211h],1
 43509 0000793E C606[F711]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 43510                                  				
 43511                                  					; set pointer to the routine that 
 43512                                  					; patches buggy exepacked code.
 43513                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 43514 00007943 C706[F811][7A74]        	mov	word [FixExePatch],ExePatch
 43515                                  					; M068: set pointer to the routine 
 43516                                  					; M068: that detects copy protected
 43517                                  					; M068: apps
 43518                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 43519 00007949 C706[6100][AB75]        	mov	word [ChkCopyProt],IsCopyProt
 43520                                  
 43521                                  ; 28/12/2022 - Retro DOS v4.1
 43522                                  %if 0
 43523                                  ;----------------------------------------------------------------------------
 43524                                  
 43525                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 43526                                  
 43527                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43528                                  ;
 43529                                  ;; M020 - begin
 43530                                  ;
 43531                                  ;	call	WhatCPUType
 43532                                  ;	cmp	al,1
 43533                                  ;	jne	short sr_done 		; we need Rational Patch only
 43534                                  ;					;  on 286 systems
 43535                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 43536                                  ;	mov	word [RationalPatchPtr],RationalPatch
 43537                                  ;
 43538                                  ;; M020 - end
 43539                                  ;
 43540                                  ;	jmp	short sr_done
 43541                                  ;
 43542                                  ;patch_vec_seg:				; patch vectors with segment in es
 43543                                  ;	mov	ax,es
 43544                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 43545                                  ;					; NOTE we don't have to patch the 
 43546                                  ;					; offsets as they have been already
 43547                                  ;					; set to the doscode offsets at
 43548                                  ;					; DOSINIT.
 43549                                  ;sr_done:
 43550                                  ;	mov	byte [cs:num_entry],1
 43551                                  ;	pop	ds
 43552                                  ;	retf	; ! far return !
 43553                                  
 43554                                  ;----------------------------------------------------------------------------
 43555                                  ;
 43556                                  ; Procedure Name : WhatCPUType
 43557                                  ;
 43558                                  ; Inputs	 : none
 43559                                  ;
 43560                                  ; Outputs	 : AL = 0 if CPU <  286
 43561                                  ;		      = 1 if CPU == 286
 43562                                  ;		      = 2 if CPU >= 386
 43563                                  ;
 43564                                  ; Regs. Mod.	 : AX
 43565                                  ;
 43566                                  ;----------------------------------------------------------------------------
 43567                                  
 43568                                  WhatCPUType:
 43569                                  	; 25/04/2019 - Retro DOS v4.0
 43570                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 43571                                  
 43572                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 43573                                  
 43574                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 43575                                  ; 	it is called from both CODE and SYSINITSEG.
 43576                                  ;
 43577                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 43578                                  ;  Returns: AX = 0 if 8086 or 8088
 43579                                  ;              = 1 if 80286
 43580                                  ;              = 2 if 80386
 43581                                  
 43582                                  	; 04/11/2022
 43583                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 43584                                  
 43585                                  Get_CPU_Type:	;macro
 43586                                  	pushf
 43587                                  	push	bx			; preserve bx
 43588                                  	xor	bx,bx			; init bx to zero
 43589                                  
 43590                                  	xor	ax,ax			; 0000 into AX
 43591                                  	push	ax			; put it on the stack...
 43592                                  	popf				; ...then shove it into the flags
 43593                                  	pushf				; get it back out of the flags...
 43594                                  	pop	ax			; ...and into ax
 43595                                  	and	ax,0F000h		; mask off high four bits
 43596                                  	cmp	ax,0F000h		; was it all 1's?
 43597                                  	je	short cpu_8086		; aye; it's an 8086 or 8088
 43598                                  
 43599                                  	mov	ax,0F000h		; now try to set the high four bits..
 43600                                  	push	ax
 43601                                  	popf
 43602                                  	pushf
 43603                                  	pop	ax			; ...and see what happens
 43604                                  	and	ax,0F000h		; any high bits set ?
 43605                                  	jz	short cpu_286		; nay; it's an 80286
 43606                                  
 43607                                  cpu_386:				; bx starts as zero
 43608                                  	inc	bx			; inc twice if 386
 43609                                  cpu_286:				; just inc once if 286
 43610                                  	inc	bx
 43611                                  cpu_8086:				; don't inc at all if 086
 43612                                  	mov	ax,bx			; put CPU type value in ax
 43613                                  	pop	bx			; restore original bx
 43614                                  	popf
 43615                                  	
 43616                                  	;endm
 43617                                  
 43618                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 43619                                  	;retn
 43620                                  
 43621                                  	; 04/11/2022
 43622                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 43623                                  	cmp	al,1
 43624                                  	jne	short sr_done 		; we need Rational Patch only
 43625                                  					;  on 286 systems
 43626                                  	mov	word [RationalPatchPtr],RationalPatch
 43627                                  
 43628                                  ;----------------------------------------------------------------------------
 43629                                  %endif	; 28/12/2022
 43630                                  
 43631 0000794F EB05                    	jmp	short sr_done
 43632                                  
 43633                                  patch_vec_seg:				; patch vectors with segment in es
 43634 00007951 8CC0                    	mov	ax,es
 43635 00007953 E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 43636                                  					; NOTE we don't have to patch the 
 43637                                  					; offsets as they have been already
 43638                                  					; set to the doscode offsets at
 43639                                  					; DOSINIT.
 43640                                  sr_done:
 43641 00007956 2EC606[0679]01          	mov	byte [cs:num_entry],1
 43642 0000795C 1F                      	pop	ds
 43643 0000795D CB                      	retf	; ! far return !
 43644                                  
 43645                                  ;----------------------------------------------------------------------------
 43646                                  ;
 43647                                  ; Procedure Name : patch_vec_segments
 43648                                  ;
 43649                                  ; Inputs	 : ax -> has segment address to patch in
 43650                                  ;		   ds -> DOSDATA
 43651                                  ;
 43652                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 43653                                  ;			
 43654                                  ;			0,20-28,3a-3f
 43655                                  ;
 43656                                  ; Regs. Mod.	 : DI,CX,DX,AX
 43657                                  ;
 43658                                  ;----------------------------------------------------------------------------
 43659                                  
 43660                                  patch_vec_segments:
 43661                                  
 43662 0000795E 06                      	push	es
 43663                                  
 43664 0000795F 31C9                    	xor	cx,cx ; 0
 43665 00007961 8EC1                    	mov	es,cx
 43666                                  
 43667                                  	;mov	di,82h
 43668 00007963 BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 43669                                  
 43670 00007966 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 43671                                  
 43672                                  					; set vectors 20 & 21
 43673                                  	; 04/11/2022
 43674                                  	;mov	cx,2
 43675                                  	; 17/12/2022
 43676                                  	;mov	cl,2
 43677                                  ps_set1:
 43678 0000796A AB                      	stosw	
 43679                                  	;add	di,2
 43680                                  	; 17/12/2022
 43681 0000796B 47                      	inc	di
 43682 0000796C 47                      	inc	di
 43683                                  	;loop	ps_set1
 43684                                  
 43685                                  	; 17/12/2022
 43686 0000796D AB                      	stosw	; int 21h segment
 43687                                  	;inc	di
 43688                                  	;inc	di
 43689                                  
 43690                                  	;add	di,4			; skip int 22h vector
 43691 0000796E 83C706                  	add	di,6 ; *
 43692                                  
 43693 00007971 AB                      	stosw				; set int 23h
 43694 00007972 83C706                  	add	di,6			; skip int 24h
 43695                                  
 43696                                  					; set vectors 25-28 and 2a-3f 
 43697                                  	; 04/11/2022
 43698                                  	;mov	cx,4			; set 4 segments
 43699                                  	; 17/12/2022
 43700 00007975 B104                    	mov	cl,4
 43701                                  ps_set2:
 43702 00007977 AB                      	stosw				
 43703                                  	;add	di,2
 43704                                  	; 17/12/2022
 43705 00007978 47                      	inc	di
 43706 00007979 47                      	inc	di
 43707 0000797A E2FB                    	loop	ps_set2
 43708                                  
 43709 0000797C 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 43710                                  					;   already be set.
 43711                                  	; 04/11/2022
 43712                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 43713                                  	; 17/12/2022
 43714 0000797F B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 43715                                  ps_set3:
 43716 00007981 AB                      	stosw
 43717                                  	;add	di,2
 43718                                  	; 17/12/2022
 43719 00007982 47                      	inc	di
 43720 00007983 47                      	inc	di
 43721 00007984 E2FB                    	loop	ps_set3
 43722                                  
 43723                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 43724                                  ; below. So skip it.
 43725                                  
 43726 00007986 83C708                  	add	di,8			; skip vector 30h & 31h 
 43727                                  	
 43728                                  	; 04/11/2022
 43729                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 43730                                  	; 17/12/2022
 43731 00007989 B10E                    	mov	cl,14			;   sets segs for ints 32h-3fh
 43732                                  ps_set4:
 43733 0000798B AB                      	stosw
 43734                                  	;add	di,2
 43735                                  	; 17/12/2022
 43736 0000798C 47                      	inc	di
 43737 0000798D 47                      	inc	di
 43738 0000798E E2FB                    	loop	ps_set4
 43739                                  
 43740                                  ; set offset of int2f
 43741                                  
 43742                                  ;if installed
 43743                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 43744                                  ;endif
 43745                                  	;mov	[es:0C3h],ax
 43746 00007990 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 43747                                  	; 17/12/2022
 43748                                  	; cx = 0
 43749 00007994 07                      	pop	es
 43750 00007995 C3                      	retn
 43751                                  
 43752                                  ;---------------------------------------------------------------------------
 43753                                  ;
 43754                                  ; Procedure Name : patch_misc_segments
 43755                                  ;
 43756                                  ; Inputs	 : es = segment to patch in
 43757                                  ;		   ds = dosdata
 43758                                  ;
 43759                                  ; outputs	 : patches in the sharer and other tables in the dos
 43760                                  ;		   with right dos code segment in es
 43761                                  ;
 43762                                  ; Regs Mod	 : DI,SI,CX
 43763                                  ;
 43764                                  ;---------------------------------------------------------------------------
 43765                                  
 43766                                  patch_misc_segments:
 43767                                  
 43768 00007996 53                      	push	bx
 43769 00007997 06                      	push	es
 43770 00007998 50                      	push	ax
 43771                                  
 43772 00007999 8CC0                    	mov	ax,es			; ax - > DOS segment
 43773                                  	
 43774 0000799B 1E                      	push	ds
 43775 0000799C 07                      	pop	es			; es -> DOSDATA
 43776                                  	
 43777                                  ; initialize the jump table for the sharer...
 43778                                  
 43779                                  	;mov	di,offset dosdata:jshare
 43780                                  	;mov	di,90h
 43781 0000799D BF[9000]                	mov	di,JShare
 43782                                  	;mov	bx,[0AAAh]
 43783 000079A0 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 43784                                  					; table was patched during the first
 43785                                  					; call to this routine
 43786 000079A4 B90F00                  	mov	cx,15
 43787                                  jumptabloop:
 43788                                  	;add	di,2			; skip offset
 43789                                  	; 17/12/2022
 43790 000079A7 47                      	inc	di
 43791 000079A8 47                      	inc	di
 43792 000079A9 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 43793 000079AC 7405                    	je	short share_patch	; Y: patch in sharer table
 43794                                  					; N: 
 43795 000079AE 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 43796 000079B1 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 43797                                  share_patch:
 43798 000079B3 AB                      	stosw				; drop in segment
 43799                                  no_share_patch:
 43800 000079B4 E2F1                    	loop	jumptabloop
 43801                                  					; BUGBUG patching the country info 
 43802                                  					; with dosdata can be done inline
 43803                                  					; in dosinit.
 43804                                  					; for dos 3.3 country info
 43805                                  					; table address
 43806                                  
 43807                                  	;mov	si,offset dosdata:country_cdpg
 43808                                  	;mov	si,122Ah   
 43809 000079B6 BE[0512]                	mov	si,COUNTRY_CDPG
 43810                                  					; initialize double word
 43811                                  					; pointers with dosdata in ds
 43812                                  	;mov	[si+4Fh],ds
 43813                                  	;mov	[si+54h],ds
 43814                                  	;mov	[si+59h],ds
 43815                                  	;mov	[si+5Eh],ds
 43816                                  	;mov	[si+80h],ds
 43817                                  	;mov	[si+63h],ds
 43818 000079B9 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 43819 000079BC 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 43820 000079BF 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 43821 000079C2 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 43822 000079C5 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 43823 000079C9 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 43824                                  
 43825                                  					; fastopen routines are in doscode
 43826                                  					; so patch with doscode seg in ax
 43827                                  
 43828                                  	;mov	si,offset dosdata:fastopentable
 43829                                  	;mov	si,0D30h
 43830 000079CC BE[300D]                	mov	si,FastOpenTable
 43831                                  
 43832                                  	; 17/12/2022
 43833                                  	; bx = [TEMP_DOSLOC]
 43834 000079CF 83FBFF                  	cmp	bx,-1
 43835                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 43836 000079D2 7405                    	je	short fast_patch	; Y: patch segment
 43837                                  	;mov	cx,[TEMP_DOSLOC]
 43838                                  					; Q: has fastopen patched in it's
 43839                                  					;    segment
 43840                                  	; 17/12/2022
 43841 000079D4 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 43842                                  	;;cmp	cx,[si+4]
 43843                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 43844 000079D7 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 43845                                  
 43846                                  fast_patch:
 43847                                  	;mov	[si+4],ax
 43848 000079D9 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 43849                                  no_fast_patch:
 43850                                  	; 17/12/2022
 43851                                  	; cx = 0
 43852 000079DC 58                      	pop	ax
 43853 000079DD 07                      	pop	es
 43854 000079DE 5B                      	pop	bx
 43855                                  
 43856 000079DF C3                      	retn
 43857                                  
 43858                                  ;--------------------------------------------------------------------------
 43859                                  ;
 43860                                  ; Procedure Name : patch_offset
 43861                                  ; 
 43862                                  ; Inputs	 : NONE
 43863                                  ;
 43864                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 43865                                  ;		   0,20-28,3a-3f, and 30,31
 43866                                  ;
 43867                                  ;
 43868                                  ; Regs. Mod	 : AX,DI,CX
 43869                                  ;--------------------------------------------------------------------------
 43870                                  
 43871                                  patch_offset:
 43872 000079E0 06                      	push	es		; preserve es
 43873                                  
 43874 000079E1 31C0                    	xor	ax,ax
 43875 000079E3 8EC0                    	mov	es,ax
 43876                                  				; set default divide trap address
 43877                                  	;mov	word ptr es:[0],offset dosdata:ldivov	
 43878                                  	;mov	word [es:0],108Ah
 43879 000079E5 26C7060000[7010]        	mov	word [es:0],ldivov
 43880                                  
 43881                                  	;mov	di,80h
 43882 000079EC BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 43883                                  	;mov	ax,offset dosdata:lirett
 43884                                  	;mov	ax,10DAh
 43885 000079EF B8[C010]                	mov	ax,lirett
 43886                                  				; set vectors 20 & 21 to point to iret.
 43887                                  	; 17/12/2022
 43888                                  	; cx = 0
 43889                                  
 43890                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 43891                                  po_iset1:
 43892 000079F2 AB                      	stosw	; int 20h offset
 43893                                  	;add	di,2 ; *
 43894                                  	;loop	po_iset1
 43895                                  	; 17/12/2022
 43896 000079F3 47                      	inc	di
 43897 000079F4 47                      	inc	di
 43898 000079F5 AB                      	stosw	; int 21h offset
 43899                                  
 43900                                  	;add	di,4		; skip vector 22h
 43901                                  	; 17/12/2022
 43902 000079F6 83C706                  	add	di,6 ; *	
 43903                                  
 43904 000079F9 AB                      	stosw			; set offset of 23h
 43905                                  	;add	di,6		; skip 24h
 43906                                  	; 19/09/2023
 43907 000079FA 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 43908                                  
 43909                                  				; set vectors 25-28 and 2a-3f to iret.
 43910                                  	; 04/11/2022
 43911                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 43912                                  	; 19/09/2023
 43913                                  	; 17/12/2022
 43914                                  	;mov	cl,4		;   sets offsets for ints 25h-28h
 43915                                  po_iset2:
 43916 000079FD AB                      	stosw		; set offset for int 28h ; 19/09/2023
 43917                                  	;add	di,2
 43918                                  	; 19/09/2023
 43919                                  	; 17/12/2022
 43920                                  	;inc	di
 43921                                  	;inc	di
 43922                                  	; 19/09/2023
 43923                                  	;loop	po_iset2
 43924                                  
 43925                                  	;add	di,4		; skip vector 29h
 43926                                  	; 19/09/2023
 43927 000079FE 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 43928                                  
 43929                                  	; 04/11/2022
 43930                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 43931                                  	; 17/12/2022
 43932                                  	;mov	cl,6		;   sets offsets for ints 2ah-2fh
 43933 00007A01 B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 43934                                  po_iset3:
 43935 00007A03 AB                      	stosw
 43936                                  	;add	di,2
 43937                                  	; 17/12/2022
 43938 00007A04 47                      	inc	di
 43939 00007A05 47                      	inc	di
 43940 00007A06 E2FB                    	loop	po_iset3
 43941                                  
 43942                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 43943                                  ; below. So skip it.
 43944                                  
 43945                                  	;add	di,8		; skip vector 30h & 31h 
 43946                                  	; 17/12/2022
 43947 00007A08 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 43948                                  
 43949                                  	; 04/11/2022
 43950                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 43951                                  				;   sets offsets for ints 32h-3fh
 43952                                  	; 17/12/2022
 43953 00007A0B B10E                    	mov	cl,14 ; 26/06/2019
 43954                                  po_iset4:
 43955 00007A0D AB                      	stosw
 43956                                  	;add	di,2
 43957                                  	; 17/12/2022
 43958 00007A0E 47                      	inc	di
 43959 00007A0F 47                      	inc	di
 43960 00007A10 E2FB                    	loop	po_iset4
 43961                                  
 43962                                  ;if installed
 43963                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 43964                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 43965 00007A12 26C706BC00[AC10]        	mov	word [es:(2Fh*4)],lint2f
 43966                                  ;endif
 43967                                  
 43968                                  ; set up entry point call at vectors 30-31h
 43969                                  	;mov	byte [es:0C0h],0EAh
 43970 00007A19 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 43971                                  	;mov	word [es:0C1h],10D0h
 43972                                  
 43973 00007A1F 26C706C100[B610]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 43974                                  
 43975                                  							; 19/09/2023
 43976                                  	;mov	word [es:80h],1094h
 43977 00007A26 26C7068000[7A10]        	mov	word [es:addr_int_abort],lquit		; int 20h
 43978                                  	;mov	word [es:84h],109Eh
 43979 00007A2D 26C7068400[8410]        	mov	word [es:addr_int_command],lcommand	; int 21h
 43980                                  	;mov	word [es:94h],10A8h
 43981 00007A34 26C7069400[8E10]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 43982                                  	;mov	word [es:98h],10B2h
 43983 00007A3B 26C7069800[9810]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 43984                                  	;mov	word [es:9Ch],10BCh
 43985 00007A42 26C7069C00[A210]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 43986                                  
 43987                                  	; 17/12/2022
 43988                                  	; CX = 0
 43989 00007A49 07                      	pop	es		; restore es
 43990 00007A4A C3                      	retn
 43991                                  
 43992                                  ;--------------------------------------------------------------------------
 43993                                  ;
 43994                                  ; 	Procedure Name	:	patch_in_nops
 43995                                  ;
 43996                                  ; 	Entry		: 	ES -> DOSDATA
 43997                                  ;
 43998                                  ;	Regs Mod	: 	cx, di
 43999                                  ;
 44000                                  ;	Description:
 44001                                  ;		This routine patches in 2 nops at the offsets specified in 
 44002                                  ;	patch_table. This basically enables the low mem stub to start 
 44003                                  ;	making XMS calls.
 44004                                  ;
 44005                                  ;--------------------------------------------------------------------------
 44006                                  
 44007                                  	; 04/11/2022
 44008                                  	; (MSDOS 5.0 MSDOS.SYS)
 44009                                  	; DOSCODE:0BC50h
 44010                                  
 44011                                  patch_table:	; label	byte
 44012                                  	;dw	offset dosdata:i0patch
 44013                                  	;dw	offset dosdata:i20patch
 44014                                  	;dw	offset dosdata:i21patch
 44015                                  	;dw	offset dosdata:i25patch
 44016                                  	;dw	offset dosdata:i26patch
 44017                                  	;dw	offset dosdata:i27patch
 44018                                  	;dw	offset dosdata:i2fpatch
 44019                                  	;dw	offset dosdata:cpmpatch
 44020 00007A4B [7010]                  	dw	i0patch
 44021 00007A4D [7A10]                  	dw	i20patch
 44022 00007A4F [8410]                  	dw	i21patch
 44023 00007A51 [8E10]                  	dw	i25patch
 44024 00007A53 [9810]                  	dw	i26patch
 44025 00007A55 [A210]                  	dw	i27patch
 44026 00007A57 [AC10]                  	dw	i2fpatch
 44027 00007A59 [B610]                  	dw	cpmpatch
 44028                                  
 44029                                  patch_table_size equ ($-patch_table)/2
 44030                                  
 44031                                  patch_in_nops:
 44032 00007A5B 50                      	push	ax
 44033 00007A5C 56                      	push	si
 44034 00007A5D BE[4B7A]                	mov	si,patch_table
 44035 00007A60 B89090                  	mov	ax,9090h ; nop, nop
 44036                                  	; 17/12/2022
 44037                                  	; cx = 0
 44038                                  	;mov	cx,8
 44039                                  	;mov	cx,patch_table_size ; 8
 44040 00007A63 B108                    	mov	cl,patch_table_size ; 8
 44041                                  pin_loop:
 44042 00007A65 2E8B3C                  	mov	di,[cs:si]
 44043 00007A68 AB                      	stosw
 44044                                  	;add	si,2
 44045                                  	; 17/12/2022
 44046 00007A69 46                      	inc	si
 44047 00007A6A 46                      	inc	si
 44048 00007A6B E2F8                    	loop	pin_loop
 44049 00007A6D 5E                      	pop	si
 44050 00007A6E 58                      	pop	ax
 44051 00007A6F C3                      	retn
 44052                                  
 44053                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 44054                                  ; ---------------------------------------------------------------------------
 44055                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 44056                                  ; ---------------------------------------------------------------------------
 44057                                  
 44058                                  	; 05/12/2022 - temporary ; (paragrapgh alinment)
 44059                                  DOSCODE_END:
 44060                                  	;times	9 db 0	; db 9 dup(0)
 44061                                  	; 18/12/2022
 44062 00007A70 0000                    	dw	0  ;	times 2 db 0
 44063                                  
 44064                                  ;align 16
 44065                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 44066                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 44067                                  
 44068                                  ; ---------------------------------------------------------------------------
 44069                                  
 44070                                  
 44071                                  ;memstrt label word
 44072                                  ; ---------------------------------------------------------------------------
 44073                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 44074                                  ; ---------------------------------------------------------------------------
 44075                                  
 44076                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 44077                                  
 44078                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 44079                                  ; the dos initialization segment
 44080                                  
 44081                                  ;ifndef ROMDOS
 44082                                  
 44083                                  ;doscode ends
 44084                                  
 44085                                  ;else
 44086                                  
 44087                                  ;;dosinitseg ends
 44088                                  
 44089                                  ;endif ; ROMDOS
 44090                                  
 44091                                  ;============================================================================
 44092                                  
 44093                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 44094                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 44095                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 44096                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 44097                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 44098                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 44099                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 44100                                  
 44101                                  ;; burasý doscode sonu
 44102                                  
 44103                                  ;============================================================================
 44104                                  ; DOSDATA
 44105                                  ;============================================================================
 44106                                  ; 29/04/2019 - Retro DOS 4.0
 44107                                  
 44108                                  ;[BITS 16]
 44109                                  
 44110                                  ;[ORG 0]
 44111                                  
 44112                                  ; 25/04/2019 - Retro DOS v4.0
 44113                                  
 44114                                  ;============================================================================
 44115                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 44116                                  ;============================================================================
 44117                                  
 44118                                  ;align 16
 44119                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 44120                                  	; (4970 bytes for MSDOS 6.21)
 44121                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 44122                                  
 44123                                  ;============================================================================
 44124                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 44125                                  ;============================================================================
 44126                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44127                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 44128                                  ; 16/07/2018 - Retro DOS 3.0	
 44129                                  
 44130                                  ;Break <Initialized data and data used at DOS initialization>
 44131                                  ;----------------------------------------------------------------------------
 44132                                  
 44133                                  ; We need to identify the parts of the data area that are relevant to tasks
 44134                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 44135                                  ; data will be gathered with the system code. The process data under 2.x will
 44136                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 44137                                  ;
 44138                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 44139                                  ; describing that data item.
 44140                                  
 44141                                  ;DOSDATA SEGMENT
 44142                                  
 44143                                  ; 04/11/2022
 44144                                  ;[ORG 0]
 44145                                  
 44146                                  ; ----------------------------------------------------------------------------
 44147                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44148                                  ; ----------------------------------------------------------------------------
 44149                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 44150                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 44151                                  ; ----------------------------------------------------------------------------
 44152                                  
 44153                                  ; 04/11/2022
 44154                                  
 44155                                  ;DOSDATA:0000h
 44156                                  
 44157 00007A72 90<rep Eh>              align 16
 44158                                  
 44159                                  ; ----------------------------------------------------------------------------
 44160                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44161                                  ; ----------------------------------------------------------------------------
 44162                                  
 44163                                  segment .data  vstart=0 ; 06/12/2022
 44164                                  								
 44165                                  ; ============================================================================
 44166                                  
 44167                                  ; 06/12/2022
 44168                                  ;DOSDATASTART equ $
 44169                                  DOSDATASTART:
 44170                                  
 44171                                  
 44172                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 44173                                  
 44174                                  	;; 03/11/2022
 44175                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 44176                                  
 44177                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44178                                  	;db	4 dup (?)	
 44179 00000000 00<rep 4h>              	times	4 db 0
 44180                                  
 44181                                  	; 29/04/2019 - Retro DOS v4.0 modification
 44182                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 44183                                  	;dw	0
 44184                                  
 44185                                  	;EVEN
 44186                                  
 44187                                  ;align 2
 44188                                  
 44189                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 44190                                  ; area compatability. This location must be incremented EACH TIME the data
 44191                                  ; area here gets mucked with.
 44192                                  ;
 44193                                  ; Also, do NOT change this position relative to DOSDATA:0.
 44194                                  
 44195                                  MSCT001S:	; LABEL BYTE
 44196                                  	
 44197                                  DataVersion:	
 44198 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 44199                                  
 44200                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 44201                                  ;hkn; been removed to DOSCODE above
 44202                                  
 44203                                  ;M044
 44204                                  ; First part of save area for saving last para of Window memory
 44205                                  
 44206                                  WinoldPatch1:	; db 8 dup (?)	;M044
 44207 00000006 00<rep 8h>              	times	8 db 0
 44208                                  
 44209                                  	; MSDOS 6.21 DOSDATA:000Eh
 44210                                  MYNUM:			; Offset 000Eh
 44211 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 44212                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 44213 00000010 0000                    	dw	0
 44214                                  OpenLRU:
 44215 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 44216                                  OEM_HANDLER: 		
 44217 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 44218                                  
 44219                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 44220                                  ;;			way that we leave DOS???? - jgl
 44221                                  
 44222                                  LeaveAddr:
 44223 00000018 [0804]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 44224                                  RetryCount:		
 44225 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 44226                                  RetryLoop:
 44227 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 44228                                  LastBuffer:
 44229 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 44230                                  CONTPOS:
 44231 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 44232                                  arena_head:
 44233 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 44234                                  
 44235                                  ;; 16/07/2018
 44236                                  ;;***************************************************************************
 44237                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 44238                                  ;;***************************************************************************
 44239                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 44240                                  ;;
 44241                                  ;;	AH = 52h
 44242                                  ;;
 44243                                  ;;	on return:
 44244                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 44245                                  ;;		Known "invars" fields follow (varies with DOS version):
 44246                                  ;;
 44247                                  ;;	Offset Size		 Description
 44248                                  ;;
 44249                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 44250                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 44251                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 44252                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 44253                                  ;;		      0 indicates no unread input (DOS 3.x)
 44254                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 44255                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 44256                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 44257                                  ;;	  08   dword  pointer to $CLOCK device driver
 44258                                  ;;	  0C   dword  pointer to CON device driver
 44259                                  ;;	  10   byte   number of logical drives in system
 44260                                  ;;	  11   word   maximum bytes/block of any block device
 44261                                  ;;	  13   dword  pointer to DOS cache buffer header
 44262                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 44263                                  ;;		      point to the next device in device chain
 44264                                  ;;
 44265                                  ;;***************************************************************************
 44266                                  
 44267                                  ; The following block of data is used by SYSINIT. 
 44268                                  ; Do not change the order or size of this block
 44269                                  
 44270                                  ;SYSINITVAR:
 44271                                  ;----------------------------------------------------------------------------
 44272                                  SYSINITVARS:
 44273                                  DPBHEAD:
 44274 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 44275                                  SFT_ADDR:
 44276 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 44277                                  BCLOCK:
 44278 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 44279                                  BCON:
 44280 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 44281                                  MAXSEC:
 44282 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 44283                                  BUFFHEAD:
 44284 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 44285                                  CDSADDR:
 44286 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 44287                                  SFTFCB:
 44288 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 44289                                  KEEPCOUNT:
 44290 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 44291                                  NUMIO:
 44292 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 44293                                  CDSCOUNT:
 44294 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 44295                                  
 44296                                  ; A fake header for the NUL device
 44297                                  NULDEV:
 44298 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 44299                                  	;dw	8004h
 44300 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 44301 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 44302 00000050 [CC0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 44303 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 44304                                  SPLICES:
 44305 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 44306                                  
 44307                                  Special_Entries:
 44308 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 44309                                  UU_IFS_DOS_CALL:
 44310 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 44311                                  ; 
 44312                                  ; UU_IFS_HEADER:
 44313                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 44314                                  
 44315                                  ChkCopyProt:
 44316 00000061 0000                    	dw	0	; M068
 44317                                  A20OFF_PSP:
 44318 00000063 0000                    	dw	0	; M068
 44319                                  BUFFERS_PARM1:
 44320 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 44321                                  BUFFERS_PARM2:
 44322 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 44323                                  BOOTDRIVE:
 44324 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 44325                                  DDMOVE:
 44326 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 44327                                  EXT_MEM_SIZE:
 44328 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 44329                                  
 44330                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 44331                                  ;
 44332                                  ; Replaced by next two declarations
 44333                                  ;
 44334                                  ;UU_BUF_HASH_PTR:
 44335                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 44336                                  ;UU_BUF_HASH_COUNT:
 44337                                  ;	dw	1	; [SYSTEM] number of Hash entries
 44338                                  
 44339                                  BufferQueue:
 44340 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 44341                                  DirtyBufferCount:
 44342 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 44343                                  			; BUGBUG ---- change to byte
 44344                                  SC_CACHE_PTR:
 44345 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 44346                                  SC_CACHE_COUNT:
 44347 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 44348                                  BuffInHMA:
 44349 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 44350                                  LoMemBuff:
 44351 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 44352                                  			;  in Low mem when buffs are in HMA
 44353                                  ;
 44354                                  ; All variables which have UU_ as prefix can be reused for other
 44355                                  ; purposes and can be renamed. All these variables were used for
 44356                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 44357                                  ; manager ---- MOHANS
 44358                                  ;
 44359                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 44360                                  UU_BUF_EMS_FIRST_PAGE:	
 44361 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 44362                                  
 44363                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 44364                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 44365                                  ;	dw	0			
 44366                                  
 44367                                  CL0FATENTRY:
 44368 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 44369                                  			; is used in pack/unpack rts.
 44370                                  			; in fat.asm if cluster 0 is specified.
 44371                                  			; SR;
 44372                                  IoStatFail:
 44373 00000083 00                      	db	0	; IoStatFail has been added to 
 44374                                  			; record a fail on an I24 
 44375                                  			; issued from IOFUNC on a status call. 
 44376                                  
 44377                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 44378                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 44379                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 44380                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 44381                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 44382                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 44383                                  ;
 44384                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 44385                                  						; state of the 	buffers page.
 44386                                  						; This one byte is retained to 
 44387                                  						; keep the size of this data 
 44388                                  						; block the same.;
 44389                                  ALLOCMSAVE:
 44390 00000084 00                      	db	0	; M063: temp var. used to 
 44391                                  			; M063: save alloc method in
 44392                                  			; M063: msproc.asm
 44393                                  A20OFF_COUNT:
 44394 00000085 00                      	db	0	; M068: indiactes the # of 
 44395                                  			; M068: int 21 calls for 
 44396                                  			; M068: which A20 is off
 44397                                  DOS_FLAG:
 44398 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 44399                                  			; definitions
 44400                                  UNPACK_OFFSET:
 44401 00000087 0000                    	dw	0	; saves pointer to the start
 44402                                  			; of unpack code in exepatch.
 44403                                  			; asm.
 44404                                  UMBFLAG:
 44405 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 44406                                  			; M003: link state of the UMBs
 44407                                  			; M003: whether linked or not 
 44408                                  			; M003: to the DOS arena chain
 44409                                  SAVE_AX:
 44410 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 44411                                  			; M000: in msproc.asm
 44412                                  UMB_HEAD:
 44413 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 44414                                  			; M000: the first umb arena by 
 44415                                  			; M000: BIOS sysinit.
 44416                                  START_ARENA:
 44417 0000008E 0100                    	dw	1	; M000: this is the first arena 
 44418                                  			; M000: from which DOS will 
 44419                                  			; M000: start its scan for alloc.
 44420                                  
 44421                                  ; End of SYSINITVar block
 44422                                  ;----------------------------------------------------------------------------
 44423                                  
 44424                                  ; 25/04/2019 - Retro DOS v4.0
 44425                                  
 44426                                  ; 16/07/2018
 44427                                  ; MSDOS 3.3 (& MDOS 6.0)
 44428                                  
 44429                                  ;
 44430                                  ; Sharer jump table
 44431                                  ;
 44432                                  
 44433                                  ;PUBLIC	JShare
 44434                                  	;EVEN
 44435                                  
 44436                                  ;JShare	LABEL	DWORD
 44437                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 44438                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 44439                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 44440                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 44441                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 44442                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 44443                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 44444                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 44445                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 44446                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 44447                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 44448                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 44449                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 44450                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 44451                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 44452                                  
 44453                                  align 2
 44454                                  
 44455                                  JShare:
 44456 00000090 [0107]0000              		DW	BadCall,0
 44457 00000094 [0507]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 44458 00000098 [0507]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 44459 0000009C [0107]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 44460 000000A0 [0107]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 44461 000000A4 [0107]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 44462 000000A8 [0107]0000              set_block:	DW	BadCall,0  ; 6   set_block
 44463 000000AC [0107]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 44464 000000B0 [0507]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 44465 000000B4 [0107]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 44466 000000B8 [0107]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 44467 000000BC [0107]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 44468 000000C0 [0507]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 44469 000000C4 [0107]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 44470 000000C8 [0107]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 44471                                  
 44472                                  
 44473                                  ;============================================================================
 44474                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 44475                                  ;============================================================================
 44476                                  ; 25/04/2019 - Retro DOS 4.0 
 44477                                  ; 16/07/2018 - Retro DOS 3.0	
 44478                                  
 44479                                  ;Break <Initialized data and data used at DOS initialization>
 44480                                  ;----------------------------------------------------------------------------
 44481                                  
 44482                                  ; We need to identify the parts of the data area that are relevant to tasks
 44483                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 44484                                  ; data will be gathered with the system code.  The process data under 2.x will
 44485                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 44486                                  ;
 44487                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 44488                                  ; describing that data item.
 44489                                  
 44490                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 44491                                  
 44492                                  ;
 44493                                  ; Table of routines for assignable devices
 44494                                  ;
 44495                                  ; MSDOS allows assignment if the following standard devices:
 44496                                  ;   stdin  (usually CON input)
 44497                                  ;   stdout (usually CON output)
 44498                                  ;   auxin  (usually AUX input)
 44499                                  ;   auxout (usually AUX output)
 44500                                  ;   stdlpt (usually PRN output)
 44501                                  ;
 44502                                  ; SPECIAL NOTE:
 44503                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 44504                                  ;   If we're not at end-of-file, then we always say that we have a character.
 44505                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 44506                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 44507                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 44508                                  ;   as EOF).
 44509                                  
 44510                                  ; Default SFTs for boot up
 44511                                  
 44512                                  		;PUBLIC	SFTABL
 44513                                  
 44514                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 44515 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 44516 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 44517 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 44518                                  		;times 295 db 0 ; MSDOS 6.0
 44519 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 44520                                  
 44521                                  ; the next two variables relate to the position of the logical stdout/stdin
 44522                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 44523                                  ; console.
 44524                                  		; DOSDATA:01F9h (MSDOS 6.21)
 44525 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 44526 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 44527                                  					;	   of buffered input call
 44528 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 44529 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 44530                                  		; DOSDATA:02FEh (MSDOS 6.21)
 44531 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 44532 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 44533 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 44534                                  switch_character:
 44535 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 44536 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 44537 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 44538 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 44539 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 44540                                  
 44541                                  ; The following table is a list of addresses that the sharer patches to be
 44542                                  ; PUSH AX to enable the critical sections
 44543                                  
 44544                                  		; DOSDATA:0315h (MSDOS 6.21)
 44545                                  
 44546                                  ;PUBLIC	CritPatch
 44547                                  
 44548                                  CritPatch:	; LABEL WORD
 44549                                  
 44550                                  ;IRP sect,<critDisk,critDevice>
 44551                                  
 44552                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 44553                                  ;
 44554                                  ;SR; Change code patch address to a variable in data segment
 44555                                  ;
 44556                                  ;       dw OFFSET DOSDATA: redir_patch
 44557                                  ;       dw OFFSET DOSDATA: redir_patch
 44558                                  ;
 44559                                  ;;hkn	Short_Addr  E&sect
 44560                                  ;;hkn	Short_Addr  L&sect
 44561                                  ;
 44562                                  ;ELSE
 44563                                  ;	DW	0
 44564                                  ;	DW	0
 44565                                  ;ENDIF
 44566                                  ;ENDM
 44567                                  ;	DW	0
 44568                                  
 44569                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 44570                                   
 44571 00000315 [0C0D]                  	dw 	redir_patch
 44572 00000317 [0C0D]                  	dw 	redir_patch			
 44573 00000319 [0C0D]                  	dw	redir_patch
 44574 0000031B [0C0D]                  	dw 	redir_patch
 44575                                  
 44576 0000031D 0000                    	dw	0
 44577                                  
 44578                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 44579                                  ; Also, IBM server 1.0 requires this also.
 44580                                  
 44581                                  	;EVEN			; Force swap area to start on word boundry
 44582 0000031F 90                      align 2
 44583                                  	;PUBLIC	SWAP_START
 44584                                  SWAP_START:	; LABEL BYTE
 44585 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 44586 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 44587 00000322 FF                      WPERR:		db -1		; Write protect error flag
 44588 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 44589 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 44590                                  
 44591                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 44592 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 44593 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 44594                                  ; end warning
 44595                                   
 44596 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 44597                                  
 44598 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 44599 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 44600 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 44601 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 44602 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 44603 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 44604                                  ;				; F.C. 2/17/86
 44605 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 44606 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 44607                                  ;align 2
 44608                                  SWAP_ALWAYS:	; 05/08/2018
 44609 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 44610                                  				;   extended error type stuff.
 44611                                  				;   NOTE: does not have Correct value on
 44612                                  				;   1-12, OEM, Get/Set CurrentPDB,
 44613                                  				;   GetExtendedError system calls)
 44614 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 44615 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 44616 00000340 0000                    FirstArena:	dw 0		; first free block found
 44617 00000342 0000                    BestArena:	dw 0		; best free block found
 44618 00000344 0000                    LastArena:	dw 0		; last free block found
 44619 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 44620 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 44621 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 44622 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 44623 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 44624 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 44625 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 44626                                  
 44627                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 44628                                  	;EVEN
 44629 0000034F 90                      align 2
 44630                                  		; DOSDATA:0350h (MSDOS 6.21)
 44631 00000350 00                      DAY:		db 0		; Day of month
 44632 00000351 00                      MONTH:		db 0		; Month of year
 44633 00000352 0000                    YEAR:		dw 0		; Year (with century)
 44634 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 44635 00000356 00                      WEEKDAY:	db 0		; Day of week
 44636                                  ; end warning
 44637                                  
 44638 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 44639 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 44640 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 44641                                  
 44642                                  ; Combination of all device call parameters
 44643                                  	;PUBLIC	DEVCALL 	;
 44644                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 44645                                  DEVCALL: ; 08/08/2018
 44646 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 44647 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 44648 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 44649 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 44650 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 44651                                  
 44652                                  	;PUBLIC	CALLUNIT
 44653                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 44654                                  CALLFLSH: ; LABEL   WORD	;
 44655 00000367 00                      CALLMED:	db 0		; media byte
 44656                                  CALLBR:	  ; LABEL   DWORD	;
 44657                                  	;PUBLIC	CALLXAD 	;
 44658                                  CALLXAD:  ; LABEL   DWORD	;
 44659 00000368 00                      CALLRBYT:	db 0		;
 44660                                  	;PUBLIC	CALLVIDM	;
 44661                                  CALLVIDM: ; LABEL   DWORD	;
 44662 00000369 00<rep 3h>              	times 3 db 0	;
 44663                                  	;PUBLIC CallBPB		;
 44664                                  CALLBPB:  ; LABEL   DWORD	;
 44665                                  CALLSCNT:			;
 44666 0000036C 0000                    		dw 0		;
 44667                                  	;PUBLIC	CALLSSEC	;
 44668                                  CALLSSEC: ; LABEL   WORD	;
 44669 0000036E 0000                    		dw 0		;
 44670 00000370 00000000                CALLVIDRW:	dd 0		;
 44671                                  ;MSDOS 6.0
 44672 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 44673 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 44674                                  
 44675                                  ; Same as above for I/O calls	;
 44676                                  				;
 44677                                  	;PUBLIC	IOCall		;
 44678                                  ;IOCALL	SRHEAD	<>		;
 44679                                  IOCALL:	; 07/08/2018
 44680 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 44681 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 44682 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 44683 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 44684 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 44685                                  IOFLSH:	  ; LABEL   WORD	;
 44686                                          ;PUBLIC  IORCHR		;
 44687                                  IORCHR:	  ; LABEL   BYTE	;
 44688 00000389 00                      IOMED:		db 0		;
 44689 0000038A 00000000                IOXAD:		dd 0		;
 44690 0000038E 0000                    IOSCNT:		dw 0		;	
 44691 00000390 0000                    IOSSEC:		dw 0		;
 44692                                  
 44693                                  ; Call struct for DSKSTATCHK	;
 44694 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 44695 00000393 00                      		db 0
 44696 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 44697 00000395 0000                    DSKSTST:	dw 0		;
 44698 00000397 00<rep 8h>              	times 8	db 0		;
 44699 0000039F 00                      DSKCHRET:	db 0		;
 44700                                  
 44701                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 44702                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 44703                                  ;hkn   short_addr  DEVIOBUF	;
 44704                                  	
 44705 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 44706 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 44707 000003A4 0100                    DSKSTCNT:	dw 1		;
 44708 000003A6 0000                    		dw 0		;
 44709                                  
 44710 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 44711                                  
 44712                                  ;MSDOS 6.0
 44713                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 44714 000003A9 00000000                		dd 0		;MS. position
 44715 000003AD 00000000                		dd 0		;MS. length
 44716                                  
 44717                                  ;hkn; the foll. was moved from dosmes.asm.
 44718                                  
 44719                                  	;EVEN
 44720 000003B1 90                      align 2				; needed to maintain offsets
 44721                                  
 44722                                  		; DOSDATA:03B2h (MSDOS 6.21)
 44723                                  USERNUM:
 44724 000003B2 0000                     		dw 0		; 24 bit user number
 44725 000003B4 00                      		db 0
 44726                                  ;IF IBM
 44727                                  ;IF IBMCOPYRIGHT
 44728                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 44729                                  ;ELSE
 44730                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 44731                                  ;ENDIF
 44732                                  ;ELSE
 44733 000003B5 FF                      OEMNUM:		DB 0FFh
 44734                                  ;ENDIF
 44735                                  
 44736                                  ;============================================================================
 44737                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 44738                                  ;============================================================================
 44739                                  ; 25/04/2019 - Retro DOS 4.0
 44740                                  
 44741                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 44742                                  ; ----------------------------------------------------------
 44743                                  ; This data section which was named as uninitialized data
 44744                                  ; (as overlayed by initialization code) but follows 
 44745                                  ; initialized data section from DOSDATA:03B6h address
 44746                                  ; (in otherwords, the method is different than MSDOS 3.3,
 44747                                  ; and there is not overlaying..)
 44748                                  ; **********************************************************
 44749                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 44750                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 44751                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 44752                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 44753                                  ; TIMEBUF is at offset 03B6h.
 44754                                  ; **********************************************************	
 44755                                  
 44756                                  ;Break <Uninitialized data overlayed by initialization code>
 44757                                  ;----------------------------------------------------------------------------
 44758                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 44759                                  ; Init code overlaps with data area below
 44760                                  
 44761                                  ; 	ORG     0
 44762                                  
 44763                                  MSDAT001S:	; label byte
 44764                                  
 44765                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 44766                                  TIMEBUF: ;	times 6 db 0
 44767 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 44768 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 44769                                  
 44770                                  ; The following areas are used as temp buffer in EXEC system call
 44771                                  
 44772                                  ; DOSDATA:03BEh
 44773                                  OPENBUF: ;times 64  dw	0
 44774 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 44775                                  RENBUF:	
 44776 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 44777                                  
 44778                                  ; Buffer for search calls
 44779                                  SEARCHBUF:	
 44780 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 44781                                  DUMMYCDS:  ;times 88 db 0
 44782 000004F3 00<rep 58h>             	times	curdirLen db 0
 44783                                  
 44784                                  ; End of contiguous buffer
 44785                                   
 44786                                  ; Temporary directory entry for use by many routines. Device directory
 44787                                  ; entries (bogus) are built here.
 44788                                  
 44789                                  ; DOSDATA:054Bh
 44790                                  
 44791                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 44792                                  
 44793                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 44794                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 44795                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 44796                                  
 44797                                  NAME1:	
 44798 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 44799                                  NAME2:
 44800 00000557 00<rep Dh>              	times	13 db	0 		;
 44801                                  DESTSTART:
 44802 00000564 0000                    	dw	0			;
 44803                                          ;DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 44804                                  	;times	5  db	0
 44805 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 44806                                  
 44807                                  ; End Temporary directory entry.
 44808                                  
 44809 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 44810                                  EXTFCB:	
 44811 0000056C 00                      	db	0		; TRUE => extended FCB in use
 44812                                  SATTRIB:
 44813 0000056D 00                      	db	0		; Storage for search attributes
 44814                                  OPEN_ACCESS:
 44815 0000056E 00                      	db	0		; access of open system call
 44816                                  FOUNDDEL:
 44817 0000056F 00                      	db	0		; true => file was deleted
 44818                                  FOUND_DEV:
 44819 00000570 00                      	db	0		; true => search found a device
 44820                                  FSPLICE:
 44821 00000571 00                      	db	0		; true => do a splice in transpath
 44822                                  FSHARING:
 44823 00000572 00                      	db	0		; TRUE => no redirection
 44824                                  SECCLUSPOS:
 44825 00000573 00                      	db	0		; Position of first sector within cluster
 44826 00000574 00                      TRANS:	db	0		;
 44827 00000575 00                      READOP:	db	0		;
 44828                                  THISDRV:
 44829 00000576 00                      	db	0		;
 44830                                  CLUSFAC:
 44831 00000577 00                      	db	0		;
 44832                                  CLUSSPLIT:
 44833 00000578 00                      	db	0		;
 44834                                  INSMODE:
 44835 00000579 00                      	db	0		; true => insert mode in buffered read
 44836 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 44837 0000057B 00                      VOLID:	db	0		;
 44838                                  EXIT_TYPE:
 44839 0000057C 00                      	db	0		; type of exit...
 44840                                   
 44841                                  	;EVEN
 44842                                  
 44843 0000057D 90                      align 2
 44844                                  
 44845                                  ; DOSDATA:057Eh
 44846                                  
 44847                                  ; WARNING - the following two items are accessed as a word
 44848                                  
 44849                                  CREATING:
 44850 0000057E 00                      	db	0		; true => creating a file
 44851 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 44852                                  				; = DIRFREE iff BUGBUG
 44853                                  EXITHOLD:
 44854 00000580 00000000                	dd	0		; Temp location for proc terminate
 44855                                  USER_SP:
 44856 00000584 0000                    	dw	0		; User SP for system call
 44857                                  USER_SS:
 44858 00000586 0000                    	dw	0		; User SS for system call
 44859                                  CONTSTK:
 44860 00000588 0000                    	dw	0		;
 44861                                  THISDPB:
 44862 0000058A 00000000                	dd	0		;
 44863                                  CLUSSAVE:
 44864 0000058E 0000                    	dw	0		;
 44865                                  CLUSSEC:
 44866 00000590 00000000                	dd	0		;>32mb			AC0000
 44867                                  PREREAD:
 44868 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 44869 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 44870                                  FATBYTE:
 44871 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 44872                                  ; DOSDATA:059Ah
 44873 0000059A 00000000                DEVPT:	dd	0		;
 44874                                  THISSFT:
 44875 0000059E 00000000                	dd	0		; Address of user SFT
 44876                                  THISCDS:
 44877 000005A2 00000000                	dd	0		; Address of current CDS
 44878                                  THISFCB:
 44879 000005A6 00000000                	dd	0		; Address of user FCB
 44880 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 44881 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 44882 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 44883                                  WFP_START:
 44884 000005B2 0000                    	dw	0		;
 44885                                  REN_WFP:
 44886 000005B4 0000                    	dw	0		;
 44887                                  CURR_DIR_END:
 44888 000005B6 0000                    	dw	0		;
 44889                                  NEXTADD:
 44890 000005B8 0000                    	dw	0		;
 44891                                  LASTPOS:
 44892 000005BA 0000                    	dw	0		;
 44893                                  CLUSNUM:
 44894 000005BC 0000                    	dw	0		;
 44895 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 44896                                  DIRSTART:
 44897 000005C2 0000                    	dw	0		;
 44898 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 44899 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 44900                                                                  ; sectors
 44901                                  BYTSECPOS:
 44902 000005CC 0000                    	dw	0		; Position of first byte within sector
 44903                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 44904 000005CE 0000<rep 2h>                    times	2 dw 0
 44905                                  BYTCNT1:
 44906 000005D2 0000                    	dw	0		; No. of bytes in first sector
 44907                                  BYTCNT2:
 44908 000005D4 0000                    	dw	0		; No. of bytes in last sector
 44909 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 44910                                  ; DOSDATA:05D8h
 44911                                  ENTFREE:
 44912 000005D8 0000                    	dw	0		;
 44913                                  ENTLAST:
 44914 000005DA 0000                    	dw	0		;
 44915                                  NXTCLUSNUM:
 44916 000005DC 0000                    	dw	0		;
 44917                                  GROWCNT:
 44918 000005DE 00000000                	dd	0		;
 44919 000005E2 00000000                CURBUF:	dd	0		;
 44920 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 44921 000005EA 0000                    SAVEBX:	dw	0		;
 44922 000005EC 0000                    SAVEDS:	dw	0		;
 44923                                  RESTORE_TMP:
 44924 000005EE 0000                    	dw	0		; return address for restore world
 44925 000005F0 0000                    NSS:	dw	0
 44926 000005F2 0000                    NSP:	dw	0
 44927                                  ; DOSDATA:05F4h
 44928                                  EXTOPEN_FLAG:
 44929 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 44930                                  EXTOPEN_ON:
 44931 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 44932                                  EXTOPEN_IO_MODE:
 44933 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 44934                                  SAVE_DI:
 44935 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 44936                                  SAVE_ES:
 44937 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 44938                                  SAVE_DX:
 44939 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 44940                                  SAVE_CX:
 44941 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 44942                                  SAVE_BX:
 44943 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 44944                                  SAVE_SI:
 44945 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 44946                                  SAVE_DS:
 44947 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 44948                                  
 44949                                  ; DOSDATA:0607h
 44950                                  
 44951                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 44952                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 44953                                  ; the high 16, the low 16 are still in the register.
 44954                                  
 44955                                  HIGH_SECTOR:	
 44956 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 44957                                  ;OffsetMagicPatch:
 44958                                  ;	dw	MagicPatch ;scottq 8/6/92
 44959                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44960 00000609 0000                    	dw	0
 44961                                  				;see dos\mpatch.asm
 44962                                  DISK_FULL:
 44963 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 44964                                  TEMP_VAR:
 44965 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 44966                                  TEMP_VAR2:
 44967 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 44968 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 44969                                  DOS34_FLAG:
 44970 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 44971                                  NO_FILTER_PATH:
 44972 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 44973                                  NO_FILTER_DPATH:
 44974 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 44975                                  ; M008
 44976                                  AbsRdWr_SS:
 44977 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 44978                                  AbsRdWr_SP:
 44979 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 44980                                  
 44981                                  	; I_am   UU_Callback_flag,BYTE,<0>  ; Unused
 44982                                  ; M008
 44983                                   
 44984                                   
 44985                                  ; make those pushes fast!!!
 44986                                  
 44987                                  ;EVEN
 44988                                  
 44989 0000061F 90                      align 2
 44990                                  
 44991                                  StackSize   equ 180h  ; 384	; gross but effective
 44992                                  
 44993                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 44994                                  ;				; made up their minds about
 44995                                   
 44996                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 44997                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 44998                                  
 44999                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 45000                                   
 45001 00000620 00<rep 180h>                    times	StackSize db	0	;
 45002                                  AUXSTACK:			; LABEL   BYTE
 45003                                   
 45004 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 45005                                  DSKSTACK:			; LABEL   BYTE
 45006                                   
 45007 00000920 00<rep 180h>                    times	StackSize db	0	;
 45008                                  IOSTACK:			; LABEL   BYTE
 45009                                  
 45010                                  ; DOSDATA:0AA0h 
 45011                                   
 45012                                  ; patch space for Boca folks.
 45013                                  ; Say What????!!! This does NOT go into the swappable area!
 45014                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 45015                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 45016                                   
 45017                                  IBMPATCH: ; label byte
 45018                                  PRINTER_FLAG:
 45019 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 45020                                  VOLCHNG_FLAG:
 45021 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 45022                                  VIRTUAL_OPEN:
 45023 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 45024                                   
 45025                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 45026                                  
 45027                                  FSeek_drive:
 45028 00000AA3 00                      	db	0		;AN000; fastseek drive #
 45029                                  FSeek_firclus:
 45030 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 45031                                  FSeek_logclus:
 45032 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 45033                                  FSeek_logsave:
 45034 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 45035                                  
 45036                                  ; DOSDATA:0AAAh
 45037                                  
 45038                                  TEMP_DOSLOC:
 45039 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 45040                                  				;at SYSINIT time.
 45041                                  SWAP_END:  ; LABEL   BYTE
 45042                                   
 45043                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 45044                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 45045                                  ; to include this byte.
 45046                                   
 45047 00000AAC 00                      	db	0
 45048                                  
 45049                                  ; DOSDATA:0AADh
 45050                                   
 45051                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 45052                                  
 45053                                  ;DOSDATA    ENDS
 45054                                  
 45055                                  ;============================================================================
 45056                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 45057                                  ;============================================================================
 45058                                  ; 27/04/2019 - Retro DOS 4.0
 45059                                  ; 16/07/2018 - Retro DOS 3.0
 45060                                  
 45061                                  ;DOSDATA Segment
 45062                                  
 45063                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 45064                                  
 45065                                  ;
 45066                                  ; upper case table
 45067                                  ; ---------------------------------------------------------------------------
 45068                                  UCASE_TAB:	; label   byte
 45069 00000AAD 8000                    	dw	128
 45070 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 45071 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 45072 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 45073 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 45074 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 45075 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 45076 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45077 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45078 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45079 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45080 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45081 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45082 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 45083 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45084 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45085 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45086                                  ;
 45087                                  ; file upper case table
 45088                                  ; ---------------------------------------------------------------------------
 45089                                  FILE_UCASE_TAB:	; label  byte
 45090 00000B2F 8000                    	dw	128
 45091 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 45092 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 45093 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 45094 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 45095 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 45096 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 45097 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45098 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45099 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45100 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45101 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45102 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45103 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 45104 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45105 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45106 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45107                                  ;
 45108                                  ; file char list
 45109                                  ; ---------------------------------------------------------------------------
 45110                                  FILE_CHAR_TAB:	; label  byte
 45111 00000BB1 1600                    	dw	22				; length
 45112 00000BB3 0100FF                  	db	1,0,255 			; include all
 45113 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 45114 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 45114 00000BC2 7C3C3E2B3D3B2C     
 45115                                  	;db	24 dup (?)			; reserved
 45116 00000BC9 00<rep 18h>             	times	24 db 0
 45117                                  
 45118                                  ;
 45119                                  ; collate table
 45120                                  ; ---------------------------------------------------------------------------
 45121                                  COLLATE_TAB:	; label   byte
 45122 00000BE1 0001                    	dw	256
 45123 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 45124 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 45125 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 45126 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 45127 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 45128 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 45129 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 45130 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 45131 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 45132 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45133 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45134 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 45135 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 45136 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45137 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45138 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 45139 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 45140 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 45141 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 45142 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 45143 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 45144 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 45145 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45146 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45147 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45148 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45149 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45150 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45151 00000CC3 E053                    	db	224,"S"
 45152 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 45153 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45154 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45155 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45156                                  
 45157                                  ; ------------------------------------------------<MSKK01>----------------------
 45158                                  
 45159                                  ; DOSDATA:0CE3h
 45160                                  
 45161                                  ; 29/04/2019
 45162                                  
 45163                                  ; dbcs is not supported in DOS 3.3
 45164                                  ;		   DBCS_TAB	    CC_DBCS <>
 45165                                  ;
 45166                                  ; DBCS for DOS 4.00			   2/12/KK
 45167                                  
 45168                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 45169                                  ; ------------------------------------------------<MSKK01>----------------------
 45170                                  ;ifdef	DBCS
 45171                                  ; ifdef	  JAPAN
 45172                                  ;		dw	6		; <MSKK01>
 45173                                  ;		db	081h,09fh	; <MSKK01>
 45174                                  ;		db	0e0h,0fch	; <MSKK01>
 45175                                  ;		db	0,0		; <MSKK01>
 45176                                  ;
 45177                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 45178                                  ; endif
 45179                                  ; ifdef	  TAIWAN
 45180                                  ;		dw	4		; <TAIWAN>
 45181                                  ;		db	081h,0FEh	; <TAIWAN>
 45182                                  ;		db	0,0		; <TAIWAN>
 45183                                  ;
 45184                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45185                                  ; endif
 45186                                  ; ifdef   KOREA                         ; Keyl
 45187                                  ;               dw      4               ; <KOREA>
 45188                                  ;               db      0A1h,0FEh       ; <KOREA>
 45189                                  ;               db      0,0             ; <KOREA>
 45190                                  ;
 45191                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45192                                  ;  endif
 45193                                  ;else
 45194 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 45195                                  		;db	16 dup(0)	;AN000;  2/12/KK
 45196 00000CE5 00<rep 10h>             		times	16 db 0
 45197                                  
 45198                                  ;		dw	6		;  2/12/KK
 45199                                  ;		db	081h,09Fh	;  2/12/KK
 45200                                  ;		db	0E0h,0FCh	;  2/12/KK
 45201                                  ;		db	0,0		;  2/12/KK
 45202                                  ;
 45203                                  ;endif
 45204                                  ; ------------------------------------------------<MSKK01>----------------------
 45205                                  
 45206                                  ; DOSDATA:0CF5h
 45207                                  
 45208                                  ; ---------------------------------------------------------------------------
 45209                                  ;
 45210                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 45211                                  ;     ENTRY: AL = Character to map
 45212                                  ;     EXIT:  AL = The converted character
 45213                                  ; Alters no registers except AL and flags.
 45214                                  ; The routine should do nothing to chars below 80H.
 45215                                  ; ---------------------------------------------------------------------------
 45216                                  ; Example:
 45217                                  
 45218                                  MAP_CASE:
 45219                                  ;Procedure MAP_CASE,FAR
 45220                                  
 45221 00000CF5 3C80                    	CMP	AL,80h
 45222 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 45223 00000CF9 CB                      	RETF
 45224                                  Map1:
 45225 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 45226 00000CFC 1E                      	PUSH	DS
 45227 00000CFD 53                      	PUSH	BX
 45228 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 45229                                  FINISH:
 45230 00000D01 0E                      	PUSH	CS		;Move to DS
 45231 00000D02 1F                      	POP	DS
 45232 00000D03 D7                      	XLAT			;Get upper case character
 45233 00000D04 5B                      	POP	BX
 45234 00000D05 1F                      	POP	DS
 45235                                  L_RET:	
 45236 00000D06 CB                      	RETF
 45237                                  
 45238                                  ;EndProc MAP_CASE
 45239                                  
 45240                                  ; ---------------------------------------------------------------------------
 45241                                  
 45242                                  ; The variables for ECS version are moved here for the same data alignments
 45243                                  ; as IBM-DOS and MS-DOS.
 45244                                  
 45245                                  InterChar:
 45246 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 45247                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 45248                                  DUMMY:	; LABEL   WORD
 45249                                  InterCon:  
 45250 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 45251                                  SaveCurFlg:
 45252 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 45253                                  
 45254                                  ; ---------------------------------------------------------------------------
 45255                                  
 45256 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 45257                                  redir_patch:
 45258 00000D0C 00                      	  db	0
 45259                                  
 45260                                  ; DOSDATA:0D0Dh
 45261                                  
 45262                                  Mark1:	; label byte
 45263                                  
 45264                                  ;IF2
 45265                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 45266                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45267                                  ;	ENDIF
 45268                                  ;ENDIF
 45269                                  
 45270 00000D0D 00<rep 5h>              	  times 5 db 0
 45271                                  
 45272                                  ;############################################################################
 45273                                  ;
 45274                                  ; ** HACK FOR DOS 4.0 REDIR **
 45275                                  ; 
 45276                                  ; The redir requires the following:
 45277                                  ;
 45278                                  ;	MSVERS	offset D12H
 45279                                  ;	YRTAB	offset D14H
 45280                                  ; 	MONTAB	offset D1CH
 45281                                  ;
 45282                                  ; WARNING! WARNING!
 45283                                  ; 
 45284                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 45285                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 45286                                  ;
 45287                                  ; CURRENTLY MARK1 = 0D0DH
 45288                                  ;
 45289                                  ;############################################################################
 45290                                  
 45291                                  	;ORG	0D12h
 45292                                  
 45293                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 45294                                  
 45295                                  	;db	6
 45296                                  	;db	20
 45297                                  
 45298                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 45299                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 45300 00000D12 05                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 45301 00000D13 00                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 45302                                  
 45303                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 45304                                  ;
 45305                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
 45306                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
 45307                                  
 45308                                  ; Days in year
 45309                                  
 45310                                  YRTAB:   
 45311 00000D14 C8A6                    	DB	200,166			; Leap year
 45312 00000D16 C8A5                    	DB	200,165
 45313 00000D18 C8A5                    	DB	200,165
 45314 00000D1A C8A5                    	DB	200,165
 45315                                  
 45316                                  ; Days of each month
 45317                                  
 45318                                  MONTAB:        
 45319 00000D1C 1F                      	DB      31                      ; January
 45320                                  february:
 45321 00000D1D 1C                      	DB	28 			; February--reset each 
 45322                                  					; time year changes
 45323 00000D1E 1F                              DB      31                      ; March
 45324 00000D1F 1E                              DB      30                      ; April
 45325 00000D20 1F                              DB      31                      ; May
 45326 00000D21 1E                              DB      30                      ; June
 45327 00000D22 1F                              DB      31                      ; July
 45328 00000D23 1F                              DB      31                      ; August
 45329 00000D24 1E                              DB      30                      ; September
 45330 00000D25 1F                              DB      31                      ; October
 45331 00000D26 1E                              DB      30                      ; November
 45332 00000D27 1F                              DB      31                      ; December
 45333                                  
 45334                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 45335                                  
 45336                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 45337                                  
 45338                                  SysInitTable:
 45339                                  	;dw	SYSINITVAR
 45340 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 45341 00000D2A 0000                            dw      0		; segment
 45342 00000D2C [0512]                          dw	COUNTRY_CDPG	; pointer to country tabl
 45343 00000D2E 0000                            dw      0		; segment of pointer
 45344                                  
 45345                                  ; DOS 3.3 F.C. 6/12/86
 45346                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 45347                                  
 45348                                  FastTable:				; a better name
 45349                                  FastOpenTable:
 45350 00000D30 0200                    	dw      2                       ; number of entries
 45351 00000D32 [8F12]                  	dw      FastRet			; pointer to ret instr.
 45352 00000D34 0000                    	dw      0                       ; and will be modified by
 45353 00000D36 [8F12]                  	dw      FastRet			; FASTxxx when loaded in
 45354 00000D38 0000                    	dw      0                       
 45355                                  
 45356                                  ; DOS 3.3 F.C. 6/12/86
 45357                                  
 45358                                  FastFlg:				; flags
 45359                                  FastOpenFlg:
 45360 00000D3A 00                      	db	0			; don't change the foll: order  
 45361                                  
 45362                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 45363                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 45364                                  ; or filled by FastOPen when calling FastOpen Lookup
 45365                                  
 45366                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 45367                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 45368                                  	;times	11 db 0
 45369 00000D3B 00<rep Bh>              	times	FEI.size db 0
 45370                                  
 45371                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 45372                                  ; when calling FastOpen Lookup
 45373                                  
 45374                                  Dir_Info_Buff:	; label  byte
 45375                                  	;db   	SIZE dir_entry dup (0)
 45376                                  	;times	32 db 0
 45377 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 45378                                  
 45379                                  Next_Element_Start:
 45380 00000D66 0000                    	dw	0			; save next element start offset
 45381                                  Del_ExtCluster:
 45382 00000D68 0000                    	dw	0			; for dos_delete                       
 45383                                  
 45384                                  ; The following is a stack and its pointer for interrupt 2F which is used
 45385                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 45386                                  ; not to destroy the INT 21 stack saved for the user.
 45387                                  
 45388                                  USER_SP_2F:	; LABEL  WORD
 45389 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 45390                                  
 45391                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 45392                                  DOS_TEMP:	; label  word		; temporary word
 45393                                  FAKE_STACK_2F:  
 45394                                  	; dw  14 dup (0)		; 12 register temporary storage
 45395 00000D6C 0000<rep Eh>            	times 14 dw 0
 45396                                  
 45397                                  Hash_Temp: 	;label  word		; temporary word             
 45398                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 45399 00000D88 0000<rep 4h>            	times 4 dw 0
 45400                                              	
 45401                                  SCAN_FLAG:	
 45402 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 45403                                  DATE_FLAG:
 45404 00000D91 0000                    	dw     0                	; flag to update the date
 45405                                  
 45406                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 45407 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 45408                                  
 45409                                  MSG_EXTERROR:	; label  DWORD   ; for system message addr                                                       
 45410 00000D95 00000000                	dd     0               		; for extended error                   
 45411 00000D99 00000000                	dd     0			; for parser                           
 45412 00000D9D 00000000                	dd     0			; for critical errror                  
 45413 00000DA1 00000000                	dd     0			; for IFS                              
 45414 00000DA5 00000000                	dd     0			; for code reduction                   
 45415                                  
 45416                                  SEQ_SECTOR:	; label  DWORD 		; last sector read                                                     
 45417 00000DA9 FFFFFFFF                	dd     -1                                                        
 45418                                  SC_SECTOR_SIZE:
 45419 00000DAD 0000                    	dw	0			; sector size for SC                 
 45420                                  SC_DRIVE:
 45421 00000DAF 00                      	db	0			; drive # for secondary cache        
 45422                                  CurSC_DRIVE:
 45423 00000DB0 FF                      	db	-1			; current SC drive                   
 45424                                  CurSC_SECTOR:
 45425 00000DB1 00000000                	dd	0			; current SC starting sector         
 45426                                  SC_STATUS:
 45427 00000DB5 0000                    	dw	0			; SC status word                     
 45428                                  SC_FLAG:
 45429 00000DB7 00                      	db	0			; SC flag                            
 45430                                  AbsDskErr:
 45431 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 45432                                                                                            
 45433                                  NO_NAME_ID:	; label byte                                                           
 45434 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id                      
 45434 00000DC3 2020               
 45435                                  
 45436                                  ;hkn; moved from TABLE segment in kstrin.asm
 45437                                  
 45438                                  KISTR001S:	; label	byte		; 2/17/KK
 45439 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 45440                                  KISTR001E:	; label	byte		; 2/17/KK
 45441                                  
 45442                                  ; the nul device driver used to be part of the code. However, since the 
 45443                                  ; header is in the data, and the entry points are only given as an offset,
 45444                                  ; the strategy and interrupt entry points must also be in the data now.
 45445                                  
 45446                                  ; DOSDATA:0DC6h
 45447                                  
 45448                                  SNULDEV:
 45449                                  ;procedure snuldev,far
 45450                                  	;or	word [es:bx+3],100h
 45451                                  	; 17/12/2022
 45452                                  	;or	byte [es:bx+4],01h
 45453                                  	; 05/01/2024 (Original MSDOS and RetroDOS DATA address compatibility)
 45454                                  	;or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 45455 00000DC6 26814F030001            	or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 45456                                  INULDEV:
 45457 00000DCC CB                      	retf				; must not be a return!
 45458                                  ;endproc snuldev
 45459                                  
 45460                                  ;M044
 45461                                  ; Second part of save area for saving last para of Windows memory
 45462                                  
 45463                                  WinoldPatch2:
 45464                                  	;db	8 dup (?)	; M044
 45465 00000DCD 00<rep 8h>              	times	8 db 0	
 45466                                  UmbSave2:
 45467                                  	;db	5 dup (?)	; M062
 45468 00000DD5 00<rep 5h>              	times	5 db 0
 45469                                  UmbSaveFlag:
 45470 00000DDA 00                      	db	0		; M062
 45471                                  
 45472                                  ; DOSDATA:0DDBh
 45473                                  
 45474                                  Mark2:	; label byte
 45475                                  
 45476                                  ;IF2
 45477                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 45478                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45479                                  ;	ENDIF
 45480                                  ;ENDIF
 45481                                  
 45482                                  ;############################################################################
 45483                                  ;
 45484                                  ; ** HACK FOR DOS 4.0 REDIR **
 45485                                  ; 
 45486                                  ; The redir requires the following:
 45487                                  ;
 45488                                  ;	ERR_TABLE_21	offset DDBH
 45489                                  ;	ERR_TABLE_24	offset E5BH
 45490                                  ; 	ErrMap24	offset EABH
 45491                                  ;
 45492                                  ; WARNING! WARNING!
 45493                                  ;
 45494                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 45495                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 45496                                  ;
 45497                                  ; CURRENTLY MARK2 = 0DD0H
 45498                                  ;
 45499                                  ;############################################################################
 45500                                  
 45501                                  	;ORG	0DDBh
 45502                                  
 45503                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 45504                                  
 45505                                  ; ---------------------------------------------------------------------------
 45506                                  ;
 45507                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 45508                                  ; errors. Each entry is 4 bytes long:
 45509                                  ;
 45510                                  ;       Err#,Class,Action,Locus
 45511                                  ;
 45512                                  ; A value of 0FFh indicates a call specific value (ie. should already
 45513                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 45514                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 45515                                  ;
 45516                                  ; ---------------------------------------------------------------------------
 45517                                  
 45518                                  ;ErrTab  Macro   err,class,action,locus
 45519                                  ;ifidn <locus>,<0FFh>
 45520                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 45521                                  ;ELSE
 45522                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 45523                                  ;ENDIF
 45524                                  ;ENDM
 45525                                  
 45526                                  ERR_TABLE_21: ; LABEL   BYTE
 45527 00000DDB 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 45528 00000DDF 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45529 00000DE3 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45530 00000DE7 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 45531 00000DEB 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 45532 00000DEF 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45533 00000DF3 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 45534 00000DF7 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45535 00000DFB 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 45536 00000DFF 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 45537 00000E03 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 45538 00000E07 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45539 00000E0B 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 45540 00000E0F 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45541 00000E13 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 45542 00000E17 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 45543 00000E1B 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45544 00000E1F 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 45545 00000E23 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45546 00000E27 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45547 00000E2B 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 45548 00000E2F 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 45549 00000E33 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 45550 00000E37 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 45551 00000E3B 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 45552 00000E3F 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 45553 00000E43 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 45554 00000E47 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45555                                      ; MSDOS 6.0
 45556 00000E4B 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 45557 00000E4F 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 45558 00000E53 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 45559 00000E57 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 45560                                  
 45561                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 45562                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 45563                                  ;		db 2,8,3,2
 45564                                  ;		db 3,8,3,2
 45565                                  ;		db 4,1,4,1
 45566                                  ;		db 5,3,3,0FFh
 45567                                  ;		db 6,7,4,1
 45568                                  ;		db 7,7,5,5
 45569                                  ;		db 8,1,4,5
 45570                                  ;		db 9,7,4,5
 45571                                  ;		db 0Ah,7,4,5
 45572                                  ;		db 0Bh,9,3,1
 45573                                  ;		db 0Ch,7,4,1
 45574                                  ;		db 0Dh,9,4,1
 45575                                  ;		db 0Fh,8,3,2
 45576                                  ;		db 10h,3,3,2
 45577                                  ;		db 11h,0Dh,3,2
 45578                                  ;		db 12h,8,3,2
 45579                                  ;		db 50h,0Ch,3,2
 45580                                  ;		db 20h,0Ah,2,2
 45581                                  ;		db 21h,0Ah,2,2
 45582                                  ;		db 54h,1,4,0FFh
 45583                                  ;		db 56h,3,3,1
 45584                                  ;		db 52h,1,4,2
 45585                                  ;		db 32h,9,3,3
 45586                                  ;		db 55h,0Ch,3,3
 45587                                  ;		db 57h,9,3,1
 45588                                  ;		db 53h,0Dh,4,1
 45589                                  ;		db 24h,1,4,5
 45590                                  ; MSDOS 6.0 (MSDOS 6.21)
 45591                                  ;		db 26h,1,4,1
 45592                                  ;		db 27h,1,4,1
 45593                                  ;		db 5Ah,0Dh,4,2
 45594                                  ; MSDOS 6.0 & MSDOS 3.3
 45595                                  ;		db 0FFh,0FFh,0FFh,0FFh
 45596                                  
 45597                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 45598                                  
 45599                                  ; ---------------------------------------------------------------------------
 45600                                  ;
 45601                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 45602                                  ; errors. Each entry is 4 bytes long:
 45603                                  ;
 45604                                  ;       Err#,Class,Action,Locus
 45605                                  ;
 45606                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 45607                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 45608                                  ; THE END.
 45609                                  ;
 45610                                  ; ---------------------------------------------------------------------------
 45611                                  
 45612                                  ERR_TABLE_24: ; LABEL   BYTE
 45613 00000E5B 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45614 00000E5F 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45615 00000E63 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 45616 00000E67 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45617 00000E6B 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 45618 00000E6F 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45619 00000E73 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 45620 00000E77 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45621 00000E7B 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 45622 00000E7F 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 45623 00000E83 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 45624 00000E87 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 45625 00000E8B 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 45626 00000E8F 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45627 00000E93 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45628 00000E97 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45629 00000E9B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 45630 00000E9F 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45631 00000EA3 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45632 00000EA7 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 45633                                  
 45634                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 45635                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 45636                                  ;		db 14h,4,5,1
 45637                                  ;		db 15h,5,7,0FFh
 45638                                  ;		db 16h,4,5,1
 45639                                  ;		db 17h,0Bh,4,2
 45640                                  ;		db 18h,4,5,1
 45641                                  ;		db 19h,5,1,2
 45642                                  ;		db 1Ah,0Bh,7,2
 45643                                  ;		db 1Bh,0Bh,4,2
 45644                                  ;		db 1Ch,2,7,4
 45645                                  ;		db 1Dh,5,4,0FFh
 45646                                  ;		db 1Eh,5,4,0FFh
 45647                                  ;		db 1Fh,0Dh,4,0FFh
 45648                                  ;		db 20h,0Ah,2,2
 45649                                  ;		db 21h,0Ah,2,2
 45650                                  ;		db 22h,0Bh,7,2
 45651                                  ;		db 32h,9,3,3
 45652                                  ;		db 23h,7,4,1
 45653                                  ;		db 24h,1,4,5
 45654                                  ;		db 0FFh,0Dh,5,0FFh
 45655                                  
 45656                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 45657                                  
 45658                                  ; ---------------------------------------------------------------------------
 45659                                  ;
 45660                                  ; We need to map old int 24 errors and device driver errors into the new set
 45661                                  ; of errors. The following table is indexed by the new errors
 45662                                  ;
 45663                                  ; ---------------------------------------------------------------------------
 45664                                  
 45665                                  ;Public  ErrMap24
 45666                                  ErrMap24: ; Label   BYTE
 45667 00000EAB 13                          DB  error_write_protect	; 0
 45668 00000EAC 14                          DB  error_bad_unit		; 1
 45669 00000EAD 15                          DB  error_not_ready		; 2
 45670 00000EAE 16                          DB  error_bad_command	; 3
 45671 00000EAF 17                          DB  error_CRC		; 4
 45672 00000EB0 18                          DB  error_bad_length	; 5
 45673 00000EB1 19                          DB  error_seek		; 6
 45674 00000EB2 1A                          DB  error_not_DOS_disk	; 7
 45675 00000EB3 1B                          DB  error_sector_not_found	; 8
 45676 00000EB4 1C                          DB  error_out_of_paper	; 9
 45677 00000EB5 1D                          DB  error_write_fault	; A
 45678 00000EB6 1E                          DB  error_read_fault	; B
 45679 00000EB7 1F                          DB  error_gen_failure	; C
 45680 00000EB8 1F                          DB  error_gen_failure	; D  RESERVED
 45681 00000EB9 1F                          DB  error_gen_failure	; E  RESERVED
 45682 00000EBA 22                          DB  error_wrong_disk	; F
 45683                                  
 45684                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 45685                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 45686                                  	
 45687                                  ErrMap24End: ; LABEL   BYTE
 45688                                  
 45689                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 45690                                  
 45691                                  ; ---------------------------------------------------------------------------
 45692                                  
 45693                                  ; 27/04/2019 - Retro DOS v4.0
 45694                                  
 45695                                  FIRST_BUFF_ADDR:
 45696 00000EBB 0000                    	dw	0			; first buffer address               
 45697                                  SPECIAL_VERSION:
 45698 00000EBD 0000                    	dw	0			;AN006; used by INT 2F 47H
 45699                                  FAKE_COUNT:
 45700 00000EBF 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 45701                                  OLD_FIRSTCLUS:
 45702 00000FBE 0000                    	dw	0			;AN011; save old first cluster for fastopen
 45703                                  
 45704                                  ; ---------------------------------------------------------------------------
 45705                                  
 45706                                  ;smr; moved from TABLE segment in exec.asm
 45707                                  
 45708 00000FC0 0000                    exec_init_SP: dw 0
 45709 00000FC2 0000                    exec_init_SS: dw 0
 45710 00000FC4 0000                    exec_init_IP: dw 0
 45711 00000FC6 0000                    exec_init_CS: dw 0
 45712                                  
 45713                                  exec_signature:
 45714 00000FC8 0000                    	dw	0	; must contain 4D5A (yay zibo!)
 45715                                  exec_len_mod_512:
 45716 00000FCA 0000                    	dw	0	; low 9 bits of length
 45717                                  exec_pages:
 45718 00000FCC 0000                    	dw	0	; number of 512b pages in file
 45719                                  exec_rle_count:
 45720 00000FCE 0000                    	dw	0	; count of reloc entries
 45721                                  exec_par_dir:
 45722 00000FD0 0000                    	dw	0	; number of paragraphs before image
 45723                                  exec_min_BSS:
 45724 00000FD2 0000                    	dw	0	; minimum number of para of BSS
 45725                                  exec_max_BSS:
 45726 00000FD4 0000                    	dw	0	; max number of para of BSS
 45727                                  exec_SS:
 45728 00000FD6 0000                    	dw	0	; stack of image
 45729                                  exec_SP:
 45730 00000FD8 0000                    	dw	0	; SP of image
 45731                                  exec_chksum:
 45732 00000FDA 0000                    	dw	0	; checksum of file (ignored)
 45733                                  exec_IP:
 45734 00000FDC 0000                    	dw	0	; IP of entry
 45735                                  exec_CS:
 45736 00000FDE 0000                    	dw	0	; CS of entry
 45737                                  exec_rle_table:
 45738 00000FE0 0000                    	dw	0	; byte offset of reloc table
 45739                                  
 45740                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 45741                                  
 45742                                  ;smr; eom
 45743                                  
 45744                                  ; ---------------------------------------------------------------------------
 45745                                  
 45746                                  ;SR;
 45747                                  ; WIN386 instance table for DOS
 45748                                  
 45749                                  Win386_Info:
 45750 00000FE2 0300                    	db	3, 0
 45751 00000FE4 000000000000000000-     	dd	0, 0, 0
 45751 00000FED 000000             
 45752 00000FF0 [F40F]0000              	dw	Instance_Table, 0
 45753                                  
 45754                                  Instance_Table:
 45755 00000FF4 [2200]00000200          	dw	CONTPOS, 0, 2
 45756 00000FFA [3200]00000400          	dw	BCON, 0, 4
 45757 00001000 [F901]00000601          	dw	CARPOS, 0, 106h
 45758 00001006 [0003]00000100          	dw	CHARCO, 0, 1
 45759 0000100C [C00F]00002200          	dw	exec_init_SP, 0, 34	; M074
 45760 00001012 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 45761 00001018 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 45762 0000101E 00000000                	dw	0, 0
 45763                                  
 45764                                  ; M001; SR;
 45765                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 45766                                  ; M001; some DOS variables. Note that the only really important variable in 
 45767                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 45768                                  ; M001; which does not need to be done in DOS 5.0. 
 45769                                  
 45770                                  ; 29/12/2022
 45771                                  ; (MSDOS 6.21 MSDOS.SYS DOSDATA:1022h)
 45772                                  
 45773                                  Win386_DOSVars:
 45774 00001022 05                      	db	5	;Major version 5 ; M001
 45775 00001023 00                      	db	0	;Minor version 0 ; M001
 45776 00001024 [EC05]                  	dw	SAVEDS	; M001
 45777 00001026 [EA05]                  	dw	SAVEBX	; M001
 45778 00001028 [2103]                  	dw	INDOS	; M001
 45779 0000102A [3E03]                  	dw	USER_ID	; M001
 45780 0000102C [1503]                  	dw	CritPatch ; M001
 45781 0000102E [8C00]                  	dw	UMB_HEAD ; M012
 45782                                  
 45783                                  ;SR;
 45784                                  ; Flag to indicate whether WIN386 is running or not
 45785                                  
 45786 00001030 00                      IsWin386: db	0
 45787                                  
 45788                                  ;M018
 45789                                  ; This variable contains the path to the VxD device needed for Win386
 45790                                  
 45791 00001031 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 45791 0000103A 2E33383600         
 45792                                  
 45793                                  ;End WIN386 support
 45794                                  
 45795                                  ; ---------------------------------------------------------------------------
 45796                                  
 45797                                  ;SR;
 45798                                  ; These variables have been added for the special lie support for device
 45799                                  ;drivers.
 45800                                  ;
 45801                                  
 45802                                  DriverLoad:	
 45803 0000103F 01                      	db	1	;initialized to do special handling
 45804                                  BiosDataPtr:
 45805 00001040 00000000                	dd	0
 45806                                  
 45807                                  ; 29/12/2022 - Retro DOS v4.1
 45808                                  %if 0
 45809                                  
 45810                                  ; 27/04/2019 - Retro DOS v4.0
 45811                                  ; 04/11/2022
 45812                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 45813                                  
 45814                                  ;------------------------------------------------------------------------
 45815                                  ; Patch for Sidekick
 45816                                  ;
 45817                                  ; A documented method for finding the offset of the Errormode flag in the 
 45818                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 45819                                  ; for the following sequence of instructions.
 45820                                  ;
 45821                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 45822                                  ;
 45823                                  ; The Offset of Errormode flag is 0320h
 45824                                  ;
 45825                                  ;------------------------------------------------------------------------
 45826                                  
 45827                                  	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 45828                                  	db	075h, 0Ch			 ; jnz  NearLabel
 45829                                  	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 45830                                  	db	0CDh, 028h			 ; int  28h
 45831                                  
 45832                                  ;--------------------------------------------------------------------------
 45833                                  ; Patch for PortOfEntry - M036
 45834                                  ;
 45835                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 45836                                  ; the offset of Errormode flag. The following patch is to support them in 
 45837                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 45838                                  ;
 45839                                  ;---------------------------------------------------------------------------
 45840                                  
 45841                                  	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 45842                                  	db	075h, 037h			 ; jnz	NearLabel
 45843                                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 45844                                  
 45845                                  %endif ; 29/12/2022
 45846                                  
 45847                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 45848                                  
 45849                                  ;--------------------------------------------------------------------------
 45850                                  
 45851                                  ;*** New FCB Implementation
 45852                                  ; This variable is used as a cache in the new FCB implementation to remember
 45853                                  ;the address of a local SFT that can be recycled for a regenerate operation
 45854                                  
 45855 00001044 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 45856                                  
 45857                                  ;DOSDATA ENDS
 45858                                  
 45859                                  ;============================================================================
 45860                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 45861                                  ;============================================================================
 45862                                  ; 27/04/2019 - Retro DOS 4.0
 45863                                  
 45864                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 45865                                  
 45866                                  ;---------------------------------------------------------------------------
 45867                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 45868                                  ;----------------------------------------------------------------------------
 45869                                  	
 45870                                  	;db	90h
 45871                                  
 45872                                  	;EVEN
 45873                                  align 2
 45874                                  
 45875                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 45876                                  
 45877                                  DOSINTTABLE:	; LABEL	DWORD
 45878                                  
 45879                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 45880                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 45881                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 45882                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 45883                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 45884                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 45885                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 45886                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 45887                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 45888                                  	
 45889 00001048 [B551]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 45890 0000104C [DB02]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4	
 45891 00001050 [0703]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 45892 00001054 [3105]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 45893 00001058 [B805]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 45894 0000105C [EF60]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 45895 00001060 [0707]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 45896 00001064 [E202]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 45897 00001068 [E102]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 45898                                  
 45899 0000106C 0000                    SS_Save: dw	0		; save user's stack segment
 45900 0000106E 0000                    SP_Save: dw	0		; save user's stack offset
 45901                                  
 45902                                  ;-------------------------------------------------------------------------
 45903                                  ;
 45904                                  ; LOW MEM STUB:
 45905                                  ;
 45906                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 45907                                  ; handled by DOS. This stub is installed if the user specifies that the 
 45908                                  ; DOS load in HIMEM. Each entry point does this.
 45909                                  ;
 45910                                  ; 	1. if jmp to 8 has been patched out
 45911                                  ;	   2. if A20 OFF
 45912                                  ;	      3. Enable A20
 45913                                  ;	   4. else 
 45914                                  ;	      5. just go to dos entry
 45915                                  ;	   6. endif
 45916                                  ;	7. else
 45917                                  ;	   8. just go to dos entry
 45918                                  ;	9. endif
 45919                                  ;
 45920                                  ;--------------------------------------------------------------------------
 45921                                  
 45922                                  ; 27/04/2019 - Retro DOS v4.0
 45923                                  
 45924                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 45925                                  
 45926                                  ;--------------------------------------------------------------------------
 45927                                  ;
 45928                                  ; DIVIDE BY 0 handler
 45929                                  ;
 45930                                  ;--------------------------------------------------------------------------
 45931                                  
 45932                                  ldivov:
 45933                                  	; The following jump, skipping the XMS calls will be patched to 
 45934                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45935                                  	; needed because the stub is installed even before the XMS driver
 45936                                  	; is loaded if the user specifies dos=high in the config.sys
 45937                                  i0patch:
 45938 00001070 EB03                    	jmp	short divov_cont	
 45939                                  
 45940 00001072 E8E000                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45941                                  divov_cont:
 45942 00001075 2EFF2E[4810]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 45943                                  
 45944                                  ;------------------------------------------------------------------------
 45945                                  ;
 45946                                  ; INT 20 Handler
 45947                                  ;
 45948                                  ; Here we do not have to set up the stack to return here as the abort call
 45949                                  ; will return to the address after the int 21 ah=4b call. This would be the
 45950                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 45951                                  ; will be restored then.
 45952                                  ;
 45953                                  ;-------------------------------------------------------------------------
 45954                                  
 45955                                  lquit:
 45956                                  	; The following jump, skipping the XMS calls will be patched to 
 45957                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45958                                  	; needed because the stub is installed even before the XMS driver
 45959                                  	; is loaded if the user specifies dos=high in the config.sys
 45960                                  i20patch:
 45961 0000107A EB03                    	jmp	short quit_cont	
 45962                                  
 45963 0000107C E8D600                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45964                                  quit_cont:
 45965 0000107F 2EFF2E[4C10]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 45966                                  
 45967                                  ;--------------------------------------------------------------------------
 45968                                  ;
 45969                                  ; INT 21 Handler
 45970                                  ;
 45971                                  ;--------------------------------------------------------------------------
 45972                                  
 45973                                  lcommand:
 45974                                  	; The following jump, skipping the XMS calls will be patched to 
 45975                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45976                                  	; needed because the stub is installed even before the XMS driver
 45977                                  	; is loaded if the user specifies dos=high in the config.sys
 45978                                  i21patch:
 45979 00001084 EB03                    	jmp	short command_cont	
 45980                                  
 45981 00001086 E8CC00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45982                                  command_cont:
 45983 00001089 2EFF2E[5010]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 45984                                  
 45985                                  ;------------------------------------------------------------------------
 45986                                  ;
 45987                                  ; INT 25 
 45988                                  ;
 45989                                  ;----------------------------------------------------------------------------
 45990                                  
 45991                                  labsdrd:
 45992                                  	; The following jump, skipping the XMS calls will be patched to 
 45993                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45994                                  	; needed because the stub is installed even before the XMS driver
 45995                                  	; is loaded if the user specifies dos=high in the config.sys
 45996                                  i25patch:
 45997 0000108E EB03                    	jmp	short absdrd_cont	
 45998                                  
 45999 00001090 E8C200                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46000                                  absdrd_cont:
 46001 00001093 2EFF2E[5410]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 46002                                  
 46003                                  ;-------------------------------------------------------------------------
 46004                                  ;
 46005                                  ; INT 26
 46006                                  ;
 46007                                  ;-----------------------------------------------------------------------
 46008                                  
 46009                                  labsdwrt:
 46010                                  	; The following jump, skipping the XMS calls will be patched to 
 46011                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46012                                  	; needed because the stub is installed even before the XMS driver
 46013                                  	; is loaded if the user specifies dos=high in the config.sys
 46014                                  i26patch:
 46015 00001098 EB03                    	jmp	short absdwrt_cont	
 46016                                  
 46017 0000109A E8B800                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46018                                  absdwrt_cont:
 46019 0000109D 2EFF2E[5810]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 46020                                  
 46021                                  ;------------------------------------------------------------------------
 46022                                  ;
 46023                                  ; INT 27
 46024                                  ;
 46025                                  ;-----------------------------------------------------------------------
 46026                                  
 46027                                  lstay_resident:
 46028                                  	; The following jump, skipping the XMS calls will be patched to 
 46029                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46030                                  	; needed because the stub is installed even before the XMS driver
 46031                                  	; is loaded if the user specifies dos=high in the config.sys
 46032                                  i27patch:
 46033 000010A2 EB03                    	jmp	short sr_cont	
 46034                                  
 46035 000010A4 E8AE00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46036                                  sr_cont:
 46037 000010A7 2EFF2E[5C10]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 46038                                  
 46039                                  ;-----------------------------------------------------------------------------
 46040                                  ;
 46041                                  ; INT 2f
 46042                                  ;
 46043                                  ;-------------------------------------------------------------------------
 46044                                  
 46045                                  lint2f:
 46046                                  	; The following jump, skipping the XMS calls will be patched to 
 46047                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46048                                  	; needed because the stub is installed even before the XMS driver
 46049                                  	; is loaded if the user specifies dos=high in the config.sys
 46050                                  i2fpatch:
 46051 000010AC EB03                    	jmp	short int2f_cont	
 46052                                  
 46053 000010AE E8A400                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46054                                  int2f_cont:
 46055 000010B1 2EFF2E[6010]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 46056                                  
 46057                                  ;-----------------------------------------------------------------------------
 46058                                  ;
 46059                                  ; CPM entry
 46060                                  ;
 46061                                  ;------------------------------------------------------------------------
 46062                                  
 46063                                  lcall_entry:
 46064                                  	; The following jump, skipping the XMS calls will be patched to 
 46065                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46066                                  	; needed because the stub is installed even before the XMS driver
 46067                                  	; is loaded if the user specifies dos=high in the config.sys
 46068                                  cpmpatch:
 46069 000010B6 EB03                    	jmp	short callentry_cont	
 46070                                  
 46071 000010B8 E89A00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46072                                  callentry_cont:
 46073 000010BB 2EFF2E[6410]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 46074                                  
 46075                                  ;--------------------------------------------------------------------------
 46076                                  
 46077                                  lirett:
 46078 000010C0 CF                      	iret
 46079                                  
 46080                                  ;---------------------------------------------------------------------------
 46081                                  ;
 46082                                  ; LowIntXX:
 46083                                  ;
 46084                                  ; Interrupts from DOS that pass control to a user program must be done from
 46085                                  ; low memory, as the user program may change the state of the A20 line or
 46086                                  ; they may require that the A20 line be OFF. The following piece of code is
 46087                                  ; far call'd from the following places in DOS:
 46088                                  ;
 46089                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 46090                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 46091                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 46092                                  ;
 46093                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 46094                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 46095                                  ; before doing the ints and then do a far junp back into DOS.
 46096                                  ;
 46097                                  ;---------------------------------------------------------------------------
 46098                                  
 46099 000010C1 00000000                DosRetAddr23:	dd	0
 46100 000010C5 00000000                DosRetAddr24:	dd	0
 46101 000010C9 00000000                DosRetAddr28:	dd	0
 46102                                  
 46103                                  	; Execute int 23h from low memory
 46104                                  LowInt23:
 46105                                  					; save the return address that is on
 46106                                  					; the stack
 46107 000010CD 2E8F06[C110]            	pop	word [cs:DosRetAddr23]
 46108 000010D2 2E8F06[C310]            	pop	word [cs:DosRetAddr23+2]
 46109                                  
 46110 000010D7 CD23                    	int	23h			; ctrl C
 46111                                  					; turn on A20 it has been turned OFF
 46112                                  					; by int 28/23/24 handler.
 46113                                  
 46114 000010D9 E87900                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 46115                                  
 46116 000010DC 2EFF2E[C110]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 46117                                  
 46118                                  
 46119                                  	; Execute int 24h from low memory
 46120                                  LowInt24:
 46121                                  					; save the return address that is on
 46122                                  					; the stack
 46123 000010E1 2E8F06[C510]            	pop	word [cs:DosRetAddr24]
 46124 000010E6 2E8F06[C710]            	pop	word [cs:DosRetAddr24+2]
 46125                                  
 46126 000010EB CD24                    	int	24h			; crit error
 46127                                  					; turn on A20 it has been turned OFF
 46128                                  					; by int 28/23/24 handler.
 46129                                  
 46130 000010ED E86500                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 46131                                  
 46132 000010F0 2EFF2E[C510]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 46133                                  
 46134                                  
 46135                                   
 46136                                  	; Execute int 28h from low memory
 46137                                  LowInt28:
 46138 000010F5 CD28                    	int	28h			; idle int
 46139                                  					; turn on A20 it has been turned OFF
 46140                                  					; by int 28/23/24 handler.
 46141                                  
 46142 000010F7 E85B00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 46143                                  
 46144 000010FA CB                      	retf
 46145                                  
 46146                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 46147                                  
 46148                                  ;-------------------------------------------------------------------------
 46149                                  ;
 46150                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 46151                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 46152                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 46153                                  ; This is so because exepac'd programs rely on address wrap.
 46154                                  ;
 46155                                  ;------------------------------------------------------------------------- 
 46156                                  
 46157                                  disa20_xfer:
 46158 000010FB E83F00                  	call	XMMDisableA20		; disable A20
 46159                                  
 46160                                  	; Look at msproc.asm at label exec_go for understanding the following:
 46161                                  
 46162                                  	; DS:SI points to entry point
 46163                                  	; AX:DI points to initial stack
 46164                                  	; DX has PDB pointer
 46165                                  	; BX has initial AX value
 46166                                  
 46167 000010FE FA                      	cli
 46168 000010FF 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 46169                                  
 46170 00001105 8ED0                    	mov	SS,AX			; set up user's stack
 46171 00001107 89FC                    	mov	SP,DI			; and SP
 46172 00001109 FB                      	sti
 46173                                  
 46174 0000110A 1E                      	push	DS			; fake long call to entry
 46175 0000110B 56                      	push	SI
 46176 0000110C 8EC2                    	mov	ES,DX			; set up proper seg registers
 46177 0000110E 8EDA                    	mov	DS,DX
 46178 00001110 89D8                    	mov	AX,BX			; set up proper AX
 46179 00001112 CB                      	retf
 46180                                  
 46181                                  ;-------------------------------------------------------------------------
 46182                                  ;
 46183                                  ; M003:
 46184                                  ;
 46185                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 46186                                  ; come here, turn A20 OFF restore user stack and registers before returning 
 46187                                  ; to user. This is done in dos\msdisp.asm. This has been done to support 
 46188                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for 
 46189                                  ; more info.	
 46190                                  ;
 46191                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that 
 46192                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 46193                                  ; stack to avoid additional stack overhead for the user.
 46194                                  ;
 46195                                  ; -------------------------------------------------------------------------
 46196                                  
 46197                                  disa20_iret:
 46198 00001113 E82700                  	call	XMMDisableA20
 46199 00001116 FE0E[2103]              	dec	byte [INDOS]
 46200 0000111A 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 46201 0000111E 8B26[8405]              	mov	SP,[USER_SP]
 46202 00001122 89E5                    	mov	BP,SP
 46203                                  	;mov	[BP+user_env.user_AX],AL
 46204 00001124 884600                  	mov	[bp],al
 46205 00001127 A1[F205]                	mov	AX,[NSP]
 46206 0000112A A3[8405]                	mov	[USER_SP],AX
 46207 0000112D A1[F005]                	mov	AX,[NSS]
 46208 00001130 A3[8605]                	mov	[USER_SS],AX
 46209                                  
 46210 00001133 58                      	pop	AX			; restore user regs
 46211 00001134 5B                      	pop	BX
 46212 00001135 59                      	pop	CX
 46213 00001136 5A                      	pop	DX
 46214 00001137 5E                      	pop	SI
 46215 00001138 5F                      	pop	DI
 46216 00001139 5D                      	pop	BP
 46217 0000113A 1F                      	pop	DS
 46218 0000113B 07                      	pop	ES
 46219 0000113C CF                      	iret
 46220                                  
 46221                                  ;**************************************************************************
 46222                                  ;***	XMMDisableA20 - switch 20th address line			      
 46223                                  ;									      
 46224                                  ;	This routine is used to disable the 20th address line in 	      
 46225                                  ;	the system using XMM calls.					      
 46226                                  ;									      
 46227                                  ;	ENTRY	none		;ds = _DATA				      
 46228                                  ;	EXIT	A20 line disabled					      
 46229                                  ;	USES	NOTHING					      
 46230                                  ;									      
 46231                                  ;**************************************************************************
 46232                                  
 46233                                  XMMDisableA20:
 46234 0000113D 53                      	push	bx
 46235 0000113E 50                      	push	ax
 46236                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 46237 0000113F B406                    	mov	ah,6
 46238 00001141 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 46239 00001146 58                      	pop	ax
 46240 00001147 5B                      	pop	bx
 46241 00001148 C3                      	retn
 46242                                  
 46243                                  ; The entry point in the BIOS XMS driver is defined here.
 46244                                  
 46245                                  XMMcontrol:
 46246 00001149 00000000                	dd	0
 46247                                  
 46248                                  ;--------------------------------------------------------------------------
 46249                                  ;
 46250                                  ;***	EnsureA20ON - Ensures that A20 is ON
 46251                                  ;									      
 46252                                  ;	This routine is used to query the A20 state in		 	      
 46253                                  ;	the system using XMM calls.					      
 46254                                  ;									      
 46255                                  ;	ENTRY: none		
 46256                                  ;
 46257                                  ;	EXIT : A20 will be ON
 46258                                  ;		
 46259                                  ; 	USES : NONE								      
 46260                                  ;									      
 46261                                  ;--------------------------------------------------------------------------
 46262                                  
 46263                                  LowMemory:	; label dword		; Set equal to 0000:0080
 46264 0000114D 8000                    	dw	00080h
 46265 0000114F 0000                    	dw	00000h
 46266                                  
 46267                                  HighMemory:	; label dword
 46268 00001151 9000                    	dw	00090h			; Set equal to FFFF:0090
 46269 00001153 FFFF                    	dw	0FFFFh
 46270                                  
 46271                                  EnsureA20ON:
 46272 00001155 9C                      	pushf
 46273 00001156 1E                      	push    ds
 46274 00001157 06                      	push	es
 46275 00001158 51                      	push	cx
 46276 00001159 56                      	push	si
 46277 0000115A 57                      	push	di
 46278                                  
 46279 0000115B 2EC536[4D11]            	lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 46280 00001160 2EC43E[5111]            	les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 46281 00001165 B90400                  	mov	cx,4
 46282 00001168 FC                      	cld
 46283 00001169 F3A7                    	repe    cmpsw
 46284                                  
 46285 0000116B 7407                    	jz	short EA20_OFF
 46286                                  EA20_RET:
 46287 0000116D 5F                      	pop	di
 46288 0000116E 5E                      	pop	si
 46289 0000116F 59                      	pop	cx
 46290 00001170 07                      	pop	es
 46291 00001171 1F                      	pop	ds
 46292 00001172 9D                      	popf
 46293 00001173 C3                      	retn
 46294                                  
 46295                                  EA20_OFF:
 46296                                  	; We are going to do the XMS call on the DOS's AuxStack.
 46297                                  	; NOTE: ints are disabled at this point.
 46298                                  
 46299 00001174 53                      	push	bx
 46300 00001175 50                      	push	ax
 46301                                  
 46302 00001176 8CD0                    	mov	ax,ss			; save user's stack pointer
 46303 00001178 2EA3[6C10]              	mov	[cs:SS_Save],ax
 46304 0000117C 2E8926[6E10]            	mov	[cs:SP_Save],sp
 46305 00001181 8CC8                    	mov	ax,cs
 46306 00001183 8ED0                    	mov	ss,ax
 46307 00001185 BC[A007]                	mov	sp,AUXSTACK
 46308                                  					; ss:sp -> DOSDATA:AuxStack
 46309                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 46310 00001188 B405                    	mov	ah,5
 46311 0000118A 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 46312 0000118F 09C0                    	or	ax,ax
 46313 00001191 740F                    	jz	short XMMerror		; AX = 0 fatal error
 46314                                  
 46315 00001193 2EA1[6C10]              	mov	ax,[cs:SS_Save]		; restore user stack
 46316 00001197 8ED0                    	mov	ss,ax
 46317 00001199 2E8B26[6E10]            	mov	sp,[cs:SP_Save]
 46318                                  
 46319 0000119E 58                      	pop	ax
 46320 0000119F 5B                      	pop	bx
 46321                                  
 46322 000011A0 EBCB                    	jmp	short EA20_RET
 46323                                  
 46324                                  XMMerror:				; M006 - Start
 46325 000011A2 B40F                    	mov	ah,0Fh			; get video mode
 46326 000011A4 CD10                    	int	10h
 46327 000011A6 3C07                    	cmp	al,7			; Q: are we an MDA
 46328 000011A8 7406                    	je	short XMMcont			; Y: do not change mode
 46329 000011AA 30E4                    	xor	ah,ah ; 0			; set video mode
 46330 000011AC B002                    	mov	al,02h			; 80 X 25 text
 46331 000011AE CD10                    	int	10h
 46332                                  XMMcont:
 46333 000011B0 B405                    	mov	ah,05h			; set display page
 46334 000011B2 30C0                    	xor	al,al			; page 0
 46335 000011B4 CD10                    	int	10h
 46336                                  	
 46337 000011B6 BE[9312]                	mov	si,XMMERRMSG
 46338 000011B9 0E                      	push	cs
 46339 000011BA 1F                      	pop	ds
 46340 000011BB FC                      	cld				; clear direction flag
 46341                                  XMMprnt:
 46342 000011BC AC                      	lodsb
 46343 000011BD 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 46344 000011BF 7409                    	jz	short XMMStall		; function 0Eh	
 46345 000011C1 B40E                    	mov	ah,0Eh
 46346 000011C3 BB0700                  	mov	bx,7
 46347 000011C6 CD10                    	int	10h
 46348 000011C8 EBF2                    	jmp	short XMMprnt
 46349                                  
 46350                                  XMMStall:
 46351 000011CA FB                      	sti				; allow the user to warm boot
 46352 000011CB EBFD                    	jmp	short XMMStall		; M006 - End
 46353                                  
 46354                                  ;---------------------------------------------------------------------------
 46355                                  
 46356                                  ; 27/04/2019 - Retro DOS v4.0
 46357                                  
 46358                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 46359                                  ALTAH	equ 0Ch
 46360                                  
 46361                                  ;This has been put in for WIN386 2.XX support. The format of the instance 
 46362                                  ;table was different for this. Segments will be patched in at init time.
 46363                                  
 46364                                  OldInstanceJunk:
 46365 000011CD 7000                    	dw	70h	;segment of BIOS
 46366 000011CF 0000                    	dw	0	;indicate stacks in SYSINIT area
 46367 000011D1 0600                    	dw	6	;5 instance items
 46368                                  
 46369                                  	;dw	0,offset dosdata:contpos, 2
 46370                                  	;dw	0,offset dosdata:bcon, 4
 46371                                  	;dw	0,offset dosdata:carpos,106h
 46372                                  	;dw	0,offset dosdata:charco, 1
 46373                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 46374                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 46375                                  
 46376 000011D3 0000[2200]0200          	dw	0,CONTPOS,2
 46377 000011D9 0000[3200]0400          	dw	0,BCON,4
 46378 000011DF 0000[F901]0601          	dw	0,CARPOS,106h
 46379 000011E5 0000[0003]0100          	dw	0,CHARCO,1
 46380 000011EB 0000[C00F]2200          	dw	0,exec_init_SP,34
 46381 000011F1 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 46382                                  
 46383                                  ;---------------------------------------------------------------------------
 46384                                  
 46385                                  ; M021-
 46386                                  ;
 46387                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 46388                                  ; 	takes control of the HMA. When running, this word is a reliable
 46389                                  ;	indicator that the DOS is actually using HMA. You can't just use
 46390                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 46391                                  
 46392                                  DosHasHMA:
 46393 000011F7 00                      	db	0
 46394                                  FixExePatch:
 46395 000011F8 0000                    	dw	0		; M012
 46396                                  ; 28/12/2022 - Retro DOS v4.1
 46397                                  ;RationalPatchPtr:
 46398                                  ;	dw	0		; M012
 46399                                  
 46400                                  ; End M021
 46401                                  
 46402                                  ;---------------------------------------------------------------------------
 46403                                  
 46404                                  ; 28/12/2022 - Retro DOS v4.1
 46405                                  %if 0
 46406                                  ; M020 Begin
 46407                                  
 46408                                  RatBugCode:	; proc	far
 46409                                  	push	cx
 46410                                  	mov	cx,[10h]
 46411                                  rbc_loop:
 46412                                  	;loop	$
 46413                                  	loop	rbc_loop
 46414                                  	pop	cx
 46415                                  	retf
 46416                                  		
 46417                                  ; M020 End
 46418                                  %endif
 46419                                  
 46420                                  ;---------------------------------------------------------------------------
 46421                                  	
 46422                                  UmbSave1:
 46423                                  	;db	11 dup (?)	; M023
 46424 000011FA 00<rep Bh>              	times	11 db 0	
 46425                                  
 46426                                  ; DOSDATA:122Ah
 46427                                  
 46428                                  Mark3:	; label byte
 46429                                  
 46430                                  ;IF2
 46431                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 46432                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 46433                                  ;	ENDIF
 46434                                  ;ENDIF
 46435                                  
 46436                                  ;############################################################################
 46437                                  ;
 46438                                  ; ** HACK FOR DOS 4.0 REDIR **
 46439                                  ;
 46440                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 46441                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 46442                                  ; COUNTRY_CDPG if it can. 
 46443                                  ;
 46444                                  ; MARK3 SHOULD NOT BE > 122AH 
 46445                                  ;
 46446                                  ; As of 9/6/90, this area is FULL!
 46447                                  ;
 46448                                  ;############################################################################
 46449                                   
 46450                                  	;ORG	0122Ah
 46451                                  
 46452                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 46453                                  
 46454                                  ; The following table is used for DOS 3.3
 46455                                  ;DOS country and code page information is defined here for DOS 3.3.
 46456                                  ;The initial value for ccDosCountry is 1 (USA).
 46457                                  ;The initial value for ccDosCodepage is 850.
 46458                                  
 46459                                  ; country and code page information
 46460                                  ; ---------------------------------------------------------------------------
 46461                                  COUNTRY_CDPG:	; label  byte
 46462 00001205 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 46463 0000120D 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 46463 00001216 53595300           
 46464                                  	;db   51 dup (?)
 46465 0000121A 00<rep 33h>             	times 51 db 0
 46466                                  ; ------------------------------------------------<MSKK01>-------------------
 46467                                  ;ifdef	DBCS
 46468                                  ;  ifdef JAPAN
 46469                                  ;	dw   932			; system code page id (JAPAN)
 46470                                  ;  endif
 46471                                  ;  ifdef TAIWAN
 46472                                  ;	dw   938			; system code page id (TAIWAN)
 46473                                  ;  endif
 46474                                  ;  ifdef KOREA
 46475                                  ;	dw   934			; system code page id (KOREA IBM)
 46476                                  ;  endif
 46477                                  ;else
 46478 0000124D B501                    	dw   437			; system code page id
 46479                                  ;endif
 46480                                  ; ------------------------------------------------<MSKK01>-------------------
 46481 0000124F 0600                    	dw   6				; number of entries
 46482 00001251 02                      	db   SetUcase  ; 2		; Ucase type
 46483 00001252 [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 46484 00001254 0000                    	dw   0				; segment of poiter
 46485 00001256 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 46486 00001257 [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 46487 00001259 0000                    	dw   0				; segment of poiter
 46488 0000125B 05                      	db   SetFileList ; 5		; valid file chars type
 46489 0000125C [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 46490 0000125E 0000                    	dw   0				; segment of poiter
 46491 00001260 06                      	db   SetCollate	; 6		; collate type
 46492 00001261 [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 46493 00001263 0000                    	dw   0				; segment of poiter
 46494 00001265 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 46495 00001266 [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 46496 00001268 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 46497 0000126A 01                      	db   SetCountryInfo  ; 1	; country info type
 46498 0000126B 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 46499                                  ; ------------------------------------------------<MSKK01>-------------------
 46500                                  ;ifdef	DBCS
 46501                                  ;	...... 
 46502                                  ;else
 46503 0000126D 0100                    	dw   1				; USA country id
 46504 0000126F B501                    	dw   437			; USA system code page id
 46505 00001271 0000                    	dw   0 				; date format
 46506 00001273 2400000000              	db   '$',0,0,0,0		; currency symbol
 46507 00001278 2C00                    	db   ',',0			; thousand separator
 46508 0000127A 2E00                    	db   '.',0			; decimal separator
 46509 0000127C 2D00                    	db   '-',0			; date separator
 46510 0000127E 3A00                    	db   ':',0			; time separator
 46511 00001280 00                      	db   0				; currency format flag
 46512 00001281 02                      	db   2				; # of digits in currency
 46513 00001282 00                      	db   0 				; time format
 46514 00001283 [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 46515 00001285 0000                    	dw   0				; segment of entry point
 46516 00001287 2C00                    	db   ',',0			; data list separator
 46517 00001289 000000000000000000-     	dw   0,0,0,0,0			; reserved
 46517 00001292 00                 
 46518                                  ;endif
 46519                                  ; ------------------------------------------------<MSKK01>-------------------
 46520                                  
 46521                                  ; 27/04/2019 - Retro DOS v4.0
 46522                                  
 46523                                  ;include msdos.cl2			; XMMERRMSG
 46524                                  
 46525                                  ; DOSDATA:12B8h (MSDOS 6.21, MSDOS.SYS) ; 17/01/2024
 46526                                  
 46527                                  XMMERRMSG:
 46528 00001293 0D0A                    	db	0Dh,0Ah
 46529 00001295 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 46529 0000129E 617265204572726F72-
 46529 000012A7 0D0A24             
 46530                                  
 46531                                  ; DOSDATA ends
 46532                                  
 46533                                  ; 05/11/2022
 46534                                  ;----------------------------------------------------------------------------
 46535                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 46536                                  ;----------------------------------------------------------------------------
 46537                                  
 46538                                  ; 28/12/2022 - Retro DOS v4.1
 46539                                  ; (windows 3.1 and Rational Extender patches are removed/disabled)
 46540                                  ; (Windows 3.1 does not use the patches below if DOS version is MSDOS 5.0)
 46541                                  ;----------------------------------------------------------------------------
 46542                                  %if 0
 46543                                  ;----------------------------------------------------------------------------
 46544                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46545                                  
 46546                                  ;============================================================================
 46547                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 46548                                  ;============================================================================
 46549                                  ; 27/04/2019 - Retro DOS 4.0
 46550                                  
 46551                                  ;DOSDATA Segment
 46552                                  
 46553                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 46554                                  
 46555                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46556                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 46557                                  
 46558                                  ; first and second DOS patches
 46559                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 46560                                  ;
 46561                                  ; Code in disk.asm, 2 locations, one for read, one for write
 46562                                  ;	DVRDLP:
 46563                                  ;	DVWRTLP:
 46564                                  ;
 46565                                  ;
 46566                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 46567                                  ;	lds	si,si+7 				  ; sf_devptr
 46568                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 46569                                  
 46570                                  DOSP1_ID:	db	036h,0C5h,036h
 46571                                  DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 46572                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 46573                                  
 46574                                  		db	90h, 90h
 46575                                  
 46576                                  DOSP12_ID:	db	036h,0C5h,036h
 46577                                  DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 46578                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 46579                                  
 46580                                  ; DOSDATA:12E3h
 46581                                  
 46582                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 46583                                  ;
 46584                                  ; Code in disk.asm, 1 location
 46585                                  ;	GETBUF:
 46586                                  ;
 46587                                  ; 051h	push	cx	<- begin special int28 mode
 46588                                  ;	push	es
 46589                                  ;	push	di
 46590                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 46591                                  ;	call	????	; $STD_CON_STRING_INPUT
 46592                                  ;	pop	di
 46593                                  ;	pop	es
 46594                                  ; 059h	pop	cx	<- end special int28 mode
 46595                                  
 46596                                  DOSP3_ID:	db	051h,006h,057h,0BAh
 46597                                  DOSP3_CONBUF:	db	029h,002h,0E8h
 46598                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 46599                                  		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 46600                                  DOSP4_ID:	db	059h			; pop cx
 46601                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 46602                                  	
 46603                                  ; DOSDATA:12EFh
 46604                                  
 46605                                  ; Fifth DOS patch - System call 40h (Write) to console
 46606                                  ;
 46607                                  ; Code in disk.asm, 1 location
 46608                                  ;
 46609                                  ;		push	cx
 46610                                  ;      WRCONLP: lodsb
 46611                                  ;		cmp	al,1Ah
 46612                                  ;		jz	????
 46613                                  ;		call	????	<- "simulate" int28 event
 46614                                  ;		loop	WRCONLP
 46615                                  ;      CONEOF:	pop	ax
 46616                                  
 46617                                  DOSP5_ID:	db	051h			; push cx
 46618                                  		db	0ACh,03Ch,01Ah,074h,005h
 46619                                  		db	0E8h			; call
 46620                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 46621                                  
 46622                                  ; DOSDATA:12F6h
 46623                                  
 46624                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 46625                                  ;
 46626                                  ; Code in disp.asm, 1 location
 46627                                  ;
 46628                                  ;
 46629                                  ;	mov [SaveDS],ds
 46630                                  ;	mov [SaveBX],bx
 46631                                  ;	mov bx,cs
 46632                                  ;	mov ds,bx
 46633                                  ;	inc [indos]
 46634                                  ;	xor ax,ax
 46635                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 46636                                  
 46637                                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 46638                                  DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 46639                                  		db	02Eh,089h,01Eh
 46640                                  DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 46641                                  		db	08Ch,0CBh		; mov bx,cs
 46642                                  		db	08Eh,0DBh		; mov ds,bx
 46643                                  		db	0FEh,006h
 46644                                  DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 46645                                  		db	033h,0C0h		; xor ax,ax
 46646                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 46647                                  
 46648                                  ; DOSDATA:130Ah
 46649                                  
 46650                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 46651                                  ;
 46652                                  ; Code in handle.asm, 1 location in routine CheckOwner
 46653                                  ;
 46654                                  ;
 46655                                  ;
 46656                                  ;	push	ax
 46657                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 46658                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 46659                                  ;	pop	ax
 46660                                  ;	jz	????
 46661                                  
 46662                                  DOSP8_ID:	db	050h			; push ax
 46663                                  		db	036h,0A1h
 46664                                  DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 46665                                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 46666                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 46667                                  		db	02Fh,058h		; pop  ax
 46668                                  
 46669                                  ; DOSDATA:1314h
 46670                                  
 46671                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 46672                                  ;
 46673                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 46674                                  ;   a yeild when a character is not ready to be read.
 46675                                  ;
 46676                                  ; Code in disk.asm, 3 locations
 46677                                  ;
 46678                                  ;   DVRDRAW:
 46679                                  ;	    PUSH    ES
 46680                                  ;	    POP     DS
 46681                                  ;   ReadRawRetry:				<- Patch 10
 46682                                  ;	    MOV     BX,DI
 46683                                  ;	    XOR     AX,AX			<- Reenter #2
 46684                                  ;	    MOV     DX,AX
 46685                                  ;	    call    SETREAD
 46686                                  ;	    PUSH    DS				<- Reenter #1
 46687                                  ;	    LDS     SI,[THISSFT]
 46688                                  ;	    call    DEVIOCALL
 46689                                  ;	    MOV     DX,DI
 46690                                  ;	    MOV     AH,86H
 46691                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 46692                                  ;	    TEST    DI,STERR
 46693                                  ;	    JZ	    CRDROK
 46694                                  ;	    call    CHARHARD
 46695                                  ;	    MOV     DI,DX
 46696                                  ;	    OR	    AL,AL
 46697                                  ;	    JZ	    CRDROK
 46698                                  ;	    CMP     AL,3
 46699                                  ;	    JZ	    CRDFERR
 46700                                  ;	    POP     DS
 46701                                  ;	    JMP     ReadRawRetry
 46702                                  ;
 46703                                  ;   CRDFERR:
 46704                                  ;	    POP     DI				<- Patch 11
 46705                                  ;   DEVIOFERR:
 46706                                  ;	    LES     DI,[THISSFT]
 46707                                  ;	    jmp     SET_ACC_ERR_DS
 46708                                  ;
 46709                                  ;   CRDROK:
 46710                                  ;	    POP     DI				<- Patch 12
 46711                                  ;	    MOV     DI,DX
 46712                                  ;	    ADD     DI,[CALLSCNT]
 46713                                  ;	    JMP     SHORT ENDRDDEVJ3
 46714                                  
 46715                                  DOSP10_ID:		db	006H,01FH
 46716                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 46717                                  DOSP10_LOC:		db	08BH,0DFH
 46718                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 46719                                  			db	033H,0C0H,08BH,0D0H,0E8H
 46720                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 46721                                  			db	0DFH,00EH
 46722                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 46723                                  			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 46724                                  			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 46725                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 46726                                  			db	009H,003H
 46727                                  			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 46728                                  			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 46729                                  			db	01FH,0EBH,0CFH
 46730                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 46731                                  			db	05FH
 46732                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 46733                                  			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 46734                                  
 46735                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 46736                                  			db	05FH,08BH,0FAH
 46737                                  ; DOSDATA:1353h
 46738                                  
 46739                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 46740                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 46741                                  ;
 46742                                  ;	    Sets focus to current VM so user can see fatal message.
 46743                                  ;
 46744                                  ;
 46745                                  ;	l0: lodsb		<- Setfocus here
 46746                                  ;	    cmp al, '$'
 46747                                  ;	    je l1
 46748                                  ;	    mov bl, 7
 46749                                  ;	    mov ah, 0Eh
 46750                                  ;	    int 10h
 46751                                  ;	    jmp l0
 46752                                  ;	l1: jmp $
 46753                                  
 46754                                  DOSP13_ID:	db	0ACh			; l0: lodsb
 46755                                  		db	03Ch,024h		;     cmp al, '$'
 46756                                  		db	074h,008h		;     je l1
 46757                                  		db	0B3h,007h		;     mov bl, 7
 46758                                  		db	0B4h,00Eh		;     mov ah, 0Eh
 46759                                  		db	0CDh,010h		;     int 10h
 46760                                  		db	0EBh,0F3h		;     jmp l0
 46761                                  		db	0EBh,0FEh		; l1: jmp $
 46762                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 46763                                  
 46764                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46765                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 46766                                  
 46767                                  ; 06/12/2022
 46768                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 46769                                  
 46770                                  ; DOSDATA ends
 46771                                  
 46772                                  ;============================================================================
 46773                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 46774                                  ;============================================================================
 46775                                  ; 27/04/2019 - Retro DOS 4.0
 46776                                  
 46777                                  ;mpatch.asm -- holds data patch location for callouts 
 46778                                  ; -- allocate cluster in rom.asm
 46779                                  ;
 46780                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 46781                                  ; Currently, this location is used only by magicdrv.sys's patch to
 46782                                  ; cluster allocation, however it can be expanded to be used by other
 46783                                  ; patches. This is important since we have an easy-access pointer to
 46784                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 46785                                  ; only patch out a far call/retf, so any space after that could be
 46786                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 46787                                  ; to call out here.
 46788                                  ;
 46789                                  ; Currently, we allocate only the minimum space required for the 6
 46790                                  ; byte magicdrv patch, so if you change the dos data, you may want
 46791                                  ; to reserve space here if your new data will be position dependent
 46792                                  ; and would prohibit growing of this table.
 46793                                  ;       
 46794                                  ;history	-	created 8-7-92 by scottq
 46795                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 46796                                  ;
 46797                                  ;Exported Functions
 46798                                  ;==================
 46799                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 46800                                  
 46801                                  ; DosData Segment
 46802                                  
 46803                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 46804                                  
 46805                                  ; ---------------------------------------------------------------------------
 46806                                  
 46807                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 46808                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 46809                                  ; greater). Added to this file because it needed to be somewhere and is
 46810                                  ; 'patch' related.
 46811                                  
 46812                                  Rational386PatchPtr:
 46813                                  	dw	0	; points to patch routine or RET instr.
 46814                                  ; ---------------------------------------------------------------------------
 46815                                  
 46816                                  MagicPatch:
 46817                                  ;MagicPatch proc far
 46818                                          retf            ;default is to just return to allocate
 46819                                          nop             ;however, this code will be patched
 46820                                          nop             ;by magicdrv.sys to
 46821                                          nop             ; call far ?:?     
 46822                                          nop             ; retf or perhaps just jmp far
 46823                                          nop             ;retf/nop take one byte, so we need six instructions
 46824                                                          ;for 6 byte patch
 46825                                  ;MagicPatch endp
 46826                                  
 46827                                  ; ---------------------------------------------------------------------------
 46828                                  
 46829                                  ;DosData Ends
 46830                                  
 46831                                  ; DOSDATA:136Ah
 46832                                  
 46833                                  ;----------------------------------------------------------------------------
 46834                                  
 46835                                  ;DOSDATALAST SEGMENT
 46836                                  
 46837                                  ; 29/04/2019 - Retro DOS v4.0
 46838                                  
 46839                                  ;----------------------------------------------------------------------------
 46840                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 46841                                  
 46842                                  db 0,1,12,64,19,0 ; ! Magic numbers !
 46843                                  
 46844                                  ;align 16
 46845                                  
 46846                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 46847                                  
 46848                                  ;----------------------------------------------------------------------------
 46849                                  
 46850                                  %endif	; 05/11/2022
 46851                                  
 46852                                  ; 05/12/2022
 46853                                  ;MSDAT001E:	; label byte
 46854                                  
 46855                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46856                                  DOSDATAEND equ $
 46857                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 46858                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 46859                                  
 46860                                  ;DOSDATALAST ENDS
 46861                                  
 46862                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 46863                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 46864                                  ;============================================================================
 46865                                  ;	END
 46866                                  ;============================================================================
 46867                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 46868                                  ; -----------------------------
 46869                                  ; MAY 2019, ISTANBUL - TURKIYE.
